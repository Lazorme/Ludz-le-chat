
Ludz_le_chat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c348  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000027c  0800c408  0800c408  0001c408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c684  0800c684  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  0800c684  0800c684  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c684  0800c684  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c684  0800c684  0001c684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c688  0800c688  0001c688  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  0800c68c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000087e0  20000070  0800c6fc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008850  0800c6fc  00028850  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e6e1  00000000  00000000  000200db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004fe6  00000000  00000000  0003e7bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b08  00000000  00000000  000437a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014d9  00000000  00000000  000452b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c7c1  00000000  00000000  00046789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000237b6  00000000  00000000  00062f4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a5a6a  00000000  00000000  00086700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006934  00000000  00000000  0012c16c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  00132aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800c3f0 	.word	0x0800c3f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800c3f0 	.word	0x0800c3f0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 f8db 	bl	80005d4 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f82b 	bl	8000484 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 f8cd 	bl	80005d4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 f8c3 	bl	80005d4 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 f853 	bl	8000508 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 f849 	bl	8000508 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__eqdf2>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464e      	mov	r6, r9
 8000488:	4645      	mov	r5, r8
 800048a:	46de      	mov	lr, fp
 800048c:	4657      	mov	r7, sl
 800048e:	4690      	mov	r8, r2
 8000490:	b5e0      	push	{r5, r6, r7, lr}
 8000492:	0017      	movs	r7, r2
 8000494:	031a      	lsls	r2, r3, #12
 8000496:	0b12      	lsrs	r2, r2, #12
 8000498:	0005      	movs	r5, r0
 800049a:	4684      	mov	ip, r0
 800049c:	4819      	ldr	r0, [pc, #100]	; (8000504 <__eqdf2+0x80>)
 800049e:	030e      	lsls	r6, r1, #12
 80004a0:	004c      	lsls	r4, r1, #1
 80004a2:	4691      	mov	r9, r2
 80004a4:	005a      	lsls	r2, r3, #1
 80004a6:	0fdb      	lsrs	r3, r3, #31
 80004a8:	469b      	mov	fp, r3
 80004aa:	0b36      	lsrs	r6, r6, #12
 80004ac:	0d64      	lsrs	r4, r4, #21
 80004ae:	0fc9      	lsrs	r1, r1, #31
 80004b0:	0d52      	lsrs	r2, r2, #21
 80004b2:	4284      	cmp	r4, r0
 80004b4:	d019      	beq.n	80004ea <__eqdf2+0x66>
 80004b6:	4282      	cmp	r2, r0
 80004b8:	d010      	beq.n	80004dc <__eqdf2+0x58>
 80004ba:	2001      	movs	r0, #1
 80004bc:	4294      	cmp	r4, r2
 80004be:	d10e      	bne.n	80004de <__eqdf2+0x5a>
 80004c0:	454e      	cmp	r6, r9
 80004c2:	d10c      	bne.n	80004de <__eqdf2+0x5a>
 80004c4:	2001      	movs	r0, #1
 80004c6:	45c4      	cmp	ip, r8
 80004c8:	d109      	bne.n	80004de <__eqdf2+0x5a>
 80004ca:	4559      	cmp	r1, fp
 80004cc:	d017      	beq.n	80004fe <__eqdf2+0x7a>
 80004ce:	2c00      	cmp	r4, #0
 80004d0:	d105      	bne.n	80004de <__eqdf2+0x5a>
 80004d2:	0030      	movs	r0, r6
 80004d4:	4328      	orrs	r0, r5
 80004d6:	1e43      	subs	r3, r0, #1
 80004d8:	4198      	sbcs	r0, r3
 80004da:	e000      	b.n	80004de <__eqdf2+0x5a>
 80004dc:	2001      	movs	r0, #1
 80004de:	bcf0      	pop	{r4, r5, r6, r7}
 80004e0:	46bb      	mov	fp, r7
 80004e2:	46b2      	mov	sl, r6
 80004e4:	46a9      	mov	r9, r5
 80004e6:	46a0      	mov	r8, r4
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ea:	0033      	movs	r3, r6
 80004ec:	2001      	movs	r0, #1
 80004ee:	432b      	orrs	r3, r5
 80004f0:	d1f5      	bne.n	80004de <__eqdf2+0x5a>
 80004f2:	42a2      	cmp	r2, r4
 80004f4:	d1f3      	bne.n	80004de <__eqdf2+0x5a>
 80004f6:	464b      	mov	r3, r9
 80004f8:	433b      	orrs	r3, r7
 80004fa:	d1f0      	bne.n	80004de <__eqdf2+0x5a>
 80004fc:	e7e2      	b.n	80004c4 <__eqdf2+0x40>
 80004fe:	2000      	movs	r0, #0
 8000500:	e7ed      	b.n	80004de <__eqdf2+0x5a>
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	000007ff 	.word	0x000007ff

08000508 <__gedf2>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	4647      	mov	r7, r8
 800050c:	46ce      	mov	lr, r9
 800050e:	0004      	movs	r4, r0
 8000510:	0018      	movs	r0, r3
 8000512:	0016      	movs	r6, r2
 8000514:	031b      	lsls	r3, r3, #12
 8000516:	0b1b      	lsrs	r3, r3, #12
 8000518:	4d2d      	ldr	r5, [pc, #180]	; (80005d0 <__gedf2+0xc8>)
 800051a:	004a      	lsls	r2, r1, #1
 800051c:	4699      	mov	r9, r3
 800051e:	b580      	push	{r7, lr}
 8000520:	0043      	lsls	r3, r0, #1
 8000522:	030f      	lsls	r7, r1, #12
 8000524:	46a4      	mov	ip, r4
 8000526:	46b0      	mov	r8, r6
 8000528:	0b3f      	lsrs	r7, r7, #12
 800052a:	0d52      	lsrs	r2, r2, #21
 800052c:	0fc9      	lsrs	r1, r1, #31
 800052e:	0d5b      	lsrs	r3, r3, #21
 8000530:	0fc0      	lsrs	r0, r0, #31
 8000532:	42aa      	cmp	r2, r5
 8000534:	d021      	beq.n	800057a <__gedf2+0x72>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d013      	beq.n	8000562 <__gedf2+0x5a>
 800053a:	2a00      	cmp	r2, #0
 800053c:	d122      	bne.n	8000584 <__gedf2+0x7c>
 800053e:	433c      	orrs	r4, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <__gedf2+0x42>
 8000544:	464d      	mov	r5, r9
 8000546:	432e      	orrs	r6, r5
 8000548:	d022      	beq.n	8000590 <__gedf2+0x88>
 800054a:	2c00      	cmp	r4, #0
 800054c:	d010      	beq.n	8000570 <__gedf2+0x68>
 800054e:	4281      	cmp	r1, r0
 8000550:	d022      	beq.n	8000598 <__gedf2+0x90>
 8000552:	2002      	movs	r0, #2
 8000554:	3901      	subs	r1, #1
 8000556:	4008      	ands	r0, r1
 8000558:	3801      	subs	r0, #1
 800055a:	bcc0      	pop	{r6, r7}
 800055c:	46b9      	mov	r9, r7
 800055e:	46b0      	mov	r8, r6
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	464d      	mov	r5, r9
 8000564:	432e      	orrs	r6, r5
 8000566:	d129      	bne.n	80005bc <__gedf2+0xb4>
 8000568:	2a00      	cmp	r2, #0
 800056a:	d1f0      	bne.n	800054e <__gedf2+0x46>
 800056c:	433c      	orrs	r4, r7
 800056e:	d1ee      	bne.n	800054e <__gedf2+0x46>
 8000570:	2800      	cmp	r0, #0
 8000572:	d1f2      	bne.n	800055a <__gedf2+0x52>
 8000574:	2001      	movs	r0, #1
 8000576:	4240      	negs	r0, r0
 8000578:	e7ef      	b.n	800055a <__gedf2+0x52>
 800057a:	003d      	movs	r5, r7
 800057c:	4325      	orrs	r5, r4
 800057e:	d11d      	bne.n	80005bc <__gedf2+0xb4>
 8000580:	4293      	cmp	r3, r2
 8000582:	d0ee      	beq.n	8000562 <__gedf2+0x5a>
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1e2      	bne.n	800054e <__gedf2+0x46>
 8000588:	464c      	mov	r4, r9
 800058a:	4326      	orrs	r6, r4
 800058c:	d1df      	bne.n	800054e <__gedf2+0x46>
 800058e:	e7e0      	b.n	8000552 <__gedf2+0x4a>
 8000590:	2000      	movs	r0, #0
 8000592:	2c00      	cmp	r4, #0
 8000594:	d0e1      	beq.n	800055a <__gedf2+0x52>
 8000596:	e7dc      	b.n	8000552 <__gedf2+0x4a>
 8000598:	429a      	cmp	r2, r3
 800059a:	dc0a      	bgt.n	80005b2 <__gedf2+0xaa>
 800059c:	dbe8      	blt.n	8000570 <__gedf2+0x68>
 800059e:	454f      	cmp	r7, r9
 80005a0:	d8d7      	bhi.n	8000552 <__gedf2+0x4a>
 80005a2:	d00e      	beq.n	80005c2 <__gedf2+0xba>
 80005a4:	2000      	movs	r0, #0
 80005a6:	454f      	cmp	r7, r9
 80005a8:	d2d7      	bcs.n	800055a <__gedf2+0x52>
 80005aa:	2900      	cmp	r1, #0
 80005ac:	d0e2      	beq.n	8000574 <__gedf2+0x6c>
 80005ae:	0008      	movs	r0, r1
 80005b0:	e7d3      	b.n	800055a <__gedf2+0x52>
 80005b2:	4243      	negs	r3, r0
 80005b4:	4158      	adcs	r0, r3
 80005b6:	0040      	lsls	r0, r0, #1
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7ce      	b.n	800055a <__gedf2+0x52>
 80005bc:	2002      	movs	r0, #2
 80005be:	4240      	negs	r0, r0
 80005c0:	e7cb      	b.n	800055a <__gedf2+0x52>
 80005c2:	45c4      	cmp	ip, r8
 80005c4:	d8c5      	bhi.n	8000552 <__gedf2+0x4a>
 80005c6:	2000      	movs	r0, #0
 80005c8:	45c4      	cmp	ip, r8
 80005ca:	d2c6      	bcs.n	800055a <__gedf2+0x52>
 80005cc:	e7ed      	b.n	80005aa <__gedf2+0xa2>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	000007ff 	.word	0x000007ff

080005d4 <__ledf2>:
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	4647      	mov	r7, r8
 80005d8:	46ce      	mov	lr, r9
 80005da:	0004      	movs	r4, r0
 80005dc:	0018      	movs	r0, r3
 80005de:	0016      	movs	r6, r2
 80005e0:	031b      	lsls	r3, r3, #12
 80005e2:	0b1b      	lsrs	r3, r3, #12
 80005e4:	4d2c      	ldr	r5, [pc, #176]	; (8000698 <__ledf2+0xc4>)
 80005e6:	004a      	lsls	r2, r1, #1
 80005e8:	4699      	mov	r9, r3
 80005ea:	b580      	push	{r7, lr}
 80005ec:	0043      	lsls	r3, r0, #1
 80005ee:	030f      	lsls	r7, r1, #12
 80005f0:	46a4      	mov	ip, r4
 80005f2:	46b0      	mov	r8, r6
 80005f4:	0b3f      	lsrs	r7, r7, #12
 80005f6:	0d52      	lsrs	r2, r2, #21
 80005f8:	0fc9      	lsrs	r1, r1, #31
 80005fa:	0d5b      	lsrs	r3, r3, #21
 80005fc:	0fc0      	lsrs	r0, r0, #31
 80005fe:	42aa      	cmp	r2, r5
 8000600:	d00d      	beq.n	800061e <__ledf2+0x4a>
 8000602:	42ab      	cmp	r3, r5
 8000604:	d010      	beq.n	8000628 <__ledf2+0x54>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d127      	bne.n	800065a <__ledf2+0x86>
 800060a:	433c      	orrs	r4, r7
 800060c:	2b00      	cmp	r3, #0
 800060e:	d111      	bne.n	8000634 <__ledf2+0x60>
 8000610:	464d      	mov	r5, r9
 8000612:	432e      	orrs	r6, r5
 8000614:	d10e      	bne.n	8000634 <__ledf2+0x60>
 8000616:	2000      	movs	r0, #0
 8000618:	2c00      	cmp	r4, #0
 800061a:	d015      	beq.n	8000648 <__ledf2+0x74>
 800061c:	e00e      	b.n	800063c <__ledf2+0x68>
 800061e:	003d      	movs	r5, r7
 8000620:	4325      	orrs	r5, r4
 8000622:	d110      	bne.n	8000646 <__ledf2+0x72>
 8000624:	4293      	cmp	r3, r2
 8000626:	d118      	bne.n	800065a <__ledf2+0x86>
 8000628:	464d      	mov	r5, r9
 800062a:	432e      	orrs	r6, r5
 800062c:	d10b      	bne.n	8000646 <__ledf2+0x72>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d102      	bne.n	8000638 <__ledf2+0x64>
 8000632:	433c      	orrs	r4, r7
 8000634:	2c00      	cmp	r4, #0
 8000636:	d00b      	beq.n	8000650 <__ledf2+0x7c>
 8000638:	4281      	cmp	r1, r0
 800063a:	d014      	beq.n	8000666 <__ledf2+0x92>
 800063c:	2002      	movs	r0, #2
 800063e:	3901      	subs	r1, #1
 8000640:	4008      	ands	r0, r1
 8000642:	3801      	subs	r0, #1
 8000644:	e000      	b.n	8000648 <__ledf2+0x74>
 8000646:	2002      	movs	r0, #2
 8000648:	bcc0      	pop	{r6, r7}
 800064a:	46b9      	mov	r9, r7
 800064c:	46b0      	mov	r8, r6
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	2800      	cmp	r0, #0
 8000652:	d1f9      	bne.n	8000648 <__ledf2+0x74>
 8000654:	2001      	movs	r0, #1
 8000656:	4240      	negs	r0, r0
 8000658:	e7f6      	b.n	8000648 <__ledf2+0x74>
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1ec      	bne.n	8000638 <__ledf2+0x64>
 800065e:	464c      	mov	r4, r9
 8000660:	4326      	orrs	r6, r4
 8000662:	d1e9      	bne.n	8000638 <__ledf2+0x64>
 8000664:	e7ea      	b.n	800063c <__ledf2+0x68>
 8000666:	429a      	cmp	r2, r3
 8000668:	dd04      	ble.n	8000674 <__ledf2+0xa0>
 800066a:	4243      	negs	r3, r0
 800066c:	4158      	adcs	r0, r3
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	3801      	subs	r0, #1
 8000672:	e7e9      	b.n	8000648 <__ledf2+0x74>
 8000674:	429a      	cmp	r2, r3
 8000676:	dbeb      	blt.n	8000650 <__ledf2+0x7c>
 8000678:	454f      	cmp	r7, r9
 800067a:	d8df      	bhi.n	800063c <__ledf2+0x68>
 800067c:	d006      	beq.n	800068c <__ledf2+0xb8>
 800067e:	2000      	movs	r0, #0
 8000680:	454f      	cmp	r7, r9
 8000682:	d2e1      	bcs.n	8000648 <__ledf2+0x74>
 8000684:	2900      	cmp	r1, #0
 8000686:	d0e5      	beq.n	8000654 <__ledf2+0x80>
 8000688:	0008      	movs	r0, r1
 800068a:	e7dd      	b.n	8000648 <__ledf2+0x74>
 800068c:	45c4      	cmp	ip, r8
 800068e:	d8d5      	bhi.n	800063c <__ledf2+0x68>
 8000690:	2000      	movs	r0, #0
 8000692:	45c4      	cmp	ip, r8
 8000694:	d2d8      	bcs.n	8000648 <__ledf2+0x74>
 8000696:	e7f5      	b.n	8000684 <__ledf2+0xb0>
 8000698:	000007ff 	.word	0x000007ff

0800069c <__aeabi_d2iz>:
 800069c:	000a      	movs	r2, r1
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	4c13      	ldr	r4, [pc, #76]	; (80006f0 <__aeabi_d2iz+0x54>)
 80006a2:	0053      	lsls	r3, r2, #1
 80006a4:	0309      	lsls	r1, r1, #12
 80006a6:	0005      	movs	r5, r0
 80006a8:	0b09      	lsrs	r1, r1, #12
 80006aa:	2000      	movs	r0, #0
 80006ac:	0d5b      	lsrs	r3, r3, #21
 80006ae:	0fd2      	lsrs	r2, r2, #31
 80006b0:	42a3      	cmp	r3, r4
 80006b2:	dd04      	ble.n	80006be <__aeabi_d2iz+0x22>
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <__aeabi_d2iz+0x58>)
 80006b6:	4283      	cmp	r3, r0
 80006b8:	dd02      	ble.n	80006c0 <__aeabi_d2iz+0x24>
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <__aeabi_d2iz+0x5c>)
 80006bc:	18d0      	adds	r0, r2, r3
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	2080      	movs	r0, #128	; 0x80
 80006c2:	0340      	lsls	r0, r0, #13
 80006c4:	4301      	orrs	r1, r0
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <__aeabi_d2iz+0x60>)
 80006c8:	1ac0      	subs	r0, r0, r3
 80006ca:	281f      	cmp	r0, #31
 80006cc:	dd08      	ble.n	80006e0 <__aeabi_d2iz+0x44>
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <__aeabi_d2iz+0x64>)
 80006d0:	1ac3      	subs	r3, r0, r3
 80006d2:	40d9      	lsrs	r1, r3
 80006d4:	000b      	movs	r3, r1
 80006d6:	4258      	negs	r0, r3
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d1f0      	bne.n	80006be <__aeabi_d2iz+0x22>
 80006dc:	0018      	movs	r0, r3
 80006de:	e7ee      	b.n	80006be <__aeabi_d2iz+0x22>
 80006e0:	4c08      	ldr	r4, [pc, #32]	; (8000704 <__aeabi_d2iz+0x68>)
 80006e2:	40c5      	lsrs	r5, r0
 80006e4:	46a4      	mov	ip, r4
 80006e6:	4463      	add	r3, ip
 80006e8:	4099      	lsls	r1, r3
 80006ea:	000b      	movs	r3, r1
 80006ec:	432b      	orrs	r3, r5
 80006ee:	e7f2      	b.n	80006d6 <__aeabi_d2iz+0x3a>
 80006f0:	000003fe 	.word	0x000003fe
 80006f4:	0000041d 	.word	0x0000041d
 80006f8:	7fffffff 	.word	0x7fffffff
 80006fc:	00000433 	.word	0x00000433
 8000700:	00000413 	.word	0x00000413
 8000704:	fffffbed 	.word	0xfffffbed

08000708 <__aeabi_i2d>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	2800      	cmp	r0, #0
 800070c:	d016      	beq.n	800073c <__aeabi_i2d+0x34>
 800070e:	17c3      	asrs	r3, r0, #31
 8000710:	18c5      	adds	r5, r0, r3
 8000712:	405d      	eors	r5, r3
 8000714:	0fc4      	lsrs	r4, r0, #31
 8000716:	0028      	movs	r0, r5
 8000718:	f000 f826 	bl	8000768 <__clzsi2>
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <__aeabi_i2d+0x5c>)
 800071e:	1a1b      	subs	r3, r3, r0
 8000720:	280a      	cmp	r0, #10
 8000722:	dc16      	bgt.n	8000752 <__aeabi_i2d+0x4a>
 8000724:	0002      	movs	r2, r0
 8000726:	002e      	movs	r6, r5
 8000728:	3215      	adds	r2, #21
 800072a:	4096      	lsls	r6, r2
 800072c:	220b      	movs	r2, #11
 800072e:	1a12      	subs	r2, r2, r0
 8000730:	40d5      	lsrs	r5, r2
 8000732:	055b      	lsls	r3, r3, #21
 8000734:	032d      	lsls	r5, r5, #12
 8000736:	0b2d      	lsrs	r5, r5, #12
 8000738:	0d5b      	lsrs	r3, r3, #21
 800073a:	e003      	b.n	8000744 <__aeabi_i2d+0x3c>
 800073c:	2400      	movs	r4, #0
 800073e:	2300      	movs	r3, #0
 8000740:	2500      	movs	r5, #0
 8000742:	2600      	movs	r6, #0
 8000744:	051b      	lsls	r3, r3, #20
 8000746:	432b      	orrs	r3, r5
 8000748:	07e4      	lsls	r4, r4, #31
 800074a:	4323      	orrs	r3, r4
 800074c:	0030      	movs	r0, r6
 800074e:	0019      	movs	r1, r3
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	380b      	subs	r0, #11
 8000754:	4085      	lsls	r5, r0
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	032d      	lsls	r5, r5, #12
 800075a:	2600      	movs	r6, #0
 800075c:	0b2d      	lsrs	r5, r5, #12
 800075e:	0d5b      	lsrs	r3, r3, #21
 8000760:	e7f0      	b.n	8000744 <__aeabi_i2d+0x3c>
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	0000041e 	.word	0x0000041e

08000768 <__clzsi2>:
 8000768:	211c      	movs	r1, #28
 800076a:	2301      	movs	r3, #1
 800076c:	041b      	lsls	r3, r3, #16
 800076e:	4298      	cmp	r0, r3
 8000770:	d301      	bcc.n	8000776 <__clzsi2+0xe>
 8000772:	0c00      	lsrs	r0, r0, #16
 8000774:	3910      	subs	r1, #16
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	4298      	cmp	r0, r3
 800077a:	d301      	bcc.n	8000780 <__clzsi2+0x18>
 800077c:	0a00      	lsrs	r0, r0, #8
 800077e:	3908      	subs	r1, #8
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	4298      	cmp	r0, r3
 8000784:	d301      	bcc.n	800078a <__clzsi2+0x22>
 8000786:	0900      	lsrs	r0, r0, #4
 8000788:	3904      	subs	r1, #4
 800078a:	a202      	add	r2, pc, #8	; (adr r2, 8000794 <__clzsi2+0x2c>)
 800078c:	5c10      	ldrb	r0, [r2, r0]
 800078e:	1840      	adds	r0, r0, r1
 8000790:	4770      	bx	lr
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	02020304 	.word	0x02020304
 8000798:	01010101 	.word	0x01010101
	...

080007a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	230c      	movs	r3, #12
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f00a fec4 	bl	800b540 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ba:	4a35      	ldr	r2, [pc, #212]	; (8000890 <MX_ADC1_Init+0xec>)
 80007bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_ADC1_Init+0xe8>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	05d2      	lsls	r2, r2, #23
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_ADC1_Init+0xe8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_ADC1_Init+0xe8>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	0392      	lsls	r2, r2, #14
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_ADC1_Init+0xe8>)
 80007dc:	2204      	movs	r2, #4
 80007de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_ADC1_Init+0xe8>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC1_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_ADC1_Init+0xe8>)
 8000806:	222c      	movs	r2, #44	; 0x2c
 8000808:	2100      	movs	r1, #0
 800080a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC1_Init+0xe8>)
 8000814:	2206      	movs	r2, #6
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ADC1_Init+0xe8>)
 800081a:	2206      	movs	r2, #6
 800081c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC1_Init+0xe8>)
 8000820:	223c      	movs	r2, #60	; 0x3c
 8000822:	2100      	movs	r1, #0
 8000824:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_ADC1_Init+0xe8>)
 800082e:	0018      	movs	r0, r3
 8000830:	f002 f9cc 	bl	8002bcc <HAL_ADC_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000838:	f000 ffa4 	bl	8001784 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	1d3a      	adds	r2, r7, #4
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_ADC1_Init+0xe8>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f002 fb61 	bl	8002f1c <HAL_ADC_ConfigChannel>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800085e:	f000 ff91 	bl	8001784 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_ADC1_Init+0xf0>)
 8000866:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2204      	movs	r2, #4
 800086c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	1d3a      	adds	r2, r7, #4
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_ADC1_Init+0xe8>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fb51 	bl	8002f1c <HAL_ADC_ConfigChannel>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087e:	f000 ff81 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b004      	add	sp, #16
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	2000008c 	.word	0x2000008c
 8000890:	40012400 	.word	0x40012400
 8000894:	04000002 	.word	0x04000002

08000898 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08b      	sub	sp, #44	; 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	2414      	movs	r4, #20
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f00a fe48 	bl	800b540 <memset>
  if(adcHandle->Instance==ADC1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	; (800096c <HAL_ADC_MspInit+0xd4>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d154      	bne.n	8000964 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0349      	lsls	r1, r1, #13
 80008c4:	430a      	orrs	r2, r1
 80008c6:	641a      	str	r2, [r3, #64]	; 0x40
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	035b      	lsls	r3, r3, #13
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Shunt1_Pin|ADC_Shunt2_Pin;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2203      	movs	r2, #3
 80008f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2203      	movs	r2, #3
 80008f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	193a      	adds	r2, r7, r4
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f002 ffdf 	bl	80038cc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <HAL_ADC_MspInit+0xe0>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000916:	2205      	movs	r2, #5
 8000918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0052      	lsls	r2, r2, #1
 8000932:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fd6c 	bl	8003428 <HAL_DMA_Init>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000954:	f000 ff16 	bl	8001784 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800095c:	651a      	str	r2, [r3, #80]	; 0x50
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b00b      	add	sp, #44	; 0x2c
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	40012400 	.word	0x40012400
 8000970:	40021000 	.word	0x40021000
 8000974:	200000f0 	.word	0x200000f0
 8000978:	40020008 	.word	0x40020008

0800097c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_FREERTOS_Init+0x2c>)
 8000986:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000988:	c313      	stmia	r3!, {r0, r1, r4}
 800098a:	ca03      	ldmia	r2!, {r0, r1}
 800098c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2100      	movs	r1, #0
 8000992:	0018      	movs	r0, r3
 8000994:	f007 fde5 	bl	8008562 <osThreadCreate>
 8000998:	0002      	movs	r2, r0
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <MX_FREERTOS_Init+0x30>)
 800099c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b007      	add	sp, #28
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	0800c414 	.word	0x0800c414
 80009ac:	2000014c 	.word	0x2000014c

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f007 fdfa 	bl	80085b2 <osDelay>
 80009be:	e7fb      	b.n	80009b8 <StartDefaultTask+0x8>

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_DMA_Init+0x48>)
 80009c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_DMA_Init+0x48>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	639a      	str	r2, [r3, #56]	; 0x38
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_DMA_Init+0x48>)
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2103      	movs	r1, #3
 80009e2:	2009      	movs	r0, #9
 80009e4:	f002 fcfa 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e8:	2009      	movs	r0, #9
 80009ea:	f002 fd0c 	bl	8003406 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2103      	movs	r1, #3
 80009f2:	200a      	movs	r0, #10
 80009f4:	f002 fcf2 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f002 fd04 	bl	8003406 <HAL_NVIC_EnableIRQ>

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40021000 	.word	0x40021000

08000a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	2414      	movs	r4, #20
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	0018      	movs	r0, r3
 8000a18:	2314      	movs	r3, #20
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f00a fd8f 	bl	800b540 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a26:	4b74      	ldr	r3, [pc, #464]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2e:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2204      	movs	r2, #4
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b6f      	ldr	r3, [pc, #444]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b6c      	ldr	r3, [pc, #432]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b68      	ldr	r3, [pc, #416]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b66      	ldr	r3, [pc, #408]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a70:	2102      	movs	r1, #2
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b60      	ldr	r3, [pc, #384]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b5d      	ldr	r3, [pc, #372]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a88:	2108      	movs	r1, #8
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b5a      	ldr	r3, [pc, #360]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2208      	movs	r2, #8
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	00d9      	lsls	r1, r3, #3
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f003 f875 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000aaa:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <MX_GPIO_Init+0x1f0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	213f      	movs	r1, #63	; 0x3f
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f003 f86f 	bl	8003b94 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 8000ab6:	4b52      	ldr	r3, [pc, #328]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2118      	movs	r1, #24
 8000abc:	0018      	movs	r0, r3
 8000abe:	f003 f869 	bl	8003b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Bouton1_Pin|Bouton2_Pin;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2288      	movs	r2, #136	; 0x88
 8000acc:	0352      	lsls	r2, r2, #13
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x1f8>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f002 fef5 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton3_Pin;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2288      	movs	r2, #136	; 0x88
 8000aec:	0352      	lsls	r2, r2, #13
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2201      	movs	r2, #1
 8000af4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton3_GPIO_Port, &GPIO_InitStruct);
 8000af6:	193a      	adds	r2, r7, r4
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fee4 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Contact1_Pin|Contact2_Pin|Contact3_Pin|Contact4_Pin
 8000b04:	0021      	movs	r1, r4
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000b0a:	601a      	str	r2, [r3, #0]
                          |Bordure2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2288      	movs	r2, #136	; 0x88
 8000b10:	0352      	lsls	r2, r2, #13
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2202      	movs	r2, #2
 8000b18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	000c      	movs	r4, r1
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f002 fed2 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	00d2      	lsls	r2, r2, #3
 8000b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	000c      	movs	r4, r1
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b46:	193a      	adds	r2, r7, r4
 8000b48:	23a0      	movs	r3, #160	; 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 febc 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	223f      	movs	r2, #63	; 0x3f
 8000b58:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_GPIO_Init+0x1f0>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f002 feaa 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2218      	movs	r2, #24
 8000b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2201      	movs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f002 fe98 	bl	80038cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bordure1_Pin;
 8000b9c:	0021      	movs	r1, r4
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2288      	movs	r2, #136	; 0x88
 8000baa:	0352      	lsls	r2, r2, #13
 8000bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bordure1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000bb8:	0019      	movs	r1, r3
 8000bba:	0010      	movs	r0, r2
 8000bbc:	f002 fe86 	bl	80038cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f002 fc09 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f002 fc1b 	bl	8003406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f002 fc01 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000bda:	2006      	movs	r0, #6
 8000bdc:	f002 fc13 	bl	8003406 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2103      	movs	r1, #3
 8000be4:	2007      	movs	r0, #7
 8000be6:	f002 fbf9 	bl	80033dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f002 fc0b 	bl	8003406 <HAL_NVIC_EnableIRQ>

}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b00b      	add	sp, #44	; 0x2c
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000c00 	.word	0x50000c00
 8000c00:	50000400 	.word	0x50000400
 8000c04:	50000800 	.word	0x50000800
 8000c08:	0000e220 	.word	0x0000e220

08000c0c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
 8000c18:	1d39      	adds	r1, r7, #4
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <__io_putchar+0x20>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f005 fa9b 	bl	8006158 <HAL_UART_Transmit>
	return chr;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200035fc 	.word	0x200035fc

08000c30 <uart_transmit>:
int uart_transmit(uint8_t *p_data, uint16_t size){
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	000a      	movs	r2, r1
 8000c3a:	1cbb      	adds	r3, r7, #2
 8000c3c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, p_data, size, HAL_MAX_DELAY);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425c      	negs	r4, r3
 8000c42:	1cbb      	adds	r3, r7, #2
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <uart_transmit+0x2c>)
 8000c4a:	0023      	movs	r3, r4
 8000c4c:	f005 fa84 	bl	8006158 <HAL_UART_Transmit>
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b003      	add	sp, #12
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20003690 	.word	0x20003690

08000c60 <uart_it_transmit>:
int uart_it_transmit(uint8_t *p_data, uint16_t size){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	000a      	movs	r2, r1
 8000c6a:	1cbb      	adds	r3, r7, #2
 8000c6c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart4, p_data, size);
 8000c6e:	1cbb      	adds	r3, r7, #2
 8000c70:	881a      	ldrh	r2, [r3, #0]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <uart_it_transmit+0x28>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f005 fbec 	bl	8006454 <HAL_UART_Transmit_IT>
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20003690 	.word	0x20003690

08000c8c <uart_dma_transmit>:
int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	000a      	movs	r2, r1
 8000c96:	1cbb      	adds	r3, r7, #2
 8000c98:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart4, p_data, size);
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	881a      	ldrh	r2, [r3, #0]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <uart_dma_transmit+0x28>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f005 fcd6 	bl	8006654 <HAL_UART_Transmit_DMA>
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20003690 	.word	0x20003690

08000cb8 <uart_poll_receive>:
int uart_poll_receive(uint8_t *p_data, uint16_t size){
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	1cbb      	adds	r3, r7, #2
 8000cc4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive(&huart4, p_data, size, HAL_MAX_DELAY);
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	425c      	negs	r4, r3
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <uart_poll_receive+0x2c>)
 8000cd2:	0023      	movs	r3, r4
 8000cd4:	f005 fadc 	bl	8006290 <HAL_UART_Receive>
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b003      	add	sp, #12
 8000ce0:	bd90      	pop	{r4, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20003690 	.word	0x20003690

08000ce8 <uart_it_receive>:
int uart_it_receive(uint8_t *p_data, uint16_t size){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	1cbb      	adds	r3, r7, #2
 8000cf4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart4, p_data, size);
 8000cf6:	1cbb      	adds	r3, r7, #2
 8000cf8:	881a      	ldrh	r2, [r3, #0]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <uart_it_receive+0x28>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f005 fc50 	bl	80065a4 <HAL_UART_Receive_IT>
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20003690 	.word	0x20003690

08000d14 <uart_dma_receive>:
int uart_dma_receive(uint8_t *p_data, uint16_t size){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	1cbb      	adds	r3, r7, #2
 8000d20:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, p_data, size);
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <uart_dma_receive+0x28>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f005 fd24 	bl	8006778 <HAL_UART_Receive_DMA>
	return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20003690 	.word	0x20003690

08000d40 <TaskLIDAR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TaskLIDAR (void * pvParameters){
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	for(;;){
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8000d48:	4bd7      	ldr	r3, [pc, #860]	; (80010a8 <TaskLIDAR+0x368>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4252      	negs	r2, r2
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f007 fdf3 	bl	800893e <xQueueSemaphoreTake>
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e188      	b.n	8001070 <TaskLIDAR+0x330>
			if(i==DATA_BUFF_SIZE/2){
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	23fa      	movs	r3, #250	; 0xfa
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d107      	bne.n	8000d78 <TaskLIDAR+0x38>
				xSemaphoreTake(SemClpCallBack, portMAX_DELAY);
 8000d68:	4bd0      	ldr	r3, [pc, #832]	; (80010ac <TaskLIDAR+0x36c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4252      	negs	r2, r2
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f007 fde3 	bl	800893e <xQueueSemaphoreTake>
			}
			//Réponce à la commande Scan
			if(i==0){
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d14f      	bne.n	8000e1e <TaskLIDAR+0xde>
				if((h_LIDAR.data_buff[i]==0xA5) && (h_LIDAR.data_buff[i+1]==0x5A) && (h_LIDAR.data_buff[i+2]==0x05) && (h_LIDAR.data_buff[i+3]==0x00) && (h_LIDAR.data_buff[i+4]==0x00) && (h_LIDAR.data_buff[i+5]==0x40) && (h_LIDAR.data_buff[i+6]==0x81)){
 8000d7e:	4acc      	ldr	r2, [pc, #816]	; (80010b0 <TaskLIDAR+0x370>)
 8000d80:	2171      	movs	r1, #113	; 0x71
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	18d3      	adds	r3, r2, r3
 8000d86:	185b      	adds	r3, r3, r1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2ba5      	cmp	r3, #165	; 0xa5
 8000d8c:	d147      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4ac7      	ldr	r2, [pc, #796]	; (80010b0 <TaskLIDAR+0x370>)
 8000d94:	2171      	movs	r1, #113	; 0x71
 8000d96:	18d3      	adds	r3, r2, r3
 8000d98:	185b      	adds	r3, r3, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b5a      	cmp	r3, #90	; 0x5a
 8000d9e:	d13e      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3302      	adds	r3, #2
 8000da4:	4ac2      	ldr	r2, [pc, #776]	; (80010b0 <TaskLIDAR+0x370>)
 8000da6:	2171      	movs	r1, #113	; 0x71
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	185b      	adds	r3, r3, r1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	d135      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3303      	adds	r3, #3
 8000db6:	4abe      	ldr	r2, [pc, #760]	; (80010b0 <TaskLIDAR+0x370>)
 8000db8:	2171      	movs	r1, #113	; 0x71
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	185b      	adds	r3, r3, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d12c      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	4ab9      	ldr	r2, [pc, #740]	; (80010b0 <TaskLIDAR+0x370>)
 8000dca:	2171      	movs	r1, #113	; 0x71
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	185b      	adds	r3, r3, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d123      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3305      	adds	r3, #5
 8000dda:	4ab5      	ldr	r2, [pc, #724]	; (80010b0 <TaskLIDAR+0x370>)
 8000ddc:	2171      	movs	r1, #113	; 0x71
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	185b      	adds	r3, r3, r1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b40      	cmp	r3, #64	; 0x40
 8000de6:	d11a      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3306      	adds	r3, #6
 8000dec:	4ab0      	ldr	r2, [pc, #704]	; (80010b0 <TaskLIDAR+0x370>)
 8000dee:	2171      	movs	r1, #113	; 0x71
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	185b      	adds	r3, r3, r1
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b81      	cmp	r3, #129	; 0x81
 8000df8:	d111      	bne.n	8000e1e <TaskLIDAR+0xde>
					printf("Scan Command Reply\r\n");
 8000dfa:	4bae      	ldr	r3, [pc, #696]	; (80010b4 <TaskLIDAR+0x374>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f00a fa6f 	bl	800b2e0 <puts>
					h_LIDAR.processing.idx=0;
 8000e02:	4bab      	ldr	r3, [pc, #684]	; (80010b0 <TaskLIDAR+0x370>)
 8000e04:	4aac      	ldr	r2, [pc, #688]	; (80010b8 <TaskLIDAR+0x378>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	5499      	strb	r1, [r3, r2]
					i=6;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	60fb      	str	r3, [r7, #12]
					frame_start=7;
 8000e0e:	4bab      	ldr	r3, [pc, #684]	; (80010bc <TaskLIDAR+0x37c>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
					frame_end=frame_start+4;
 8000e14:	4ba9      	ldr	r3, [pc, #676]	; (80010bc <TaskLIDAR+0x37c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1d1a      	adds	r2, r3, #4
 8000e1a:	4ba9      	ldr	r3, [pc, #676]	; (80010c0 <TaskLIDAR+0x380>)
 8000e1c:	601a      	str	r2, [r3, #0]
				}
			}

			if(i==frame_start){
 8000e1e:	4ba7      	ldr	r3, [pc, #668]	; (80010bc <TaskLIDAR+0x37c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d10a      	bne.n	8000e3e <TaskLIDAR+0xfe>
				h_LIDAR.processing.PH=h_LIDAR.data_buff[i];
 8000e28:	4aa1      	ldr	r2, [pc, #644]	; (80010b0 <TaskLIDAR+0x370>)
 8000e2a:	2171      	movs	r1, #113	; 0x71
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	185b      	adds	r3, r3, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b299      	uxth	r1, r3
 8000e36:	4b9e      	ldr	r3, [pc, #632]	; (80010b0 <TaskLIDAR+0x370>)
 8000e38:	4aa2      	ldr	r2, [pc, #648]	; (80010c4 <TaskLIDAR+0x384>)
 8000e3a:	5299      	strh	r1, [r3, r2]
 8000e3c:	e115      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+1){
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	; (80010bc <TaskLIDAR+0x37c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d112      	bne.n	8000e70 <TaskLIDAR+0x130>
				h_LIDAR.processing.PH=h_LIDAR.processing.PH|(h_LIDAR.data_buff[i]<<8);
 8000e4a:	4b99      	ldr	r3, [pc, #612]	; (80010b0 <TaskLIDAR+0x370>)
 8000e4c:	4a9d      	ldr	r2, [pc, #628]	; (80010c4 <TaskLIDAR+0x384>)
 8000e4e:	5a9b      	ldrh	r3, [r3, r2]
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	4997      	ldr	r1, [pc, #604]	; (80010b0 <TaskLIDAR+0x370>)
 8000e54:	2071      	movs	r0, #113	; 0x71
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	18cb      	adds	r3, r1, r3
 8000e5a:	181b      	adds	r3, r3, r0
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b299      	uxth	r1, r3
 8000e68:	4b91      	ldr	r3, [pc, #580]	; (80010b0 <TaskLIDAR+0x370>)
 8000e6a:	4a96      	ldr	r2, [pc, #600]	; (80010c4 <TaskLIDAR+0x384>)
 8000e6c:	5299      	strh	r1, [r3, r2]
 8000e6e:	e0fc      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+2){
 8000e70:	4b92      	ldr	r3, [pc, #584]	; (80010bc <TaskLIDAR+0x37c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d109      	bne.n	8000e90 <TaskLIDAR+0x150>
				h_LIDAR.processing.CT=h_LIDAR.data_buff[i];
 8000e7c:	4a8c      	ldr	r2, [pc, #560]	; (80010b0 <TaskLIDAR+0x370>)
 8000e7e:	2171      	movs	r1, #113	; 0x71
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	185b      	adds	r3, r3, r1
 8000e86:	7819      	ldrb	r1, [r3, #0]
 8000e88:	4b89      	ldr	r3, [pc, #548]	; (80010b0 <TaskLIDAR+0x370>)
 8000e8a:	4a8f      	ldr	r2, [pc, #572]	; (80010c8 <TaskLIDAR+0x388>)
 8000e8c:	5499      	strb	r1, [r3, r2]
 8000e8e:	e0ec      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+3){
 8000e90:	4b8a      	ldr	r3, [pc, #552]	; (80010bc <TaskLIDAR+0x37c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3303      	adds	r3, #3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d117      	bne.n	8000ecc <TaskLIDAR+0x18c>
				frame_end=frame_start+9+2*h_LIDAR.data_buff[i];
 8000e9c:	4b87      	ldr	r3, [pc, #540]	; (80010bc <TaskLIDAR+0x37c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3309      	adds	r3, #9
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4982      	ldr	r1, [pc, #520]	; (80010b0 <TaskLIDAR+0x370>)
 8000ea6:	2071      	movs	r0, #113	; 0x71
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	18cb      	adds	r3, r1, r3
 8000eac:	181b      	adds	r3, r3, r0
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	18d2      	adds	r2, r2, r3
 8000eb4:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <TaskLIDAR+0x380>)
 8000eb6:	601a      	str	r2, [r3, #0]
				h_LIDAR.processing.LSN=h_LIDAR.data_buff[i];
 8000eb8:	4a7d      	ldr	r2, [pc, #500]	; (80010b0 <TaskLIDAR+0x370>)
 8000eba:	2171      	movs	r1, #113	; 0x71
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	185b      	adds	r3, r3, r1
 8000ec2:	7819      	ldrb	r1, [r3, #0]
 8000ec4:	4b7a      	ldr	r3, [pc, #488]	; (80010b0 <TaskLIDAR+0x370>)
 8000ec6:	4a81      	ldr	r2, [pc, #516]	; (80010cc <TaskLIDAR+0x38c>)
 8000ec8:	5499      	strb	r1, [r3, r2]
 8000eca:	e0ce      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+4){
 8000ecc:	4b7b      	ldr	r3, [pc, #492]	; (80010bc <TaskLIDAR+0x37c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10a      	bne.n	8000eee <TaskLIDAR+0x1ae>
				h_LIDAR.processing.FSA=h_LIDAR.data_buff[i];
 8000ed8:	4a75      	ldr	r2, [pc, #468]	; (80010b0 <TaskLIDAR+0x370>)
 8000eda:	2171      	movs	r1, #113	; 0x71
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	185b      	adds	r3, r3, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <TaskLIDAR+0x370>)
 8000ee8:	4a79      	ldr	r2, [pc, #484]	; (80010d0 <TaskLIDAR+0x390>)
 8000eea:	5299      	strh	r1, [r3, r2]
 8000eec:	e0bd      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+5){
 8000eee:	4b73      	ldr	r3, [pc, #460]	; (80010bc <TaskLIDAR+0x37c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3305      	adds	r3, #5
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d112      	bne.n	8000f20 <TaskLIDAR+0x1e0>
				h_LIDAR.processing.FSA=h_LIDAR.processing.FSA|(h_LIDAR.data_buff[i]<<8);
 8000efa:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <TaskLIDAR+0x370>)
 8000efc:	4a74      	ldr	r2, [pc, #464]	; (80010d0 <TaskLIDAR+0x390>)
 8000efe:	5a9b      	ldrh	r3, [r3, r2]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	496b      	ldr	r1, [pc, #428]	; (80010b0 <TaskLIDAR+0x370>)
 8000f04:	2071      	movs	r0, #113	; 0x71
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	18cb      	adds	r3, r1, r3
 8000f0a:	181b      	adds	r3, r3, r0
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	b299      	uxth	r1, r3
 8000f18:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <TaskLIDAR+0x370>)
 8000f1a:	4a6d      	ldr	r2, [pc, #436]	; (80010d0 <TaskLIDAR+0x390>)
 8000f1c:	5299      	strh	r1, [r3, r2]
 8000f1e:	e0a4      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+6){
 8000f20:	4b66      	ldr	r3, [pc, #408]	; (80010bc <TaskLIDAR+0x37c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3306      	adds	r3, #6
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d10a      	bne.n	8000f42 <TaskLIDAR+0x202>
				h_LIDAR.processing.LSA=h_LIDAR.data_buff[i];
 8000f2c:	4a60      	ldr	r2, [pc, #384]	; (80010b0 <TaskLIDAR+0x370>)
 8000f2e:	2171      	movs	r1, #113	; 0x71
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	18d3      	adds	r3, r2, r3
 8000f34:	185b      	adds	r3, r3, r1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b299      	uxth	r1, r3
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <TaskLIDAR+0x370>)
 8000f3c:	4a65      	ldr	r2, [pc, #404]	; (80010d4 <TaskLIDAR+0x394>)
 8000f3e:	5299      	strh	r1, [r3, r2]
 8000f40:	e093      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+7){
 8000f42:	4b5e      	ldr	r3, [pc, #376]	; (80010bc <TaskLIDAR+0x37c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3307      	adds	r3, #7
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d112      	bne.n	8000f74 <TaskLIDAR+0x234>
				h_LIDAR.processing.LSA=h_LIDAR.processing.LSA|(h_LIDAR.data_buff[i]<<8);
 8000f4e:	4b58      	ldr	r3, [pc, #352]	; (80010b0 <TaskLIDAR+0x370>)
 8000f50:	4a60      	ldr	r2, [pc, #384]	; (80010d4 <TaskLIDAR+0x394>)
 8000f52:	5a9b      	ldrh	r3, [r3, r2]
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4956      	ldr	r1, [pc, #344]	; (80010b0 <TaskLIDAR+0x370>)
 8000f58:	2071      	movs	r0, #113	; 0x71
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	18cb      	adds	r3, r1, r3
 8000f5e:	181b      	adds	r3, r3, r0
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <TaskLIDAR+0x370>)
 8000f6e:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <TaskLIDAR+0x394>)
 8000f70:	5299      	strh	r1, [r3, r2]
 8000f72:	e07a      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+8){
 8000f74:	4b51      	ldr	r3, [pc, #324]	; (80010bc <TaskLIDAR+0x37c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3308      	adds	r3, #8
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d10a      	bne.n	8000f96 <TaskLIDAR+0x256>
				h_LIDAR.processing.CS=h_LIDAR.data_buff[i];
 8000f80:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <TaskLIDAR+0x370>)
 8000f82:	2171      	movs	r1, #113	; 0x71
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	185b      	adds	r3, r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <TaskLIDAR+0x370>)
 8000f90:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <TaskLIDAR+0x398>)
 8000f92:	5299      	strh	r1, [r3, r2]
 8000f94:	e069      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+9){
 8000f96:	4b49      	ldr	r3, [pc, #292]	; (80010bc <TaskLIDAR+0x37c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3309      	adds	r3, #9
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d112      	bne.n	8000fc8 <TaskLIDAR+0x288>
				h_LIDAR.processing.CS=h_LIDAR.processing.CS|(h_LIDAR.data_buff[i]<<8);
 8000fa2:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <TaskLIDAR+0x370>)
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <TaskLIDAR+0x398>)
 8000fa6:	5a9b      	ldrh	r3, [r3, r2]
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4941      	ldr	r1, [pc, #260]	; (80010b0 <TaskLIDAR+0x370>)
 8000fac:	2071      	movs	r0, #113	; 0x71
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	18cb      	adds	r3, r1, r3
 8000fb2:	181b      	adds	r3, r3, r0
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <TaskLIDAR+0x370>)
 8000fc2:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <TaskLIDAR+0x398>)
 8000fc4:	5299      	strh	r1, [r3, r2]
 8000fc6:	e050      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_end){
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <TaskLIDAR+0x380>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d136      	bne.n	8001040 <TaskLIDAR+0x300>
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <TaskLIDAR+0x370>)
 8000fd4:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <TaskLIDAR+0x378>)
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	b2d0      	uxtb	r0, r2
 8000fdc:	4a34      	ldr	r2, [pc, #208]	; (80010b0 <TaskLIDAR+0x370>)
 8000fde:	4936      	ldr	r1, [pc, #216]	; (80010b8 <TaskLIDAR+0x378>)
 8000fe0:	5450      	strb	r0, [r2, r1]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <TaskLIDAR+0x370>)
 8000fe6:	2171      	movs	r1, #113	; 0x71
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	18d3      	adds	r3, r2, r3
 8000fec:	185b      	adds	r3, r3, r1
 8000fee:	7819      	ldrb	r1, [r3, #0]
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <TaskLIDAR+0x370>)
 8000ff2:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <TaskLIDAR+0x39c>)
 8000ff4:	181b      	adds	r3, r3, r0
 8000ff6:	189b      	adds	r3, r3, r2
 8000ff8:	1c0a      	adds	r2, r1, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
				if(frame_end-frame_start>11){
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <TaskLIDAR+0x380>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <TaskLIDAR+0x37c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b0b      	cmp	r3, #11
 8001008:	dd0b      	ble.n	8001022 <TaskLIDAR+0x2e2>
					LIDAR_process_frame(&h_LIDAR); //On récupère les différents points
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <TaskLIDAR+0x370>)
 800100c:	0018      	movs	r0, r3
 800100e:	f009 f85f 	bl	800a0d0 <LIDAR_process_frame>
					medianFilter(&h_LIDAR); //On filtre ces points
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <TaskLIDAR+0x370>)
 8001014:	0018      	movs	r0, r3
 8001016:	f009 f9e3 	bl	800a3e0 <medianFilter>
					find_clusters(&h_LIDAR); //On regroupe ces points
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <TaskLIDAR+0x370>)
 800101c:	0018      	movs	r0, r3
 800101e:	f009 f919 	bl	800a254 <find_clusters>
				}
				h_LIDAR.processing.idx=0;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <TaskLIDAR+0x370>)
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <TaskLIDAR+0x378>)
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]
				frame_start=frame_end+1;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <TaskLIDAR+0x380>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <TaskLIDAR+0x37c>)
 8001032:	601a      	str	r2, [r3, #0]
				frame_end=frame_start+5;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <TaskLIDAR+0x37c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1d5a      	adds	r2, r3, #5
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <TaskLIDAR+0x380>)
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e014      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else{
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <TaskLIDAR+0x370>)
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <TaskLIDAR+0x378>)
 8001044:	5c9b      	ldrb	r3, [r3, r2]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	b2d0      	uxtb	r0, r2
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <TaskLIDAR+0x370>)
 800104c:	491a      	ldr	r1, [pc, #104]	; (80010b8 <TaskLIDAR+0x378>)
 800104e:	5450      	strb	r0, [r2, r1]
 8001050:	0018      	movs	r0, r3
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <TaskLIDAR+0x370>)
 8001054:	2171      	movs	r1, #113	; 0x71
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	185b      	adds	r3, r3, r1
 800105c:	7819      	ldrb	r1, [r3, #0]
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <TaskLIDAR+0x370>)
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <TaskLIDAR+0x39c>)
 8001062:	181b      	adds	r3, r3, r0
 8001064:	189b      	adds	r3, r3, r2
 8001066:	1c0a      	adds	r2, r1, #0
 8001068:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	23fa      	movs	r3, #250	; 0xfa
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	429a      	cmp	r2, r3
 8001078:	da00      	bge.n	800107c <TaskLIDAR+0x33c>
 800107a:	e670      	b.n	8000d5e <TaskLIDAR+0x1e>
			}
		}
		frame_start=frame_start-DATA_BUFF_SIZE;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <TaskLIDAR+0x37c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4917      	ldr	r1, [pc, #92]	; (80010e0 <TaskLIDAR+0x3a0>)
 8001082:	185a      	adds	r2, r3, r1
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <TaskLIDAR+0x37c>)
 8001086:	601a      	str	r2, [r3, #0]
		frame_end=frame_end-DATA_BUFF_SIZE;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <TaskLIDAR+0x380>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	185a      	adds	r2, r3, r1
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <TaskLIDAR+0x380>)
 8001090:	601a      	str	r2, [r3, #0]

		printf("#\r\n");
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <TaskLIDAR+0x3a4>)
 8001094:	0018      	movs	r0, r3
 8001096:	f00a f923 	bl	800b2e0 <puts>
		distance_min=1000;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <TaskLIDAR+0x3a8>)
 800109c:	22fa      	movs	r2, #250	; 0xfa
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	601a      	str	r2, [r3, #0]
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	e04d      	b.n	8001144 <TaskLIDAR+0x404>
 80010a8:	20003310 	.word	0x20003310
 80010ac:	20003314 	.word	0x20003314
 80010b0:	20000150 	.word	0x20000150
 80010b4:	0800c428 	.word	0x0800c428
 80010b8:	0000101e 	.word	0x0000101e
 80010bc:	20003320 	.word	0x20003320
 80010c0:	20003324 	.word	0x20003324
 80010c4:	00001014 	.word	0x00001014
 80010c8:	00001016 	.word	0x00001016
 80010cc:	00001017 	.word	0x00001017
 80010d0:	00001018 	.word	0x00001018
 80010d4:	0000101a 	.word	0x0000101a
 80010d8:	0000101c 	.word	0x0000101c
 80010dc:	00001fbf 	.word	0x00001fbf
 80010e0:	fffff060 	.word	0xfffff060
 80010e4:	0800c43c 	.word	0x0800c43c
 80010e8:	20003318 	.word	0x20003318
			if(h_LIDAR.processing.clusters[i].distance_moyenne<distance_min && h_LIDAR.processing.clusters[i].distance_moyenne !=0){
 80010ec:	498d      	ldr	r1, [pc, #564]	; (8001324 <TaskLIDAR+0x5e4>)
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	488d      	ldr	r0, [pc, #564]	; (8001328 <TaskLIDAR+0x5e8>)
 80010f2:	0013      	movs	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	189b      	adds	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	18cb      	adds	r3, r1, r3
 80010fc:	181b      	adds	r3, r3, r0
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b8a      	ldr	r3, [pc, #552]	; (800132c <TaskLIDAR+0x5ec>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	da1a      	bge.n	800113e <TaskLIDAR+0x3fe>
 8001108:	4986      	ldr	r1, [pc, #536]	; (8001324 <TaskLIDAR+0x5e4>)
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4886      	ldr	r0, [pc, #536]	; (8001328 <TaskLIDAR+0x5e8>)
 800110e:	0013      	movs	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	189b      	adds	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	18cb      	adds	r3, r1, r3
 8001118:	181b      	adds	r3, r3, r0
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00e      	beq.n	800113e <TaskLIDAR+0x3fe>
				distance_min = h_LIDAR.processing.clusters[i].distance_moyenne;
 8001120:	4980      	ldr	r1, [pc, #512]	; (8001324 <TaskLIDAR+0x5e4>)
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	4880      	ldr	r0, [pc, #512]	; (8001328 <TaskLIDAR+0x5e8>)
 8001126:	0013      	movs	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	189b      	adds	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	18cb      	adds	r3, r1, r3
 8001130:	181b      	adds	r3, r3, r0
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b7d      	ldr	r3, [pc, #500]	; (800132c <TaskLIDAR+0x5ec>)
 8001136:	601a      	str	r2, [r3, #0]
				idx_min=i;
 8001138:	4b7d      	ldr	r3, [pc, #500]	; (8001330 <TaskLIDAR+0x5f0>)
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	601a      	str	r2, [r3, #0]
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3301      	adds	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b77      	ldr	r3, [pc, #476]	; (8001324 <TaskLIDAR+0x5e4>)
 8001146:	4a7b      	ldr	r2, [pc, #492]	; (8001334 <TaskLIDAR+0x5f4>)
 8001148:	589b      	ldr	r3, [r3, r2]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbcd      	blt.n	80010ec <TaskLIDAR+0x3ac>
			}
		}
		printf("%d,%d\r\n",h_LIDAR.processing.clusters[idx_min].angle_moyen,h_LIDAR.processing.clusters[idx_min].distance_moyenne);
 8001150:	4b77      	ldr	r3, [pc, #476]	; (8001330 <TaskLIDAR+0x5f0>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4973      	ldr	r1, [pc, #460]	; (8001324 <TaskLIDAR+0x5e4>)
 8001156:	4878      	ldr	r0, [pc, #480]	; (8001338 <TaskLIDAR+0x5f8>)
 8001158:	0013      	movs	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	189b      	adds	r3, r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	18cb      	adds	r3, r1, r3
 8001162:	181b      	adds	r3, r3, r0
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	4b72      	ldr	r3, [pc, #456]	; (8001330 <TaskLIDAR+0x5f0>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	496e      	ldr	r1, [pc, #440]	; (8001324 <TaskLIDAR+0x5e4>)
 800116c:	4c6e      	ldr	r4, [pc, #440]	; (8001328 <TaskLIDAR+0x5e8>)
 800116e:	0013      	movs	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	189b      	adds	r3, r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	18cb      	adds	r3, r1, r3
 8001178:	191b      	adds	r3, r3, r4
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b6f      	ldr	r3, [pc, #444]	; (800133c <TaskLIDAR+0x5fc>)
 800117e:	0001      	movs	r1, r0
 8001180:	0018      	movs	r0, r3
 8001182:	f00a f847 	bl	800b214 <iprintf>


		vitesse = h_LIDAR.processing.clusters[idx_min].distance_moyenne;
 8001186:	4b6a      	ldr	r3, [pc, #424]	; (8001330 <TaskLIDAR+0x5f0>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4966      	ldr	r1, [pc, #408]	; (8001324 <TaskLIDAR+0x5e4>)
 800118c:	4866      	ldr	r0, [pc, #408]	; (8001328 <TaskLIDAR+0x5e8>)
 800118e:	0013      	movs	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	189b      	adds	r3, r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	18cb      	adds	r3, r1, r3
 8001198:	181b      	adds	r3, r3, r0
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b68      	ldr	r3, [pc, #416]	; (8001340 <TaskLIDAR+0x600>)
 800119e:	601a      	str	r2, [r3, #0]
		angle = h_LIDAR.processing.clusters[idx_min].angle_moyen;
 80011a0:	4b63      	ldr	r3, [pc, #396]	; (8001330 <TaskLIDAR+0x5f0>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	495f      	ldr	r1, [pc, #380]	; (8001324 <TaskLIDAR+0x5e4>)
 80011a6:	4864      	ldr	r0, [pc, #400]	; (8001338 <TaskLIDAR+0x5f8>)
 80011a8:	0013      	movs	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	189b      	adds	r3, r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	18cb      	adds	r3, r1, r3
 80011b2:	181b      	adds	r3, r3, r0
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	4b63      	ldr	r3, [pc, #396]	; (8001344 <TaskLIDAR+0x604>)
 80011b8:	601a      	str	r2, [r3, #0]
		//		}
		//		else{
		//			angle = angle_inverse(angle);
		//			ajusterAlphaMoteurs(angle,vitesse, &motor1,&motor2);
		//		}
		if (hunter == 1){
 80011ba:	4b63      	ldr	r3, [pc, #396]	; (8001348 <TaskLIDAR+0x608>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d153      	bne.n	800126a <TaskLIDAR+0x52a>
			if (angle > 180){
 80011c2:	4b60      	ldr	r3, [pc, #384]	; (8001344 <TaskLIDAR+0x604>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	2bb4      	cmp	r3, #180	; 0xb4
 80011c8:	dd21      	ble.n	800120e <TaskLIDAR+0x4ce>
				alpha1 = (180 - angle )*2 + 400 + vitesse;
 80011ca:	4b5e      	ldr	r3, [pc, #376]	; (8001344 <TaskLIDAR+0x604>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	22be      	movs	r2, #190	; 0xbe
 80011d0:	0052      	lsls	r2, r2, #1
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	005a      	lsls	r2, r3, #1
 80011d6:	4b5a      	ldr	r3, [pc, #360]	; (8001340 <TaskLIDAR+0x600>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	18d2      	adds	r2, r2, r3
 80011dc:	4b5b      	ldr	r3, [pc, #364]	; (800134c <TaskLIDAR+0x60c>)
 80011de:	601a      	str	r2, [r3, #0]
				alpha2 = 300 + vitesse/3;
 80011e0:	4b57      	ldr	r3, [pc, #348]	; (8001340 <TaskLIDAR+0x600>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	2103      	movs	r1, #3
 80011e6:	0018      	movs	r0, r3
 80011e8:	f7ff f822 	bl	8000230 <__divsi3>
 80011ec:	0003      	movs	r3, r0
 80011ee:	332d      	adds	r3, #45	; 0x2d
 80011f0:	33ff      	adds	r3, #255	; 0xff
 80011f2:	001a      	movs	r2, r3
 80011f4:	4b56      	ldr	r3, [pc, #344]	; (8001350 <TaskLIDAR+0x610>)
 80011f6:	601a      	str	r2, [r3, #0]
				if (alpha1 > 900 ){
 80011f8:	4b54      	ldr	r3, [pc, #336]	; (800134c <TaskLIDAR+0x60c>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	23e1      	movs	r3, #225	; 0xe1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	429a      	cmp	r2, r3
 8001202:	dd23      	ble.n	800124c <TaskLIDAR+0x50c>
					alpha1 = 900;
 8001204:	4b51      	ldr	r3, [pc, #324]	; (800134c <TaskLIDAR+0x60c>)
 8001206:	22e1      	movs	r2, #225	; 0xe1
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e01e      	b.n	800124c <TaskLIDAR+0x50c>
				}
			}
			else{
				alpha2 = (angle -180)*2 + 400 + vitesse;
 800120e:	4b4d      	ldr	r3, [pc, #308]	; (8001344 <TaskLIDAR+0x604>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	3314      	adds	r3, #20
 8001214:	005a      	lsls	r2, r3, #1
 8001216:	4b4a      	ldr	r3, [pc, #296]	; (8001340 <TaskLIDAR+0x600>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	18d2      	adds	r2, r2, r3
 800121c:	4b4c      	ldr	r3, [pc, #304]	; (8001350 <TaskLIDAR+0x610>)
 800121e:	601a      	str	r2, [r3, #0]
				alpha1 = 300 + vitesse/3 ;
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <TaskLIDAR+0x600>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2103      	movs	r1, #3
 8001226:	0018      	movs	r0, r3
 8001228:	f7ff f802 	bl	8000230 <__divsi3>
 800122c:	0003      	movs	r3, r0
 800122e:	332d      	adds	r3, #45	; 0x2d
 8001230:	33ff      	adds	r3, #255	; 0xff
 8001232:	001a      	movs	r2, r3
 8001234:	4b45      	ldr	r3, [pc, #276]	; (800134c <TaskLIDAR+0x60c>)
 8001236:	601a      	str	r2, [r3, #0]
				if (alpha2 > 900){
 8001238:	4b45      	ldr	r3, [pc, #276]	; (8001350 <TaskLIDAR+0x610>)
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	23e1      	movs	r3, #225	; 0xe1
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	429a      	cmp	r2, r3
 8001242:	dd03      	ble.n	800124c <TaskLIDAR+0x50c>
					alpha2 = 900;
 8001244:	4b42      	ldr	r3, [pc, #264]	; (8001350 <TaskLIDAR+0x610>)
 8001246:	22e1      	movs	r2, #225	; 0xe1
 8001248:	0092      	lsls	r2, r2, #2
 800124a:	601a      	str	r2, [r3, #0]
				}
			}
			motor2.sens = 2;
 800124c:	4b41      	ldr	r3, [pc, #260]	; (8001354 <TaskLIDAR+0x614>)
 800124e:	2202      	movs	r2, #2
 8001250:	609a      	str	r2, [r3, #8]
			motor1.sens =1;
 8001252:	4b41      	ldr	r3, [pc, #260]	; (8001358 <TaskLIDAR+0x618>)
 8001254:	2201      	movs	r2, #1
 8001256:	609a      	str	r2, [r3, #8]
			motor1.alpha = alpha1;
 8001258:	4b3c      	ldr	r3, [pc, #240]	; (800134c <TaskLIDAR+0x60c>)
 800125a:	681a      	ldr	r2, [r3, #0]
 800125c:	4b3e      	ldr	r3, [pc, #248]	; (8001358 <TaskLIDAR+0x618>)
 800125e:	60da      	str	r2, [r3, #12]
			motor2.alpha = alpha2;
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <TaskLIDAR+0x610>)
 8001262:	681a      	ldr	r2, [r3, #0]
 8001264:	4b3b      	ldr	r3, [pc, #236]	; (8001354 <TaskLIDAR+0x614>)
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	e56e      	b.n	8000d48 <TaskLIDAR+0x8>
		}
		else{
			angle = angle_inverse(angle);
 800126a:	4b36      	ldr	r3, [pc, #216]	; (8001344 <TaskLIDAR+0x604>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	0018      	movs	r0, r3
 8001270:	f009 fa56 	bl	800a720 <angle_inverse>
 8001274:	0002      	movs	r2, r0
 8001276:	4b33      	ldr	r3, [pc, #204]	; (8001344 <TaskLIDAR+0x604>)
 8001278:	601a      	str	r2, [r3, #0]
			if (angle > 180){
 800127a:	4b32      	ldr	r3, [pc, #200]	; (8001344 <TaskLIDAR+0x604>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2bb4      	cmp	r3, #180	; 0xb4
 8001280:	dd21      	ble.n	80012c6 <TaskLIDAR+0x586>
				alpha1 = (180 - angle )*2 + 400 + vitesse;
 8001282:	4b30      	ldr	r3, [pc, #192]	; (8001344 <TaskLIDAR+0x604>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	22be      	movs	r2, #190	; 0xbe
 8001288:	0052      	lsls	r2, r2, #1
 800128a:	1ad3      	subs	r3, r2, r3
 800128c:	005a      	lsls	r2, r3, #1
 800128e:	4b2c      	ldr	r3, [pc, #176]	; (8001340 <TaskLIDAR+0x600>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	18d2      	adds	r2, r2, r3
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <TaskLIDAR+0x60c>)
 8001296:	601a      	str	r2, [r3, #0]
				alpha2 = 300 + vitesse/3;
 8001298:	4b29      	ldr	r3, [pc, #164]	; (8001340 <TaskLIDAR+0x600>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2103      	movs	r1, #3
 800129e:	0018      	movs	r0, r3
 80012a0:	f7fe ffc6 	bl	8000230 <__divsi3>
 80012a4:	0003      	movs	r3, r0
 80012a6:	332d      	adds	r3, #45	; 0x2d
 80012a8:	33ff      	adds	r3, #255	; 0xff
 80012aa:	001a      	movs	r2, r3
 80012ac:	4b28      	ldr	r3, [pc, #160]	; (8001350 <TaskLIDAR+0x610>)
 80012ae:	601a      	str	r2, [r3, #0]
				if (alpha1 > 900 ){
 80012b0:	4b26      	ldr	r3, [pc, #152]	; (800134c <TaskLIDAR+0x60c>)
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	23e1      	movs	r3, #225	; 0xe1
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	429a      	cmp	r2, r3
 80012ba:	dd23      	ble.n	8001304 <TaskLIDAR+0x5c4>
					alpha1 = 900;
 80012bc:	4b23      	ldr	r3, [pc, #140]	; (800134c <TaskLIDAR+0x60c>)
 80012be:	22e1      	movs	r2, #225	; 0xe1
 80012c0:	0092      	lsls	r2, r2, #2
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	e01e      	b.n	8001304 <TaskLIDAR+0x5c4>
				}
			}
			else{
				alpha2 = (angle -180)*2 + 400 + vitesse;
 80012c6:	4b1f      	ldr	r3, [pc, #124]	; (8001344 <TaskLIDAR+0x604>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	3314      	adds	r3, #20
 80012cc:	005a      	lsls	r2, r3, #1
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <TaskLIDAR+0x600>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	18d2      	adds	r2, r2, r3
 80012d4:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <TaskLIDAR+0x610>)
 80012d6:	601a      	str	r2, [r3, #0]
				alpha1 = 300 + vitesse/3 ;
 80012d8:	4b19      	ldr	r3, [pc, #100]	; (8001340 <TaskLIDAR+0x600>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2103      	movs	r1, #3
 80012de:	0018      	movs	r0, r3
 80012e0:	f7fe ffa6 	bl	8000230 <__divsi3>
 80012e4:	0003      	movs	r3, r0
 80012e6:	332d      	adds	r3, #45	; 0x2d
 80012e8:	33ff      	adds	r3, #255	; 0xff
 80012ea:	001a      	movs	r2, r3
 80012ec:	4b17      	ldr	r3, [pc, #92]	; (800134c <TaskLIDAR+0x60c>)
 80012ee:	601a      	str	r2, [r3, #0]
				if (alpha2 > 900){
 80012f0:	4b17      	ldr	r3, [pc, #92]	; (8001350 <TaskLIDAR+0x610>)
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	23e1      	movs	r3, #225	; 0xe1
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	429a      	cmp	r2, r3
 80012fa:	dd03      	ble.n	8001304 <TaskLIDAR+0x5c4>
					alpha2 = 900;
 80012fc:	4b14      	ldr	r3, [pc, #80]	; (8001350 <TaskLIDAR+0x610>)
 80012fe:	22e1      	movs	r2, #225	; 0xe1
 8001300:	0092      	lsls	r2, r2, #2
 8001302:	601a      	str	r2, [r3, #0]
				}
			}

			motor2.sens = 1;
 8001304:	4b13      	ldr	r3, [pc, #76]	; (8001354 <TaskLIDAR+0x614>)
 8001306:	2201      	movs	r2, #1
 8001308:	609a      	str	r2, [r3, #8]
			motor1.sens =2;
 800130a:	4b13      	ldr	r3, [pc, #76]	; (8001358 <TaskLIDAR+0x618>)
 800130c:	2202      	movs	r2, #2
 800130e:	609a      	str	r2, [r3, #8]
			motor1.alpha =   alpha2;
 8001310:	4b0f      	ldr	r3, [pc, #60]	; (8001350 <TaskLIDAR+0x610>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4b10      	ldr	r3, [pc, #64]	; (8001358 <TaskLIDAR+0x618>)
 8001316:	60da      	str	r2, [r3, #12]
			motor2.alpha =   alpha1;
 8001318:	4b0c      	ldr	r3, [pc, #48]	; (800134c <TaskLIDAR+0x60c>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <TaskLIDAR+0x614>)
 800131e:	60da      	str	r2, [r3, #12]
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8001320:	e512      	b.n	8000d48 <TaskLIDAR+0x8>
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	20000150 	.word	0x20000150
 8001328:	00002b60 	.word	0x00002b60
 800132c:	20003318 	.word	0x20003318
 8001330:	2000331c 	.word	0x2000331c
 8001334:	0000300c 	.word	0x0000300c
 8001338:	00002b5c 	.word	0x00002b5c
 800133c:	0800c440 	.word	0x0800c440
 8001340:	20003304 	.word	0x20003304
 8001344:	20003300 	.word	0x20003300
 8001348:	20000000 	.word	0x20000000
 800134c:	20003308 	.word	0x20003308
 8001350:	2000330c 	.word	0x2000330c
 8001354:	20003228 	.word	0x20003228
 8001358:	20003160 	.word	0x20003160

0800135c <TaskMOTOR>:

		}
	}
}

void TaskMOTOR (void * pvParameters){
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b0b1      	sub	sp, #196	; 0xc4
 8001360:	af2e      	add	r7, sp, #184	; 0xb8
 8001362:	6078      	str	r0, [r7, #4]
	for(;;){
		update_motor(motor1);
 8001364:	4c10      	ldr	r4, [pc, #64]	; (80013a8 <TaskMOTOR+0x4c>)
 8001366:	466b      	mov	r3, sp
 8001368:	0018      	movs	r0, r3
 800136a:	0023      	movs	r3, r4
 800136c:	3310      	adds	r3, #16
 800136e:	22b8      	movs	r2, #184	; 0xb8
 8001370:	0019      	movs	r1, r3
 8001372:	f00a f967 	bl	800b644 <memcpy>
 8001376:	6820      	ldr	r0, [r4, #0]
 8001378:	6861      	ldr	r1, [r4, #4]
 800137a:	68a2      	ldr	r2, [r4, #8]
 800137c:	68e3      	ldr	r3, [r4, #12]
 800137e:	f009 fa77 	bl	800a870 <update_motor>
		update_motor(motor2);
 8001382:	4c0a      	ldr	r4, [pc, #40]	; (80013ac <TaskMOTOR+0x50>)
 8001384:	466b      	mov	r3, sp
 8001386:	0018      	movs	r0, r3
 8001388:	0023      	movs	r3, r4
 800138a:	3310      	adds	r3, #16
 800138c:	22b8      	movs	r2, #184	; 0xb8
 800138e:	0019      	movs	r1, r3
 8001390:	f00a f958 	bl	800b644 <memcpy>
 8001394:	6820      	ldr	r0, [r4, #0]
 8001396:	6861      	ldr	r1, [r4, #4]
 8001398:	68a2      	ldr	r2, [r4, #8]
 800139a:	68e3      	ldr	r3, [r4, #12]
 800139c:	f009 fa68 	bl	800a870 <update_motor>
		vTaskDelay(50);
 80013a0:	2032      	movs	r0, #50	; 0x32
 80013a2:	f007 fd5f 	bl	8008e64 <vTaskDelay>
		update_motor(motor1);
 80013a6:	e7dd      	b.n	8001364 <TaskMOTOR+0x8>
 80013a8:	20003160 	.word	0x20003160
 80013ac:	20003228 	.word	0x20003228

080013b0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80013b0:	b5b0      	push	{r4, r5, r7, lr}
 80013b2:	b090      	sub	sp, #64	; 0x40
 80013b4:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80013b6:	f001 fa95 	bl	80028e4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80013ba:	f000 f93b 	bl	8001634 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80013be:	f7ff fb25 	bl	8000a0c <MX_GPIO_Init>
	MX_DMA_Init();
 80013c2:	f7ff fafd 	bl	80009c0 <MX_DMA_Init>
	MX_ADC1_Init();
 80013c6:	f7ff f9ed 	bl	80007a4 <MX_ADC1_Init>
	MX_TIM1_Init();
 80013ca:	f000 fc37 	bl	8001c3c <MX_TIM1_Init>
	MX_TIM3_Init();
 80013ce:	f000 fc9f 	bl	8001d10 <MX_TIM3_Init>
	MX_TIM14_Init();
 80013d2:	f000 fd3d 	bl	8001e50 <MX_TIM14_Init>
	MX_TIM15_Init();
 80013d6:	f000 fd8b 	bl	8001ef0 <MX_TIM15_Init>
	MX_TIM16_Init();
 80013da:	f000 fe2d 	bl	8002038 <MX_TIM16_Init>
	MX_TIM17_Init();
 80013de:	f000 feb3 	bl	8002148 <MX_TIM17_Init>
	MX_USART1_UART_Init();
 80013e2:	f001 f90b 	bl	80025fc <MX_USART1_UART_Init>
	MX_USART4_UART_Init();
 80013e6:	f001 f957 	bl	8002698 <MX_USART4_UART_Init>
	MX_SPI1_Init();
 80013ea:	f000 f9d1 	bl	8001790 <MX_SPI1_Init>
	MX_TIM6_Init();
 80013ee:	f000 fcf3 	bl	8001dd8 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	h_LIDAR.serial_drv.transmit=uart_transmit;
 80013f2:	4b75      	ldr	r3, [pc, #468]	; (80015c8 <main+0x218>)
 80013f4:	4a75      	ldr	r2, [pc, #468]	; (80015cc <main+0x21c>)
 80013f6:	601a      	str	r2, [r3, #0]
	h_LIDAR.serial_drv.it_transmit=uart_it_transmit;
 80013f8:	4b73      	ldr	r3, [pc, #460]	; (80015c8 <main+0x218>)
 80013fa:	4a75      	ldr	r2, [pc, #468]	; (80015d0 <main+0x220>)
 80013fc:	605a      	str	r2, [r3, #4]
	h_LIDAR.serial_drv.dma_transmit=uart_dma_transmit;
 80013fe:	4b72      	ldr	r3, [pc, #456]	; (80015c8 <main+0x218>)
 8001400:	4a74      	ldr	r2, [pc, #464]	; (80015d4 <main+0x224>)
 8001402:	609a      	str	r2, [r3, #8]
	h_LIDAR.serial_drv.poll_receive=uart_poll_receive;
 8001404:	4b70      	ldr	r3, [pc, #448]	; (80015c8 <main+0x218>)
 8001406:	4a74      	ldr	r2, [pc, #464]	; (80015d8 <main+0x228>)
 8001408:	60da      	str	r2, [r3, #12]
	h_LIDAR.serial_drv.it_receive=uart_it_receive;
 800140a:	4b6f      	ldr	r3, [pc, #444]	; (80015c8 <main+0x218>)
 800140c:	4a73      	ldr	r2, [pc, #460]	; (80015dc <main+0x22c>)
 800140e:	611a      	str	r2, [r3, #16]
	h_LIDAR.serial_drv.dma_receive=uart_dma_receive;
 8001410:	4b6d      	ldr	r3, [pc, #436]	; (80015c8 <main+0x218>)
 8001412:	4a73      	ldr	r2, [pc, #460]	; (80015e0 <main+0x230>)
 8001414:	615a      	str	r2, [r3, #20]

	printf("\r\n===== Driver_LIDAR =====\r\n");
 8001416:	4b73      	ldr	r3, [pc, #460]	; (80015e4 <main+0x234>)
 8001418:	0018      	movs	r0, r3
 800141a:	f009 ff61 	bl	800b2e0 <puts>

	LIDAR_stop(&h_LIDAR);
 800141e:	4b6a      	ldr	r3, [pc, #424]	; (80015c8 <main+0x218>)
 8001420:	0018      	movs	r0, r3
 8001422:	f008 fd0d 	bl	8009e40 <LIDAR_stop>
	HAL_Delay(1000);
 8001426:	23fa      	movs	r3, #250	; 0xfa
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	0018      	movs	r0, r3
 800142c:	f001 fa96 	bl	800295c <HAL_Delay>
	LIDAR_get_info(&h_LIDAR);
 8001430:	4b65      	ldr	r3, [pc, #404]	; (80015c8 <main+0x218>)
 8001432:	0018      	movs	r0, r3
 8001434:	f008 fd1a 	bl	8009e6c <LIDAR_get_info>
	LIDAR_get_health_stat(&h_LIDAR);
 8001438:	4b63      	ldr	r3, [pc, #396]	; (80015c8 <main+0x218>)
 800143a:	0018      	movs	r0, r3
 800143c:	f008 fdec 	bl	800a018 <LIDAR_get_health_stat>

	ret = xTaskCreate(TaskLIDAR,"TaskLIDAR",STACK_SIZE,(void *) NULL,1,&xHandleLIDAR);
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	005a      	lsls	r2, r3, #1
 8001444:	4968      	ldr	r1, [pc, #416]	; (80015e8 <main+0x238>)
 8001446:	4869      	ldr	r0, [pc, #420]	; (80015ec <main+0x23c>)
 8001448:	4b69      	ldr	r3, [pc, #420]	; (80015f0 <main+0x240>)
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	2301      	movs	r3, #1
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	2300      	movs	r3, #0
 8001452:	f007 fbd8 	bl	8008c06 <xTaskCreate>
 8001456:	0002      	movs	r2, r0
 8001458:	4b66      	ldr	r3, [pc, #408]	; (80015f4 <main+0x244>)
 800145a:	601a      	str	r2, [r3, #0]
	if (ret != pdPASS)
 800145c:	4b65      	ldr	r3, [pc, #404]	; (80015f4 <main+0x244>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	2b01      	cmp	r3, #1
 8001462:	d005      	beq.n	8001470 <main+0xc0>
	{
		printf("Error creating TaskLIDAR\r\n");
 8001464:	4b64      	ldr	r3, [pc, #400]	; (80015f8 <main+0x248>)
 8001466:	0018      	movs	r0, r3
 8001468:	f009 ff3a 	bl	800b2e0 <puts>
		Error_Handler();
 800146c:	f000 f98a 	bl	8001784 <Error_Handler>
	}
	printf("Task LIDAR created\r\n");
 8001470:	4b62      	ldr	r3, [pc, #392]	; (80015fc <main+0x24c>)
 8001472:	0018      	movs	r0, r3
 8001474:	f009 ff34 	bl	800b2e0 <puts>

	ret = xTaskCreate(TaskMOTOR,"TaskMOTOR",STACK_SIZE,(void *) NULL,1,&xHandleMOTOR);
 8001478:	2380      	movs	r3, #128	; 0x80
 800147a:	005a      	lsls	r2, r3, #1
 800147c:	4960      	ldr	r1, [pc, #384]	; (8001600 <main+0x250>)
 800147e:	4861      	ldr	r0, [pc, #388]	; (8001604 <main+0x254>)
 8001480:	4b61      	ldr	r3, [pc, #388]	; (8001608 <main+0x258>)
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	2301      	movs	r3, #1
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2300      	movs	r3, #0
 800148a:	f007 fbbc 	bl	8008c06 <xTaskCreate>
 800148e:	0002      	movs	r2, r0
 8001490:	4b58      	ldr	r3, [pc, #352]	; (80015f4 <main+0x244>)
 8001492:	601a      	str	r2, [r3, #0]
	if (ret != pdPASS)
 8001494:	4b57      	ldr	r3, [pc, #348]	; (80015f4 <main+0x244>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b01      	cmp	r3, #1
 800149a:	d005      	beq.n	80014a8 <main+0xf8>
	{
		printf("Error creating TaskMOTOR\r\n");
 800149c:	4b5b      	ldr	r3, [pc, #364]	; (800160c <main+0x25c>)
 800149e:	0018      	movs	r0, r3
 80014a0:	f009 ff1e 	bl	800b2e0 <puts>
		Error_Handler();
 80014a4:	f000 f96e 	bl	8001784 <Error_Handler>
	}
	printf("Task MOTOR created\r\n");
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <main+0x260>)
 80014aa:	0018      	movs	r0, r3
 80014ac:	f009 ff18 	bl	800b2e0 <puts>

	SemHalfCallBack = xSemaphoreCreateBinary();
 80014b0:	2203      	movs	r2, #3
 80014b2:	2100      	movs	r1, #0
 80014b4:	2001      	movs	r0, #1
 80014b6:	f007 f98d 	bl	80087d4 <xQueueGenericCreate>
 80014ba:	0002      	movs	r2, r0
 80014bc:	4b55      	ldr	r3, [pc, #340]	; (8001614 <main+0x264>)
 80014be:	601a      	str	r2, [r3, #0]
	SemClpCallBack = xSemaphoreCreateBinary();
 80014c0:	2203      	movs	r2, #3
 80014c2:	2100      	movs	r1, #0
 80014c4:	2001      	movs	r0, #1
 80014c6:	f007 f985 	bl	80087d4 <xQueueGenericCreate>
 80014ca:	0002      	movs	r2, r0
 80014cc:	4b52      	ldr	r3, [pc, #328]	; (8001618 <main+0x268>)
 80014ce:	601a      	str	r2, [r3, #0]

	//init task capt
	capt_init();
 80014d0:	f009 f8b6 	bl	800a640 <capt_init>
	// fin init tzsk capt

	LIDAR_start(&h_LIDAR);
 80014d4:	4b3c      	ldr	r3, [pc, #240]	; (80015c8 <main+0x218>)
 80014d6:	0018      	movs	r0, r3
 80014d8:	f008 fc94 	bl	8009e04 <LIDAR_start>
	//Initialisation
	motor_Init(&motor1,&motor2);
 80014dc:	4a4f      	ldr	r2, [pc, #316]	; (800161c <main+0x26c>)
 80014de:	4b50      	ldr	r3, [pc, #320]	; (8001620 <main+0x270>)
 80014e0:	0011      	movs	r1, r2
 80014e2:	0018      	movs	r0, r3
 80014e4:	f009 f964 	bl	800a7b0 <motor_Init>
	motor1.sens = 1;
 80014e8:	4b4d      	ldr	r3, [pc, #308]	; (8001620 <main+0x270>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	609a      	str	r2, [r3, #8]
	motor1.old_sens = 1;
 80014ee:	4b4c      	ldr	r3, [pc, #304]	; (8001620 <main+0x270>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	621a      	str	r2, [r3, #32]
	motor1.pwm_start(motor1.Timer_Backward,motor1.Channel_Backward);
 80014f4:	4b4a      	ldr	r3, [pc, #296]	; (8001620 <main+0x270>)
 80014f6:	22bc      	movs	r2, #188	; 0xbc
 80014f8:	589d      	ldr	r5, [r3, r2]
 80014fa:	4b49      	ldr	r3, [pc, #292]	; (8001620 <main+0x270>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4c48      	ldr	r4, [pc, #288]	; (8001620 <main+0x270>)
 8001500:	930f      	str	r3, [sp, #60]	; 0x3c
 8001502:	466b      	mov	r3, sp
 8001504:	0018      	movs	r0, r3
 8001506:	0023      	movs	r3, r4
 8001508:	3380      	adds	r3, #128	; 0x80
 800150a:	223c      	movs	r2, #60	; 0x3c
 800150c:	0019      	movs	r1, r3
 800150e:	f00a f899 	bl	800b644 <memcpy>
 8001512:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001514:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001516:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001518:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 800151a:	47a8      	blx	r5
	motor1.pwm_start(motor1.Timer_Forward,motor1.Channel_Forward);
 800151c:	4b40      	ldr	r3, [pc, #256]	; (8001620 <main+0x270>)
 800151e:	22bc      	movs	r2, #188	; 0xbc
 8001520:	589d      	ldr	r5, [r3, r2]
 8001522:	4b3f      	ldr	r3, [pc, #252]	; (8001620 <main+0x270>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4c3e      	ldr	r4, [pc, #248]	; (8001620 <main+0x270>)
 8001528:	930f      	str	r3, [sp, #60]	; 0x3c
 800152a:	466b      	mov	r3, sp
 800152c:	0018      	movs	r0, r3
 800152e:	0023      	movs	r3, r4
 8001530:	3334      	adds	r3, #52	; 0x34
 8001532:	223c      	movs	r2, #60	; 0x3c
 8001534:	0019      	movs	r1, r3
 8001536:	f00a f885 	bl	800b644 <memcpy>
 800153a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800153c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800153e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8001540:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001542:	47a8      	blx	r5
	motor2.sens = 2;
 8001544:	4b35      	ldr	r3, [pc, #212]	; (800161c <main+0x26c>)
 8001546:	2202      	movs	r2, #2
 8001548:	609a      	str	r2, [r3, #8]
	motor2.old_sens = 2;
 800154a:	4b34      	ldr	r3, [pc, #208]	; (800161c <main+0x26c>)
 800154c:	2202      	movs	r2, #2
 800154e:	621a      	str	r2, [r3, #32]
	motor2.pwm_start(motor2.Timer_Backward,motor2.Channel_Backward);
 8001550:	4b32      	ldr	r3, [pc, #200]	; (800161c <main+0x26c>)
 8001552:	22bc      	movs	r2, #188	; 0xbc
 8001554:	589d      	ldr	r5, [r3, r2]
 8001556:	4b31      	ldr	r3, [pc, #196]	; (800161c <main+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	4c30      	ldr	r4, [pc, #192]	; (800161c <main+0x26c>)
 800155c:	930f      	str	r3, [sp, #60]	; 0x3c
 800155e:	466b      	mov	r3, sp
 8001560:	0018      	movs	r0, r3
 8001562:	0023      	movs	r3, r4
 8001564:	3380      	adds	r3, #128	; 0x80
 8001566:	223c      	movs	r2, #60	; 0x3c
 8001568:	0019      	movs	r1, r3
 800156a:	f00a f86b 	bl	800b644 <memcpy>
 800156e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8001570:	6f61      	ldr	r1, [r4, #116]	; 0x74
 8001572:	6fa2      	ldr	r2, [r4, #120]	; 0x78
 8001574:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
 8001576:	47a8      	blx	r5
	motor2.pwm_start(motor2.Timer_Forward,motor2.Channel_Forward);
 8001578:	4b28      	ldr	r3, [pc, #160]	; (800161c <main+0x26c>)
 800157a:	22bc      	movs	r2, #188	; 0xbc
 800157c:	589d      	ldr	r5, [r3, r2]
 800157e:	4b27      	ldr	r3, [pc, #156]	; (800161c <main+0x26c>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4c26      	ldr	r4, [pc, #152]	; (800161c <main+0x26c>)
 8001584:	930f      	str	r3, [sp, #60]	; 0x3c
 8001586:	466b      	mov	r3, sp
 8001588:	0018      	movs	r0, r3
 800158a:	0023      	movs	r3, r4
 800158c:	3334      	adds	r3, #52	; 0x34
 800158e:	223c      	movs	r2, #60	; 0x3c
 8001590:	0019      	movs	r1, r3
 8001592:	f00a f857 	bl	800b644 <memcpy>
 8001596:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001598:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800159a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800159c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800159e:	47a8      	blx	r5

	//Codeur
	codeur_init(&hCodeurLeft,&htim3,0);
 80015a0:	4920      	ldr	r1, [pc, #128]	; (8001624 <main+0x274>)
 80015a2:	4b21      	ldr	r3, [pc, #132]	; (8001628 <main+0x278>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	0018      	movs	r0, r3
 80015a8:	f009 fd5e 	bl	800b068 <codeur_init>
	codeur_init(&hCodeurRight,&htim1,0);
 80015ac:	491f      	ldr	r1, [pc, #124]	; (800162c <main+0x27c>)
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <main+0x280>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	0018      	movs	r0, r3
 80015b4:	f009 fd58 	bl	800b068 <codeur_init>

	vTaskStartScheduler();
 80015b8:	f007 fc7a 	bl	8008eb0 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80015bc:	f7ff f9de 	bl	800097c <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80015c0:	f006 ffc7 	bl	8008552 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
 80015c4:	e7fe      	b.n	80015c4 <main+0x214>
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000150 	.word	0x20000150
 80015cc:	08000c31 	.word	0x08000c31
 80015d0:	08000c61 	.word	0x08000c61
 80015d4:	08000c8d 	.word	0x08000c8d
 80015d8:	08000cb9 	.word	0x08000cb9
 80015dc:	08000ce9 	.word	0x08000ce9
 80015e0:	08000d15 	.word	0x08000d15
 80015e4:	0800c448 	.word	0x0800c448
 80015e8:	0800c464 	.word	0x0800c464
 80015ec:	08000d41 	.word	0x08000d41
 80015f0:	20003328 	.word	0x20003328
 80015f4:	20003330 	.word	0x20003330
 80015f8:	0800c470 	.word	0x0800c470
 80015fc:	0800c48c 	.word	0x0800c48c
 8001600:	0800c4a0 	.word	0x0800c4a0
 8001604:	0800135d 	.word	0x0800135d
 8001608:	2000332c 	.word	0x2000332c
 800160c:	0800c4ac 	.word	0x0800c4ac
 8001610:	0800c4c8 	.word	0x0800c4c8
 8001614:	20003310 	.word	0x20003310
 8001618:	20003314 	.word	0x20003314
 800161c:	20003228 	.word	0x20003228
 8001620:	20003160 	.word	0x20003160
 8001624:	20003434 	.word	0x20003434
 8001628:	200032f0 	.word	0x200032f0
 800162c:	200033e8 	.word	0x200033e8
 8001630:	200032f8 	.word	0x200032f8

08001634 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001634:	b590      	push	{r4, r7, lr}
 8001636:	b093      	sub	sp, #76	; 0x4c
 8001638:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800163a:	2414      	movs	r4, #20
 800163c:	193b      	adds	r3, r7, r4
 800163e:	0018      	movs	r0, r3
 8001640:	2334      	movs	r3, #52	; 0x34
 8001642:	001a      	movs	r2, r3
 8001644:	2100      	movs	r1, #0
 8001646:	f009 ff7b 	bl	800b540 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800164a:	1d3b      	adds	r3, r7, #4
 800164c:	0018      	movs	r0, r3
 800164e:	2310      	movs	r3, #16
 8001650:	001a      	movs	r2, r3
 8001652:	2100      	movs	r1, #0
 8001654:	f009 ff74 	bl	800b540 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	0018      	movs	r0, r3
 800165e:	f002 fb05 	bl	8003c6c <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001662:	193b      	adds	r3, r7, r4
 8001664:	2202      	movs	r2, #2
 8001666:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001668:	193b      	adds	r3, r7, r4
 800166a:	2280      	movs	r2, #128	; 0x80
 800166c:	0052      	lsls	r2, r2, #1
 800166e:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001670:	0021      	movs	r1, r4
 8001672:	187b      	adds	r3, r7, r1
 8001674:	2200      	movs	r2, #0
 8001676:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001678:	187b      	adds	r3, r7, r1
 800167a:	2240      	movs	r2, #64	; 0x40
 800167c:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167e:	187b      	adds	r3, r7, r1
 8001680:	2202      	movs	r2, #2
 8001682:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001684:	187b      	adds	r3, r7, r1
 8001686:	2202      	movs	r2, #2
 8001688:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800168a:	187b      	adds	r3, r7, r1
 800168c:	2200      	movs	r2, #0
 800168e:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8001690:	187b      	adds	r3, r7, r1
 8001692:	2208      	movs	r2, #8
 8001694:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001696:	187b      	adds	r3, r7, r1
 8001698:	2280      	movs	r2, #128	; 0x80
 800169a:	0292      	lsls	r2, r2, #10
 800169c:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800169e:	187b      	adds	r3, r7, r1
 80016a0:	2280      	movs	r2, #128	; 0x80
 80016a2:	0592      	lsls	r2, r2, #22
 80016a4:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016a6:	187b      	adds	r3, r7, r1
 80016a8:	0018      	movs	r0, r3
 80016aa:	f002 fb2b 	bl	8003d04 <HAL_RCC_OscConfig>
 80016ae:	1e03      	subs	r3, r0, #0
 80016b0:	d001      	beq.n	80016b6 <SystemClock_Config+0x82>
	{
		Error_Handler();
 80016b2:	f000 f867 	bl	8001784 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016b6:	1d3b      	adds	r3, r7, #4
 80016b8:	2207      	movs	r2, #7
 80016ba:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016bc:	1d3b      	adds	r3, r7, #4
 80016be:	2202      	movs	r2, #2
 80016c0:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016c8:	1d3b      	adds	r3, r7, #4
 80016ca:	2200      	movs	r2, #0
 80016cc:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2102      	movs	r1, #2
 80016d2:	0018      	movs	r0, r3
 80016d4:	f002 fe26 	bl	8004324 <HAL_RCC_ClockConfig>
 80016d8:	1e03      	subs	r3, r0, #0
 80016da:	d001      	beq.n	80016e0 <SystemClock_Config+0xac>
	{
		Error_Handler();
 80016dc:	f000 f852 	bl	8001784 <Error_Handler>
	}
}
 80016e0:	46c0      	nop			; (mov r8, r8)
 80016e2:	46bd      	mov	sp, r7
 80016e4:	b013      	add	sp, #76	; 0x4c
 80016e6:	bd90      	pop	{r4, r7, pc}

080016e8 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemHalfCallBack,&higher_priority_task_woken);
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_UART_RxHalfCpltCallback+0x34>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	220c      	movs	r2, #12
 80016fa:	18ba      	adds	r2, r7, r2
 80016fc:	0011      	movs	r1, r2
 80016fe:	0018      	movs	r0, r3
 8001700:	f007 f8b8 	bl	8008874 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_UART_RxHalfCpltCallback+0x2a>
 800170a:	4b05      	ldr	r3, [pc, #20]	; (8001720 <HAL_UART_RxHalfCpltCallback+0x38>)
 800170c:	2280      	movs	r2, #128	; 0x80
 800170e:	0552      	lsls	r2, r2, #21
 8001710:	601a      	str	r2, [r3, #0]
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46bd      	mov	sp, r7
 8001716:	b004      	add	sp, #16
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	20003310 	.word	0x20003310
 8001720:	e000ed04 	.word	0xe000ed04

08001724 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemClpCallBack,&higher_priority_task_woken);
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_UART_RxCpltCallback+0x34>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	220c      	movs	r2, #12
 8001736:	18ba      	adds	r2, r7, r2
 8001738:	0011      	movs	r1, r2
 800173a:	0018      	movs	r0, r3
 800173c:	f007 f89a 	bl	8008874 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2b00      	cmp	r3, #0
 8001744:	d003      	beq.n	800174e <HAL_UART_RxCpltCallback+0x2a>
 8001746:	4b05      	ldr	r3, [pc, #20]	; (800175c <HAL_UART_RxCpltCallback+0x38>)
 8001748:	2280      	movs	r2, #128	; 0x80
 800174a:	0552      	lsls	r2, r2, #21
 800174c:	601a      	str	r2, [r3, #0]
}
 800174e:	46c0      	nop			; (mov r8, r8)
 8001750:	46bd      	mov	sp, r7
 8001752:	b004      	add	sp, #16
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	20003314 	.word	0x20003314
 800175c:	e000ed04 	.word	0xe000ed04

08001760 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a04      	ldr	r2, [pc, #16]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d101      	bne.n	8001776 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001772:	f001 f8d7 	bl	8002924 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001776:	46c0      	nop			; (mov r8, r8)
 8001778:	46bd      	mov	sp, r7
 800177a:	b002      	add	sp, #8
 800177c:	bd80      	pop	{r7, pc}
 800177e:	46c0      	nop			; (mov r8, r8)
 8001780:	40001400 	.word	0x40001400

08001784 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001788:	b672      	cpsid	i
}
 800178a:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800178c:	e7fe      	b.n	800178c <Error_Handler+0x8>
	...

08001790 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001794:	4b1b      	ldr	r3, [pc, #108]	; (8001804 <MX_SPI1_Init+0x74>)
 8001796:	4a1c      	ldr	r2, [pc, #112]	; (8001808 <MX_SPI1_Init+0x78>)
 8001798:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800179a:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <MX_SPI1_Init+0x74>)
 800179c:	2282      	movs	r2, #130	; 0x82
 800179e:	0052      	lsls	r2, r2, #1
 80017a0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017a2:	4b18      	ldr	r3, [pc, #96]	; (8001804 <MX_SPI1_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80017a8:	4b16      	ldr	r3, [pc, #88]	; (8001804 <MX_SPI1_Init+0x74>)
 80017aa:	22c0      	movs	r2, #192	; 0xc0
 80017ac:	0092      	lsls	r2, r2, #2
 80017ae:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017b0:	4b14      	ldr	r3, [pc, #80]	; (8001804 <MX_SPI1_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017b6:	4b13      	ldr	r3, [pc, #76]	; (8001804 <MX_SPI1_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017bc:	4b11      	ldr	r3, [pc, #68]	; (8001804 <MX_SPI1_Init+0x74>)
 80017be:	2280      	movs	r2, #128	; 0x80
 80017c0:	0092      	lsls	r2, r2, #2
 80017c2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80017c4:	4b0f      	ldr	r3, [pc, #60]	; (8001804 <MX_SPI1_Init+0x74>)
 80017c6:	2210      	movs	r2, #16
 80017c8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017ca:	4b0e      	ldr	r3, [pc, #56]	; (8001804 <MX_SPI1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017d0:	4b0c      	ldr	r3, [pc, #48]	; (8001804 <MX_SPI1_Init+0x74>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017d6:	4b0b      	ldr	r3, [pc, #44]	; (8001804 <MX_SPI1_Init+0x74>)
 80017d8:	2200      	movs	r2, #0
 80017da:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80017dc:	4b09      	ldr	r3, [pc, #36]	; (8001804 <MX_SPI1_Init+0x74>)
 80017de:	2207      	movs	r2, #7
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017e2:	4b08      	ldr	r3, [pc, #32]	; (8001804 <MX_SPI1_Init+0x74>)
 80017e4:	2200      	movs	r2, #0
 80017e6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017e8:	4b06      	ldr	r3, [pc, #24]	; (8001804 <MX_SPI1_Init+0x74>)
 80017ea:	2208      	movs	r2, #8
 80017ec:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017ee:	4b05      	ldr	r3, [pc, #20]	; (8001804 <MX_SPI1_Init+0x74>)
 80017f0:	0018      	movs	r0, r3
 80017f2:	f003 f89d 	bl	8004930 <HAL_SPI_Init>
 80017f6:	1e03      	subs	r3, r0, #0
 80017f8:	d001      	beq.n	80017fe <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80017fa:	f7ff ffc3 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017fe:	46c0      	nop			; (mov r8, r8)
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}
 8001804:	20003334 	.word	0x20003334
 8001808:	40013000 	.word	0x40013000

0800180c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800180c:	b590      	push	{r4, r7, lr}
 800180e:	b08b      	sub	sp, #44	; 0x2c
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001814:	2414      	movs	r4, #20
 8001816:	193b      	adds	r3, r7, r4
 8001818:	0018      	movs	r0, r3
 800181a:	2314      	movs	r3, #20
 800181c:	001a      	movs	r2, r3
 800181e:	2100      	movs	r1, #0
 8001820:	f009 fe8e 	bl	800b540 <memset>
  if(spiHandle->Instance==SPI1)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a1b      	ldr	r2, [pc, #108]	; (8001898 <HAL_SPI_MspInit+0x8c>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d130      	bne.n	8001890 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800182e:	4b1b      	ldr	r3, [pc, #108]	; (800189c <HAL_SPI_MspInit+0x90>)
 8001830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001832:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_SPI_MspInit+0x90>)
 8001834:	2180      	movs	r1, #128	; 0x80
 8001836:	0149      	lsls	r1, r1, #5
 8001838:	430a      	orrs	r2, r1
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
 800183c:	4b17      	ldr	r3, [pc, #92]	; (800189c <HAL_SPI_MspInit+0x90>)
 800183e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001840:	2380      	movs	r3, #128	; 0x80
 8001842:	015b      	lsls	r3, r3, #5
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
 8001848:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800184a:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_SPI_MspInit+0x90>)
 800184c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_SPI_MspInit+0x90>)
 8001850:	2101      	movs	r1, #1
 8001852:	430a      	orrs	r2, r1
 8001854:	635a      	str	r2, [r3, #52]	; 0x34
 8001856:	4b11      	ldr	r3, [pc, #68]	; (800189c <HAL_SPI_MspInit+0x90>)
 8001858:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800185a:	2201      	movs	r2, #1
 800185c:	4013      	ands	r3, r2
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_11;
 8001862:	0021      	movs	r1, r4
 8001864:	187b      	adds	r3, r7, r1
 8001866:	4a0e      	ldr	r2, [pc, #56]	; (80018a0 <HAL_SPI_MspInit+0x94>)
 8001868:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186a:	187b      	adds	r3, r7, r1
 800186c:	2202      	movs	r2, #2
 800186e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001870:	187b      	adds	r3, r7, r1
 8001872:	2200      	movs	r2, #0
 8001874:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	187b      	adds	r3, r7, r1
 8001878:	2200      	movs	r2, #0
 800187a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 800187c:	187b      	adds	r3, r7, r1
 800187e:	2200      	movs	r2, #0
 8001880:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001882:	187a      	adds	r2, r7, r1
 8001884:	23a0      	movs	r3, #160	; 0xa0
 8001886:	05db      	lsls	r3, r3, #23
 8001888:	0011      	movs	r1, r2
 800188a:	0018      	movs	r0, r3
 800188c:	f002 f81e 	bl	80038cc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001890:	46c0      	nop			; (mov r8, r8)
 8001892:	46bd      	mov	sp, r7
 8001894:	b00b      	add	sp, #44	; 0x2c
 8001896:	bd90      	pop	{r4, r7, pc}
 8001898:	40013000 	.word	0x40013000
 800189c:	40021000 	.word	0x40021000
 80018a0:	00000824 	.word	0x00000824

080018a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	4b15      	ldr	r3, [pc, #84]	; (8001900 <HAL_MspInit+0x5c>)
 80018ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_MspInit+0x5c>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	430a      	orrs	r2, r1
 80018b4:	641a      	str	r2, [r3, #64]	; 0x40
 80018b6:	4b12      	ldr	r3, [pc, #72]	; (8001900 <HAL_MspInit+0x5c>)
 80018b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ba:	2201      	movs	r2, #1
 80018bc:	4013      	ands	r3, r2
 80018be:	607b      	str	r3, [r7, #4]
 80018c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c2:	4b0f      	ldr	r3, [pc, #60]	; (8001900 <HAL_MspInit+0x5c>)
 80018c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018c6:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_MspInit+0x5c>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0549      	lsls	r1, r1, #21
 80018cc:	430a      	orrs	r2, r1
 80018ce:	63da      	str	r2, [r3, #60]	; 0x3c
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_MspInit+0x5c>)
 80018d2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	055b      	lsls	r3, r3, #21
 80018d8:	4013      	ands	r3, r2
 80018da:	603b      	str	r3, [r7, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80018de:	2302      	movs	r3, #2
 80018e0:	425b      	negs	r3, r3
 80018e2:	2200      	movs	r2, #0
 80018e4:	2103      	movs	r1, #3
 80018e6:	0018      	movs	r0, r3
 80018e8:	f001 fd78 	bl	80033dc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80018ec:	23c0      	movs	r3, #192	; 0xc0
 80018ee:	00db      	lsls	r3, r3, #3
 80018f0:	0018      	movs	r0, r3
 80018f2:	f001 f857 	bl	80029a4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018f6:	46c0      	nop			; (mov r8, r8)
 80018f8:	46bd      	mov	sp, r7
 80018fa:	b002      	add	sp, #8
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	40021000 	.word	0x40021000

08001904 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b08c      	sub	sp, #48	; 0x30
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800190c:	232b      	movs	r3, #43	; 0x2b
 800190e:	18fb      	adds	r3, r7, r3
 8001910:	2200      	movs	r2, #0
 8001912:	701a      	strb	r2, [r3, #0]

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001914:	4b37      	ldr	r3, [pc, #220]	; (80019f4 <HAL_InitTick+0xf0>)
 8001916:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001918:	4b36      	ldr	r3, [pc, #216]	; (80019f4 <HAL_InitTick+0xf0>)
 800191a:	2120      	movs	r1, #32
 800191c:	430a      	orrs	r2, r1
 800191e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001920:	4b34      	ldr	r3, [pc, #208]	; (80019f4 <HAL_InitTick+0xf0>)
 8001922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001924:	2220      	movs	r2, #32
 8001926:	4013      	ands	r3, r2
 8001928:	60bb      	str	r3, [r7, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800192c:	230c      	movs	r3, #12
 800192e:	18fa      	adds	r2, r7, r3
 8001930:	2410      	movs	r4, #16
 8001932:	193b      	adds	r3, r7, r4
 8001934:	0011      	movs	r1, r2
 8001936:	0018      	movs	r0, r3
 8001938:	f002 fe9c 	bl	8004674 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800193c:	193b      	adds	r3, r7, r4
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001944:	2b00      	cmp	r3, #0
 8001946:	d104      	bne.n	8001952 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001948:	f002 fe7e 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 800194c:	0003      	movs	r3, r0
 800194e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001950:	e004      	b.n	800195c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001952:	f002 fe79 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8001956:	0003      	movs	r3, r0
 8001958:	005b      	lsls	r3, r3, #1
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800195c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800195e:	4926      	ldr	r1, [pc, #152]	; (80019f8 <HAL_InitTick+0xf4>)
 8001960:	0018      	movs	r0, r3
 8001962:	f7fe fbdb 	bl	800011c <__udivsi3>
 8001966:	0003      	movs	r3, r0
 8001968:	3b01      	subs	r3, #1
 800196a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 800196c:	4b23      	ldr	r3, [pc, #140]	; (80019fc <HAL_InitTick+0xf8>)
 800196e:	4a24      	ldr	r2, [pc, #144]	; (8001a00 <HAL_InitTick+0xfc>)
 8001970:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8001972:	4b22      	ldr	r3, [pc, #136]	; (80019fc <HAL_InitTick+0xf8>)
 8001974:	4a23      	ldr	r2, [pc, #140]	; (8001a04 <HAL_InitTick+0x100>)
 8001976:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001978:	4b20      	ldr	r3, [pc, #128]	; (80019fc <HAL_InitTick+0xf8>)
 800197a:	6a3a      	ldr	r2, [r7, #32]
 800197c:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 800197e:	4b1f      	ldr	r3, [pc, #124]	; (80019fc <HAL_InitTick+0xf8>)
 8001980:	2200      	movs	r2, #0
 8001982:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001984:	4b1d      	ldr	r3, [pc, #116]	; (80019fc <HAL_InitTick+0xf8>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800198a:	4b1c      	ldr	r3, [pc, #112]	; (80019fc <HAL_InitTick+0xf8>)
 800198c:	2200      	movs	r2, #0
 800198e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 8001990:	252b      	movs	r5, #43	; 0x2b
 8001992:	197c      	adds	r4, r7, r5
 8001994:	4b19      	ldr	r3, [pc, #100]	; (80019fc <HAL_InitTick+0xf8>)
 8001996:	0018      	movs	r0, r3
 8001998:	f003 f882 	bl	8004aa0 <HAL_TIM_Base_Init>
 800199c:	0003      	movs	r3, r0
 800199e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80019a0:	197b      	adds	r3, r7, r5
 80019a2:	781b      	ldrb	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d11e      	bne.n	80019e6 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80019a8:	197c      	adds	r4, r7, r5
 80019aa:	4b14      	ldr	r3, [pc, #80]	; (80019fc <HAL_InitTick+0xf8>)
 80019ac:	0018      	movs	r0, r3
 80019ae:	f003 f91d 	bl	8004bec <HAL_TIM_Base_Start_IT>
 80019b2:	0003      	movs	r3, r0
 80019b4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80019b6:	197b      	adds	r3, r7, r5
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d113      	bne.n	80019e6 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80019be:	2012      	movs	r0, #18
 80019c0:	f001 fd21 	bl	8003406 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d809      	bhi.n	80019de <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	2200      	movs	r2, #0
 80019ce:	0019      	movs	r1, r3
 80019d0:	2012      	movs	r0, #18
 80019d2:	f001 fd03 	bl	80033dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019d6:	4b0c      	ldr	r3, [pc, #48]	; (8001a08 <HAL_InitTick+0x104>)
 80019d8:	687a      	ldr	r2, [r7, #4]
 80019da:	601a      	str	r2, [r3, #0]
 80019dc:	e003      	b.n	80019e6 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 80019de:	232b      	movs	r3, #43	; 0x2b
 80019e0:	18fb      	adds	r3, r7, r3
 80019e2:	2201      	movs	r2, #1
 80019e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 80019e6:	232b      	movs	r3, #43	; 0x2b
 80019e8:	18fb      	adds	r3, r7, r3
 80019ea:	781b      	ldrb	r3, [r3, #0]
}
 80019ec:	0018      	movs	r0, r3
 80019ee:	46bd      	mov	sp, r7
 80019f0:	b00c      	add	sp, #48	; 0x30
 80019f2:	bdb0      	pop	{r4, r5, r7, pc}
 80019f4:	40021000 	.word	0x40021000
 80019f8:	000f4240 	.word	0x000f4240
 80019fc:	20003398 	.word	0x20003398
 8001a00:	40001400 	.word	0x40001400
 8001a04:	000003e7 	.word	0x000003e7
 8001a08:	20000008 	.word	0x20000008

08001a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a10:	e7fe      	b.n	8001a10 <NMI_Handler+0x4>

08001a12 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a16:	e7fe      	b.n	8001a16 <HardFault_Handler+0x4>

08001a18 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton1_Pin);
 8001a1c:	2001      	movs	r0, #1
 8001a1e:	f002 f8f1 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton2_Pin);
 8001a2c:	2008      	movs	r0, #8
 8001a2e:	f002 f8e9 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001a32:	46c0      	nop			; (mov r8, r8)
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton3_Pin);
 8001a3c:	2010      	movs	r0, #16
 8001a3e:	f002 f8e1 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact4_Pin);
 8001a42:	2020      	movs	r0, #32
 8001a44:	f002 f8de 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure1_Pin);
 8001a48:	2380      	movs	r3, #128	; 0x80
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 f8d9 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure2_Pin);
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	0018      	movs	r0, r3
 8001a58:	f002 f8d4 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact1_Pin);
 8001a5c:	2380      	movs	r3, #128	; 0x80
 8001a5e:	019b      	lsls	r3, r3, #6
 8001a60:	0018      	movs	r0, r3
 8001a62:	f002 f8cf 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact2_Pin);
 8001a66:	2380      	movs	r3, #128	; 0x80
 8001a68:	01db      	lsls	r3, r3, #7
 8001a6a:	0018      	movs	r0, r3
 8001a6c:	f002 f8ca 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact3_Pin);
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	021b      	lsls	r3, r3, #8
 8001a74:	0018      	movs	r0, r3
 8001a76:	f002 f8c5 	bl	8003c04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}

08001a80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <DMA1_Channel1_IRQHandler+0x14>)
 8001a86:	0018      	movs	r0, r3
 8001a88:	f001 fdde 	bl	8003648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001a8c:	46c0      	nop			; (mov r8, r8)
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	46c0      	nop			; (mov r8, r8)
 8001a94:	200000f0 	.word	0x200000f0

08001a98 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8001a9c:	4b03      	ldr	r3, [pc, #12]	; (8001aac <DMA1_Channel2_3_IRQHandler+0x14>)
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	f001 fdd2 	bl	8003648 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001aa4:	46c0      	nop			; (mov r8, r8)
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	46c0      	nop			; (mov r8, r8)
 8001aac:	20003724 	.word	0x20003724

08001ab0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ab4:	4b03      	ldr	r3, [pc, #12]	; (8001ac4 <TIM1_CC_IRQHandler+0x14>)
 8001ab6:	0018      	movs	r0, r3
 8001ab8:	f003 fc22 	bl	8005300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001abc:	46c0      	nop			; (mov r8, r8)
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	46c0      	nop			; (mov r8, r8)
 8001ac4:	200033e8 	.word	0x200033e8

08001ac8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001acc:	4b03      	ldr	r3, [pc, #12]	; (8001adc <TIM3_IRQHandler+0x14>)
 8001ace:	0018      	movs	r0, r3
 8001ad0:	f003 fc16 	bl	8005300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	46c0      	nop			; (mov r8, r8)
 8001adc:	20003434 	.word	0x20003434

08001ae0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001ae4:	4b03      	ldr	r3, [pc, #12]	; (8001af4 <TIM7_IRQHandler+0x14>)
 8001ae6:	0018      	movs	r0, r3
 8001ae8:	f003 fc0a 	bl	8005300 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001aec:	46c0      	nop			; (mov r8, r8)
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	20003398 	.word	0x20003398

08001af8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e00a      	b.n	8001b20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001b0a:	e000      	b.n	8001b0e <_read+0x16>
 8001b0c:	bf00      	nop
 8001b0e:	0001      	movs	r1, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf0      	blt.n	8001b0a <_read+0x12>
  }

  return len;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	b006      	add	sp, #24
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e009      	b.n	8001b58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	0018      	movs	r0, r3
 8001b4e:	f7ff f85d 	bl	8000c0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf1      	blt.n	8001b44 <_write+0x12>
  }
  return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	0018      	movs	r0, r3
 8001b64:	46bd      	mov	sp, r7
 8001b66:	b006      	add	sp, #24
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_close>:

int _close(int file)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b72:	2301      	movs	r3, #1
 8001b74:	425b      	negs	r3, r3
}
 8001b76:	0018      	movs	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	b002      	add	sp, #8
 8001b7c:	bd80      	pop	{r7, pc}

08001b7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b082      	sub	sp, #8
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
 8001b86:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	0192      	lsls	r2, r2, #6
 8001b8e:	605a      	str	r2, [r3, #4]
  return 0;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	0018      	movs	r0, r3
 8001b94:	46bd      	mov	sp, r7
 8001b96:	b002      	add	sp, #8
 8001b98:	bd80      	pop	{r7, pc}

08001b9a <_isatty>:

int _isatty(int file)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b082      	sub	sp, #8
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ba2:	2301      	movs	r3, #1
}
 8001ba4:	0018      	movs	r0, r3
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	b002      	add	sp, #8
 8001baa:	bd80      	pop	{r7, pc}

08001bac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	0018      	movs	r0, r3
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	b004      	add	sp, #16
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bcc:	4a14      	ldr	r2, [pc, #80]	; (8001c20 <_sbrk+0x5c>)
 8001bce:	4b15      	ldr	r3, [pc, #84]	; (8001c24 <_sbrk+0x60>)
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001bd8:	4b13      	ldr	r3, [pc, #76]	; (8001c28 <_sbrk+0x64>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d102      	bne.n	8001be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001be0:	4b11      	ldr	r3, [pc, #68]	; (8001c28 <_sbrk+0x64>)
 8001be2:	4a12      	ldr	r2, [pc, #72]	; (8001c2c <_sbrk+0x68>)
 8001be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001be6:	4b10      	ldr	r3, [pc, #64]	; (8001c28 <_sbrk+0x64>)
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	18d3      	adds	r3, r2, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	429a      	cmp	r2, r3
 8001bf2:	d207      	bcs.n	8001c04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bf4:	f009 fcfa 	bl	800b5ec <__errno>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	425b      	negs	r3, r3
 8001c02:	e009      	b.n	8001c18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c04:	4b08      	ldr	r3, [pc, #32]	; (8001c28 <_sbrk+0x64>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	; (8001c28 <_sbrk+0x64>)
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	18d2      	adds	r2, r2, r3
 8001c12:	4b05      	ldr	r3, [pc, #20]	; (8001c28 <_sbrk+0x64>)
 8001c14:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001c16:	68fb      	ldr	r3, [r7, #12]
}
 8001c18:	0018      	movs	r0, r3
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	b006      	add	sp, #24
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20009000 	.word	0x20009000
 8001c24:	00000400 	.word	0x00000400
 8001c28:	200033e4 	.word	0x200033e4
 8001c2c:	20008850 	.word	0x20008850

08001c30 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c34:	46c0      	nop			; (mov r8, r8)
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b08d      	sub	sp, #52	; 0x34
 8001c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c42:	240c      	movs	r4, #12
 8001c44:	193b      	adds	r3, r7, r4
 8001c46:	0018      	movs	r0, r3
 8001c48:	2324      	movs	r3, #36	; 0x24
 8001c4a:	001a      	movs	r2, r3
 8001c4c:	2100      	movs	r1, #0
 8001c4e:	f009 fc77 	bl	800b540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c52:	003b      	movs	r3, r7
 8001c54:	0018      	movs	r0, r3
 8001c56:	230c      	movs	r3, #12
 8001c58:	001a      	movs	r2, r3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	f009 fc70 	bl	800b540 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c60:	4b28      	ldr	r3, [pc, #160]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001c62:	4a29      	ldr	r2, [pc, #164]	; (8001d08 <MX_TIM1_Init+0xcc>)
 8001c64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c66:	4b27      	ldr	r3, [pc, #156]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6c:	4b25      	ldr	r3, [pc, #148]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001c72:	4b24      	ldr	r3, [pc, #144]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001c74:	4a25      	ldr	r2, [pc, #148]	; (8001d0c <MX_TIM1_Init+0xd0>)
 8001c76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c78:	4b22      	ldr	r3, [pc, #136]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c7e:	4b21      	ldr	r3, [pc, #132]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001c80:	2200      	movs	r2, #0
 8001c82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c84:	4b1f      	ldr	r3, [pc, #124]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c8a:	0021      	movs	r1, r4
 8001c8c:	187b      	adds	r3, r7, r1
 8001c8e:	2203      	movs	r2, #3
 8001c90:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c92:	187b      	adds	r3, r7, r1
 8001c94:	2202      	movs	r2, #2
 8001c96:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c98:	187b      	adds	r3, r7, r1
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c9e:	187b      	adds	r3, r7, r1
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001ca4:	187b      	adds	r3, r7, r1
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001caa:	187b      	adds	r3, r7, r1
 8001cac:	2202      	movs	r2, #2
 8001cae:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cb0:	187b      	adds	r3, r7, r1
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cb6:	187b      	adds	r3, r7, r1
 8001cb8:	2200      	movs	r2, #0
 8001cba:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001cbc:	187b      	adds	r3, r7, r1
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001cc2:	187a      	adds	r2, r7, r1
 8001cc4:	4b0f      	ldr	r3, [pc, #60]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001cc6:	0011      	movs	r1, r2
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f003 f9ad 	bl	8005028 <HAL_TIM_Encoder_Init>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001cd2:	f7ff fd57 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cd6:	003b      	movs	r3, r7
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001cdc:	003b      	movs	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce2:	003b      	movs	r3, r7
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ce8:	003a      	movs	r2, r7
 8001cea:	4b06      	ldr	r3, [pc, #24]	; (8001d04 <MX_TIM1_Init+0xc8>)
 8001cec:	0011      	movs	r1, r2
 8001cee:	0018      	movs	r0, r3
 8001cf0:	f004 f8b6 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001cf4:	1e03      	subs	r3, r0, #0
 8001cf6:	d001      	beq.n	8001cfc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001cf8:	f7ff fd44 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cfc:	46c0      	nop			; (mov r8, r8)
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	b00d      	add	sp, #52	; 0x34
 8001d02:	bd90      	pop	{r4, r7, pc}
 8001d04:	200033e8 	.word	0x200033e8
 8001d08:	40012c00 	.word	0x40012c00
 8001d0c:	0000ffff 	.word	0x0000ffff

08001d10 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d10:	b590      	push	{r4, r7, lr}
 8001d12:	b08d      	sub	sp, #52	; 0x34
 8001d14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d16:	240c      	movs	r4, #12
 8001d18:	193b      	adds	r3, r7, r4
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	2324      	movs	r3, #36	; 0x24
 8001d1e:	001a      	movs	r2, r3
 8001d20:	2100      	movs	r1, #0
 8001d22:	f009 fc0d 	bl	800b540 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d26:	003b      	movs	r3, r7
 8001d28:	0018      	movs	r0, r3
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	001a      	movs	r2, r3
 8001d2e:	2100      	movs	r1, #0
 8001d30:	f009 fc06 	bl	800b540 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <MX_TIM3_Init+0xbc>)
 8001d36:	4a26      	ldr	r2, [pc, #152]	; (8001dd0 <MX_TIM3_Init+0xc0>)
 8001d38:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d3a:	4b24      	ldr	r3, [pc, #144]	; (8001dcc <MX_TIM3_Init+0xbc>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d40:	4b22      	ldr	r3, [pc, #136]	; (8001dcc <MX_TIM3_Init+0xbc>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001d46:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <MX_TIM3_Init+0xbc>)
 8001d48:	4a22      	ldr	r2, [pc, #136]	; (8001dd4 <MX_TIM3_Init+0xc4>)
 8001d4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d4c:	4b1f      	ldr	r3, [pc, #124]	; (8001dcc <MX_TIM3_Init+0xbc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <MX_TIM3_Init+0xbc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d58:	0021      	movs	r1, r4
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2203      	movs	r2, #3
 8001d5e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2202      	movs	r2, #2
 8001d64:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2201      	movs	r2, #1
 8001d6a:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	2200      	movs	r2, #0
 8001d70:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	2202      	movs	r2, #2
 8001d7c:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d7e:	187b      	adds	r3, r7, r1
 8001d80:	2201      	movs	r2, #1
 8001d82:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d84:	187b      	adds	r3, r7, r1
 8001d86:	2200      	movs	r2, #0
 8001d88:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001d8a:	187b      	adds	r3, r7, r1
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d90:	187a      	adds	r2, r7, r1
 8001d92:	4b0e      	ldr	r3, [pc, #56]	; (8001dcc <MX_TIM3_Init+0xbc>)
 8001d94:	0011      	movs	r1, r2
 8001d96:	0018      	movs	r0, r3
 8001d98:	f003 f946 	bl	8005028 <HAL_TIM_Encoder_Init>
 8001d9c:	1e03      	subs	r3, r0, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001da0:	f7ff fcf0 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da4:	003b      	movs	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001daa:	003b      	movs	r3, r7
 8001dac:	2200      	movs	r2, #0
 8001dae:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001db0:	003a      	movs	r2, r7
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <MX_TIM3_Init+0xbc>)
 8001db4:	0011      	movs	r1, r2
 8001db6:	0018      	movs	r0, r3
 8001db8:	f004 f852 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	1e03      	subs	r3, r0, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001dc0:	f7ff fce0 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001dc4:	46c0      	nop			; (mov r8, r8)
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	b00d      	add	sp, #52	; 0x34
 8001dca:	bd90      	pop	{r4, r7, pc}
 8001dcc:	20003434 	.word	0x20003434
 8001dd0:	40000400 	.word	0x40000400
 8001dd4:	0000ffff 	.word	0x0000ffff

08001dd8 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	0018      	movs	r0, r3
 8001de2:	230c      	movs	r3, #12
 8001de4:	001a      	movs	r2, r3
 8001de6:	2100      	movs	r1, #0
 8001de8:	f009 fbaa 	bl	800b540 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <MX_TIM6_Init+0x6c>)
 8001dee:	4a16      	ldr	r2, [pc, #88]	; (8001e48 <MX_TIM6_Init+0x70>)
 8001df0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 8001df2:	4b14      	ldr	r3, [pc, #80]	; (8001e44 <MX_TIM6_Init+0x6c>)
 8001df4:	4a15      	ldr	r2, [pc, #84]	; (8001e4c <MX_TIM6_Init+0x74>)
 8001df6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001df8:	4b12      	ldr	r3, [pc, #72]	; (8001e44 <MX_TIM6_Init+0x6c>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001dfe:	4b11      	ldr	r3, [pc, #68]	; (8001e44 <MX_TIM6_Init+0x6c>)
 8001e00:	2263      	movs	r2, #99	; 0x63
 8001e02:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e04:	4b0f      	ldr	r3, [pc, #60]	; (8001e44 <MX_TIM6_Init+0x6c>)
 8001e06:	2200      	movs	r2, #0
 8001e08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <MX_TIM6_Init+0x6c>)
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	f002 fe47 	bl	8004aa0 <HAL_TIM_Base_Init>
 8001e12:	1e03      	subs	r3, r0, #0
 8001e14:	d001      	beq.n	8001e1a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001e16:	f7ff fcb5 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001e1a:	1d3b      	adds	r3, r7, #4
 8001e1c:	2220      	movs	r2, #32
 8001e1e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2200      	movs	r2, #0
 8001e24:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e26:	1d3a      	adds	r2, r7, #4
 8001e28:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <MX_TIM6_Init+0x6c>)
 8001e2a:	0011      	movs	r1, r2
 8001e2c:	0018      	movs	r0, r3
 8001e2e:	f004 f817 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001e32:	1e03      	subs	r3, r0, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001e36:	f7ff fca5 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001e3a:	46c0      	nop			; (mov r8, r8)
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	b004      	add	sp, #16
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	46c0      	nop			; (mov r8, r8)
 8001e44:	20003480 	.word	0x20003480
 8001e48:	40001000 	.word	0x40001000
 8001e4c:	0000f9ff 	.word	0x0000f9ff

08001e50 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b088      	sub	sp, #32
 8001e54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	0018      	movs	r0, r3
 8001e5a:	231c      	movs	r3, #28
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	2100      	movs	r1, #0
 8001e60:	f009 fb6e 	bl	800b540 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001e66:	4a20      	ldr	r2, [pc, #128]	; (8001ee8 <MX_TIM14_Init+0x98>)
 8001e68:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001e6a:	4b1e      	ldr	r3, [pc, #120]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e70:	4b1c      	ldr	r3, [pc, #112]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001e76:	4b1b      	ldr	r3, [pc, #108]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001e78:	4a1c      	ldr	r2, [pc, #112]	; (8001eec <MX_TIM14_Init+0x9c>)
 8001e7a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e82:	4b18      	ldr	r3, [pc, #96]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001e88:	4b16      	ldr	r3, [pc, #88]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001e8a:	0018      	movs	r0, r3
 8001e8c:	f002 fe08 	bl	8004aa0 <HAL_TIM_Base_Init>
 8001e90:	1e03      	subs	r3, r0, #0
 8001e92:	d001      	beq.n	8001e98 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001e94:	f7ff fc76 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001e98:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f002 fefc 	bl	8004c98 <HAL_TIM_PWM_Init>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001ea4:	f7ff fc6e 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea8:	1d3b      	adds	r3, r7, #4
 8001eaa:	2260      	movs	r2, #96	; 0x60
 8001eac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ec0:	1d39      	adds	r1, r7, #4
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	0018      	movs	r0, r3
 8001ec8:	f003 fb4c 	bl	8005564 <HAL_TIM_PWM_ConfigChannel>
 8001ecc:	1e03      	subs	r3, r0, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001ed0:	f7ff fc58 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001ed4:	4b03      	ldr	r3, [pc, #12]	; (8001ee4 <MX_TIM14_Init+0x94>)
 8001ed6:	0018      	movs	r0, r3
 8001ed8:	f000 fad2 	bl	8002480 <HAL_TIM_MspPostInit>

}
 8001edc:	46c0      	nop			; (mov r8, r8)
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	b008      	add	sp, #32
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200034cc 	.word	0x200034cc
 8001ee8:	40002000 	.word	0x40002000
 8001eec:	0000ffff 	.word	0x0000ffff

08001ef0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b098      	sub	sp, #96	; 0x60
 8001ef4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ef6:	2354      	movs	r3, #84	; 0x54
 8001ef8:	18fb      	adds	r3, r7, r3
 8001efa:	0018      	movs	r0, r3
 8001efc:	230c      	movs	r3, #12
 8001efe:	001a      	movs	r2, r3
 8001f00:	2100      	movs	r1, #0
 8001f02:	f009 fb1d 	bl	800b540 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f06:	2338      	movs	r3, #56	; 0x38
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	0018      	movs	r0, r3
 8001f0c:	231c      	movs	r3, #28
 8001f0e:	001a      	movs	r2, r3
 8001f10:	2100      	movs	r1, #0
 8001f12:	f009 fb15 	bl	800b540 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	0018      	movs	r0, r3
 8001f1a:	2334      	movs	r3, #52	; 0x34
 8001f1c:	001a      	movs	r2, r3
 8001f1e:	2100      	movs	r1, #0
 8001f20:	f009 fb0e 	bl	800b540 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001f24:	4b41      	ldr	r3, [pc, #260]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f26:	4a42      	ldr	r2, [pc, #264]	; (8002030 <MX_TIM15_Init+0x140>)
 8001f28:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 8001f2a:	4b40      	ldr	r3, [pc, #256]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f2c:	2213      	movs	r2, #19
 8001f2e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f30:	4b3e      	ldr	r3, [pc, #248]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001f36:	4b3d      	ldr	r3, [pc, #244]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f38:	4a3e      	ldr	r2, [pc, #248]	; (8002034 <MX_TIM15_Init+0x144>)
 8001f3a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f3c:	4b3b      	ldr	r3, [pc, #236]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f3e:	2200      	movs	r2, #0
 8001f40:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001f42:	4b3a      	ldr	r3, [pc, #232]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f44:	2200      	movs	r2, #0
 8001f46:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f48:	4b38      	ldr	r3, [pc, #224]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001f4e:	4b37      	ldr	r3, [pc, #220]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f50:	0018      	movs	r0, r3
 8001f52:	f002 fea1 	bl	8004c98 <HAL_TIM_PWM_Init>
 8001f56:	1e03      	subs	r3, r0, #0
 8001f58:	d001      	beq.n	8001f5e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001f5a:	f7ff fc13 	bl	8001784 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f5e:	2154      	movs	r1, #84	; 0x54
 8001f60:	187b      	adds	r3, r7, r1
 8001f62:	2200      	movs	r2, #0
 8001f64:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f66:	187b      	adds	r3, r7, r1
 8001f68:	2200      	movs	r2, #0
 8001f6a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001f6c:	187a      	adds	r2, r7, r1
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <MX_TIM15_Init+0x13c>)
 8001f70:	0011      	movs	r1, r2
 8001f72:	0018      	movs	r0, r3
 8001f74:	f003 ff74 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 8001f78:	1e03      	subs	r3, r0, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001f7c:	f7ff fc02 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f80:	2138      	movs	r1, #56	; 0x38
 8001f82:	187b      	adds	r3, r7, r1
 8001f84:	2260      	movs	r2, #96	; 0x60
 8001f86:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001f88:	187b      	adds	r3, r7, r1
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f8e:	187b      	adds	r3, r7, r1
 8001f90:	2200      	movs	r2, #0
 8001f92:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001f94:	187b      	adds	r3, r7, r1
 8001f96:	2200      	movs	r2, #0
 8001f98:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f9a:	187b      	adds	r3, r7, r1
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fa0:	187b      	adds	r3, r7, r1
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fa6:	187b      	adds	r3, r7, r1
 8001fa8:	2200      	movs	r2, #0
 8001faa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fac:	1879      	adds	r1, r7, r1
 8001fae:	4b1f      	ldr	r3, [pc, #124]	; (800202c <MX_TIM15_Init+0x13c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	f003 fad6 	bl	8005564 <HAL_TIM_PWM_ConfigChannel>
 8001fb8:	1e03      	subs	r3, r0, #0
 8001fba:	d001      	beq.n	8001fc0 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001fbc:	f7ff fbe2 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001fc0:	2338      	movs	r3, #56	; 0x38
 8001fc2:	18f9      	adds	r1, r7, r3
 8001fc4:	4b19      	ldr	r3, [pc, #100]	; (800202c <MX_TIM15_Init+0x13c>)
 8001fc6:	2204      	movs	r2, #4
 8001fc8:	0018      	movs	r0, r3
 8001fca:	f003 facb 	bl	8005564 <HAL_TIM_PWM_ConfigChannel>
 8001fce:	1e03      	subs	r3, r0, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8001fd2:	f7ff fbd7 	bl	8001784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001fd6:	1d3b      	adds	r3, r7, #4
 8001fd8:	2200      	movs	r2, #0
 8001fda:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001fdc:	1d3b      	adds	r3, r7, #4
 8001fde:	2200      	movs	r2, #0
 8001fe0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001fe2:	1d3b      	adds	r3, r7, #4
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001fe8:	1d3b      	adds	r3, r7, #4
 8001fea:	2200      	movs	r2, #0
 8001fec:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001fee:	1d3b      	adds	r3, r7, #4
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ff4:	1d3b      	adds	r3, r7, #4
 8001ff6:	2280      	movs	r2, #128	; 0x80
 8001ff8:	0192      	lsls	r2, r2, #6
 8001ffa:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	2200      	movs	r2, #0
 8002000:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002002:	1d3b      	adds	r3, r7, #4
 8002004:	2200      	movs	r2, #0
 8002006:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8002008:	1d3a      	adds	r2, r7, #4
 800200a:	4b08      	ldr	r3, [pc, #32]	; (800202c <MX_TIM15_Init+0x13c>)
 800200c:	0011      	movs	r1, r2
 800200e:	0018      	movs	r0, r3
 8002010:	f003 ff8e 	bl	8005f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8002014:	1e03      	subs	r3, r0, #0
 8002016:	d001      	beq.n	800201c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8002018:	f7ff fbb4 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <MX_TIM15_Init+0x13c>)
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fa2e 	bl	8002480 <HAL_TIM_MspPostInit>

}
 8002024:	46c0      	nop			; (mov r8, r8)
 8002026:	46bd      	mov	sp, r7
 8002028:	b018      	add	sp, #96	; 0x60
 800202a:	bd80      	pop	{r7, pc}
 800202c:	20003518 	.word	0x20003518
 8002030:	40014000 	.word	0x40014000
 8002034:	000003e7 	.word	0x000003e7

08002038 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b094      	sub	sp, #80	; 0x50
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800203e:	2334      	movs	r3, #52	; 0x34
 8002040:	18fb      	adds	r3, r7, r3
 8002042:	0018      	movs	r0, r3
 8002044:	231c      	movs	r3, #28
 8002046:	001a      	movs	r2, r3
 8002048:	2100      	movs	r1, #0
 800204a:	f009 fa79 	bl	800b540 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800204e:	003b      	movs	r3, r7
 8002050:	0018      	movs	r0, r3
 8002052:	2334      	movs	r3, #52	; 0x34
 8002054:	001a      	movs	r2, r3
 8002056:	2100      	movs	r1, #0
 8002058:	f009 fa72 	bl	800b540 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800205c:	4b37      	ldr	r3, [pc, #220]	; (800213c <MX_TIM16_Init+0x104>)
 800205e:	4a38      	ldr	r2, [pc, #224]	; (8002140 <MX_TIM16_Init+0x108>)
 8002060:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8002062:	4b36      	ldr	r3, [pc, #216]	; (800213c <MX_TIM16_Init+0x104>)
 8002064:	2213      	movs	r2, #19
 8002066:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <MX_TIM16_Init+0x104>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 800206e:	4b33      	ldr	r3, [pc, #204]	; (800213c <MX_TIM16_Init+0x104>)
 8002070:	4a34      	ldr	r2, [pc, #208]	; (8002144 <MX_TIM16_Init+0x10c>)
 8002072:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002074:	4b31      	ldr	r3, [pc, #196]	; (800213c <MX_TIM16_Init+0x104>)
 8002076:	2200      	movs	r2, #0
 8002078:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800207a:	4b30      	ldr	r3, [pc, #192]	; (800213c <MX_TIM16_Init+0x104>)
 800207c:	2200      	movs	r2, #0
 800207e:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002080:	4b2e      	ldr	r3, [pc, #184]	; (800213c <MX_TIM16_Init+0x104>)
 8002082:	2200      	movs	r2, #0
 8002084:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002086:	4b2d      	ldr	r3, [pc, #180]	; (800213c <MX_TIM16_Init+0x104>)
 8002088:	0018      	movs	r0, r3
 800208a:	f002 fd09 	bl	8004aa0 <HAL_TIM_Base_Init>
 800208e:	1e03      	subs	r3, r0, #0
 8002090:	d001      	beq.n	8002096 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8002092:	f7ff fb77 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8002096:	4b29      	ldr	r3, [pc, #164]	; (800213c <MX_TIM16_Init+0x104>)
 8002098:	0018      	movs	r0, r3
 800209a:	f002 fdfd 	bl	8004c98 <HAL_TIM_PWM_Init>
 800209e:	1e03      	subs	r3, r0, #0
 80020a0:	d001      	beq.n	80020a6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 80020a2:	f7ff fb6f 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020a6:	2134      	movs	r1, #52	; 0x34
 80020a8:	187b      	adds	r3, r7, r1
 80020aa:	2260      	movs	r2, #96	; 0x60
 80020ac:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80020ae:	187b      	adds	r3, r7, r1
 80020b0:	2200      	movs	r2, #0
 80020b2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b4:	187b      	adds	r3, r7, r1
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020ba:	187b      	adds	r3, r7, r1
 80020bc:	2200      	movs	r2, #0
 80020be:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020c0:	187b      	adds	r3, r7, r1
 80020c2:	2200      	movs	r2, #0
 80020c4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020c6:	187b      	adds	r3, r7, r1
 80020c8:	2200      	movs	r2, #0
 80020ca:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020cc:	187b      	adds	r3, r7, r1
 80020ce:	2200      	movs	r2, #0
 80020d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80020d2:	1879      	adds	r1, r7, r1
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <MX_TIM16_Init+0x104>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	0018      	movs	r0, r3
 80020da:	f003 fa43 	bl	8005564 <HAL_TIM_PWM_ConfigChannel>
 80020de:	1e03      	subs	r3, r0, #0
 80020e0:	d001      	beq.n	80020e6 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80020e2:	f7ff fb4f 	bl	8001784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020e6:	003b      	movs	r3, r7
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020ec:	003b      	movs	r3, r7
 80020ee:	2200      	movs	r2, #0
 80020f0:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020f2:	003b      	movs	r3, r7
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020f8:	003b      	movs	r3, r7
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020fe:	003b      	movs	r3, r7
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002104:	003b      	movs	r3, r7
 8002106:	2280      	movs	r2, #128	; 0x80
 8002108:	0192      	lsls	r2, r2, #6
 800210a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800210c:	003b      	movs	r3, r7
 800210e:	2200      	movs	r2, #0
 8002110:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002112:	003b      	movs	r3, r7
 8002114:	2200      	movs	r2, #0
 8002116:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002118:	003a      	movs	r2, r7
 800211a:	4b08      	ldr	r3, [pc, #32]	; (800213c <MX_TIM16_Init+0x104>)
 800211c:	0011      	movs	r1, r2
 800211e:	0018      	movs	r0, r3
 8002120:	f003 ff06 	bl	8005f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8002124:	1e03      	subs	r3, r0, #0
 8002126:	d001      	beq.n	800212c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8002128:	f7ff fb2c 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 800212c:	4b03      	ldr	r3, [pc, #12]	; (800213c <MX_TIM16_Init+0x104>)
 800212e:	0018      	movs	r0, r3
 8002130:	f000 f9a6 	bl	8002480 <HAL_TIM_MspPostInit>

}
 8002134:	46c0      	nop			; (mov r8, r8)
 8002136:	46bd      	mov	sp, r7
 8002138:	b014      	add	sp, #80	; 0x50
 800213a:	bd80      	pop	{r7, pc}
 800213c:	20003564 	.word	0x20003564
 8002140:	40014400 	.word	0x40014400
 8002144:	000003e7 	.word	0x000003e7

08002148 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b094      	sub	sp, #80	; 0x50
 800214c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800214e:	2334      	movs	r3, #52	; 0x34
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	0018      	movs	r0, r3
 8002154:	231c      	movs	r3, #28
 8002156:	001a      	movs	r2, r3
 8002158:	2100      	movs	r1, #0
 800215a:	f009 f9f1 	bl	800b540 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800215e:	003b      	movs	r3, r7
 8002160:	0018      	movs	r0, r3
 8002162:	2334      	movs	r3, #52	; 0x34
 8002164:	001a      	movs	r2, r3
 8002166:	2100      	movs	r1, #0
 8002168:	f009 f9ea 	bl	800b540 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800216c:	4b37      	ldr	r3, [pc, #220]	; (800224c <MX_TIM17_Init+0x104>)
 800216e:	4a38      	ldr	r2, [pc, #224]	; (8002250 <MX_TIM17_Init+0x108>)
 8002170:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 8002172:	4b36      	ldr	r3, [pc, #216]	; (800224c <MX_TIM17_Init+0x104>)
 8002174:	2213      	movs	r2, #19
 8002176:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b34      	ldr	r3, [pc, #208]	; (800224c <MX_TIM17_Init+0x104>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <MX_TIM17_Init+0x104>)
 8002180:	4a34      	ldr	r2, [pc, #208]	; (8002254 <MX_TIM17_Init+0x10c>)
 8002182:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002184:	4b31      	ldr	r3, [pc, #196]	; (800224c <MX_TIM17_Init+0x104>)
 8002186:	2200      	movs	r2, #0
 8002188:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800218a:	4b30      	ldr	r3, [pc, #192]	; (800224c <MX_TIM17_Init+0x104>)
 800218c:	2200      	movs	r2, #0
 800218e:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002190:	4b2e      	ldr	r3, [pc, #184]	; (800224c <MX_TIM17_Init+0x104>)
 8002192:	2200      	movs	r2, #0
 8002194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8002196:	4b2d      	ldr	r3, [pc, #180]	; (800224c <MX_TIM17_Init+0x104>)
 8002198:	0018      	movs	r0, r3
 800219a:	f002 fc81 	bl	8004aa0 <HAL_TIM_Base_Init>
 800219e:	1e03      	subs	r3, r0, #0
 80021a0:	d001      	beq.n	80021a6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80021a2:	f7ff faef 	bl	8001784 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <MX_TIM17_Init+0x104>)
 80021a8:	0018      	movs	r0, r3
 80021aa:	f002 fd75 	bl	8004c98 <HAL_TIM_PWM_Init>
 80021ae:	1e03      	subs	r3, r0, #0
 80021b0:	d001      	beq.n	80021b6 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80021b2:	f7ff fae7 	bl	8001784 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021b6:	2134      	movs	r1, #52	; 0x34
 80021b8:	187b      	adds	r3, r7, r1
 80021ba:	2260      	movs	r2, #96	; 0x60
 80021bc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80021be:	187b      	adds	r3, r7, r1
 80021c0:	2200      	movs	r2, #0
 80021c2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021c4:	187b      	adds	r3, r7, r1
 80021c6:	2200      	movs	r2, #0
 80021c8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021ca:	187b      	adds	r3, r7, r1
 80021cc:	2200      	movs	r2, #0
 80021ce:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021d0:	187b      	adds	r3, r7, r1
 80021d2:	2200      	movs	r2, #0
 80021d4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021d6:	187b      	adds	r3, r7, r1
 80021d8:	2200      	movs	r2, #0
 80021da:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021dc:	187b      	adds	r3, r7, r1
 80021de:	2200      	movs	r2, #0
 80021e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021e2:	1879      	adds	r1, r7, r1
 80021e4:	4b19      	ldr	r3, [pc, #100]	; (800224c <MX_TIM17_Init+0x104>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	0018      	movs	r0, r3
 80021ea:	f003 f9bb 	bl	8005564 <HAL_TIM_PWM_ConfigChannel>
 80021ee:	1e03      	subs	r3, r0, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 80021f2:	f7ff fac7 	bl	8001784 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021f6:	003b      	movs	r3, r7
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021fc:	003b      	movs	r3, r7
 80021fe:	2200      	movs	r2, #0
 8002200:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002202:	003b      	movs	r3, r7
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002208:	003b      	movs	r3, r7
 800220a:	2200      	movs	r2, #0
 800220c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800220e:	003b      	movs	r3, r7
 8002210:	2200      	movs	r2, #0
 8002212:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002214:	003b      	movs	r3, r7
 8002216:	2280      	movs	r2, #128	; 0x80
 8002218:	0192      	lsls	r2, r2, #6
 800221a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800221c:	003b      	movs	r3, r7
 800221e:	2200      	movs	r2, #0
 8002220:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002222:	003b      	movs	r3, r7
 8002224:	2200      	movs	r2, #0
 8002226:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002228:	003a      	movs	r2, r7
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_TIM17_Init+0x104>)
 800222c:	0011      	movs	r1, r2
 800222e:	0018      	movs	r0, r3
 8002230:	f003 fe7e 	bl	8005f30 <HAL_TIMEx_ConfigBreakDeadTime>
 8002234:	1e03      	subs	r3, r0, #0
 8002236:	d001      	beq.n	800223c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8002238:	f7ff faa4 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 800223c:	4b03      	ldr	r3, [pc, #12]	; (800224c <MX_TIM17_Init+0x104>)
 800223e:	0018      	movs	r0, r3
 8002240:	f000 f91e 	bl	8002480 <HAL_TIM_MspPostInit>

}
 8002244:	46c0      	nop			; (mov r8, r8)
 8002246:	46bd      	mov	sp, r7
 8002248:	b014      	add	sp, #80	; 0x50
 800224a:	bd80      	pop	{r7, pc}
 800224c:	200035b0 	.word	0x200035b0
 8002250:	40014800 	.word	0x40014800
 8002254:	000003e7 	.word	0x000003e7

08002258 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002258:	b590      	push	{r4, r7, lr}
 800225a:	b08d      	sub	sp, #52	; 0x34
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	241c      	movs	r4, #28
 8002262:	193b      	adds	r3, r7, r4
 8002264:	0018      	movs	r0, r3
 8002266:	2314      	movs	r3, #20
 8002268:	001a      	movs	r2, r3
 800226a:	2100      	movs	r1, #0
 800226c:	f009 f968 	bl	800b540 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a3e      	ldr	r2, [pc, #248]	; (8002370 <HAL_TIM_Encoder_MspInit+0x118>)
 8002276:	4293      	cmp	r3, r2
 8002278:	d13a      	bne.n	80022f0 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800227a:	4b3e      	ldr	r3, [pc, #248]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 800227c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800227e:	4b3d      	ldr	r3, [pc, #244]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002280:	2180      	movs	r1, #128	; 0x80
 8002282:	0109      	lsls	r1, r1, #4
 8002284:	430a      	orrs	r2, r1
 8002286:	641a      	str	r2, [r3, #64]	; 0x40
 8002288:	4b3a      	ldr	r3, [pc, #232]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 800228a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800228c:	2380      	movs	r3, #128	; 0x80
 800228e:	011b      	lsls	r3, r3, #4
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
 8002294:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002296:	4b37      	ldr	r3, [pc, #220]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002298:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800229a:	4b36      	ldr	r3, [pc, #216]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 800229c:	2101      	movs	r1, #1
 800229e:	430a      	orrs	r2, r1
 80022a0:	635a      	str	r2, [r3, #52]	; 0x34
 80022a2:	4b34      	ldr	r3, [pc, #208]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 80022a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022a6:	2201      	movs	r2, #1
 80022a8:	4013      	ands	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CODEUR1_PH1_Pin|CODEUR1_PH2_Pin;
 80022ae:	193b      	adds	r3, r7, r4
 80022b0:	22c0      	movs	r2, #192	; 0xc0
 80022b2:	0092      	lsls	r2, r2, #2
 80022b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022b6:	0021      	movs	r1, r4
 80022b8:	187b      	adds	r3, r7, r1
 80022ba:	2202      	movs	r2, #2
 80022bc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	187b      	adds	r3, r7, r1
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022c4:	187b      	adds	r3, r7, r1
 80022c6:	2200      	movs	r2, #0
 80022c8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80022ca:	187b      	adds	r3, r7, r1
 80022cc:	2202      	movs	r2, #2
 80022ce:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d0:	187a      	adds	r2, r7, r1
 80022d2:	23a0      	movs	r3, #160	; 0xa0
 80022d4:	05db      	lsls	r3, r3, #23
 80022d6:	0011      	movs	r1, r2
 80022d8:	0018      	movs	r0, r3
 80022da:	f001 faf7 	bl	80038cc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 80022de:	2200      	movs	r2, #0
 80022e0:	2103      	movs	r1, #3
 80022e2:	200e      	movs	r0, #14
 80022e4:	f001 f87a 	bl	80033dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80022e8:	200e      	movs	r0, #14
 80022ea:	f001 f88c 	bl	8003406 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80022ee:	e03a      	b.n	8002366 <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a20      	ldr	r2, [pc, #128]	; (8002378 <HAL_TIM_Encoder_MspInit+0x120>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d135      	bne.n	8002366 <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022fa:	4b1e      	ldr	r3, [pc, #120]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 80022fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022fe:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002300:	2102      	movs	r1, #2
 8002302:	430a      	orrs	r2, r1
 8002304:	63da      	str	r2, [r3, #60]	; 0x3c
 8002306:	4b1b      	ldr	r3, [pc, #108]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800230a:	2202      	movs	r2, #2
 800230c:	4013      	ands	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
 8002310:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002312:	4b18      	ldr	r3, [pc, #96]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002314:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002316:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002318:	2104      	movs	r1, #4
 800231a:	430a      	orrs	r2, r1
 800231c:	635a      	str	r2, [r3, #52]	; 0x34
 800231e:	4b15      	ldr	r3, [pc, #84]	; (8002374 <HAL_TIM_Encoder_MspInit+0x11c>)
 8002320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002322:	2204      	movs	r2, #4
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]
 8002328:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CODEUR2_PH1_Pin|CODEUR2_PH2_Pin;
 800232a:	211c      	movs	r1, #28
 800232c:	187b      	adds	r3, r7, r1
 800232e:	22c0      	movs	r2, #192	; 0xc0
 8002330:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002332:	187b      	adds	r3, r7, r1
 8002334:	2202      	movs	r2, #2
 8002336:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002338:	187b      	adds	r3, r7, r1
 800233a:	2200      	movs	r2, #0
 800233c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	187b      	adds	r3, r7, r1
 8002340:	2200      	movs	r2, #0
 8002342:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8002344:	187b      	adds	r3, r7, r1
 8002346:	2201      	movs	r2, #1
 8002348:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800234a:	187b      	adds	r3, r7, r1
 800234c:	4a0b      	ldr	r2, [pc, #44]	; (800237c <HAL_TIM_Encoder_MspInit+0x124>)
 800234e:	0019      	movs	r1, r3
 8002350:	0010      	movs	r0, r2
 8002352:	f001 fabb 	bl	80038cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8002356:	2200      	movs	r2, #0
 8002358:	2103      	movs	r1, #3
 800235a:	2010      	movs	r0, #16
 800235c:	f001 f83e 	bl	80033dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002360:	2010      	movs	r0, #16
 8002362:	f001 f850 	bl	8003406 <HAL_NVIC_EnableIRQ>
}
 8002366:	46c0      	nop			; (mov r8, r8)
 8002368:	46bd      	mov	sp, r7
 800236a:	b00d      	add	sp, #52	; 0x34
 800236c:	bd90      	pop	{r4, r7, pc}
 800236e:	46c0      	nop			; (mov r8, r8)
 8002370:	40012c00 	.word	0x40012c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40000400 	.word	0x40000400
 800237c:	50000800 	.word	0x50000800

08002380 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4a27      	ldr	r2, [pc, #156]	; (800242c <HAL_TIM_Base_MspInit+0xac>)
 800238e:	4293      	cmp	r3, r2
 8002390:	d10c      	bne.n	80023ac <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002392:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 8002394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002396:	4b26      	ldr	r3, [pc, #152]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 8002398:	2110      	movs	r1, #16
 800239a:	430a      	orrs	r2, r1
 800239c:	63da      	str	r2, [r3, #60]	; 0x3c
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 80023a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023a2:	2210      	movs	r2, #16
 80023a4:	4013      	ands	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80023aa:	e03a      	b.n	8002422 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a20      	ldr	r2, [pc, #128]	; (8002434 <HAL_TIM_Base_MspInit+0xb4>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d10e      	bne.n	80023d4 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80023b6:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 80023b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023ba:	4b1d      	ldr	r3, [pc, #116]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 80023bc:	2180      	movs	r1, #128	; 0x80
 80023be:	0209      	lsls	r1, r1, #8
 80023c0:	430a      	orrs	r2, r1
 80023c2:	641a      	str	r2, [r3, #64]	; 0x40
 80023c4:	4b1a      	ldr	r3, [pc, #104]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 80023c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	021b      	lsls	r3, r3, #8
 80023cc:	4013      	ands	r3, r2
 80023ce:	613b      	str	r3, [r7, #16]
 80023d0:	693b      	ldr	r3, [r7, #16]
}
 80023d2:	e026      	b.n	8002422 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a17      	ldr	r2, [pc, #92]	; (8002438 <HAL_TIM_Base_MspInit+0xb8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d10e      	bne.n	80023fc <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80023de:	4b14      	ldr	r3, [pc, #80]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 80023e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023e2:	4b13      	ldr	r3, [pc, #76]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 80023e4:	2180      	movs	r1, #128	; 0x80
 80023e6:	0289      	lsls	r1, r1, #10
 80023e8:	430a      	orrs	r2, r1
 80023ea:	641a      	str	r2, [r3, #64]	; 0x40
 80023ec:	4b10      	ldr	r3, [pc, #64]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 80023ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023f0:	2380      	movs	r3, #128	; 0x80
 80023f2:	029b      	lsls	r3, r3, #10
 80023f4:	4013      	ands	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]
}
 80023fa:	e012      	b.n	8002422 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM17)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a0e      	ldr	r2, [pc, #56]	; (800243c <HAL_TIM_Base_MspInit+0xbc>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d10d      	bne.n	8002422 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002406:	4b0a      	ldr	r3, [pc, #40]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 8002408:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240a:	4b09      	ldr	r3, [pc, #36]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	02c9      	lsls	r1, r1, #11
 8002410:	430a      	orrs	r2, r1
 8002412:	641a      	str	r2, [r3, #64]	; 0x40
 8002414:	4b06      	ldr	r3, [pc, #24]	; (8002430 <HAL_TIM_Base_MspInit+0xb0>)
 8002416:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	02db      	lsls	r3, r3, #11
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
}
 8002422:	46c0      	nop			; (mov r8, r8)
 8002424:	46bd      	mov	sp, r7
 8002426:	b006      	add	sp, #24
 8002428:	bd80      	pop	{r7, pc}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	40001000 	.word	0x40001000
 8002430:	40021000 	.word	0x40021000
 8002434:	40002000 	.word	0x40002000
 8002438:	40014400 	.word	0x40014400
 800243c:	40014800 	.word	0x40014800

08002440 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a0a      	ldr	r2, [pc, #40]	; (8002478 <HAL_TIM_PWM_MspInit+0x38>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d10d      	bne.n	800246e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002452:	4b0a      	ldr	r3, [pc, #40]	; (800247c <HAL_TIM_PWM_MspInit+0x3c>)
 8002454:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_TIM_PWM_MspInit+0x3c>)
 8002458:	2180      	movs	r1, #128	; 0x80
 800245a:	0249      	lsls	r1, r1, #9
 800245c:	430a      	orrs	r2, r1
 800245e:	641a      	str	r2, [r3, #64]	; 0x40
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <HAL_TIM_PWM_MspInit+0x3c>)
 8002462:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002464:	2380      	movs	r3, #128	; 0x80
 8002466:	025b      	lsls	r3, r3, #9
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800246e:	46c0      	nop			; (mov r8, r8)
 8002470:	46bd      	mov	sp, r7
 8002472:	b004      	add	sp, #16
 8002474:	bd80      	pop	{r7, pc}
 8002476:	46c0      	nop			; (mov r8, r8)
 8002478:	40014000 	.word	0x40014000
 800247c:	40021000 	.word	0x40021000

08002480 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b08d      	sub	sp, #52	; 0x34
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002488:	241c      	movs	r4, #28
 800248a:	193b      	adds	r3, r7, r4
 800248c:	0018      	movs	r0, r3
 800248e:	2314      	movs	r3, #20
 8002490:	001a      	movs	r2, r3
 8002492:	2100      	movs	r1, #0
 8002494:	f009 f854 	bl	800b540 <memset>
  if(timHandle->Instance==TIM14)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a51      	ldr	r2, [pc, #324]	; (80025e4 <HAL_TIM_MspPostInit+0x164>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d123      	bne.n	80024ea <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024a2:	4b51      	ldr	r3, [pc, #324]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 80024a4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024a6:	4b50      	ldr	r3, [pc, #320]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 80024a8:	2104      	movs	r1, #4
 80024aa:	430a      	orrs	r2, r1
 80024ac:	635a      	str	r2, [r3, #52]	; 0x34
 80024ae:	4b4e      	ldr	r3, [pc, #312]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 80024b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b2:	2204      	movs	r2, #4
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
 80024b8:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOT_LIDAR_Pin;
 80024ba:	193b      	adds	r3, r7, r4
 80024bc:	2280      	movs	r2, #128	; 0x80
 80024be:	0152      	lsls	r2, r2, #5
 80024c0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c2:	0021      	movs	r1, r4
 80024c4:	187b      	adds	r3, r7, r1
 80024c6:	2202      	movs	r2, #2
 80024c8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ca:	187b      	adds	r3, r7, r1
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	187b      	adds	r3, r7, r1
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80024d6:	187b      	adds	r3, r7, r1
 80024d8:	2202      	movs	r2, #2
 80024da:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT_LIDAR_GPIO_Port, &GPIO_InitStruct);
 80024dc:	187b      	adds	r3, r7, r1
 80024de:	4a43      	ldr	r2, [pc, #268]	; (80025ec <HAL_TIM_MspPostInit+0x16c>)
 80024e0:	0019      	movs	r1, r3
 80024e2:	0010      	movs	r0, r2
 80024e4:	f001 f9f2 	bl	80038cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 80024e8:	e078      	b.n	80025dc <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a40      	ldr	r2, [pc, #256]	; (80025f0 <HAL_TIM_MspPostInit+0x170>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d122      	bne.n	800253a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f4:	4b3c      	ldr	r3, [pc, #240]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 80024f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024f8:	4b3b      	ldr	r3, [pc, #236]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 80024fa:	2104      	movs	r1, #4
 80024fc:	430a      	orrs	r2, r1
 80024fe:	635a      	str	r2, [r3, #52]	; 0x34
 8002500:	4b39      	ldr	r3, [pc, #228]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 8002502:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002504:	2204      	movs	r2, #4
 8002506:	4013      	ands	r3, r2
 8002508:	617b      	str	r3, [r7, #20]
 800250a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_MOT2_PH1_Pin|PWM_MOT2_PH2_Pin;
 800250c:	211c      	movs	r1, #28
 800250e:	187b      	adds	r3, r7, r1
 8002510:	2206      	movs	r2, #6
 8002512:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	187b      	adds	r3, r7, r1
 8002516:	2202      	movs	r2, #2
 8002518:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	187b      	adds	r3, r7, r1
 800251c:	2200      	movs	r2, #0
 800251e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002520:	187b      	adds	r3, r7, r1
 8002522:	2200      	movs	r2, #0
 8002524:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002526:	187b      	adds	r3, r7, r1
 8002528:	2202      	movs	r2, #2
 800252a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800252c:	187b      	adds	r3, r7, r1
 800252e:	4a2f      	ldr	r2, [pc, #188]	; (80025ec <HAL_TIM_MspPostInit+0x16c>)
 8002530:	0019      	movs	r1, r3
 8002532:	0010      	movs	r0, r2
 8002534:	f001 f9ca 	bl	80038cc <HAL_GPIO_Init>
}
 8002538:	e050      	b.n	80025dc <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a2d      	ldr	r2, [pc, #180]	; (80025f4 <HAL_TIM_MspPostInit+0x174>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d123      	bne.n	800258c <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002544:	4b28      	ldr	r3, [pc, #160]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 8002546:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002548:	4b27      	ldr	r3, [pc, #156]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 800254a:	2101      	movs	r1, #1
 800254c:	430a      	orrs	r2, r1
 800254e:	635a      	str	r2, [r3, #52]	; 0x34
 8002550:	4b25      	ldr	r3, [pc, #148]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 8002552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002554:	2201      	movs	r2, #1
 8002556:	4013      	ands	r3, r2
 8002558:	613b      	str	r3, [r7, #16]
 800255a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_MOT1_PH1_Pin;
 800255c:	211c      	movs	r1, #28
 800255e:	187b      	adds	r3, r7, r1
 8002560:	2240      	movs	r2, #64	; 0x40
 8002562:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002564:	187b      	adds	r3, r7, r1
 8002566:	2202      	movs	r2, #2
 8002568:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256a:	187b      	adds	r3, r7, r1
 800256c:	2200      	movs	r2, #0
 800256e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002570:	187b      	adds	r3, r7, r1
 8002572:	2200      	movs	r2, #0
 8002574:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8002576:	187b      	adds	r3, r7, r1
 8002578:	2205      	movs	r2, #5
 800257a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH1_GPIO_Port, &GPIO_InitStruct);
 800257c:	187a      	adds	r2, r7, r1
 800257e:	23a0      	movs	r3, #160	; 0xa0
 8002580:	05db      	lsls	r3, r3, #23
 8002582:	0011      	movs	r1, r2
 8002584:	0018      	movs	r0, r3
 8002586:	f001 f9a1 	bl	80038cc <HAL_GPIO_Init>
}
 800258a:	e027      	b.n	80025dc <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a19      	ldr	r2, [pc, #100]	; (80025f8 <HAL_TIM_MspPostInit+0x178>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d122      	bne.n	80025dc <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002596:	4b14      	ldr	r3, [pc, #80]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 8002598:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800259a:	4b13      	ldr	r3, [pc, #76]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 800259c:	2101      	movs	r1, #1
 800259e:	430a      	orrs	r2, r1
 80025a0:	635a      	str	r2, [r3, #52]	; 0x34
 80025a2:	4b11      	ldr	r3, [pc, #68]	; (80025e8 <HAL_TIM_MspPostInit+0x168>)
 80025a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025a6:	2201      	movs	r2, #1
 80025a8:	4013      	ands	r3, r2
 80025aa:	60fb      	str	r3, [r7, #12]
 80025ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOT1_PH2_Pin;
 80025ae:	211c      	movs	r1, #28
 80025b0:	187b      	adds	r3, r7, r1
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b6:	187b      	adds	r3, r7, r1
 80025b8:	2202      	movs	r2, #2
 80025ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	187b      	adds	r3, r7, r1
 80025be:	2200      	movs	r2, #0
 80025c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c2:	187b      	adds	r3, r7, r1
 80025c4:	2200      	movs	r2, #0
 80025c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80025c8:	187b      	adds	r3, r7, r1
 80025ca:	2205      	movs	r2, #5
 80025cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH2_GPIO_Port, &GPIO_InitStruct);
 80025ce:	187a      	adds	r2, r7, r1
 80025d0:	23a0      	movs	r3, #160	; 0xa0
 80025d2:	05db      	lsls	r3, r3, #23
 80025d4:	0011      	movs	r1, r2
 80025d6:	0018      	movs	r0, r3
 80025d8:	f001 f978 	bl	80038cc <HAL_GPIO_Init>
}
 80025dc:	46c0      	nop			; (mov r8, r8)
 80025de:	46bd      	mov	sp, r7
 80025e0:	b00d      	add	sp, #52	; 0x34
 80025e2:	bd90      	pop	{r4, r7, pc}
 80025e4:	40002000 	.word	0x40002000
 80025e8:	40021000 	.word	0x40021000
 80025ec:	50000800 	.word	0x50000800
 80025f0:	40014000 	.word	0x40014000
 80025f4:	40014400 	.word	0x40014400
 80025f8:	40014800 	.word	0x40014800

080025fc <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002600:	4b23      	ldr	r3, [pc, #140]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002602:	4a24      	ldr	r2, [pc, #144]	; (8002694 <MX_USART1_UART_Init+0x98>)
 8002604:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002606:	4b22      	ldr	r3, [pc, #136]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002608:	22e1      	movs	r2, #225	; 0xe1
 800260a:	0292      	lsls	r2, r2, #10
 800260c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800260e:	4b20      	ldr	r3, [pc, #128]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002610:	2200      	movs	r2, #0
 8002612:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002616:	2200      	movs	r2, #0
 8002618:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800261a:	4b1d      	ldr	r3, [pc, #116]	; (8002690 <MX_USART1_UART_Init+0x94>)
 800261c:	2200      	movs	r2, #0
 800261e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002620:	4b1b      	ldr	r3, [pc, #108]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002622:	220c      	movs	r2, #12
 8002624:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002626:	4b1a      	ldr	r3, [pc, #104]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002628:	2200      	movs	r2, #0
 800262a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <MX_USART1_UART_Init+0x94>)
 800262e:	2200      	movs	r2, #0
 8002630:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002632:	4b17      	ldr	r3, [pc, #92]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002634:	2200      	movs	r2, #0
 8002636:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002638:	4b15      	ldr	r3, [pc, #84]	; (8002690 <MX_USART1_UART_Init+0x94>)
 800263a:	2200      	movs	r2, #0
 800263c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800263e:	4b14      	ldr	r3, [pc, #80]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002640:	2200      	movs	r2, #0
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002644:	4b12      	ldr	r3, [pc, #72]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002646:	0018      	movs	r0, r3
 8002648:	f003 fd30 	bl	80060ac <HAL_UART_Init>
 800264c:	1e03      	subs	r3, r0, #0
 800264e:	d001      	beq.n	8002654 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002650:	f7ff f898 	bl	8001784 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002654:	4b0e      	ldr	r3, [pc, #56]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002656:	2100      	movs	r1, #0
 8002658:	0018      	movs	r0, r3
 800265a:	f005 fe81 	bl	8008360 <HAL_UARTEx_SetTxFifoThreshold>
 800265e:	1e03      	subs	r3, r0, #0
 8002660:	d001      	beq.n	8002666 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8002662:	f7ff f88f 	bl	8001784 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002666:	4b0a      	ldr	r3, [pc, #40]	; (8002690 <MX_USART1_UART_Init+0x94>)
 8002668:	2100      	movs	r1, #0
 800266a:	0018      	movs	r0, r3
 800266c:	f005 feb8 	bl	80083e0 <HAL_UARTEx_SetRxFifoThreshold>
 8002670:	1e03      	subs	r3, r0, #0
 8002672:	d001      	beq.n	8002678 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002674:	f7ff f886 	bl	8001784 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002678:	4b05      	ldr	r3, [pc, #20]	; (8002690 <MX_USART1_UART_Init+0x94>)
 800267a:	0018      	movs	r0, r3
 800267c:	f005 fe36 	bl	80082ec <HAL_UARTEx_DisableFifoMode>
 8002680:	1e03      	subs	r3, r0, #0
 8002682:	d001      	beq.n	8002688 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002684:	f7ff f87e 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002688:	46c0      	nop			; (mov r8, r8)
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	200035fc 	.word	0x200035fc
 8002694:	40013800 	.word	0x40013800

08002698 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800269c:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 800269e:	4a17      	ldr	r2, [pc, #92]	; (80026fc <MX_USART4_UART_Init+0x64>)
 80026a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 80026a2:	4b15      	ldr	r3, [pc, #84]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026a4:	22fa      	movs	r2, #250	; 0xfa
 80026a6:	0252      	lsls	r2, r2, #9
 80026a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80026b0:	4b11      	ldr	r3, [pc, #68]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80026b6:	4b10      	ldr	r3, [pc, #64]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80026bc:	4b0e      	ldr	r3, [pc, #56]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026be:	220c      	movs	r2, #12
 80026c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026c2:	4b0d      	ldr	r3, [pc, #52]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80026c8:	4b0b      	ldr	r3, [pc, #44]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026ce:	4b0a      	ldr	r3, [pc, #40]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80026d4:	4b08      	ldr	r3, [pc, #32]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026da:	4b07      	ldr	r3, [pc, #28]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026dc:	2200      	movs	r2, #0
 80026de:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80026e0:	4b05      	ldr	r3, [pc, #20]	; (80026f8 <MX_USART4_UART_Init+0x60>)
 80026e2:	0018      	movs	r0, r3
 80026e4:	f003 fce2 	bl	80060ac <HAL_UART_Init>
 80026e8:	1e03      	subs	r3, r0, #0
 80026ea:	d001      	beq.n	80026f0 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 80026ec:	f7ff f84a 	bl	8001784 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	46c0      	nop			; (mov r8, r8)
 80026f8:	20003690 	.word	0x20003690
 80026fc:	40004c00 	.word	0x40004c00

08002700 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b093      	sub	sp, #76	; 0x4c
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002708:	2334      	movs	r3, #52	; 0x34
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	0018      	movs	r0, r3
 800270e:	2314      	movs	r3, #20
 8002710:	001a      	movs	r2, r3
 8002712:	2100      	movs	r1, #0
 8002714:	f008 ff14 	bl	800b540 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002718:	2418      	movs	r4, #24
 800271a:	193b      	adds	r3, r7, r4
 800271c:	0018      	movs	r0, r3
 800271e:	231c      	movs	r3, #28
 8002720:	001a      	movs	r2, r3
 8002722:	2100      	movs	r1, #0
 8002724:	f008 ff0c 	bl	800b540 <memset>
  if(uartHandle->Instance==USART1)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_UART_MspInit+0x178>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d13e      	bne.n	80027b0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002732:	193b      	adds	r3, r7, r4
 8002734:	2201      	movs	r2, #1
 8002736:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002738:	193b      	adds	r3, r7, r4
 800273a:	2200      	movs	r2, #0
 800273c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800273e:	193b      	adds	r3, r7, r4
 8002740:	0018      	movs	r0, r3
 8002742:	f001 ffc1 	bl	80046c8 <HAL_RCCEx_PeriphCLKConfig>
 8002746:	1e03      	subs	r3, r0, #0
 8002748:	d001      	beq.n	800274e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800274a:	f7ff f81b 	bl	8001784 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800274e:	4b4b      	ldr	r3, [pc, #300]	; (800287c <HAL_UART_MspInit+0x17c>)
 8002750:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002752:	4b4a      	ldr	r3, [pc, #296]	; (800287c <HAL_UART_MspInit+0x17c>)
 8002754:	2180      	movs	r1, #128	; 0x80
 8002756:	01c9      	lsls	r1, r1, #7
 8002758:	430a      	orrs	r2, r1
 800275a:	641a      	str	r2, [r3, #64]	; 0x40
 800275c:	4b47      	ldr	r3, [pc, #284]	; (800287c <HAL_UART_MspInit+0x17c>)
 800275e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002760:	2380      	movs	r3, #128	; 0x80
 8002762:	01db      	lsls	r3, r3, #7
 8002764:	4013      	ands	r3, r2
 8002766:	617b      	str	r3, [r7, #20]
 8002768:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800276a:	4b44      	ldr	r3, [pc, #272]	; (800287c <HAL_UART_MspInit+0x17c>)
 800276c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800276e:	4b43      	ldr	r3, [pc, #268]	; (800287c <HAL_UART_MspInit+0x17c>)
 8002770:	2104      	movs	r1, #4
 8002772:	430a      	orrs	r2, r1
 8002774:	635a      	str	r2, [r3, #52]	; 0x34
 8002776:	4b41      	ldr	r3, [pc, #260]	; (800287c <HAL_UART_MspInit+0x17c>)
 8002778:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800277a:	2204      	movs	r2, #4
 800277c:	4013      	ands	r3, r2
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Debug_Pin|USART1_RX_Debug_Pin;
 8002782:	2134      	movs	r1, #52	; 0x34
 8002784:	187b      	adds	r3, r7, r1
 8002786:	2230      	movs	r2, #48	; 0x30
 8002788:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278a:	187b      	adds	r3, r7, r1
 800278c:	2202      	movs	r2, #2
 800278e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002790:	187b      	adds	r3, r7, r1
 8002792:	2200      	movs	r2, #0
 8002794:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	187b      	adds	r3, r7, r1
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 800279c:	187b      	adds	r3, r7, r1
 800279e:	2201      	movs	r2, #1
 80027a0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80027a2:	187b      	adds	r3, r7, r1
 80027a4:	4a36      	ldr	r2, [pc, #216]	; (8002880 <HAL_UART_MspInit+0x180>)
 80027a6:	0019      	movs	r1, r3
 80027a8:	0010      	movs	r0, r2
 80027aa:	f001 f88f 	bl	80038cc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80027ae:	e05f      	b.n	8002870 <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART4)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a33      	ldr	r2, [pc, #204]	; (8002884 <HAL_UART_MspInit+0x184>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d15a      	bne.n	8002870 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART4_CLK_ENABLE();
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_UART_MspInit+0x17c>)
 80027bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027be:	4b2f      	ldr	r3, [pc, #188]	; (800287c <HAL_UART_MspInit+0x17c>)
 80027c0:	2180      	movs	r1, #128	; 0x80
 80027c2:	0309      	lsls	r1, r1, #12
 80027c4:	430a      	orrs	r2, r1
 80027c6:	63da      	str	r2, [r3, #60]	; 0x3c
 80027c8:	4b2c      	ldr	r3, [pc, #176]	; (800287c <HAL_UART_MspInit+0x17c>)
 80027ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80027cc:	2380      	movs	r3, #128	; 0x80
 80027ce:	031b      	lsls	r3, r3, #12
 80027d0:	4013      	ands	r3, r2
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_UART_MspInit+0x17c>)
 80027d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80027da:	4b28      	ldr	r3, [pc, #160]	; (800287c <HAL_UART_MspInit+0x17c>)
 80027dc:	2104      	movs	r1, #4
 80027de:	430a      	orrs	r2, r1
 80027e0:	635a      	str	r2, [r3, #52]	; 0x34
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_UART_MspInit+0x17c>)
 80027e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027e6:	2204      	movs	r2, #4
 80027e8:	4013      	ands	r3, r2
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_RX_LIDAR_Pin|USART4_TX_LIDAR_Pin;
 80027ee:	2134      	movs	r1, #52	; 0x34
 80027f0:	187b      	adds	r3, r7, r1
 80027f2:	22c0      	movs	r2, #192	; 0xc0
 80027f4:	0112      	lsls	r2, r2, #4
 80027f6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f8:	187b      	adds	r3, r7, r1
 80027fa:	2202      	movs	r2, #2
 80027fc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	187b      	adds	r3, r7, r1
 8002800:	2200      	movs	r2, #0
 8002802:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002804:	187b      	adds	r3, r7, r1
 8002806:	2200      	movs	r2, #0
 8002808:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 800280a:	187b      	adds	r3, r7, r1
 800280c:	2201      	movs	r2, #1
 800280e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002810:	187b      	adds	r3, r7, r1
 8002812:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <HAL_UART_MspInit+0x180>)
 8002814:	0019      	movs	r1, r3
 8002816:	0010      	movs	r0, r2
 8002818:	f001 f858 	bl	80038cc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800281c:	4b1a      	ldr	r3, [pc, #104]	; (8002888 <HAL_UART_MspInit+0x188>)
 800281e:	4a1b      	ldr	r2, [pc, #108]	; (800288c <HAL_UART_MspInit+0x18c>)
 8002820:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 8002822:	4b19      	ldr	r3, [pc, #100]	; (8002888 <HAL_UART_MspInit+0x188>)
 8002824:	2238      	movs	r2, #56	; 0x38
 8002826:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002828:	4b17      	ldr	r3, [pc, #92]	; (8002888 <HAL_UART_MspInit+0x188>)
 800282a:	2200      	movs	r2, #0
 800282c:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800282e:	4b16      	ldr	r3, [pc, #88]	; (8002888 <HAL_UART_MspInit+0x188>)
 8002830:	2200      	movs	r2, #0
 8002832:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002834:	4b14      	ldr	r3, [pc, #80]	; (8002888 <HAL_UART_MspInit+0x188>)
 8002836:	2280      	movs	r2, #128	; 0x80
 8002838:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800283a:	4b13      	ldr	r3, [pc, #76]	; (8002888 <HAL_UART_MspInit+0x188>)
 800283c:	2200      	movs	r2, #0
 800283e:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002840:	4b11      	ldr	r3, [pc, #68]	; (8002888 <HAL_UART_MspInit+0x188>)
 8002842:	2200      	movs	r2, #0
 8002844:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8002846:	4b10      	ldr	r3, [pc, #64]	; (8002888 <HAL_UART_MspInit+0x188>)
 8002848:	2220      	movs	r2, #32
 800284a:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <HAL_UART_MspInit+0x188>)
 800284e:	2200      	movs	r2, #0
 8002850:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8002852:	4b0d      	ldr	r3, [pc, #52]	; (8002888 <HAL_UART_MspInit+0x188>)
 8002854:	0018      	movs	r0, r3
 8002856:	f000 fde7 	bl	8003428 <HAL_DMA_Init>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d001      	beq.n	8002862 <HAL_UART_MspInit+0x162>
      Error_Handler();
 800285e:	f7fe ff91 	bl	8001784 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2180      	movs	r1, #128	; 0x80
 8002866:	4a08      	ldr	r2, [pc, #32]	; (8002888 <HAL_UART_MspInit+0x188>)
 8002868:	505a      	str	r2, [r3, r1]
 800286a:	4b07      	ldr	r3, [pc, #28]	; (8002888 <HAL_UART_MspInit+0x188>)
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b013      	add	sp, #76	; 0x4c
 8002876:	bd90      	pop	{r4, r7, pc}
 8002878:	40013800 	.word	0x40013800
 800287c:	40021000 	.word	0x40021000
 8002880:	50000800 	.word	0x50000800
 8002884:	40004c00 	.word	0x40004c00
 8002888:	20003724 	.word	0x20003724
 800288c:	4002001c 	.word	0x4002001c

08002890 <Reset_Handler>:
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <LoopForever+0x2>)
 8002892:	4685      	mov	sp, r0
 8002894:	f7ff f9cc 	bl	8001c30 <SystemInit>
 8002898:	480c      	ldr	r0, [pc, #48]	; (80028cc <LoopForever+0x6>)
 800289a:	490d      	ldr	r1, [pc, #52]	; (80028d0 <LoopForever+0xa>)
 800289c:	4a0d      	ldr	r2, [pc, #52]	; (80028d4 <LoopForever+0xe>)
 800289e:	2300      	movs	r3, #0
 80028a0:	e002      	b.n	80028a8 <LoopCopyDataInit>

080028a2 <CopyDataInit>:
 80028a2:	58d4      	ldr	r4, [r2, r3]
 80028a4:	50c4      	str	r4, [r0, r3]
 80028a6:	3304      	adds	r3, #4

080028a8 <LoopCopyDataInit>:
 80028a8:	18c4      	adds	r4, r0, r3
 80028aa:	428c      	cmp	r4, r1
 80028ac:	d3f9      	bcc.n	80028a2 <CopyDataInit>
 80028ae:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <LoopForever+0x12>)
 80028b0:	4c0a      	ldr	r4, [pc, #40]	; (80028dc <LoopForever+0x16>)
 80028b2:	2300      	movs	r3, #0
 80028b4:	e001      	b.n	80028ba <LoopFillZerobss>

080028b6 <FillZerobss>:
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	3204      	adds	r2, #4

080028ba <LoopFillZerobss>:
 80028ba:	42a2      	cmp	r2, r4
 80028bc:	d3fb      	bcc.n	80028b6 <FillZerobss>
 80028be:	f008 fe9b 	bl	800b5f8 <__libc_init_array>
 80028c2:	f7fe fd75 	bl	80013b0 <main>

080028c6 <LoopForever>:
 80028c6:	e7fe      	b.n	80028c6 <LoopForever>
 80028c8:	20009000 	.word	0x20009000
 80028cc:	20000000 	.word	0x20000000
 80028d0:	20000070 	.word	0x20000070
 80028d4:	0800c68c 	.word	0x0800c68c
 80028d8:	20000070 	.word	0x20000070
 80028dc:	20008850 	.word	0x20008850

080028e0 <ADC1_IRQHandler>:
 80028e0:	e7fe      	b.n	80028e0 <ADC1_IRQHandler>
	...

080028e4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b082      	sub	sp, #8
 80028e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80028ea:	1dfb      	adds	r3, r7, #7
 80028ec:	2200      	movs	r2, #0
 80028ee:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028f0:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <HAL_Init+0x3c>)
 80028f2:	681a      	ldr	r2, [r3, #0]
 80028f4:	4b0a      	ldr	r3, [pc, #40]	; (8002920 <HAL_Init+0x3c>)
 80028f6:	2180      	movs	r1, #128	; 0x80
 80028f8:	0049      	lsls	r1, r1, #1
 80028fa:	430a      	orrs	r2, r1
 80028fc:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80028fe:	2003      	movs	r0, #3
 8002900:	f7ff f800 	bl	8001904 <HAL_InitTick>
 8002904:	1e03      	subs	r3, r0, #0
 8002906:	d003      	beq.n	8002910 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002908:	1dfb      	adds	r3, r7, #7
 800290a:	2201      	movs	r2, #1
 800290c:	701a      	strb	r2, [r3, #0]
 800290e:	e001      	b.n	8002914 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002910:	f7fe ffc8 	bl	80018a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002914:	1dfb      	adds	r3, r7, #7
 8002916:	781b      	ldrb	r3, [r3, #0]
}
 8002918:	0018      	movs	r0, r3
 800291a:	46bd      	mov	sp, r7
 800291c:	b002      	add	sp, #8
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40022000 	.word	0x40022000

08002924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002928:	4b05      	ldr	r3, [pc, #20]	; (8002940 <HAL_IncTick+0x1c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	001a      	movs	r2, r3
 800292e:	4b05      	ldr	r3, [pc, #20]	; (8002944 <HAL_IncTick+0x20>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	18d2      	adds	r2, r2, r3
 8002934:	4b03      	ldr	r3, [pc, #12]	; (8002944 <HAL_IncTick+0x20>)
 8002936:	601a      	str	r2, [r3, #0]
}
 8002938:	46c0      	nop			; (mov r8, r8)
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	46c0      	nop			; (mov r8, r8)
 8002940:	2000000c 	.word	0x2000000c
 8002944:	20003780 	.word	0x20003780

08002948 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  return uwTick;
 800294c:	4b02      	ldr	r3, [pc, #8]	; (8002958 <HAL_GetTick+0x10>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	0018      	movs	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	46c0      	nop			; (mov r8, r8)
 8002958:	20003780 	.word	0x20003780

0800295c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b084      	sub	sp, #16
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002964:	f7ff fff0 	bl	8002948 <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	3301      	adds	r3, #1
 8002974:	d005      	beq.n	8002982 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002976:	4b0a      	ldr	r3, [pc, #40]	; (80029a0 <HAL_Delay+0x44>)
 8002978:	781b      	ldrb	r3, [r3, #0]
 800297a:	001a      	movs	r2, r3
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	189b      	adds	r3, r3, r2
 8002980:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002982:	46c0      	nop			; (mov r8, r8)
 8002984:	f7ff ffe0 	bl	8002948 <HAL_GetTick>
 8002988:	0002      	movs	r2, r0
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	1ad3      	subs	r3, r2, r3
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	429a      	cmp	r2, r3
 8002992:	d8f7      	bhi.n	8002984 <HAL_Delay+0x28>
  {
  }
}
 8002994:	46c0      	nop			; (mov r8, r8)
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	46bd      	mov	sp, r7
 800299a:	b004      	add	sp, #16
 800299c:	bd80      	pop	{r7, pc}
 800299e:	46c0      	nop			; (mov r8, r8)
 80029a0:	2000000c 	.word	0x2000000c

080029a4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80029ac:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a06      	ldr	r2, [pc, #24]	; (80029cc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	4b04      	ldr	r3, [pc, #16]	; (80029c8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80029b8:	687a      	ldr	r2, [r7, #4]
 80029ba:	430a      	orrs	r2, r1
 80029bc:	601a      	str	r2, [r3, #0]
}
 80029be:	46c0      	nop			; (mov r8, r8)
 80029c0:	46bd      	mov	sp, r7
 80029c2:	b002      	add	sp, #8
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	46c0      	nop			; (mov r8, r8)
 80029c8:	40010000 	.word	0x40010000
 80029cc:	fffff9ff 	.word	0xfffff9ff

080029d0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b082      	sub	sp, #8
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
 80029d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a05      	ldr	r2, [pc, #20]	; (80029f4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 80029e0:	401a      	ands	r2, r3
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	431a      	orrs	r2, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	601a      	str	r2, [r3, #0]
}
 80029ea:	46c0      	nop			; (mov r8, r8)
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b002      	add	sp, #8
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	fe3fffff 	.word	0xfe3fffff

080029f8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b082      	sub	sp, #8
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681a      	ldr	r2, [r3, #0]
 8002a04:	23e0      	movs	r3, #224	; 0xe0
 8002a06:	045b      	lsls	r3, r3, #17
 8002a08:	4013      	ands	r3, r2
}
 8002a0a:	0018      	movs	r0, r3
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	b002      	add	sp, #8
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	695b      	ldr	r3, [r3, #20]
 8002a22:	68ba      	ldr	r2, [r7, #8]
 8002a24:	2104      	movs	r1, #4
 8002a26:	400a      	ands	r2, r1
 8002a28:	2107      	movs	r1, #7
 8002a2a:	4091      	lsls	r1, r2
 8002a2c:	000a      	movs	r2, r1
 8002a2e:	43d2      	mvns	r2, r2
 8002a30:	401a      	ands	r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2104      	movs	r1, #4
 8002a36:	400b      	ands	r3, r1
 8002a38:	6879      	ldr	r1, [r7, #4]
 8002a3a:	4099      	lsls	r1, r3
 8002a3c:	000b      	movs	r3, r1
 8002a3e:	431a      	orrs	r2, r3
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002a44:	46c0      	nop			; (mov r8, r8)
 8002a46:	46bd      	mov	sp, r7
 8002a48:	b004      	add	sp, #16
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
 8002a5a:	683a      	ldr	r2, [r7, #0]
 8002a5c:	2104      	movs	r1, #4
 8002a5e:	400a      	ands	r2, r1
 8002a60:	2107      	movs	r1, #7
 8002a62:	4091      	lsls	r1, r2
 8002a64:	000a      	movs	r2, r1
 8002a66:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	2104      	movs	r1, #4
 8002a6c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002a6e:	40da      	lsrs	r2, r3
 8002a70:	0013      	movs	r3, r2
}
 8002a72:	0018      	movs	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a8a:	68ba      	ldr	r2, [r7, #8]
 8002a8c:	211f      	movs	r1, #31
 8002a8e:	400a      	ands	r2, r1
 8002a90:	210f      	movs	r1, #15
 8002a92:	4091      	lsls	r1, r2
 8002a94:	000a      	movs	r2, r1
 8002a96:	43d2      	mvns	r2, r2
 8002a98:	401a      	ands	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	210f      	movs	r1, #15
 8002aa0:	4019      	ands	r1, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	201f      	movs	r0, #31
 8002aa6:	4003      	ands	r3, r0
 8002aa8:	4099      	lsls	r1, r3
 8002aaa:	000b      	movs	r3, r1
 8002aac:	431a      	orrs	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002ab2:	46c0      	nop			; (mov r8, r8)
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b004      	add	sp, #16
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
 8002ac2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	035b      	lsls	r3, r3, #13
 8002acc:	0b5b      	lsrs	r3, r3, #13
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b002      	add	sp, #8
 8002ada:	bd80      	pop	{r7, pc}

08002adc <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	0352      	lsls	r2, r2, #13
 8002aee:	0b52      	lsrs	r2, r2, #13
 8002af0:	43d2      	mvns	r2, r2
 8002af2:	401a      	ands	r2, r3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002af8:	46c0      	nop			; (mov r8, r8)
 8002afa:	46bd      	mov	sp, r7
 8002afc:	b002      	add	sp, #8
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	68ba      	ldr	r2, [r7, #8]
 8002b12:	0212      	lsls	r2, r2, #8
 8002b14:	43d2      	mvns	r2, r2
 8002b16:	401a      	ands	r2, r3
 8002b18:	68bb      	ldr	r3, [r7, #8]
 8002b1a:	021b      	lsls	r3, r3, #8
 8002b1c:	6879      	ldr	r1, [r7, #4]
 8002b1e:	400b      	ands	r3, r1
 8002b20:	4904      	ldr	r1, [pc, #16]	; (8002b34 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002b22:	400b      	ands	r3, r1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b004      	add	sp, #16
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	07ffff00 	.word	0x07ffff00

08002b38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b082      	sub	sp, #8
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	4a05      	ldr	r2, [pc, #20]	; (8002b5c <LL_ADC_EnableInternalRegulator+0x24>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	2280      	movs	r2, #128	; 0x80
 8002b4a:	0552      	lsls	r2, r2, #21
 8002b4c:	431a      	orrs	r2, r3
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b52:	46c0      	nop			; (mov r8, r8)
 8002b54:	46bd      	mov	sp, r7
 8002b56:	b002      	add	sp, #8
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	46c0      	nop			; (mov r8, r8)
 8002b5c:	6fffffe8 	.word	0x6fffffe8

08002b60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	689a      	ldr	r2, [r3, #8]
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	055b      	lsls	r3, r3, #21
 8002b70:	401a      	ands	r2, r3
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	055b      	lsls	r3, r3, #21
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d101      	bne.n	8002b7e <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b002      	add	sp, #8
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	2201      	movs	r2, #1
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d101      	bne.n	8002ba0 <LL_ADC_IsEnabled+0x18>
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e000      	b.n	8002ba2 <LL_ADC_IsEnabled+0x1a>
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	0018      	movs	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	b002      	add	sp, #8
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b082      	sub	sp, #8
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	2204      	movs	r2, #4
 8002bb8:	4013      	ands	r3, r2
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	d101      	bne.n	8002bc2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	e000      	b.n	8002bc4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bc2:	2300      	movs	r3, #0
}
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b002      	add	sp, #8
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b088      	sub	sp, #32
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd4:	231f      	movs	r3, #31
 8002bd6:	18fb      	adds	r3, r7, r3
 8002bd8:	2200      	movs	r2, #0
 8002bda:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002be4:	2300      	movs	r3, #0
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e17f      	b.n	8002ef2 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d10a      	bne.n	8002c10 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	0018      	movs	r0, r3
 8002bfe:	f7fd fe4b 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2254      	movs	r2, #84	; 0x54
 8002c0c:	2100      	movs	r1, #0
 8002c0e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	0018      	movs	r0, r3
 8002c16:	f7ff ffa3 	bl	8002b60 <LL_ADC_IsInternalRegulatorEnabled>
 8002c1a:	1e03      	subs	r3, r0, #0
 8002c1c:	d115      	bne.n	8002c4a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	0018      	movs	r0, r3
 8002c24:	f7ff ff88 	bl	8002b38 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c28:	4bb4      	ldr	r3, [pc, #720]	; (8002efc <HAL_ADC_Init+0x330>)
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	49b4      	ldr	r1, [pc, #720]	; (8002f00 <HAL_ADC_Init+0x334>)
 8002c2e:	0018      	movs	r0, r3
 8002c30:	f7fd fa74 	bl	800011c <__udivsi3>
 8002c34:	0003      	movs	r3, r0
 8002c36:	3301      	adds	r3, #1
 8002c38:	005b      	lsls	r3, r3, #1
 8002c3a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c3c:	e002      	b.n	8002c44 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	3b01      	subs	r3, #1
 8002c42:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d1f9      	bne.n	8002c3e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7ff ff86 	bl	8002b60 <LL_ADC_IsInternalRegulatorEnabled>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d10f      	bne.n	8002c78 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	2210      	movs	r2, #16
 8002c5e:	431a      	orrs	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c68:	2201      	movs	r2, #1
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002c70:	231f      	movs	r3, #31
 8002c72:	18fb      	adds	r3, r7, r3
 8002c74:	2201      	movs	r2, #1
 8002c76:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f7ff ff94 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 8002c82:	0003      	movs	r3, r0
 8002c84:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c8a:	2210      	movs	r2, #16
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	d000      	beq.n	8002c92 <HAL_ADC_Init+0xc6>
 8002c90:	e122      	b.n	8002ed8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d000      	beq.n	8002c9a <HAL_ADC_Init+0xce>
 8002c98:	e11e      	b.n	8002ed8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c9e:	4a99      	ldr	r2, [pc, #612]	; (8002f04 <HAL_ADC_Init+0x338>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2202      	movs	r2, #2
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	0018      	movs	r0, r3
 8002cb0:	f7ff ff6a 	bl	8002b88 <LL_ADC_IsEnabled>
 8002cb4:	1e03      	subs	r3, r0, #0
 8002cb6:	d000      	beq.n	8002cba <HAL_ADC_Init+0xee>
 8002cb8:	e0ad      	b.n	8002e16 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	7e1b      	ldrb	r3, [r3, #24]
 8002cc2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002cc4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	7e5b      	ldrb	r3, [r3, #25]
 8002cca:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002ccc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	7e9b      	ldrb	r3, [r3, #26]
 8002cd2:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002cd4:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_ADC_Init+0x118>
 8002cde:	2380      	movs	r3, #128	; 0x80
 8002ce0:	015b      	lsls	r3, r3, #5
 8002ce2:	e000      	b.n	8002ce6 <HAL_ADC_Init+0x11a>
 8002ce4:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002ce6:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002cec:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	da04      	bge.n	8002d00 <HAL_ADC_Init+0x134>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	e001      	b.n	8002d04 <HAL_ADC_Init+0x138>
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002d04:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	212c      	movs	r1, #44	; 0x2c
 8002d0a:	5c5b      	ldrb	r3, [r3, r1]
 8002d0c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002d0e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	5c9b      	ldrb	r3, [r3, r2]
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d115      	bne.n	8002d4c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7e9b      	ldrb	r3, [r3, #26]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d105      	bne.n	8002d34 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	2280      	movs	r2, #128	; 0x80
 8002d2c:	0252      	lsls	r2, r2, #9
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
 8002d32:	e00b      	b.n	8002d4c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d38:	2220      	movs	r2, #32
 8002d3a:	431a      	orrs	r2, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d44:	2201      	movs	r2, #1
 8002d46:	431a      	orrs	r2, r3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d58:	23e0      	movs	r3, #224	; 0xe0
 8002d5a:	005b      	lsls	r3, r3, #1
 8002d5c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002d62:	4313      	orrs	r3, r2
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	4a65      	ldr	r2, [pc, #404]	; (8002f08 <HAL_ADC_Init+0x33c>)
 8002d72:	4013      	ands	r3, r2
 8002d74:	0019      	movs	r1, r3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	430a      	orrs	r2, r1
 8002d7e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	0f9b      	lsrs	r3, r3, #30
 8002d86:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	4313      	orrs	r3, r2
 8002d92:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	223c      	movs	r2, #60	; 0x3c
 8002d98:	5c9b      	ldrb	r3, [r3, r2]
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d111      	bne.n	8002dc2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	0f9b      	lsrs	r3, r3, #30
 8002da4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002daa:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002db0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002db6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	691b      	ldr	r3, [r3, #16]
 8002dc8:	4a50      	ldr	r2, [pc, #320]	; (8002f0c <HAL_ADC_Init+0x340>)
 8002dca:	4013      	ands	r3, r2
 8002dcc:	0019      	movs	r1, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685a      	ldr	r2, [r3, #4]
 8002ddc:	23c0      	movs	r3, #192	; 0xc0
 8002dde:	061b      	lsls	r3, r3, #24
 8002de0:	429a      	cmp	r2, r3
 8002de2:	d018      	beq.n	8002e16 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002de8:	2380      	movs	r3, #128	; 0x80
 8002dea:	05db      	lsls	r3, r3, #23
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d012      	beq.n	8002e16 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002df4:	2380      	movs	r3, #128	; 0x80
 8002df6:	061b      	lsls	r3, r3, #24
 8002df8:	429a      	cmp	r2, r3
 8002dfa:	d00c      	beq.n	8002e16 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002dfc:	4b44      	ldr	r3, [pc, #272]	; (8002f10 <HAL_ADC_Init+0x344>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a44      	ldr	r2, [pc, #272]	; (8002f14 <HAL_ADC_Init+0x348>)
 8002e02:	4013      	ands	r3, r2
 8002e04:	0019      	movs	r1, r3
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685a      	ldr	r2, [r3, #4]
 8002e0a:	23f0      	movs	r3, #240	; 0xf0
 8002e0c:	039b      	lsls	r3, r3, #14
 8002e0e:	401a      	ands	r2, r3
 8002e10:	4b3f      	ldr	r3, [pc, #252]	; (8002f10 <HAL_ADC_Init+0x344>)
 8002e12:	430a      	orrs	r2, r1
 8002e14:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1e:	001a      	movs	r2, r3
 8002e20:	2100      	movs	r1, #0
 8002e22:	f7ff fdf6 	bl	8002a12 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e2e:	493a      	ldr	r1, [pc, #232]	; (8002f18 <HAL_ADC_Init+0x34c>)
 8002e30:	001a      	movs	r2, r3
 8002e32:	f7ff fdee 	bl	8002a12 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2110      	movs	r1, #16
 8002e4a:	4249      	negs	r1, r1
 8002e4c:	430a      	orrs	r2, r1
 8002e4e:	629a      	str	r2, [r3, #40]	; 0x28
 8002e50:	e018      	b.n	8002e84 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	691a      	ldr	r2, [r3, #16]
 8002e56:	2380      	movs	r3, #128	; 0x80
 8002e58:	039b      	lsls	r3, r3, #14
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d112      	bne.n	8002e84 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	69db      	ldr	r3, [r3, #28]
 8002e68:	3b01      	subs	r3, #1
 8002e6a:	009b      	lsls	r3, r3, #2
 8002e6c:	221c      	movs	r2, #28
 8002e6e:	4013      	ands	r3, r2
 8002e70:	2210      	movs	r2, #16
 8002e72:	4252      	negs	r2, r2
 8002e74:	409a      	lsls	r2, r3
 8002e76:	0011      	movs	r1, r2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	430a      	orrs	r2, r1
 8002e82:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	2100      	movs	r1, #0
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	f7ff fdde 	bl	8002a4c <LL_ADC_GetSamplingTimeCommonChannels>
 8002e90:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d10b      	bne.n	8002eb2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ea4:	2203      	movs	r2, #3
 8002ea6:	4393      	bics	r3, r2
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002eb0:	e01c      	b.n	8002eec <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb6:	2212      	movs	r2, #18
 8002eb8:	4393      	bics	r3, r2
 8002eba:	2210      	movs	r2, #16
 8002ebc:	431a      	orrs	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002ece:	231f      	movs	r3, #31
 8002ed0:	18fb      	adds	r3, r7, r3
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ed6:	e009      	b.n	8002eec <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	2210      	movs	r2, #16
 8002ede:	431a      	orrs	r2, r3
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002ee4:	231f      	movs	r3, #31
 8002ee6:	18fb      	adds	r3, r7, r3
 8002ee8:	2201      	movs	r2, #1
 8002eea:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002eec:	231f      	movs	r3, #31
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	781b      	ldrb	r3, [r3, #0]
}
 8002ef2:	0018      	movs	r0, r3
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	b008      	add	sp, #32
 8002ef8:	bd80      	pop	{r7, pc}
 8002efa:	46c0      	nop			; (mov r8, r8)
 8002efc:	20000004 	.word	0x20000004
 8002f00:	00030d40 	.word	0x00030d40
 8002f04:	fffffefd 	.word	0xfffffefd
 8002f08:	fffe0201 	.word	0xfffe0201
 8002f0c:	1ffffc02 	.word	0x1ffffc02
 8002f10:	40012708 	.word	0x40012708
 8002f14:	ffc3ffff 	.word	0xffc3ffff
 8002f18:	07ffff04 	.word	0x07ffff04

08002f1c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f26:	2317      	movs	r3, #23
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2254      	movs	r2, #84	; 0x54
 8002f36:	5c9b      	ldrb	r3, [r3, r2]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d101      	bne.n	8002f40 <HAL_ADC_ConfigChannel+0x24>
 8002f3c:	2302      	movs	r3, #2
 8002f3e:	e1c0      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x3a6>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2254      	movs	r2, #84	; 0x54
 8002f44:	2101      	movs	r1, #1
 8002f46:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	0018      	movs	r0, r3
 8002f4e:	f7ff fe2c 	bl	8002baa <LL_ADC_REG_IsConversionOngoing>
 8002f52:	1e03      	subs	r3, r0, #0
 8002f54:	d000      	beq.n	8002f58 <HAL_ADC_ConfigChannel+0x3c>
 8002f56:	e1a3      	b.n	80032a0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d100      	bne.n	8002f62 <HAL_ADC_ConfigChannel+0x46>
 8002f60:	e143      	b.n	80031ea <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	691a      	ldr	r2, [r3, #16]
 8002f66:	2380      	movs	r3, #128	; 0x80
 8002f68:	061b      	lsls	r3, r3, #24
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d004      	beq.n	8002f78 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002f72:	4ac1      	ldr	r2, [pc, #772]	; (8003278 <HAL_ADC_ConfigChannel+0x35c>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d108      	bne.n	8002f8a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	0019      	movs	r1, r3
 8002f82:	0010      	movs	r0, r2
 8002f84:	f7ff fd99 	bl	8002aba <LL_ADC_REG_SetSequencerChAdd>
 8002f88:	e0c9      	b.n	800311e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	211f      	movs	r1, #31
 8002f94:	400b      	ands	r3, r1
 8002f96:	210f      	movs	r1, #15
 8002f98:	4099      	lsls	r1, r3
 8002f9a:	000b      	movs	r3, r1
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	0019      	movs	r1, r3
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	035b      	lsls	r3, r3, #13
 8002fa8:	0b5b      	lsrs	r3, r3, #13
 8002faa:	d105      	bne.n	8002fb8 <HAL_ADC_ConfigChannel+0x9c>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	0e9b      	lsrs	r3, r3, #26
 8002fb2:	221f      	movs	r2, #31
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	e098      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	d000      	beq.n	8002fc4 <HAL_ADC_ConfigChannel+0xa8>
 8002fc2:	e091      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x1cc>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	2202      	movs	r2, #2
 8002fca:	4013      	ands	r3, r2
 8002fcc:	d000      	beq.n	8002fd0 <HAL_ADC_ConfigChannel+0xb4>
 8002fce:	e089      	b.n	80030e4 <HAL_ADC_ConfigChannel+0x1c8>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2204      	movs	r2, #4
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	d000      	beq.n	8002fdc <HAL_ADC_ConfigChannel+0xc0>
 8002fda:	e081      	b.n	80030e0 <HAL_ADC_ConfigChannel+0x1c4>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2208      	movs	r2, #8
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	d000      	beq.n	8002fe8 <HAL_ADC_ConfigChannel+0xcc>
 8002fe6:	e079      	b.n	80030dc <HAL_ADC_ConfigChannel+0x1c0>
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	2210      	movs	r2, #16
 8002fee:	4013      	ands	r3, r2
 8002ff0:	d000      	beq.n	8002ff4 <HAL_ADC_ConfigChannel+0xd8>
 8002ff2:	e071      	b.n	80030d8 <HAL_ADC_ConfigChannel+0x1bc>
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d000      	beq.n	8003000 <HAL_ADC_ConfigChannel+0xe4>
 8002ffe:	e069      	b.n	80030d4 <HAL_ADC_ConfigChannel+0x1b8>
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2240      	movs	r2, #64	; 0x40
 8003006:	4013      	ands	r3, r2
 8003008:	d000      	beq.n	800300c <HAL_ADC_ConfigChannel+0xf0>
 800300a:	e061      	b.n	80030d0 <HAL_ADC_ConfigChannel+0x1b4>
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	4013      	ands	r3, r2
 8003014:	d000      	beq.n	8003018 <HAL_ADC_ConfigChannel+0xfc>
 8003016:	e059      	b.n	80030cc <HAL_ADC_ConfigChannel+0x1b0>
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	005b      	lsls	r3, r3, #1
 8003020:	4013      	ands	r3, r2
 8003022:	d151      	bne.n	80030c8 <HAL_ADC_ConfigChannel+0x1ac>
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	2380      	movs	r3, #128	; 0x80
 800302a:	009b      	lsls	r3, r3, #2
 800302c:	4013      	ands	r3, r2
 800302e:	d149      	bne.n	80030c4 <HAL_ADC_ConfigChannel+0x1a8>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	2380      	movs	r3, #128	; 0x80
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	4013      	ands	r3, r2
 800303a:	d141      	bne.n	80030c0 <HAL_ADC_ConfigChannel+0x1a4>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681a      	ldr	r2, [r3, #0]
 8003040:	2380      	movs	r3, #128	; 0x80
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	4013      	ands	r3, r2
 8003046:	d139      	bne.n	80030bc <HAL_ADC_ConfigChannel+0x1a0>
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	2380      	movs	r3, #128	; 0x80
 800304e:	015b      	lsls	r3, r3, #5
 8003050:	4013      	ands	r3, r2
 8003052:	d131      	bne.n	80030b8 <HAL_ADC_ConfigChannel+0x19c>
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	681a      	ldr	r2, [r3, #0]
 8003058:	2380      	movs	r3, #128	; 0x80
 800305a:	019b      	lsls	r3, r3, #6
 800305c:	4013      	ands	r3, r2
 800305e:	d129      	bne.n	80030b4 <HAL_ADC_ConfigChannel+0x198>
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	681a      	ldr	r2, [r3, #0]
 8003064:	2380      	movs	r3, #128	; 0x80
 8003066:	01db      	lsls	r3, r3, #7
 8003068:	4013      	ands	r3, r2
 800306a:	d121      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x194>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	021b      	lsls	r3, r3, #8
 8003074:	4013      	ands	r3, r2
 8003076:	d119      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x190>
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	025b      	lsls	r3, r3, #9
 8003080:	4013      	ands	r3, r2
 8003082:	d111      	bne.n	80030a8 <HAL_ADC_ConfigChannel+0x18c>
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	2380      	movs	r3, #128	; 0x80
 800308a:	029b      	lsls	r3, r3, #10
 800308c:	4013      	ands	r3, r2
 800308e:	d109      	bne.n	80030a4 <HAL_ADC_ConfigChannel+0x188>
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	2380      	movs	r3, #128	; 0x80
 8003096:	02db      	lsls	r3, r3, #11
 8003098:	4013      	ands	r3, r2
 800309a:	d001      	beq.n	80030a0 <HAL_ADC_ConfigChannel+0x184>
 800309c:	2312      	movs	r3, #18
 800309e:	e024      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030a0:	2300      	movs	r3, #0
 80030a2:	e022      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030a4:	2311      	movs	r3, #17
 80030a6:	e020      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030a8:	2310      	movs	r3, #16
 80030aa:	e01e      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030ac:	230f      	movs	r3, #15
 80030ae:	e01c      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030b0:	230e      	movs	r3, #14
 80030b2:	e01a      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030b4:	230d      	movs	r3, #13
 80030b6:	e018      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030b8:	230c      	movs	r3, #12
 80030ba:	e016      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030bc:	230b      	movs	r3, #11
 80030be:	e014      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030c0:	230a      	movs	r3, #10
 80030c2:	e012      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030c4:	2309      	movs	r3, #9
 80030c6:	e010      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030c8:	2308      	movs	r3, #8
 80030ca:	e00e      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030cc:	2307      	movs	r3, #7
 80030ce:	e00c      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030d0:	2306      	movs	r3, #6
 80030d2:	e00a      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030d4:	2305      	movs	r3, #5
 80030d6:	e008      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030d8:	2304      	movs	r3, #4
 80030da:	e006      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030dc:	2303      	movs	r3, #3
 80030de:	e004      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e002      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_ADC_ConfigChannel+0x1ce>
 80030e8:	2300      	movs	r3, #0
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	6852      	ldr	r2, [r2, #4]
 80030ee:	201f      	movs	r0, #31
 80030f0:	4002      	ands	r2, r0
 80030f2:	4093      	lsls	r3, r2
 80030f4:	000a      	movs	r2, r1
 80030f6:	431a      	orrs	r2, r3
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	089b      	lsrs	r3, r3, #2
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	69db      	ldr	r3, [r3, #28]
 8003108:	429a      	cmp	r2, r3
 800310a:	d808      	bhi.n	800311e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6818      	ldr	r0, [r3, #0]
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	001a      	movs	r2, r3
 800311a:	f7ff fcae 	bl	8002a7a <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6818      	ldr	r0, [r3, #0]
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	6819      	ldr	r1, [r3, #0]
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	689b      	ldr	r3, [r3, #8]
 800312a:	001a      	movs	r2, r3
 800312c:	f7ff fce8 	bl	8002b00 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db00      	blt.n	800313a <HAL_ADC_ConfigChannel+0x21e>
 8003138:	e0bc      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800313a:	4b50      	ldr	r3, [pc, #320]	; (800327c <HAL_ADC_ConfigChannel+0x360>)
 800313c:	0018      	movs	r0, r3
 800313e:	f7ff fc5b 	bl	80029f8 <LL_ADC_GetCommonPathInternalCh>
 8003142:	0003      	movs	r3, r0
 8003144:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a4d      	ldr	r2, [pc, #308]	; (8003280 <HAL_ADC_ConfigChannel+0x364>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d122      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	2380      	movs	r3, #128	; 0x80
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003158:	d11d      	bne.n	8003196 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	2280      	movs	r2, #128	; 0x80
 800315e:	0412      	lsls	r2, r2, #16
 8003160:	4313      	orrs	r3, r2
 8003162:	4a46      	ldr	r2, [pc, #280]	; (800327c <HAL_ADC_ConfigChannel+0x360>)
 8003164:	0019      	movs	r1, r3
 8003166:	0010      	movs	r0, r2
 8003168:	f7ff fc32 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800316c:	4b45      	ldr	r3, [pc, #276]	; (8003284 <HAL_ADC_ConfigChannel+0x368>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4945      	ldr	r1, [pc, #276]	; (8003288 <HAL_ADC_ConfigChannel+0x36c>)
 8003172:	0018      	movs	r0, r3
 8003174:	f7fc ffd2 	bl	800011c <__udivsi3>
 8003178:	0003      	movs	r3, r0
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	0013      	movs	r3, r2
 800317e:	005b      	lsls	r3, r3, #1
 8003180:	189b      	adds	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003186:	e002      	b.n	800318e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	3b01      	subs	r3, #1
 800318c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1f9      	bne.n	8003188 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003194:	e08e      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003196:	683b      	ldr	r3, [r7, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a3c      	ldr	r2, [pc, #240]	; (800328c <HAL_ADC_ConfigChannel+0x370>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d10e      	bne.n	80031be <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80031a0:	693a      	ldr	r2, [r7, #16]
 80031a2:	2380      	movs	r3, #128	; 0x80
 80031a4:	045b      	lsls	r3, r3, #17
 80031a6:	4013      	ands	r3, r2
 80031a8:	d109      	bne.n	80031be <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	2280      	movs	r2, #128	; 0x80
 80031ae:	0452      	lsls	r2, r2, #17
 80031b0:	4313      	orrs	r3, r2
 80031b2:	4a32      	ldr	r2, [pc, #200]	; (800327c <HAL_ADC_ConfigChannel+0x360>)
 80031b4:	0019      	movs	r1, r3
 80031b6:	0010      	movs	r0, r2
 80031b8:	f7ff fc0a 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 80031bc:	e07a      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a33      	ldr	r2, [pc, #204]	; (8003290 <HAL_ADC_ConfigChannel+0x374>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d000      	beq.n	80031ca <HAL_ADC_ConfigChannel+0x2ae>
 80031c8:	e074      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80031ca:	693a      	ldr	r2, [r7, #16]
 80031cc:	2380      	movs	r3, #128	; 0x80
 80031ce:	03db      	lsls	r3, r3, #15
 80031d0:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80031d2:	d000      	beq.n	80031d6 <HAL_ADC_ConfigChannel+0x2ba>
 80031d4:	e06e      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	2280      	movs	r2, #128	; 0x80
 80031da:	03d2      	lsls	r2, r2, #15
 80031dc:	4313      	orrs	r3, r2
 80031de:	4a27      	ldr	r2, [pc, #156]	; (800327c <HAL_ADC_ConfigChannel+0x360>)
 80031e0:	0019      	movs	r1, r3
 80031e2:	0010      	movs	r0, r2
 80031e4:	f7ff fbf4 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 80031e8:	e064      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	691a      	ldr	r2, [r3, #16]
 80031ee:	2380      	movs	r3, #128	; 0x80
 80031f0:	061b      	lsls	r3, r3, #24
 80031f2:	429a      	cmp	r2, r3
 80031f4:	d004      	beq.n	8003200 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80031fa:	4a1f      	ldr	r2, [pc, #124]	; (8003278 <HAL_ADC_ConfigChannel+0x35c>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d107      	bne.n	8003210 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	0019      	movs	r1, r3
 800320a:	0010      	movs	r0, r2
 800320c:	f7ff fc66 	bl	8002adc <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	da4d      	bge.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003218:	4b18      	ldr	r3, [pc, #96]	; (800327c <HAL_ADC_ConfigChannel+0x360>)
 800321a:	0018      	movs	r0, r3
 800321c:	f7ff fbec 	bl	80029f8 <LL_ADC_GetCommonPathInternalCh>
 8003220:	0003      	movs	r3, r0
 8003222:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a15      	ldr	r2, [pc, #84]	; (8003280 <HAL_ADC_ConfigChannel+0x364>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d108      	bne.n	8003240 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800322e:	693b      	ldr	r3, [r7, #16]
 8003230:	4a18      	ldr	r2, [pc, #96]	; (8003294 <HAL_ADC_ConfigChannel+0x378>)
 8003232:	4013      	ands	r3, r2
 8003234:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_ADC_ConfigChannel+0x360>)
 8003236:	0019      	movs	r1, r3
 8003238:	0010      	movs	r0, r2
 800323a:	f7ff fbc9 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 800323e:	e039      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a11      	ldr	r2, [pc, #68]	; (800328c <HAL_ADC_ConfigChannel+0x370>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d108      	bne.n	800325c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	4a12      	ldr	r2, [pc, #72]	; (8003298 <HAL_ADC_ConfigChannel+0x37c>)
 800324e:	4013      	ands	r3, r2
 8003250:	4a0a      	ldr	r2, [pc, #40]	; (800327c <HAL_ADC_ConfigChannel+0x360>)
 8003252:	0019      	movs	r1, r3
 8003254:	0010      	movs	r0, r2
 8003256:	f7ff fbbb 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 800325a:	e02b      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	4a0b      	ldr	r2, [pc, #44]	; (8003290 <HAL_ADC_ConfigChannel+0x374>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d126      	bne.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4a0c      	ldr	r2, [pc, #48]	; (800329c <HAL_ADC_ConfigChannel+0x380>)
 800326a:	4013      	ands	r3, r2
 800326c:	4a03      	ldr	r2, [pc, #12]	; (800327c <HAL_ADC_ConfigChannel+0x360>)
 800326e:	0019      	movs	r1, r3
 8003270:	0010      	movs	r0, r2
 8003272:	f7ff fbad 	bl	80029d0 <LL_ADC_SetCommonPathInternalCh>
 8003276:	e01d      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x398>
 8003278:	80000004 	.word	0x80000004
 800327c:	40012708 	.word	0x40012708
 8003280:	b0001000 	.word	0xb0001000
 8003284:	20000004 	.word	0x20000004
 8003288:	00030d40 	.word	0x00030d40
 800328c:	b8004000 	.word	0xb8004000
 8003290:	b4002000 	.word	0xb4002000
 8003294:	ff7fffff 	.word	0xff7fffff
 8003298:	feffffff 	.word	0xfeffffff
 800329c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032a4:	2220      	movs	r2, #32
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80032ac:	2317      	movs	r3, #23
 80032ae:	18fb      	adds	r3, r7, r3
 80032b0:	2201      	movs	r2, #1
 80032b2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2254      	movs	r2, #84	; 0x54
 80032b8:	2100      	movs	r1, #0
 80032ba:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80032bc:	2317      	movs	r3, #23
 80032be:	18fb      	adds	r3, r7, r3
 80032c0:	781b      	ldrb	r3, [r3, #0]
}
 80032c2:	0018      	movs	r0, r3
 80032c4:	46bd      	mov	sp, r7
 80032c6:	b006      	add	sp, #24
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	46c0      	nop			; (mov r8, r8)

080032cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b082      	sub	sp, #8
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	0002      	movs	r2, r0
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80032d8:	1dfb      	adds	r3, r7, #7
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b7f      	cmp	r3, #127	; 0x7f
 80032de:	d809      	bhi.n	80032f4 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032e0:	1dfb      	adds	r3, r7, #7
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	001a      	movs	r2, r3
 80032e6:	231f      	movs	r3, #31
 80032e8:	401a      	ands	r2, r3
 80032ea:	4b04      	ldr	r3, [pc, #16]	; (80032fc <__NVIC_EnableIRQ+0x30>)
 80032ec:	2101      	movs	r1, #1
 80032ee:	4091      	lsls	r1, r2
 80032f0:	000a      	movs	r2, r1
 80032f2:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b002      	add	sp, #8
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	e000e100 	.word	0xe000e100

08003300 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003300:	b590      	push	{r4, r7, lr}
 8003302:	b083      	sub	sp, #12
 8003304:	af00      	add	r7, sp, #0
 8003306:	0002      	movs	r2, r0
 8003308:	6039      	str	r1, [r7, #0]
 800330a:	1dfb      	adds	r3, r7, #7
 800330c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800330e:	1dfb      	adds	r3, r7, #7
 8003310:	781b      	ldrb	r3, [r3, #0]
 8003312:	2b7f      	cmp	r3, #127	; 0x7f
 8003314:	d828      	bhi.n	8003368 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003316:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <__NVIC_SetPriority+0xd4>)
 8003318:	1dfb      	adds	r3, r7, #7
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b25b      	sxtb	r3, r3
 800331e:	089b      	lsrs	r3, r3, #2
 8003320:	33c0      	adds	r3, #192	; 0xc0
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	589b      	ldr	r3, [r3, r2]
 8003326:	1dfa      	adds	r2, r7, #7
 8003328:	7812      	ldrb	r2, [r2, #0]
 800332a:	0011      	movs	r1, r2
 800332c:	2203      	movs	r2, #3
 800332e:	400a      	ands	r2, r1
 8003330:	00d2      	lsls	r2, r2, #3
 8003332:	21ff      	movs	r1, #255	; 0xff
 8003334:	4091      	lsls	r1, r2
 8003336:	000a      	movs	r2, r1
 8003338:	43d2      	mvns	r2, r2
 800333a:	401a      	ands	r2, r3
 800333c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	22ff      	movs	r2, #255	; 0xff
 8003344:	401a      	ands	r2, r3
 8003346:	1dfb      	adds	r3, r7, #7
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	0018      	movs	r0, r3
 800334c:	2303      	movs	r3, #3
 800334e:	4003      	ands	r3, r0
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003354:	481f      	ldr	r0, [pc, #124]	; (80033d4 <__NVIC_SetPriority+0xd4>)
 8003356:	1dfb      	adds	r3, r7, #7
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	b25b      	sxtb	r3, r3
 800335c:	089b      	lsrs	r3, r3, #2
 800335e:	430a      	orrs	r2, r1
 8003360:	33c0      	adds	r3, #192	; 0xc0
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003366:	e031      	b.n	80033cc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003368:	4a1b      	ldr	r2, [pc, #108]	; (80033d8 <__NVIC_SetPriority+0xd8>)
 800336a:	1dfb      	adds	r3, r7, #7
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	0019      	movs	r1, r3
 8003370:	230f      	movs	r3, #15
 8003372:	400b      	ands	r3, r1
 8003374:	3b08      	subs	r3, #8
 8003376:	089b      	lsrs	r3, r3, #2
 8003378:	3306      	adds	r3, #6
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	18d3      	adds	r3, r2, r3
 800337e:	3304      	adds	r3, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	1dfa      	adds	r2, r7, #7
 8003384:	7812      	ldrb	r2, [r2, #0]
 8003386:	0011      	movs	r1, r2
 8003388:	2203      	movs	r2, #3
 800338a:	400a      	ands	r2, r1
 800338c:	00d2      	lsls	r2, r2, #3
 800338e:	21ff      	movs	r1, #255	; 0xff
 8003390:	4091      	lsls	r1, r2
 8003392:	000a      	movs	r2, r1
 8003394:	43d2      	mvns	r2, r2
 8003396:	401a      	ands	r2, r3
 8003398:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	22ff      	movs	r2, #255	; 0xff
 80033a0:	401a      	ands	r2, r3
 80033a2:	1dfb      	adds	r3, r7, #7
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	0018      	movs	r0, r3
 80033a8:	2303      	movs	r3, #3
 80033aa:	4003      	ands	r3, r0
 80033ac:	00db      	lsls	r3, r3, #3
 80033ae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80033b0:	4809      	ldr	r0, [pc, #36]	; (80033d8 <__NVIC_SetPriority+0xd8>)
 80033b2:	1dfb      	adds	r3, r7, #7
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	001c      	movs	r4, r3
 80033b8:	230f      	movs	r3, #15
 80033ba:	4023      	ands	r3, r4
 80033bc:	3b08      	subs	r3, #8
 80033be:	089b      	lsrs	r3, r3, #2
 80033c0:	430a      	orrs	r2, r1
 80033c2:	3306      	adds	r3, #6
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	18c3      	adds	r3, r0, r3
 80033c8:	3304      	adds	r3, #4
 80033ca:	601a      	str	r2, [r3, #0]
}
 80033cc:	46c0      	nop			; (mov r8, r8)
 80033ce:	46bd      	mov	sp, r7
 80033d0:	b003      	add	sp, #12
 80033d2:	bd90      	pop	{r4, r7, pc}
 80033d4:	e000e100 	.word	0xe000e100
 80033d8:	e000ed00 	.word	0xe000ed00

080033dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	b084      	sub	sp, #16
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60b9      	str	r1, [r7, #8]
 80033e4:	607a      	str	r2, [r7, #4]
 80033e6:	210f      	movs	r1, #15
 80033e8:	187b      	adds	r3, r7, r1
 80033ea:	1c02      	adds	r2, r0, #0
 80033ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	187b      	adds	r3, r7, r1
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	b25b      	sxtb	r3, r3
 80033f6:	0011      	movs	r1, r2
 80033f8:	0018      	movs	r0, r3
 80033fa:	f7ff ff81 	bl	8003300 <__NVIC_SetPriority>
}
 80033fe:	46c0      	nop			; (mov r8, r8)
 8003400:	46bd      	mov	sp, r7
 8003402:	b004      	add	sp, #16
 8003404:	bd80      	pop	{r7, pc}

08003406 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003406:	b580      	push	{r7, lr}
 8003408:	b082      	sub	sp, #8
 800340a:	af00      	add	r7, sp, #0
 800340c:	0002      	movs	r2, r0
 800340e:	1dfb      	adds	r3, r7, #7
 8003410:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003412:	1dfb      	adds	r3, r7, #7
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	b25b      	sxtb	r3, r3
 8003418:	0018      	movs	r0, r3
 800341a:	f7ff ff57 	bl	80032cc <__NVIC_EnableIRQ>
}
 800341e:	46c0      	nop			; (mov r8, r8)
 8003420:	46bd      	mov	sp, r7
 8003422:	b002      	add	sp, #8
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b082      	sub	sp, #8
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e077      	b.n	800352a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a3d      	ldr	r2, [pc, #244]	; (8003534 <HAL_DMA_Init+0x10c>)
 8003440:	4694      	mov	ip, r2
 8003442:	4463      	add	r3, ip
 8003444:	2114      	movs	r1, #20
 8003446:	0018      	movs	r0, r3
 8003448:	f7fc fe68 	bl	800011c <__udivsi3>
 800344c:	0003      	movs	r3, r0
 800344e:	009a      	lsls	r2, r3, #2
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2225      	movs	r2, #37	; 0x25
 8003458:	2102      	movs	r1, #2
 800345a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4934      	ldr	r1, [pc, #208]	; (8003538 <HAL_DMA_Init+0x110>)
 8003468:	400a      	ands	r2, r1
 800346a:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	6819      	ldr	r1, [r3, #0]
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	689a      	ldr	r2, [r3, #8]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	431a      	orrs	r2, r3
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	699b      	ldr	r3, [r3, #24]
 800348c:	431a      	orrs	r2, r3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a1b      	ldr	r3, [r3, #32]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	0018      	movs	r0, r3
 80034a6:	f000 f9c1 	bl	800382c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	01db      	lsls	r3, r3, #7
 80034b2:	429a      	cmp	r2, r3
 80034b4:	d102      	bne.n	80034bc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685a      	ldr	r2, [r3, #4]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034c4:	213f      	movs	r1, #63	; 0x3f
 80034c6:	400a      	ands	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80034d2:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d011      	beq.n	8003500 <HAL_DMA_Init+0xd8>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	2b04      	cmp	r3, #4
 80034e2:	d80d      	bhi.n	8003500 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	0018      	movs	r0, r3
 80034e8:	f000 f9cc 	bl	8003884 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	e008      	b.n	8003512 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2200      	movs	r2, #0
 8003504:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2225      	movs	r2, #37	; 0x25
 800351c:	2101      	movs	r1, #1
 800351e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2224      	movs	r2, #36	; 0x24
 8003524:	2100      	movs	r1, #0
 8003526:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	0018      	movs	r0, r3
 800352c:	46bd      	mov	sp, r7
 800352e:	b002      	add	sp, #8
 8003530:	bd80      	pop	{r7, pc}
 8003532:	46c0      	nop			; (mov r8, r8)
 8003534:	bffdfff8 	.word	0xbffdfff8
 8003538:	ffff800f 	.word	0xffff800f

0800353c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	60f8      	str	r0, [r7, #12]
 8003544:	60b9      	str	r1, [r7, #8]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354a:	2317      	movs	r3, #23
 800354c:	18fb      	adds	r3, r7, r3
 800354e:	2200      	movs	r2, #0
 8003550:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2224      	movs	r2, #36	; 0x24
 8003556:	5c9b      	ldrb	r3, [r3, r2]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_DMA_Start_IT+0x24>
 800355c:	2302      	movs	r3, #2
 800355e:	e06f      	b.n	8003640 <HAL_DMA_Start_IT+0x104>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2224      	movs	r2, #36	; 0x24
 8003564:	2101      	movs	r1, #1
 8003566:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2225      	movs	r2, #37	; 0x25
 800356c:	5c9b      	ldrb	r3, [r3, r2]
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b01      	cmp	r3, #1
 8003572:	d157      	bne.n	8003624 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2225      	movs	r2, #37	; 0x25
 8003578:	2102      	movs	r1, #2
 800357a:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	2200      	movs	r2, #0
 8003580:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	681a      	ldr	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	438a      	bics	r2, r1
 8003590:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f907 	bl	80037ac <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d008      	beq.n	80035b8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	210e      	movs	r1, #14
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
 80035b6:	e00f      	b.n	80035d8 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2104      	movs	r1, #4
 80035c4:	438a      	bics	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	210a      	movs	r1, #10
 80035d4:	430a      	orrs	r2, r1
 80035d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	2380      	movs	r3, #128	; 0x80
 80035e0:	025b      	lsls	r3, r3, #9
 80035e2:	4013      	ands	r3, r2
 80035e4:	d008      	beq.n	80035f8 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ea:	681a      	ldr	r2, [r3, #0]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f0:	2180      	movs	r1, #128	; 0x80
 80035f2:	0049      	lsls	r1, r1, #1
 80035f4:	430a      	orrs	r2, r1
 80035f6:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d008      	beq.n	8003612 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003604:	681a      	ldr	r2, [r3, #0]
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360a:	2180      	movs	r1, #128	; 0x80
 800360c:	0049      	lsls	r1, r1, #1
 800360e:	430a      	orrs	r2, r1
 8003610:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2101      	movs	r1, #1
 800361e:	430a      	orrs	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	e00a      	b.n	800363a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2280      	movs	r2, #128	; 0x80
 8003628:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2224      	movs	r2, #36	; 0x24
 800362e:	2100      	movs	r1, #0
 8003630:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003632:	2317      	movs	r3, #23
 8003634:	18fb      	adds	r3, r7, r3
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800363a:	2317      	movs	r3, #23
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	781b      	ldrb	r3, [r3, #0]
}
 8003640:	0018      	movs	r0, r3
 8003642:	46bd      	mov	sp, r7
 8003644:	b006      	add	sp, #24
 8003646:	bd80      	pop	{r7, pc}

08003648 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b084      	sub	sp, #16
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003650:	4b55      	ldr	r3, [pc, #340]	; (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003662:	221c      	movs	r2, #28
 8003664:	4013      	ands	r3, r2
 8003666:	2204      	movs	r2, #4
 8003668:	409a      	lsls	r2, r3
 800366a:	0013      	movs	r3, r2
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	d027      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x7a>
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	2204      	movs	r2, #4
 8003676:	4013      	ands	r3, r2
 8003678:	d023      	beq.n	80036c2 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2220      	movs	r2, #32
 8003682:	4013      	ands	r3, r2
 8003684:	d107      	bne.n	8003696 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2104      	movs	r1, #4
 8003692:	438a      	bics	r2, r1
 8003694:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003696:	4b44      	ldr	r3, [pc, #272]	; (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003698:	6859      	ldr	r1, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369e:	221c      	movs	r2, #28
 80036a0:	4013      	ands	r3, r2
 80036a2:	2204      	movs	r2, #4
 80036a4:	409a      	lsls	r2, r3
 80036a6:	4b40      	ldr	r3, [pc, #256]	; (80037a8 <HAL_DMA_IRQHandler+0x160>)
 80036a8:	430a      	orrs	r2, r1
 80036aa:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d100      	bne.n	80036b6 <HAL_DMA_IRQHandler+0x6e>
 80036b4:	e073      	b.n	800379e <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	0010      	movs	r0, r2
 80036be:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80036c0:	e06d      	b.n	800379e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	221c      	movs	r2, #28
 80036c8:	4013      	ands	r3, r2
 80036ca:	2202      	movs	r2, #2
 80036cc:	409a      	lsls	r2, r3
 80036ce:	0013      	movs	r3, r2
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	4013      	ands	r3, r2
 80036d4:	d02e      	beq.n	8003734 <HAL_DMA_IRQHandler+0xec>
 80036d6:	68bb      	ldr	r3, [r7, #8]
 80036d8:	2202      	movs	r2, #2
 80036da:	4013      	ands	r3, r2
 80036dc:	d02a      	beq.n	8003734 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2220      	movs	r2, #32
 80036e6:	4013      	ands	r3, r2
 80036e8:	d10b      	bne.n	8003702 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	681a      	ldr	r2, [r3, #0]
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	210a      	movs	r1, #10
 80036f6:	438a      	bics	r2, r1
 80036f8:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2225      	movs	r2, #37	; 0x25
 80036fe:	2101      	movs	r1, #1
 8003700:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003702:	4b29      	ldr	r3, [pc, #164]	; (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	221c      	movs	r2, #28
 800370c:	4013      	ands	r3, r2
 800370e:	2202      	movs	r2, #2
 8003710:	409a      	lsls	r2, r3
 8003712:	4b25      	ldr	r3, [pc, #148]	; (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2224      	movs	r2, #36	; 0x24
 800371c:	2100      	movs	r1, #0
 800371e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003724:	2b00      	cmp	r3, #0
 8003726:	d03a      	beq.n	800379e <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372c:	687a      	ldr	r2, [r7, #4]
 800372e:	0010      	movs	r0, r2
 8003730:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003732:	e034      	b.n	800379e <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003738:	221c      	movs	r2, #28
 800373a:	4013      	ands	r3, r2
 800373c:	2208      	movs	r2, #8
 800373e:	409a      	lsls	r2, r3
 8003740:	0013      	movs	r3, r2
 8003742:	68fa      	ldr	r2, [r7, #12]
 8003744:	4013      	ands	r3, r2
 8003746:	d02b      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x158>
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	2208      	movs	r2, #8
 800374c:	4013      	ands	r3, r2
 800374e:	d027      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	210e      	movs	r1, #14
 800375c:	438a      	bics	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003760:	4b11      	ldr	r3, [pc, #68]	; (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003762:	6859      	ldr	r1, [r3, #4]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003768:	221c      	movs	r2, #28
 800376a:	4013      	ands	r3, r2
 800376c:	2201      	movs	r2, #1
 800376e:	409a      	lsls	r2, r3
 8003770:	4b0d      	ldr	r3, [pc, #52]	; (80037a8 <HAL_DMA_IRQHandler+0x160>)
 8003772:	430a      	orrs	r2, r1
 8003774:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2201      	movs	r2, #1
 800377a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2225      	movs	r2, #37	; 0x25
 8003780:	2101      	movs	r1, #1
 8003782:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	; 0x24
 8003788:	2100      	movs	r1, #0
 800378a:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003790:	2b00      	cmp	r3, #0
 8003792:	d005      	beq.n	80037a0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	0010      	movs	r0, r2
 800379c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800379e:	46c0      	nop			; (mov r8, r8)
 80037a0:	46c0      	nop			; (mov r8, r8)
}
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b004      	add	sp, #16
 80037a6:	bd80      	pop	{r7, pc}
 80037a8:	40020000 	.word	0x40020000

080037ac <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	60b9      	str	r1, [r7, #8]
 80037b6:	607a      	str	r2, [r7, #4]
 80037b8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037be:	68fa      	ldr	r2, [r7, #12]
 80037c0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037c2:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d004      	beq.n	80037d6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d0:	68fa      	ldr	r2, [r7, #12]
 80037d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80037d4:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80037d6:	4b14      	ldr	r3, [pc, #80]	; (8003828 <DMA_SetConfig+0x7c>)
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037de:	221c      	movs	r2, #28
 80037e0:	4013      	ands	r3, r2
 80037e2:	2201      	movs	r2, #1
 80037e4:	409a      	lsls	r2, r3
 80037e6:	4b10      	ldr	r3, [pc, #64]	; (8003828 <DMA_SetConfig+0x7c>)
 80037e8:	430a      	orrs	r2, r1
 80037ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	2b10      	cmp	r3, #16
 80037fa:	d108      	bne.n	800380e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68ba      	ldr	r2, [r7, #8]
 800380a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800380c:	e007      	b.n	800381e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	68ba      	ldr	r2, [r7, #8]
 8003814:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	60da      	str	r2, [r3, #12]
}
 800381e:	46c0      	nop			; (mov r8, r8)
 8003820:	46bd      	mov	sp, r7
 8003822:	b004      	add	sp, #16
 8003824:	bd80      	pop	{r7, pc}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	40020000 	.word	0x40020000

0800382c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003838:	089b      	lsrs	r3, r3, #2
 800383a:	4a10      	ldr	r2, [pc, #64]	; (800387c <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800383c:	4694      	mov	ip, r2
 800383e:	4463      	add	r3, ip
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	001a      	movs	r2, r3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	001a      	movs	r2, r3
 800384e:	23ff      	movs	r3, #255	; 0xff
 8003850:	4013      	ands	r3, r2
 8003852:	3b08      	subs	r3, #8
 8003854:	2114      	movs	r1, #20
 8003856:	0018      	movs	r0, r3
 8003858:	f7fc fc60 	bl	800011c <__udivsi3>
 800385c:	0003      	movs	r3, r0
 800385e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a07      	ldr	r2, [pc, #28]	; (8003880 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003864:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	221f      	movs	r2, #31
 800386a:	4013      	ands	r3, r2
 800386c:	2201      	movs	r2, #1
 800386e:	409a      	lsls	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003874:	46c0      	nop			; (mov r8, r8)
 8003876:	46bd      	mov	sp, r7
 8003878:	b004      	add	sp, #16
 800387a:	bd80      	pop	{r7, pc}
 800387c:	10008200 	.word	0x10008200
 8003880:	40020880 	.word	0x40020880

08003884 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	223f      	movs	r2, #63	; 0x3f
 8003892:	4013      	ands	r3, r2
 8003894:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	4a0a      	ldr	r2, [pc, #40]	; (80038c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800389a:	4694      	mov	ip, r2
 800389c:	4463      	add	r3, ip
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	001a      	movs	r2, r3
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	4a07      	ldr	r2, [pc, #28]	; (80038c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80038aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3b01      	subs	r3, #1
 80038b0:	2203      	movs	r2, #3
 80038b2:	4013      	ands	r3, r2
 80038b4:	2201      	movs	r2, #1
 80038b6:	409a      	lsls	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	659a      	str	r2, [r3, #88]	; 0x58
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b004      	add	sp, #16
 80038c2:	bd80      	pop	{r7, pc}
 80038c4:	1000823f 	.word	0x1000823f
 80038c8:	40020940 	.word	0x40020940

080038cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80038d6:	2300      	movs	r3, #0
 80038d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80038da:	e147      	b.n	8003b6c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2101      	movs	r1, #1
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4091      	lsls	r1, r2
 80038e6:	000a      	movs	r2, r1
 80038e8:	4013      	ands	r3, r2
 80038ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d100      	bne.n	80038f4 <HAL_GPIO_Init+0x28>
 80038f2:	e138      	b.n	8003b66 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	2203      	movs	r2, #3
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d005      	beq.n	800390c <HAL_GPIO_Init+0x40>
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	2203      	movs	r2, #3
 8003906:	4013      	ands	r3, r2
 8003908:	2b02      	cmp	r3, #2
 800390a:	d130      	bne.n	800396e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	2203      	movs	r2, #3
 8003918:	409a      	lsls	r2, r3
 800391a:	0013      	movs	r3, r2
 800391c:	43da      	mvns	r2, r3
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4013      	ands	r3, r2
 8003922:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	68da      	ldr	r2, [r3, #12]
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	409a      	lsls	r2, r3
 800392e:	0013      	movs	r3, r2
 8003930:	693a      	ldr	r2, [r7, #16]
 8003932:	4313      	orrs	r3, r2
 8003934:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003942:	2201      	movs	r2, #1
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	409a      	lsls	r2, r3
 8003948:	0013      	movs	r3, r2
 800394a:	43da      	mvns	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4013      	ands	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	091b      	lsrs	r3, r3, #4
 8003958:	2201      	movs	r2, #1
 800395a:	401a      	ands	r2, r3
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	409a      	lsls	r2, r3
 8003960:	0013      	movs	r3, r2
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	4313      	orrs	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	693a      	ldr	r2, [r7, #16]
 800396c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2203      	movs	r2, #3
 8003974:	4013      	ands	r3, r2
 8003976:	2b03      	cmp	r3, #3
 8003978:	d017      	beq.n	80039aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	2203      	movs	r2, #3
 8003986:	409a      	lsls	r2, r3
 8003988:	0013      	movs	r3, r2
 800398a:	43da      	mvns	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	689a      	ldr	r2, [r3, #8]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	005b      	lsls	r3, r3, #1
 800399a:	409a      	lsls	r2, r3
 800399c:	0013      	movs	r3, r2
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	4313      	orrs	r3, r2
 80039a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	693a      	ldr	r2, [r7, #16]
 80039a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2203      	movs	r2, #3
 80039b0:	4013      	ands	r3, r2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d123      	bne.n	80039fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	08da      	lsrs	r2, r3, #3
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	3208      	adds	r2, #8
 80039be:	0092      	lsls	r2, r2, #2
 80039c0:	58d3      	ldr	r3, [r2, r3]
 80039c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	2207      	movs	r2, #7
 80039c8:	4013      	ands	r3, r2
 80039ca:	009b      	lsls	r3, r3, #2
 80039cc:	220f      	movs	r2, #15
 80039ce:	409a      	lsls	r2, r3
 80039d0:	0013      	movs	r3, r2
 80039d2:	43da      	mvns	r2, r3
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4013      	ands	r3, r2
 80039d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2107      	movs	r1, #7
 80039e2:	400b      	ands	r3, r1
 80039e4:	009b      	lsls	r3, r3, #2
 80039e6:	409a      	lsls	r2, r3
 80039e8:	0013      	movs	r3, r2
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	08da      	lsrs	r2, r3, #3
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3208      	adds	r2, #8
 80039f8:	0092      	lsls	r2, r2, #2
 80039fa:	6939      	ldr	r1, [r7, #16]
 80039fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	005b      	lsls	r3, r3, #1
 8003a08:	2203      	movs	r2, #3
 8003a0a:	409a      	lsls	r2, r3
 8003a0c:	0013      	movs	r3, r2
 8003a0e:	43da      	mvns	r2, r3
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4013      	ands	r3, r2
 8003a14:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	2203      	movs	r2, #3
 8003a1c:	401a      	ands	r2, r3
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	409a      	lsls	r2, r3
 8003a24:	0013      	movs	r3, r2
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	23c0      	movs	r3, #192	; 0xc0
 8003a38:	029b      	lsls	r3, r3, #10
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d100      	bne.n	8003a40 <HAL_GPIO_Init+0x174>
 8003a3e:	e092      	b.n	8003b66 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003a40:	4a50      	ldr	r2, [pc, #320]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3318      	adds	r3, #24
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	589b      	ldr	r3, [r3, r2]
 8003a4c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	2203      	movs	r2, #3
 8003a52:	4013      	ands	r3, r2
 8003a54:	00db      	lsls	r3, r3, #3
 8003a56:	220f      	movs	r2, #15
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	0013      	movs	r3, r2
 8003a5c:	43da      	mvns	r2, r3
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	4013      	ands	r3, r2
 8003a62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	23a0      	movs	r3, #160	; 0xa0
 8003a68:	05db      	lsls	r3, r3, #23
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d013      	beq.n	8003a96 <HAL_GPIO_Init+0x1ca>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a45      	ldr	r2, [pc, #276]	; (8003b88 <HAL_GPIO_Init+0x2bc>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d00d      	beq.n	8003a92 <HAL_GPIO_Init+0x1c6>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a44      	ldr	r2, [pc, #272]	; (8003b8c <HAL_GPIO_Init+0x2c0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d007      	beq.n	8003a8e <HAL_GPIO_Init+0x1c2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a43      	ldr	r2, [pc, #268]	; (8003b90 <HAL_GPIO_Init+0x2c4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d101      	bne.n	8003a8a <HAL_GPIO_Init+0x1be>
 8003a86:	2303      	movs	r3, #3
 8003a88:	e006      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a8a:	2305      	movs	r3, #5
 8003a8c:	e004      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a8e:	2302      	movs	r3, #2
 8003a90:	e002      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e000      	b.n	8003a98 <HAL_GPIO_Init+0x1cc>
 8003a96:	2300      	movs	r3, #0
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	2103      	movs	r1, #3
 8003a9c:	400a      	ands	r2, r1
 8003a9e:	00d2      	lsls	r2, r2, #3
 8003aa0:	4093      	lsls	r3, r2
 8003aa2:	693a      	ldr	r2, [r7, #16]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003aa8:	4936      	ldr	r1, [pc, #216]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	089b      	lsrs	r3, r3, #2
 8003aae:	3318      	adds	r3, #24
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	693a      	ldr	r2, [r7, #16]
 8003ab4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ab6:	4b33      	ldr	r3, [pc, #204]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	43da      	mvns	r2, r3
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	2380      	movs	r3, #128	; 0x80
 8003acc:	035b      	lsls	r3, r3, #13
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d003      	beq.n	8003ada <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003ad2:	693a      	ldr	r2, [r7, #16]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ada:	4b2a      	ldr	r3, [pc, #168]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003ae0:	4b28      	ldr	r3, [pc, #160]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	43da      	mvns	r2, r3
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4013      	ands	r3, r2
 8003aee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	039b      	lsls	r3, r3, #14
 8003af8:	4013      	ands	r3, r2
 8003afa:	d003      	beq.n	8003b04 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003afc:	693a      	ldr	r2, [r7, #16]
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003b04:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b06:	693a      	ldr	r2, [r7, #16]
 8003b08:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003b0a:	4a1e      	ldr	r2, [pc, #120]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b0c:	2384      	movs	r3, #132	; 0x84
 8003b0e:	58d3      	ldr	r3, [r2, r3]
 8003b10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	43da      	mvns	r2, r3
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4013      	ands	r3, r2
 8003b1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	2380      	movs	r3, #128	; 0x80
 8003b22:	029b      	lsls	r3, r3, #10
 8003b24:	4013      	ands	r3, r2
 8003b26:	d003      	beq.n	8003b30 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b30:	4914      	ldr	r1, [pc, #80]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b32:	2284      	movs	r2, #132	; 0x84
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003b38:	4a12      	ldr	r2, [pc, #72]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b3a:	2380      	movs	r3, #128	; 0x80
 8003b3c:	58d3      	ldr	r3, [r2, r3]
 8003b3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	43da      	mvns	r2, r3
 8003b44:	693b      	ldr	r3, [r7, #16]
 8003b46:	4013      	ands	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	2380      	movs	r3, #128	; 0x80
 8003b50:	025b      	lsls	r3, r3, #9
 8003b52:	4013      	ands	r3, r2
 8003b54:	d003      	beq.n	8003b5e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003b56:	693a      	ldr	r2, [r7, #16]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b5e:	4909      	ldr	r1, [pc, #36]	; (8003b84 <HAL_GPIO_Init+0x2b8>)
 8003b60:	2280      	movs	r2, #128	; 0x80
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	3301      	adds	r3, #1
 8003b6a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	40da      	lsrs	r2, r3
 8003b74:	1e13      	subs	r3, r2, #0
 8003b76:	d000      	beq.n	8003b7a <HAL_GPIO_Init+0x2ae>
 8003b78:	e6b0      	b.n	80038dc <HAL_GPIO_Init+0x10>
  }
}
 8003b7a:	46c0      	nop			; (mov r8, r8)
 8003b7c:	46c0      	nop			; (mov r8, r8)
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	b006      	add	sp, #24
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	40021800 	.word	0x40021800
 8003b88:	50000400 	.word	0x50000400
 8003b8c:	50000800 	.word	0x50000800
 8003b90:	50000c00 	.word	0x50000c00

08003b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
 8003b9c:	0008      	movs	r0, r1
 8003b9e:	0011      	movs	r1, r2
 8003ba0:	1cbb      	adds	r3, r7, #2
 8003ba2:	1c02      	adds	r2, r0, #0
 8003ba4:	801a      	strh	r2, [r3, #0]
 8003ba6:	1c7b      	adds	r3, r7, #1
 8003ba8:	1c0a      	adds	r2, r1, #0
 8003baa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bac:	1c7b      	adds	r3, r7, #1
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d004      	beq.n	8003bbe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bb4:	1cbb      	adds	r3, r7, #2
 8003bb6:	881a      	ldrh	r2, [r3, #0]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bbc:	e003      	b.n	8003bc6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bbe:	1cbb      	adds	r3, r7, #2
 8003bc0:	881a      	ldrh	r2, [r3, #0]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b002      	add	sp, #8
 8003bcc:	bd80      	pop	{r7, pc}

08003bce <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
 8003bd6:	000a      	movs	r2, r1
 8003bd8:	1cbb      	adds	r3, r7, #2
 8003bda:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003be2:	1cbb      	adds	r3, r7, #2
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	68fa      	ldr	r2, [r7, #12]
 8003be8:	4013      	ands	r3, r2
 8003bea:	041a      	lsls	r2, r3, #16
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	43db      	mvns	r3, r3
 8003bf0:	1cb9      	adds	r1, r7, #2
 8003bf2:	8809      	ldrh	r1, [r1, #0]
 8003bf4:	400b      	ands	r3, r1
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	619a      	str	r2, [r3, #24]
}
 8003bfc:	46c0      	nop			; (mov r8, r8)
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	b004      	add	sp, #16
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b082      	sub	sp, #8
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	0002      	movs	r2, r0
 8003c0c:	1dbb      	adds	r3, r7, #6
 8003c0e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003c10:	4b10      	ldr	r3, [pc, #64]	; (8003c54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	1dba      	adds	r2, r7, #6
 8003c16:	8812      	ldrh	r2, [r2, #0]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	d008      	beq.n	8003c2e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003c1c:	4b0d      	ldr	r3, [pc, #52]	; (8003c54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003c1e:	1dba      	adds	r2, r7, #6
 8003c20:	8812      	ldrh	r2, [r2, #0]
 8003c22:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003c24:	1dbb      	adds	r3, r7, #6
 8003c26:	881b      	ldrh	r3, [r3, #0]
 8003c28:	0018      	movs	r0, r3
 8003c2a:	f006 fd53 	bl	800a6d4 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003c2e:	4b09      	ldr	r3, [pc, #36]	; (8003c54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003c30:	691b      	ldr	r3, [r3, #16]
 8003c32:	1dba      	adds	r2, r7, #6
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	4013      	ands	r3, r2
 8003c38:	d008      	beq.n	8003c4c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003c3a:	4b06      	ldr	r3, [pc, #24]	; (8003c54 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003c3c:	1dba      	adds	r2, r7, #6
 8003c3e:	8812      	ldrh	r2, [r2, #0]
 8003c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003c42:	1dbb      	adds	r3, r7, #6
 8003c44:	881b      	ldrh	r3, [r3, #0]
 8003c46:	0018      	movs	r0, r3
 8003c48:	f000 f806 	bl	8003c58 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	b002      	add	sp, #8
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	40021800 	.word	0x40021800

08003c58 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	0002      	movs	r2, r0
 8003c60:	1dbb      	adds	r3, r7, #6
 8003c62:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003c64:	46c0      	nop			; (mov r8, r8)
 8003c66:	46bd      	mov	sp, r7
 8003c68:	b002      	add	sp, #8
 8003c6a:	bd80      	pop	{r7, pc}

08003c6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003c74:	4b19      	ldr	r3, [pc, #100]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	4b17      	ldr	r3, [pc, #92]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	2380      	movs	r3, #128	; 0x80
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d11f      	bne.n	8003cd0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003c90:	4b14      	ldr	r3, [pc, #80]	; (8003ce4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	0013      	movs	r3, r2
 8003c96:	005b      	lsls	r3, r3, #1
 8003c98:	189b      	adds	r3, r3, r2
 8003c9a:	005b      	lsls	r3, r3, #1
 8003c9c:	4912      	ldr	r1, [pc, #72]	; (8003ce8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f7fc fa3c 	bl	800011c <__udivsi3>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	3301      	adds	r3, #1
 8003ca8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003caa:	e008      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d003      	beq.n	8003cba <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3b01      	subs	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e001      	b.n	8003cbe <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e009      	b.n	8003cd2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003cbe:	4b07      	ldr	r3, [pc, #28]	; (8003cdc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003cc0:	695a      	ldr	r2, [r3, #20]
 8003cc2:	2380      	movs	r3, #128	; 0x80
 8003cc4:	00db      	lsls	r3, r3, #3
 8003cc6:	401a      	ands	r2, r3
 8003cc8:	2380      	movs	r3, #128	; 0x80
 8003cca:	00db      	lsls	r3, r3, #3
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d0ed      	beq.n	8003cac <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	40007000 	.word	0x40007000
 8003ce0:	fffff9ff 	.word	0xfffff9ff
 8003ce4:	20000004 	.word	0x20000004
 8003ce8:	000f4240 	.word	0x000f4240

08003cec <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	23e0      	movs	r3, #224	; 0xe0
 8003cf6:	01db      	lsls	r3, r3, #7
 8003cf8:	4013      	ands	r3, r2
}
 8003cfa:	0018      	movs	r0, r3
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40021000 	.word	0x40021000

08003d04 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e2f3      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d100      	bne.n	8003d22 <HAL_RCC_OscConfig+0x1e>
 8003d20:	e07c      	b.n	8003e1c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d22:	4bc3      	ldr	r3, [pc, #780]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	2238      	movs	r2, #56	; 0x38
 8003d28:	4013      	ands	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d2c:	4bc0      	ldr	r3, [pc, #768]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d2e:	68db      	ldr	r3, [r3, #12]
 8003d30:	2203      	movs	r2, #3
 8003d32:	4013      	ands	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	2b10      	cmp	r3, #16
 8003d3a:	d102      	bne.n	8003d42 <HAL_RCC_OscConfig+0x3e>
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	2b03      	cmp	r3, #3
 8003d40:	d002      	beq.n	8003d48 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003d42:	69bb      	ldr	r3, [r7, #24]
 8003d44:	2b08      	cmp	r3, #8
 8003d46:	d10b      	bne.n	8003d60 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d48:	4bb9      	ldr	r3, [pc, #740]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	2380      	movs	r3, #128	; 0x80
 8003d4e:	029b      	lsls	r3, r3, #10
 8003d50:	4013      	ands	r3, r2
 8003d52:	d062      	beq.n	8003e1a <HAL_RCC_OscConfig+0x116>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d15e      	bne.n	8003e1a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	e2ce      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	2380      	movs	r3, #128	; 0x80
 8003d66:	025b      	lsls	r3, r3, #9
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d107      	bne.n	8003d7c <HAL_RCC_OscConfig+0x78>
 8003d6c:	4bb0      	ldr	r3, [pc, #704]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4baf      	ldr	r3, [pc, #700]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d72:	2180      	movs	r1, #128	; 0x80
 8003d74:	0249      	lsls	r1, r1, #9
 8003d76:	430a      	orrs	r2, r1
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	e020      	b.n	8003dbe <HAL_RCC_OscConfig+0xba>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	23a0      	movs	r3, #160	; 0xa0
 8003d82:	02db      	lsls	r3, r3, #11
 8003d84:	429a      	cmp	r2, r3
 8003d86:	d10e      	bne.n	8003da6 <HAL_RCC_OscConfig+0xa2>
 8003d88:	4ba9      	ldr	r3, [pc, #676]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	4ba8      	ldr	r3, [pc, #672]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d8e:	2180      	movs	r1, #128	; 0x80
 8003d90:	02c9      	lsls	r1, r1, #11
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	4ba6      	ldr	r3, [pc, #664]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4ba5      	ldr	r3, [pc, #660]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003d9c:	2180      	movs	r1, #128	; 0x80
 8003d9e:	0249      	lsls	r1, r1, #9
 8003da0:	430a      	orrs	r2, r1
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e00b      	b.n	8003dbe <HAL_RCC_OscConfig+0xba>
 8003da6:	4ba2      	ldr	r3, [pc, #648]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003da8:	681a      	ldr	r2, [r3, #0]
 8003daa:	4ba1      	ldr	r3, [pc, #644]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003dac:	49a1      	ldr	r1, [pc, #644]	; (8004034 <HAL_RCC_OscConfig+0x330>)
 8003dae:	400a      	ands	r2, r1
 8003db0:	601a      	str	r2, [r3, #0]
 8003db2:	4b9f      	ldr	r3, [pc, #636]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	4b9e      	ldr	r3, [pc, #632]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003db8:	499f      	ldr	r1, [pc, #636]	; (8004038 <HAL_RCC_OscConfig+0x334>)
 8003dba:	400a      	ands	r2, r1
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685b      	ldr	r3, [r3, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d014      	beq.n	8003df0 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe fdbf 	bl	8002948 <HAL_GetTick>
 8003dca:	0003      	movs	r3, r0
 8003dcc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe fdba 	bl	8002948 <HAL_GetTick>
 8003dd4:	0002      	movs	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e28d      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003de2:	4b93      	ldr	r3, [pc, #588]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	029b      	lsls	r3, r3, #10
 8003dea:	4013      	ands	r3, r2
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xcc>
 8003dee:	e015      	b.n	8003e1c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe fdaa 	bl	8002948 <HAL_GetTick>
 8003df4:	0003      	movs	r3, r0
 8003df6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df8:	e008      	b.n	8003e0c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dfa:	f7fe fda5 	bl	8002948 <HAL_GetTick>
 8003dfe:	0002      	movs	r2, r0
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	1ad3      	subs	r3, r2, r3
 8003e04:	2b64      	cmp	r3, #100	; 0x64
 8003e06:	d901      	bls.n	8003e0c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	e278      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e0c:	4b88      	ldr	r3, [pc, #544]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	2380      	movs	r3, #128	; 0x80
 8003e12:	029b      	lsls	r3, r3, #10
 8003e14:	4013      	ands	r3, r2
 8003e16:	d1f0      	bne.n	8003dfa <HAL_RCC_OscConfig+0xf6>
 8003e18:	e000      	b.n	8003e1c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e1a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2202      	movs	r2, #2
 8003e22:	4013      	ands	r3, r2
 8003e24:	d100      	bne.n	8003e28 <HAL_RCC_OscConfig+0x124>
 8003e26:	e099      	b.n	8003f5c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e28:	4b81      	ldr	r3, [pc, #516]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2238      	movs	r2, #56	; 0x38
 8003e2e:	4013      	ands	r3, r2
 8003e30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e32:	4b7f      	ldr	r3, [pc, #508]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	2203      	movs	r2, #3
 8003e38:	4013      	ands	r3, r2
 8003e3a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b10      	cmp	r3, #16
 8003e40:	d102      	bne.n	8003e48 <HAL_RCC_OscConfig+0x144>
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	2b02      	cmp	r3, #2
 8003e46:	d002      	beq.n	8003e4e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003e48:	69bb      	ldr	r3, [r7, #24]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d135      	bne.n	8003eba <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e4e:	4b78      	ldr	r3, [pc, #480]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e50:	681a      	ldr	r2, [r3, #0]
 8003e52:	2380      	movs	r3, #128	; 0x80
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	4013      	ands	r3, r2
 8003e58:	d005      	beq.n	8003e66 <HAL_RCC_OscConfig+0x162>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d101      	bne.n	8003e66 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e24b      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e66:	4b72      	ldr	r3, [pc, #456]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	4a74      	ldr	r2, [pc, #464]	; (800403c <HAL_RCC_OscConfig+0x338>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	0019      	movs	r1, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	021a      	lsls	r2, r3, #8
 8003e76:	4b6e      	ldr	r3, [pc, #440]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e78:	430a      	orrs	r2, r1
 8003e7a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003e7c:	69bb      	ldr	r3, [r7, #24]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d112      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003e82:	4b6b      	ldr	r3, [pc, #428]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4a6e      	ldr	r2, [pc, #440]	; (8004040 <HAL_RCC_OscConfig+0x33c>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	0019      	movs	r1, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	691a      	ldr	r2, [r3, #16]
 8003e90:	4b67      	ldr	r3, [pc, #412]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e92:	430a      	orrs	r2, r1
 8003e94:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003e96:	4b66      	ldr	r3, [pc, #408]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	0adb      	lsrs	r3, r3, #11
 8003e9c:	2207      	movs	r2, #7
 8003e9e:	4013      	ands	r3, r2
 8003ea0:	4a68      	ldr	r2, [pc, #416]	; (8004044 <HAL_RCC_OscConfig+0x340>)
 8003ea2:	40da      	lsrs	r2, r3
 8003ea4:	4b68      	ldr	r3, [pc, #416]	; (8004048 <HAL_RCC_OscConfig+0x344>)
 8003ea6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ea8:	4b68      	ldr	r3, [pc, #416]	; (800404c <HAL_RCC_OscConfig+0x348>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7fd fd29 	bl	8001904 <HAL_InitTick>
 8003eb2:	1e03      	subs	r3, r0, #0
 8003eb4:	d051      	beq.n	8003f5a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e221      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	68db      	ldr	r3, [r3, #12]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d030      	beq.n	8003f24 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ec2:	4b5b      	ldr	r3, [pc, #364]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4a5e      	ldr	r2, [pc, #376]	; (8004040 <HAL_RCC_OscConfig+0x33c>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	0019      	movs	r1, r3
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691a      	ldr	r2, [r3, #16]
 8003ed0:	4b57      	ldr	r3, [pc, #348]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003ed6:	4b56      	ldr	r3, [pc, #344]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b55      	ldr	r3, [pc, #340]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	0049      	lsls	r1, r1, #1
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fd30 	bl	8002948 <HAL_GetTick>
 8003ee8:	0003      	movs	r3, r0
 8003eea:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003eec:	e008      	b.n	8003f00 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003eee:	f7fe fd2b 	bl	8002948 <HAL_GetTick>
 8003ef2:	0002      	movs	r2, r0
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	1ad3      	subs	r3, r2, r3
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d901      	bls.n	8003f00 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003efc:	2303      	movs	r3, #3
 8003efe:	e1fe      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f00:	4b4b      	ldr	r3, [pc, #300]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f02:	681a      	ldr	r2, [r3, #0]
 8003f04:	2380      	movs	r3, #128	; 0x80
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	4013      	ands	r3, r2
 8003f0a:	d0f0      	beq.n	8003eee <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f0c:	4b48      	ldr	r3, [pc, #288]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f0e:	685b      	ldr	r3, [r3, #4]
 8003f10:	4a4a      	ldr	r2, [pc, #296]	; (800403c <HAL_RCC_OscConfig+0x338>)
 8003f12:	4013      	ands	r3, r2
 8003f14:	0019      	movs	r1, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	021a      	lsls	r2, r3, #8
 8003f1c:	4b44      	ldr	r3, [pc, #272]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f1e:	430a      	orrs	r2, r1
 8003f20:	605a      	str	r2, [r3, #4]
 8003f22:	e01b      	b.n	8003f5c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003f24:	4b42      	ldr	r3, [pc, #264]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	4b41      	ldr	r3, [pc, #260]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f2a:	4949      	ldr	r1, [pc, #292]	; (8004050 <HAL_RCC_OscConfig+0x34c>)
 8003f2c:	400a      	ands	r2, r1
 8003f2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f30:	f7fe fd0a 	bl	8002948 <HAL_GetTick>
 8003f34:	0003      	movs	r3, r0
 8003f36:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f38:	e008      	b.n	8003f4c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f3a:	f7fe fd05 	bl	8002948 <HAL_GetTick>
 8003f3e:	0002      	movs	r2, r0
 8003f40:	693b      	ldr	r3, [r7, #16]
 8003f42:	1ad3      	subs	r3, r2, r3
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d901      	bls.n	8003f4c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003f48:	2303      	movs	r3, #3
 8003f4a:	e1d8      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f4c:	4b38      	ldr	r3, [pc, #224]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	2380      	movs	r3, #128	; 0x80
 8003f52:	00db      	lsls	r3, r3, #3
 8003f54:	4013      	ands	r3, r2
 8003f56:	d1f0      	bne.n	8003f3a <HAL_RCC_OscConfig+0x236>
 8003f58:	e000      	b.n	8003f5c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f5a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	2208      	movs	r2, #8
 8003f62:	4013      	ands	r3, r2
 8003f64:	d047      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003f66:	4b32      	ldr	r3, [pc, #200]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	2238      	movs	r2, #56	; 0x38
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	2b18      	cmp	r3, #24
 8003f70:	d10a      	bne.n	8003f88 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003f72:	4b2f      	ldr	r3, [pc, #188]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f76:	2202      	movs	r2, #2
 8003f78:	4013      	ands	r3, r2
 8003f7a:	d03c      	beq.n	8003ff6 <HAL_RCC_OscConfig+0x2f2>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d138      	bne.n	8003ff6 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e1ba      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d019      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003f90:	4b27      	ldr	r3, [pc, #156]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f92:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f94:	4b26      	ldr	r3, [pc, #152]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003f96:	2101      	movs	r1, #1
 8003f98:	430a      	orrs	r2, r1
 8003f9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f9c:	f7fe fcd4 	bl	8002948 <HAL_GetTick>
 8003fa0:	0003      	movs	r3, r0
 8003fa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fa6:	f7fe fccf 	bl	8002948 <HAL_GetTick>
 8003faa:	0002      	movs	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e1a2      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fb8:	4b1d      	ldr	r3, [pc, #116]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	2202      	movs	r2, #2
 8003fbe:	4013      	ands	r3, r2
 8003fc0:	d0f1      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x2a2>
 8003fc2:	e018      	b.n	8003ff6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003fc4:	4b1a      	ldr	r3, [pc, #104]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003fc6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003fc8:	4b19      	ldr	r3, [pc, #100]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003fca:	2101      	movs	r1, #1
 8003fcc:	438a      	bics	r2, r1
 8003fce:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fd0:	f7fe fcba 	bl	8002948 <HAL_GetTick>
 8003fd4:	0003      	movs	r3, r0
 8003fd6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fd8:	e008      	b.n	8003fec <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fda:	f7fe fcb5 	bl	8002948 <HAL_GetTick>
 8003fde:	0002      	movs	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e188      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fec:	4b10      	ldr	r3, [pc, #64]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8003fee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	4013      	ands	r3, r2
 8003ff4:	d1f1      	bne.n	8003fda <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2204      	movs	r2, #4
 8003ffc:	4013      	ands	r3, r2
 8003ffe:	d100      	bne.n	8004002 <HAL_RCC_OscConfig+0x2fe>
 8004000:	e0c6      	b.n	8004190 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004002:	231f      	movs	r3, #31
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800400a:	4b09      	ldr	r3, [pc, #36]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2238      	movs	r2, #56	; 0x38
 8004010:	4013      	ands	r3, r2
 8004012:	2b20      	cmp	r3, #32
 8004014:	d11e      	bne.n	8004054 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004016:	4b06      	ldr	r3, [pc, #24]	; (8004030 <HAL_RCC_OscConfig+0x32c>)
 8004018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800401a:	2202      	movs	r2, #2
 800401c:	4013      	ands	r3, r2
 800401e:	d100      	bne.n	8004022 <HAL_RCC_OscConfig+0x31e>
 8004020:	e0b6      	b.n	8004190 <HAL_RCC_OscConfig+0x48c>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d000      	beq.n	800402c <HAL_RCC_OscConfig+0x328>
 800402a:	e0b1      	b.n	8004190 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e166      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
 8004030:	40021000 	.word	0x40021000
 8004034:	fffeffff 	.word	0xfffeffff
 8004038:	fffbffff 	.word	0xfffbffff
 800403c:	ffff80ff 	.word	0xffff80ff
 8004040:	ffffc7ff 	.word	0xffffc7ff
 8004044:	00f42400 	.word	0x00f42400
 8004048:	20000004 	.word	0x20000004
 800404c:	20000008 	.word	0x20000008
 8004050:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004054:	4bac      	ldr	r3, [pc, #688]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004056:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	055b      	lsls	r3, r3, #21
 800405c:	4013      	ands	r3, r2
 800405e:	d101      	bne.n	8004064 <HAL_RCC_OscConfig+0x360>
 8004060:	2301      	movs	r3, #1
 8004062:	e000      	b.n	8004066 <HAL_RCC_OscConfig+0x362>
 8004064:	2300      	movs	r3, #0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d011      	beq.n	800408e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800406a:	4ba7      	ldr	r3, [pc, #668]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800406c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800406e:	4ba6      	ldr	r3, [pc, #664]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004070:	2180      	movs	r1, #128	; 0x80
 8004072:	0549      	lsls	r1, r1, #21
 8004074:	430a      	orrs	r2, r1
 8004076:	63da      	str	r2, [r3, #60]	; 0x3c
 8004078:	4ba3      	ldr	r3, [pc, #652]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800407a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800407c:	2380      	movs	r3, #128	; 0x80
 800407e:	055b      	lsls	r3, r3, #21
 8004080:	4013      	ands	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
 8004084:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004086:	231f      	movs	r3, #31
 8004088:	18fb      	adds	r3, r7, r3
 800408a:	2201      	movs	r2, #1
 800408c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408e:	4b9f      	ldr	r3, [pc, #636]	; (800430c <HAL_RCC_OscConfig+0x608>)
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	2380      	movs	r3, #128	; 0x80
 8004094:	005b      	lsls	r3, r3, #1
 8004096:	4013      	ands	r3, r2
 8004098:	d11a      	bne.n	80040d0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800409a:	4b9c      	ldr	r3, [pc, #624]	; (800430c <HAL_RCC_OscConfig+0x608>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	4b9b      	ldr	r3, [pc, #620]	; (800430c <HAL_RCC_OscConfig+0x608>)
 80040a0:	2180      	movs	r1, #128	; 0x80
 80040a2:	0049      	lsls	r1, r1, #1
 80040a4:	430a      	orrs	r2, r1
 80040a6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80040a8:	f7fe fc4e 	bl	8002948 <HAL_GetTick>
 80040ac:	0003      	movs	r3, r0
 80040ae:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040b2:	f7fe fc49 	bl	8002948 <HAL_GetTick>
 80040b6:	0002      	movs	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e11c      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040c4:	4b91      	ldr	r3, [pc, #580]	; (800430c <HAL_RCC_OscConfig+0x608>)
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	4013      	ands	r3, r2
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d106      	bne.n	80040e6 <HAL_RCC_OscConfig+0x3e2>
 80040d8:	4b8b      	ldr	r3, [pc, #556]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80040da:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040dc:	4b8a      	ldr	r3, [pc, #552]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80040de:	2101      	movs	r1, #1
 80040e0:	430a      	orrs	r2, r1
 80040e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80040e4:	e01c      	b.n	8004120 <HAL_RCC_OscConfig+0x41c>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d10c      	bne.n	8004108 <HAL_RCC_OscConfig+0x404>
 80040ee:	4b86      	ldr	r3, [pc, #536]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80040f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040f2:	4b85      	ldr	r3, [pc, #532]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80040f4:	2104      	movs	r1, #4
 80040f6:	430a      	orrs	r2, r1
 80040f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80040fa:	4b83      	ldr	r3, [pc, #524]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80040fc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80040fe:	4b82      	ldr	r3, [pc, #520]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004100:	2101      	movs	r1, #1
 8004102:	430a      	orrs	r2, r1
 8004104:	65da      	str	r2, [r3, #92]	; 0x5c
 8004106:	e00b      	b.n	8004120 <HAL_RCC_OscConfig+0x41c>
 8004108:	4b7f      	ldr	r3, [pc, #508]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800410a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800410c:	4b7e      	ldr	r3, [pc, #504]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800410e:	2101      	movs	r1, #1
 8004110:	438a      	bics	r2, r1
 8004112:	65da      	str	r2, [r3, #92]	; 0x5c
 8004114:	4b7c      	ldr	r3, [pc, #496]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004116:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004118:	4b7b      	ldr	r3, [pc, #492]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800411a:	2104      	movs	r1, #4
 800411c:	438a      	bics	r2, r1
 800411e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d014      	beq.n	8004152 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004128:	f7fe fc0e 	bl	8002948 <HAL_GetTick>
 800412c:	0003      	movs	r3, r0
 800412e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004130:	e009      	b.n	8004146 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004132:	f7fe fc09 	bl	8002948 <HAL_GetTick>
 8004136:	0002      	movs	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	4a74      	ldr	r2, [pc, #464]	; (8004310 <HAL_RCC_OscConfig+0x60c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e0db      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004146:	4b70      	ldr	r3, [pc, #448]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004148:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800414a:	2202      	movs	r2, #2
 800414c:	4013      	ands	r3, r2
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x42e>
 8004150:	e013      	b.n	800417a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004152:	f7fe fbf9 	bl	8002948 <HAL_GetTick>
 8004156:	0003      	movs	r3, r0
 8004158:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800415a:	e009      	b.n	8004170 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800415c:	f7fe fbf4 	bl	8002948 <HAL_GetTick>
 8004160:	0002      	movs	r2, r0
 8004162:	693b      	ldr	r3, [r7, #16]
 8004164:	1ad3      	subs	r3, r2, r3
 8004166:	4a6a      	ldr	r2, [pc, #424]	; (8004310 <HAL_RCC_OscConfig+0x60c>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d901      	bls.n	8004170 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800416c:	2303      	movs	r3, #3
 800416e:	e0c6      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004170:	4b65      	ldr	r3, [pc, #404]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004172:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004174:	2202      	movs	r2, #2
 8004176:	4013      	ands	r3, r2
 8004178:	d1f0      	bne.n	800415c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800417a:	231f      	movs	r3, #31
 800417c:	18fb      	adds	r3, r7, r3
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d105      	bne.n	8004190 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004184:	4b60      	ldr	r3, [pc, #384]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004186:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004188:	4b5f      	ldr	r3, [pc, #380]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800418a:	4962      	ldr	r1, [pc, #392]	; (8004314 <HAL_RCC_OscConfig+0x610>)
 800418c:	400a      	ands	r2, r1
 800418e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	69db      	ldr	r3, [r3, #28]
 8004194:	2b00      	cmp	r3, #0
 8004196:	d100      	bne.n	800419a <HAL_RCC_OscConfig+0x496>
 8004198:	e0b0      	b.n	80042fc <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800419a:	4b5b      	ldr	r3, [pc, #364]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	2238      	movs	r2, #56	; 0x38
 80041a0:	4013      	ands	r3, r2
 80041a2:	2b10      	cmp	r3, #16
 80041a4:	d100      	bne.n	80041a8 <HAL_RCC_OscConfig+0x4a4>
 80041a6:	e078      	b.n	800429a <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	69db      	ldr	r3, [r3, #28]
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d153      	bne.n	8004258 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041b0:	4b55      	ldr	r3, [pc, #340]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	4b54      	ldr	r3, [pc, #336]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80041b6:	4958      	ldr	r1, [pc, #352]	; (8004318 <HAL_RCC_OscConfig+0x614>)
 80041b8:	400a      	ands	r2, r1
 80041ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041bc:	f7fe fbc4 	bl	8002948 <HAL_GetTick>
 80041c0:	0003      	movs	r3, r0
 80041c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041c4:	e008      	b.n	80041d8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041c6:	f7fe fbbf 	bl	8002948 <HAL_GetTick>
 80041ca:	0002      	movs	r2, r0
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	2b02      	cmp	r3, #2
 80041d2:	d901      	bls.n	80041d8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80041d4:	2303      	movs	r3, #3
 80041d6:	e092      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80041d8:	4b4b      	ldr	r3, [pc, #300]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	2380      	movs	r3, #128	; 0x80
 80041de:	049b      	lsls	r3, r3, #18
 80041e0:	4013      	ands	r3, r2
 80041e2:	d1f0      	bne.n	80041c6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041e4:	4b48      	ldr	r3, [pc, #288]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a4c      	ldr	r2, [pc, #304]	; (800431c <HAL_RCC_OscConfig+0x618>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0019      	movs	r1, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1a      	ldr	r2, [r3, #32]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f6:	431a      	orrs	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041fc:	021b      	lsls	r3, r3, #8
 80041fe:	431a      	orrs	r2, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	431a      	orrs	r2, r3
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420a:	431a      	orrs	r2, r3
 800420c:	4b3e      	ldr	r3, [pc, #248]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800420e:	430a      	orrs	r2, r1
 8004210:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004212:	4b3d      	ldr	r3, [pc, #244]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	4b3c      	ldr	r3, [pc, #240]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004218:	2180      	movs	r1, #128	; 0x80
 800421a:	0449      	lsls	r1, r1, #17
 800421c:	430a      	orrs	r2, r1
 800421e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004220:	4b39      	ldr	r3, [pc, #228]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004222:	68da      	ldr	r2, [r3, #12]
 8004224:	4b38      	ldr	r3, [pc, #224]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004226:	2180      	movs	r1, #128	; 0x80
 8004228:	0549      	lsls	r1, r1, #21
 800422a:	430a      	orrs	r2, r1
 800422c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800422e:	f7fe fb8b 	bl	8002948 <HAL_GetTick>
 8004232:	0003      	movs	r3, r0
 8004234:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004236:	e008      	b.n	800424a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004238:	f7fe fb86 	bl	8002948 <HAL_GetTick>
 800423c:	0002      	movs	r2, r0
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	1ad3      	subs	r3, r2, r3
 8004242:	2b02      	cmp	r3, #2
 8004244:	d901      	bls.n	800424a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8004246:	2303      	movs	r3, #3
 8004248:	e059      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800424a:	4b2f      	ldr	r3, [pc, #188]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	2380      	movs	r3, #128	; 0x80
 8004250:	049b      	lsls	r3, r3, #18
 8004252:	4013      	ands	r3, r2
 8004254:	d0f0      	beq.n	8004238 <HAL_RCC_OscConfig+0x534>
 8004256:	e051      	b.n	80042fc <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004258:	4b2b      	ldr	r3, [pc, #172]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	4b2a      	ldr	r3, [pc, #168]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800425e:	492e      	ldr	r1, [pc, #184]	; (8004318 <HAL_RCC_OscConfig+0x614>)
 8004260:	400a      	ands	r2, r1
 8004262:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004264:	f7fe fb70 	bl	8002948 <HAL_GetTick>
 8004268:	0003      	movs	r3, r0
 800426a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426c:	e008      	b.n	8004280 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426e:	f7fe fb6b 	bl	8002948 <HAL_GetTick>
 8004272:	0002      	movs	r2, r0
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	1ad3      	subs	r3, r2, r3
 8004278:	2b02      	cmp	r3, #2
 800427a:	d901      	bls.n	8004280 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e03e      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004280:	4b21      	ldr	r3, [pc, #132]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	2380      	movs	r3, #128	; 0x80
 8004286:	049b      	lsls	r3, r3, #18
 8004288:	4013      	ands	r3, r2
 800428a:	d1f0      	bne.n	800426e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 800428e:	68da      	ldr	r2, [r3, #12]
 8004290:	4b1d      	ldr	r3, [pc, #116]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 8004292:	4923      	ldr	r1, [pc, #140]	; (8004320 <HAL_RCC_OscConfig+0x61c>)
 8004294:	400a      	ands	r2, r1
 8004296:	60da      	str	r2, [r3, #12]
 8004298:	e030      	b.n	80042fc <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	69db      	ldr	r3, [r3, #28]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e02b      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80042a6:	4b18      	ldr	r3, [pc, #96]	; (8004308 <HAL_RCC_OscConfig+0x604>)
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ac:	697b      	ldr	r3, [r7, #20]
 80042ae:	2203      	movs	r2, #3
 80042b0:	401a      	ands	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a1b      	ldr	r3, [r3, #32]
 80042b6:	429a      	cmp	r2, r3
 80042b8:	d11e      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	2270      	movs	r2, #112	; 0x70
 80042be:	401a      	ands	r2, r3
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042c4:	429a      	cmp	r2, r3
 80042c6:	d117      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	23fe      	movs	r3, #254	; 0xfe
 80042cc:	01db      	lsls	r3, r3, #7
 80042ce:	401a      	ands	r2, r3
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d10e      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	23f8      	movs	r3, #248	; 0xf8
 80042de:	039b      	lsls	r3, r3, #14
 80042e0:	401a      	ands	r2, r3
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d106      	bne.n	80042f8 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	0f5b      	lsrs	r3, r3, #29
 80042ee:	075a      	lsls	r2, r3, #29
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e000      	b.n	80042fe <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 80042fc:	2300      	movs	r3, #0
}
 80042fe:	0018      	movs	r0, r3
 8004300:	46bd      	mov	sp, r7
 8004302:	b008      	add	sp, #32
 8004304:	bd80      	pop	{r7, pc}
 8004306:	46c0      	nop			; (mov r8, r8)
 8004308:	40021000 	.word	0x40021000
 800430c:	40007000 	.word	0x40007000
 8004310:	00001388 	.word	0x00001388
 8004314:	efffffff 	.word	0xefffffff
 8004318:	feffffff 	.word	0xfeffffff
 800431c:	1fc1808c 	.word	0x1fc1808c
 8004320:	effefffc 	.word	0xeffefffc

08004324 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b084      	sub	sp, #16
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0e9      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004338:	4b76      	ldr	r3, [pc, #472]	; (8004514 <HAL_RCC_ClockConfig+0x1f0>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2207      	movs	r2, #7
 800433e:	4013      	ands	r3, r2
 8004340:	683a      	ldr	r2, [r7, #0]
 8004342:	429a      	cmp	r2, r3
 8004344:	d91e      	bls.n	8004384 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004346:	4b73      	ldr	r3, [pc, #460]	; (8004514 <HAL_RCC_ClockConfig+0x1f0>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2207      	movs	r2, #7
 800434c:	4393      	bics	r3, r2
 800434e:	0019      	movs	r1, r3
 8004350:	4b70      	ldr	r3, [pc, #448]	; (8004514 <HAL_RCC_ClockConfig+0x1f0>)
 8004352:	683a      	ldr	r2, [r7, #0]
 8004354:	430a      	orrs	r2, r1
 8004356:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004358:	f7fe faf6 	bl	8002948 <HAL_GetTick>
 800435c:	0003      	movs	r3, r0
 800435e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004360:	e009      	b.n	8004376 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004362:	f7fe faf1 	bl	8002948 <HAL_GetTick>
 8004366:	0002      	movs	r2, r0
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	1ad3      	subs	r3, r2, r3
 800436c:	4a6a      	ldr	r2, [pc, #424]	; (8004518 <HAL_RCC_ClockConfig+0x1f4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e0ca      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004376:	4b67      	ldr	r3, [pc, #412]	; (8004514 <HAL_RCC_ClockConfig+0x1f0>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	2207      	movs	r2, #7
 800437c:	4013      	ands	r3, r2
 800437e:	683a      	ldr	r2, [r7, #0]
 8004380:	429a      	cmp	r2, r3
 8004382:	d1ee      	bne.n	8004362 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2202      	movs	r2, #2
 800438a:	4013      	ands	r3, r2
 800438c:	d015      	beq.n	80043ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	2204      	movs	r2, #4
 8004394:	4013      	ands	r3, r2
 8004396:	d006      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004398:	4b60      	ldr	r3, [pc, #384]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 800439a:	689a      	ldr	r2, [r3, #8]
 800439c:	4b5f      	ldr	r3, [pc, #380]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 800439e:	21e0      	movs	r1, #224	; 0xe0
 80043a0:	01c9      	lsls	r1, r1, #7
 80043a2:	430a      	orrs	r2, r1
 80043a4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a6:	4b5d      	ldr	r3, [pc, #372]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	4a5d      	ldr	r2, [pc, #372]	; (8004520 <HAL_RCC_ClockConfig+0x1fc>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	0019      	movs	r1, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	4b59      	ldr	r3, [pc, #356]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 80043b6:	430a      	orrs	r2, r1
 80043b8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2201      	movs	r2, #1
 80043c0:	4013      	ands	r3, r2
 80043c2:	d057      	beq.n	8004474 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043cc:	4b53      	ldr	r3, [pc, #332]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	2380      	movs	r3, #128	; 0x80
 80043d2:	029b      	lsls	r3, r3, #10
 80043d4:	4013      	ands	r3, r2
 80043d6:	d12b      	bne.n	8004430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e097      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	2b02      	cmp	r3, #2
 80043e2:	d107      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043e4:	4b4d      	ldr	r3, [pc, #308]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	2380      	movs	r3, #128	; 0x80
 80043ea:	049b      	lsls	r3, r3, #18
 80043ec:	4013      	ands	r3, r2
 80043ee:	d11f      	bne.n	8004430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80043f0:	2301      	movs	r3, #1
 80043f2:	e08b      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	685b      	ldr	r3, [r3, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d107      	bne.n	800440c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043fc:	4b47      	ldr	r3, [pc, #284]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	2380      	movs	r3, #128	; 0x80
 8004402:	00db      	lsls	r3, r3, #3
 8004404:	4013      	ands	r3, r2
 8004406:	d113      	bne.n	8004430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	e07f      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	2b03      	cmp	r3, #3
 8004412:	d106      	bne.n	8004422 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004414:	4b41      	ldr	r3, [pc, #260]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 8004416:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004418:	2202      	movs	r2, #2
 800441a:	4013      	ands	r3, r2
 800441c:	d108      	bne.n	8004430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e074      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004422:	4b3e      	ldr	r3, [pc, #248]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 8004424:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004426:	2202      	movs	r2, #2
 8004428:	4013      	ands	r3, r2
 800442a:	d101      	bne.n	8004430 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	e06d      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004430:	4b3a      	ldr	r3, [pc, #232]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 8004432:	689b      	ldr	r3, [r3, #8]
 8004434:	2207      	movs	r2, #7
 8004436:	4393      	bics	r3, r2
 8004438:	0019      	movs	r1, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	4b37      	ldr	r3, [pc, #220]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 8004440:	430a      	orrs	r2, r1
 8004442:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004444:	f7fe fa80 	bl	8002948 <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800444c:	e009      	b.n	8004462 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800444e:	f7fe fa7b 	bl	8002948 <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	4a2f      	ldr	r2, [pc, #188]	; (8004518 <HAL_RCC_ClockConfig+0x1f4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d901      	bls.n	8004462 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e054      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2238      	movs	r2, #56	; 0x38
 8004468:	401a      	ands	r2, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	429a      	cmp	r2, r3
 8004472:	d1ec      	bne.n	800444e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004474:	4b27      	ldr	r3, [pc, #156]	; (8004514 <HAL_RCC_ClockConfig+0x1f0>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2207      	movs	r2, #7
 800447a:	4013      	ands	r3, r2
 800447c:	683a      	ldr	r2, [r7, #0]
 800447e:	429a      	cmp	r2, r3
 8004480:	d21e      	bcs.n	80044c0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004482:	4b24      	ldr	r3, [pc, #144]	; (8004514 <HAL_RCC_ClockConfig+0x1f0>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2207      	movs	r2, #7
 8004488:	4393      	bics	r3, r2
 800448a:	0019      	movs	r1, r3
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <HAL_RCC_ClockConfig+0x1f0>)
 800448e:	683a      	ldr	r2, [r7, #0]
 8004490:	430a      	orrs	r2, r1
 8004492:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004494:	f7fe fa58 	bl	8002948 <HAL_GetTick>
 8004498:	0003      	movs	r3, r0
 800449a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800449c:	e009      	b.n	80044b2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800449e:	f7fe fa53 	bl	8002948 <HAL_GetTick>
 80044a2:	0002      	movs	r2, r0
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	4a1b      	ldr	r2, [pc, #108]	; (8004518 <HAL_RCC_ClockConfig+0x1f4>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e02c      	b.n	800450c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80044b2:	4b18      	ldr	r3, [pc, #96]	; (8004514 <HAL_RCC_ClockConfig+0x1f0>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2207      	movs	r2, #7
 80044b8:	4013      	ands	r3, r2
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d1ee      	bne.n	800449e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	2204      	movs	r2, #4
 80044c6:	4013      	ands	r3, r2
 80044c8:	d009      	beq.n	80044de <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	4a15      	ldr	r2, [pc, #84]	; (8004524 <HAL_RCC_ClockConfig+0x200>)
 80044d0:	4013      	ands	r3, r2
 80044d2:	0019      	movs	r1, r3
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68da      	ldr	r2, [r3, #12]
 80044d8:	4b10      	ldr	r3, [pc, #64]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 80044da:	430a      	orrs	r2, r1
 80044dc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80044de:	f000 f829 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 80044e2:	0001      	movs	r1, r0
 80044e4:	4b0d      	ldr	r3, [pc, #52]	; (800451c <HAL_RCC_ClockConfig+0x1f8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	220f      	movs	r2, #15
 80044ec:	401a      	ands	r2, r3
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <HAL_RCC_ClockConfig+0x204>)
 80044f0:	0092      	lsls	r2, r2, #2
 80044f2:	58d3      	ldr	r3, [r2, r3]
 80044f4:	221f      	movs	r2, #31
 80044f6:	4013      	ands	r3, r2
 80044f8:	000a      	movs	r2, r1
 80044fa:	40da      	lsrs	r2, r3
 80044fc:	4b0b      	ldr	r3, [pc, #44]	; (800452c <HAL_RCC_ClockConfig+0x208>)
 80044fe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004500:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCC_ClockConfig+0x20c>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	0018      	movs	r0, r3
 8004506:	f7fd f9fd 	bl	8001904 <HAL_InitTick>
 800450a:	0003      	movs	r3, r0
}
 800450c:	0018      	movs	r0, r3
 800450e:	46bd      	mov	sp, r7
 8004510:	b004      	add	sp, #16
 8004512:	bd80      	pop	{r7, pc}
 8004514:	40022000 	.word	0x40022000
 8004518:	00001388 	.word	0x00001388
 800451c:	40021000 	.word	0x40021000
 8004520:	fffff0ff 	.word	0xfffff0ff
 8004524:	ffff8fff 	.word	0xffff8fff
 8004528:	0800c574 	.word	0x0800c574
 800452c:	20000004 	.word	0x20000004
 8004530:	20000008 	.word	0x20000008

08004534 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800453a:	4b3c      	ldr	r3, [pc, #240]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	2238      	movs	r2, #56	; 0x38
 8004540:	4013      	ands	r3, r2
 8004542:	d10f      	bne.n	8004564 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004544:	4b39      	ldr	r3, [pc, #228]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	0adb      	lsrs	r3, r3, #11
 800454a:	2207      	movs	r2, #7
 800454c:	4013      	ands	r3, r2
 800454e:	2201      	movs	r2, #1
 8004550:	409a      	lsls	r2, r3
 8004552:	0013      	movs	r3, r2
 8004554:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004556:	6839      	ldr	r1, [r7, #0]
 8004558:	4835      	ldr	r0, [pc, #212]	; (8004630 <HAL_RCC_GetSysClockFreq+0xfc>)
 800455a:	f7fb fddf 	bl	800011c <__udivsi3>
 800455e:	0003      	movs	r3, r0
 8004560:	613b      	str	r3, [r7, #16]
 8004562:	e05d      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004564:	4b31      	ldr	r3, [pc, #196]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	2238      	movs	r2, #56	; 0x38
 800456a:	4013      	ands	r3, r2
 800456c:	2b08      	cmp	r3, #8
 800456e:	d102      	bne.n	8004576 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004570:	4b2f      	ldr	r3, [pc, #188]	; (8004630 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004572:	613b      	str	r3, [r7, #16]
 8004574:	e054      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004576:	4b2d      	ldr	r3, [pc, #180]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2238      	movs	r2, #56	; 0x38
 800457c:	4013      	ands	r3, r2
 800457e:	2b10      	cmp	r3, #16
 8004580:	d138      	bne.n	80045f4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8004582:	4b2a      	ldr	r3, [pc, #168]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	2203      	movs	r2, #3
 8004588:	4013      	ands	r3, r2
 800458a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800458c:	4b27      	ldr	r3, [pc, #156]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	091b      	lsrs	r3, r3, #4
 8004592:	2207      	movs	r2, #7
 8004594:	4013      	ands	r3, r2
 8004596:	3301      	adds	r3, #1
 8004598:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2b03      	cmp	r3, #3
 800459e:	d10d      	bne.n	80045bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045a0:	68b9      	ldr	r1, [r7, #8]
 80045a2:	4823      	ldr	r0, [pc, #140]	; (8004630 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045a4:	f7fb fdba 	bl	800011c <__udivsi3>
 80045a8:	0003      	movs	r3, r0
 80045aa:	0019      	movs	r1, r3
 80045ac:	4b1f      	ldr	r3, [pc, #124]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	0a1b      	lsrs	r3, r3, #8
 80045b2:	227f      	movs	r2, #127	; 0x7f
 80045b4:	4013      	ands	r3, r2
 80045b6:	434b      	muls	r3, r1
 80045b8:	617b      	str	r3, [r7, #20]
        break;
 80045ba:	e00d      	b.n	80045d8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	481c      	ldr	r0, [pc, #112]	; (8004630 <HAL_RCC_GetSysClockFreq+0xfc>)
 80045c0:	f7fb fdac 	bl	800011c <__udivsi3>
 80045c4:	0003      	movs	r3, r0
 80045c6:	0019      	movs	r1, r3
 80045c8:	4b18      	ldr	r3, [pc, #96]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	0a1b      	lsrs	r3, r3, #8
 80045ce:	227f      	movs	r2, #127	; 0x7f
 80045d0:	4013      	ands	r3, r2
 80045d2:	434b      	muls	r3, r1
 80045d4:	617b      	str	r3, [r7, #20]
        break;
 80045d6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80045d8:	4b14      	ldr	r3, [pc, #80]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	0f5b      	lsrs	r3, r3, #29
 80045de:	2207      	movs	r2, #7
 80045e0:	4013      	ands	r3, r2
 80045e2:	3301      	adds	r3, #1
 80045e4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	6978      	ldr	r0, [r7, #20]
 80045ea:	f7fb fd97 	bl	800011c <__udivsi3>
 80045ee:	0003      	movs	r3, r0
 80045f0:	613b      	str	r3, [r7, #16]
 80045f2:	e015      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80045f4:	4b0d      	ldr	r3, [pc, #52]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 80045f6:	689b      	ldr	r3, [r3, #8]
 80045f8:	2238      	movs	r2, #56	; 0x38
 80045fa:	4013      	ands	r3, r2
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d103      	bne.n	8004608 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004600:	2380      	movs	r3, #128	; 0x80
 8004602:	021b      	lsls	r3, r3, #8
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	e00b      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004608:	4b08      	ldr	r3, [pc, #32]	; (800462c <HAL_RCC_GetSysClockFreq+0xf8>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	2238      	movs	r2, #56	; 0x38
 800460e:	4013      	ands	r3, r2
 8004610:	2b18      	cmp	r3, #24
 8004612:	d103      	bne.n	800461c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004614:	23fa      	movs	r3, #250	; 0xfa
 8004616:	01db      	lsls	r3, r3, #7
 8004618:	613b      	str	r3, [r7, #16]
 800461a:	e001      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800461c:	2300      	movs	r3, #0
 800461e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004620:	693b      	ldr	r3, [r7, #16]
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b006      	add	sp, #24
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	40021000 	.word	0x40021000
 8004630:	00f42400 	.word	0x00f42400

08004634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004638:	4b02      	ldr	r3, [pc, #8]	; (8004644 <HAL_RCC_GetHCLKFreq+0x10>)
 800463a:	681b      	ldr	r3, [r3, #0]
}
 800463c:	0018      	movs	r0, r3
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	46c0      	nop			; (mov r8, r8)
 8004644:	20000004 	.word	0x20000004

08004648 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004648:	b5b0      	push	{r4, r5, r7, lr}
 800464a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800464c:	f7ff fff2 	bl	8004634 <HAL_RCC_GetHCLKFreq>
 8004650:	0004      	movs	r4, r0
 8004652:	f7ff fb4b 	bl	8003cec <LL_RCC_GetAPB1Prescaler>
 8004656:	0003      	movs	r3, r0
 8004658:	0b1a      	lsrs	r2, r3, #12
 800465a:	4b05      	ldr	r3, [pc, #20]	; (8004670 <HAL_RCC_GetPCLK1Freq+0x28>)
 800465c:	0092      	lsls	r2, r2, #2
 800465e:	58d3      	ldr	r3, [r2, r3]
 8004660:	221f      	movs	r2, #31
 8004662:	4013      	ands	r3, r2
 8004664:	40dc      	lsrs	r4, r3
 8004666:	0023      	movs	r3, r4
}
 8004668:	0018      	movs	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	bdb0      	pop	{r4, r5, r7, pc}
 800466e:	46c0      	nop			; (mov r8, r8)
 8004670:	0800c5b4 	.word	0x0800c5b4

08004674 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
 800467c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2207      	movs	r2, #7
 8004682:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004684:	4b0e      	ldr	r3, [pc, #56]	; (80046c0 <HAL_RCC_GetClockConfig+0x4c>)
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2207      	movs	r2, #7
 800468a:	401a      	ands	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_GetClockConfig+0x4c>)
 8004692:	689a      	ldr	r2, [r3, #8]
 8004694:	23f0      	movs	r3, #240	; 0xf0
 8004696:	011b      	lsls	r3, r3, #4
 8004698:	401a      	ands	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800469e:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <HAL_RCC_GetClockConfig+0x4c>)
 80046a0:	689a      	ldr	r2, [r3, #8]
 80046a2:	23e0      	movs	r3, #224	; 0xe0
 80046a4:	01db      	lsls	r3, r3, #7
 80046a6:	401a      	ands	r2, r3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80046ac:	4b05      	ldr	r3, [pc, #20]	; (80046c4 <HAL_RCC_GetClockConfig+0x50>)
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	2207      	movs	r2, #7
 80046b2:	401a      	ands	r2, r3
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	601a      	str	r2, [r3, #0]
}
 80046b8:	46c0      	nop			; (mov r8, r8)
 80046ba:	46bd      	mov	sp, r7
 80046bc:	b002      	add	sp, #8
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	40022000 	.word	0x40022000

080046c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80046d0:	2313      	movs	r3, #19
 80046d2:	18fb      	adds	r3, r7, r3
 80046d4:	2200      	movs	r2, #0
 80046d6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046d8:	2312      	movs	r3, #18
 80046da:	18fb      	adds	r3, r7, r3
 80046dc:	2200      	movs	r2, #0
 80046de:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	2380      	movs	r3, #128	; 0x80
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	4013      	ands	r3, r2
 80046ea:	d100      	bne.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x26>
 80046ec:	e0a3      	b.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046ee:	2011      	movs	r0, #17
 80046f0:	183b      	adds	r3, r7, r0
 80046f2:	2200      	movs	r2, #0
 80046f4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b86      	ldr	r3, [pc, #536]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80046fa:	2380      	movs	r3, #128	; 0x80
 80046fc:	055b      	lsls	r3, r3, #21
 80046fe:	4013      	ands	r3, r2
 8004700:	d110      	bne.n	8004724 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4b83      	ldr	r3, [pc, #524]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004704:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004706:	4b82      	ldr	r3, [pc, #520]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	0549      	lsls	r1, r1, #21
 800470c:	430a      	orrs	r2, r1
 800470e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004710:	4b7f      	ldr	r3, [pc, #508]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004712:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004714:	2380      	movs	r3, #128	; 0x80
 8004716:	055b      	lsls	r3, r3, #21
 8004718:	4013      	ands	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
 800471c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471e:	183b      	adds	r3, r7, r0
 8004720:	2201      	movs	r2, #1
 8004722:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004724:	4b7b      	ldr	r3, [pc, #492]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	4b7a      	ldr	r3, [pc, #488]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800472a:	2180      	movs	r1, #128	; 0x80
 800472c:	0049      	lsls	r1, r1, #1
 800472e:	430a      	orrs	r2, r1
 8004730:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004732:	f7fe f909 	bl	8002948 <HAL_GetTick>
 8004736:	0003      	movs	r3, r0
 8004738:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800473a:	e00b      	b.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800473c:	f7fe f904 	bl	8002948 <HAL_GetTick>
 8004740:	0002      	movs	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	2b02      	cmp	r3, #2
 8004748:	d904      	bls.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800474a:	2313      	movs	r3, #19
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2203      	movs	r2, #3
 8004750:	701a      	strb	r2, [r3, #0]
        break;
 8004752:	e005      	b.n	8004760 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004754:	4b6f      	ldr	r3, [pc, #444]	; (8004914 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	2380      	movs	r3, #128	; 0x80
 800475a:	005b      	lsls	r3, r3, #1
 800475c:	4013      	ands	r3, r2
 800475e:	d0ed      	beq.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004760:	2313      	movs	r3, #19
 8004762:	18fb      	adds	r3, r7, r3
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d154      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800476a:	4b69      	ldr	r3, [pc, #420]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800476c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800476e:	23c0      	movs	r3, #192	; 0xc0
 8004770:	009b      	lsls	r3, r3, #2
 8004772:	4013      	ands	r3, r2
 8004774:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d019      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	699b      	ldr	r3, [r3, #24]
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	429a      	cmp	r2, r3
 8004784:	d014      	beq.n	80047b0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004786:	4b62      	ldr	r3, [pc, #392]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800478a:	4a63      	ldr	r2, [pc, #396]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800478c:	4013      	ands	r3, r2
 800478e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004790:	4b5f      	ldr	r3, [pc, #380]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004792:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004794:	4b5e      	ldr	r3, [pc, #376]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004796:	2180      	movs	r1, #128	; 0x80
 8004798:	0249      	lsls	r1, r1, #9
 800479a:	430a      	orrs	r2, r1
 800479c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800479e:	4b5c      	ldr	r3, [pc, #368]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80047a2:	4b5b      	ldr	r3, [pc, #364]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047a4:	495d      	ldr	r1, [pc, #372]	; (800491c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80047a6:	400a      	ands	r2, r1
 80047a8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047aa:	4b59      	ldr	r3, [pc, #356]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	2201      	movs	r2, #1
 80047b4:	4013      	ands	r3, r2
 80047b6:	d016      	beq.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b8:	f7fe f8c6 	bl	8002948 <HAL_GetTick>
 80047bc:	0003      	movs	r3, r0
 80047be:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047c0:	e00c      	b.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c2:	f7fe f8c1 	bl	8002948 <HAL_GetTick>
 80047c6:	0002      	movs	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	4a54      	ldr	r2, [pc, #336]	; (8004920 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d904      	bls.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80047d2:	2313      	movs	r3, #19
 80047d4:	18fb      	adds	r3, r7, r3
 80047d6:	2203      	movs	r2, #3
 80047d8:	701a      	strb	r2, [r3, #0]
            break;
 80047da:	e004      	b.n	80047e6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047dc:	4b4c      	ldr	r3, [pc, #304]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	2202      	movs	r2, #2
 80047e2:	4013      	ands	r3, r2
 80047e4:	d0ed      	beq.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80047e6:	2313      	movs	r3, #19
 80047e8:	18fb      	adds	r3, r7, r3
 80047ea:	781b      	ldrb	r3, [r3, #0]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047f0:	4b47      	ldr	r3, [pc, #284]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f4:	4a48      	ldr	r2, [pc, #288]	; (8004918 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80047f6:	4013      	ands	r3, r2
 80047f8:	0019      	movs	r1, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	699a      	ldr	r2, [r3, #24]
 80047fe:	4b44      	ldr	r3, [pc, #272]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004800:	430a      	orrs	r2, r1
 8004802:	65da      	str	r2, [r3, #92]	; 0x5c
 8004804:	e00c      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004806:	2312      	movs	r3, #18
 8004808:	18fb      	adds	r3, r7, r3
 800480a:	2213      	movs	r2, #19
 800480c:	18ba      	adds	r2, r7, r2
 800480e:	7812      	ldrb	r2, [r2, #0]
 8004810:	701a      	strb	r2, [r3, #0]
 8004812:	e005      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004814:	2312      	movs	r3, #18
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2213      	movs	r2, #19
 800481a:	18ba      	adds	r2, r7, r2
 800481c:	7812      	ldrb	r2, [r2, #0]
 800481e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004820:	2311      	movs	r3, #17
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	781b      	ldrb	r3, [r3, #0]
 8004826:	2b01      	cmp	r3, #1
 8004828:	d105      	bne.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800482a:	4b39      	ldr	r3, [pc, #228]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800482c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800482e:	4b38      	ldr	r3, [pc, #224]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004830:	493c      	ldr	r1, [pc, #240]	; (8004924 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004832:	400a      	ands	r2, r1
 8004834:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	2201      	movs	r2, #1
 800483c:	4013      	ands	r3, r2
 800483e:	d009      	beq.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004840:	4b33      	ldr	r3, [pc, #204]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004842:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004844:	2203      	movs	r2, #3
 8004846:	4393      	bics	r3, r2
 8004848:	0019      	movs	r1, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685a      	ldr	r2, [r3, #4]
 800484e:	4b30      	ldr	r3, [pc, #192]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004850:	430a      	orrs	r2, r1
 8004852:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	2202      	movs	r2, #2
 800485a:	4013      	ands	r3, r2
 800485c:	d009      	beq.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800485e:	4b2c      	ldr	r3, [pc, #176]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004862:	220c      	movs	r2, #12
 8004864:	4393      	bics	r3, r2
 8004866:	0019      	movs	r1, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	4b28      	ldr	r3, [pc, #160]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800486e:	430a      	orrs	r2, r1
 8004870:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2220      	movs	r2, #32
 8004878:	4013      	ands	r3, r2
 800487a:	d009      	beq.n	8004890 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800487c:	4b24      	ldr	r3, [pc, #144]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800487e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004880:	4a29      	ldr	r2, [pc, #164]	; (8004928 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004882:	4013      	ands	r3, r2
 8004884:	0019      	movs	r1, r3
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68da      	ldr	r2, [r3, #12]
 800488a:	4b21      	ldr	r3, [pc, #132]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800488c:	430a      	orrs	r2, r1
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	01db      	lsls	r3, r3, #7
 8004898:	4013      	ands	r3, r2
 800489a:	d015      	beq.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800489c:	4b1c      	ldr	r3, [pc, #112]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800489e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048a0:	009b      	lsls	r3, r3, #2
 80048a2:	0899      	lsrs	r1, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	695a      	ldr	r2, [r3, #20]
 80048a8:	4b19      	ldr	r3, [pc, #100]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048aa:	430a      	orrs	r2, r1
 80048ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	2380      	movs	r3, #128	; 0x80
 80048b4:	05db      	lsls	r3, r3, #23
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d106      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048ba:	4b15      	ldr	r3, [pc, #84]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	4b14      	ldr	r3, [pc, #80]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048c0:	2180      	movs	r1, #128	; 0x80
 80048c2:	0249      	lsls	r1, r1, #9
 80048c4:	430a      	orrs	r2, r1
 80048c6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	2380      	movs	r3, #128	; 0x80
 80048ce:	011b      	lsls	r3, r3, #4
 80048d0:	4013      	ands	r3, r2
 80048d2:	d016      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80048d4:	4b0e      	ldr	r3, [pc, #56]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d8:	4a14      	ldr	r2, [pc, #80]	; (800492c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80048da:	4013      	ands	r3, r2
 80048dc:	0019      	movs	r1, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	691a      	ldr	r2, [r3, #16]
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048e4:	430a      	orrs	r2, r1
 80048e6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691a      	ldr	r2, [r3, #16]
 80048ec:	2380      	movs	r3, #128	; 0x80
 80048ee:	01db      	lsls	r3, r3, #7
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d106      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80048f4:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	4b05      	ldr	r3, [pc, #20]	; (8004910 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80048fa:	2180      	movs	r1, #128	; 0x80
 80048fc:	0249      	lsls	r1, r1, #9
 80048fe:	430a      	orrs	r2, r1
 8004900:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004902:	2312      	movs	r3, #18
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	781b      	ldrb	r3, [r3, #0]
}
 8004908:	0018      	movs	r0, r3
 800490a:	46bd      	mov	sp, r7
 800490c:	b006      	add	sp, #24
 800490e:	bd80      	pop	{r7, pc}
 8004910:	40021000 	.word	0x40021000
 8004914:	40007000 	.word	0x40007000
 8004918:	fffffcff 	.word	0xfffffcff
 800491c:	fffeffff 	.word	0xfffeffff
 8004920:	00001388 	.word	0x00001388
 8004924:	efffffff 	.word	0xefffffff
 8004928:	ffffcfff 	.word	0xffffcfff
 800492c:	ffff3fff 	.word	0xffff3fff

08004930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e0a8      	b.n	8004a94 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004946:	2b00      	cmp	r3, #0
 8004948:	d109      	bne.n	800495e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	2382      	movs	r3, #130	; 0x82
 8004950:	005b      	lsls	r3, r3, #1
 8004952:	429a      	cmp	r2, r3
 8004954:	d009      	beq.n	800496a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	61da      	str	r2, [r3, #28]
 800495c:	e005      	b.n	800496a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2200      	movs	r2, #0
 8004962:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2200      	movs	r2, #0
 800496e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	225d      	movs	r2, #93	; 0x5d
 8004974:	5c9b      	ldrb	r3, [r3, r2]
 8004976:	b2db      	uxtb	r3, r3
 8004978:	2b00      	cmp	r3, #0
 800497a:	d107      	bne.n	800498c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	225c      	movs	r2, #92	; 0x5c
 8004980:	2100      	movs	r1, #0
 8004982:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0018      	movs	r0, r3
 8004988:	f7fc ff40 	bl	800180c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	225d      	movs	r2, #93	; 0x5d
 8004990:	2102      	movs	r1, #2
 8004992:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	2140      	movs	r1, #64	; 0x40
 80049a0:	438a      	bics	r2, r1
 80049a2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	23e0      	movs	r3, #224	; 0xe0
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d902      	bls.n	80049b6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80049b0:	2300      	movs	r3, #0
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e002      	b.n	80049bc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80049b6:	2380      	movs	r3, #128	; 0x80
 80049b8:	015b      	lsls	r3, r3, #5
 80049ba:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	23f0      	movs	r3, #240	; 0xf0
 80049c2:	011b      	lsls	r3, r3, #4
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d008      	beq.n	80049da <HAL_SPI_Init+0xaa>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	68da      	ldr	r2, [r3, #12]
 80049cc:	23e0      	movs	r3, #224	; 0xe0
 80049ce:	00db      	lsls	r3, r3, #3
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d002      	beq.n	80049da <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2200      	movs	r2, #0
 80049d8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685a      	ldr	r2, [r3, #4]
 80049de:	2382      	movs	r3, #130	; 0x82
 80049e0:	005b      	lsls	r3, r3, #1
 80049e2:	401a      	ands	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6899      	ldr	r1, [r3, #8]
 80049e8:	2384      	movs	r3, #132	; 0x84
 80049ea:	021b      	lsls	r3, r3, #8
 80049ec:	400b      	ands	r3, r1
 80049ee:	431a      	orrs	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	691b      	ldr	r3, [r3, #16]
 80049f4:	2102      	movs	r1, #2
 80049f6:	400b      	ands	r3, r1
 80049f8:	431a      	orrs	r2, r3
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	695b      	ldr	r3, [r3, #20]
 80049fe:	2101      	movs	r1, #1
 8004a00:	400b      	ands	r3, r1
 8004a02:	431a      	orrs	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6999      	ldr	r1, [r3, #24]
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	400b      	ands	r3, r1
 8004a0e:	431a      	orrs	r2, r3
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	69db      	ldr	r3, [r3, #28]
 8004a14:	2138      	movs	r1, #56	; 0x38
 8004a16:	400b      	ands	r3, r1
 8004a18:	431a      	orrs	r2, r3
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a1b      	ldr	r3, [r3, #32]
 8004a1e:	2180      	movs	r1, #128	; 0x80
 8004a20:	400b      	ands	r3, r1
 8004a22:	431a      	orrs	r2, r3
 8004a24:	0011      	movs	r1, r2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	019b      	lsls	r3, r3, #6
 8004a2e:	401a      	ands	r2, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	430a      	orrs	r2, r1
 8004a36:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	0c1b      	lsrs	r3, r3, #16
 8004a3e:	2204      	movs	r2, #4
 8004a40:	401a      	ands	r2, r3
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a46:	2110      	movs	r1, #16
 8004a48:	400b      	ands	r3, r1
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a50:	2108      	movs	r1, #8
 8004a52:	400b      	ands	r3, r1
 8004a54:	431a      	orrs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	68d9      	ldr	r1, [r3, #12]
 8004a5a:	23f0      	movs	r3, #240	; 0xf0
 8004a5c:	011b      	lsls	r3, r3, #4
 8004a5e:	400b      	ands	r3, r1
 8004a60:	431a      	orrs	r2, r3
 8004a62:	0011      	movs	r1, r2
 8004a64:	68fa      	ldr	r2, [r7, #12]
 8004a66:	2380      	movs	r3, #128	; 0x80
 8004a68:	015b      	lsls	r3, r3, #5
 8004a6a:	401a      	ands	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	69da      	ldr	r2, [r3, #28]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4907      	ldr	r1, [pc, #28]	; (8004a9c <HAL_SPI_Init+0x16c>)
 8004a80:	400a      	ands	r2, r1
 8004a82:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	225d      	movs	r2, #93	; 0x5d
 8004a8e:	2101      	movs	r1, #1
 8004a90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	0018      	movs	r0, r3
 8004a96:	46bd      	mov	sp, r7
 8004a98:	b004      	add	sp, #16
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	fffff7ff 	.word	0xfffff7ff

08004aa0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e04a      	b.n	8004b48 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	223d      	movs	r2, #61	; 0x3d
 8004ab6:	5c9b      	ldrb	r3, [r3, r2]
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d107      	bne.n	8004ace <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	223c      	movs	r2, #60	; 0x3c
 8004ac2:	2100      	movs	r1, #0
 8004ac4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f7fd fc59 	bl	8002380 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	223d      	movs	r2, #61	; 0x3d
 8004ad2:	2102      	movs	r1, #2
 8004ad4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	0019      	movs	r1, r3
 8004ae0:	0010      	movs	r0, r2
 8004ae2:	f000 fe5f 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2248      	movs	r2, #72	; 0x48
 8004aea:	2101      	movs	r1, #1
 8004aec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	223e      	movs	r2, #62	; 0x3e
 8004af2:	2101      	movs	r1, #1
 8004af4:	5499      	strb	r1, [r3, r2]
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	223f      	movs	r2, #63	; 0x3f
 8004afa:	2101      	movs	r1, #1
 8004afc:	5499      	strb	r1, [r3, r2]
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2240      	movs	r2, #64	; 0x40
 8004b02:	2101      	movs	r1, #1
 8004b04:	5499      	strb	r1, [r3, r2]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2241      	movs	r2, #65	; 0x41
 8004b0a:	2101      	movs	r1, #1
 8004b0c:	5499      	strb	r1, [r3, r2]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2242      	movs	r2, #66	; 0x42
 8004b12:	2101      	movs	r1, #1
 8004b14:	5499      	strb	r1, [r3, r2]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2243      	movs	r2, #67	; 0x43
 8004b1a:	2101      	movs	r1, #1
 8004b1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2244      	movs	r2, #68	; 0x44
 8004b22:	2101      	movs	r1, #1
 8004b24:	5499      	strb	r1, [r3, r2]
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2245      	movs	r2, #69	; 0x45
 8004b2a:	2101      	movs	r1, #1
 8004b2c:	5499      	strb	r1, [r3, r2]
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2246      	movs	r2, #70	; 0x46
 8004b32:	2101      	movs	r1, #1
 8004b34:	5499      	strb	r1, [r3, r2]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2247      	movs	r2, #71	; 0x47
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	223d      	movs	r2, #61	; 0x3d
 8004b42:	2101      	movs	r1, #1
 8004b44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b46:	2300      	movs	r3, #0
}
 8004b48:	0018      	movs	r0, r3
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	b002      	add	sp, #8
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	223d      	movs	r2, #61	; 0x3d
 8004b5c:	5c9b      	ldrb	r3, [r3, r2]
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	d001      	beq.n	8004b68 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e034      	b.n	8004bd2 <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	223d      	movs	r2, #61	; 0x3d
 8004b6c:	2102      	movs	r1, #2
 8004b6e:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a19      	ldr	r2, [pc, #100]	; (8004bdc <HAL_TIM_Base_Start+0x8c>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d009      	beq.n	8004b8e <HAL_TIM_Base_Start+0x3e>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a18      	ldr	r2, [pc, #96]	; (8004be0 <HAL_TIM_Base_Start+0x90>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d004      	beq.n	8004b8e <HAL_TIM_Base_Start+0x3e>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a16      	ldr	r2, [pc, #88]	; (8004be4 <HAL_TIM_Base_Start+0x94>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d116      	bne.n	8004bbc <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <HAL_TIM_Base_Start+0x98>)
 8004b96:	4013      	ands	r3, r2
 8004b98:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2b06      	cmp	r3, #6
 8004b9e:	d016      	beq.n	8004bce <HAL_TIM_Base_Start+0x7e>
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	025b      	lsls	r3, r3, #9
 8004ba6:	429a      	cmp	r2, r3
 8004ba8:	d011      	beq.n	8004bce <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	2101      	movs	r1, #1
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bba:	e008      	b.n	8004bce <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	2101      	movs	r1, #1
 8004bc8:	430a      	orrs	r2, r1
 8004bca:	601a      	str	r2, [r3, #0]
 8004bcc:	e000      	b.n	8004bd0 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bce:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004bd0:	2300      	movs	r3, #0
}
 8004bd2:	0018      	movs	r0, r3
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	b004      	add	sp, #16
 8004bd8:	bd80      	pop	{r7, pc}
 8004bda:	46c0      	nop			; (mov r8, r8)
 8004bdc:	40012c00 	.word	0x40012c00
 8004be0:	40000400 	.word	0x40000400
 8004be4:	40014000 	.word	0x40014000
 8004be8:	00010007 	.word	0x00010007

08004bec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	223d      	movs	r2, #61	; 0x3d
 8004bf8:	5c9b      	ldrb	r3, [r3, r2]
 8004bfa:	b2db      	uxtb	r3, r3
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d001      	beq.n	8004c04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e03c      	b.n	8004c7e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	223d      	movs	r2, #61	; 0x3d
 8004c08:	2102      	movs	r1, #2
 8004c0a:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2101      	movs	r1, #1
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	4a19      	ldr	r2, [pc, #100]	; (8004c88 <HAL_TIM_Base_Start_IT+0x9c>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d009      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x4e>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a18      	ldr	r2, [pc, #96]	; (8004c8c <HAL_TIM_Base_Start_IT+0xa0>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d004      	beq.n	8004c3a <HAL_TIM_Base_Start_IT+0x4e>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a16      	ldr	r2, [pc, #88]	; (8004c90 <HAL_TIM_Base_Start_IT+0xa4>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d116      	bne.n	8004c68 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	689b      	ldr	r3, [r3, #8]
 8004c40:	4a14      	ldr	r2, [pc, #80]	; (8004c94 <HAL_TIM_Base_Start_IT+0xa8>)
 8004c42:	4013      	ands	r3, r2
 8004c44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2b06      	cmp	r3, #6
 8004c4a:	d016      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x8e>
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	2380      	movs	r3, #128	; 0x80
 8004c50:	025b      	lsls	r3, r3, #9
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d011      	beq.n	8004c7a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2101      	movs	r1, #1
 8004c62:	430a      	orrs	r2, r1
 8004c64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c66:	e008      	b.n	8004c7a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2101      	movs	r1, #1
 8004c74:	430a      	orrs	r2, r1
 8004c76:	601a      	str	r2, [r3, #0]
 8004c78:	e000      	b.n	8004c7c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c7a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b004      	add	sp, #16
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	40012c00 	.word	0x40012c00
 8004c8c:	40000400 	.word	0x40000400
 8004c90:	40014000 	.word	0x40014000
 8004c94:	00010007 	.word	0x00010007

08004c98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d101      	bne.n	8004caa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	e04a      	b.n	8004d40 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	223d      	movs	r2, #61	; 0x3d
 8004cae:	5c9b      	ldrb	r3, [r3, r2]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d107      	bne.n	8004cc6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	223c      	movs	r2, #60	; 0x3c
 8004cba:	2100      	movs	r1, #0
 8004cbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f7fd fbbd 	bl	8002440 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	223d      	movs	r2, #61	; 0x3d
 8004cca:	2102      	movs	r1, #2
 8004ccc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681a      	ldr	r2, [r3, #0]
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	0019      	movs	r1, r3
 8004cd8:	0010      	movs	r0, r2
 8004cda:	f000 fd63 	bl	80057a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2248      	movs	r2, #72	; 0x48
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	223e      	movs	r2, #62	; 0x3e
 8004cea:	2101      	movs	r1, #1
 8004cec:	5499      	strb	r1, [r3, r2]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	223f      	movs	r2, #63	; 0x3f
 8004cf2:	2101      	movs	r1, #1
 8004cf4:	5499      	strb	r1, [r3, r2]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2240      	movs	r2, #64	; 0x40
 8004cfa:	2101      	movs	r1, #1
 8004cfc:	5499      	strb	r1, [r3, r2]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2241      	movs	r2, #65	; 0x41
 8004d02:	2101      	movs	r1, #1
 8004d04:	5499      	strb	r1, [r3, r2]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2242      	movs	r2, #66	; 0x42
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	5499      	strb	r1, [r3, r2]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	2243      	movs	r2, #67	; 0x43
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2244      	movs	r2, #68	; 0x44
 8004d1a:	2101      	movs	r1, #1
 8004d1c:	5499      	strb	r1, [r3, r2]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2245      	movs	r2, #69	; 0x45
 8004d22:	2101      	movs	r1, #1
 8004d24:	5499      	strb	r1, [r3, r2]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2246      	movs	r2, #70	; 0x46
 8004d2a:	2101      	movs	r1, #1
 8004d2c:	5499      	strb	r1, [r3, r2]
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2247      	movs	r2, #71	; 0x47
 8004d32:	2101      	movs	r1, #1
 8004d34:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	223d      	movs	r2, #61	; 0x3d
 8004d3a:	2101      	movs	r1, #1
 8004d3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d3e:	2300      	movs	r3, #0
}
 8004d40:	0018      	movs	r0, r3
 8004d42:	46bd      	mov	sp, r7
 8004d44:	b002      	add	sp, #8
 8004d46:	bd80      	pop	{r7, pc}

08004d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b084      	sub	sp, #16
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d108      	bne.n	8004d6a <HAL_TIM_PWM_Start+0x22>
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	223e      	movs	r2, #62	; 0x3e
 8004d5c:	5c9b      	ldrb	r3, [r3, r2]
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	3b01      	subs	r3, #1
 8004d62:	1e5a      	subs	r2, r3, #1
 8004d64:	4193      	sbcs	r3, r2
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	e037      	b.n	8004dda <HAL_TIM_PWM_Start+0x92>
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	2b04      	cmp	r3, #4
 8004d6e:	d108      	bne.n	8004d82 <HAL_TIM_PWM_Start+0x3a>
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	223f      	movs	r2, #63	; 0x3f
 8004d74:	5c9b      	ldrb	r3, [r3, r2]
 8004d76:	b2db      	uxtb	r3, r3
 8004d78:	3b01      	subs	r3, #1
 8004d7a:	1e5a      	subs	r2, r3, #1
 8004d7c:	4193      	sbcs	r3, r2
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	e02b      	b.n	8004dda <HAL_TIM_PWM_Start+0x92>
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	d108      	bne.n	8004d9a <HAL_TIM_PWM_Start+0x52>
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2240      	movs	r2, #64	; 0x40
 8004d8c:	5c9b      	ldrb	r3, [r3, r2]
 8004d8e:	b2db      	uxtb	r3, r3
 8004d90:	3b01      	subs	r3, #1
 8004d92:	1e5a      	subs	r2, r3, #1
 8004d94:	4193      	sbcs	r3, r2
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	e01f      	b.n	8004dda <HAL_TIM_PWM_Start+0x92>
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	2b0c      	cmp	r3, #12
 8004d9e:	d108      	bne.n	8004db2 <HAL_TIM_PWM_Start+0x6a>
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2241      	movs	r2, #65	; 0x41
 8004da4:	5c9b      	ldrb	r3, [r3, r2]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	3b01      	subs	r3, #1
 8004daa:	1e5a      	subs	r2, r3, #1
 8004dac:	4193      	sbcs	r3, r2
 8004dae:	b2db      	uxtb	r3, r3
 8004db0:	e013      	b.n	8004dda <HAL_TIM_PWM_Start+0x92>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	d108      	bne.n	8004dca <HAL_TIM_PWM_Start+0x82>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2242      	movs	r2, #66	; 0x42
 8004dbc:	5c9b      	ldrb	r3, [r3, r2]
 8004dbe:	b2db      	uxtb	r3, r3
 8004dc0:	3b01      	subs	r3, #1
 8004dc2:	1e5a      	subs	r2, r3, #1
 8004dc4:	4193      	sbcs	r3, r2
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	e007      	b.n	8004dda <HAL_TIM_PWM_Start+0x92>
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2243      	movs	r2, #67	; 0x43
 8004dce:	5c9b      	ldrb	r3, [r3, r2]
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	1e5a      	subs	r2, r3, #1
 8004dd6:	4193      	sbcs	r3, r2
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d001      	beq.n	8004de2 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e085      	b.n	8004eee <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d104      	bne.n	8004df2 <HAL_TIM_PWM_Start+0xaa>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	223e      	movs	r2, #62	; 0x3e
 8004dec:	2102      	movs	r1, #2
 8004dee:	5499      	strb	r1, [r3, r2]
 8004df0:	e023      	b.n	8004e3a <HAL_TIM_PWM_Start+0xf2>
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d104      	bne.n	8004e02 <HAL_TIM_PWM_Start+0xba>
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	223f      	movs	r2, #63	; 0x3f
 8004dfc:	2102      	movs	r1, #2
 8004dfe:	5499      	strb	r1, [r3, r2]
 8004e00:	e01b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xf2>
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d104      	bne.n	8004e12 <HAL_TIM_PWM_Start+0xca>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2240      	movs	r2, #64	; 0x40
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	5499      	strb	r1, [r3, r2]
 8004e10:	e013      	b.n	8004e3a <HAL_TIM_PWM_Start+0xf2>
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	2b0c      	cmp	r3, #12
 8004e16:	d104      	bne.n	8004e22 <HAL_TIM_PWM_Start+0xda>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2241      	movs	r2, #65	; 0x41
 8004e1c:	2102      	movs	r1, #2
 8004e1e:	5499      	strb	r1, [r3, r2]
 8004e20:	e00b      	b.n	8004e3a <HAL_TIM_PWM_Start+0xf2>
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	2b10      	cmp	r3, #16
 8004e26:	d104      	bne.n	8004e32 <HAL_TIM_PWM_Start+0xea>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2242      	movs	r2, #66	; 0x42
 8004e2c:	2102      	movs	r1, #2
 8004e2e:	5499      	strb	r1, [r3, r2]
 8004e30:	e003      	b.n	8004e3a <HAL_TIM_PWM_Start+0xf2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2243      	movs	r2, #67	; 0x43
 8004e36:	2102      	movs	r1, #2
 8004e38:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6839      	ldr	r1, [r7, #0]
 8004e40:	2201      	movs	r2, #1
 8004e42:	0018      	movs	r0, r3
 8004e44:	f000 ffe8 	bl	8005e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a2a      	ldr	r2, [pc, #168]	; (8004ef8 <HAL_TIM_PWM_Start+0x1b0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00e      	beq.n	8004e70 <HAL_TIM_PWM_Start+0x128>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a29      	ldr	r2, [pc, #164]	; (8004efc <HAL_TIM_PWM_Start+0x1b4>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d009      	beq.n	8004e70 <HAL_TIM_PWM_Start+0x128>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a27      	ldr	r2, [pc, #156]	; (8004f00 <HAL_TIM_PWM_Start+0x1b8>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d004      	beq.n	8004e70 <HAL_TIM_PWM_Start+0x128>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a26      	ldr	r2, [pc, #152]	; (8004f04 <HAL_TIM_PWM_Start+0x1bc>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d101      	bne.n	8004e74 <HAL_TIM_PWM_Start+0x12c>
 8004e70:	2301      	movs	r3, #1
 8004e72:	e000      	b.n	8004e76 <HAL_TIM_PWM_Start+0x12e>
 8004e74:	2300      	movs	r3, #0
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d008      	beq.n	8004e8c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	2180      	movs	r1, #128	; 0x80
 8004e86:	0209      	lsls	r1, r1, #8
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a19      	ldr	r2, [pc, #100]	; (8004ef8 <HAL_TIM_PWM_Start+0x1b0>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d009      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x162>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a1b      	ldr	r2, [pc, #108]	; (8004f08 <HAL_TIM_PWM_Start+0x1c0>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d004      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x162>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a15      	ldr	r2, [pc, #84]	; (8004efc <HAL_TIM_PWM_Start+0x1b4>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d116      	bne.n	8004ed8 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a16      	ldr	r2, [pc, #88]	; (8004f0c <HAL_TIM_PWM_Start+0x1c4>)
 8004eb2:	4013      	ands	r3, r2
 8004eb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	2b06      	cmp	r3, #6
 8004eba:	d016      	beq.n	8004eea <HAL_TIM_PWM_Start+0x1a2>
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	2380      	movs	r3, #128	; 0x80
 8004ec0:	025b      	lsls	r3, r3, #9
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	d011      	beq.n	8004eea <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	681a      	ldr	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2101      	movs	r1, #1
 8004ed2:	430a      	orrs	r2, r1
 8004ed4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ed6:	e008      	b.n	8004eea <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	681a      	ldr	r2, [r3, #0]
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	2101      	movs	r1, #1
 8004ee4:	430a      	orrs	r2, r1
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	e000      	b.n	8004eec <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004eea:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	0018      	movs	r0, r3
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	b004      	add	sp, #16
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	46c0      	nop			; (mov r8, r8)
 8004ef8:	40012c00 	.word	0x40012c00
 8004efc:	40014000 	.word	0x40014000
 8004f00:	40014400 	.word	0x40014400
 8004f04:	40014800 	.word	0x40014800
 8004f08:	40000400 	.word	0x40000400
 8004f0c:	00010007 	.word	0x00010007

08004f10 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	6839      	ldr	r1, [r7, #0]
 8004f20:	2200      	movs	r2, #0
 8004f22:	0018      	movs	r0, r3
 8004f24:	f000 ff78 	bl	8005e18 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a37      	ldr	r2, [pc, #220]	; (800500c <HAL_TIM_PWM_Stop+0xfc>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00e      	beq.n	8004f50 <HAL_TIM_PWM_Stop+0x40>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a36      	ldr	r2, [pc, #216]	; (8005010 <HAL_TIM_PWM_Stop+0x100>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d009      	beq.n	8004f50 <HAL_TIM_PWM_Stop+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a34      	ldr	r2, [pc, #208]	; (8005014 <HAL_TIM_PWM_Stop+0x104>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIM_PWM_Stop+0x40>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a33      	ldr	r2, [pc, #204]	; (8005018 <HAL_TIM_PWM_Stop+0x108>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d101      	bne.n	8004f54 <HAL_TIM_PWM_Stop+0x44>
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_TIM_PWM_Stop+0x46>
 8004f54:	2300      	movs	r3, #0
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d013      	beq.n	8004f82 <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6a1b      	ldr	r3, [r3, #32]
 8004f60:	4a2e      	ldr	r2, [pc, #184]	; (800501c <HAL_TIM_PWM_Stop+0x10c>)
 8004f62:	4013      	ands	r3, r2
 8004f64:	d10d      	bne.n	8004f82 <HAL_TIM_PWM_Stop+0x72>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6a1b      	ldr	r3, [r3, #32]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	; (8005020 <HAL_TIM_PWM_Stop+0x110>)
 8004f6e:	4013      	ands	r3, r2
 8004f70:	d107      	bne.n	8004f82 <HAL_TIM_PWM_Stop+0x72>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4929      	ldr	r1, [pc, #164]	; (8005024 <HAL_TIM_PWM_Stop+0x114>)
 8004f7e:	400a      	ands	r2, r1
 8004f80:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	4a24      	ldr	r2, [pc, #144]	; (800501c <HAL_TIM_PWM_Stop+0x10c>)
 8004f8a:	4013      	ands	r3, r2
 8004f8c:	d10d      	bne.n	8004faa <HAL_TIM_PWM_Stop+0x9a>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6a1b      	ldr	r3, [r3, #32]
 8004f94:	4a22      	ldr	r2, [pc, #136]	; (8005020 <HAL_TIM_PWM_Stop+0x110>)
 8004f96:	4013      	ands	r3, r2
 8004f98:	d107      	bne.n	8004faa <HAL_TIM_PWM_Stop+0x9a>
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	2101      	movs	r1, #1
 8004fa6:	438a      	bics	r2, r1
 8004fa8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d104      	bne.n	8004fba <HAL_TIM_PWM_Stop+0xaa>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	223e      	movs	r2, #62	; 0x3e
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	5499      	strb	r1, [r3, r2]
 8004fb8:	e023      	b.n	8005002 <HAL_TIM_PWM_Stop+0xf2>
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	2b04      	cmp	r3, #4
 8004fbe:	d104      	bne.n	8004fca <HAL_TIM_PWM_Stop+0xba>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	223f      	movs	r2, #63	; 0x3f
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	5499      	strb	r1, [r3, r2]
 8004fc8:	e01b      	b.n	8005002 <HAL_TIM_PWM_Stop+0xf2>
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b08      	cmp	r3, #8
 8004fce:	d104      	bne.n	8004fda <HAL_TIM_PWM_Stop+0xca>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2240      	movs	r2, #64	; 0x40
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	5499      	strb	r1, [r3, r2]
 8004fd8:	e013      	b.n	8005002 <HAL_TIM_PWM_Stop+0xf2>
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	2b0c      	cmp	r3, #12
 8004fde:	d104      	bne.n	8004fea <HAL_TIM_PWM_Stop+0xda>
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2241      	movs	r2, #65	; 0x41
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	5499      	strb	r1, [r3, r2]
 8004fe8:	e00b      	b.n	8005002 <HAL_TIM_PWM_Stop+0xf2>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b10      	cmp	r3, #16
 8004fee:	d104      	bne.n	8004ffa <HAL_TIM_PWM_Stop+0xea>
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2242      	movs	r2, #66	; 0x42
 8004ff4:	2101      	movs	r1, #1
 8004ff6:	5499      	strb	r1, [r3, r2]
 8004ff8:	e003      	b.n	8005002 <HAL_TIM_PWM_Stop+0xf2>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2243      	movs	r2, #67	; 0x43
 8004ffe:	2101      	movs	r1, #1
 8005000:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	0018      	movs	r0, r3
 8005006:	46bd      	mov	sp, r7
 8005008:	b002      	add	sp, #8
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40012c00 	.word	0x40012c00
 8005010:	40014000 	.word	0x40014000
 8005014:	40014400 	.word	0x40014400
 8005018:	40014800 	.word	0x40014800
 800501c:	00001111 	.word	0x00001111
 8005020:	00000444 	.word	0x00000444
 8005024:	ffff7fff 	.word	0xffff7fff

08005028 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b086      	sub	sp, #24
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d101      	bne.n	800503c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e090      	b.n	800515e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	223d      	movs	r2, #61	; 0x3d
 8005040:	5c9b      	ldrb	r3, [r3, r2]
 8005042:	b2db      	uxtb	r3, r3
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	223c      	movs	r2, #60	; 0x3c
 800504c:	2100      	movs	r1, #0
 800504e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	0018      	movs	r0, r3
 8005054:	f7fd f900 	bl	8002258 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	223d      	movs	r2, #61	; 0x3d
 800505c:	2102      	movs	r1, #2
 800505e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	493f      	ldr	r1, [pc, #252]	; (8005168 <HAL_TIM_Encoder_Init+0x140>)
 800506c:	400a      	ands	r2, r1
 800506e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	3304      	adds	r3, #4
 8005078:	0019      	movs	r1, r3
 800507a:	0010      	movs	r0, r2
 800507c:	f000 fb92 	bl	80057a4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	699b      	ldr	r3, [r3, #24]
 800508e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	697a      	ldr	r2, [r7, #20]
 800509e:	4313      	orrs	r3, r2
 80050a0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	4a31      	ldr	r2, [pc, #196]	; (800516c <HAL_TIM_Encoder_Init+0x144>)
 80050a6:	4013      	ands	r3, r2
 80050a8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	689a      	ldr	r2, [r3, #8]
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	699b      	ldr	r3, [r3, #24]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	4313      	orrs	r3, r2
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	4a2c      	ldr	r2, [pc, #176]	; (8005170 <HAL_TIM_Encoder_Init+0x148>)
 80050c0:	4013      	ands	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	4a2b      	ldr	r2, [pc, #172]	; (8005174 <HAL_TIM_Encoder_Init+0x14c>)
 80050c8:	4013      	ands	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	69db      	ldr	r3, [r3, #28]
 80050d4:	021b      	lsls	r3, r3, #8
 80050d6:	4313      	orrs	r3, r2
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4313      	orrs	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	011a      	lsls	r2, r3, #4
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	6a1b      	ldr	r3, [r3, #32]
 80050e8:	031b      	lsls	r3, r3, #12
 80050ea:	4313      	orrs	r3, r2
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	4313      	orrs	r3, r2
 80050f0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2222      	movs	r2, #34	; 0x22
 80050f6:	4393      	bics	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2288      	movs	r2, #136	; 0x88
 80050fe:	4393      	bics	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	011b      	lsls	r3, r3, #4
 800510c:	4313      	orrs	r3, r2
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	4313      	orrs	r3, r2
 8005112:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	693a      	ldr	r2, [r7, #16]
 8005122:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	68fa      	ldr	r2, [r7, #12]
 800512a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2248      	movs	r2, #72	; 0x48
 8005130:	2101      	movs	r1, #1
 8005132:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	223e      	movs	r2, #62	; 0x3e
 8005138:	2101      	movs	r1, #1
 800513a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	223f      	movs	r2, #63	; 0x3f
 8005140:	2101      	movs	r1, #1
 8005142:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2244      	movs	r2, #68	; 0x44
 8005148:	2101      	movs	r1, #1
 800514a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2245      	movs	r2, #69	; 0x45
 8005150:	2101      	movs	r1, #1
 8005152:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	223d      	movs	r2, #61	; 0x3d
 8005158:	2101      	movs	r1, #1
 800515a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	0018      	movs	r0, r3
 8005160:	46bd      	mov	sp, r7
 8005162:	b006      	add	sp, #24
 8005164:	bd80      	pop	{r7, pc}
 8005166:	46c0      	nop			; (mov r8, r8)
 8005168:	fffebff8 	.word	0xfffebff8
 800516c:	fffffcfc 	.word	0xfffffcfc
 8005170:	fffff3f3 	.word	0xfffff3f3
 8005174:	ffff0f0f 	.word	0xffff0f0f

08005178 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005178:	b590      	push	{r4, r7, lr}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005182:	200f      	movs	r0, #15
 8005184:	183b      	adds	r3, r7, r0
 8005186:	687a      	ldr	r2, [r7, #4]
 8005188:	213e      	movs	r1, #62	; 0x3e
 800518a:	5c52      	ldrb	r2, [r2, r1]
 800518c:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800518e:	230e      	movs	r3, #14
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	213f      	movs	r1, #63	; 0x3f
 8005196:	5c52      	ldrb	r2, [r2, r1]
 8005198:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800519a:	240d      	movs	r4, #13
 800519c:	193b      	adds	r3, r7, r4
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	2144      	movs	r1, #68	; 0x44
 80051a2:	5c52      	ldrb	r2, [r2, r1]
 80051a4:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80051a6:	230c      	movs	r3, #12
 80051a8:	18fb      	adds	r3, r7, r3
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	2145      	movs	r1, #69	; 0x45
 80051ae:	5c52      	ldrb	r2, [r2, r1]
 80051b0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d112      	bne.n	80051de <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80051b8:	183b      	adds	r3, r7, r0
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d103      	bne.n	80051c8 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80051c0:	193b      	adds	r3, r7, r4
 80051c2:	781b      	ldrb	r3, [r3, #0]
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	d001      	beq.n	80051cc <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 80051c8:	2301      	movs	r3, #1
 80051ca:	e095      	b.n	80052f8 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	223e      	movs	r2, #62	; 0x3e
 80051d0:	2102      	movs	r1, #2
 80051d2:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2244      	movs	r2, #68	; 0x44
 80051d8:	2102      	movs	r1, #2
 80051da:	5499      	strb	r1, [r3, r2]
 80051dc:	e03d      	b.n	800525a <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	2b04      	cmp	r3, #4
 80051e2:	d114      	bne.n	800520e <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80051e4:	230e      	movs	r3, #14
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b01      	cmp	r3, #1
 80051ec:	d104      	bne.n	80051f8 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80051ee:	230c      	movs	r3, #12
 80051f0:	18fb      	adds	r3, r7, r3
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d001      	beq.n	80051fc <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	e07d      	b.n	80052f8 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	223f      	movs	r2, #63	; 0x3f
 8005200:	2102      	movs	r1, #2
 8005202:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2245      	movs	r2, #69	; 0x45
 8005208:	2102      	movs	r1, #2
 800520a:	5499      	strb	r1, [r3, r2]
 800520c:	e025      	b.n	800525a <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800520e:	230f      	movs	r3, #15
 8005210:	18fb      	adds	r3, r7, r3
 8005212:	781b      	ldrb	r3, [r3, #0]
 8005214:	2b01      	cmp	r3, #1
 8005216:	d10e      	bne.n	8005236 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005218:	230e      	movs	r3, #14
 800521a:	18fb      	adds	r3, r7, r3
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d109      	bne.n	8005236 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005222:	230d      	movs	r3, #13
 8005224:	18fb      	adds	r3, r7, r3
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d104      	bne.n	8005236 <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800522c:	230c      	movs	r3, #12
 800522e:	18fb      	adds	r3, r7, r3
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b01      	cmp	r3, #1
 8005234:	d001      	beq.n	800523a <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 8005236:	2301      	movs	r3, #1
 8005238:	e05e      	b.n	80052f8 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	223e      	movs	r2, #62	; 0x3e
 800523e:	2102      	movs	r1, #2
 8005240:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	223f      	movs	r2, #63	; 0x3f
 8005246:	2102      	movs	r1, #2
 8005248:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2244      	movs	r2, #68	; 0x44
 800524e:	2102      	movs	r1, #2
 8005250:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2245      	movs	r2, #69	; 0x45
 8005256:	2102      	movs	r1, #2
 8005258:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d003      	beq.n	8005268 <HAL_TIM_Encoder_Start_IT+0xf0>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	2b04      	cmp	r3, #4
 8005264:	d010      	beq.n	8005288 <HAL_TIM_Encoder_Start_IT+0x110>
 8005266:	e01f      	b.n	80052a8 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2201      	movs	r2, #1
 800526e:	2100      	movs	r1, #0
 8005270:	0018      	movs	r0, r3
 8005272:	f000 fdd1 	bl	8005e18 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	2102      	movs	r1, #2
 8005282:	430a      	orrs	r2, r1
 8005284:	60da      	str	r2, [r3, #12]
      break;
 8005286:	e02e      	b.n	80052e6 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2201      	movs	r2, #1
 800528e:	2104      	movs	r1, #4
 8005290:	0018      	movs	r0, r3
 8005292:	f000 fdc1 	bl	8005e18 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68da      	ldr	r2, [r3, #12]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	2104      	movs	r1, #4
 80052a2:	430a      	orrs	r2, r1
 80052a4:	60da      	str	r2, [r3, #12]
      break;
 80052a6:	e01e      	b.n	80052e6 <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2201      	movs	r2, #1
 80052ae:	2100      	movs	r1, #0
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 fdb1 	bl	8005e18 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	2201      	movs	r2, #1
 80052bc:	2104      	movs	r1, #4
 80052be:	0018      	movs	r0, r3
 80052c0:	f000 fdaa 	bl	8005e18 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	2102      	movs	r1, #2
 80052d0:	430a      	orrs	r2, r1
 80052d2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	68da      	ldr	r2, [r3, #12]
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2104      	movs	r1, #4
 80052e0:	430a      	orrs	r2, r1
 80052e2:	60da      	str	r2, [r3, #12]
      break;
 80052e4:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	681a      	ldr	r2, [r3, #0]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2101      	movs	r1, #1
 80052f2:	430a      	orrs	r2, r1
 80052f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80052f6:	2300      	movs	r3, #0
}
 80052f8:	0018      	movs	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b005      	add	sp, #20
 80052fe:	bd90      	pop	{r4, r7, pc}

08005300 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	691b      	ldr	r3, [r3, #16]
 800530e:	2202      	movs	r2, #2
 8005310:	4013      	ands	r3, r2
 8005312:	2b02      	cmp	r3, #2
 8005314:	d124      	bne.n	8005360 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	68db      	ldr	r3, [r3, #12]
 800531c:	2202      	movs	r2, #2
 800531e:	4013      	ands	r3, r2
 8005320:	2b02      	cmp	r3, #2
 8005322:	d11d      	bne.n	8005360 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2203      	movs	r2, #3
 800532a:	4252      	negs	r2, r2
 800532c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2201      	movs	r2, #1
 8005332:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	699b      	ldr	r3, [r3, #24]
 800533a:	2203      	movs	r2, #3
 800533c:	4013      	ands	r3, r2
 800533e:	d004      	beq.n	800534a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	0018      	movs	r0, r3
 8005344:	f000 fa16 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 8005348:	e007      	b.n	800535a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	0018      	movs	r0, r3
 800534e:	f000 fa09 	bl	8005764 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	0018      	movs	r0, r3
 8005356:	f000 fa15 	bl	8005784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	2204      	movs	r2, #4
 8005368:	4013      	ands	r3, r2
 800536a:	2b04      	cmp	r3, #4
 800536c:	d125      	bne.n	80053ba <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2204      	movs	r2, #4
 8005376:	4013      	ands	r3, r2
 8005378:	2b04      	cmp	r3, #4
 800537a:	d11e      	bne.n	80053ba <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	2205      	movs	r2, #5
 8005382:	4252      	negs	r2, r2
 8005384:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2202      	movs	r2, #2
 800538a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	699a      	ldr	r2, [r3, #24]
 8005392:	23c0      	movs	r3, #192	; 0xc0
 8005394:	009b      	lsls	r3, r3, #2
 8005396:	4013      	ands	r3, r2
 8005398:	d004      	beq.n	80053a4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f000 f9e9 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 80053a2:	e007      	b.n	80053b4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	0018      	movs	r0, r3
 80053a8:	f000 f9dc 	bl	8005764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	0018      	movs	r0, r3
 80053b0:	f000 f9e8 	bl	8005784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	2200      	movs	r2, #0
 80053b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	2208      	movs	r2, #8
 80053c2:	4013      	ands	r3, r2
 80053c4:	2b08      	cmp	r3, #8
 80053c6:	d124      	bne.n	8005412 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2208      	movs	r2, #8
 80053d0:	4013      	ands	r3, r2
 80053d2:	2b08      	cmp	r3, #8
 80053d4:	d11d      	bne.n	8005412 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	2209      	movs	r2, #9
 80053dc:	4252      	negs	r2, r2
 80053de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2204      	movs	r2, #4
 80053e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	69db      	ldr	r3, [r3, #28]
 80053ec:	2203      	movs	r2, #3
 80053ee:	4013      	ands	r3, r2
 80053f0:	d004      	beq.n	80053fc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	0018      	movs	r0, r3
 80053f6:	f000 f9bd 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 80053fa:	e007      	b.n	800540c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	0018      	movs	r0, r3
 8005400:	f000 f9b0 	bl	8005764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	0018      	movs	r0, r3
 8005408:	f000 f9bc 	bl	8005784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	2210      	movs	r2, #16
 800541a:	4013      	ands	r3, r2
 800541c:	2b10      	cmp	r3, #16
 800541e:	d125      	bne.n	800546c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	2210      	movs	r2, #16
 8005428:	4013      	ands	r3, r2
 800542a:	2b10      	cmp	r3, #16
 800542c:	d11e      	bne.n	800546c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2211      	movs	r2, #17
 8005434:	4252      	negs	r2, r2
 8005436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	2208      	movs	r2, #8
 800543c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69da      	ldr	r2, [r3, #28]
 8005444:	23c0      	movs	r3, #192	; 0xc0
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4013      	ands	r3, r2
 800544a:	d004      	beq.n	8005456 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	0018      	movs	r0, r3
 8005450:	f000 f990 	bl	8005774 <HAL_TIM_IC_CaptureCallback>
 8005454:	e007      	b.n	8005466 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 f983 	bl	8005764 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	0018      	movs	r0, r3
 8005462:	f000 f98f 	bl	8005784 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2200      	movs	r2, #0
 800546a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2201      	movs	r2, #1
 8005474:	4013      	ands	r3, r2
 8005476:	2b01      	cmp	r3, #1
 8005478:	d10f      	bne.n	800549a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	2201      	movs	r2, #1
 8005482:	4013      	ands	r3, r2
 8005484:	2b01      	cmp	r3, #1
 8005486:	d108      	bne.n	800549a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2202      	movs	r2, #2
 800548e:	4252      	negs	r2, r2
 8005490:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	0018      	movs	r0, r3
 8005496:	f7fc f963 	bl	8001760 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	691b      	ldr	r3, [r3, #16]
 80054a0:	2280      	movs	r2, #128	; 0x80
 80054a2:	4013      	ands	r3, r2
 80054a4:	2b80      	cmp	r3, #128	; 0x80
 80054a6:	d10f      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	2280      	movs	r2, #128	; 0x80
 80054b0:	4013      	ands	r3, r2
 80054b2:	2b80      	cmp	r3, #128	; 0x80
 80054b4:	d108      	bne.n	80054c8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	2281      	movs	r2, #129	; 0x81
 80054bc:	4252      	negs	r2, r2
 80054be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	0018      	movs	r0, r3
 80054c4:	f000 fde2 	bl	800608c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	691a      	ldr	r2, [r3, #16]
 80054ce:	2380      	movs	r3, #128	; 0x80
 80054d0:	005b      	lsls	r3, r3, #1
 80054d2:	401a      	ands	r2, r3
 80054d4:	2380      	movs	r3, #128	; 0x80
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	429a      	cmp	r2, r3
 80054da:	d10e      	bne.n	80054fa <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2280      	movs	r2, #128	; 0x80
 80054e4:	4013      	ands	r3, r2
 80054e6:	2b80      	cmp	r3, #128	; 0x80
 80054e8:	d107      	bne.n	80054fa <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1c      	ldr	r2, [pc, #112]	; (8005560 <HAL_TIM_IRQHandler+0x260>)
 80054f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 fdd1 	bl	800609c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	2240      	movs	r2, #64	; 0x40
 8005502:	4013      	ands	r3, r2
 8005504:	2b40      	cmp	r3, #64	; 0x40
 8005506:	d10f      	bne.n	8005528 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	2240      	movs	r2, #64	; 0x40
 8005510:	4013      	ands	r3, r2
 8005512:	2b40      	cmp	r3, #64	; 0x40
 8005514:	d108      	bne.n	8005528 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2241      	movs	r2, #65	; 0x41
 800551c:	4252      	negs	r2, r2
 800551e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	0018      	movs	r0, r3
 8005524:	f000 f936 	bl	8005794 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	691b      	ldr	r3, [r3, #16]
 800552e:	2220      	movs	r2, #32
 8005530:	4013      	ands	r3, r2
 8005532:	2b20      	cmp	r3, #32
 8005534:	d10f      	bne.n	8005556 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	2220      	movs	r2, #32
 800553e:	4013      	ands	r3, r2
 8005540:	2b20      	cmp	r3, #32
 8005542:	d108      	bne.n	8005556 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	2221      	movs	r2, #33	; 0x21
 800554a:	4252      	negs	r2, r2
 800554c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	0018      	movs	r0, r3
 8005552:	f000 fd93 	bl	800607c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005556:	46c0      	nop			; (mov r8, r8)
 8005558:	46bd      	mov	sp, r7
 800555a:	b002      	add	sp, #8
 800555c:	bd80      	pop	{r7, pc}
 800555e:	46c0      	nop			; (mov r8, r8)
 8005560:	fffffeff 	.word	0xfffffeff

08005564 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005570:	2317      	movs	r3, #23
 8005572:	18fb      	adds	r3, r7, r3
 8005574:	2200      	movs	r2, #0
 8005576:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	223c      	movs	r2, #60	; 0x3c
 800557c:	5c9b      	ldrb	r3, [r3, r2]
 800557e:	2b01      	cmp	r3, #1
 8005580:	d101      	bne.n	8005586 <HAL_TIM_PWM_ConfigChannel+0x22>
 8005582:	2302      	movs	r3, #2
 8005584:	e0e5      	b.n	8005752 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	223c      	movs	r2, #60	; 0x3c
 800558a:	2101      	movs	r1, #1
 800558c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2b14      	cmp	r3, #20
 8005592:	d900      	bls.n	8005596 <HAL_TIM_PWM_ConfigChannel+0x32>
 8005594:	e0d1      	b.n	800573a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	009a      	lsls	r2, r3, #2
 800559a:	4b70      	ldr	r3, [pc, #448]	; (800575c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800559c:	18d3      	adds	r3, r2, r3
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68ba      	ldr	r2, [r7, #8]
 80055a8:	0011      	movs	r1, r2
 80055aa:	0018      	movs	r0, r3
 80055ac:	f000 f970 	bl	8005890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	699a      	ldr	r2, [r3, #24]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2108      	movs	r1, #8
 80055bc:	430a      	orrs	r2, r1
 80055be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	699a      	ldr	r2, [r3, #24]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2104      	movs	r1, #4
 80055cc:	438a      	bics	r2, r1
 80055ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	6999      	ldr	r1, [r3, #24]
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	691a      	ldr	r2, [r3, #16]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	430a      	orrs	r2, r1
 80055e0:	619a      	str	r2, [r3, #24]
      break;
 80055e2:	e0af      	b.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68ba      	ldr	r2, [r7, #8]
 80055ea:	0011      	movs	r1, r2
 80055ec:	0018      	movs	r0, r3
 80055ee:	f000 f9d9 	bl	80059a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2180      	movs	r1, #128	; 0x80
 80055fe:	0109      	lsls	r1, r1, #4
 8005600:	430a      	orrs	r2, r1
 8005602:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	699a      	ldr	r2, [r3, #24]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4954      	ldr	r1, [pc, #336]	; (8005760 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005610:	400a      	ands	r2, r1
 8005612:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	6999      	ldr	r1, [r3, #24]
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	021a      	lsls	r2, r3, #8
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	430a      	orrs	r2, r1
 8005626:	619a      	str	r2, [r3, #24]
      break;
 8005628:	e08c      	b.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0011      	movs	r1, r2
 8005632:	0018      	movs	r0, r3
 8005634:	f000 fa3a 	bl	8005aac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	69da      	ldr	r2, [r3, #28]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2108      	movs	r1, #8
 8005644:	430a      	orrs	r2, r1
 8005646:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	69da      	ldr	r2, [r3, #28]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2104      	movs	r1, #4
 8005654:	438a      	bics	r2, r1
 8005656:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	69d9      	ldr	r1, [r3, #28]
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	691a      	ldr	r2, [r3, #16]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	61da      	str	r2, [r3, #28]
      break;
 800566a:	e06b      	b.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	0011      	movs	r1, r2
 8005674:	0018      	movs	r0, r3
 8005676:	f000 faa1 	bl	8005bbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	69da      	ldr	r2, [r3, #28]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	2180      	movs	r1, #128	; 0x80
 8005686:	0109      	lsls	r1, r1, #4
 8005688:	430a      	orrs	r2, r1
 800568a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	69da      	ldr	r2, [r3, #28]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4932      	ldr	r1, [pc, #200]	; (8005760 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005698:	400a      	ands	r2, r1
 800569a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	69d9      	ldr	r1, [r3, #28]
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	021a      	lsls	r2, r3, #8
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	430a      	orrs	r2, r1
 80056ae:	61da      	str	r2, [r3, #28]
      break;
 80056b0:	e048      	b.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0011      	movs	r1, r2
 80056ba:	0018      	movs	r0, r3
 80056bc:	f000 fae8 	bl	8005c90 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	2108      	movs	r1, #8
 80056cc:	430a      	orrs	r2, r1
 80056ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	2104      	movs	r1, #4
 80056dc:	438a      	bics	r2, r1
 80056de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80056e6:	68bb      	ldr	r3, [r7, #8]
 80056e8:	691a      	ldr	r2, [r3, #16]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	430a      	orrs	r2, r1
 80056f0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80056f2:	e027      	b.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	68ba      	ldr	r2, [r7, #8]
 80056fa:	0011      	movs	r1, r2
 80056fc:	0018      	movs	r0, r3
 80056fe:	f000 fb27 	bl	8005d50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	2180      	movs	r1, #128	; 0x80
 800570e:	0109      	lsls	r1, r1, #4
 8005710:	430a      	orrs	r2, r1
 8005712:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4910      	ldr	r1, [pc, #64]	; (8005760 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005720:	400a      	ands	r2, r1
 8005722:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800572a:	68bb      	ldr	r3, [r7, #8]
 800572c:	691b      	ldr	r3, [r3, #16]
 800572e:	021a      	lsls	r2, r3, #8
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005738:	e004      	b.n	8005744 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800573a:	2317      	movs	r3, #23
 800573c:	18fb      	adds	r3, r7, r3
 800573e:	2201      	movs	r2, #1
 8005740:	701a      	strb	r2, [r3, #0]
      break;
 8005742:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	223c      	movs	r2, #60	; 0x3c
 8005748:	2100      	movs	r1, #0
 800574a:	5499      	strb	r1, [r3, r2]

  return status;
 800574c:	2317      	movs	r3, #23
 800574e:	18fb      	adds	r3, r7, r3
 8005750:	781b      	ldrb	r3, [r3, #0]
}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b006      	add	sp, #24
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	0800c5d4 	.word	0x0800c5d4
 8005760:	fffffbff 	.word	0xfffffbff

08005764 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800576c:	46c0      	nop			; (mov r8, r8)
 800576e:	46bd      	mov	sp, r7
 8005770:	b002      	add	sp, #8
 8005772:	bd80      	pop	{r7, pc}

08005774 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005774:	b580      	push	{r7, lr}
 8005776:	b082      	sub	sp, #8
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800577c:	46c0      	nop			; (mov r8, r8)
 800577e:	46bd      	mov	sp, r7
 8005780:	b002      	add	sp, #8
 8005782:	bd80      	pop	{r7, pc}

08005784 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005784:	b580      	push	{r7, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800578c:	46c0      	nop			; (mov r8, r8)
 800578e:	46bd      	mov	sp, r7
 8005790:	b002      	add	sp, #8
 8005792:	bd80      	pop	{r7, pc}

08005794 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800579c:	46c0      	nop			; (mov r8, r8)
 800579e:	46bd      	mov	sp, r7
 80057a0:	b002      	add	sp, #8
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a2f      	ldr	r2, [pc, #188]	; (8005874 <TIM_Base_SetConfig+0xd0>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d003      	beq.n	80057c4 <TIM_Base_SetConfig+0x20>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	4a2e      	ldr	r2, [pc, #184]	; (8005878 <TIM_Base_SetConfig+0xd4>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d108      	bne.n	80057d6 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2270      	movs	r2, #112	; 0x70
 80057c8:	4393      	bics	r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	4313      	orrs	r3, r2
 80057d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a26      	ldr	r2, [pc, #152]	; (8005874 <TIM_Base_SetConfig+0xd0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d013      	beq.n	8005806 <TIM_Base_SetConfig+0x62>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a25      	ldr	r2, [pc, #148]	; (8005878 <TIM_Base_SetConfig+0xd4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00f      	beq.n	8005806 <TIM_Base_SetConfig+0x62>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a24      	ldr	r2, [pc, #144]	; (800587c <TIM_Base_SetConfig+0xd8>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d00b      	beq.n	8005806 <TIM_Base_SetConfig+0x62>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a23      	ldr	r2, [pc, #140]	; (8005880 <TIM_Base_SetConfig+0xdc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d007      	beq.n	8005806 <TIM_Base_SetConfig+0x62>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a22      	ldr	r2, [pc, #136]	; (8005884 <TIM_Base_SetConfig+0xe0>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d003      	beq.n	8005806 <TIM_Base_SetConfig+0x62>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a21      	ldr	r2, [pc, #132]	; (8005888 <TIM_Base_SetConfig+0xe4>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d108      	bne.n	8005818 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	4a20      	ldr	r2, [pc, #128]	; (800588c <TIM_Base_SetConfig+0xe8>)
 800580a:	4013      	ands	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	68db      	ldr	r3, [r3, #12]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	4313      	orrs	r3, r2
 8005816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	2280      	movs	r2, #128	; 0x80
 800581c:	4393      	bics	r3, r2
 800581e:	001a      	movs	r2, r3
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	695b      	ldr	r3, [r3, #20]
 8005824:	4313      	orrs	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	689a      	ldr	r2, [r3, #8]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	4a0c      	ldr	r2, [pc, #48]	; (8005874 <TIM_Base_SetConfig+0xd0>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d00b      	beq.n	800585e <TIM_Base_SetConfig+0xba>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	4a0d      	ldr	r2, [pc, #52]	; (8005880 <TIM_Base_SetConfig+0xdc>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d007      	beq.n	800585e <TIM_Base_SetConfig+0xba>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	4a0c      	ldr	r2, [pc, #48]	; (8005884 <TIM_Base_SetConfig+0xe0>)
 8005852:	4293      	cmp	r3, r2
 8005854:	d003      	beq.n	800585e <TIM_Base_SetConfig+0xba>
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	4a0b      	ldr	r2, [pc, #44]	; (8005888 <TIM_Base_SetConfig+0xe4>)
 800585a:	4293      	cmp	r3, r2
 800585c:	d103      	bne.n	8005866 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	691a      	ldr	r2, [r3, #16]
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	615a      	str	r2, [r3, #20]
}
 800586c:	46c0      	nop			; (mov r8, r8)
 800586e:	46bd      	mov	sp, r7
 8005870:	b004      	add	sp, #16
 8005872:	bd80      	pop	{r7, pc}
 8005874:	40012c00 	.word	0x40012c00
 8005878:	40000400 	.word	0x40000400
 800587c:	40002000 	.word	0x40002000
 8005880:	40014000 	.word	0x40014000
 8005884:	40014400 	.word	0x40014400
 8005888:	40014800 	.word	0x40014800
 800588c:	fffffcff 	.word	0xfffffcff

08005890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b086      	sub	sp, #24
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	2201      	movs	r2, #1
 80058a0:	4393      	bics	r3, r2
 80058a2:	001a      	movs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	6a1b      	ldr	r3, [r3, #32]
 80058ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	699b      	ldr	r3, [r3, #24]
 80058b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	4a32      	ldr	r2, [pc, #200]	; (8005988 <TIM_OC1_SetConfig+0xf8>)
 80058be:	4013      	ands	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2203      	movs	r2, #3
 80058c6:	4393      	bics	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	2202      	movs	r2, #2
 80058d8:	4393      	bics	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a28      	ldr	r2, [pc, #160]	; (800598c <TIM_OC1_SetConfig+0xfc>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_OC1_SetConfig+0x76>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a27      	ldr	r2, [pc, #156]	; (8005990 <TIM_OC1_SetConfig+0x100>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_OC1_SetConfig+0x76>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a26      	ldr	r2, [pc, #152]	; (8005994 <TIM_OC1_SetConfig+0x104>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_OC1_SetConfig+0x76>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a25      	ldr	r2, [pc, #148]	; (8005998 <TIM_OC1_SetConfig+0x108>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d10c      	bne.n	8005920 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005906:	697b      	ldr	r3, [r7, #20]
 8005908:	2208      	movs	r2, #8
 800590a:	4393      	bics	r3, r2
 800590c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	697a      	ldr	r2, [r7, #20]
 8005914:	4313      	orrs	r3, r2
 8005916:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	2204      	movs	r2, #4
 800591c:	4393      	bics	r3, r2
 800591e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a1a      	ldr	r2, [pc, #104]	; (800598c <TIM_OC1_SetConfig+0xfc>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d00b      	beq.n	8005940 <TIM_OC1_SetConfig+0xb0>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a19      	ldr	r2, [pc, #100]	; (8005990 <TIM_OC1_SetConfig+0x100>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d007      	beq.n	8005940 <TIM_OC1_SetConfig+0xb0>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a18      	ldr	r2, [pc, #96]	; (8005994 <TIM_OC1_SetConfig+0x104>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d003      	beq.n	8005940 <TIM_OC1_SetConfig+0xb0>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	4a17      	ldr	r2, [pc, #92]	; (8005998 <TIM_OC1_SetConfig+0x108>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d111      	bne.n	8005964 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	4a16      	ldr	r2, [pc, #88]	; (800599c <TIM_OC1_SetConfig+0x10c>)
 8005944:	4013      	ands	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	4a15      	ldr	r2, [pc, #84]	; (80059a0 <TIM_OC1_SetConfig+0x110>)
 800594c:	4013      	ands	r3, r2
 800594e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	695b      	ldr	r3, [r3, #20]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	4313      	orrs	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	699b      	ldr	r3, [r3, #24]
 800595e:	693a      	ldr	r2, [r7, #16]
 8005960:	4313      	orrs	r3, r2
 8005962:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	693a      	ldr	r2, [r7, #16]
 8005968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	68fa      	ldr	r2, [r7, #12]
 800596e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005970:	683b      	ldr	r3, [r7, #0]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	697a      	ldr	r2, [r7, #20]
 800597c:	621a      	str	r2, [r3, #32]
}
 800597e:	46c0      	nop			; (mov r8, r8)
 8005980:	46bd      	mov	sp, r7
 8005982:	b006      	add	sp, #24
 8005984:	bd80      	pop	{r7, pc}
 8005986:	46c0      	nop			; (mov r8, r8)
 8005988:	fffeff8f 	.word	0xfffeff8f
 800598c:	40012c00 	.word	0x40012c00
 8005990:	40014000 	.word	0x40014000
 8005994:	40014400 	.word	0x40014400
 8005998:	40014800 	.word	0x40014800
 800599c:	fffffeff 	.word	0xfffffeff
 80059a0:	fffffdff 	.word	0xfffffdff

080059a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b086      	sub	sp, #24
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
 80059ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	2210      	movs	r2, #16
 80059b4:	4393      	bics	r3, r2
 80059b6:	001a      	movs	r2, r3
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4a2e      	ldr	r2, [pc, #184]	; (8005a8c <TIM_OC2_SetConfig+0xe8>)
 80059d2:	4013      	ands	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	4a2d      	ldr	r2, [pc, #180]	; (8005a90 <TIM_OC2_SetConfig+0xec>)
 80059da:	4013      	ands	r3, r2
 80059dc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	68fa      	ldr	r2, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059ea:	697b      	ldr	r3, [r7, #20]
 80059ec:	2220      	movs	r2, #32
 80059ee:	4393      	bics	r3, r2
 80059f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	011b      	lsls	r3, r3, #4
 80059f8:	697a      	ldr	r2, [r7, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a24      	ldr	r2, [pc, #144]	; (8005a94 <TIM_OC2_SetConfig+0xf0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d10d      	bne.n	8005a22 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2280      	movs	r2, #128	; 0x80
 8005a0a:	4393      	bics	r3, r2
 8005a0c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	68db      	ldr	r3, [r3, #12]
 8005a12:	011b      	lsls	r3, r3, #4
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2240      	movs	r2, #64	; 0x40
 8005a1e:	4393      	bics	r3, r2
 8005a20:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a1b      	ldr	r2, [pc, #108]	; (8005a94 <TIM_OC2_SetConfig+0xf0>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d00b      	beq.n	8005a42 <TIM_OC2_SetConfig+0x9e>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <TIM_OC2_SetConfig+0xf4>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d007      	beq.n	8005a42 <TIM_OC2_SetConfig+0x9e>
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	4a19      	ldr	r2, [pc, #100]	; (8005a9c <TIM_OC2_SetConfig+0xf8>)
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d003      	beq.n	8005a42 <TIM_OC2_SetConfig+0x9e>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <TIM_OC2_SetConfig+0xfc>)
 8005a3e:	4293      	cmp	r3, r2
 8005a40:	d113      	bne.n	8005a6a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	4a17      	ldr	r2, [pc, #92]	; (8005aa4 <TIM_OC2_SetConfig+0x100>)
 8005a46:	4013      	ands	r3, r2
 8005a48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	4a16      	ldr	r2, [pc, #88]	; (8005aa8 <TIM_OC2_SetConfig+0x104>)
 8005a4e:	4013      	ands	r3, r2
 8005a50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	695b      	ldr	r3, [r3, #20]
 8005a56:	009b      	lsls	r3, r3, #2
 8005a58:	693a      	ldr	r2, [r7, #16]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	699b      	ldr	r3, [r3, #24]
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	693a      	ldr	r2, [r7, #16]
 8005a6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	68fa      	ldr	r2, [r7, #12]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	685a      	ldr	r2, [r3, #4]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	697a      	ldr	r2, [r7, #20]
 8005a82:	621a      	str	r2, [r3, #32]
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	46bd      	mov	sp, r7
 8005a88:	b006      	add	sp, #24
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	feff8fff 	.word	0xfeff8fff
 8005a90:	fffffcff 	.word	0xfffffcff
 8005a94:	40012c00 	.word	0x40012c00
 8005a98:	40014000 	.word	0x40014000
 8005a9c:	40014400 	.word	0x40014400
 8005aa0:	40014800 	.word	0x40014800
 8005aa4:	fffffbff 	.word	0xfffffbff
 8005aa8:	fffff7ff 	.word	0xfffff7ff

08005aac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b086      	sub	sp, #24
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
 8005ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	4a35      	ldr	r2, [pc, #212]	; (8005b90 <TIM_OC3_SetConfig+0xe4>)
 8005abc:	401a      	ands	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	69db      	ldr	r3, [r3, #28]
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4a2f      	ldr	r2, [pc, #188]	; (8005b94 <TIM_OC3_SetConfig+0xe8>)
 8005ad8:	4013      	ands	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2203      	movs	r2, #3
 8005ae0:	4393      	bics	r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	4313      	orrs	r3, r2
 8005aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	4a29      	ldr	r2, [pc, #164]	; (8005b98 <TIM_OC3_SetConfig+0xec>)
 8005af2:	4013      	ands	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	021b      	lsls	r3, r3, #8
 8005afc:	697a      	ldr	r2, [r7, #20]
 8005afe:	4313      	orrs	r3, r2
 8005b00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a25      	ldr	r2, [pc, #148]	; (8005b9c <TIM_OC3_SetConfig+0xf0>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d10d      	bne.n	8005b26 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b0a:	697b      	ldr	r3, [r7, #20]
 8005b0c:	4a24      	ldr	r2, [pc, #144]	; (8005ba0 <TIM_OC3_SetConfig+0xf4>)
 8005b0e:	4013      	ands	r3, r2
 8005b10:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	4a20      	ldr	r2, [pc, #128]	; (8005ba4 <TIM_OC3_SetConfig+0xf8>)
 8005b22:	4013      	ands	r3, r2
 8005b24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	4a1c      	ldr	r2, [pc, #112]	; (8005b9c <TIM_OC3_SetConfig+0xf0>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d00b      	beq.n	8005b46 <TIM_OC3_SetConfig+0x9a>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	4a1d      	ldr	r2, [pc, #116]	; (8005ba8 <TIM_OC3_SetConfig+0xfc>)
 8005b32:	4293      	cmp	r3, r2
 8005b34:	d007      	beq.n	8005b46 <TIM_OC3_SetConfig+0x9a>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	4a1c      	ldr	r2, [pc, #112]	; (8005bac <TIM_OC3_SetConfig+0x100>)
 8005b3a:	4293      	cmp	r3, r2
 8005b3c:	d003      	beq.n	8005b46 <TIM_OC3_SetConfig+0x9a>
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	4a1b      	ldr	r2, [pc, #108]	; (8005bb0 <TIM_OC3_SetConfig+0x104>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d113      	bne.n	8005b6e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	4a1a      	ldr	r2, [pc, #104]	; (8005bb4 <TIM_OC3_SetConfig+0x108>)
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	4a19      	ldr	r2, [pc, #100]	; (8005bb8 <TIM_OC3_SetConfig+0x10c>)
 8005b52:	4013      	ands	r3, r2
 8005b54:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	695b      	ldr	r3, [r3, #20]
 8005b5a:	011b      	lsls	r3, r3, #4
 8005b5c:	693a      	ldr	r2, [r7, #16]
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	699b      	ldr	r3, [r3, #24]
 8005b66:	011b      	lsls	r3, r3, #4
 8005b68:	693a      	ldr	r2, [r7, #16]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	693a      	ldr	r2, [r7, #16]
 8005b72:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	68fa      	ldr	r2, [r7, #12]
 8005b78:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	685a      	ldr	r2, [r3, #4]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	697a      	ldr	r2, [r7, #20]
 8005b86:	621a      	str	r2, [r3, #32]
}
 8005b88:	46c0      	nop			; (mov r8, r8)
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b006      	add	sp, #24
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	fffffeff 	.word	0xfffffeff
 8005b94:	fffeff8f 	.word	0xfffeff8f
 8005b98:	fffffdff 	.word	0xfffffdff
 8005b9c:	40012c00 	.word	0x40012c00
 8005ba0:	fffff7ff 	.word	0xfffff7ff
 8005ba4:	fffffbff 	.word	0xfffffbff
 8005ba8:	40014000 	.word	0x40014000
 8005bac:	40014400 	.word	0x40014400
 8005bb0:	40014800 	.word	0x40014800
 8005bb4:	ffffefff 	.word	0xffffefff
 8005bb8:	ffffdfff 	.word	0xffffdfff

08005bbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a1b      	ldr	r3, [r3, #32]
 8005bca:	4a28      	ldr	r2, [pc, #160]	; (8005c6c <TIM_OC4_SetConfig+0xb0>)
 8005bcc:	401a      	ands	r2, r3
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	4a22      	ldr	r2, [pc, #136]	; (8005c70 <TIM_OC4_SetConfig+0xb4>)
 8005be8:	4013      	ands	r3, r2
 8005bea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	4a21      	ldr	r2, [pc, #132]	; (8005c74 <TIM_OC4_SetConfig+0xb8>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	021b      	lsls	r3, r3, #8
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	4313      	orrs	r3, r2
 8005bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c00:	693b      	ldr	r3, [r7, #16]
 8005c02:	4a1d      	ldr	r2, [pc, #116]	; (8005c78 <TIM_OC4_SetConfig+0xbc>)
 8005c04:	4013      	ands	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c08:	683b      	ldr	r3, [r7, #0]
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	031b      	lsls	r3, r3, #12
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	4a19      	ldr	r2, [pc, #100]	; (8005c7c <TIM_OC4_SetConfig+0xc0>)
 8005c18:	4293      	cmp	r3, r2
 8005c1a:	d00b      	beq.n	8005c34 <TIM_OC4_SetConfig+0x78>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	4a18      	ldr	r2, [pc, #96]	; (8005c80 <TIM_OC4_SetConfig+0xc4>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d007      	beq.n	8005c34 <TIM_OC4_SetConfig+0x78>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	4a17      	ldr	r2, [pc, #92]	; (8005c84 <TIM_OC4_SetConfig+0xc8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d003      	beq.n	8005c34 <TIM_OC4_SetConfig+0x78>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	4a16      	ldr	r2, [pc, #88]	; (8005c88 <TIM_OC4_SetConfig+0xcc>)
 8005c30:	4293      	cmp	r3, r2
 8005c32:	d109      	bne.n	8005c48 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	4a15      	ldr	r2, [pc, #84]	; (8005c8c <TIM_OC4_SetConfig+0xd0>)
 8005c38:	4013      	ands	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	019b      	lsls	r3, r3, #6
 8005c42:	697a      	ldr	r2, [r7, #20]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	697a      	ldr	r2, [r7, #20]
 8005c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	68fa      	ldr	r2, [r7, #12]
 8005c52:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c54:	683b      	ldr	r3, [r7, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	693a      	ldr	r2, [r7, #16]
 8005c60:	621a      	str	r2, [r3, #32]
}
 8005c62:	46c0      	nop			; (mov r8, r8)
 8005c64:	46bd      	mov	sp, r7
 8005c66:	b006      	add	sp, #24
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	46c0      	nop			; (mov r8, r8)
 8005c6c:	ffffefff 	.word	0xffffefff
 8005c70:	feff8fff 	.word	0xfeff8fff
 8005c74:	fffffcff 	.word	0xfffffcff
 8005c78:	ffffdfff 	.word	0xffffdfff
 8005c7c:	40012c00 	.word	0x40012c00
 8005c80:	40014000 	.word	0x40014000
 8005c84:	40014400 	.word	0x40014400
 8005c88:	40014800 	.word	0x40014800
 8005c8c:	ffffbfff 	.word	0xffffbfff

08005c90 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b086      	sub	sp, #24
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	4a25      	ldr	r2, [pc, #148]	; (8005d34 <TIM_OC5_SetConfig+0xa4>)
 8005ca0:	401a      	ands	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	4a1f      	ldr	r2, [pc, #124]	; (8005d38 <TIM_OC5_SetConfig+0xa8>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	68fa      	ldr	r2, [r7, #12]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	4a1b      	ldr	r2, [pc, #108]	; (8005d3c <TIM_OC5_SetConfig+0xac>)
 8005cce:	4013      	ands	r3, r2
 8005cd0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	689b      	ldr	r3, [r3, #8]
 8005cd6:	041b      	lsls	r3, r3, #16
 8005cd8:	693a      	ldr	r2, [r7, #16]
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a17      	ldr	r2, [pc, #92]	; (8005d40 <TIM_OC5_SetConfig+0xb0>)
 8005ce2:	4293      	cmp	r3, r2
 8005ce4:	d00b      	beq.n	8005cfe <TIM_OC5_SetConfig+0x6e>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	4a16      	ldr	r2, [pc, #88]	; (8005d44 <TIM_OC5_SetConfig+0xb4>)
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d007      	beq.n	8005cfe <TIM_OC5_SetConfig+0x6e>
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	4a15      	ldr	r2, [pc, #84]	; (8005d48 <TIM_OC5_SetConfig+0xb8>)
 8005cf2:	4293      	cmp	r3, r2
 8005cf4:	d003      	beq.n	8005cfe <TIM_OC5_SetConfig+0x6e>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	4a14      	ldr	r2, [pc, #80]	; (8005d4c <TIM_OC5_SetConfig+0xbc>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d109      	bne.n	8005d12 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	4a0c      	ldr	r2, [pc, #48]	; (8005d34 <TIM_OC5_SetConfig+0xa4>)
 8005d02:	4013      	ands	r3, r2
 8005d04:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	695b      	ldr	r3, [r3, #20]
 8005d0a:	021b      	lsls	r3, r3, #8
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	697a      	ldr	r2, [r7, #20]
 8005d16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	68fa      	ldr	r2, [r7, #12]
 8005d1c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d1e:	683b      	ldr	r3, [r7, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	693a      	ldr	r2, [r7, #16]
 8005d2a:	621a      	str	r2, [r3, #32]
}
 8005d2c:	46c0      	nop			; (mov r8, r8)
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	b006      	add	sp, #24
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	fffeffff 	.word	0xfffeffff
 8005d38:	fffeff8f 	.word	0xfffeff8f
 8005d3c:	fffdffff 	.word	0xfffdffff
 8005d40:	40012c00 	.word	0x40012c00
 8005d44:	40014000 	.word	0x40014000
 8005d48:	40014400 	.word	0x40014400
 8005d4c:	40014800 	.word	0x40014800

08005d50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b086      	sub	sp, #24
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	6078      	str	r0, [r7, #4]
 8005d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	4a26      	ldr	r2, [pc, #152]	; (8005df8 <TIM_OC6_SetConfig+0xa8>)
 8005d60:	401a      	ands	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6a1b      	ldr	r3, [r3, #32]
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	685b      	ldr	r3, [r3, #4]
 8005d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4a20      	ldr	r2, [pc, #128]	; (8005dfc <TIM_OC6_SetConfig+0xac>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	021b      	lsls	r3, r3, #8
 8005d86:	68fa      	ldr	r2, [r7, #12]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	4a1c      	ldr	r2, [pc, #112]	; (8005e00 <TIM_OC6_SetConfig+0xb0>)
 8005d90:	4013      	ands	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	051b      	lsls	r3, r3, #20
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a18      	ldr	r2, [pc, #96]	; (8005e04 <TIM_OC6_SetConfig+0xb4>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d00b      	beq.n	8005dc0 <TIM_OC6_SetConfig+0x70>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a17      	ldr	r2, [pc, #92]	; (8005e08 <TIM_OC6_SetConfig+0xb8>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d007      	beq.n	8005dc0 <TIM_OC6_SetConfig+0x70>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <TIM_OC6_SetConfig+0xbc>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d003      	beq.n	8005dc0 <TIM_OC6_SetConfig+0x70>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <TIM_OC6_SetConfig+0xc0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d109      	bne.n	8005dd4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005dc0:	697b      	ldr	r3, [r7, #20]
 8005dc2:	4a14      	ldr	r2, [pc, #80]	; (8005e14 <TIM_OC6_SetConfig+0xc4>)
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	695b      	ldr	r3, [r3, #20]
 8005dcc:	029b      	lsls	r3, r3, #10
 8005dce:	697a      	ldr	r2, [r7, #20]
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	697a      	ldr	r2, [r7, #20]
 8005dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	621a      	str	r2, [r3, #32]
}
 8005dee:	46c0      	nop			; (mov r8, r8)
 8005df0:	46bd      	mov	sp, r7
 8005df2:	b006      	add	sp, #24
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	ffefffff 	.word	0xffefffff
 8005dfc:	feff8fff 	.word	0xfeff8fff
 8005e00:	ffdfffff 	.word	0xffdfffff
 8005e04:	40012c00 	.word	0x40012c00
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40014400 	.word	0x40014400
 8005e10:	40014800 	.word	0x40014800
 8005e14:	fffbffff 	.word	0xfffbffff

08005e18 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e24:	68bb      	ldr	r3, [r7, #8]
 8005e26:	221f      	movs	r2, #31
 8005e28:	4013      	ands	r3, r2
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	409a      	lsls	r2, r3
 8005e2e:	0013      	movs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6a1b      	ldr	r3, [r3, #32]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	43d2      	mvns	r2, r2
 8005e3a:	401a      	ands	r2, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	6a1a      	ldr	r2, [r3, #32]
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	211f      	movs	r1, #31
 8005e48:	400b      	ands	r3, r1
 8005e4a:	6879      	ldr	r1, [r7, #4]
 8005e4c:	4099      	lsls	r1, r3
 8005e4e:	000b      	movs	r3, r1
 8005e50:	431a      	orrs	r2, r3
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	621a      	str	r2, [r3, #32]
}
 8005e56:	46c0      	nop			; (mov r8, r8)
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	b006      	add	sp, #24
 8005e5c:	bd80      	pop	{r7, pc}
	...

08005e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b084      	sub	sp, #16
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	223c      	movs	r2, #60	; 0x3c
 8005e6e:	5c9b      	ldrb	r3, [r3, r2]
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e04f      	b.n	8005f18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	223c      	movs	r2, #60	; 0x3c
 8005e7c:	2101      	movs	r1, #1
 8005e7e:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	223d      	movs	r2, #61	; 0x3d
 8005e84:	2102      	movs	r1, #2
 8005e86:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a20      	ldr	r2, [pc, #128]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d108      	bne.n	8005eb4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	4a1f      	ldr	r2, [pc, #124]	; (8005f24 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	68fa      	ldr	r2, [r7, #12]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2270      	movs	r2, #112	; 0x70
 8005eb8:	4393      	bics	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ebc:	683b      	ldr	r3, [r7, #0]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	68fa      	ldr	r2, [r7, #12]
 8005ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	4a13      	ldr	r2, [pc, #76]	; (8005f20 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d009      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a12      	ldr	r2, [pc, #72]	; (8005f28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005ede:	4293      	cmp	r3, r2
 8005ee0:	d004      	beq.n	8005eec <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a11      	ldr	r2, [pc, #68]	; (8005f2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d10c      	bne.n	8005f06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	4393      	bics	r3, r2
 8005ef2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	689b      	ldr	r3, [r3, #8]
 8005ef8:	68ba      	ldr	r2, [r7, #8]
 8005efa:	4313      	orrs	r3, r2
 8005efc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68ba      	ldr	r2, [r7, #8]
 8005f04:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	223d      	movs	r2, #61	; 0x3d
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	223c      	movs	r2, #60	; 0x3c
 8005f12:	2100      	movs	r1, #0
 8005f14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	0018      	movs	r0, r3
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	b004      	add	sp, #16
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	40012c00 	.word	0x40012c00
 8005f24:	ff0fffff 	.word	0xff0fffff
 8005f28:	40000400 	.word	0x40000400
 8005f2c:	40014000 	.word	0x40014000

08005f30 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b084      	sub	sp, #16
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	223c      	movs	r2, #60	; 0x3c
 8005f42:	5c9b      	ldrb	r3, [r3, r2]
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d101      	bne.n	8005f4c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005f48:	2302      	movs	r3, #2
 8005f4a:	e079      	b.n	8006040 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	223c      	movs	r2, #60	; 0x3c
 8005f50:	2101      	movs	r1, #1
 8005f52:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	22ff      	movs	r2, #255	; 0xff
 8005f58:	4393      	bics	r3, r2
 8005f5a:	001a      	movs	r2, r3
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4a38      	ldr	r2, [pc, #224]	; (8006048 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005f68:	401a      	ands	r2, r3
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	689b      	ldr	r3, [r3, #8]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4a35      	ldr	r2, [pc, #212]	; (800604c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005f76:	401a      	ands	r2, r3
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	685b      	ldr	r3, [r3, #4]
 8005f7c:	4313      	orrs	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	4a33      	ldr	r2, [pc, #204]	; (8006050 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005f84:	401a      	ands	r2, r3
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	4313      	orrs	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a30      	ldr	r2, [pc, #192]	; (8006054 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005f92:	401a      	ands	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	691b      	ldr	r3, [r3, #16]
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a2e      	ldr	r2, [pc, #184]	; (8006058 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005fa0:	401a      	ands	r2, r3
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	695b      	ldr	r3, [r3, #20]
 8005fa6:	4313      	orrs	r3, r2
 8005fa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4a2b      	ldr	r2, [pc, #172]	; (800605c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005fae:	401a      	ands	r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fb4:	4313      	orrs	r3, r2
 8005fb6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4a29      	ldr	r2, [pc, #164]	; (8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005fbc:	401a      	ands	r2, r3
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	699b      	ldr	r3, [r3, #24]
 8005fc2:	041b      	lsls	r3, r3, #16
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a25      	ldr	r2, [pc, #148]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d106      	bne.n	8005fe0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	4a24      	ldr	r2, [pc, #144]	; (8006068 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005fd6:	401a      	ands	r2, r3
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	69db      	ldr	r3, [r3, #28]
 8005fdc:	4313      	orrs	r3, r2
 8005fde:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a1f      	ldr	r2, [pc, #124]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d121      	bne.n	800602e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4a1f      	ldr	r2, [pc, #124]	; (800606c <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005fee:	401a      	ands	r2, r3
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ff4:	051b      	lsls	r3, r3, #20
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	4a1c      	ldr	r2, [pc, #112]	; (8006070 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8005ffe:	401a      	ands	r2, r3
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	6a1b      	ldr	r3, [r3, #32]
 8006004:	4313      	orrs	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	4a1a      	ldr	r2, [pc, #104]	; (8006074 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800600c:	401a      	ands	r2, r3
 800600e:	683b      	ldr	r3, [r7, #0]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	4313      	orrs	r3, r2
 8006014:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4a12      	ldr	r2, [pc, #72]	; (8006064 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800601c:	4293      	cmp	r3, r2
 800601e:	d106      	bne.n	800602e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	4a15      	ldr	r2, [pc, #84]	; (8006078 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8006024:	401a      	ands	r2, r3
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602a:	4313      	orrs	r3, r2
 800602c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	223c      	movs	r2, #60	; 0x3c
 800603a:	2100      	movs	r1, #0
 800603c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800603e:	2300      	movs	r3, #0
}
 8006040:	0018      	movs	r0, r3
 8006042:	46bd      	mov	sp, r7
 8006044:	b004      	add	sp, #16
 8006046:	bd80      	pop	{r7, pc}
 8006048:	fffffcff 	.word	0xfffffcff
 800604c:	fffffbff 	.word	0xfffffbff
 8006050:	fffff7ff 	.word	0xfffff7ff
 8006054:	ffffefff 	.word	0xffffefff
 8006058:	ffffdfff 	.word	0xffffdfff
 800605c:	ffffbfff 	.word	0xffffbfff
 8006060:	fff0ffff 	.word	0xfff0ffff
 8006064:	40012c00 	.word	0x40012c00
 8006068:	efffffff 	.word	0xefffffff
 800606c:	ff0fffff 	.word	0xff0fffff
 8006070:	feffffff 	.word	0xfeffffff
 8006074:	fdffffff 	.word	0xfdffffff
 8006078:	dfffffff 	.word	0xdfffffff

0800607c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b082      	sub	sp, #8
 8006080:	af00      	add	r7, sp, #0
 8006082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006084:	46c0      	nop			; (mov r8, r8)
 8006086:	46bd      	mov	sp, r7
 8006088:	b002      	add	sp, #8
 800608a:	bd80      	pop	{r7, pc}

0800608c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b082      	sub	sp, #8
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006094:	46c0      	nop			; (mov r8, r8)
 8006096:	46bd      	mov	sp, r7
 8006098:	b002      	add	sp, #8
 800609a:	bd80      	pop	{r7, pc}

0800609c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80060a4:	46c0      	nop			; (mov r8, r8)
 80060a6:	46bd      	mov	sp, r7
 80060a8:	b002      	add	sp, #8
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b082      	sub	sp, #8
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d101      	bne.n	80060be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80060ba:	2301      	movs	r3, #1
 80060bc:	e046      	b.n	800614c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2288      	movs	r2, #136	; 0x88
 80060c2:	589b      	ldr	r3, [r3, r2]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d107      	bne.n	80060d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2284      	movs	r2, #132	; 0x84
 80060cc:	2100      	movs	r1, #0
 80060ce:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	0018      	movs	r0, r3
 80060d4:	f7fc fb14 	bl	8002700 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2288      	movs	r2, #136	; 0x88
 80060dc:	2124      	movs	r1, #36	; 0x24
 80060de:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681a      	ldr	r2, [r3, #0]
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2101      	movs	r1, #1
 80060ec:	438a      	bics	r2, r1
 80060ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	0018      	movs	r0, r3
 80060f4:	f000 fbba 	bl	800686c <UART_SetConfig>
 80060f8:	0003      	movs	r3, r0
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e024      	b.n	800614c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	0018      	movs	r0, r3
 800610e:	f000 fd51 	bl	8006bb4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	685a      	ldr	r2, [r3, #4]
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	490d      	ldr	r1, [pc, #52]	; (8006154 <HAL_UART_Init+0xa8>)
 800611e:	400a      	ands	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	689a      	ldr	r2, [r3, #8]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	212a      	movs	r1, #42	; 0x2a
 800612e:	438a      	bics	r2, r1
 8006130:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	681a      	ldr	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2101      	movs	r1, #1
 800613e:	430a      	orrs	r2, r1
 8006140:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	0018      	movs	r0, r3
 8006146:	f000 fde9 	bl	8006d1c <UART_CheckIdleState>
 800614a:	0003      	movs	r3, r0
}
 800614c:	0018      	movs	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	b002      	add	sp, #8
 8006152:	bd80      	pop	{r7, pc}
 8006154:	ffffb7ff 	.word	0xffffb7ff

08006158 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b08a      	sub	sp, #40	; 0x28
 800615c:	af02      	add	r7, sp, #8
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	603b      	str	r3, [r7, #0]
 8006164:	1dbb      	adds	r3, r7, #6
 8006166:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2288      	movs	r2, #136	; 0x88
 800616c:	589b      	ldr	r3, [r3, r2]
 800616e:	2b20      	cmp	r3, #32
 8006170:	d000      	beq.n	8006174 <HAL_UART_Transmit+0x1c>
 8006172:	e088      	b.n	8006286 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d003      	beq.n	8006182 <HAL_UART_Transmit+0x2a>
 800617a:	1dbb      	adds	r3, r7, #6
 800617c:	881b      	ldrh	r3, [r3, #0]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d101      	bne.n	8006186 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8006182:	2301      	movs	r3, #1
 8006184:	e080      	b.n	8006288 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	689a      	ldr	r2, [r3, #8]
 800618a:	2380      	movs	r3, #128	; 0x80
 800618c:	015b      	lsls	r3, r3, #5
 800618e:	429a      	cmp	r2, r3
 8006190:	d109      	bne.n	80061a6 <HAL_UART_Transmit+0x4e>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d105      	bne.n	80061a6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2201      	movs	r2, #1
 800619e:	4013      	ands	r3, r2
 80061a0:	d001      	beq.n	80061a6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80061a2:	2301      	movs	r3, #1
 80061a4:	e070      	b.n	8006288 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2290      	movs	r2, #144	; 0x90
 80061aa:	2100      	movs	r1, #0
 80061ac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2288      	movs	r2, #136	; 0x88
 80061b2:	2121      	movs	r1, #33	; 0x21
 80061b4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061b6:	f7fc fbc7 	bl	8002948 <HAL_GetTick>
 80061ba:	0003      	movs	r3, r0
 80061bc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1dba      	adds	r2, r7, #6
 80061c2:	2154      	movs	r1, #84	; 0x54
 80061c4:	8812      	ldrh	r2, [r2, #0]
 80061c6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	1dba      	adds	r2, r7, #6
 80061cc:	2156      	movs	r1, #86	; 0x56
 80061ce:	8812      	ldrh	r2, [r2, #0]
 80061d0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	2380      	movs	r3, #128	; 0x80
 80061d8:	015b      	lsls	r3, r3, #5
 80061da:	429a      	cmp	r2, r3
 80061dc:	d108      	bne.n	80061f0 <HAL_UART_Transmit+0x98>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d104      	bne.n	80061f0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80061e6:	2300      	movs	r3, #0
 80061e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	61bb      	str	r3, [r7, #24]
 80061ee:	e003      	b.n	80061f8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80061f4:	2300      	movs	r3, #0
 80061f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80061f8:	e02c      	b.n	8006254 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	68f8      	ldr	r0, [r7, #12]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	9300      	str	r3, [sp, #0]
 8006202:	0013      	movs	r3, r2
 8006204:	2200      	movs	r2, #0
 8006206:	2180      	movs	r1, #128	; 0x80
 8006208:	f000 fdd6 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 800620c:	1e03      	subs	r3, r0, #0
 800620e:	d001      	beq.n	8006214 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006210:	2303      	movs	r3, #3
 8006212:	e039      	b.n	8006288 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d10b      	bne.n	8006232 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	881b      	ldrh	r3, [r3, #0]
 800621e:	001a      	movs	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	05d2      	lsls	r2, r2, #23
 8006226:	0dd2      	lsrs	r2, r2, #23
 8006228:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800622a:	69bb      	ldr	r3, [r7, #24]
 800622c:	3302      	adds	r3, #2
 800622e:	61bb      	str	r3, [r7, #24]
 8006230:	e007      	b.n	8006242 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006232:	69fb      	ldr	r3, [r7, #28]
 8006234:	781a      	ldrb	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800623c:	69fb      	ldr	r3, [r7, #28]
 800623e:	3301      	adds	r3, #1
 8006240:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2256      	movs	r2, #86	; 0x56
 8006246:	5a9b      	ldrh	r3, [r3, r2]
 8006248:	b29b      	uxth	r3, r3
 800624a:	3b01      	subs	r3, #1
 800624c:	b299      	uxth	r1, r3
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2256      	movs	r2, #86	; 0x56
 8006252:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2256      	movs	r2, #86	; 0x56
 8006258:	5a9b      	ldrh	r3, [r3, r2]
 800625a:	b29b      	uxth	r3, r3
 800625c:	2b00      	cmp	r3, #0
 800625e:	d1cc      	bne.n	80061fa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006260:	697a      	ldr	r2, [r7, #20]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	9300      	str	r3, [sp, #0]
 8006268:	0013      	movs	r3, r2
 800626a:	2200      	movs	r2, #0
 800626c:	2140      	movs	r1, #64	; 0x40
 800626e:	f000 fda3 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 8006272:	1e03      	subs	r3, r0, #0
 8006274:	d001      	beq.n	800627a <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e006      	b.n	8006288 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	2288      	movs	r2, #136	; 0x88
 800627e:	2120      	movs	r1, #32
 8006280:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006282:	2300      	movs	r3, #0
 8006284:	e000      	b.n	8006288 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8006286:	2302      	movs	r3, #2
  }
}
 8006288:	0018      	movs	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	b008      	add	sp, #32
 800628e:	bd80      	pop	{r7, pc}

08006290 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b08a      	sub	sp, #40	; 0x28
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	603b      	str	r3, [r7, #0]
 800629c:	1dbb      	adds	r3, r7, #6
 800629e:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	228c      	movs	r2, #140	; 0x8c
 80062a4:	589b      	ldr	r3, [r3, r2]
 80062a6:	2b20      	cmp	r3, #32
 80062a8:	d000      	beq.n	80062ac <HAL_UART_Receive+0x1c>
 80062aa:	e0cc      	b.n	8006446 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d003      	beq.n	80062ba <HAL_UART_Receive+0x2a>
 80062b2:	1dbb      	adds	r3, r7, #6
 80062b4:	881b      	ldrh	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d101      	bne.n	80062be <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e0c4      	b.n	8006448 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	015b      	lsls	r3, r3, #5
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d109      	bne.n	80062de <HAL_UART_Receive+0x4e>
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	691b      	ldr	r3, [r3, #16]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d105      	bne.n	80062de <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	2201      	movs	r2, #1
 80062d6:	4013      	ands	r3, r2
 80062d8:	d001      	beq.n	80062de <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80062da:	2301      	movs	r3, #1
 80062dc:	e0b4      	b.n	8006448 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2290      	movs	r2, #144	; 0x90
 80062e2:	2100      	movs	r1, #0
 80062e4:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	228c      	movs	r2, #140	; 0x8c
 80062ea:	2122      	movs	r1, #34	; 0x22
 80062ec:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2200      	movs	r2, #0
 80062f2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80062f4:	f7fc fb28 	bl	8002948 <HAL_GetTick>
 80062f8:	0003      	movs	r3, r0
 80062fa:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	1dba      	adds	r2, r7, #6
 8006300:	215c      	movs	r1, #92	; 0x5c
 8006302:	8812      	ldrh	r2, [r2, #0]
 8006304:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	1dba      	adds	r2, r7, #6
 800630a:	215e      	movs	r1, #94	; 0x5e
 800630c:	8812      	ldrh	r2, [r2, #0]
 800630e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	689a      	ldr	r2, [r3, #8]
 8006314:	2380      	movs	r3, #128	; 0x80
 8006316:	015b      	lsls	r3, r3, #5
 8006318:	429a      	cmp	r2, r3
 800631a:	d10d      	bne.n	8006338 <HAL_UART_Receive+0xa8>
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	691b      	ldr	r3, [r3, #16]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d104      	bne.n	800632e <HAL_UART_Receive+0x9e>
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2260      	movs	r2, #96	; 0x60
 8006328:	4949      	ldr	r1, [pc, #292]	; (8006450 <HAL_UART_Receive+0x1c0>)
 800632a:	5299      	strh	r1, [r3, r2]
 800632c:	e02e      	b.n	800638c <HAL_UART_Receive+0xfc>
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2260      	movs	r2, #96	; 0x60
 8006332:	21ff      	movs	r1, #255	; 0xff
 8006334:	5299      	strh	r1, [r3, r2]
 8006336:	e029      	b.n	800638c <HAL_UART_Receive+0xfc>
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d10d      	bne.n	800635c <HAL_UART_Receive+0xcc>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d104      	bne.n	8006352 <HAL_UART_Receive+0xc2>
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	2260      	movs	r2, #96	; 0x60
 800634c:	21ff      	movs	r1, #255	; 0xff
 800634e:	5299      	strh	r1, [r3, r2]
 8006350:	e01c      	b.n	800638c <HAL_UART_Receive+0xfc>
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2260      	movs	r2, #96	; 0x60
 8006356:	217f      	movs	r1, #127	; 0x7f
 8006358:	5299      	strh	r1, [r3, r2]
 800635a:	e017      	b.n	800638c <HAL_UART_Receive+0xfc>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	2380      	movs	r3, #128	; 0x80
 8006362:	055b      	lsls	r3, r3, #21
 8006364:	429a      	cmp	r2, r3
 8006366:	d10d      	bne.n	8006384 <HAL_UART_Receive+0xf4>
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d104      	bne.n	800637a <HAL_UART_Receive+0xea>
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	2260      	movs	r2, #96	; 0x60
 8006374:	217f      	movs	r1, #127	; 0x7f
 8006376:	5299      	strh	r1, [r3, r2]
 8006378:	e008      	b.n	800638c <HAL_UART_Receive+0xfc>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	2260      	movs	r2, #96	; 0x60
 800637e:	213f      	movs	r1, #63	; 0x3f
 8006380:	5299      	strh	r1, [r3, r2]
 8006382:	e003      	b.n	800638c <HAL_UART_Receive+0xfc>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2260      	movs	r2, #96	; 0x60
 8006388:	2100      	movs	r1, #0
 800638a:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 800638c:	2312      	movs	r3, #18
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	2160      	movs	r1, #96	; 0x60
 8006394:	5a52      	ldrh	r2, [r2, r1]
 8006396:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	689a      	ldr	r2, [r3, #8]
 800639c:	2380      	movs	r3, #128	; 0x80
 800639e:	015b      	lsls	r3, r3, #5
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d108      	bne.n	80063b6 <HAL_UART_Receive+0x126>
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	691b      	ldr	r3, [r3, #16]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d104      	bne.n	80063b6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80063ac:	2300      	movs	r3, #0
 80063ae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	61bb      	str	r3, [r7, #24]
 80063b4:	e003      	b.n	80063be <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80063be:	e036      	b.n	800642e <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	68f8      	ldr	r0, [r7, #12]
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	9300      	str	r3, [sp, #0]
 80063c8:	0013      	movs	r3, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	2120      	movs	r1, #32
 80063ce:	f000 fcf3 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 80063d2:	1e03      	subs	r3, r0, #0
 80063d4:	d001      	beq.n	80063da <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80063d6:	2303      	movs	r3, #3
 80063d8:	e036      	b.n	8006448 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80063da:	69fb      	ldr	r3, [r7, #28]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d10e      	bne.n	80063fe <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	2212      	movs	r2, #18
 80063ea:	18ba      	adds	r2, r7, r2
 80063ec:	8812      	ldrh	r2, [r2, #0]
 80063ee:	4013      	ands	r3, r2
 80063f0:	b29a      	uxth	r2, r3
 80063f2:	69bb      	ldr	r3, [r7, #24]
 80063f4:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80063f6:	69bb      	ldr	r3, [r7, #24]
 80063f8:	3302      	adds	r3, #2
 80063fa:	61bb      	str	r3, [r7, #24]
 80063fc:	e00e      	b.n	800641c <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2212      	movs	r2, #18
 8006408:	18ba      	adds	r2, r7, r2
 800640a:	8812      	ldrh	r2, [r2, #0]
 800640c:	b2d2      	uxtb	r2, r2
 800640e:	4013      	ands	r3, r2
 8006410:	b2da      	uxtb	r2, r3
 8006412:	69fb      	ldr	r3, [r7, #28]
 8006414:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	3301      	adds	r3, #1
 800641a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	225e      	movs	r2, #94	; 0x5e
 8006420:	5a9b      	ldrh	r3, [r3, r2]
 8006422:	b29b      	uxth	r3, r3
 8006424:	3b01      	subs	r3, #1
 8006426:	b299      	uxth	r1, r3
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	225e      	movs	r2, #94	; 0x5e
 800642c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	225e      	movs	r2, #94	; 0x5e
 8006432:	5a9b      	ldrh	r3, [r3, r2]
 8006434:	b29b      	uxth	r3, r3
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1c2      	bne.n	80063c0 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	228c      	movs	r2, #140	; 0x8c
 800643e:	2120      	movs	r1, #32
 8006440:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006442:	2300      	movs	r3, #0
 8006444:	e000      	b.n	8006448 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8006446:	2302      	movs	r3, #2
  }
}
 8006448:	0018      	movs	r0, r3
 800644a:	46bd      	mov	sp, r7
 800644c:	b008      	add	sp, #32
 800644e:	bd80      	pop	{r7, pc}
 8006450:	000001ff 	.word	0x000001ff

08006454 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b08c      	sub	sp, #48	; 0x30
 8006458:	af00      	add	r7, sp, #0
 800645a:	60f8      	str	r0, [r7, #12]
 800645c:	60b9      	str	r1, [r7, #8]
 800645e:	1dbb      	adds	r3, r7, #6
 8006460:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	2288      	movs	r2, #136	; 0x88
 8006466:	589b      	ldr	r3, [r3, r2]
 8006468:	2b20      	cmp	r3, #32
 800646a:	d000      	beq.n	800646e <HAL_UART_Transmit_IT+0x1a>
 800646c:	e08d      	b.n	800658a <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 800646e:	68bb      	ldr	r3, [r7, #8]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d003      	beq.n	800647c <HAL_UART_Transmit_IT+0x28>
 8006474:	1dbb      	adds	r3, r7, #6
 8006476:	881b      	ldrh	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d101      	bne.n	8006480 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 800647c:	2301      	movs	r3, #1
 800647e:	e085      	b.n	800658c <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	689a      	ldr	r2, [r3, #8]
 8006484:	2380      	movs	r3, #128	; 0x80
 8006486:	015b      	lsls	r3, r3, #5
 8006488:	429a      	cmp	r2, r3
 800648a:	d109      	bne.n	80064a0 <HAL_UART_Transmit_IT+0x4c>
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d105      	bne.n	80064a0 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	2201      	movs	r2, #1
 8006498:	4013      	ands	r3, r2
 800649a:	d001      	beq.n	80064a0 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 800649c:	2301      	movs	r3, #1
 800649e:	e075      	b.n	800658c <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	68ba      	ldr	r2, [r7, #8]
 80064a4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	1dba      	adds	r2, r7, #6
 80064aa:	2154      	movs	r1, #84	; 0x54
 80064ac:	8812      	ldrh	r2, [r2, #0]
 80064ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	1dba      	adds	r2, r7, #6
 80064b4:	2156      	movs	r1, #86	; 0x56
 80064b6:	8812      	ldrh	r2, [r2, #0]
 80064b8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2290      	movs	r2, #144	; 0x90
 80064c4:	2100      	movs	r1, #0
 80064c6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2288      	movs	r2, #136	; 0x88
 80064cc:	2121      	movs	r1, #33	; 0x21
 80064ce:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80064d4:	2380      	movs	r3, #128	; 0x80
 80064d6:	059b      	lsls	r3, r3, #22
 80064d8:	429a      	cmp	r2, r3
 80064da:	d12a      	bne.n	8006532 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	689a      	ldr	r2, [r3, #8]
 80064e0:	2380      	movs	r3, #128	; 0x80
 80064e2:	015b      	lsls	r3, r3, #5
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d107      	bne.n	80064f8 <HAL_UART_Transmit_IT+0xa4>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d103      	bne.n	80064f8 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	4a28      	ldr	r2, [pc, #160]	; (8006594 <HAL_UART_Transmit_IT+0x140>)
 80064f4:	679a      	str	r2, [r3, #120]	; 0x78
 80064f6:	e002      	b.n	80064fe <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	4a27      	ldr	r2, [pc, #156]	; (8006598 <HAL_UART_Transmit_IT+0x144>)
 80064fc:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064fe:	f3ef 8310 	mrs	r3, PRIMASK
 8006502:	61fb      	str	r3, [r7, #28]
  return(result);
 8006504:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006506:	62bb      	str	r3, [r7, #40]	; 0x28
 8006508:	2301      	movs	r3, #1
 800650a:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800650c:	6a3b      	ldr	r3, [r7, #32]
 800650e:	f383 8810 	msr	PRIMASK, r3
}
 8006512:	46c0      	nop			; (mov r8, r8)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	689a      	ldr	r2, [r3, #8]
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	2180      	movs	r1, #128	; 0x80
 8006520:	0409      	lsls	r1, r1, #16
 8006522:	430a      	orrs	r2, r1
 8006524:	609a      	str	r2, [r3, #8]
 8006526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	f383 8810 	msr	PRIMASK, r3
}
 8006530:	e029      	b.n	8006586 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	2380      	movs	r3, #128	; 0x80
 8006538:	015b      	lsls	r3, r3, #5
 800653a:	429a      	cmp	r2, r3
 800653c:	d107      	bne.n	800654e <HAL_UART_Transmit_IT+0xfa>
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d103      	bne.n	800654e <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a14      	ldr	r2, [pc, #80]	; (800659c <HAL_UART_Transmit_IT+0x148>)
 800654a:	679a      	str	r2, [r3, #120]	; 0x78
 800654c:	e002      	b.n	8006554 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <HAL_UART_Transmit_IT+0x14c>)
 8006552:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006554:	f3ef 8310 	mrs	r3, PRIMASK
 8006558:	613b      	str	r3, [r7, #16]
  return(result);
 800655a:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800655c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800655e:	2301      	movs	r3, #1
 8006560:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006562:	697b      	ldr	r3, [r7, #20]
 8006564:	f383 8810 	msr	PRIMASK, r3
}
 8006568:	46c0      	nop			; (mov r8, r8)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	2180      	movs	r1, #128	; 0x80
 8006576:	430a      	orrs	r2, r1
 8006578:	601a      	str	r2, [r3, #0]
 800657a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800657c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800657e:	69bb      	ldr	r3, [r7, #24]
 8006580:	f383 8810 	msr	PRIMASK, r3
}
 8006584:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	e000      	b.n	800658c <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 800658a:	2302      	movs	r3, #2
  }
}
 800658c:	0018      	movs	r0, r3
 800658e:	46bd      	mov	sp, r7
 8006590:	b00c      	add	sp, #48	; 0x30
 8006592:	bd80      	pop	{r7, pc}
 8006594:	08007939 	.word	0x08007939
 8006598:	0800784d 	.word	0x0800784d
 800659c:	0800778d 	.word	0x0800778d
 80065a0:	080076d9 	.word	0x080076d9

080065a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b088      	sub	sp, #32
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	1dbb      	adds	r3, r7, #6
 80065b0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	228c      	movs	r2, #140	; 0x8c
 80065b6:	589b      	ldr	r3, [r3, r2]
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d145      	bne.n	8006648 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d003      	beq.n	80065ca <HAL_UART_Receive_IT+0x26>
 80065c2:	1dbb      	adds	r3, r7, #6
 80065c4:	881b      	ldrh	r3, [r3, #0]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d101      	bne.n	80065ce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e03d      	b.n	800664a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	689a      	ldr	r2, [r3, #8]
 80065d2:	2380      	movs	r3, #128	; 0x80
 80065d4:	015b      	lsls	r3, r3, #5
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d109      	bne.n	80065ee <HAL_UART_Receive_IT+0x4a>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d105      	bne.n	80065ee <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	2201      	movs	r2, #1
 80065e6:	4013      	ands	r3, r2
 80065e8:	d001      	beq.n	80065ee <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80065ea:	2301      	movs	r3, #1
 80065ec:	e02d      	b.n	800664a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	685a      	ldr	r2, [r3, #4]
 80065fa:	2380      	movs	r3, #128	; 0x80
 80065fc:	041b      	lsls	r3, r3, #16
 80065fe:	4013      	ands	r3, r2
 8006600:	d019      	beq.n	8006636 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006602:	f3ef 8310 	mrs	r3, PRIMASK
 8006606:	613b      	str	r3, [r7, #16]
  return(result);
 8006608:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800660a:	61fb      	str	r3, [r7, #28]
 800660c:	2301      	movs	r3, #1
 800660e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f383 8810 	msr	PRIMASK, r3
}
 8006616:	46c0      	nop			; (mov r8, r8)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	2180      	movs	r1, #128	; 0x80
 8006624:	04c9      	lsls	r1, r1, #19
 8006626:	430a      	orrs	r2, r1
 8006628:	601a      	str	r2, [r3, #0]
 800662a:	69fb      	ldr	r3, [r7, #28]
 800662c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f383 8810 	msr	PRIMASK, r3
}
 8006634:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006636:	1dbb      	adds	r3, r7, #6
 8006638:	881a      	ldrh	r2, [r3, #0]
 800663a:	68b9      	ldr	r1, [r7, #8]
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	0018      	movs	r0, r3
 8006640:	f000 fc82 	bl	8006f48 <UART_Start_Receive_IT>
 8006644:	0003      	movs	r3, r0
 8006646:	e000      	b.n	800664a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006648:	2302      	movs	r3, #2
  }
}
 800664a:	0018      	movs	r0, r3
 800664c:	46bd      	mov	sp, r7
 800664e:	b008      	add	sp, #32
 8006650:	bd80      	pop	{r7, pc}
	...

08006654 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b088      	sub	sp, #32
 8006658:	af00      	add	r7, sp, #0
 800665a:	60f8      	str	r0, [r7, #12]
 800665c:	60b9      	str	r1, [r7, #8]
 800665e:	1dbb      	adds	r3, r7, #6
 8006660:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2288      	movs	r2, #136	; 0x88
 8006666:	589b      	ldr	r3, [r3, r2]
 8006668:	2b20      	cmp	r3, #32
 800666a:	d000      	beq.n	800666e <HAL_UART_Transmit_DMA+0x1a>
 800666c:	e079      	b.n	8006762 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <HAL_UART_Transmit_DMA+0x28>
 8006674:	1dbb      	adds	r3, r7, #6
 8006676:	881b      	ldrh	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d101      	bne.n	8006680 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 800667c:	2301      	movs	r3, #1
 800667e:	e071      	b.n	8006764 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	689a      	ldr	r2, [r3, #8]
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	015b      	lsls	r3, r3, #5
 8006688:	429a      	cmp	r2, r3
 800668a:	d109      	bne.n	80066a0 <HAL_UART_Transmit_DMA+0x4c>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d105      	bne.n	80066a0 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	2201      	movs	r2, #1
 8006698:	4013      	ands	r3, r2
 800669a:	d001      	beq.n	80066a0 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 800669c:	2301      	movs	r3, #1
 800669e:	e061      	b.n	8006764 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	68ba      	ldr	r2, [r7, #8]
 80066a4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1dba      	adds	r2, r7, #6
 80066aa:	2154      	movs	r1, #84	; 0x54
 80066ac:	8812      	ldrh	r2, [r2, #0]
 80066ae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	1dba      	adds	r2, r7, #6
 80066b4:	2156      	movs	r1, #86	; 0x56
 80066b6:	8812      	ldrh	r2, [r2, #0]
 80066b8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2290      	movs	r2, #144	; 0x90
 80066be:	2100      	movs	r1, #0
 80066c0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2288      	movs	r2, #136	; 0x88
 80066c6:	2121      	movs	r1, #33	; 0x21
 80066c8:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d028      	beq.n	8006724 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066d6:	4a25      	ldr	r2, [pc, #148]	; (800676c <HAL_UART_Transmit_DMA+0x118>)
 80066d8:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066de:	4a24      	ldr	r2, [pc, #144]	; (8006770 <HAL_UART_Transmit_DMA+0x11c>)
 80066e0:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066e6:	4a23      	ldr	r2, [pc, #140]	; (8006774 <HAL_UART_Transmit_DMA+0x120>)
 80066e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80066ee:	2200      	movs	r2, #0
 80066f0:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066fa:	0019      	movs	r1, r3
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	3328      	adds	r3, #40	; 0x28
 8006702:	001a      	movs	r2, r3
 8006704:	1dbb      	adds	r3, r7, #6
 8006706:	881b      	ldrh	r3, [r3, #0]
 8006708:	f7fc ff18 	bl	800353c <HAL_DMA_Start_IT>
 800670c:	1e03      	subs	r3, r0, #0
 800670e:	d009      	beq.n	8006724 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	2290      	movs	r2, #144	; 0x90
 8006714:	2110      	movs	r1, #16
 8006716:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2288      	movs	r2, #136	; 0x88
 800671c:	2120      	movs	r1, #32
 800671e:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8006720:	2301      	movs	r3, #1
 8006722:	e01f      	b.n	8006764 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2240      	movs	r2, #64	; 0x40
 800672a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800672c:	f3ef 8310 	mrs	r3, PRIMASK
 8006730:	613b      	str	r3, [r7, #16]
  return(result);
 8006732:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006734:	61fb      	str	r3, [r7, #28]
 8006736:	2301      	movs	r3, #1
 8006738:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	f383 8810 	msr	PRIMASK, r3
}
 8006740:	46c0      	nop			; (mov r8, r8)
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	689a      	ldr	r2, [r3, #8]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	2180      	movs	r1, #128	; 0x80
 800674e:	430a      	orrs	r2, r1
 8006750:	609a      	str	r2, [r3, #8]
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	f383 8810 	msr	PRIMASK, r3
}
 800675c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800675e:	2300      	movs	r3, #0
 8006760:	e000      	b.n	8006764 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8006762:	2302      	movs	r3, #2
  }
}
 8006764:	0018      	movs	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	b008      	add	sp, #32
 800676a:	bd80      	pop	{r7, pc}
 800676c:	08007429 	.word	0x08007429
 8006770:	080074c1 	.word	0x080074c1
 8006774:	08007653 	.word	0x08007653

08006778 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b088      	sub	sp, #32
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	1dbb      	adds	r3, r7, #6
 8006784:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	228c      	movs	r2, #140	; 0x8c
 800678a:	589b      	ldr	r3, [r3, r2]
 800678c:	2b20      	cmp	r3, #32
 800678e:	d145      	bne.n	800681c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <HAL_UART_Receive_DMA+0x26>
 8006796:	1dbb      	adds	r3, r7, #6
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d101      	bne.n	80067a2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	e03d      	b.n	800681e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	689a      	ldr	r2, [r3, #8]
 80067a6:	2380      	movs	r3, #128	; 0x80
 80067a8:	015b      	lsls	r3, r3, #5
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d109      	bne.n	80067c2 <HAL_UART_Receive_DMA+0x4a>
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	691b      	ldr	r3, [r3, #16]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d105      	bne.n	80067c2 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	2201      	movs	r2, #1
 80067ba:	4013      	ands	r3, r2
 80067bc:	d001      	beq.n	80067c2 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e02d      	b.n	800681e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
 80067ce:	2380      	movs	r3, #128	; 0x80
 80067d0:	041b      	lsls	r3, r3, #16
 80067d2:	4013      	ands	r3, r2
 80067d4:	d019      	beq.n	800680a <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067d6:	f3ef 8310 	mrs	r3, PRIMASK
 80067da:	613b      	str	r3, [r7, #16]
  return(result);
 80067dc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80067de:	61fb      	str	r3, [r7, #28]
 80067e0:	2301      	movs	r3, #1
 80067e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e4:	697b      	ldr	r3, [r7, #20]
 80067e6:	f383 8810 	msr	PRIMASK, r3
}
 80067ea:	46c0      	nop			; (mov r8, r8)
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	68fb      	ldr	r3, [r7, #12]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2180      	movs	r1, #128	; 0x80
 80067f8:	04c9      	lsls	r1, r1, #19
 80067fa:	430a      	orrs	r2, r1
 80067fc:	601a      	str	r2, [r3, #0]
 80067fe:	69fb      	ldr	r3, [r7, #28]
 8006800:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006802:	69bb      	ldr	r3, [r7, #24]
 8006804:	f383 8810 	msr	PRIMASK, r3
}
 8006808:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800680a:	1dbb      	adds	r3, r7, #6
 800680c:	881a      	ldrh	r2, [r3, #0]
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	0018      	movs	r0, r3
 8006814:	f000 fcbc 	bl	8007190 <UART_Start_Receive_DMA>
 8006818:	0003      	movs	r3, r0
 800681a:	e000      	b.n	800681e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800681c:	2302      	movs	r3, #2
  }
}
 800681e:	0018      	movs	r0, r3
 8006820:	46bd      	mov	sp, r7
 8006822:	b008      	add	sp, #32
 8006824:	bd80      	pop	{r7, pc}

08006826 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800682e:	46c0      	nop			; (mov r8, r8)
 8006830:	46bd      	mov	sp, r7
 8006832:	b002      	add	sp, #8
 8006834:	bd80      	pop	{r7, pc}

08006836 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800683e:	46c0      	nop			; (mov r8, r8)
 8006840:	46bd      	mov	sp, r7
 8006842:	b002      	add	sp, #8
 8006844:	bd80      	pop	{r7, pc}

08006846 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006846:	b580      	push	{r7, lr}
 8006848:	b082      	sub	sp, #8
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800684e:	46c0      	nop			; (mov r8, r8)
 8006850:	46bd      	mov	sp, r7
 8006852:	b002      	add	sp, #8
 8006854:	bd80      	pop	{r7, pc}

08006856 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006856:	b580      	push	{r7, lr}
 8006858:	b082      	sub	sp, #8
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
 800685e:	000a      	movs	r2, r1
 8006860:	1cbb      	adds	r3, r7, #2
 8006862:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006864:	46c0      	nop			; (mov r8, r8)
 8006866:	46bd      	mov	sp, r7
 8006868:	b002      	add	sp, #8
 800686a:	bd80      	pop	{r7, pc}

0800686c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800686c:	b580      	push	{r7, lr}
 800686e:	b088      	sub	sp, #32
 8006870:	af00      	add	r7, sp, #0
 8006872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006874:	231a      	movs	r3, #26
 8006876:	18fb      	adds	r3, r7, r3
 8006878:	2200      	movs	r2, #0
 800687a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	689a      	ldr	r2, [r3, #8]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	691b      	ldr	r3, [r3, #16]
 8006884:	431a      	orrs	r2, r3
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	431a      	orrs	r2, r3
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	69db      	ldr	r3, [r3, #28]
 8006890:	4313      	orrs	r3, r2
 8006892:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4abc      	ldr	r2, [pc, #752]	; (8006b8c <UART_SetConfig+0x320>)
 800689c:	4013      	ands	r3, r2
 800689e:	0019      	movs	r1, r3
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	69fa      	ldr	r2, [r7, #28]
 80068a6:	430a      	orrs	r2, r1
 80068a8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	685b      	ldr	r3, [r3, #4]
 80068b0:	4ab7      	ldr	r2, [pc, #732]	; (8006b90 <UART_SetConfig+0x324>)
 80068b2:	4013      	ands	r3, r2
 80068b4:	0019      	movs	r1, r3
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	68da      	ldr	r2, [r3, #12]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	430a      	orrs	r2, r1
 80068c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	699b      	ldr	r3, [r3, #24]
 80068c6:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a1b      	ldr	r3, [r3, #32]
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	4313      	orrs	r3, r2
 80068d0:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	4aae      	ldr	r2, [pc, #696]	; (8006b94 <UART_SetConfig+0x328>)
 80068da:	4013      	ands	r3, r2
 80068dc:	0019      	movs	r1, r3
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	69fa      	ldr	r2, [r7, #28]
 80068e4:	430a      	orrs	r2, r1
 80068e6:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ee:	220f      	movs	r2, #15
 80068f0:	4393      	bics	r3, r2
 80068f2:	0019      	movs	r1, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	430a      	orrs	r2, r1
 80068fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4aa4      	ldr	r2, [pc, #656]	; (8006b98 <UART_SetConfig+0x32c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d127      	bne.n	800695a <UART_SetConfig+0xee>
 800690a:	4ba4      	ldr	r3, [pc, #656]	; (8006b9c <UART_SetConfig+0x330>)
 800690c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800690e:	2203      	movs	r2, #3
 8006910:	4013      	ands	r3, r2
 8006912:	2b03      	cmp	r3, #3
 8006914:	d017      	beq.n	8006946 <UART_SetConfig+0xda>
 8006916:	d81b      	bhi.n	8006950 <UART_SetConfig+0xe4>
 8006918:	2b02      	cmp	r3, #2
 800691a:	d00a      	beq.n	8006932 <UART_SetConfig+0xc6>
 800691c:	d818      	bhi.n	8006950 <UART_SetConfig+0xe4>
 800691e:	2b00      	cmp	r3, #0
 8006920:	d002      	beq.n	8006928 <UART_SetConfig+0xbc>
 8006922:	2b01      	cmp	r3, #1
 8006924:	d00a      	beq.n	800693c <UART_SetConfig+0xd0>
 8006926:	e013      	b.n	8006950 <UART_SetConfig+0xe4>
 8006928:	231b      	movs	r3, #27
 800692a:	18fb      	adds	r3, r7, r3
 800692c:	2200      	movs	r2, #0
 800692e:	701a      	strb	r2, [r3, #0]
 8006930:	e058      	b.n	80069e4 <UART_SetConfig+0x178>
 8006932:	231b      	movs	r3, #27
 8006934:	18fb      	adds	r3, r7, r3
 8006936:	2202      	movs	r2, #2
 8006938:	701a      	strb	r2, [r3, #0]
 800693a:	e053      	b.n	80069e4 <UART_SetConfig+0x178>
 800693c:	231b      	movs	r3, #27
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	2204      	movs	r2, #4
 8006942:	701a      	strb	r2, [r3, #0]
 8006944:	e04e      	b.n	80069e4 <UART_SetConfig+0x178>
 8006946:	231b      	movs	r3, #27
 8006948:	18fb      	adds	r3, r7, r3
 800694a:	2208      	movs	r2, #8
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	e049      	b.n	80069e4 <UART_SetConfig+0x178>
 8006950:	231b      	movs	r3, #27
 8006952:	18fb      	adds	r3, r7, r3
 8006954:	2210      	movs	r2, #16
 8006956:	701a      	strb	r2, [r3, #0]
 8006958:	e044      	b.n	80069e4 <UART_SetConfig+0x178>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a90      	ldr	r2, [pc, #576]	; (8006ba0 <UART_SetConfig+0x334>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d127      	bne.n	80069b4 <UART_SetConfig+0x148>
 8006964:	4b8d      	ldr	r3, [pc, #564]	; (8006b9c <UART_SetConfig+0x330>)
 8006966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006968:	220c      	movs	r2, #12
 800696a:	4013      	ands	r3, r2
 800696c:	2b0c      	cmp	r3, #12
 800696e:	d017      	beq.n	80069a0 <UART_SetConfig+0x134>
 8006970:	d81b      	bhi.n	80069aa <UART_SetConfig+0x13e>
 8006972:	2b08      	cmp	r3, #8
 8006974:	d00a      	beq.n	800698c <UART_SetConfig+0x120>
 8006976:	d818      	bhi.n	80069aa <UART_SetConfig+0x13e>
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <UART_SetConfig+0x116>
 800697c:	2b04      	cmp	r3, #4
 800697e:	d00a      	beq.n	8006996 <UART_SetConfig+0x12a>
 8006980:	e013      	b.n	80069aa <UART_SetConfig+0x13e>
 8006982:	231b      	movs	r3, #27
 8006984:	18fb      	adds	r3, r7, r3
 8006986:	2200      	movs	r2, #0
 8006988:	701a      	strb	r2, [r3, #0]
 800698a:	e02b      	b.n	80069e4 <UART_SetConfig+0x178>
 800698c:	231b      	movs	r3, #27
 800698e:	18fb      	adds	r3, r7, r3
 8006990:	2202      	movs	r2, #2
 8006992:	701a      	strb	r2, [r3, #0]
 8006994:	e026      	b.n	80069e4 <UART_SetConfig+0x178>
 8006996:	231b      	movs	r3, #27
 8006998:	18fb      	adds	r3, r7, r3
 800699a:	2204      	movs	r2, #4
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e021      	b.n	80069e4 <UART_SetConfig+0x178>
 80069a0:	231b      	movs	r3, #27
 80069a2:	18fb      	adds	r3, r7, r3
 80069a4:	2208      	movs	r2, #8
 80069a6:	701a      	strb	r2, [r3, #0]
 80069a8:	e01c      	b.n	80069e4 <UART_SetConfig+0x178>
 80069aa:	231b      	movs	r3, #27
 80069ac:	18fb      	adds	r3, r7, r3
 80069ae:	2210      	movs	r2, #16
 80069b0:	701a      	strb	r2, [r3, #0]
 80069b2:	e017      	b.n	80069e4 <UART_SetConfig+0x178>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4a7a      	ldr	r2, [pc, #488]	; (8006ba4 <UART_SetConfig+0x338>)
 80069ba:	4293      	cmp	r3, r2
 80069bc:	d104      	bne.n	80069c8 <UART_SetConfig+0x15c>
 80069be:	231b      	movs	r3, #27
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	e00d      	b.n	80069e4 <UART_SetConfig+0x178>
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a76      	ldr	r2, [pc, #472]	; (8006ba8 <UART_SetConfig+0x33c>)
 80069ce:	4293      	cmp	r3, r2
 80069d0:	d104      	bne.n	80069dc <UART_SetConfig+0x170>
 80069d2:	231b      	movs	r3, #27
 80069d4:	18fb      	adds	r3, r7, r3
 80069d6:	2200      	movs	r2, #0
 80069d8:	701a      	strb	r2, [r3, #0]
 80069da:	e003      	b.n	80069e4 <UART_SetConfig+0x178>
 80069dc:	231b      	movs	r3, #27
 80069de:	18fb      	adds	r3, r7, r3
 80069e0:	2210      	movs	r2, #16
 80069e2:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	69da      	ldr	r2, [r3, #28]
 80069e8:	2380      	movs	r3, #128	; 0x80
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d000      	beq.n	80069f2 <UART_SetConfig+0x186>
 80069f0:	e065      	b.n	8006abe <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80069f2:	231b      	movs	r3, #27
 80069f4:	18fb      	adds	r3, r7, r3
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	2b08      	cmp	r3, #8
 80069fa:	d015      	beq.n	8006a28 <UART_SetConfig+0x1bc>
 80069fc:	dc18      	bgt.n	8006a30 <UART_SetConfig+0x1c4>
 80069fe:	2b04      	cmp	r3, #4
 8006a00:	d00d      	beq.n	8006a1e <UART_SetConfig+0x1b2>
 8006a02:	dc15      	bgt.n	8006a30 <UART_SetConfig+0x1c4>
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d002      	beq.n	8006a0e <UART_SetConfig+0x1a2>
 8006a08:	2b02      	cmp	r3, #2
 8006a0a:	d005      	beq.n	8006a18 <UART_SetConfig+0x1ac>
 8006a0c:	e010      	b.n	8006a30 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a0e:	f7fd fe1b 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8006a12:	0003      	movs	r3, r0
 8006a14:	617b      	str	r3, [r7, #20]
        break;
 8006a16:	e012      	b.n	8006a3e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a18:	4b64      	ldr	r3, [pc, #400]	; (8006bac <UART_SetConfig+0x340>)
 8006a1a:	617b      	str	r3, [r7, #20]
        break;
 8006a1c:	e00f      	b.n	8006a3e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a1e:	f7fd fd89 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8006a22:	0003      	movs	r3, r0
 8006a24:	617b      	str	r3, [r7, #20]
        break;
 8006a26:	e00a      	b.n	8006a3e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a28:	2380      	movs	r3, #128	; 0x80
 8006a2a:	021b      	lsls	r3, r3, #8
 8006a2c:	617b      	str	r3, [r7, #20]
        break;
 8006a2e:	e006      	b.n	8006a3e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006a30:	2300      	movs	r3, #0
 8006a32:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a34:	231a      	movs	r3, #26
 8006a36:	18fb      	adds	r3, r7, r3
 8006a38:	2201      	movs	r2, #1
 8006a3a:	701a      	strb	r2, [r3, #0]
        break;
 8006a3c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d100      	bne.n	8006a46 <UART_SetConfig+0x1da>
 8006a44:	e08d      	b.n	8006b62 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a4a:	4b59      	ldr	r3, [pc, #356]	; (8006bb0 <UART_SetConfig+0x344>)
 8006a4c:	0052      	lsls	r2, r2, #1
 8006a4e:	5ad3      	ldrh	r3, [r2, r3]
 8006a50:	0019      	movs	r1, r3
 8006a52:	6978      	ldr	r0, [r7, #20]
 8006a54:	f7f9 fb62 	bl	800011c <__udivsi3>
 8006a58:	0003      	movs	r3, r0
 8006a5a:	005a      	lsls	r2, r3, #1
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	685b      	ldr	r3, [r3, #4]
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	18d2      	adds	r2, r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	685b      	ldr	r3, [r3, #4]
 8006a68:	0019      	movs	r1, r3
 8006a6a:	0010      	movs	r0, r2
 8006a6c:	f7f9 fb56 	bl	800011c <__udivsi3>
 8006a70:	0003      	movs	r3, r0
 8006a72:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2b0f      	cmp	r3, #15
 8006a78:	d91c      	bls.n	8006ab4 <UART_SetConfig+0x248>
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	2380      	movs	r3, #128	; 0x80
 8006a7e:	025b      	lsls	r3, r3, #9
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d217      	bcs.n	8006ab4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	b29a      	uxth	r2, r3
 8006a88:	200e      	movs	r0, #14
 8006a8a:	183b      	adds	r3, r7, r0
 8006a8c:	210f      	movs	r1, #15
 8006a8e:	438a      	bics	r2, r1
 8006a90:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	085b      	lsrs	r3, r3, #1
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2207      	movs	r2, #7
 8006a9a:	4013      	ands	r3, r2
 8006a9c:	b299      	uxth	r1, r3
 8006a9e:	183b      	adds	r3, r7, r0
 8006aa0:	183a      	adds	r2, r7, r0
 8006aa2:	8812      	ldrh	r2, [r2, #0]
 8006aa4:	430a      	orrs	r2, r1
 8006aa6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	183a      	adds	r2, r7, r0
 8006aae:	8812      	ldrh	r2, [r2, #0]
 8006ab0:	60da      	str	r2, [r3, #12]
 8006ab2:	e056      	b.n	8006b62 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006ab4:	231a      	movs	r3, #26
 8006ab6:	18fb      	adds	r3, r7, r3
 8006ab8:	2201      	movs	r2, #1
 8006aba:	701a      	strb	r2, [r3, #0]
 8006abc:	e051      	b.n	8006b62 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006abe:	231b      	movs	r3, #27
 8006ac0:	18fb      	adds	r3, r7, r3
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b08      	cmp	r3, #8
 8006ac6:	d015      	beq.n	8006af4 <UART_SetConfig+0x288>
 8006ac8:	dc18      	bgt.n	8006afc <UART_SetConfig+0x290>
 8006aca:	2b04      	cmp	r3, #4
 8006acc:	d00d      	beq.n	8006aea <UART_SetConfig+0x27e>
 8006ace:	dc15      	bgt.n	8006afc <UART_SetConfig+0x290>
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d002      	beq.n	8006ada <UART_SetConfig+0x26e>
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d005      	beq.n	8006ae4 <UART_SetConfig+0x278>
 8006ad8:	e010      	b.n	8006afc <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ada:	f7fd fdb5 	bl	8004648 <HAL_RCC_GetPCLK1Freq>
 8006ade:	0003      	movs	r3, r0
 8006ae0:	617b      	str	r3, [r7, #20]
        break;
 8006ae2:	e012      	b.n	8006b0a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ae4:	4b31      	ldr	r3, [pc, #196]	; (8006bac <UART_SetConfig+0x340>)
 8006ae6:	617b      	str	r3, [r7, #20]
        break;
 8006ae8:	e00f      	b.n	8006b0a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006aea:	f7fd fd23 	bl	8004534 <HAL_RCC_GetSysClockFreq>
 8006aee:	0003      	movs	r3, r0
 8006af0:	617b      	str	r3, [r7, #20]
        break;
 8006af2:	e00a      	b.n	8006b0a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006af4:	2380      	movs	r3, #128	; 0x80
 8006af6:	021b      	lsls	r3, r3, #8
 8006af8:	617b      	str	r3, [r7, #20]
        break;
 8006afa:	e006      	b.n	8006b0a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006afc:	2300      	movs	r3, #0
 8006afe:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006b00:	231a      	movs	r3, #26
 8006b02:	18fb      	adds	r3, r7, r3
 8006b04:	2201      	movs	r2, #1
 8006b06:	701a      	strb	r2, [r3, #0]
        break;
 8006b08:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d028      	beq.n	8006b62 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b14:	4b26      	ldr	r3, [pc, #152]	; (8006bb0 <UART_SetConfig+0x344>)
 8006b16:	0052      	lsls	r2, r2, #1
 8006b18:	5ad3      	ldrh	r3, [r2, r3]
 8006b1a:	0019      	movs	r1, r3
 8006b1c:	6978      	ldr	r0, [r7, #20]
 8006b1e:	f7f9 fafd 	bl	800011c <__udivsi3>
 8006b22:	0003      	movs	r3, r0
 8006b24:	001a      	movs	r2, r3
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	685b      	ldr	r3, [r3, #4]
 8006b2a:	085b      	lsrs	r3, r3, #1
 8006b2c:	18d2      	adds	r2, r2, r3
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	0019      	movs	r1, r3
 8006b34:	0010      	movs	r0, r2
 8006b36:	f7f9 faf1 	bl	800011c <__udivsi3>
 8006b3a:	0003      	movs	r3, r0
 8006b3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	2b0f      	cmp	r3, #15
 8006b42:	d90a      	bls.n	8006b5a <UART_SetConfig+0x2ee>
 8006b44:	693a      	ldr	r2, [r7, #16]
 8006b46:	2380      	movs	r3, #128	; 0x80
 8006b48:	025b      	lsls	r3, r3, #9
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d205      	bcs.n	8006b5a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006b4e:	693b      	ldr	r3, [r7, #16]
 8006b50:	b29a      	uxth	r2, r3
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	60da      	str	r2, [r3, #12]
 8006b58:	e003      	b.n	8006b62 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006b5a:	231a      	movs	r3, #26
 8006b5c:	18fb      	adds	r3, r7, r3
 8006b5e:	2201      	movs	r2, #1
 8006b60:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	226a      	movs	r2, #106	; 0x6a
 8006b66:	2101      	movs	r1, #1
 8006b68:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2268      	movs	r2, #104	; 0x68
 8006b6e:	2101      	movs	r1, #1
 8006b70:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006b7e:	231a      	movs	r3, #26
 8006b80:	18fb      	adds	r3, r7, r3
 8006b82:	781b      	ldrb	r3, [r3, #0]
}
 8006b84:	0018      	movs	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	b008      	add	sp, #32
 8006b8a:	bd80      	pop	{r7, pc}
 8006b8c:	cfff69f3 	.word	0xcfff69f3
 8006b90:	ffffcfff 	.word	0xffffcfff
 8006b94:	11fff4ff 	.word	0x11fff4ff
 8006b98:	40013800 	.word	0x40013800
 8006b9c:	40021000 	.word	0x40021000
 8006ba0:	40004400 	.word	0x40004400
 8006ba4:	40004800 	.word	0x40004800
 8006ba8:	40004c00 	.word	0x40004c00
 8006bac:	00f42400 	.word	0x00f42400
 8006bb0:	0800c628 	.word	0x0800c628

08006bb4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	2201      	movs	r2, #1
 8006bc2:	4013      	ands	r3, r2
 8006bc4:	d00b      	beq.n	8006bde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	4a4a      	ldr	r2, [pc, #296]	; (8006cf8 <UART_AdvFeatureConfig+0x144>)
 8006bce:	4013      	ands	r3, r2
 8006bd0:	0019      	movs	r1, r3
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006be2:	2202      	movs	r2, #2
 8006be4:	4013      	ands	r3, r2
 8006be6:	d00b      	beq.n	8006c00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	4a43      	ldr	r2, [pc, #268]	; (8006cfc <UART_AdvFeatureConfig+0x148>)
 8006bf0:	4013      	ands	r3, r2
 8006bf2:	0019      	movs	r1, r3
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	430a      	orrs	r2, r1
 8006bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c04:	2204      	movs	r2, #4
 8006c06:	4013      	ands	r3, r2
 8006c08:	d00b      	beq.n	8006c22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	4a3b      	ldr	r2, [pc, #236]	; (8006d00 <UART_AdvFeatureConfig+0x14c>)
 8006c12:	4013      	ands	r3, r2
 8006c14:	0019      	movs	r1, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	430a      	orrs	r2, r1
 8006c20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c26:	2208      	movs	r2, #8
 8006c28:	4013      	ands	r3, r2
 8006c2a:	d00b      	beq.n	8006c44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	685b      	ldr	r3, [r3, #4]
 8006c32:	4a34      	ldr	r2, [pc, #208]	; (8006d04 <UART_AdvFeatureConfig+0x150>)
 8006c34:	4013      	ands	r3, r2
 8006c36:	0019      	movs	r1, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	430a      	orrs	r2, r1
 8006c42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	2210      	movs	r2, #16
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	d00b      	beq.n	8006c66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	4a2c      	ldr	r2, [pc, #176]	; (8006d08 <UART_AdvFeatureConfig+0x154>)
 8006c56:	4013      	ands	r3, r2
 8006c58:	0019      	movs	r1, r3
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	430a      	orrs	r2, r1
 8006c64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	d00b      	beq.n	8006c88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	4a25      	ldr	r2, [pc, #148]	; (8006d0c <UART_AdvFeatureConfig+0x158>)
 8006c78:	4013      	ands	r3, r2
 8006c7a:	0019      	movs	r1, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	430a      	orrs	r2, r1
 8006c86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	2240      	movs	r2, #64	; 0x40
 8006c8e:	4013      	ands	r3, r2
 8006c90:	d01d      	beq.n	8006cce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	4a1d      	ldr	r2, [pc, #116]	; (8006d10 <UART_AdvFeatureConfig+0x15c>)
 8006c9a:	4013      	ands	r3, r2
 8006c9c:	0019      	movs	r1, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	430a      	orrs	r2, r1
 8006ca8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cae:	2380      	movs	r3, #128	; 0x80
 8006cb0:	035b      	lsls	r3, r3, #13
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d10b      	bne.n	8006cce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	4a15      	ldr	r2, [pc, #84]	; (8006d14 <UART_AdvFeatureConfig+0x160>)
 8006cbe:	4013      	ands	r3, r2
 8006cc0:	0019      	movs	r1, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	430a      	orrs	r2, r1
 8006ccc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cd2:	2280      	movs	r2, #128	; 0x80
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d00b      	beq.n	8006cf0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	4a0e      	ldr	r2, [pc, #56]	; (8006d18 <UART_AdvFeatureConfig+0x164>)
 8006ce0:	4013      	ands	r3, r2
 8006ce2:	0019      	movs	r1, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	430a      	orrs	r2, r1
 8006cee:	605a      	str	r2, [r3, #4]
  }
}
 8006cf0:	46c0      	nop			; (mov r8, r8)
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	b002      	add	sp, #8
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	fffdffff 	.word	0xfffdffff
 8006cfc:	fffeffff 	.word	0xfffeffff
 8006d00:	fffbffff 	.word	0xfffbffff
 8006d04:	ffff7fff 	.word	0xffff7fff
 8006d08:	ffffefff 	.word	0xffffefff
 8006d0c:	ffffdfff 	.word	0xffffdfff
 8006d10:	ffefffff 	.word	0xffefffff
 8006d14:	ff9fffff 	.word	0xff9fffff
 8006d18:	fff7ffff 	.word	0xfff7ffff

08006d1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d1c:	b580      	push	{r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2290      	movs	r2, #144	; 0x90
 8006d28:	2100      	movs	r1, #0
 8006d2a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d2c:	f7fb fe0c 	bl	8002948 <HAL_GetTick>
 8006d30:	0003      	movs	r3, r0
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	2208      	movs	r2, #8
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	2b08      	cmp	r3, #8
 8006d40:	d10c      	bne.n	8006d5c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	2280      	movs	r2, #128	; 0x80
 8006d46:	0391      	lsls	r1, r2, #14
 8006d48:	6878      	ldr	r0, [r7, #4]
 8006d4a:	4a1a      	ldr	r2, [pc, #104]	; (8006db4 <UART_CheckIdleState+0x98>)
 8006d4c:	9200      	str	r2, [sp, #0]
 8006d4e:	2200      	movs	r2, #0
 8006d50:	f000 f832 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 8006d54:	1e03      	subs	r3, r0, #0
 8006d56:	d001      	beq.n	8006d5c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d58:	2303      	movs	r3, #3
 8006d5a:	e026      	b.n	8006daa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2204      	movs	r2, #4
 8006d64:	4013      	ands	r3, r2
 8006d66:	2b04      	cmp	r3, #4
 8006d68:	d10c      	bne.n	8006d84 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2280      	movs	r2, #128	; 0x80
 8006d6e:	03d1      	lsls	r1, r2, #15
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	4a10      	ldr	r2, [pc, #64]	; (8006db4 <UART_CheckIdleState+0x98>)
 8006d74:	9200      	str	r2, [sp, #0]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f000 f81e 	bl	8006db8 <UART_WaitOnFlagUntilTimeout>
 8006d7c:	1e03      	subs	r3, r0, #0
 8006d7e:	d001      	beq.n	8006d84 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d80:	2303      	movs	r3, #3
 8006d82:	e012      	b.n	8006daa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	2288      	movs	r2, #136	; 0x88
 8006d88:	2120      	movs	r1, #32
 8006d8a:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	228c      	movs	r2, #140	; 0x8c
 8006d90:	2120      	movs	r1, #32
 8006d92:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	2200      	movs	r2, #0
 8006d98:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2284      	movs	r2, #132	; 0x84
 8006da4:	2100      	movs	r1, #0
 8006da6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	0018      	movs	r0, r3
 8006dac:	46bd      	mov	sp, r7
 8006dae:	b004      	add	sp, #16
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	46c0      	nop			; (mov r8, r8)
 8006db4:	01ffffff 	.word	0x01ffffff

08006db8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b094      	sub	sp, #80	; 0x50
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	603b      	str	r3, [r7, #0]
 8006dc4:	1dfb      	adds	r3, r7, #7
 8006dc6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dc8:	e0a7      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006dcc:	3301      	adds	r3, #1
 8006dce:	d100      	bne.n	8006dd2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006dd0:	e0a3      	b.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd2:	f7fb fdb9 	bl	8002948 <HAL_GetTick>
 8006dd6:	0002      	movs	r2, r0
 8006dd8:	683b      	ldr	r3, [r7, #0]
 8006dda:	1ad3      	subs	r3, r2, r3
 8006ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006dde:	429a      	cmp	r2, r3
 8006de0:	d302      	bcc.n	8006de8 <UART_WaitOnFlagUntilTimeout+0x30>
 8006de2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d13f      	bne.n	8006e68 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006de8:	f3ef 8310 	mrs	r3, PRIMASK
 8006dec:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006df0:	647b      	str	r3, [r7, #68]	; 0x44
 8006df2:	2301      	movs	r3, #1
 8006df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df8:	f383 8810 	msr	PRIMASK, r3
}
 8006dfc:	46c0      	nop			; (mov r8, r8)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	494e      	ldr	r1, [pc, #312]	; (8006f44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006e0a:	400a      	ands	r2, r1
 8006e0c:	601a      	str	r2, [r3, #0]
 8006e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e10:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e14:	f383 8810 	msr	PRIMASK, r3
}
 8006e18:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006e1e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006e20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e22:	643b      	str	r3, [r7, #64]	; 0x40
 8006e24:	2301      	movs	r3, #1
 8006e26:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e2a:	f383 8810 	msr	PRIMASK, r3
}
 8006e2e:	46c0      	nop			; (mov r8, r8)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689a      	ldr	r2, [r3, #8]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	438a      	bics	r2, r1
 8006e3e:	609a      	str	r2, [r3, #8]
 8006e40:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e42:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e46:	f383 8810 	msr	PRIMASK, r3
}
 8006e4a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	2288      	movs	r2, #136	; 0x88
 8006e50:	2120      	movs	r1, #32
 8006e52:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	228c      	movs	r2, #140	; 0x8c
 8006e58:	2120      	movs	r1, #32
 8006e5a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	2284      	movs	r2, #132	; 0x84
 8006e60:	2100      	movs	r1, #0
 8006e62:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e069      	b.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	2204      	movs	r2, #4
 8006e70:	4013      	ands	r3, r2
 8006e72:	d052      	beq.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	69da      	ldr	r2, [r3, #28]
 8006e7a:	2380      	movs	r3, #128	; 0x80
 8006e7c:	011b      	lsls	r3, r3, #4
 8006e7e:	401a      	ands	r2, r3
 8006e80:	2380      	movs	r3, #128	; 0x80
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	429a      	cmp	r2, r3
 8006e86:	d148      	bne.n	8006f1a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2280      	movs	r2, #128	; 0x80
 8006e8e:	0112      	lsls	r2, r2, #4
 8006e90:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e92:	f3ef 8310 	mrs	r3, PRIMASK
 8006e96:	613b      	str	r3, [r7, #16]
  return(result);
 8006e98:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006e9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f383 8810 	msr	PRIMASK, r3
}
 8006ea6:	46c0      	nop			; (mov r8, r8)
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	681a      	ldr	r2, [r3, #0]
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4924      	ldr	r1, [pc, #144]	; (8006f44 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006eb4:	400a      	ands	r2, r1
 8006eb6:	601a      	str	r2, [r3, #0]
 8006eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eba:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	f383 8810 	msr	PRIMASK, r3
}
 8006ec2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec8:	61fb      	str	r3, [r7, #28]
  return(result);
 8006eca:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ece:	2301      	movs	r3, #1
 8006ed0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed2:	6a3b      	ldr	r3, [r7, #32]
 8006ed4:	f383 8810 	msr	PRIMASK, r3
}
 8006ed8:	46c0      	nop			; (mov r8, r8)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	689a      	ldr	r2, [r3, #8]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	438a      	bics	r2, r1
 8006ee8:	609a      	str	r2, [r3, #8]
 8006eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006eec:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	f383 8810 	msr	PRIMASK, r3
}
 8006ef4:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	2288      	movs	r2, #136	; 0x88
 8006efa:	2120      	movs	r1, #32
 8006efc:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	228c      	movs	r2, #140	; 0x8c
 8006f02:	2120      	movs	r1, #32
 8006f04:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	2290      	movs	r2, #144	; 0x90
 8006f0a:	2120      	movs	r1, #32
 8006f0c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	2284      	movs	r2, #132	; 0x84
 8006f12:	2100      	movs	r1, #0
 8006f14:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006f16:	2303      	movs	r3, #3
 8006f18:	e010      	b.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	69db      	ldr	r3, [r3, #28]
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	4013      	ands	r3, r2
 8006f24:	68ba      	ldr	r2, [r7, #8]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	425a      	negs	r2, r3
 8006f2a:	4153      	adcs	r3, r2
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	001a      	movs	r2, r3
 8006f30:	1dfb      	adds	r3, r7, #7
 8006f32:	781b      	ldrb	r3, [r3, #0]
 8006f34:	429a      	cmp	r2, r3
 8006f36:	d100      	bne.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x182>
 8006f38:	e747      	b.n	8006dca <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f3a:	2300      	movs	r3, #0
}
 8006f3c:	0018      	movs	r0, r3
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	b014      	add	sp, #80	; 0x50
 8006f42:	bd80      	pop	{r7, pc}
 8006f44:	fffffe5f 	.word	0xfffffe5f

08006f48 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	b098      	sub	sp, #96	; 0x60
 8006f4c:	af00      	add	r7, sp, #0
 8006f4e:	60f8      	str	r0, [r7, #12]
 8006f50:	60b9      	str	r1, [r7, #8]
 8006f52:	1dbb      	adds	r3, r7, #6
 8006f54:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	68ba      	ldr	r2, [r7, #8]
 8006f5a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	1dba      	adds	r2, r7, #6
 8006f60:	215c      	movs	r1, #92	; 0x5c
 8006f62:	8812      	ldrh	r2, [r2, #0]
 8006f64:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	1dba      	adds	r2, r7, #6
 8006f6a:	215e      	movs	r1, #94	; 0x5e
 8006f6c:	8812      	ldrh	r2, [r2, #0]
 8006f6e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	2200      	movs	r2, #0
 8006f74:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	689a      	ldr	r2, [r3, #8]
 8006f7a:	2380      	movs	r3, #128	; 0x80
 8006f7c:	015b      	lsls	r3, r3, #5
 8006f7e:	429a      	cmp	r2, r3
 8006f80:	d10d      	bne.n	8006f9e <UART_Start_Receive_IT+0x56>
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d104      	bne.n	8006f94 <UART_Start_Receive_IT+0x4c>
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2260      	movs	r2, #96	; 0x60
 8006f8e:	497b      	ldr	r1, [pc, #492]	; (800717c <UART_Start_Receive_IT+0x234>)
 8006f90:	5299      	strh	r1, [r3, r2]
 8006f92:	e02e      	b.n	8006ff2 <UART_Start_Receive_IT+0xaa>
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2260      	movs	r2, #96	; 0x60
 8006f98:	21ff      	movs	r1, #255	; 0xff
 8006f9a:	5299      	strh	r1, [r3, r2]
 8006f9c:	e029      	b.n	8006ff2 <UART_Start_Receive_IT+0xaa>
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	689b      	ldr	r3, [r3, #8]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10d      	bne.n	8006fc2 <UART_Start_Receive_IT+0x7a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d104      	bne.n	8006fb8 <UART_Start_Receive_IT+0x70>
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2260      	movs	r2, #96	; 0x60
 8006fb2:	21ff      	movs	r1, #255	; 0xff
 8006fb4:	5299      	strh	r1, [r3, r2]
 8006fb6:	e01c      	b.n	8006ff2 <UART_Start_Receive_IT+0xaa>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2260      	movs	r2, #96	; 0x60
 8006fbc:	217f      	movs	r1, #127	; 0x7f
 8006fbe:	5299      	strh	r1, [r3, r2]
 8006fc0:	e017      	b.n	8006ff2 <UART_Start_Receive_IT+0xaa>
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	2380      	movs	r3, #128	; 0x80
 8006fc8:	055b      	lsls	r3, r3, #21
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d10d      	bne.n	8006fea <UART_Start_Receive_IT+0xa2>
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d104      	bne.n	8006fe0 <UART_Start_Receive_IT+0x98>
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	2260      	movs	r2, #96	; 0x60
 8006fda:	217f      	movs	r1, #127	; 0x7f
 8006fdc:	5299      	strh	r1, [r3, r2]
 8006fde:	e008      	b.n	8006ff2 <UART_Start_Receive_IT+0xaa>
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2260      	movs	r2, #96	; 0x60
 8006fe4:	213f      	movs	r1, #63	; 0x3f
 8006fe6:	5299      	strh	r1, [r3, r2]
 8006fe8:	e003      	b.n	8006ff2 <UART_Start_Receive_IT+0xaa>
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2260      	movs	r2, #96	; 0x60
 8006fee:	2100      	movs	r1, #0
 8006ff0:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2290      	movs	r2, #144	; 0x90
 8006ff6:	2100      	movs	r1, #0
 8006ff8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	228c      	movs	r2, #140	; 0x8c
 8006ffe:	2122      	movs	r1, #34	; 0x22
 8007000:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007002:	f3ef 8310 	mrs	r3, PRIMASK
 8007006:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007008:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800700a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800700c:	2301      	movs	r3, #1
 800700e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007012:	f383 8810 	msr	PRIMASK, r3
}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	2101      	movs	r1, #1
 8007024:	430a      	orrs	r2, r1
 8007026:	609a      	str	r2, [r3, #8]
 8007028:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800702a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800702c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800702e:	f383 8810 	msr	PRIMASK, r3
}
 8007032:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007038:	2380      	movs	r3, #128	; 0x80
 800703a:	059b      	lsls	r3, r3, #22
 800703c:	429a      	cmp	r2, r3
 800703e:	d150      	bne.n	80070e2 <UART_Start_Receive_IT+0x19a>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2268      	movs	r2, #104	; 0x68
 8007044:	5a9b      	ldrh	r3, [r3, r2]
 8007046:	1dba      	adds	r2, r7, #6
 8007048:	8812      	ldrh	r2, [r2, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d349      	bcc.n	80070e2 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	689a      	ldr	r2, [r3, #8]
 8007052:	2380      	movs	r3, #128	; 0x80
 8007054:	015b      	lsls	r3, r3, #5
 8007056:	429a      	cmp	r2, r3
 8007058:	d107      	bne.n	800706a <UART_Start_Receive_IT+0x122>
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	691b      	ldr	r3, [r3, #16]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d103      	bne.n	800706a <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	4a46      	ldr	r2, [pc, #280]	; (8007180 <UART_Start_Receive_IT+0x238>)
 8007066:	675a      	str	r2, [r3, #116]	; 0x74
 8007068:	e002      	b.n	8007070 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	4a45      	ldr	r2, [pc, #276]	; (8007184 <UART_Start_Receive_IT+0x23c>)
 800706e:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	691b      	ldr	r3, [r3, #16]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d019      	beq.n	80070ac <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007078:	f3ef 8310 	mrs	r3, PRIMASK
 800707c:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800707e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007080:	65bb      	str	r3, [r7, #88]	; 0x58
 8007082:	2301      	movs	r3, #1
 8007084:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007088:	f383 8810 	msr	PRIMASK, r3
}
 800708c:	46c0      	nop			; (mov r8, r8)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	2180      	movs	r1, #128	; 0x80
 800709a:	0049      	lsls	r1, r1, #1
 800709c:	430a      	orrs	r2, r1
 800709e:	601a      	str	r2, [r3, #0]
 80070a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80070a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80070a6:	f383 8810 	msr	PRIMASK, r3
}
 80070aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070ac:	f3ef 8310 	mrs	r3, PRIMASK
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070b4:	657b      	str	r3, [r7, #84]	; 0x54
 80070b6:	2301      	movs	r3, #1
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070bc:	f383 8810 	msr	PRIMASK, r3
}
 80070c0:	46c0      	nop			; (mov r8, r8)
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	689a      	ldr	r2, [r3, #8]
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2180      	movs	r1, #128	; 0x80
 80070ce:	0549      	lsls	r1, r1, #21
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
 80070d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80070d6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070da:	f383 8810 	msr	PRIMASK, r3
}
 80070de:	46c0      	nop			; (mov r8, r8)
 80070e0:	e047      	b.n	8007172 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	689a      	ldr	r2, [r3, #8]
 80070e6:	2380      	movs	r3, #128	; 0x80
 80070e8:	015b      	lsls	r3, r3, #5
 80070ea:	429a      	cmp	r2, r3
 80070ec:	d107      	bne.n	80070fe <UART_Start_Receive_IT+0x1b6>
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	691b      	ldr	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d103      	bne.n	80070fe <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	4a23      	ldr	r2, [pc, #140]	; (8007188 <UART_Start_Receive_IT+0x240>)
 80070fa:	675a      	str	r2, [r3, #116]	; 0x74
 80070fc:	e002      	b.n	8007104 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	4a22      	ldr	r2, [pc, #136]	; (800718c <UART_Start_Receive_IT+0x244>)
 8007102:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	691b      	ldr	r3, [r3, #16]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d019      	beq.n	8007140 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800710c:	f3ef 8310 	mrs	r3, PRIMASK
 8007110:	61fb      	str	r3, [r7, #28]
  return(result);
 8007112:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007114:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007116:	2301      	movs	r3, #1
 8007118:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	f383 8810 	msr	PRIMASK, r3
}
 8007120:	46c0      	nop			; (mov r8, r8)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2190      	movs	r1, #144	; 0x90
 800712e:	0049      	lsls	r1, r1, #1
 8007130:	430a      	orrs	r2, r1
 8007132:	601a      	str	r2, [r3, #0]
 8007134:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007138:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800713a:	f383 8810 	msr	PRIMASK, r3
}
 800713e:	e018      	b.n	8007172 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007140:	f3ef 8310 	mrs	r3, PRIMASK
 8007144:	613b      	str	r3, [r7, #16]
  return(result);
 8007146:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007148:	653b      	str	r3, [r7, #80]	; 0x50
 800714a:	2301      	movs	r3, #1
 800714c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	697b      	ldr	r3, [r7, #20]
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2120      	movs	r1, #32
 8007162:	430a      	orrs	r2, r1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007168:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716a:	69bb      	ldr	r3, [r7, #24]
 800716c:	f383 8810 	msr	PRIMASK, r3
}
 8007170:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	0018      	movs	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	b018      	add	sp, #96	; 0x60
 800717a:	bd80      	pop	{r7, pc}
 800717c:	000001ff 	.word	0x000001ff
 8007180:	08008001 	.word	0x08008001
 8007184:	08007d15 	.word	0x08007d15
 8007188:	08007ba1 	.word	0x08007ba1
 800718c:	08007a2d 	.word	0x08007a2d

08007190 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b090      	sub	sp, #64	; 0x40
 8007194:	af00      	add	r7, sp, #0
 8007196:	60f8      	str	r0, [r7, #12]
 8007198:	60b9      	str	r1, [r7, #8]
 800719a:	1dbb      	adds	r3, r7, #6
 800719c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	68ba      	ldr	r2, [r7, #8]
 80071a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	1dba      	adds	r2, r7, #6
 80071a8:	215c      	movs	r1, #92	; 0x5c
 80071aa:	8812      	ldrh	r2, [r2, #0]
 80071ac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2290      	movs	r2, #144	; 0x90
 80071b2:	2100      	movs	r1, #0
 80071b4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	228c      	movs	r2, #140	; 0x8c
 80071ba:	2122      	movs	r1, #34	; 0x22
 80071bc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	2280      	movs	r2, #128	; 0x80
 80071c2:	589b      	ldr	r3, [r3, r2]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d02d      	beq.n	8007224 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2280      	movs	r2, #128	; 0x80
 80071cc:	589b      	ldr	r3, [r3, r2]
 80071ce:	4a40      	ldr	r2, [pc, #256]	; (80072d0 <UART_Start_Receive_DMA+0x140>)
 80071d0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2280      	movs	r2, #128	; 0x80
 80071d6:	589b      	ldr	r3, [r3, r2]
 80071d8:	4a3e      	ldr	r2, [pc, #248]	; (80072d4 <UART_Start_Receive_DMA+0x144>)
 80071da:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2280      	movs	r2, #128	; 0x80
 80071e0:	589b      	ldr	r3, [r3, r2]
 80071e2:	4a3d      	ldr	r2, [pc, #244]	; (80072d8 <UART_Start_Receive_DMA+0x148>)
 80071e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2280      	movs	r2, #128	; 0x80
 80071ea:	589b      	ldr	r3, [r3, r2]
 80071ec:	2200      	movs	r2, #0
 80071ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	2280      	movs	r2, #128	; 0x80
 80071f4:	5898      	ldr	r0, [r3, r2]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	3324      	adds	r3, #36	; 0x24
 80071fc:	0019      	movs	r1, r3
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007202:	001a      	movs	r2, r3
 8007204:	1dbb      	adds	r3, r7, #6
 8007206:	881b      	ldrh	r3, [r3, #0]
 8007208:	f7fc f998 	bl	800353c <HAL_DMA_Start_IT>
 800720c:	1e03      	subs	r3, r0, #0
 800720e:	d009      	beq.n	8007224 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	2290      	movs	r2, #144	; 0x90
 8007214:	2110      	movs	r1, #16
 8007216:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	228c      	movs	r2, #140	; 0x8c
 800721c:	2120      	movs	r1, #32
 800721e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007220:	2301      	movs	r3, #1
 8007222:	e050      	b.n	80072c6 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	691b      	ldr	r3, [r3, #16]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d019      	beq.n	8007260 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800722c:	f3ef 8310 	mrs	r3, PRIMASK
 8007230:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007232:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007234:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007236:	2301      	movs	r3, #1
 8007238:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800723a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800723c:	f383 8810 	msr	PRIMASK, r3
}
 8007240:	46c0      	nop			; (mov r8, r8)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	681a      	ldr	r2, [r3, #0]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2180      	movs	r1, #128	; 0x80
 800724e:	0049      	lsls	r1, r1, #1
 8007250:	430a      	orrs	r2, r1
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007256:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725a:	f383 8810 	msr	PRIMASK, r3
}
 800725e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007260:	f3ef 8310 	mrs	r3, PRIMASK
 8007264:	613b      	str	r3, [r7, #16]
  return(result);
 8007266:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007268:	63bb      	str	r3, [r7, #56]	; 0x38
 800726a:	2301      	movs	r3, #1
 800726c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f383 8810 	msr	PRIMASK, r3
}
 8007274:	46c0      	nop			; (mov r8, r8)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	689a      	ldr	r2, [r3, #8]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2101      	movs	r1, #1
 8007282:	430a      	orrs	r2, r1
 8007284:	609a      	str	r2, [r3, #8]
 8007286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007288:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	f383 8810 	msr	PRIMASK, r3
}
 8007290:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007292:	f3ef 8310 	mrs	r3, PRIMASK
 8007296:	61fb      	str	r3, [r7, #28]
  return(result);
 8007298:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800729a:	637b      	str	r3, [r7, #52]	; 0x34
 800729c:	2301      	movs	r3, #1
 800729e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072a0:	6a3b      	ldr	r3, [r7, #32]
 80072a2:	f383 8810 	msr	PRIMASK, r3
}
 80072a6:	46c0      	nop			; (mov r8, r8)
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	689a      	ldr	r2, [r3, #8]
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	2140      	movs	r1, #64	; 0x40
 80072b4:	430a      	orrs	r2, r1
 80072b6:	609a      	str	r2, [r3, #8]
 80072b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ba:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072be:	f383 8810 	msr	PRIMASK, r3
}
 80072c2:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80072c4:	2300      	movs	r3, #0
}
 80072c6:	0018      	movs	r0, r3
 80072c8:	46bd      	mov	sp, r7
 80072ca:	b010      	add	sp, #64	; 0x40
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	46c0      	nop			; (mov r8, r8)
 80072d0:	080074e1 	.word	0x080074e1
 80072d4:	08007611 	.word	0x08007611
 80072d8:	08007653 	.word	0x08007653

080072dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	b08a      	sub	sp, #40	; 0x28
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e4:	f3ef 8310 	mrs	r3, PRIMASK
 80072e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80072ea:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80072ec:	627b      	str	r3, [r7, #36]	; 0x24
 80072ee:	2301      	movs	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f383 8810 	msr	PRIMASK, r3
}
 80072f8:	46c0      	nop			; (mov r8, r8)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	21c0      	movs	r1, #192	; 0xc0
 8007306:	438a      	bics	r2, r1
 8007308:	601a      	str	r2, [r3, #0]
 800730a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f383 8810 	msr	PRIMASK, r3
}
 8007314:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007316:	f3ef 8310 	mrs	r3, PRIMASK
 800731a:	617b      	str	r3, [r7, #20]
  return(result);
 800731c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800731e:	623b      	str	r3, [r7, #32]
 8007320:	2301      	movs	r3, #1
 8007322:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007324:	69bb      	ldr	r3, [r7, #24]
 8007326:	f383 8810 	msr	PRIMASK, r3
}
 800732a:	46c0      	nop			; (mov r8, r8)
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689a      	ldr	r2, [r3, #8]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	4908      	ldr	r1, [pc, #32]	; (8007358 <UART_EndTxTransfer+0x7c>)
 8007338:	400a      	ands	r2, r1
 800733a:	609a      	str	r2, [r3, #8]
 800733c:	6a3b      	ldr	r3, [r7, #32]
 800733e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007340:	69fb      	ldr	r3, [r7, #28]
 8007342:	f383 8810 	msr	PRIMASK, r3
}
 8007346:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2288      	movs	r2, #136	; 0x88
 800734c:	2120      	movs	r1, #32
 800734e:	5099      	str	r1, [r3, r2]
}
 8007350:	46c0      	nop			; (mov r8, r8)
 8007352:	46bd      	mov	sp, r7
 8007354:	b00a      	add	sp, #40	; 0x28
 8007356:	bd80      	pop	{r7, pc}
 8007358:	ff7fffff 	.word	0xff7fffff

0800735c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08e      	sub	sp, #56	; 0x38
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007364:	f3ef 8310 	mrs	r3, PRIMASK
 8007368:	617b      	str	r3, [r7, #20]
  return(result);
 800736a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800736c:	637b      	str	r3, [r7, #52]	; 0x34
 800736e:	2301      	movs	r3, #1
 8007370:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007372:	69bb      	ldr	r3, [r7, #24]
 8007374:	f383 8810 	msr	PRIMASK, r3
}
 8007378:	46c0      	nop			; (mov r8, r8)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	4926      	ldr	r1, [pc, #152]	; (8007420 <UART_EndRxTransfer+0xc4>)
 8007386:	400a      	ands	r2, r1
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800738c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	f383 8810 	msr	PRIMASK, r3
}
 8007394:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007396:	f3ef 8310 	mrs	r3, PRIMASK
 800739a:	623b      	str	r3, [r7, #32]
  return(result);
 800739c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800739e:	633b      	str	r3, [r7, #48]	; 0x30
 80073a0:	2301      	movs	r3, #1
 80073a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a6:	f383 8810 	msr	PRIMASK, r3
}
 80073aa:	46c0      	nop			; (mov r8, r8)
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	689a      	ldr	r2, [r3, #8]
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	491b      	ldr	r1, [pc, #108]	; (8007424 <UART_EndRxTransfer+0xc8>)
 80073b8:	400a      	ands	r2, r1
 80073ba:	609a      	str	r2, [r3, #8]
 80073bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073be:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	f383 8810 	msr	PRIMASK, r3
}
 80073c6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073cc:	2b01      	cmp	r3, #1
 80073ce:	d118      	bne.n	8007402 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d0:	f3ef 8310 	mrs	r3, PRIMASK
 80073d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80073d6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073da:	2301      	movs	r3, #1
 80073dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	f383 8810 	msr	PRIMASK, r3
}
 80073e4:	46c0      	nop			; (mov r8, r8)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	681a      	ldr	r2, [r3, #0]
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	2110      	movs	r1, #16
 80073f2:	438a      	bics	r2, r1
 80073f4:	601a      	str	r2, [r3, #0]
 80073f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f383 8810 	msr	PRIMASK, r3
}
 8007400:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	228c      	movs	r2, #140	; 0x8c
 8007406:	2120      	movs	r1, #32
 8007408:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2200      	movs	r2, #0
 800740e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	2200      	movs	r2, #0
 8007414:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007416:	46c0      	nop			; (mov r8, r8)
 8007418:	46bd      	mov	sp, r7
 800741a:	b00e      	add	sp, #56	; 0x38
 800741c:	bd80      	pop	{r7, pc}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	fffffedf 	.word	0xfffffedf
 8007424:	effffffe 	.word	0xeffffffe

08007428 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007428:	b580      	push	{r7, lr}
 800742a:	b08c      	sub	sp, #48	; 0x30
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007434:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	2220      	movs	r2, #32
 800743e:	4013      	ands	r3, r2
 8007440:	d135      	bne.n	80074ae <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8007442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007444:	2256      	movs	r2, #86	; 0x56
 8007446:	2100      	movs	r1, #0
 8007448:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800744a:	f3ef 8310 	mrs	r3, PRIMASK
 800744e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007450:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007452:	62bb      	str	r3, [r7, #40]	; 0x28
 8007454:	2301      	movs	r3, #1
 8007456:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	f383 8810 	msr	PRIMASK, r3
}
 800745e:	46c0      	nop			; (mov r8, r8)
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	689a      	ldr	r2, [r3, #8]
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	2180      	movs	r1, #128	; 0x80
 800746c:	438a      	bics	r2, r1
 800746e:	609a      	str	r2, [r3, #8]
 8007470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007472:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	f383 8810 	msr	PRIMASK, r3
}
 800747a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800747c:	f3ef 8310 	mrs	r3, PRIMASK
 8007480:	61bb      	str	r3, [r7, #24]
  return(result);
 8007482:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007484:	627b      	str	r3, [r7, #36]	; 0x24
 8007486:	2301      	movs	r3, #1
 8007488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	f383 8810 	msr	PRIMASK, r3
}
 8007490:	46c0      	nop			; (mov r8, r8)
 8007492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681a      	ldr	r2, [r3, #0]
 8007498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	2140      	movs	r1, #64	; 0x40
 800749e:	430a      	orrs	r2, r1
 80074a0:	601a      	str	r2, [r3, #0]
 80074a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	f383 8810 	msr	PRIMASK, r3
}
 80074ac:	e004      	b.n	80074b8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80074ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074b0:	0018      	movs	r0, r3
 80074b2:	f7ff f9b8 	bl	8006826 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	46c0      	nop			; (mov r8, r8)
 80074ba:	46bd      	mov	sp, r7
 80074bc:	b00c      	add	sp, #48	; 0x30
 80074be:	bd80      	pop	{r7, pc}

080074c0 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	b084      	sub	sp, #16
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074cc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	0018      	movs	r0, r3
 80074d2:	f7ff f9b0 	bl	8006836 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074d6:	46c0      	nop			; (mov r8, r8)
 80074d8:	46bd      	mov	sp, r7
 80074da:	b004      	add	sp, #16
 80074dc:	bd80      	pop	{r7, pc}
	...

080074e0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b094      	sub	sp, #80	; 0x50
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074ec:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	2220      	movs	r2, #32
 80074f6:	4013      	ands	r3, r2
 80074f8:	d16f      	bne.n	80075da <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80074fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074fc:	225e      	movs	r2, #94	; 0x5e
 80074fe:	2100      	movs	r1, #0
 8007500:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007502:	f3ef 8310 	mrs	r3, PRIMASK
 8007506:	61bb      	str	r3, [r7, #24]
  return(result);
 8007508:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800750a:	64bb      	str	r3, [r7, #72]	; 0x48
 800750c:	2301      	movs	r3, #1
 800750e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007510:	69fb      	ldr	r3, [r7, #28]
 8007512:	f383 8810 	msr	PRIMASK, r3
}
 8007516:	46c0      	nop			; (mov r8, r8)
 8007518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	681a      	ldr	r2, [r3, #0]
 800751e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	493a      	ldr	r1, [pc, #232]	; (800760c <UART_DMAReceiveCplt+0x12c>)
 8007524:	400a      	ands	r2, r1
 8007526:	601a      	str	r2, [r3, #0]
 8007528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800752a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752c:	6a3b      	ldr	r3, [r7, #32]
 800752e:	f383 8810 	msr	PRIMASK, r3
}
 8007532:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007534:	f3ef 8310 	mrs	r3, PRIMASK
 8007538:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800753a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800753c:	647b      	str	r3, [r7, #68]	; 0x44
 800753e:	2301      	movs	r3, #1
 8007540:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007544:	f383 8810 	msr	PRIMASK, r3
}
 8007548:	46c0      	nop			; (mov r8, r8)
 800754a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	689a      	ldr	r2, [r3, #8]
 8007550:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2101      	movs	r1, #1
 8007556:	438a      	bics	r2, r1
 8007558:	609a      	str	r2, [r3, #8]
 800755a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800755c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	f383 8810 	msr	PRIMASK, r3
}
 8007564:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007566:	f3ef 8310 	mrs	r3, PRIMASK
 800756a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800756c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756e:	643b      	str	r3, [r7, #64]	; 0x40
 8007570:	2301      	movs	r3, #1
 8007572:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007576:	f383 8810 	msr	PRIMASK, r3
}
 800757a:	46c0      	nop			; (mov r8, r8)
 800757c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	689a      	ldr	r2, [r3, #8]
 8007582:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	2140      	movs	r1, #64	; 0x40
 8007588:	438a      	bics	r2, r1
 800758a:	609a      	str	r2, [r3, #8]
 800758c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007592:	f383 8810 	msr	PRIMASK, r3
}
 8007596:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007598:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800759a:	228c      	movs	r2, #140	; 0x8c
 800759c:	2120      	movs	r1, #32
 800759e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d118      	bne.n	80075da <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a8:	f3ef 8310 	mrs	r3, PRIMASK
 80075ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80075ae:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80075b2:	2301      	movs	r3, #1
 80075b4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	f383 8810 	msr	PRIMASK, r3
}
 80075bc:	46c0      	nop			; (mov r8, r8)
 80075be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	2110      	movs	r1, #16
 80075ca:	438a      	bics	r2, r1
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075d0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	f383 8810 	msr	PRIMASK, r3
}
 80075d8:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075dc:	2200      	movs	r2, #0
 80075de:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d108      	bne.n	80075fa <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075ea:	225c      	movs	r2, #92	; 0x5c
 80075ec:	5a9a      	ldrh	r2, [r3, r2]
 80075ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075f0:	0011      	movs	r1, r2
 80075f2:	0018      	movs	r0, r3
 80075f4:	f7ff f92f 	bl	8006856 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80075f8:	e003      	b.n	8007602 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 80075fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075fc:	0018      	movs	r0, r3
 80075fe:	f7fa f891 	bl	8001724 <HAL_UART_RxCpltCallback>
}
 8007602:	46c0      	nop			; (mov r8, r8)
 8007604:	46bd      	mov	sp, r7
 8007606:	b014      	add	sp, #80	; 0x50
 8007608:	bd80      	pop	{r7, pc}
 800760a:	46c0      	nop			; (mov r8, r8)
 800760c:	fffffeff 	.word	0xfffffeff

08007610 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007610:	b580      	push	{r7, lr}
 8007612:	b084      	sub	sp, #16
 8007614:	af00      	add	r7, sp, #0
 8007616:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2201      	movs	r2, #1
 8007622:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007628:	2b01      	cmp	r3, #1
 800762a:	d10a      	bne.n	8007642 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	225c      	movs	r2, #92	; 0x5c
 8007630:	5a9b      	ldrh	r3, [r3, r2]
 8007632:	085b      	lsrs	r3, r3, #1
 8007634:	b29a      	uxth	r2, r3
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	0011      	movs	r1, r2
 800763a:	0018      	movs	r0, r3
 800763c:	f7ff f90b 	bl	8006856 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007640:	e003      	b.n	800764a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	0018      	movs	r0, r3
 8007646:	f7fa f84f 	bl	80016e8 <HAL_UART_RxHalfCpltCallback>
}
 800764a:	46c0      	nop			; (mov r8, r8)
 800764c:	46bd      	mov	sp, r7
 800764e:	b004      	add	sp, #16
 8007650:	bd80      	pop	{r7, pc}

08007652 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007652:	b580      	push	{r7, lr}
 8007654:	b086      	sub	sp, #24
 8007656:	af00      	add	r7, sp, #0
 8007658:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800765e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	2288      	movs	r2, #136	; 0x88
 8007664:	589b      	ldr	r3, [r3, r2]
 8007666:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	228c      	movs	r2, #140	; 0x8c
 800766c:	589b      	ldr	r3, [r3, r2]
 800766e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007670:	697b      	ldr	r3, [r7, #20]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	689b      	ldr	r3, [r3, #8]
 8007676:	2280      	movs	r2, #128	; 0x80
 8007678:	4013      	ands	r3, r2
 800767a:	2b80      	cmp	r3, #128	; 0x80
 800767c:	d10a      	bne.n	8007694 <UART_DMAError+0x42>
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	2b21      	cmp	r3, #33	; 0x21
 8007682:	d107      	bne.n	8007694 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007684:	697b      	ldr	r3, [r7, #20]
 8007686:	2256      	movs	r2, #86	; 0x56
 8007688:	2100      	movs	r1, #0
 800768a:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800768c:	697b      	ldr	r3, [r7, #20]
 800768e:	0018      	movs	r0, r3
 8007690:	f7ff fe24 	bl	80072dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007694:	697b      	ldr	r3, [r7, #20]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	689b      	ldr	r3, [r3, #8]
 800769a:	2240      	movs	r2, #64	; 0x40
 800769c:	4013      	ands	r3, r2
 800769e:	2b40      	cmp	r3, #64	; 0x40
 80076a0:	d10a      	bne.n	80076b8 <UART_DMAError+0x66>
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2b22      	cmp	r3, #34	; 0x22
 80076a6:	d107      	bne.n	80076b8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80076a8:	697b      	ldr	r3, [r7, #20]
 80076aa:	225e      	movs	r2, #94	; 0x5e
 80076ac:	2100      	movs	r1, #0
 80076ae:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	0018      	movs	r0, r3
 80076b4:	f7ff fe52 	bl	800735c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	2290      	movs	r2, #144	; 0x90
 80076bc:	589b      	ldr	r3, [r3, r2]
 80076be:	2210      	movs	r2, #16
 80076c0:	431a      	orrs	r2, r3
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2190      	movs	r1, #144	; 0x90
 80076c6:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	0018      	movs	r0, r3
 80076cc:	f7ff f8bb 	bl	8006846 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80076d0:	46c0      	nop			; (mov r8, r8)
 80076d2:	46bd      	mov	sp, r7
 80076d4:	b006      	add	sp, #24
 80076d6:	bd80      	pop	{r7, pc}

080076d8 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b08a      	sub	sp, #40	; 0x28
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2288      	movs	r2, #136	; 0x88
 80076e4:	589b      	ldr	r3, [r3, r2]
 80076e6:	2b21      	cmp	r3, #33	; 0x21
 80076e8:	d14c      	bne.n	8007784 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2256      	movs	r2, #86	; 0x56
 80076ee:	5a9b      	ldrh	r3, [r3, r2]
 80076f0:	b29b      	uxth	r3, r3
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d132      	bne.n	800775c <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076f6:	f3ef 8310 	mrs	r3, PRIMASK
 80076fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80076fc:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80076fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007700:	2301      	movs	r3, #1
 8007702:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f383 8810 	msr	PRIMASK, r3
}
 800770a:	46c0      	nop			; (mov r8, r8)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	681a      	ldr	r2, [r3, #0]
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	2180      	movs	r1, #128	; 0x80
 8007718:	438a      	bics	r2, r1
 800771a:	601a      	str	r2, [r3, #0]
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	f383 8810 	msr	PRIMASK, r3
}
 8007726:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007728:	f3ef 8310 	mrs	r3, PRIMASK
 800772c:	617b      	str	r3, [r7, #20]
  return(result);
 800772e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007730:	623b      	str	r3, [r7, #32]
 8007732:	2301      	movs	r3, #1
 8007734:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f383 8810 	msr	PRIMASK, r3
}
 800773c:	46c0      	nop			; (mov r8, r8)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	2140      	movs	r1, #64	; 0x40
 800774a:	430a      	orrs	r2, r1
 800774c:	601a      	str	r2, [r3, #0]
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007752:	69fb      	ldr	r3, [r7, #28]
 8007754:	f383 8810 	msr	PRIMASK, r3
}
 8007758:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800775a:	e013      	b.n	8007784 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800776c:	1c5a      	adds	r2, r3, #1
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2256      	movs	r2, #86	; 0x56
 8007776:	5a9b      	ldrh	r3, [r3, r2]
 8007778:	b29b      	uxth	r3, r3
 800777a:	3b01      	subs	r3, #1
 800777c:	b299      	uxth	r1, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2256      	movs	r2, #86	; 0x56
 8007782:	5299      	strh	r1, [r3, r2]
}
 8007784:	46c0      	nop			; (mov r8, r8)
 8007786:	46bd      	mov	sp, r7
 8007788:	b00a      	add	sp, #40	; 0x28
 800778a:	bd80      	pop	{r7, pc}

0800778c <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b08c      	sub	sp, #48	; 0x30
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2288      	movs	r2, #136	; 0x88
 8007798:	589b      	ldr	r3, [r3, r2]
 800779a:	2b21      	cmp	r3, #33	; 0x21
 800779c:	d151      	bne.n	8007842 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2256      	movs	r2, #86	; 0x56
 80077a2:	5a9b      	ldrh	r3, [r3, r2]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d132      	bne.n	8007810 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077aa:	f3ef 8310 	mrs	r3, PRIMASK
 80077ae:	60fb      	str	r3, [r7, #12]
  return(result);
 80077b0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80077b2:	62bb      	str	r3, [r7, #40]	; 0x28
 80077b4:	2301      	movs	r3, #1
 80077b6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	f383 8810 	msr	PRIMASK, r3
}
 80077be:	46c0      	nop			; (mov r8, r8)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	681a      	ldr	r2, [r3, #0]
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2180      	movs	r1, #128	; 0x80
 80077cc:	438a      	bics	r2, r1
 80077ce:	601a      	str	r2, [r3, #0]
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077d4:	697b      	ldr	r3, [r7, #20]
 80077d6:	f383 8810 	msr	PRIMASK, r3
}
 80077da:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077dc:	f3ef 8310 	mrs	r3, PRIMASK
 80077e0:	61bb      	str	r3, [r7, #24]
  return(result);
 80077e2:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077e4:	627b      	str	r3, [r7, #36]	; 0x24
 80077e6:	2301      	movs	r3, #1
 80077e8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077ea:	69fb      	ldr	r3, [r7, #28]
 80077ec:	f383 8810 	msr	PRIMASK, r3
}
 80077f0:	46c0      	nop			; (mov r8, r8)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	681a      	ldr	r2, [r3, #0]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	2140      	movs	r1, #64	; 0x40
 80077fe:	430a      	orrs	r2, r1
 8007800:	601a      	str	r2, [r3, #0]
 8007802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007804:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	f383 8810 	msr	PRIMASK, r3
}
 800780c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800780e:	e018      	b.n	8007842 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8007816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007818:	881b      	ldrh	r3, [r3, #0]
 800781a:	001a      	movs	r2, r3
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	05d2      	lsls	r2, r2, #23
 8007822:	0dd2      	lsrs	r2, r2, #23
 8007824:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800782a:	1c9a      	adds	r2, r3, #2
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2256      	movs	r2, #86	; 0x56
 8007834:	5a9b      	ldrh	r3, [r3, r2]
 8007836:	b29b      	uxth	r3, r3
 8007838:	3b01      	subs	r3, #1
 800783a:	b299      	uxth	r1, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2256      	movs	r2, #86	; 0x56
 8007840:	5299      	strh	r1, [r3, r2]
}
 8007842:	46c0      	nop			; (mov r8, r8)
 8007844:	46bd      	mov	sp, r7
 8007846:	b00c      	add	sp, #48	; 0x30
 8007848:	bd80      	pop	{r7, pc}
	...

0800784c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b08c      	sub	sp, #48	; 0x30
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2288      	movs	r2, #136	; 0x88
 8007858:	589b      	ldr	r3, [r3, r2]
 800785a:	2b21      	cmp	r3, #33	; 0x21
 800785c:	d165      	bne.n	800792a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800785e:	232e      	movs	r3, #46	; 0x2e
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	687a      	ldr	r2, [r7, #4]
 8007864:	216a      	movs	r1, #106	; 0x6a
 8007866:	5a52      	ldrh	r2, [r2, r1]
 8007868:	801a      	strh	r2, [r3, #0]
 800786a:	e059      	b.n	8007920 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2256      	movs	r2, #86	; 0x56
 8007870:	5a9b      	ldrh	r3, [r3, r2]
 8007872:	b29b      	uxth	r3, r3
 8007874:	2b00      	cmp	r3, #0
 8007876:	d133      	bne.n	80078e0 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007878:	f3ef 8310 	mrs	r3, PRIMASK
 800787c:	60fb      	str	r3, [r7, #12]
  return(result);
 800787e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007880:	62bb      	str	r3, [r7, #40]	; 0x28
 8007882:	2301      	movs	r3, #1
 8007884:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	f383 8810 	msr	PRIMASK, r3
}
 800788c:	46c0      	nop			; (mov r8, r8)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4926      	ldr	r1, [pc, #152]	; (8007934 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 800789a:	400a      	ands	r2, r1
 800789c:	609a      	str	r2, [r3, #8]
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	f383 8810 	msr	PRIMASK, r3
}
 80078a8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078aa:	f3ef 8310 	mrs	r3, PRIMASK
 80078ae:	61bb      	str	r3, [r7, #24]
  return(result);
 80078b0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078b2:	627b      	str	r3, [r7, #36]	; 0x24
 80078b4:	2301      	movs	r3, #1
 80078b6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b8:	69fb      	ldr	r3, [r7, #28]
 80078ba:	f383 8810 	msr	PRIMASK, r3
}
 80078be:	46c0      	nop			; (mov r8, r8)
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	681a      	ldr	r2, [r3, #0]
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2140      	movs	r1, #64	; 0x40
 80078cc:	430a      	orrs	r2, r1
 80078ce:	601a      	str	r2, [r3, #0]
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	f383 8810 	msr	PRIMASK, r3
}
 80078da:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80078dc:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80078de:	e024      	b.n	800792a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	69db      	ldr	r3, [r3, #28]
 80078e6:	2280      	movs	r2, #128	; 0x80
 80078e8:	4013      	ands	r3, r2
 80078ea:	d013      	beq.n	8007914 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078f0:	781a      	ldrb	r2, [r3, #0]
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2256      	movs	r2, #86	; 0x56
 8007906:	5a9b      	ldrh	r3, [r3, r2]
 8007908:	b29b      	uxth	r3, r3
 800790a:	3b01      	subs	r3, #1
 800790c:	b299      	uxth	r1, r3
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2256      	movs	r2, #86	; 0x56
 8007912:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007914:	212e      	movs	r1, #46	; 0x2e
 8007916:	187b      	adds	r3, r7, r1
 8007918:	881a      	ldrh	r2, [r3, #0]
 800791a:	187b      	adds	r3, r7, r1
 800791c:	3a01      	subs	r2, #1
 800791e:	801a      	strh	r2, [r3, #0]
 8007920:	232e      	movs	r3, #46	; 0x2e
 8007922:	18fb      	adds	r3, r7, r3
 8007924:	881b      	ldrh	r3, [r3, #0]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1a0      	bne.n	800786c <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	46bd      	mov	sp, r7
 800792e:	b00c      	add	sp, #48	; 0x30
 8007930:	bd80      	pop	{r7, pc}
 8007932:	46c0      	nop			; (mov r8, r8)
 8007934:	ff7fffff 	.word	0xff7fffff

08007938 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007938:	b580      	push	{r7, lr}
 800793a:	b08c      	sub	sp, #48	; 0x30
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2288      	movs	r2, #136	; 0x88
 8007944:	589b      	ldr	r3, [r3, r2]
 8007946:	2b21      	cmp	r3, #33	; 0x21
 8007948:	d16a      	bne.n	8007a20 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800794a:	232e      	movs	r3, #46	; 0x2e
 800794c:	18fb      	adds	r3, r7, r3
 800794e:	687a      	ldr	r2, [r7, #4]
 8007950:	216a      	movs	r1, #106	; 0x6a
 8007952:	5a52      	ldrh	r2, [r2, r1]
 8007954:	801a      	strh	r2, [r3, #0]
 8007956:	e05e      	b.n	8007a16 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2256      	movs	r2, #86	; 0x56
 800795c:	5a9b      	ldrh	r3, [r3, r2]
 800795e:	b29b      	uxth	r3, r3
 8007960:	2b00      	cmp	r3, #0
 8007962:	d133      	bne.n	80079cc <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007964:	f3ef 8310 	mrs	r3, PRIMASK
 8007968:	60bb      	str	r3, [r7, #8]
  return(result);
 800796a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800796c:	627b      	str	r3, [r7, #36]	; 0x24
 800796e:	2301      	movs	r3, #1
 8007970:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	f383 8810 	msr	PRIMASK, r3
}
 8007978:	46c0      	nop			; (mov r8, r8)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	689a      	ldr	r2, [r3, #8]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4928      	ldr	r1, [pc, #160]	; (8007a28 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 8007986:	400a      	ands	r2, r1
 8007988:	609a      	str	r2, [r3, #8]
 800798a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798e:	693b      	ldr	r3, [r7, #16]
 8007990:	f383 8810 	msr	PRIMASK, r3
}
 8007994:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007996:	f3ef 8310 	mrs	r3, PRIMASK
 800799a:	617b      	str	r3, [r7, #20]
  return(result);
 800799c:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800799e:	623b      	str	r3, [r7, #32]
 80079a0:	2301      	movs	r3, #1
 80079a2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	f383 8810 	msr	PRIMASK, r3
}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	2140      	movs	r1, #64	; 0x40
 80079b8:	430a      	orrs	r2, r1
 80079ba:	601a      	str	r2, [r3, #0]
 80079bc:	6a3b      	ldr	r3, [r7, #32]
 80079be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c0:	69fb      	ldr	r3, [r7, #28]
 80079c2:	f383 8810 	msr	PRIMASK, r3
}
 80079c6:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80079c8:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80079ca:	e029      	b.n	8007a20 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	69db      	ldr	r3, [r3, #28]
 80079d2:	2280      	movs	r2, #128	; 0x80
 80079d4:	4013      	ands	r3, r2
 80079d6:	d018      	beq.n	8007a0a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079dc:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80079de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e0:	881b      	ldrh	r3, [r3, #0]
 80079e2:	001a      	movs	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	05d2      	lsls	r2, r2, #23
 80079ea:	0dd2      	lsrs	r2, r2, #23
 80079ec:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f2:	1c9a      	adds	r2, r3, #2
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2256      	movs	r2, #86	; 0x56
 80079fc:	5a9b      	ldrh	r3, [r3, r2]
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	3b01      	subs	r3, #1
 8007a02:	b299      	uxth	r1, r3
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2256      	movs	r2, #86	; 0x56
 8007a08:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007a0a:	212e      	movs	r1, #46	; 0x2e
 8007a0c:	187b      	adds	r3, r7, r1
 8007a0e:	881a      	ldrh	r2, [r3, #0]
 8007a10:	187b      	adds	r3, r7, r1
 8007a12:	3a01      	subs	r2, #1
 8007a14:	801a      	strh	r2, [r3, #0]
 8007a16:	232e      	movs	r3, #46	; 0x2e
 8007a18:	18fb      	adds	r3, r7, r3
 8007a1a:	881b      	ldrh	r3, [r3, #0]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d19b      	bne.n	8007958 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8007a20:	46c0      	nop			; (mov r8, r8)
 8007a22:	46bd      	mov	sp, r7
 8007a24:	b00c      	add	sp, #48	; 0x30
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	ff7fffff 	.word	0xff7fffff

08007a2c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b090      	sub	sp, #64	; 0x40
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a34:	203e      	movs	r0, #62	; 0x3e
 8007a36:	183b      	adds	r3, r7, r0
 8007a38:	687a      	ldr	r2, [r7, #4]
 8007a3a:	2160      	movs	r1, #96	; 0x60
 8007a3c:	5a52      	ldrh	r2, [r2, r1]
 8007a3e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	228c      	movs	r2, #140	; 0x8c
 8007a44:	589b      	ldr	r3, [r3, r2]
 8007a46:	2b22      	cmp	r3, #34	; 0x22
 8007a48:	d000      	beq.n	8007a4c <UART_RxISR_8BIT+0x20>
 8007a4a:	e09a      	b.n	8007b82 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a52:	213c      	movs	r1, #60	; 0x3c
 8007a54:	187b      	adds	r3, r7, r1
 8007a56:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a58:	187b      	adds	r3, r7, r1
 8007a5a:	881b      	ldrh	r3, [r3, #0]
 8007a5c:	b2da      	uxtb	r2, r3
 8007a5e:	183b      	adds	r3, r7, r0
 8007a60:	881b      	ldrh	r3, [r3, #0]
 8007a62:	b2d9      	uxtb	r1, r3
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a68:	400a      	ands	r2, r1
 8007a6a:	b2d2      	uxtb	r2, r2
 8007a6c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a72:	1c5a      	adds	r2, r3, #1
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	225e      	movs	r2, #94	; 0x5e
 8007a7c:	5a9b      	ldrh	r3, [r3, r2]
 8007a7e:	b29b      	uxth	r3, r3
 8007a80:	3b01      	subs	r3, #1
 8007a82:	b299      	uxth	r1, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	225e      	movs	r2, #94	; 0x5e
 8007a88:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	225e      	movs	r2, #94	; 0x5e
 8007a8e:	5a9b      	ldrh	r3, [r3, r2]
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d000      	beq.n	8007a98 <UART_RxISR_8BIT+0x6c>
 8007a96:	e07c      	b.n	8007b92 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a98:	f3ef 8310 	mrs	r3, PRIMASK
 8007a9c:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a9e:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aa0:	63bb      	str	r3, [r7, #56]	; 0x38
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f383 8810 	msr	PRIMASK, r3
}
 8007aac:	46c0      	nop			; (mov r8, r8)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	681a      	ldr	r2, [r3, #0]
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4938      	ldr	r1, [pc, #224]	; (8007b9c <UART_RxISR_8BIT+0x170>)
 8007aba:	400a      	ands	r2, r1
 8007abc:	601a      	str	r2, [r3, #0]
 8007abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ac0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ac2:	6a3b      	ldr	r3, [r7, #32]
 8007ac4:	f383 8810 	msr	PRIMASK, r3
}
 8007ac8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007aca:	f3ef 8310 	mrs	r3, PRIMASK
 8007ace:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ad2:	637b      	str	r3, [r7, #52]	; 0x34
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ada:	f383 8810 	msr	PRIMASK, r3
}
 8007ade:	46c0      	nop			; (mov r8, r8)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689a      	ldr	r2, [r3, #8]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	2101      	movs	r1, #1
 8007aec:	438a      	bics	r2, r1
 8007aee:	609a      	str	r2, [r3, #8]
 8007af0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007af6:	f383 8810 	msr	PRIMASK, r3
}
 8007afa:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	228c      	movs	r2, #140	; 0x8c
 8007b00:	2120      	movs	r1, #32
 8007b02:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2200      	movs	r2, #0
 8007b08:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b14:	2b01      	cmp	r3, #1
 8007b16:	d12f      	bne.n	8007b78 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b22:	60fb      	str	r3, [r7, #12]
  return(result);
 8007b24:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b26:	633b      	str	r3, [r7, #48]	; 0x30
 8007b28:	2301      	movs	r3, #1
 8007b2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b2c:	693b      	ldr	r3, [r7, #16]
 8007b2e:	f383 8810 	msr	PRIMASK, r3
}
 8007b32:	46c0      	nop			; (mov r8, r8)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	2110      	movs	r1, #16
 8007b40:	438a      	bics	r2, r1
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f383 8810 	msr	PRIMASK, r3
}
 8007b4e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	69db      	ldr	r3, [r3, #28]
 8007b56:	2210      	movs	r2, #16
 8007b58:	4013      	ands	r3, r2
 8007b5a:	2b10      	cmp	r3, #16
 8007b5c:	d103      	bne.n	8007b66 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	2210      	movs	r2, #16
 8007b64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	225c      	movs	r2, #92	; 0x5c
 8007b6a:	5a9a      	ldrh	r2, [r3, r2]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	0011      	movs	r1, r2
 8007b70:	0018      	movs	r0, r3
 8007b72:	f7fe fe70 	bl	8006856 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007b76:	e00c      	b.n	8007b92 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	0018      	movs	r0, r3
 8007b7c:	f7f9 fdd2 	bl	8001724 <HAL_UART_RxCpltCallback>
}
 8007b80:	e007      	b.n	8007b92 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	699a      	ldr	r2, [r3, #24]
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	2108      	movs	r1, #8
 8007b8e:	430a      	orrs	r2, r1
 8007b90:	619a      	str	r2, [r3, #24]
}
 8007b92:	46c0      	nop			; (mov r8, r8)
 8007b94:	46bd      	mov	sp, r7
 8007b96:	b010      	add	sp, #64	; 0x40
 8007b98:	bd80      	pop	{r7, pc}
 8007b9a:	46c0      	nop			; (mov r8, r8)
 8007b9c:	fffffedf 	.word	0xfffffedf

08007ba0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b090      	sub	sp, #64	; 0x40
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ba8:	203e      	movs	r0, #62	; 0x3e
 8007baa:	183b      	adds	r3, r7, r0
 8007bac:	687a      	ldr	r2, [r7, #4]
 8007bae:	2160      	movs	r1, #96	; 0x60
 8007bb0:	5a52      	ldrh	r2, [r2, r1]
 8007bb2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	228c      	movs	r2, #140	; 0x8c
 8007bb8:	589b      	ldr	r3, [r3, r2]
 8007bba:	2b22      	cmp	r3, #34	; 0x22
 8007bbc:	d000      	beq.n	8007bc0 <UART_RxISR_16BIT+0x20>
 8007bbe:	e09a      	b.n	8007cf6 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007bc6:	213c      	movs	r1, #60	; 0x3c
 8007bc8:	187b      	adds	r3, r7, r1
 8007bca:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007bd0:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007bd2:	187b      	adds	r3, r7, r1
 8007bd4:	183a      	adds	r2, r7, r0
 8007bd6:	881b      	ldrh	r3, [r3, #0]
 8007bd8:	8812      	ldrh	r2, [r2, #0]
 8007bda:	4013      	ands	r3, r2
 8007bdc:	b29a      	uxth	r2, r3
 8007bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007be6:	1c9a      	adds	r2, r3, #2
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	225e      	movs	r2, #94	; 0x5e
 8007bf0:	5a9b      	ldrh	r3, [r3, r2]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	b299      	uxth	r1, r3
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	225e      	movs	r2, #94	; 0x5e
 8007bfc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	225e      	movs	r2, #94	; 0x5e
 8007c02:	5a9b      	ldrh	r3, [r3, r2]
 8007c04:	b29b      	uxth	r3, r3
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d000      	beq.n	8007c0c <UART_RxISR_16BIT+0x6c>
 8007c0a:	e07c      	b.n	8007d06 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c10:	617b      	str	r3, [r7, #20]
  return(result);
 8007c12:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c14:	637b      	str	r3, [r7, #52]	; 0x34
 8007c16:	2301      	movs	r3, #1
 8007c18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c1a:	69bb      	ldr	r3, [r7, #24]
 8007c1c:	f383 8810 	msr	PRIMASK, r3
}
 8007c20:	46c0      	nop			; (mov r8, r8)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	681a      	ldr	r2, [r3, #0]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4938      	ldr	r1, [pc, #224]	; (8007d10 <UART_RxISR_16BIT+0x170>)
 8007c2e:	400a      	ands	r2, r1
 8007c30:	601a      	str	r2, [r3, #0]
 8007c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c36:	69fb      	ldr	r3, [r7, #28]
 8007c38:	f383 8810 	msr	PRIMASK, r3
}
 8007c3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007c42:	623b      	str	r3, [r7, #32]
  return(result);
 8007c44:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c46:	633b      	str	r3, [r7, #48]	; 0x30
 8007c48:	2301      	movs	r3, #1
 8007c4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c4e:	f383 8810 	msr	PRIMASK, r3
}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	2101      	movs	r1, #1
 8007c60:	438a      	bics	r2, r1
 8007c62:	609a      	str	r2, [r3, #8]
 8007c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c6a:	f383 8810 	msr	PRIMASK, r3
}
 8007c6e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	228c      	movs	r2, #140	; 0x8c
 8007c74:	2120      	movs	r1, #32
 8007c76:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2200      	movs	r2, #0
 8007c82:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d12f      	bne.n	8007cec <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c92:	f3ef 8310 	mrs	r3, PRIMASK
 8007c96:	60bb      	str	r3, [r7, #8]
  return(result);
 8007c98:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	f383 8810 	msr	PRIMASK, r3
}
 8007ca6:	46c0      	nop			; (mov r8, r8)
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	2110      	movs	r1, #16
 8007cb4:	438a      	bics	r2, r1
 8007cb6:	601a      	str	r2, [r3, #0]
 8007cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	f383 8810 	msr	PRIMASK, r3
}
 8007cc2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	2210      	movs	r2, #16
 8007ccc:	4013      	ands	r3, r2
 8007cce:	2b10      	cmp	r3, #16
 8007cd0:	d103      	bne.n	8007cda <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2210      	movs	r2, #16
 8007cd8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	225c      	movs	r2, #92	; 0x5c
 8007cde:	5a9a      	ldrh	r2, [r3, r2]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	0011      	movs	r1, r2
 8007ce4:	0018      	movs	r0, r3
 8007ce6:	f7fe fdb6 	bl	8006856 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cea:	e00c      	b.n	8007d06 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	0018      	movs	r0, r3
 8007cf0:	f7f9 fd18 	bl	8001724 <HAL_UART_RxCpltCallback>
}
 8007cf4:	e007      	b.n	8007d06 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2108      	movs	r1, #8
 8007d02:	430a      	orrs	r2, r1
 8007d04:	619a      	str	r2, [r3, #24]
}
 8007d06:	46c0      	nop			; (mov r8, r8)
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	b010      	add	sp, #64	; 0x40
 8007d0c:	bd80      	pop	{r7, pc}
 8007d0e:	46c0      	nop			; (mov r8, r8)
 8007d10:	fffffedf 	.word	0xfffffedf

08007d14 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007d14:	b580      	push	{r7, lr}
 8007d16:	b09c      	sub	sp, #112	; 0x70
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007d1c:	236a      	movs	r3, #106	; 0x6a
 8007d1e:	18fb      	adds	r3, r7, r3
 8007d20:	687a      	ldr	r2, [r7, #4]
 8007d22:	2160      	movs	r1, #96	; 0x60
 8007d24:	5a52      	ldrh	r2, [r2, r1]
 8007d26:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	69db      	ldr	r3, [r3, #28]
 8007d2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	689b      	ldr	r3, [r3, #8]
 8007d3e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	228c      	movs	r2, #140	; 0x8c
 8007d44:	589b      	ldr	r3, [r3, r2]
 8007d46:	2b22      	cmp	r3, #34	; 0x22
 8007d48:	d000      	beq.n	8007d4c <UART_RxISR_8BIT_FIFOEN+0x38>
 8007d4a:	e144      	b.n	8007fd6 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007d4c:	235e      	movs	r3, #94	; 0x5e
 8007d4e:	18fb      	adds	r3, r7, r3
 8007d50:	687a      	ldr	r2, [r7, #4]
 8007d52:	2168      	movs	r1, #104	; 0x68
 8007d54:	5a52      	ldrh	r2, [r2, r1]
 8007d56:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007d58:	e0eb      	b.n	8007f32 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007d60:	215c      	movs	r1, #92	; 0x5c
 8007d62:	187b      	adds	r3, r7, r1
 8007d64:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007d66:	187b      	adds	r3, r7, r1
 8007d68:	881b      	ldrh	r3, [r3, #0]
 8007d6a:	b2da      	uxtb	r2, r3
 8007d6c:	236a      	movs	r3, #106	; 0x6a
 8007d6e:	18fb      	adds	r3, r7, r3
 8007d70:	881b      	ldrh	r3, [r3, #0]
 8007d72:	b2d9      	uxtb	r1, r3
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d78:	400a      	ands	r2, r1
 8007d7a:	b2d2      	uxtb	r2, r2
 8007d7c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d82:	1c5a      	adds	r2, r3, #1
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	225e      	movs	r2, #94	; 0x5e
 8007d8c:	5a9b      	ldrh	r3, [r3, r2]
 8007d8e:	b29b      	uxth	r3, r3
 8007d90:	3b01      	subs	r3, #1
 8007d92:	b299      	uxth	r1, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	225e      	movs	r2, #94	; 0x5e
 8007d98:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da4:	2207      	movs	r2, #7
 8007da6:	4013      	ands	r3, r2
 8007da8:	d049      	beq.n	8007e3e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dac:	2201      	movs	r2, #1
 8007dae:	4013      	ands	r3, r2
 8007db0:	d010      	beq.n	8007dd4 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007db2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	4013      	ands	r3, r2
 8007dba:	d00b      	beq.n	8007dd4 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2201      	movs	r2, #1
 8007dc2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2290      	movs	r2, #144	; 0x90
 8007dc8:	589b      	ldr	r3, [r3, r2]
 8007dca:	2201      	movs	r2, #1
 8007dcc:	431a      	orrs	r2, r3
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2190      	movs	r1, #144	; 0x90
 8007dd2:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd6:	2202      	movs	r2, #2
 8007dd8:	4013      	ands	r3, r2
 8007dda:	d00f      	beq.n	8007dfc <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007ddc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007dde:	2201      	movs	r2, #1
 8007de0:	4013      	ands	r3, r2
 8007de2:	d00b      	beq.n	8007dfc <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	2202      	movs	r2, #2
 8007dea:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2290      	movs	r2, #144	; 0x90
 8007df0:	589b      	ldr	r3, [r3, r2]
 8007df2:	2204      	movs	r2, #4
 8007df4:	431a      	orrs	r2, r3
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	2190      	movs	r1, #144	; 0x90
 8007dfa:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dfe:	2204      	movs	r2, #4
 8007e00:	4013      	ands	r3, r2
 8007e02:	d00f      	beq.n	8007e24 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007e04:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e06:	2201      	movs	r2, #1
 8007e08:	4013      	ands	r3, r2
 8007e0a:	d00b      	beq.n	8007e24 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	2204      	movs	r2, #4
 8007e12:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	2290      	movs	r2, #144	; 0x90
 8007e18:	589b      	ldr	r3, [r3, r2]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	431a      	orrs	r2, r3
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2190      	movs	r1, #144	; 0x90
 8007e22:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2290      	movs	r2, #144	; 0x90
 8007e28:	589b      	ldr	r3, [r3, r2]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d007      	beq.n	8007e3e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	0018      	movs	r0, r3
 8007e32:	f7fe fd08 	bl	8006846 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2290      	movs	r2, #144	; 0x90
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	225e      	movs	r2, #94	; 0x5e
 8007e42:	5a9b      	ldrh	r3, [r3, r2]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d173      	bne.n	8007f32 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e4a:	f3ef 8310 	mrs	r3, PRIMASK
 8007e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e52:	65bb      	str	r3, [r7, #88]	; 0x58
 8007e54:	2301      	movs	r3, #1
 8007e56:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e5a:	f383 8810 	msr	PRIMASK, r3
}
 8007e5e:	46c0      	nop			; (mov r8, r8)
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	681a      	ldr	r2, [r3, #0]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4961      	ldr	r1, [pc, #388]	; (8007ff0 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007e6c:	400a      	ands	r2, r1
 8007e6e:	601a      	str	r2, [r3, #0]
 8007e70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e76:	f383 8810 	msr	PRIMASK, r3
}
 8007e7a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e7c:	f3ef 8310 	mrs	r3, PRIMASK
 8007e80:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007e82:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e84:	657b      	str	r3, [r7, #84]	; 0x54
 8007e86:	2301      	movs	r3, #1
 8007e88:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e8c:	f383 8810 	msr	PRIMASK, r3
}
 8007e90:	46c0      	nop			; (mov r8, r8)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	689a      	ldr	r2, [r3, #8]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	4955      	ldr	r1, [pc, #340]	; (8007ff4 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007e9e:	400a      	ands	r2, r1
 8007ea0:	609a      	str	r2, [r3, #8]
 8007ea2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007ea4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea8:	f383 8810 	msr	PRIMASK, r3
}
 8007eac:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	228c      	movs	r2, #140	; 0x8c
 8007eb2:	2120      	movs	r1, #32
 8007eb4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	2200      	movs	r2, #0
 8007eba:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007ec6:	2b01      	cmp	r3, #1
 8007ec8:	d12f      	bne.n	8007f2a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8007ed4:	623b      	str	r3, [r7, #32]
  return(result);
 8007ed6:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed8:	653b      	str	r3, [r7, #80]	; 0x50
 8007eda:	2301      	movs	r3, #1
 8007edc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ee0:	f383 8810 	msr	PRIMASK, r3
}
 8007ee4:	46c0      	nop			; (mov r8, r8)
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	2110      	movs	r1, #16
 8007ef2:	438a      	bics	r2, r1
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	f383 8810 	msr	PRIMASK, r3
}
 8007f00:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69db      	ldr	r3, [r3, #28]
 8007f08:	2210      	movs	r2, #16
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b10      	cmp	r3, #16
 8007f0e:	d103      	bne.n	8007f18 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	2210      	movs	r2, #16
 8007f16:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	225c      	movs	r2, #92	; 0x5c
 8007f1c:	5a9a      	ldrh	r2, [r3, r2]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	0011      	movs	r1, r2
 8007f22:	0018      	movs	r0, r3
 8007f24:	f7fe fc97 	bl	8006856 <HAL_UARTEx_RxEventCallback>
 8007f28:	e003      	b.n	8007f32 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	0018      	movs	r0, r3
 8007f2e:	f7f9 fbf9 	bl	8001724 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f32:	235e      	movs	r3, #94	; 0x5e
 8007f34:	18fb      	adds	r3, r7, r3
 8007f36:	881b      	ldrh	r3, [r3, #0]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d004      	beq.n	8007f46 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f3e:	2220      	movs	r2, #32
 8007f40:	4013      	ands	r3, r2
 8007f42:	d000      	beq.n	8007f46 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007f44:	e709      	b.n	8007d5a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007f46:	204e      	movs	r0, #78	; 0x4e
 8007f48:	183b      	adds	r3, r7, r0
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	215e      	movs	r1, #94	; 0x5e
 8007f4e:	5a52      	ldrh	r2, [r2, r1]
 8007f50:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007f52:	0001      	movs	r1, r0
 8007f54:	187b      	adds	r3, r7, r1
 8007f56:	881b      	ldrh	r3, [r3, #0]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d044      	beq.n	8007fe6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2268      	movs	r2, #104	; 0x68
 8007f60:	5a9b      	ldrh	r3, [r3, r2]
 8007f62:	187a      	adds	r2, r7, r1
 8007f64:	8812      	ldrh	r2, [r2, #0]
 8007f66:	429a      	cmp	r2, r3
 8007f68:	d23d      	bcs.n	8007fe6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f6a:	f3ef 8310 	mrs	r3, PRIMASK
 8007f6e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f70:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007f72:	64bb      	str	r3, [r7, #72]	; 0x48
 8007f74:	2301      	movs	r3, #1
 8007f76:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f383 8810 	msr	PRIMASK, r3
}
 8007f7e:	46c0      	nop			; (mov r8, r8)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	689a      	ldr	r2, [r3, #8]
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	491b      	ldr	r1, [pc, #108]	; (8007ff8 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007f8c:	400a      	ands	r2, r1
 8007f8e:	609a      	str	r2, [r3, #8]
 8007f90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	f383 8810 	msr	PRIMASK, r3
}
 8007f9a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	4a17      	ldr	r2, [pc, #92]	; (8007ffc <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8007fa0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8007fa6:	617b      	str	r3, [r7, #20]
  return(result);
 8007fa8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007faa:	647b      	str	r3, [r7, #68]	; 0x44
 8007fac:	2301      	movs	r3, #1
 8007fae:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fb0:	69bb      	ldr	r3, [r7, #24]
 8007fb2:	f383 8810 	msr	PRIMASK, r3
}
 8007fb6:	46c0      	nop			; (mov r8, r8)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2120      	movs	r1, #32
 8007fc4:	430a      	orrs	r2, r1
 8007fc6:	601a      	str	r2, [r3, #0]
 8007fc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007fca:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	f383 8810 	msr	PRIMASK, r3
}
 8007fd2:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fd4:	e007      	b.n	8007fe6 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	699a      	ldr	r2, [r3, #24]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	2108      	movs	r1, #8
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	619a      	str	r2, [r3, #24]
}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	b01c      	add	sp, #112	; 0x70
 8007fec:	bd80      	pop	{r7, pc}
 8007fee:	46c0      	nop			; (mov r8, r8)
 8007ff0:	fffffeff 	.word	0xfffffeff
 8007ff4:	effffffe 	.word	0xeffffffe
 8007ff8:	efffffff 	.word	0xefffffff
 8007ffc:	08007a2d 	.word	0x08007a2d

08008000 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008000:	b580      	push	{r7, lr}
 8008002:	b09e      	sub	sp, #120	; 0x78
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008008:	2372      	movs	r3, #114	; 0x72
 800800a:	18fb      	adds	r3, r7, r3
 800800c:	687a      	ldr	r2, [r7, #4]
 800800e:	2160      	movs	r1, #96	; 0x60
 8008010:	5a52      	ldrh	r2, [r2, r1]
 8008012:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	69db      	ldr	r3, [r3, #28]
 800801a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	689b      	ldr	r3, [r3, #8]
 800802a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	228c      	movs	r2, #140	; 0x8c
 8008030:	589b      	ldr	r3, [r3, r2]
 8008032:	2b22      	cmp	r3, #34	; 0x22
 8008034:	d000      	beq.n	8008038 <UART_RxISR_16BIT_FIFOEN+0x38>
 8008036:	e144      	b.n	80082c2 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008038:	2366      	movs	r3, #102	; 0x66
 800803a:	18fb      	adds	r3, r7, r3
 800803c:	687a      	ldr	r2, [r7, #4]
 800803e:	2168      	movs	r1, #104	; 0x68
 8008040:	5a52      	ldrh	r2, [r2, r1]
 8008042:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008044:	e0eb      	b.n	800821e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800804c:	2164      	movs	r1, #100	; 0x64
 800804e:	187b      	adds	r3, r7, r1
 8008050:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008056:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8008058:	187b      	adds	r3, r7, r1
 800805a:	2272      	movs	r2, #114	; 0x72
 800805c:	18ba      	adds	r2, r7, r2
 800805e:	881b      	ldrh	r3, [r3, #0]
 8008060:	8812      	ldrh	r2, [r2, #0]
 8008062:	4013      	ands	r3, r2
 8008064:	b29a      	uxth	r2, r3
 8008066:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008068:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800806e:	1c9a      	adds	r2, r3, #2
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	225e      	movs	r2, #94	; 0x5e
 8008078:	5a9b      	ldrh	r3, [r3, r2]
 800807a:	b29b      	uxth	r3, r3
 800807c:	3b01      	subs	r3, #1
 800807e:	b299      	uxth	r1, r3
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	225e      	movs	r2, #94	; 0x5e
 8008084:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800808e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008090:	2207      	movs	r2, #7
 8008092:	4013      	ands	r3, r2
 8008094:	d049      	beq.n	800812a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008096:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008098:	2201      	movs	r2, #1
 800809a:	4013      	ands	r3, r2
 800809c:	d010      	beq.n	80080c0 <UART_RxISR_16BIT_FIFOEN+0xc0>
 800809e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80080a0:	2380      	movs	r3, #128	; 0x80
 80080a2:	005b      	lsls	r3, r3, #1
 80080a4:	4013      	ands	r3, r2
 80080a6:	d00b      	beq.n	80080c0 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	2201      	movs	r2, #1
 80080ae:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2290      	movs	r2, #144	; 0x90
 80080b4:	589b      	ldr	r3, [r3, r2]
 80080b6:	2201      	movs	r2, #1
 80080b8:	431a      	orrs	r2, r3
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2190      	movs	r1, #144	; 0x90
 80080be:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080c2:	2202      	movs	r2, #2
 80080c4:	4013      	ands	r3, r2
 80080c6:	d00f      	beq.n	80080e8 <UART_RxISR_16BIT_FIFOEN+0xe8>
 80080c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080ca:	2201      	movs	r2, #1
 80080cc:	4013      	ands	r3, r2
 80080ce:	d00b      	beq.n	80080e8 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2202      	movs	r2, #2
 80080d6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2290      	movs	r2, #144	; 0x90
 80080dc:	589b      	ldr	r3, [r3, r2]
 80080de:	2204      	movs	r2, #4
 80080e0:	431a      	orrs	r2, r3
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2190      	movs	r1, #144	; 0x90
 80080e6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80080e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80080ea:	2204      	movs	r2, #4
 80080ec:	4013      	ands	r3, r2
 80080ee:	d00f      	beq.n	8008110 <UART_RxISR_16BIT_FIFOEN+0x110>
 80080f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80080f2:	2201      	movs	r2, #1
 80080f4:	4013      	ands	r3, r2
 80080f6:	d00b      	beq.n	8008110 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	2204      	movs	r2, #4
 80080fe:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2290      	movs	r2, #144	; 0x90
 8008104:	589b      	ldr	r3, [r3, r2]
 8008106:	2202      	movs	r2, #2
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2190      	movs	r1, #144	; 0x90
 800810e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	2290      	movs	r2, #144	; 0x90
 8008114:	589b      	ldr	r3, [r3, r2]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d007      	beq.n	800812a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	0018      	movs	r0, r3
 800811e:	f7fe fb92 	bl	8006846 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	2290      	movs	r2, #144	; 0x90
 8008126:	2100      	movs	r1, #0
 8008128:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	225e      	movs	r2, #94	; 0x5e
 800812e:	5a9b      	ldrh	r3, [r3, r2]
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d173      	bne.n	800821e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008136:	f3ef 8310 	mrs	r3, PRIMASK
 800813a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800813c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800813e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008140:	2301      	movs	r3, #1
 8008142:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008144:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008146:	f383 8810 	msr	PRIMASK, r3
}
 800814a:	46c0      	nop			; (mov r8, r8)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	681a      	ldr	r2, [r3, #0]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	4961      	ldr	r1, [pc, #388]	; (80082dc <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008158:	400a      	ands	r2, r1
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800815e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	f383 8810 	msr	PRIMASK, r3
}
 8008166:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008168:	f3ef 8310 	mrs	r3, PRIMASK
 800816c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800816e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008170:	65bb      	str	r3, [r7, #88]	; 0x58
 8008172:	2301      	movs	r3, #1
 8008174:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008176:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008178:	f383 8810 	msr	PRIMASK, r3
}
 800817c:	46c0      	nop			; (mov r8, r8)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	689a      	ldr	r2, [r3, #8]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	4955      	ldr	r1, [pc, #340]	; (80082e0 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800818a:	400a      	ands	r2, r1
 800818c:	609a      	str	r2, [r3, #8]
 800818e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008190:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008192:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008194:	f383 8810 	msr	PRIMASK, r3
}
 8008198:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	228c      	movs	r2, #140	; 0x8c
 800819e:	2120      	movs	r1, #32
 80081a0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d12f      	bne.n	8008216 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081bc:	f3ef 8310 	mrs	r3, PRIMASK
 80081c0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081c4:	657b      	str	r3, [r7, #84]	; 0x54
 80081c6:	2301      	movs	r3, #1
 80081c8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081cc:	f383 8810 	msr	PRIMASK, r3
}
 80081d0:	46c0      	nop			; (mov r8, r8)
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681a      	ldr	r2, [r3, #0]
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2110      	movs	r1, #16
 80081de:	438a      	bics	r2, r1
 80081e0:	601a      	str	r2, [r3, #0]
 80081e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081e8:	f383 8810 	msr	PRIMASK, r3
}
 80081ec:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	69db      	ldr	r3, [r3, #28]
 80081f4:	2210      	movs	r2, #16
 80081f6:	4013      	ands	r3, r2
 80081f8:	2b10      	cmp	r3, #16
 80081fa:	d103      	bne.n	8008204 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	2210      	movs	r2, #16
 8008202:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	225c      	movs	r2, #92	; 0x5c
 8008208:	5a9a      	ldrh	r2, [r3, r2]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	0011      	movs	r1, r2
 800820e:	0018      	movs	r0, r3
 8008210:	f7fe fb21 	bl	8006856 <HAL_UARTEx_RxEventCallback>
 8008214:	e003      	b.n	800821e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	0018      	movs	r0, r3
 800821a:	f7f9 fa83 	bl	8001724 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800821e:	2366      	movs	r3, #102	; 0x66
 8008220:	18fb      	adds	r3, r7, r3
 8008222:	881b      	ldrh	r3, [r3, #0]
 8008224:	2b00      	cmp	r3, #0
 8008226:	d004      	beq.n	8008232 <UART_RxISR_16BIT_FIFOEN+0x232>
 8008228:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800822a:	2220      	movs	r2, #32
 800822c:	4013      	ands	r3, r2
 800822e:	d000      	beq.n	8008232 <UART_RxISR_16BIT_FIFOEN+0x232>
 8008230:	e709      	b.n	8008046 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008232:	2052      	movs	r0, #82	; 0x52
 8008234:	183b      	adds	r3, r7, r0
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	215e      	movs	r1, #94	; 0x5e
 800823a:	5a52      	ldrh	r2, [r2, r1]
 800823c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800823e:	0001      	movs	r1, r0
 8008240:	187b      	adds	r3, r7, r1
 8008242:	881b      	ldrh	r3, [r3, #0]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d044      	beq.n	80082d2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2268      	movs	r2, #104	; 0x68
 800824c:	5a9b      	ldrh	r3, [r3, r2]
 800824e:	187a      	adds	r2, r7, r1
 8008250:	8812      	ldrh	r2, [r2, #0]
 8008252:	429a      	cmp	r2, r3
 8008254:	d23d      	bcs.n	80082d2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008256:	f3ef 8310 	mrs	r3, PRIMASK
 800825a:	60fb      	str	r3, [r7, #12]
  return(result);
 800825c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800825e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008260:	2301      	movs	r3, #1
 8008262:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	f383 8810 	msr	PRIMASK, r3
}
 800826a:	46c0      	nop			; (mov r8, r8)
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	689a      	ldr	r2, [r3, #8]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	491b      	ldr	r1, [pc, #108]	; (80082e4 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8008278:	400a      	ands	r2, r1
 800827a:	609a      	str	r2, [r3, #8]
 800827c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800827e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008280:	697b      	ldr	r3, [r7, #20]
 8008282:	f383 8810 	msr	PRIMASK, r3
}
 8008286:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	4a17      	ldr	r2, [pc, #92]	; (80082e8 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 800828c:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800828e:	f3ef 8310 	mrs	r3, PRIMASK
 8008292:	61bb      	str	r3, [r7, #24]
  return(result);
 8008294:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008296:	64bb      	str	r3, [r7, #72]	; 0x48
 8008298:	2301      	movs	r3, #1
 800829a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829c:	69fb      	ldr	r3, [r7, #28]
 800829e:	f383 8810 	msr	PRIMASK, r3
}
 80082a2:	46c0      	nop			; (mov r8, r8)
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2120      	movs	r1, #32
 80082b0:	430a      	orrs	r2, r1
 80082b2:	601a      	str	r2, [r3, #0]
 80082b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80082b6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80082b8:	6a3b      	ldr	r3, [r7, #32]
 80082ba:	f383 8810 	msr	PRIMASK, r3
}
 80082be:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80082c0:	e007      	b.n	80082d2 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	699a      	ldr	r2, [r3, #24]
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2108      	movs	r1, #8
 80082ce:	430a      	orrs	r2, r1
 80082d0:	619a      	str	r2, [r3, #24]
}
 80082d2:	46c0      	nop			; (mov r8, r8)
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b01e      	add	sp, #120	; 0x78
 80082d8:	bd80      	pop	{r7, pc}
 80082da:	46c0      	nop			; (mov r8, r8)
 80082dc:	fffffeff 	.word	0xfffffeff
 80082e0:	effffffe 	.word	0xeffffffe
 80082e4:	efffffff 	.word	0xefffffff
 80082e8:	08007ba1 	.word	0x08007ba1

080082ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2284      	movs	r2, #132	; 0x84
 80082f8:	5c9b      	ldrb	r3, [r3, r2]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d101      	bne.n	8008302 <HAL_UARTEx_DisableFifoMode+0x16>
 80082fe:	2302      	movs	r3, #2
 8008300:	e027      	b.n	8008352 <HAL_UARTEx_DisableFifoMode+0x66>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2284      	movs	r2, #132	; 0x84
 8008306:	2101      	movs	r1, #1
 8008308:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2288      	movs	r2, #136	; 0x88
 800830e:	2124      	movs	r1, #36	; 0x24
 8008310:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	2101      	movs	r1, #1
 8008326:	438a      	bics	r2, r1
 8008328:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	4a0b      	ldr	r2, [pc, #44]	; (800835c <HAL_UARTEx_DisableFifoMode+0x70>)
 800832e:	4013      	ands	r3, r2
 8008330:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2288      	movs	r2, #136	; 0x88
 8008344:	2120      	movs	r1, #32
 8008346:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2284      	movs	r2, #132	; 0x84
 800834c:	2100      	movs	r1, #0
 800834e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	0018      	movs	r0, r3
 8008354:	46bd      	mov	sp, r7
 8008356:	b004      	add	sp, #16
 8008358:	bd80      	pop	{r7, pc}
 800835a:	46c0      	nop			; (mov r8, r8)
 800835c:	dfffffff 	.word	0xdfffffff

08008360 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	2284      	movs	r2, #132	; 0x84
 800836e:	5c9b      	ldrb	r3, [r3, r2]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d101      	bne.n	8008378 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008374:	2302      	movs	r3, #2
 8008376:	e02e      	b.n	80083d6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	2284      	movs	r2, #132	; 0x84
 800837c:	2101      	movs	r1, #1
 800837e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2288      	movs	r2, #136	; 0x88
 8008384:	2124      	movs	r1, #36	; 0x24
 8008386:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2101      	movs	r1, #1
 800839c:	438a      	bics	r2, r1
 800839e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	689b      	ldr	r3, [r3, #8]
 80083a6:	00db      	lsls	r3, r3, #3
 80083a8:	08d9      	lsrs	r1, r3, #3
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	683a      	ldr	r2, [r7, #0]
 80083b0:	430a      	orrs	r2, r1
 80083b2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	0018      	movs	r0, r3
 80083b8:	f000 f854 	bl	8008464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	68fa      	ldr	r2, [r7, #12]
 80083c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2288      	movs	r2, #136	; 0x88
 80083c8:	2120      	movs	r1, #32
 80083ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2284      	movs	r2, #132	; 0x84
 80083d0:	2100      	movs	r1, #0
 80083d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80083d4:	2300      	movs	r3, #0
}
 80083d6:	0018      	movs	r0, r3
 80083d8:	46bd      	mov	sp, r7
 80083da:	b004      	add	sp, #16
 80083dc:	bd80      	pop	{r7, pc}
	...

080083e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b084      	sub	sp, #16
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
 80083e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2284      	movs	r2, #132	; 0x84
 80083ee:	5c9b      	ldrb	r3, [r3, r2]
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d101      	bne.n	80083f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80083f4:	2302      	movs	r3, #2
 80083f6:	e02f      	b.n	8008458 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	2284      	movs	r2, #132	; 0x84
 80083fc:	2101      	movs	r1, #1
 80083fe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2288      	movs	r2, #136	; 0x88
 8008404:	2124      	movs	r1, #36	; 0x24
 8008406:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	681a      	ldr	r2, [r3, #0]
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	2101      	movs	r1, #1
 800841c:	438a      	bics	r2, r1
 800841e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	689b      	ldr	r3, [r3, #8]
 8008426:	4a0e      	ldr	r2, [pc, #56]	; (8008460 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008428:	4013      	ands	r3, r2
 800842a:	0019      	movs	r1, r3
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	683a      	ldr	r2, [r7, #0]
 8008432:	430a      	orrs	r2, r1
 8008434:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0018      	movs	r0, r3
 800843a:	f000 f813 	bl	8008464 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	68fa      	ldr	r2, [r7, #12]
 8008444:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2288      	movs	r2, #136	; 0x88
 800844a:	2120      	movs	r1, #32
 800844c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2284      	movs	r2, #132	; 0x84
 8008452:	2100      	movs	r1, #0
 8008454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	0018      	movs	r0, r3
 800845a:	46bd      	mov	sp, r7
 800845c:	b004      	add	sp, #16
 800845e:	bd80      	pop	{r7, pc}
 8008460:	f1ffffff 	.word	0xf1ffffff

08008464 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008470:	2b00      	cmp	r3, #0
 8008472:	d108      	bne.n	8008486 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	226a      	movs	r2, #106	; 0x6a
 8008478:	2101      	movs	r1, #1
 800847a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2268      	movs	r2, #104	; 0x68
 8008480:	2101      	movs	r1, #1
 8008482:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008484:	e043      	b.n	800850e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008486:	260f      	movs	r6, #15
 8008488:	19bb      	adds	r3, r7, r6
 800848a:	2208      	movs	r2, #8
 800848c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800848e:	200e      	movs	r0, #14
 8008490:	183b      	adds	r3, r7, r0
 8008492:	2208      	movs	r2, #8
 8008494:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	0e5b      	lsrs	r3, r3, #25
 800849e:	b2da      	uxtb	r2, r3
 80084a0:	240d      	movs	r4, #13
 80084a2:	193b      	adds	r3, r7, r4
 80084a4:	2107      	movs	r1, #7
 80084a6:	400a      	ands	r2, r1
 80084a8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	0f5b      	lsrs	r3, r3, #29
 80084b2:	b2da      	uxtb	r2, r3
 80084b4:	250c      	movs	r5, #12
 80084b6:	197b      	adds	r3, r7, r5
 80084b8:	2107      	movs	r1, #7
 80084ba:	400a      	ands	r2, r1
 80084bc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084be:	183b      	adds	r3, r7, r0
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	197a      	adds	r2, r7, r5
 80084c4:	7812      	ldrb	r2, [r2, #0]
 80084c6:	4914      	ldr	r1, [pc, #80]	; (8008518 <UARTEx_SetNbDataToProcess+0xb4>)
 80084c8:	5c8a      	ldrb	r2, [r1, r2]
 80084ca:	435a      	muls	r2, r3
 80084cc:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80084ce:	197b      	adds	r3, r7, r5
 80084d0:	781b      	ldrb	r3, [r3, #0]
 80084d2:	4a12      	ldr	r2, [pc, #72]	; (800851c <UARTEx_SetNbDataToProcess+0xb8>)
 80084d4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80084d6:	0019      	movs	r1, r3
 80084d8:	f7f7 feaa 	bl	8000230 <__divsi3>
 80084dc:	0003      	movs	r3, r0
 80084de:	b299      	uxth	r1, r3
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	226a      	movs	r2, #106	; 0x6a
 80084e4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084e6:	19bb      	adds	r3, r7, r6
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	193a      	adds	r2, r7, r4
 80084ec:	7812      	ldrb	r2, [r2, #0]
 80084ee:	490a      	ldr	r1, [pc, #40]	; (8008518 <UARTEx_SetNbDataToProcess+0xb4>)
 80084f0:	5c8a      	ldrb	r2, [r1, r2]
 80084f2:	435a      	muls	r2, r3
 80084f4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80084f6:	193b      	adds	r3, r7, r4
 80084f8:	781b      	ldrb	r3, [r3, #0]
 80084fa:	4a08      	ldr	r2, [pc, #32]	; (800851c <UARTEx_SetNbDataToProcess+0xb8>)
 80084fc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80084fe:	0019      	movs	r1, r3
 8008500:	f7f7 fe96 	bl	8000230 <__divsi3>
 8008504:	0003      	movs	r3, r0
 8008506:	b299      	uxth	r1, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2268      	movs	r2, #104	; 0x68
 800850c:	5299      	strh	r1, [r3, r2]
}
 800850e:	46c0      	nop			; (mov r8, r8)
 8008510:	46bd      	mov	sp, r7
 8008512:	b005      	add	sp, #20
 8008514:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008516:	46c0      	nop			; (mov r8, r8)
 8008518:	0800c640 	.word	0x0800c640
 800851c:	0800c648 	.word	0x0800c648

08008520 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b084      	sub	sp, #16
 8008524:	af00      	add	r7, sp, #0
 8008526:	0002      	movs	r2, r0
 8008528:	1dbb      	adds	r3, r7, #6
 800852a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800852c:	2300      	movs	r3, #0
 800852e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008530:	1dbb      	adds	r3, r7, #6
 8008532:	2200      	movs	r2, #0
 8008534:	5e9b      	ldrsh	r3, [r3, r2]
 8008536:	2b84      	cmp	r3, #132	; 0x84
 8008538:	d006      	beq.n	8008548 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 800853a:	1dbb      	adds	r3, r7, #6
 800853c:	2200      	movs	r2, #0
 800853e:	5e9a      	ldrsh	r2, [r3, r2]
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	18d3      	adds	r3, r2, r3
 8008544:	3303      	adds	r3, #3
 8008546:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008548:	68fb      	ldr	r3, [r7, #12]
}
 800854a:	0018      	movs	r0, r3
 800854c:	46bd      	mov	sp, r7
 800854e:	b004      	add	sp, #16
 8008550:	bd80      	pop	{r7, pc}

08008552 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008552:	b580      	push	{r7, lr}
 8008554:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008556:	f000 fcab 	bl	8008eb0 <vTaskStartScheduler>
  
  return osOK;
 800855a:	2300      	movs	r3, #0
}
 800855c:	0018      	movs	r0, r3
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}

08008562 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008562:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008564:	b087      	sub	sp, #28
 8008566:	af02      	add	r7, sp, #8
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	685c      	ldr	r4, [r3, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008578:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2208      	movs	r2, #8
 800857e:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008580:	0018      	movs	r0, r3
 8008582:	f7ff ffcd 	bl	8008520 <makeFreeRtosPriority>
 8008586:	0001      	movs	r1, r0
 8008588:	683a      	ldr	r2, [r7, #0]
 800858a:	230c      	movs	r3, #12
 800858c:	18fb      	adds	r3, r7, r3
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	9100      	str	r1, [sp, #0]
 8008592:	0013      	movs	r3, r2
 8008594:	0032      	movs	r2, r6
 8008596:	0029      	movs	r1, r5
 8008598:	0020      	movs	r0, r4
 800859a:	f000 fb34 	bl	8008c06 <xTaskCreate>
 800859e:	0003      	movs	r3, r0
 80085a0:	2b01      	cmp	r3, #1
 80085a2:	d001      	beq.n	80085a8 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 80085a4:	2300      	movs	r3, #0
 80085a6:	e000      	b.n	80085aa <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 80085a8:	68fb      	ldr	r3, [r7, #12]
}
 80085aa:	0018      	movs	r0, r3
 80085ac:	46bd      	mov	sp, r7
 80085ae:	b005      	add	sp, #20
 80085b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080085b2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80085b2:	b580      	push	{r7, lr}
 80085b4:	b084      	sub	sp, #16
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <osDelay+0x16>
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	e000      	b.n	80085ca <osDelay+0x18>
 80085c8:	2301      	movs	r3, #1
 80085ca:	0018      	movs	r0, r3
 80085cc:	f000 fc4a 	bl	8008e64 <vTaskDelay>
  
  return osOK;
 80085d0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80085d2:	0018      	movs	r0, r3
 80085d4:	46bd      	mov	sp, r7
 80085d6:	b004      	add	sp, #16
 80085d8:	bd80      	pop	{r7, pc}

080085da <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80085da:	b580      	push	{r7, lr}
 80085dc:	b082      	sub	sp, #8
 80085de:	af00      	add	r7, sp, #0
 80085e0:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	3308      	adds	r3, #8
 80085e6:	001a      	movs	r2, r3
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	4252      	negs	r2, r2
 80085f2:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	3308      	adds	r3, #8
 80085f8:	001a      	movs	r2, r3
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	3308      	adds	r3, #8
 8008602:	001a      	movs	r2, r3
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800860e:	46c0      	nop			; (mov r8, r8)
 8008610:	46bd      	mov	sp, r7
 8008612:	b002      	add	sp, #8
 8008614:	bd80      	pop	{r7, pc}

08008616 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008616:	b580      	push	{r7, lr}
 8008618:	b082      	sub	sp, #8
 800861a:	af00      	add	r7, sp, #0
 800861c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2200      	movs	r2, #0
 8008622:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008624:	46c0      	nop			; (mov r8, r8)
 8008626:	46bd      	mov	sp, r7
 8008628:	b002      	add	sp, #8
 800862a:	bd80      	pop	{r7, pc}

0800862c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b084      	sub	sp, #16
 8008630:	af00      	add	r7, sp, #0
 8008632:	6078      	str	r0, [r7, #4]
 8008634:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800863c:	683b      	ldr	r3, [r7, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	689a      	ldr	r2, [r3, #8]
 8008646:	683b      	ldr	r3, [r7, #0]
 8008648:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	683a      	ldr	r2, [r7, #0]
 8008650:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	683a      	ldr	r2, [r7, #0]
 8008656:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008658:	683b      	ldr	r3, [r7, #0]
 800865a:	687a      	ldr	r2, [r7, #4]
 800865c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	1c5a      	adds	r2, r3, #1
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	601a      	str	r2, [r3, #0]
}
 8008668:	46c0      	nop			; (mov r8, r8)
 800866a:	46bd      	mov	sp, r7
 800866c:	b004      	add	sp, #16
 800866e:	bd80      	pop	{r7, pc}

08008670 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b084      	sub	sp, #16
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
 8008678:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	3301      	adds	r3, #1
 8008684:	d103      	bne.n	800868e <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	691b      	ldr	r3, [r3, #16]
 800868a:	60fb      	str	r3, [r7, #12]
 800868c:	e00c      	b.n	80086a8 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	3308      	adds	r3, #8
 8008692:	60fb      	str	r3, [r7, #12]
 8008694:	e002      	b.n	800869c <vListInsert+0x2c>
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	60fb      	str	r3, [r7, #12]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	685b      	ldr	r3, [r3, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d2f6      	bcs.n	8008696 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	685a      	ldr	r2, [r3, #4]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	685b      	ldr	r3, [r3, #4]
 80086b4:	683a      	ldr	r2, [r7, #0]
 80086b6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80086b8:	683b      	ldr	r3, [r7, #0]
 80086ba:	68fa      	ldr	r2, [r7, #12]
 80086bc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	683a      	ldr	r2, [r7, #0]
 80086c2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	1c5a      	adds	r2, r3, #1
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	601a      	str	r2, [r3, #0]
}
 80086d4:	46c0      	nop			; (mov r8, r8)
 80086d6:	46bd      	mov	sp, r7
 80086d8:	b004      	add	sp, #16
 80086da:	bd80      	pop	{r7, pc}

080086dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b084      	sub	sp, #16
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	685b      	ldr	r3, [r3, #4]
 80086ee:	687a      	ldr	r2, [r7, #4]
 80086f0:	6892      	ldr	r2, [r2, #8]
 80086f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	689b      	ldr	r3, [r3, #8]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	6852      	ldr	r2, [r2, #4]
 80086fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	685b      	ldr	r3, [r3, #4]
 8008702:	687a      	ldr	r2, [r7, #4]
 8008704:	429a      	cmp	r2, r3
 8008706:	d103      	bne.n	8008710 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	689a      	ldr	r2, [r3, #8]
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2200      	movs	r2, #0
 8008714:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	1e5a      	subs	r2, r3, #1
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	681b      	ldr	r3, [r3, #0]
}
 8008724:	0018      	movs	r0, r3
 8008726:	46bd      	mov	sp, r7
 8008728:	b004      	add	sp, #16
 800872a:	bd80      	pop	{r7, pc}

0800872c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b084      	sub	sp, #16
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
 8008734:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	2b00      	cmp	r3, #0
 800873e:	d101      	bne.n	8008744 <xQueueGenericReset+0x18>
 8008740:	b672      	cpsid	i
 8008742:	e7fe      	b.n	8008742 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8008744:	f001 f914 	bl	8009970 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008754:	434b      	muls	r3, r1
 8008756:	18d2      	adds	r2, r2, r3
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681a      	ldr	r2, [r3, #0]
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008772:	1e59      	subs	r1, r3, #1
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008778:	434b      	muls	r3, r1
 800877a:	18d2      	adds	r2, r2, r3
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2244      	movs	r2, #68	; 0x44
 8008784:	21ff      	movs	r1, #255	; 0xff
 8008786:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	2245      	movs	r2, #69	; 0x45
 800878c:	21ff      	movs	r1, #255	; 0xff
 800878e:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d10d      	bne.n	80087b2 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	691b      	ldr	r3, [r3, #16]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d013      	beq.n	80087c6 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	3310      	adds	r3, #16
 80087a2:	0018      	movs	r0, r3
 80087a4:	f000 fd72 	bl	800928c <xTaskRemoveFromEventList>
 80087a8:	1e03      	subs	r3, r0, #0
 80087aa:	d00c      	beq.n	80087c6 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80087ac:	f001 f8d0 	bl	8009950 <vPortYield>
 80087b0:	e009      	b.n	80087c6 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80087b2:	68fb      	ldr	r3, [r7, #12]
 80087b4:	3310      	adds	r3, #16
 80087b6:	0018      	movs	r0, r3
 80087b8:	f7ff ff0f 	bl	80085da <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	3324      	adds	r3, #36	; 0x24
 80087c0:	0018      	movs	r0, r3
 80087c2:	f7ff ff0a 	bl	80085da <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80087c6:	f001 f8e5 	bl	8009994 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80087ca:	2301      	movs	r3, #1
}
 80087cc:	0018      	movs	r0, r3
 80087ce:	46bd      	mov	sp, r7
 80087d0:	b004      	add	sp, #16
 80087d2:	bd80      	pop	{r7, pc}

080087d4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80087d4:	b590      	push	{r4, r7, lr}
 80087d6:	b08b      	sub	sp, #44	; 0x2c
 80087d8:	af02      	add	r7, sp, #8
 80087da:	60f8      	str	r0, [r7, #12]
 80087dc:	60b9      	str	r1, [r7, #8]
 80087de:	1dfb      	adds	r3, r7, #7
 80087e0:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d101      	bne.n	80087ec <xQueueGenericCreate+0x18>
 80087e8:	b672      	cpsid	i
 80087ea:	e7fe      	b.n	80087ea <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	68ba      	ldr	r2, [r7, #8]
 80087f0:	4353      	muls	r3, r2
 80087f2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80087f4:	69fb      	ldr	r3, [r7, #28]
 80087f6:	3348      	adds	r3, #72	; 0x48
 80087f8:	0018      	movs	r0, r3
 80087fa:	f001 f951 	bl	8009aa0 <pvPortMalloc>
 80087fe:	0003      	movs	r3, r0
 8008800:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8008802:	69bb      	ldr	r3, [r7, #24]
 8008804:	2b00      	cmp	r3, #0
 8008806:	d00e      	beq.n	8008826 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800880c:	697b      	ldr	r3, [r7, #20]
 800880e:	3348      	adds	r3, #72	; 0x48
 8008810:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008812:	1dfb      	adds	r3, r7, #7
 8008814:	781c      	ldrb	r4, [r3, #0]
 8008816:	697a      	ldr	r2, [r7, #20]
 8008818:	68b9      	ldr	r1, [r7, #8]
 800881a:	68f8      	ldr	r0, [r7, #12]
 800881c:	69bb      	ldr	r3, [r7, #24]
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	0023      	movs	r3, r4
 8008822:	f000 f805 	bl	8008830 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008826:	69bb      	ldr	r3, [r7, #24]
	}
 8008828:	0018      	movs	r0, r3
 800882a:	46bd      	mov	sp, r7
 800882c:	b009      	add	sp, #36	; 0x24
 800882e:	bd90      	pop	{r4, r7, pc}

08008830 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b084      	sub	sp, #16
 8008834:	af00      	add	r7, sp, #0
 8008836:	60f8      	str	r0, [r7, #12]
 8008838:	60b9      	str	r1, [r7, #8]
 800883a:	607a      	str	r2, [r7, #4]
 800883c:	001a      	movs	r2, r3
 800883e:	1cfb      	adds	r3, r7, #3
 8008840:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d103      	bne.n	8008850 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	69ba      	ldr	r2, [r7, #24]
 800884c:	601a      	str	r2, [r3, #0]
 800884e:	e002      	b.n	8008856 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008850:	69bb      	ldr	r3, [r7, #24]
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	68ba      	ldr	r2, [r7, #8]
 8008860:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008862:	69bb      	ldr	r3, [r7, #24]
 8008864:	2101      	movs	r1, #1
 8008866:	0018      	movs	r0, r3
 8008868:	f7ff ff60 	bl	800872c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800886c:	46c0      	nop			; (mov r8, r8)
 800886e:	46bd      	mov	sp, r7
 8008870:	b004      	add	sp, #16
 8008872:	bd80      	pop	{r7, pc}

08008874 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b088      	sub	sp, #32
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d101      	bne.n	800888c <xQueueGiveFromISR+0x18>
 8008888:	b672      	cpsid	i
 800888a:	e7fe      	b.n	800888a <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800888c:	69bb      	ldr	r3, [r7, #24]
 800888e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <xQueueGiveFromISR+0x24>
 8008894:	b672      	cpsid	i
 8008896:	e7fe      	b.n	8008896 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	2b00      	cmp	r3, #0
 800889e:	d103      	bne.n	80088a8 <xQueueGiveFromISR+0x34>
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	2b00      	cmp	r3, #0
 80088a6:	d101      	bne.n	80088ac <xQueueGiveFromISR+0x38>
 80088a8:	2301      	movs	r3, #1
 80088aa:	e000      	b.n	80088ae <xQueueGiveFromISR+0x3a>
 80088ac:	2300      	movs	r3, #0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <xQueueGiveFromISR+0x42>
 80088b2:	b672      	cpsid	i
 80088b4:	e7fe      	b.n	80088b4 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80088b6:	f001 f885 	bl	80099c4 <ulSetInterruptMaskFromISR>
 80088ba:	0003      	movs	r3, r0
 80088bc:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088c2:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80088c4:	69bb      	ldr	r3, [r7, #24]
 80088c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088c8:	693a      	ldr	r2, [r7, #16]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d22c      	bcs.n	8008928 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80088ce:	200f      	movs	r0, #15
 80088d0:	183b      	adds	r3, r7, r0
 80088d2:	69ba      	ldr	r2, [r7, #24]
 80088d4:	2145      	movs	r1, #69	; 0x45
 80088d6:	5c52      	ldrb	r2, [r2, r1]
 80088d8:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80088da:	693b      	ldr	r3, [r7, #16]
 80088dc:	1c5a      	adds	r2, r3, #1
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80088e2:	183b      	adds	r3, r7, r0
 80088e4:	781b      	ldrb	r3, [r3, #0]
 80088e6:	b25b      	sxtb	r3, r3
 80088e8:	3301      	adds	r3, #1
 80088ea:	d111      	bne.n	8008910 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d016      	beq.n	8008922 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80088f4:	69bb      	ldr	r3, [r7, #24]
 80088f6:	3324      	adds	r3, #36	; 0x24
 80088f8:	0018      	movs	r0, r3
 80088fa:	f000 fcc7 	bl	800928c <xTaskRemoveFromEventList>
 80088fe:	1e03      	subs	r3, r0, #0
 8008900:	d00f      	beq.n	8008922 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d00c      	beq.n	8008922 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	2201      	movs	r2, #1
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	e008      	b.n	8008922 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008910:	230f      	movs	r3, #15
 8008912:	18fb      	adds	r3, r7, r3
 8008914:	781b      	ldrb	r3, [r3, #0]
 8008916:	3301      	adds	r3, #1
 8008918:	b2db      	uxtb	r3, r3
 800891a:	b259      	sxtb	r1, r3
 800891c:	69bb      	ldr	r3, [r7, #24]
 800891e:	2245      	movs	r2, #69	; 0x45
 8008920:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008922:	2301      	movs	r3, #1
 8008924:	61fb      	str	r3, [r7, #28]
 8008926:	e001      	b.n	800892c <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008928:	2300      	movs	r3, #0
 800892a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800892c:	697b      	ldr	r3, [r7, #20]
 800892e:	0018      	movs	r0, r3
 8008930:	f001 f84e 	bl	80099d0 <vClearInterruptMaskFromISR>

	return xReturn;
 8008934:	69fb      	ldr	r3, [r7, #28]
}
 8008936:	0018      	movs	r0, r3
 8008938:	46bd      	mov	sp, r7
 800893a:	b008      	add	sp, #32
 800893c:	bd80      	pop	{r7, pc}

0800893e <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800893e:	b580      	push	{r7, lr}
 8008940:	b08a      	sub	sp, #40	; 0x28
 8008942:	af00      	add	r7, sp, #0
 8008944:	6078      	str	r0, [r7, #4]
 8008946:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008948:	2300      	movs	r3, #0
 800894a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008950:	2300      	movs	r3, #0
 8008952:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008954:	69fb      	ldr	r3, [r7, #28]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d101      	bne.n	800895e <xQueueSemaphoreTake+0x20>
 800895a:	b672      	cpsid	i
 800895c:	e7fe      	b.n	800895c <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800895e:	69fb      	ldr	r3, [r7, #28]
 8008960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008962:	2b00      	cmp	r3, #0
 8008964:	d001      	beq.n	800896a <xQueueSemaphoreTake+0x2c>
 8008966:	b672      	cpsid	i
 8008968:	e7fe      	b.n	8008968 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800896a:	f000 fe0b 	bl	8009584 <xTaskGetSchedulerState>
 800896e:	1e03      	subs	r3, r0, #0
 8008970:	d102      	bne.n	8008978 <xQueueSemaphoreTake+0x3a>
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d101      	bne.n	800897c <xQueueSemaphoreTake+0x3e>
 8008978:	2301      	movs	r3, #1
 800897a:	e000      	b.n	800897e <xQueueSemaphoreTake+0x40>
 800897c:	2300      	movs	r3, #0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d101      	bne.n	8008986 <xQueueSemaphoreTake+0x48>
 8008982:	b672      	cpsid	i
 8008984:	e7fe      	b.n	8008984 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008986:	f000 fff3 	bl	8009970 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800898a:	69fb      	ldr	r3, [r7, #28]
 800898c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800898e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008990:	69bb      	ldr	r3, [r7, #24]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d01d      	beq.n	80089d2 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	1e5a      	subs	r2, r3, #1
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800899e:	69fb      	ldr	r3, [r7, #28]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d104      	bne.n	80089b0 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80089a6:	f000 fee1 	bl	800976c <pvTaskIncrementMutexHeldCount>
 80089aa:	0002      	movs	r2, r0
 80089ac:	69fb      	ldr	r3, [r7, #28]
 80089ae:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089b0:	69fb      	ldr	r3, [r7, #28]
 80089b2:	691b      	ldr	r3, [r3, #16]
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d008      	beq.n	80089ca <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089b8:	69fb      	ldr	r3, [r7, #28]
 80089ba:	3310      	adds	r3, #16
 80089bc:	0018      	movs	r0, r3
 80089be:	f000 fc65 	bl	800928c <xTaskRemoveFromEventList>
 80089c2:	1e03      	subs	r3, r0, #0
 80089c4:	d001      	beq.n	80089ca <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80089c6:	f000 ffc3 	bl	8009950 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80089ca:	f000 ffe3 	bl	8009994 <vPortExitCritical>
				return pdPASS;
 80089ce:	2301      	movs	r3, #1
 80089d0:	e08b      	b.n	8008aea <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d108      	bne.n	80089ea <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80089d8:	6a3b      	ldr	r3, [r7, #32]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <xQueueSemaphoreTake+0xa4>
 80089de:	b672      	cpsid	i
 80089e0:	e7fe      	b.n	80089e0 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80089e2:	f000 ffd7 	bl	8009994 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80089e6:	2300      	movs	r3, #0
 80089e8:	e07f      	b.n	8008aea <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80089ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d106      	bne.n	80089fe <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80089f0:	230c      	movs	r3, #12
 80089f2:	18fb      	adds	r3, r7, r3
 80089f4:	0018      	movs	r0, r3
 80089f6:	f000 fca5 	bl	8009344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80089fa:	2301      	movs	r3, #1
 80089fc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80089fe:	f000 ffc9 	bl	8009994 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008a02:	f000 fa8b 	bl	8008f1c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008a06:	f000 ffb3 	bl	8009970 <vPortEnterCritical>
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	2244      	movs	r2, #68	; 0x44
 8008a0e:	5c9b      	ldrb	r3, [r3, r2]
 8008a10:	b25b      	sxtb	r3, r3
 8008a12:	3301      	adds	r3, #1
 8008a14:	d103      	bne.n	8008a1e <xQueueSemaphoreTake+0xe0>
 8008a16:	69fb      	ldr	r3, [r7, #28]
 8008a18:	2244      	movs	r2, #68	; 0x44
 8008a1a:	2100      	movs	r1, #0
 8008a1c:	5499      	strb	r1, [r3, r2]
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	2245      	movs	r2, #69	; 0x45
 8008a22:	5c9b      	ldrb	r3, [r3, r2]
 8008a24:	b25b      	sxtb	r3, r3
 8008a26:	3301      	adds	r3, #1
 8008a28:	d103      	bne.n	8008a32 <xQueueSemaphoreTake+0xf4>
 8008a2a:	69fb      	ldr	r3, [r7, #28]
 8008a2c:	2245      	movs	r2, #69	; 0x45
 8008a2e:	2100      	movs	r1, #0
 8008a30:	5499      	strb	r1, [r3, r2]
 8008a32:	f000 ffaf 	bl	8009994 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008a36:	003a      	movs	r2, r7
 8008a38:	230c      	movs	r3, #12
 8008a3a:	18fb      	adds	r3, r7, r3
 8008a3c:	0011      	movs	r1, r2
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f000 fc94 	bl	800936c <xTaskCheckForTimeOut>
 8008a44:	1e03      	subs	r3, r0, #0
 8008a46:	d12e      	bne.n	8008aa6 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008a48:	69fb      	ldr	r3, [r7, #28]
 8008a4a:	0018      	movs	r0, r3
 8008a4c:	f000 f8c5 	bl	8008bda <prvIsQueueEmpty>
 8008a50:	1e03      	subs	r3, r0, #0
 8008a52:	d021      	beq.n	8008a98 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d10a      	bne.n	8008a72 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8008a5c:	f000 ff88 	bl	8009970 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008a60:	69fb      	ldr	r3, [r7, #28]
 8008a62:	689b      	ldr	r3, [r3, #8]
 8008a64:	0018      	movs	r0, r3
 8008a66:	f000 fda9 	bl	80095bc <xTaskPriorityInherit>
 8008a6a:	0003      	movs	r3, r0
 8008a6c:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8008a6e:	f000 ff91 	bl	8009994 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	3324      	adds	r3, #36	; 0x24
 8008a76:	683a      	ldr	r2, [r7, #0]
 8008a78:	0011      	movs	r1, r2
 8008a7a:	0018      	movs	r0, r3
 8008a7c:	f000 fbe8 	bl	8009250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	0018      	movs	r0, r3
 8008a84:	f000 f84b 	bl	8008b1e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008a88:	f000 fa54 	bl	8008f34 <xTaskResumeAll>
 8008a8c:	1e03      	subs	r3, r0, #0
 8008a8e:	d000      	beq.n	8008a92 <xQueueSemaphoreTake+0x154>
 8008a90:	e779      	b.n	8008986 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8008a92:	f000 ff5d 	bl	8009950 <vPortYield>
 8008a96:	e776      	b.n	8008986 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8008a98:	69fb      	ldr	r3, [r7, #28]
 8008a9a:	0018      	movs	r0, r3
 8008a9c:	f000 f83f 	bl	8008b1e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008aa0:	f000 fa48 	bl	8008f34 <xTaskResumeAll>
 8008aa4:	e76f      	b.n	8008986 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	0018      	movs	r0, r3
 8008aaa:	f000 f838 	bl	8008b1e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008aae:	f000 fa41 	bl	8008f34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f000 f890 	bl	8008bda <prvIsQueueEmpty>
 8008aba:	1e03      	subs	r3, r0, #0
 8008abc:	d100      	bne.n	8008ac0 <xQueueSemaphoreTake+0x182>
 8008abe:	e762      	b.n	8008986 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008ac0:	6a3b      	ldr	r3, [r7, #32]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d010      	beq.n	8008ae8 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8008ac6:	f000 ff53 	bl	8009970 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008aca:	69fb      	ldr	r3, [r7, #28]
 8008acc:	0018      	movs	r0, r3
 8008ace:	f000 f810 	bl	8008af2 <prvGetDisinheritPriorityAfterTimeout>
 8008ad2:	0003      	movs	r3, r0
 8008ad4:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008ad6:	69fb      	ldr	r3, [r7, #28]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	0011      	movs	r1, r2
 8008ade:	0018      	movs	r0, r3
 8008ae0:	f000 fdd4 	bl	800968c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008ae4:	f000 ff56 	bl	8009994 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008ae8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008aea:	0018      	movs	r0, r3
 8008aec:	46bd      	mov	sp, r7
 8008aee:	b00a      	add	sp, #40	; 0x28
 8008af0:	bd80      	pop	{r7, pc}

08008af2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008af2:	b580      	push	{r7, lr}
 8008af4:	b084      	sub	sp, #16
 8008af6:	af00      	add	r7, sp, #0
 8008af8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d006      	beq.n	8008b10 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	2207      	movs	r2, #7
 8008b0a:	1ad3      	subs	r3, r2, r3
 8008b0c:	60fb      	str	r3, [r7, #12]
 8008b0e:	e001      	b.n	8008b14 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008b10:	2300      	movs	r3, #0
 8008b12:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008b14:	68fb      	ldr	r3, [r7, #12]
	}
 8008b16:	0018      	movs	r0, r3
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	b004      	add	sp, #16
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008b26:	f000 ff23 	bl	8009970 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008b2a:	230f      	movs	r3, #15
 8008b2c:	18fb      	adds	r3, r7, r3
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	2145      	movs	r1, #69	; 0x45
 8008b32:	5c52      	ldrb	r2, [r2, r1]
 8008b34:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b36:	e013      	b.n	8008b60 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d016      	beq.n	8008b6e <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	3324      	adds	r3, #36	; 0x24
 8008b44:	0018      	movs	r0, r3
 8008b46:	f000 fba1 	bl	800928c <xTaskRemoveFromEventList>
 8008b4a:	1e03      	subs	r3, r0, #0
 8008b4c:	d001      	beq.n	8008b52 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b4e:	f000 fc5d 	bl	800940c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b52:	210f      	movs	r1, #15
 8008b54:	187b      	adds	r3, r7, r1
 8008b56:	781b      	ldrb	r3, [r3, #0]
 8008b58:	3b01      	subs	r3, #1
 8008b5a:	b2da      	uxtb	r2, r3
 8008b5c:	187b      	adds	r3, r7, r1
 8008b5e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b60:	230f      	movs	r3, #15
 8008b62:	18fb      	adds	r3, r7, r3
 8008b64:	781b      	ldrb	r3, [r3, #0]
 8008b66:	b25b      	sxtb	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	dce5      	bgt.n	8008b38 <prvUnlockQueue+0x1a>
 8008b6c:	e000      	b.n	8008b70 <prvUnlockQueue+0x52>
					break;
 8008b6e:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2245      	movs	r2, #69	; 0x45
 8008b74:	21ff      	movs	r1, #255	; 0xff
 8008b76:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008b78:	f000 ff0c 	bl	8009994 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b7c:	f000 fef8 	bl	8009970 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b80:	230e      	movs	r3, #14
 8008b82:	18fb      	adds	r3, r7, r3
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	2144      	movs	r1, #68	; 0x44
 8008b88:	5c52      	ldrb	r2, [r2, r1]
 8008b8a:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b8c:	e013      	b.n	8008bb6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	691b      	ldr	r3, [r3, #16]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d016      	beq.n	8008bc4 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	3310      	adds	r3, #16
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f000 fb76 	bl	800928c <xTaskRemoveFromEventList>
 8008ba0:	1e03      	subs	r3, r0, #0
 8008ba2:	d001      	beq.n	8008ba8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008ba4:	f000 fc32 	bl	800940c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ba8:	210e      	movs	r1, #14
 8008baa:	187b      	adds	r3, r7, r1
 8008bac:	781b      	ldrb	r3, [r3, #0]
 8008bae:	3b01      	subs	r3, #1
 8008bb0:	b2da      	uxtb	r2, r3
 8008bb2:	187b      	adds	r3, r7, r1
 8008bb4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008bb6:	230e      	movs	r3, #14
 8008bb8:	18fb      	adds	r3, r7, r3
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	b25b      	sxtb	r3, r3
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	dce5      	bgt.n	8008b8e <prvUnlockQueue+0x70>
 8008bc2:	e000      	b.n	8008bc6 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008bc4:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	2244      	movs	r2, #68	; 0x44
 8008bca:	21ff      	movs	r1, #255	; 0xff
 8008bcc:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008bce:	f000 fee1 	bl	8009994 <vPortExitCritical>
}
 8008bd2:	46c0      	nop			; (mov r8, r8)
 8008bd4:	46bd      	mov	sp, r7
 8008bd6:	b004      	add	sp, #16
 8008bd8:	bd80      	pop	{r7, pc}

08008bda <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008bda:	b580      	push	{r7, lr}
 8008bdc:	b084      	sub	sp, #16
 8008bde:	af00      	add	r7, sp, #0
 8008be0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008be2:	f000 fec5 	bl	8009970 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d102      	bne.n	8008bf4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008bee:	2301      	movs	r3, #1
 8008bf0:	60fb      	str	r3, [r7, #12]
 8008bf2:	e001      	b.n	8008bf8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bf8:	f000 fecc 	bl	8009994 <vPortExitCritical>

	return xReturn;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
}
 8008bfe:	0018      	movs	r0, r3
 8008c00:	46bd      	mov	sp, r7
 8008c02:	b004      	add	sp, #16
 8008c04:	bd80      	pop	{r7, pc}

08008c06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c06:	b590      	push	{r4, r7, lr}
 8008c08:	b08d      	sub	sp, #52	; 0x34
 8008c0a:	af04      	add	r7, sp, #16
 8008c0c:	60f8      	str	r0, [r7, #12]
 8008c0e:	60b9      	str	r1, [r7, #8]
 8008c10:	603b      	str	r3, [r7, #0]
 8008c12:	1dbb      	adds	r3, r7, #6
 8008c14:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c16:	1dbb      	adds	r3, r7, #6
 8008c18:	881b      	ldrh	r3, [r3, #0]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	0018      	movs	r0, r3
 8008c1e:	f000 ff3f 	bl	8009aa0 <pvPortMalloc>
 8008c22:	0003      	movs	r3, r0
 8008c24:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d010      	beq.n	8008c4e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c2c:	2054      	movs	r0, #84	; 0x54
 8008c2e:	f000 ff37 	bl	8009aa0 <pvPortMalloc>
 8008c32:	0003      	movs	r3, r0
 8008c34:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008c36:	69fb      	ldr	r3, [r7, #28]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d003      	beq.n	8008c44 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c3c:	69fb      	ldr	r3, [r7, #28]
 8008c3e:	697a      	ldr	r2, [r7, #20]
 8008c40:	631a      	str	r2, [r3, #48]	; 0x30
 8008c42:	e006      	b.n	8008c52 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	0018      	movs	r0, r3
 8008c48:	f000 ffd6 	bl	8009bf8 <vPortFree>
 8008c4c:	e001      	b.n	8008c52 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c4e:	2300      	movs	r3, #0
 8008c50:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d016      	beq.n	8008c86 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c58:	1dbb      	adds	r3, r7, #6
 8008c5a:	881a      	ldrh	r2, [r3, #0]
 8008c5c:	683c      	ldr	r4, [r7, #0]
 8008c5e:	68b9      	ldr	r1, [r7, #8]
 8008c60:	68f8      	ldr	r0, [r7, #12]
 8008c62:	2300      	movs	r3, #0
 8008c64:	9303      	str	r3, [sp, #12]
 8008c66:	69fb      	ldr	r3, [r7, #28]
 8008c68:	9302      	str	r3, [sp, #8]
 8008c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c6c:	9301      	str	r3, [sp, #4]
 8008c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	0023      	movs	r3, r4
 8008c74:	f000 f810 	bl	8008c98 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c78:	69fb      	ldr	r3, [r7, #28]
 8008c7a:	0018      	movs	r0, r3
 8008c7c:	f000 f88e 	bl	8008d9c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c80:	2301      	movs	r3, #1
 8008c82:	61bb      	str	r3, [r7, #24]
 8008c84:	e002      	b.n	8008c8c <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c86:	2301      	movs	r3, #1
 8008c88:	425b      	negs	r3, r3
 8008c8a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c8c:	69bb      	ldr	r3, [r7, #24]
	}
 8008c8e:	0018      	movs	r0, r3
 8008c90:	46bd      	mov	sp, r7
 8008c92:	b009      	add	sp, #36	; 0x24
 8008c94:	bd90      	pop	{r4, r7, pc}
	...

08008c98 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	b086      	sub	sp, #24
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	60f8      	str	r0, [r7, #12]
 8008ca0:	60b9      	str	r1, [r7, #8]
 8008ca2:	607a      	str	r2, [r7, #4]
 8008ca4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008ca6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	493a      	ldr	r1, [pc, #232]	; (8008d98 <prvInitialiseNewTask+0x100>)
 8008cae:	468c      	mov	ip, r1
 8008cb0:	4463      	add	r3, ip
 8008cb2:	009b      	lsls	r3, r3, #2
 8008cb4:	18d3      	adds	r3, r2, r3
 8008cb6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cb8:	693b      	ldr	r3, [r7, #16]
 8008cba:	2207      	movs	r2, #7
 8008cbc:	4393      	bics	r3, r2
 8008cbe:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	2207      	movs	r2, #7
 8008cc4:	4013      	ands	r3, r2
 8008cc6:	d001      	beq.n	8008ccc <prvInitialiseNewTask+0x34>
 8008cc8:	b672      	cpsid	i
 8008cca:	e7fe      	b.n	8008cca <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d020      	beq.n	8008d14 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]
 8008cd6:	e013      	b.n	8008d00 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cd8:	68ba      	ldr	r2, [r7, #8]
 8008cda:	697b      	ldr	r3, [r7, #20]
 8008cdc:	18d3      	adds	r3, r2, r3
 8008cde:	7818      	ldrb	r0, [r3, #0]
 8008ce0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ce2:	2134      	movs	r1, #52	; 0x34
 8008ce4:	697b      	ldr	r3, [r7, #20]
 8008ce6:	18d3      	adds	r3, r2, r3
 8008ce8:	185b      	adds	r3, r3, r1
 8008cea:	1c02      	adds	r2, r0, #0
 8008cec:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008cee:	68ba      	ldr	r2, [r7, #8]
 8008cf0:	697b      	ldr	r3, [r7, #20]
 8008cf2:	18d3      	adds	r3, r2, r3
 8008cf4:	781b      	ldrb	r3, [r3, #0]
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d006      	beq.n	8008d08 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cfa:	697b      	ldr	r3, [r7, #20]
 8008cfc:	3301      	adds	r3, #1
 8008cfe:	617b      	str	r3, [r7, #20]
 8008d00:	697b      	ldr	r3, [r7, #20]
 8008d02:	2b0f      	cmp	r3, #15
 8008d04:	d9e8      	bls.n	8008cd8 <prvInitialiseNewTask+0x40>
 8008d06:	e000      	b.n	8008d0a <prvInitialiseNewTask+0x72>
			{
				break;
 8008d08:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0c:	2243      	movs	r2, #67	; 0x43
 8008d0e:	2100      	movs	r1, #0
 8008d10:	5499      	strb	r1, [r3, r2]
 8008d12:	e003      	b.n	8008d1c <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d16:	2234      	movs	r2, #52	; 0x34
 8008d18:	2100      	movs	r1, #0
 8008d1a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d1c:	6a3b      	ldr	r3, [r7, #32]
 8008d1e:	2b06      	cmp	r3, #6
 8008d20:	d901      	bls.n	8008d26 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d22:	2306      	movs	r3, #6
 8008d24:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d28:	6a3a      	ldr	r2, [r7, #32]
 8008d2a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d2e:	6a3a      	ldr	r2, [r7, #32]
 8008d30:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d34:	2200      	movs	r2, #0
 8008d36:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d3a:	3304      	adds	r3, #4
 8008d3c:	0018      	movs	r0, r3
 8008d3e:	f7ff fc6a 	bl	8008616 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d44:	3318      	adds	r3, #24
 8008d46:	0018      	movs	r0, r3
 8008d48:	f7ff fc65 	bl	8008616 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d50:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d52:	6a3b      	ldr	r3, [r7, #32]
 8008d54:	2207      	movs	r2, #7
 8008d56:	1ad2      	subs	r2, r2, r3
 8008d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d5e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d60:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d64:	2200      	movs	r2, #0
 8008d66:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d6a:	2250      	movs	r2, #80	; 0x50
 8008d6c:	2100      	movs	r1, #0
 8008d6e:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008d70:	683a      	ldr	r2, [r7, #0]
 8008d72:	68f9      	ldr	r1, [r7, #12]
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	0018      	movs	r0, r3
 8008d78:	f000 fd5e 	bl	8009838 <pxPortInitialiseStack>
 8008d7c:	0002      	movs	r2, r0
 8008d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008d82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d002      	beq.n	8008d8e <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008d8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d8e:	46c0      	nop			; (mov r8, r8)
 8008d90:	46bd      	mov	sp, r7
 8008d92:	b006      	add	sp, #24
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	46c0      	nop			; (mov r8, r8)
 8008d98:	3fffffff 	.word	0x3fffffff

08008d9c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008da4:	f000 fde4 	bl	8009970 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008da8:	4b28      	ldr	r3, [pc, #160]	; (8008e4c <prvAddNewTaskToReadyList+0xb0>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	1c5a      	adds	r2, r3, #1
 8008dae:	4b27      	ldr	r3, [pc, #156]	; (8008e4c <prvAddNewTaskToReadyList+0xb0>)
 8008db0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008db2:	4b27      	ldr	r3, [pc, #156]	; (8008e50 <prvAddNewTaskToReadyList+0xb4>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d109      	bne.n	8008dce <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008dba:	4b25      	ldr	r3, [pc, #148]	; (8008e50 <prvAddNewTaskToReadyList+0xb4>)
 8008dbc:	687a      	ldr	r2, [r7, #4]
 8008dbe:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008dc0:	4b22      	ldr	r3, [pc, #136]	; (8008e4c <prvAddNewTaskToReadyList+0xb0>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d110      	bne.n	8008dea <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008dc8:	f000 fb3a 	bl	8009440 <prvInitialiseTaskLists>
 8008dcc:	e00d      	b.n	8008dea <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008dce:	4b21      	ldr	r3, [pc, #132]	; (8008e54 <prvAddNewTaskToReadyList+0xb8>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d109      	bne.n	8008dea <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008dd6:	4b1e      	ldr	r3, [pc, #120]	; (8008e50 <prvAddNewTaskToReadyList+0xb4>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d802      	bhi.n	8008dea <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008de4:	4b1a      	ldr	r3, [pc, #104]	; (8008e50 <prvAddNewTaskToReadyList+0xb4>)
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008dea:	4b1b      	ldr	r3, [pc, #108]	; (8008e58 <prvAddNewTaskToReadyList+0xbc>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	4b19      	ldr	r3, [pc, #100]	; (8008e58 <prvAddNewTaskToReadyList+0xbc>)
 8008df2:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008df8:	4b18      	ldr	r3, [pc, #96]	; (8008e5c <prvAddNewTaskToReadyList+0xc0>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	429a      	cmp	r2, r3
 8008dfe:	d903      	bls.n	8008e08 <prvAddNewTaskToReadyList+0x6c>
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e04:	4b15      	ldr	r3, [pc, #84]	; (8008e5c <prvAddNewTaskToReadyList+0xc0>)
 8008e06:	601a      	str	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0c:	0013      	movs	r3, r2
 8008e0e:	009b      	lsls	r3, r3, #2
 8008e10:	189b      	adds	r3, r3, r2
 8008e12:	009b      	lsls	r3, r3, #2
 8008e14:	4a12      	ldr	r2, [pc, #72]	; (8008e60 <prvAddNewTaskToReadyList+0xc4>)
 8008e16:	189a      	adds	r2, r3, r2
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	3304      	adds	r3, #4
 8008e1c:	0019      	movs	r1, r3
 8008e1e:	0010      	movs	r0, r2
 8008e20:	f7ff fc04 	bl	800862c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e24:	f000 fdb6 	bl	8009994 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e28:	4b0a      	ldr	r3, [pc, #40]	; (8008e54 <prvAddNewTaskToReadyList+0xb8>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d008      	beq.n	8008e42 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e30:	4b07      	ldr	r3, [pc, #28]	; (8008e50 <prvAddNewTaskToReadyList+0xb4>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d201      	bcs.n	8008e42 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e3e:	f000 fd87 	bl	8009950 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e42:	46c0      	nop			; (mov r8, r8)
 8008e44:	46bd      	mov	sp, r7
 8008e46:	b002      	add	sp, #8
 8008e48:	bd80      	pop	{r7, pc}
 8008e4a:	46c0      	nop			; (mov r8, r8)
 8008e4c:	20003884 	.word	0x20003884
 8008e50:	20003784 	.word	0x20003784
 8008e54:	20003890 	.word	0x20003890
 8008e58:	200038a0 	.word	0x200038a0
 8008e5c:	2000388c 	.word	0x2000388c
 8008e60:	20003788 	.word	0x20003788

08008e64 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d010      	beq.n	8008e98 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008e76:	4b0d      	ldr	r3, [pc, #52]	; (8008eac <vTaskDelay+0x48>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d001      	beq.n	8008e82 <vTaskDelay+0x1e>
 8008e7e:	b672      	cpsid	i
 8008e80:	e7fe      	b.n	8008e80 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008e82:	f000 f84b 	bl	8008f1c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2100      	movs	r1, #0
 8008e8a:	0018      	movs	r0, r3
 8008e8c:	f000 fc80 	bl	8009790 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008e90:	f000 f850 	bl	8008f34 <xTaskResumeAll>
 8008e94:	0003      	movs	r3, r0
 8008e96:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d101      	bne.n	8008ea2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8008e9e:	f000 fd57 	bl	8009950 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008ea2:	46c0      	nop			; (mov r8, r8)
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	b004      	add	sp, #16
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	46c0      	nop			; (mov r8, r8)
 8008eac:	200038ac 	.word	0x200038ac

08008eb0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b084      	sub	sp, #16
 8008eb4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008eb6:	4913      	ldr	r1, [pc, #76]	; (8008f04 <vTaskStartScheduler+0x54>)
 8008eb8:	4813      	ldr	r0, [pc, #76]	; (8008f08 <vTaskStartScheduler+0x58>)
 8008eba:	4b14      	ldr	r3, [pc, #80]	; (8008f0c <vTaskStartScheduler+0x5c>)
 8008ebc:	9301      	str	r3, [sp, #4]
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	9300      	str	r3, [sp, #0]
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	2280      	movs	r2, #128	; 0x80
 8008ec6:	f7ff fe9e 	bl	8008c06 <xTaskCreate>
 8008eca:	0003      	movs	r3, r0
 8008ecc:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d10d      	bne.n	8008ef0 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008ed4:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008ed6:	4b0e      	ldr	r3, [pc, #56]	; (8008f10 <vTaskStartScheduler+0x60>)
 8008ed8:	2201      	movs	r2, #1
 8008eda:	4252      	negs	r2, r2
 8008edc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008ede:	4b0d      	ldr	r3, [pc, #52]	; (8008f14 <vTaskStartScheduler+0x64>)
 8008ee0:	2201      	movs	r2, #1
 8008ee2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ee4:	4b0c      	ldr	r3, [pc, #48]	; (8008f18 <vTaskStartScheduler+0x68>)
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008eea:	f000 fd0d 	bl	8009908 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008eee:	e004      	b.n	8008efa <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	3301      	adds	r3, #1
 8008ef4:	d101      	bne.n	8008efa <vTaskStartScheduler+0x4a>
 8008ef6:	b672      	cpsid	i
 8008ef8:	e7fe      	b.n	8008ef8 <vTaskStartScheduler+0x48>
}
 8008efa:	46c0      	nop			; (mov r8, r8)
 8008efc:	46bd      	mov	sp, r7
 8008efe:	b002      	add	sp, #8
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	46c0      	nop			; (mov r8, r8)
 8008f04:	0800c4dc 	.word	0x0800c4dc
 8008f08:	08009421 	.word	0x08009421
 8008f0c:	200038a8 	.word	0x200038a8
 8008f10:	200038a4 	.word	0x200038a4
 8008f14:	20003890 	.word	0x20003890
 8008f18:	20003888 	.word	0x20003888

08008f1c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008f1c:	b580      	push	{r7, lr}
 8008f1e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008f20:	4b03      	ldr	r3, [pc, #12]	; (8008f30 <vTaskSuspendAll+0x14>)
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	1c5a      	adds	r2, r3, #1
 8008f26:	4b02      	ldr	r3, [pc, #8]	; (8008f30 <vTaskSuspendAll+0x14>)
 8008f28:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	bd80      	pop	{r7, pc}
 8008f30:	200038ac 	.word	0x200038ac

08008f34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008f34:	b580      	push	{r7, lr}
 8008f36:	b084      	sub	sp, #16
 8008f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008f3e:	2300      	movs	r3, #0
 8008f40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008f42:	4b3a      	ldr	r3, [pc, #232]	; (800902c <xTaskResumeAll+0xf8>)
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <xTaskResumeAll+0x1a>
 8008f4a:	b672      	cpsid	i
 8008f4c:	e7fe      	b.n	8008f4c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008f4e:	f000 fd0f 	bl	8009970 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008f52:	4b36      	ldr	r3, [pc, #216]	; (800902c <xTaskResumeAll+0xf8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	1e5a      	subs	r2, r3, #1
 8008f58:	4b34      	ldr	r3, [pc, #208]	; (800902c <xTaskResumeAll+0xf8>)
 8008f5a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f5c:	4b33      	ldr	r3, [pc, #204]	; (800902c <xTaskResumeAll+0xf8>)
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d15b      	bne.n	800901c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008f64:	4b32      	ldr	r3, [pc, #200]	; (8009030 <xTaskResumeAll+0xfc>)
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d057      	beq.n	800901c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008f6c:	e02f      	b.n	8008fce <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f6e:	4b31      	ldr	r3, [pc, #196]	; (8009034 <xTaskResumeAll+0x100>)
 8008f70:	68db      	ldr	r3, [r3, #12]
 8008f72:	68db      	ldr	r3, [r3, #12]
 8008f74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	3318      	adds	r3, #24
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	f7ff fbae 	bl	80086dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3304      	adds	r3, #4
 8008f84:	0018      	movs	r0, r3
 8008f86:	f7ff fba9 	bl	80086dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f8e:	4b2a      	ldr	r3, [pc, #168]	; (8009038 <xTaskResumeAll+0x104>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	429a      	cmp	r2, r3
 8008f94:	d903      	bls.n	8008f9e <xTaskResumeAll+0x6a>
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f9a:	4b27      	ldr	r3, [pc, #156]	; (8009038 <xTaskResumeAll+0x104>)
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa2:	0013      	movs	r3, r2
 8008fa4:	009b      	lsls	r3, r3, #2
 8008fa6:	189b      	adds	r3, r3, r2
 8008fa8:	009b      	lsls	r3, r3, #2
 8008faa:	4a24      	ldr	r2, [pc, #144]	; (800903c <xTaskResumeAll+0x108>)
 8008fac:	189a      	adds	r2, r3, r2
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	3304      	adds	r3, #4
 8008fb2:	0019      	movs	r1, r3
 8008fb4:	0010      	movs	r0, r2
 8008fb6:	f7ff fb39 	bl	800862c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fbe:	4b20      	ldr	r3, [pc, #128]	; (8009040 <xTaskResumeAll+0x10c>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d302      	bcc.n	8008fce <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008fc8:	4b1e      	ldr	r3, [pc, #120]	; (8009044 <xTaskResumeAll+0x110>)
 8008fca:	2201      	movs	r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008fce:	4b19      	ldr	r3, [pc, #100]	; (8009034 <xTaskResumeAll+0x100>)
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d1cb      	bne.n	8008f6e <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d001      	beq.n	8008fe0 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008fdc:	f000 fab4 	bl	8009548 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008fe0:	4b19      	ldr	r3, [pc, #100]	; (8009048 <xTaskResumeAll+0x114>)
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d00f      	beq.n	800900c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008fec:	f000 f82e 	bl	800904c <xTaskIncrementTick>
 8008ff0:	1e03      	subs	r3, r0, #0
 8008ff2:	d002      	beq.n	8008ffa <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008ff4:	4b13      	ldr	r3, [pc, #76]	; (8009044 <xTaskResumeAll+0x110>)
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	3b01      	subs	r3, #1
 8008ffe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d1f2      	bne.n	8008fec <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8009006:	4b10      	ldr	r3, [pc, #64]	; (8009048 <xTaskResumeAll+0x114>)
 8009008:	2200      	movs	r2, #0
 800900a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800900c:	4b0d      	ldr	r3, [pc, #52]	; (8009044 <xTaskResumeAll+0x110>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d003      	beq.n	800901c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009014:	2301      	movs	r3, #1
 8009016:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009018:	f000 fc9a 	bl	8009950 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800901c:	f000 fcba 	bl	8009994 <vPortExitCritical>

	return xAlreadyYielded;
 8009020:	68bb      	ldr	r3, [r7, #8]
}
 8009022:	0018      	movs	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	b004      	add	sp, #16
 8009028:	bd80      	pop	{r7, pc}
 800902a:	46c0      	nop			; (mov r8, r8)
 800902c:	200038ac 	.word	0x200038ac
 8009030:	20003884 	.word	0x20003884
 8009034:	20003844 	.word	0x20003844
 8009038:	2000388c 	.word	0x2000388c
 800903c:	20003788 	.word	0x20003788
 8009040:	20003784 	.word	0x20003784
 8009044:	20003898 	.word	0x20003898
 8009048:	20003894 	.word	0x20003894

0800904c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b086      	sub	sp, #24
 8009050:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009052:	2300      	movs	r3, #0
 8009054:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009056:	4b4a      	ldr	r3, [pc, #296]	; (8009180 <xTaskIncrementTick+0x134>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d000      	beq.n	8009060 <xTaskIncrementTick+0x14>
 800905e:	e084      	b.n	800916a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009060:	4b48      	ldr	r3, [pc, #288]	; (8009184 <xTaskIncrementTick+0x138>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3301      	adds	r3, #1
 8009066:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009068:	4b46      	ldr	r3, [pc, #280]	; (8009184 <xTaskIncrementTick+0x138>)
 800906a:	693a      	ldr	r2, [r7, #16]
 800906c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800906e:	693b      	ldr	r3, [r7, #16]
 8009070:	2b00      	cmp	r3, #0
 8009072:	d117      	bne.n	80090a4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8009074:	4b44      	ldr	r3, [pc, #272]	; (8009188 <xTaskIncrementTick+0x13c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	2b00      	cmp	r3, #0
 800907c:	d001      	beq.n	8009082 <xTaskIncrementTick+0x36>
 800907e:	b672      	cpsid	i
 8009080:	e7fe      	b.n	8009080 <xTaskIncrementTick+0x34>
 8009082:	4b41      	ldr	r3, [pc, #260]	; (8009188 <xTaskIncrementTick+0x13c>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	4b40      	ldr	r3, [pc, #256]	; (800918c <xTaskIncrementTick+0x140>)
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	4b3e      	ldr	r3, [pc, #248]	; (8009188 <xTaskIncrementTick+0x13c>)
 800908e:	601a      	str	r2, [r3, #0]
 8009090:	4b3e      	ldr	r3, [pc, #248]	; (800918c <xTaskIncrementTick+0x140>)
 8009092:	68fa      	ldr	r2, [r7, #12]
 8009094:	601a      	str	r2, [r3, #0]
 8009096:	4b3e      	ldr	r3, [pc, #248]	; (8009190 <xTaskIncrementTick+0x144>)
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	4b3c      	ldr	r3, [pc, #240]	; (8009190 <xTaskIncrementTick+0x144>)
 800909e:	601a      	str	r2, [r3, #0]
 80090a0:	f000 fa52 	bl	8009548 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80090a4:	4b3b      	ldr	r3, [pc, #236]	; (8009194 <xTaskIncrementTick+0x148>)
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	693a      	ldr	r2, [r7, #16]
 80090aa:	429a      	cmp	r2, r3
 80090ac:	d349      	bcc.n	8009142 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80090ae:	4b36      	ldr	r3, [pc, #216]	; (8009188 <xTaskIncrementTick+0x13c>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d104      	bne.n	80090c2 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80090b8:	4b36      	ldr	r3, [pc, #216]	; (8009194 <xTaskIncrementTick+0x148>)
 80090ba:	2201      	movs	r2, #1
 80090bc:	4252      	negs	r2, r2
 80090be:	601a      	str	r2, [r3, #0]
					break;
 80090c0:	e03f      	b.n	8009142 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090c2:	4b31      	ldr	r3, [pc, #196]	; (8009188 <xTaskIncrementTick+0x13c>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	68db      	ldr	r3, [r3, #12]
 80090ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80090cc:	68bb      	ldr	r3, [r7, #8]
 80090ce:	685b      	ldr	r3, [r3, #4]
 80090d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80090d2:	693a      	ldr	r2, [r7, #16]
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d203      	bcs.n	80090e2 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80090da:	4b2e      	ldr	r3, [pc, #184]	; (8009194 <xTaskIncrementTick+0x148>)
 80090dc:	687a      	ldr	r2, [r7, #4]
 80090de:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80090e0:	e02f      	b.n	8009142 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80090e2:	68bb      	ldr	r3, [r7, #8]
 80090e4:	3304      	adds	r3, #4
 80090e6:	0018      	movs	r0, r3
 80090e8:	f7ff faf8 	bl	80086dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80090ec:	68bb      	ldr	r3, [r7, #8]
 80090ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d004      	beq.n	80090fe <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	3318      	adds	r3, #24
 80090f8:	0018      	movs	r0, r3
 80090fa:	f7ff faef 	bl	80086dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009102:	4b25      	ldr	r3, [pc, #148]	; (8009198 <xTaskIncrementTick+0x14c>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	429a      	cmp	r2, r3
 8009108:	d903      	bls.n	8009112 <xTaskIncrementTick+0xc6>
 800910a:	68bb      	ldr	r3, [r7, #8]
 800910c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800910e:	4b22      	ldr	r3, [pc, #136]	; (8009198 <xTaskIncrementTick+0x14c>)
 8009110:	601a      	str	r2, [r3, #0]
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009116:	0013      	movs	r3, r2
 8009118:	009b      	lsls	r3, r3, #2
 800911a:	189b      	adds	r3, r3, r2
 800911c:	009b      	lsls	r3, r3, #2
 800911e:	4a1f      	ldr	r2, [pc, #124]	; (800919c <xTaskIncrementTick+0x150>)
 8009120:	189a      	adds	r2, r3, r2
 8009122:	68bb      	ldr	r3, [r7, #8]
 8009124:	3304      	adds	r3, #4
 8009126:	0019      	movs	r1, r3
 8009128:	0010      	movs	r0, r2
 800912a:	f7ff fa7f 	bl	800862c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800912e:	68bb      	ldr	r3, [r7, #8]
 8009130:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009132:	4b1b      	ldr	r3, [pc, #108]	; (80091a0 <xTaskIncrementTick+0x154>)
 8009134:	681b      	ldr	r3, [r3, #0]
 8009136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009138:	429a      	cmp	r2, r3
 800913a:	d3b8      	bcc.n	80090ae <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800913c:	2301      	movs	r3, #1
 800913e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009140:	e7b5      	b.n	80090ae <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009142:	4b17      	ldr	r3, [pc, #92]	; (80091a0 <xTaskIncrementTick+0x154>)
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009148:	4914      	ldr	r1, [pc, #80]	; (800919c <xTaskIncrementTick+0x150>)
 800914a:	0013      	movs	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	189b      	adds	r3, r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	585b      	ldr	r3, [r3, r1]
 8009154:	2b01      	cmp	r3, #1
 8009156:	d901      	bls.n	800915c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8009158:	2301      	movs	r3, #1
 800915a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800915c:	4b11      	ldr	r3, [pc, #68]	; (80091a4 <xTaskIncrementTick+0x158>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d007      	beq.n	8009174 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8009164:	2301      	movs	r3, #1
 8009166:	617b      	str	r3, [r7, #20]
 8009168:	e004      	b.n	8009174 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800916a:	4b0f      	ldr	r3, [pc, #60]	; (80091a8 <xTaskIncrementTick+0x15c>)
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	1c5a      	adds	r2, r3, #1
 8009170:	4b0d      	ldr	r3, [pc, #52]	; (80091a8 <xTaskIncrementTick+0x15c>)
 8009172:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009174:	697b      	ldr	r3, [r7, #20]
}
 8009176:	0018      	movs	r0, r3
 8009178:	46bd      	mov	sp, r7
 800917a:	b006      	add	sp, #24
 800917c:	bd80      	pop	{r7, pc}
 800917e:	46c0      	nop			; (mov r8, r8)
 8009180:	200038ac 	.word	0x200038ac
 8009184:	20003888 	.word	0x20003888
 8009188:	2000383c 	.word	0x2000383c
 800918c:	20003840 	.word	0x20003840
 8009190:	2000389c 	.word	0x2000389c
 8009194:	200038a4 	.word	0x200038a4
 8009198:	2000388c 	.word	0x2000388c
 800919c:	20003788 	.word	0x20003788
 80091a0:	20003784 	.word	0x20003784
 80091a4:	20003898 	.word	0x20003898
 80091a8:	20003894 	.word	0x20003894

080091ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80091ac:	b580      	push	{r7, lr}
 80091ae:	b082      	sub	sp, #8
 80091b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80091b2:	4b22      	ldr	r3, [pc, #136]	; (800923c <vTaskSwitchContext+0x90>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d003      	beq.n	80091c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80091ba:	4b21      	ldr	r3, [pc, #132]	; (8009240 <vTaskSwitchContext+0x94>)
 80091bc:	2201      	movs	r2, #1
 80091be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80091c0:	e037      	b.n	8009232 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80091c2:	4b1f      	ldr	r3, [pc, #124]	; (8009240 <vTaskSwitchContext+0x94>)
 80091c4:	2200      	movs	r2, #0
 80091c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80091c8:	4b1e      	ldr	r3, [pc, #120]	; (8009244 <vTaskSwitchContext+0x98>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	607b      	str	r3, [r7, #4]
 80091ce:	e007      	b.n	80091e0 <vTaskSwitchContext+0x34>
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <vTaskSwitchContext+0x2e>
 80091d6:	b672      	cpsid	i
 80091d8:	e7fe      	b.n	80091d8 <vTaskSwitchContext+0x2c>
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	3b01      	subs	r3, #1
 80091de:	607b      	str	r3, [r7, #4]
 80091e0:	4919      	ldr	r1, [pc, #100]	; (8009248 <vTaskSwitchContext+0x9c>)
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	0013      	movs	r3, r2
 80091e6:	009b      	lsls	r3, r3, #2
 80091e8:	189b      	adds	r3, r3, r2
 80091ea:	009b      	lsls	r3, r3, #2
 80091ec:	585b      	ldr	r3, [r3, r1]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d0ee      	beq.n	80091d0 <vTaskSwitchContext+0x24>
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	0013      	movs	r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	189b      	adds	r3, r3, r2
 80091fa:	009b      	lsls	r3, r3, #2
 80091fc:	4a12      	ldr	r2, [pc, #72]	; (8009248 <vTaskSwitchContext+0x9c>)
 80091fe:	189b      	adds	r3, r3, r2
 8009200:	603b      	str	r3, [r7, #0]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	685b      	ldr	r3, [r3, #4]
 8009206:	685a      	ldr	r2, [r3, #4]
 8009208:	683b      	ldr	r3, [r7, #0]
 800920a:	605a      	str	r2, [r3, #4]
 800920c:	683b      	ldr	r3, [r7, #0]
 800920e:	685a      	ldr	r2, [r3, #4]
 8009210:	683b      	ldr	r3, [r7, #0]
 8009212:	3308      	adds	r3, #8
 8009214:	429a      	cmp	r2, r3
 8009216:	d104      	bne.n	8009222 <vTaskSwitchContext+0x76>
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	685a      	ldr	r2, [r3, #4]
 800921e:	683b      	ldr	r3, [r7, #0]
 8009220:	605a      	str	r2, [r3, #4]
 8009222:	683b      	ldr	r3, [r7, #0]
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	4b08      	ldr	r3, [pc, #32]	; (800924c <vTaskSwitchContext+0xa0>)
 800922a:	601a      	str	r2, [r3, #0]
 800922c:	4b05      	ldr	r3, [pc, #20]	; (8009244 <vTaskSwitchContext+0x98>)
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	601a      	str	r2, [r3, #0]
}
 8009232:	46c0      	nop			; (mov r8, r8)
 8009234:	46bd      	mov	sp, r7
 8009236:	b002      	add	sp, #8
 8009238:	bd80      	pop	{r7, pc}
 800923a:	46c0      	nop			; (mov r8, r8)
 800923c:	200038ac 	.word	0x200038ac
 8009240:	20003898 	.word	0x20003898
 8009244:	2000388c 	.word	0x2000388c
 8009248:	20003788 	.word	0x20003788
 800924c:	20003784 	.word	0x20003784

08009250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009250:	b580      	push	{r7, lr}
 8009252:	b082      	sub	sp, #8
 8009254:	af00      	add	r7, sp, #0
 8009256:	6078      	str	r0, [r7, #4]
 8009258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d101      	bne.n	8009264 <vTaskPlaceOnEventList+0x14>
 8009260:	b672      	cpsid	i
 8009262:	e7fe      	b.n	8009262 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009264:	4b08      	ldr	r3, [pc, #32]	; (8009288 <vTaskPlaceOnEventList+0x38>)
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	3318      	adds	r3, #24
 800926a:	001a      	movs	r2, r3
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	0011      	movs	r1, r2
 8009270:	0018      	movs	r0, r3
 8009272:	f7ff f9fd 	bl	8008670 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009276:	683b      	ldr	r3, [r7, #0]
 8009278:	2101      	movs	r1, #1
 800927a:	0018      	movs	r0, r3
 800927c:	f000 fa88 	bl	8009790 <prvAddCurrentTaskToDelayedList>
}
 8009280:	46c0      	nop			; (mov r8, r8)
 8009282:	46bd      	mov	sp, r7
 8009284:	b002      	add	sp, #8
 8009286:	bd80      	pop	{r7, pc}
 8009288:	20003784 	.word	0x20003784

0800928c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	68db      	ldr	r3, [r3, #12]
 8009298:	68db      	ldr	r3, [r3, #12]
 800929a:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d101      	bne.n	80092a6 <xTaskRemoveFromEventList+0x1a>
 80092a2:	b672      	cpsid	i
 80092a4:	e7fe      	b.n	80092a4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	3318      	adds	r3, #24
 80092aa:	0018      	movs	r0, r3
 80092ac:	f7ff fa16 	bl	80086dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092b0:	4b1e      	ldr	r3, [pc, #120]	; (800932c <xTaskRemoveFromEventList+0xa0>)
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d11d      	bne.n	80092f4 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80092b8:	68bb      	ldr	r3, [r7, #8]
 80092ba:	3304      	adds	r3, #4
 80092bc:	0018      	movs	r0, r3
 80092be:	f7ff fa0d 	bl	80086dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092c6:	4b1a      	ldr	r3, [pc, #104]	; (8009330 <xTaskRemoveFromEventList+0xa4>)
 80092c8:	681b      	ldr	r3, [r3, #0]
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d903      	bls.n	80092d6 <xTaskRemoveFromEventList+0x4a>
 80092ce:	68bb      	ldr	r3, [r7, #8]
 80092d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092d2:	4b17      	ldr	r3, [pc, #92]	; (8009330 <xTaskRemoveFromEventList+0xa4>)
 80092d4:	601a      	str	r2, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	0013      	movs	r3, r2
 80092dc:	009b      	lsls	r3, r3, #2
 80092de:	189b      	adds	r3, r3, r2
 80092e0:	009b      	lsls	r3, r3, #2
 80092e2:	4a14      	ldr	r2, [pc, #80]	; (8009334 <xTaskRemoveFromEventList+0xa8>)
 80092e4:	189a      	adds	r2, r3, r2
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	3304      	adds	r3, #4
 80092ea:	0019      	movs	r1, r3
 80092ec:	0010      	movs	r0, r2
 80092ee:	f7ff f99d 	bl	800862c <vListInsertEnd>
 80092f2:	e007      	b.n	8009304 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092f4:	68bb      	ldr	r3, [r7, #8]
 80092f6:	3318      	adds	r3, #24
 80092f8:	001a      	movs	r2, r3
 80092fa:	4b0f      	ldr	r3, [pc, #60]	; (8009338 <xTaskRemoveFromEventList+0xac>)
 80092fc:	0011      	movs	r1, r2
 80092fe:	0018      	movs	r0, r3
 8009300:	f7ff f994 	bl	800862c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009308:	4b0c      	ldr	r3, [pc, #48]	; (800933c <xTaskRemoveFromEventList+0xb0>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800930e:	429a      	cmp	r2, r3
 8009310:	d905      	bls.n	800931e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009312:	2301      	movs	r3, #1
 8009314:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8009316:	4b0a      	ldr	r3, [pc, #40]	; (8009340 <xTaskRemoveFromEventList+0xb4>)
 8009318:	2201      	movs	r2, #1
 800931a:	601a      	str	r2, [r3, #0]
 800931c:	e001      	b.n	8009322 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800931e:	2300      	movs	r3, #0
 8009320:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8009322:	68fb      	ldr	r3, [r7, #12]
}
 8009324:	0018      	movs	r0, r3
 8009326:	46bd      	mov	sp, r7
 8009328:	b004      	add	sp, #16
 800932a:	bd80      	pop	{r7, pc}
 800932c:	200038ac 	.word	0x200038ac
 8009330:	2000388c 	.word	0x2000388c
 8009334:	20003788 	.word	0x20003788
 8009338:	20003844 	.word	0x20003844
 800933c:	20003784 	.word	0x20003784
 8009340:	20003898 	.word	0x20003898

08009344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800934c:	4b05      	ldr	r3, [pc, #20]	; (8009364 <vTaskInternalSetTimeOutState+0x20>)
 800934e:	681a      	ldr	r2, [r3, #0]
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8009354:	4b04      	ldr	r3, [pc, #16]	; (8009368 <vTaskInternalSetTimeOutState+0x24>)
 8009356:	681a      	ldr	r2, [r3, #0]
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	605a      	str	r2, [r3, #4]
}
 800935c:	46c0      	nop			; (mov r8, r8)
 800935e:	46bd      	mov	sp, r7
 8009360:	b002      	add	sp, #8
 8009362:	bd80      	pop	{r7, pc}
 8009364:	2000389c 	.word	0x2000389c
 8009368:	20003888 	.word	0x20003888

0800936c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800936c:	b580      	push	{r7, lr}
 800936e:	b086      	sub	sp, #24
 8009370:	af00      	add	r7, sp, #0
 8009372:	6078      	str	r0, [r7, #4]
 8009374:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2b00      	cmp	r3, #0
 800937a:	d101      	bne.n	8009380 <xTaskCheckForTimeOut+0x14>
 800937c:	b672      	cpsid	i
 800937e:	e7fe      	b.n	800937e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009380:	683b      	ldr	r3, [r7, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d101      	bne.n	800938a <xTaskCheckForTimeOut+0x1e>
 8009386:	b672      	cpsid	i
 8009388:	e7fe      	b.n	8009388 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800938a:	f000 faf1 	bl	8009970 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800938e:	4b1d      	ldr	r3, [pc, #116]	; (8009404 <xTaskCheckForTimeOut+0x98>)
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	693a      	ldr	r2, [r7, #16]
 800939a:	1ad3      	subs	r3, r2, r3
 800939c:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800939e:	683b      	ldr	r3, [r7, #0]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	3301      	adds	r3, #1
 80093a4:	d102      	bne.n	80093ac <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80093a6:	2300      	movs	r3, #0
 80093a8:	617b      	str	r3, [r7, #20]
 80093aa:	e024      	b.n	80093f6 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	4b15      	ldr	r3, [pc, #84]	; (8009408 <xTaskCheckForTimeOut+0x9c>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d007      	beq.n	80093c8 <xTaskCheckForTimeOut+0x5c>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	693a      	ldr	r2, [r7, #16]
 80093be:	429a      	cmp	r2, r3
 80093c0:	d302      	bcc.n	80093c8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80093c2:	2301      	movs	r3, #1
 80093c4:	617b      	str	r3, [r7, #20]
 80093c6:	e016      	b.n	80093f6 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	429a      	cmp	r2, r3
 80093d0:	d20c      	bcs.n	80093ec <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80093d2:	683b      	ldr	r3, [r7, #0]
 80093d4:	681a      	ldr	r2, [r3, #0]
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	1ad2      	subs	r2, r2, r3
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	0018      	movs	r0, r3
 80093e2:	f7ff ffaf 	bl	8009344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	e004      	b.n	80093f6 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80093f2:	2301      	movs	r3, #1
 80093f4:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80093f6:	f000 facd 	bl	8009994 <vPortExitCritical>

	return xReturn;
 80093fa:	697b      	ldr	r3, [r7, #20]
}
 80093fc:	0018      	movs	r0, r3
 80093fe:	46bd      	mov	sp, r7
 8009400:	b006      	add	sp, #24
 8009402:	bd80      	pop	{r7, pc}
 8009404:	20003888 	.word	0x20003888
 8009408:	2000389c 	.word	0x2000389c

0800940c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800940c:	b580      	push	{r7, lr}
 800940e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009410:	4b02      	ldr	r3, [pc, #8]	; (800941c <vTaskMissedYield+0x10>)
 8009412:	2201      	movs	r2, #1
 8009414:	601a      	str	r2, [r3, #0]
}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	46bd      	mov	sp, r7
 800941a:	bd80      	pop	{r7, pc}
 800941c:	20003898 	.word	0x20003898

08009420 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b082      	sub	sp, #8
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009428:	f000 f84e 	bl	80094c8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800942c:	4b03      	ldr	r3, [pc, #12]	; (800943c <prvIdleTask+0x1c>)
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d9f9      	bls.n	8009428 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009434:	f000 fa8c 	bl	8009950 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009438:	e7f6      	b.n	8009428 <prvIdleTask+0x8>
 800943a:	46c0      	nop			; (mov r8, r8)
 800943c:	20003788 	.word	0x20003788

08009440 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009440:	b580      	push	{r7, lr}
 8009442:	b082      	sub	sp, #8
 8009444:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009446:	2300      	movs	r3, #0
 8009448:	607b      	str	r3, [r7, #4]
 800944a:	e00c      	b.n	8009466 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800944c:	687a      	ldr	r2, [r7, #4]
 800944e:	0013      	movs	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	189b      	adds	r3, r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	4a14      	ldr	r2, [pc, #80]	; (80094a8 <prvInitialiseTaskLists+0x68>)
 8009458:	189b      	adds	r3, r3, r2
 800945a:	0018      	movs	r0, r3
 800945c:	f7ff f8bd 	bl	80085da <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	3301      	adds	r3, #1
 8009464:	607b      	str	r3, [r7, #4]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2b06      	cmp	r3, #6
 800946a:	d9ef      	bls.n	800944c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800946c:	4b0f      	ldr	r3, [pc, #60]	; (80094ac <prvInitialiseTaskLists+0x6c>)
 800946e:	0018      	movs	r0, r3
 8009470:	f7ff f8b3 	bl	80085da <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009474:	4b0e      	ldr	r3, [pc, #56]	; (80094b0 <prvInitialiseTaskLists+0x70>)
 8009476:	0018      	movs	r0, r3
 8009478:	f7ff f8af 	bl	80085da <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800947c:	4b0d      	ldr	r3, [pc, #52]	; (80094b4 <prvInitialiseTaskLists+0x74>)
 800947e:	0018      	movs	r0, r3
 8009480:	f7ff f8ab 	bl	80085da <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009484:	4b0c      	ldr	r3, [pc, #48]	; (80094b8 <prvInitialiseTaskLists+0x78>)
 8009486:	0018      	movs	r0, r3
 8009488:	f7ff f8a7 	bl	80085da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800948c:	4b0b      	ldr	r3, [pc, #44]	; (80094bc <prvInitialiseTaskLists+0x7c>)
 800948e:	0018      	movs	r0, r3
 8009490:	f7ff f8a3 	bl	80085da <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009494:	4b0a      	ldr	r3, [pc, #40]	; (80094c0 <prvInitialiseTaskLists+0x80>)
 8009496:	4a05      	ldr	r2, [pc, #20]	; (80094ac <prvInitialiseTaskLists+0x6c>)
 8009498:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800949a:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <prvInitialiseTaskLists+0x84>)
 800949c:	4a04      	ldr	r2, [pc, #16]	; (80094b0 <prvInitialiseTaskLists+0x70>)
 800949e:	601a      	str	r2, [r3, #0]
}
 80094a0:	46c0      	nop			; (mov r8, r8)
 80094a2:	46bd      	mov	sp, r7
 80094a4:	b002      	add	sp, #8
 80094a6:	bd80      	pop	{r7, pc}
 80094a8:	20003788 	.word	0x20003788
 80094ac:	20003814 	.word	0x20003814
 80094b0:	20003828 	.word	0x20003828
 80094b4:	20003844 	.word	0x20003844
 80094b8:	20003858 	.word	0x20003858
 80094bc:	20003870 	.word	0x20003870
 80094c0:	2000383c 	.word	0x2000383c
 80094c4:	20003840 	.word	0x20003840

080094c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b082      	sub	sp, #8
 80094cc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094ce:	e01a      	b.n	8009506 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80094d0:	f000 fa4e 	bl	8009970 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094d4:	4b10      	ldr	r3, [pc, #64]	; (8009518 <prvCheckTasksWaitingTermination+0x50>)
 80094d6:	68db      	ldr	r3, [r3, #12]
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	3304      	adds	r3, #4
 80094e0:	0018      	movs	r0, r3
 80094e2:	f7ff f8fb 	bl	80086dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094e6:	4b0d      	ldr	r3, [pc, #52]	; (800951c <prvCheckTasksWaitingTermination+0x54>)
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	1e5a      	subs	r2, r3, #1
 80094ec:	4b0b      	ldr	r3, [pc, #44]	; (800951c <prvCheckTasksWaitingTermination+0x54>)
 80094ee:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094f0:	4b0b      	ldr	r3, [pc, #44]	; (8009520 <prvCheckTasksWaitingTermination+0x58>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	1e5a      	subs	r2, r3, #1
 80094f6:	4b0a      	ldr	r3, [pc, #40]	; (8009520 <prvCheckTasksWaitingTermination+0x58>)
 80094f8:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80094fa:	f000 fa4b 	bl	8009994 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	0018      	movs	r0, r3
 8009502:	f000 f80f 	bl	8009524 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009506:	4b06      	ldr	r3, [pc, #24]	; (8009520 <prvCheckTasksWaitingTermination+0x58>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	2b00      	cmp	r3, #0
 800950c:	d1e0      	bne.n	80094d0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800950e:	46c0      	nop			; (mov r8, r8)
 8009510:	46c0      	nop			; (mov r8, r8)
 8009512:	46bd      	mov	sp, r7
 8009514:	b002      	add	sp, #8
 8009516:	bd80      	pop	{r7, pc}
 8009518:	20003858 	.word	0x20003858
 800951c:	20003884 	.word	0x20003884
 8009520:	2000386c 	.word	0x2000386c

08009524 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009524:	b580      	push	{r7, lr}
 8009526:	b082      	sub	sp, #8
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009530:	0018      	movs	r0, r3
 8009532:	f000 fb61 	bl	8009bf8 <vPortFree>
			vPortFree( pxTCB );
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	0018      	movs	r0, r3
 800953a:	f000 fb5d 	bl	8009bf8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800953e:	46c0      	nop			; (mov r8, r8)
 8009540:	46bd      	mov	sp, r7
 8009542:	b002      	add	sp, #8
 8009544:	bd80      	pop	{r7, pc}
	...

08009548 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009548:	b580      	push	{r7, lr}
 800954a:	b082      	sub	sp, #8
 800954c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800954e:	4b0b      	ldr	r3, [pc, #44]	; (800957c <prvResetNextTaskUnblockTime+0x34>)
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	2b00      	cmp	r3, #0
 8009556:	d104      	bne.n	8009562 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009558:	4b09      	ldr	r3, [pc, #36]	; (8009580 <prvResetNextTaskUnblockTime+0x38>)
 800955a:	2201      	movs	r2, #1
 800955c:	4252      	negs	r2, r2
 800955e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009560:	e008      	b.n	8009574 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009562:	4b06      	ldr	r3, [pc, #24]	; (800957c <prvResetNextTaskUnblockTime+0x34>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68db      	ldr	r3, [r3, #12]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	685a      	ldr	r2, [r3, #4]
 8009570:	4b03      	ldr	r3, [pc, #12]	; (8009580 <prvResetNextTaskUnblockTime+0x38>)
 8009572:	601a      	str	r2, [r3, #0]
}
 8009574:	46c0      	nop			; (mov r8, r8)
 8009576:	46bd      	mov	sp, r7
 8009578:	b002      	add	sp, #8
 800957a:	bd80      	pop	{r7, pc}
 800957c:	2000383c 	.word	0x2000383c
 8009580:	200038a4 	.word	0x200038a4

08009584 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009584:	b580      	push	{r7, lr}
 8009586:	b082      	sub	sp, #8
 8009588:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800958a:	4b0a      	ldr	r3, [pc, #40]	; (80095b4 <xTaskGetSchedulerState+0x30>)
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d102      	bne.n	8009598 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009592:	2301      	movs	r3, #1
 8009594:	607b      	str	r3, [r7, #4]
 8009596:	e008      	b.n	80095aa <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009598:	4b07      	ldr	r3, [pc, #28]	; (80095b8 <xTaskGetSchedulerState+0x34>)
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b00      	cmp	r3, #0
 800959e:	d102      	bne.n	80095a6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80095a0:	2302      	movs	r3, #2
 80095a2:	607b      	str	r3, [r7, #4]
 80095a4:	e001      	b.n	80095aa <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80095a6:	2300      	movs	r3, #0
 80095a8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80095aa:	687b      	ldr	r3, [r7, #4]
	}
 80095ac:	0018      	movs	r0, r3
 80095ae:	46bd      	mov	sp, r7
 80095b0:	b002      	add	sp, #8
 80095b2:	bd80      	pop	{r7, pc}
 80095b4:	20003890 	.word	0x20003890
 80095b8:	200038ac 	.word	0x200038ac

080095bc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b084      	sub	sp, #16
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80095c8:	2300      	movs	r3, #0
 80095ca:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d051      	beq.n	8009676 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095d2:	68bb      	ldr	r3, [r7, #8]
 80095d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095d6:	4b2a      	ldr	r3, [pc, #168]	; (8009680 <xTaskPriorityInherit+0xc4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095dc:	429a      	cmp	r2, r3
 80095de:	d241      	bcs.n	8009664 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095e0:	68bb      	ldr	r3, [r7, #8]
 80095e2:	699b      	ldr	r3, [r3, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	db06      	blt.n	80095f6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095e8:	4b25      	ldr	r3, [pc, #148]	; (8009680 <xTaskPriorityInherit+0xc4>)
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095ee:	2207      	movs	r2, #7
 80095f0:	1ad2      	subs	r2, r2, r3
 80095f2:	68bb      	ldr	r3, [r7, #8]
 80095f4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	6959      	ldr	r1, [r3, #20]
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80095fe:	0013      	movs	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	189b      	adds	r3, r3, r2
 8009604:	009b      	lsls	r3, r3, #2
 8009606:	4a1f      	ldr	r2, [pc, #124]	; (8009684 <xTaskPriorityInherit+0xc8>)
 8009608:	189b      	adds	r3, r3, r2
 800960a:	4299      	cmp	r1, r3
 800960c:	d122      	bne.n	8009654 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	3304      	adds	r3, #4
 8009612:	0018      	movs	r0, r3
 8009614:	f7ff f862 	bl	80086dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009618:	4b19      	ldr	r3, [pc, #100]	; (8009680 <xTaskPriorityInherit+0xc4>)
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009626:	4b18      	ldr	r3, [pc, #96]	; (8009688 <xTaskPriorityInherit+0xcc>)
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	429a      	cmp	r2, r3
 800962c:	d903      	bls.n	8009636 <xTaskPriorityInherit+0x7a>
 800962e:	68bb      	ldr	r3, [r7, #8]
 8009630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009632:	4b15      	ldr	r3, [pc, #84]	; (8009688 <xTaskPriorityInherit+0xcc>)
 8009634:	601a      	str	r2, [r3, #0]
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963a:	0013      	movs	r3, r2
 800963c:	009b      	lsls	r3, r3, #2
 800963e:	189b      	adds	r3, r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4a10      	ldr	r2, [pc, #64]	; (8009684 <xTaskPriorityInherit+0xc8>)
 8009644:	189a      	adds	r2, r3, r2
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	3304      	adds	r3, #4
 800964a:	0019      	movs	r1, r3
 800964c:	0010      	movs	r0, r2
 800964e:	f7fe ffed 	bl	800862c <vListInsertEnd>
 8009652:	e004      	b.n	800965e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009654:	4b0a      	ldr	r3, [pc, #40]	; (8009680 <xTaskPriorityInherit+0xc4>)
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800965e:	2301      	movs	r3, #1
 8009660:	60fb      	str	r3, [r7, #12]
 8009662:	e008      	b.n	8009676 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009668:	4b05      	ldr	r3, [pc, #20]	; (8009680 <xTaskPriorityInherit+0xc4>)
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800966e:	429a      	cmp	r2, r3
 8009670:	d201      	bcs.n	8009676 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8009672:	2301      	movs	r3, #1
 8009674:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009676:	68fb      	ldr	r3, [r7, #12]
	}
 8009678:	0018      	movs	r0, r3
 800967a:	46bd      	mov	sp, r7
 800967c:	b004      	add	sp, #16
 800967e:	bd80      	pop	{r7, pc}
 8009680:	20003784 	.word	0x20003784
 8009684:	20003788 	.word	0x20003788
 8009688:	2000388c 	.word	0x2000388c

0800968c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800968c:	b580      	push	{r7, lr}
 800968e:	b086      	sub	sp, #24
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800969a:	2301      	movs	r3, #1
 800969c:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d058      	beq.n	8009756 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80096a4:	693b      	ldr	r3, [r7, #16]
 80096a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d101      	bne.n	80096b0 <vTaskPriorityDisinheritAfterTimeout+0x24>
 80096ac:	b672      	cpsid	i
 80096ae:	e7fe      	b.n	80096ae <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80096b0:	693b      	ldr	r3, [r7, #16]
 80096b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096b4:	683a      	ldr	r2, [r7, #0]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d902      	bls.n	80096c0 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	617b      	str	r3, [r7, #20]
 80096be:	e002      	b.n	80096c6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80096c4:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80096c6:	693b      	ldr	r3, [r7, #16]
 80096c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ca:	697a      	ldr	r2, [r7, #20]
 80096cc:	429a      	cmp	r2, r3
 80096ce:	d042      	beq.n	8009756 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80096d4:	68fa      	ldr	r2, [r7, #12]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d13d      	bne.n	8009756 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80096da:	4b21      	ldr	r3, [pc, #132]	; (8009760 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	693a      	ldr	r2, [r7, #16]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d101      	bne.n	80096e8 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80096e4:	b672      	cpsid	i
 80096e6:	e7fe      	b.n	80096e6 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80096ec:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	697a      	ldr	r2, [r7, #20]
 80096f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	699b      	ldr	r3, [r3, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	db04      	blt.n	8009706 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096fc:	697b      	ldr	r3, [r7, #20]
 80096fe:	2207      	movs	r2, #7
 8009700:	1ad2      	subs	r2, r2, r3
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	6959      	ldr	r1, [r3, #20]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	0013      	movs	r3, r2
 800970e:	009b      	lsls	r3, r3, #2
 8009710:	189b      	adds	r3, r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4a13      	ldr	r2, [pc, #76]	; (8009764 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8009716:	189b      	adds	r3, r3, r2
 8009718:	4299      	cmp	r1, r3
 800971a:	d11c      	bne.n	8009756 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800971c:	693b      	ldr	r3, [r7, #16]
 800971e:	3304      	adds	r3, #4
 8009720:	0018      	movs	r0, r3
 8009722:	f7fe ffdb 	bl	80086dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800972a:	4b0f      	ldr	r3, [pc, #60]	; (8009768 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	429a      	cmp	r2, r3
 8009730:	d903      	bls.n	800973a <vTaskPriorityDisinheritAfterTimeout+0xae>
 8009732:	693b      	ldr	r3, [r7, #16]
 8009734:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009736:	4b0c      	ldr	r3, [pc, #48]	; (8009768 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8009738:	601a      	str	r2, [r3, #0]
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800973e:	0013      	movs	r3, r2
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	189b      	adds	r3, r3, r2
 8009744:	009b      	lsls	r3, r3, #2
 8009746:	4a07      	ldr	r2, [pc, #28]	; (8009764 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8009748:	189a      	adds	r2, r3, r2
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	3304      	adds	r3, #4
 800974e:	0019      	movs	r1, r3
 8009750:	0010      	movs	r0, r2
 8009752:	f7fe ff6b 	bl	800862c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009756:	46c0      	nop			; (mov r8, r8)
 8009758:	46bd      	mov	sp, r7
 800975a:	b006      	add	sp, #24
 800975c:	bd80      	pop	{r7, pc}
 800975e:	46c0      	nop			; (mov r8, r8)
 8009760:	20003784 	.word	0x20003784
 8009764:	20003788 	.word	0x20003788
 8009768:	2000388c 	.word	0x2000388c

0800976c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800976c:	b580      	push	{r7, lr}
 800976e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009770:	4b06      	ldr	r3, [pc, #24]	; (800978c <pvTaskIncrementMutexHeldCount+0x20>)
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d004      	beq.n	8009782 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <pvTaskIncrementMutexHeldCount+0x20>)
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800977e:	3201      	adds	r2, #1
 8009780:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8009782:	4b02      	ldr	r3, [pc, #8]	; (800978c <pvTaskIncrementMutexHeldCount+0x20>)
 8009784:	681b      	ldr	r3, [r3, #0]
	}
 8009786:	0018      	movs	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	bd80      	pop	{r7, pc}
 800978c:	20003784 	.word	0x20003784

08009790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
 8009798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800979a:	4b21      	ldr	r3, [pc, #132]	; (8009820 <prvAddCurrentTaskToDelayedList+0x90>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097a0:	4b20      	ldr	r3, [pc, #128]	; (8009824 <prvAddCurrentTaskToDelayedList+0x94>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	3304      	adds	r3, #4
 80097a6:	0018      	movs	r0, r3
 80097a8:	f7fe ff98 	bl	80086dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	3301      	adds	r3, #1
 80097b0:	d10b      	bne.n	80097ca <prvAddCurrentTaskToDelayedList+0x3a>
 80097b2:	683b      	ldr	r3, [r7, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d008      	beq.n	80097ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097b8:	4b1a      	ldr	r3, [pc, #104]	; (8009824 <prvAddCurrentTaskToDelayedList+0x94>)
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	1d1a      	adds	r2, r3, #4
 80097be:	4b1a      	ldr	r3, [pc, #104]	; (8009828 <prvAddCurrentTaskToDelayedList+0x98>)
 80097c0:	0011      	movs	r1, r2
 80097c2:	0018      	movs	r0, r3
 80097c4:	f7fe ff32 	bl	800862c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80097c8:	e026      	b.n	8009818 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	18d3      	adds	r3, r2, r3
 80097d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80097d2:	4b14      	ldr	r3, [pc, #80]	; (8009824 <prvAddCurrentTaskToDelayedList+0x94>)
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	68ba      	ldr	r2, [r7, #8]
 80097d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80097da:	68ba      	ldr	r2, [r7, #8]
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	429a      	cmp	r2, r3
 80097e0:	d209      	bcs.n	80097f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097e2:	4b12      	ldr	r3, [pc, #72]	; (800982c <prvAddCurrentTaskToDelayedList+0x9c>)
 80097e4:	681a      	ldr	r2, [r3, #0]
 80097e6:	4b0f      	ldr	r3, [pc, #60]	; (8009824 <prvAddCurrentTaskToDelayedList+0x94>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	3304      	adds	r3, #4
 80097ec:	0019      	movs	r1, r3
 80097ee:	0010      	movs	r0, r2
 80097f0:	f7fe ff3e 	bl	8008670 <vListInsert>
}
 80097f4:	e010      	b.n	8009818 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80097f6:	4b0e      	ldr	r3, [pc, #56]	; (8009830 <prvAddCurrentTaskToDelayedList+0xa0>)
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	4b0a      	ldr	r3, [pc, #40]	; (8009824 <prvAddCurrentTaskToDelayedList+0x94>)
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	3304      	adds	r3, #4
 8009800:	0019      	movs	r1, r3
 8009802:	0010      	movs	r0, r2
 8009804:	f7fe ff34 	bl	8008670 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009808:	4b0a      	ldr	r3, [pc, #40]	; (8009834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	68ba      	ldr	r2, [r7, #8]
 800980e:	429a      	cmp	r2, r3
 8009810:	d202      	bcs.n	8009818 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009812:	4b08      	ldr	r3, [pc, #32]	; (8009834 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009814:	68ba      	ldr	r2, [r7, #8]
 8009816:	601a      	str	r2, [r3, #0]
}
 8009818:	46c0      	nop			; (mov r8, r8)
 800981a:	46bd      	mov	sp, r7
 800981c:	b004      	add	sp, #16
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20003888 	.word	0x20003888
 8009824:	20003784 	.word	0x20003784
 8009828:	20003870 	.word	0x20003870
 800982c:	20003840 	.word	0x20003840
 8009830:	2000383c 	.word	0x2000383c
 8009834:	200038a4 	.word	0x200038a4

08009838 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009838:	b580      	push	{r7, lr}
 800983a:	b084      	sub	sp, #16
 800983c:	af00      	add	r7, sp, #0
 800983e:	60f8      	str	r0, [r7, #12]
 8009840:	60b9      	str	r1, [r7, #8]
 8009842:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	3b04      	subs	r3, #4
 8009848:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	2280      	movs	r2, #128	; 0x80
 800984e:	0452      	lsls	r2, r2, #17
 8009850:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	3b04      	subs	r3, #4
 8009856:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009858:	68ba      	ldr	r2, [r7, #8]
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	3b04      	subs	r3, #4
 8009862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009864:	4a08      	ldr	r2, [pc, #32]	; (8009888 <pxPortInitialiseStack+0x50>)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	3b14      	subs	r3, #20
 800986e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009870:	687a      	ldr	r2, [r7, #4]
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3b20      	subs	r3, #32
 800987a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800987c:	68fb      	ldr	r3, [r7, #12]
}
 800987e:	0018      	movs	r0, r3
 8009880:	46bd      	mov	sp, r7
 8009882:	b004      	add	sp, #16
 8009884:	bd80      	pop	{r7, pc}
 8009886:	46c0      	nop			; (mov r8, r8)
 8009888:	0800988d 	.word	0x0800988d

0800988c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800988c:	b580      	push	{r7, lr}
 800988e:	b082      	sub	sp, #8
 8009890:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8009892:	2300      	movs	r3, #0
 8009894:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009896:	4b08      	ldr	r3, [pc, #32]	; (80098b8 <prvTaskExitError+0x2c>)
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	3301      	adds	r3, #1
 800989c:	d001      	beq.n	80098a2 <prvTaskExitError+0x16>
 800989e:	b672      	cpsid	i
 80098a0:	e7fe      	b.n	80098a0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80098a2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80098a4:	46c0      	nop			; (mov r8, r8)
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d0fc      	beq.n	80098a6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80098ac:	46c0      	nop			; (mov r8, r8)
 80098ae:	46c0      	nop			; (mov r8, r8)
 80098b0:	46bd      	mov	sp, r7
 80098b2:	b002      	add	sp, #8
 80098b4:	bd80      	pop	{r7, pc}
 80098b6:	46c0      	nop			; (mov r8, r8)
 80098b8:	20000010 	.word	0x20000010

080098bc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80098c0:	46c0      	nop			; (mov r8, r8)
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
	...

080098d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80098d0:	4a0b      	ldr	r2, [pc, #44]	; (8009900 <pxCurrentTCBConst2>)
 80098d2:	6813      	ldr	r3, [r2, #0]
 80098d4:	6818      	ldr	r0, [r3, #0]
 80098d6:	3020      	adds	r0, #32
 80098d8:	f380 8809 	msr	PSP, r0
 80098dc:	2002      	movs	r0, #2
 80098de:	f380 8814 	msr	CONTROL, r0
 80098e2:	f3bf 8f6f 	isb	sy
 80098e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80098e8:	46ae      	mov	lr, r5
 80098ea:	bc08      	pop	{r3}
 80098ec:	bc04      	pop	{r2}
 80098ee:	b662      	cpsie	i
 80098f0:	4718      	bx	r3
 80098f2:	46c0      	nop			; (mov r8, r8)
 80098f4:	46c0      	nop			; (mov r8, r8)
 80098f6:	46c0      	nop			; (mov r8, r8)
 80098f8:	46c0      	nop			; (mov r8, r8)
 80098fa:	46c0      	nop			; (mov r8, r8)
 80098fc:	46c0      	nop			; (mov r8, r8)
 80098fe:	46c0      	nop			; (mov r8, r8)

08009900 <pxCurrentTCBConst2>:
 8009900:	20003784 	.word	0x20003784
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009904:	46c0      	nop			; (mov r8, r8)
 8009906:	46c0      	nop			; (mov r8, r8)

08009908 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800990c:	4b0e      	ldr	r3, [pc, #56]	; (8009948 <xPortStartScheduler+0x40>)
 800990e:	681a      	ldr	r2, [r3, #0]
 8009910:	4b0d      	ldr	r3, [pc, #52]	; (8009948 <xPortStartScheduler+0x40>)
 8009912:	21ff      	movs	r1, #255	; 0xff
 8009914:	0409      	lsls	r1, r1, #16
 8009916:	430a      	orrs	r2, r1
 8009918:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800991a:	4b0b      	ldr	r3, [pc, #44]	; (8009948 <xPortStartScheduler+0x40>)
 800991c:	681a      	ldr	r2, [r3, #0]
 800991e:	4b0a      	ldr	r3, [pc, #40]	; (8009948 <xPortStartScheduler+0x40>)
 8009920:	21ff      	movs	r1, #255	; 0xff
 8009922:	0609      	lsls	r1, r1, #24
 8009924:	430a      	orrs	r2, r1
 8009926:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009928:	f000 f898 	bl	8009a5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800992c:	4b07      	ldr	r3, [pc, #28]	; (800994c <xPortStartScheduler+0x44>)
 800992e:	2200      	movs	r2, #0
 8009930:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009932:	f7ff ffcd 	bl	80098d0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009936:	f7ff fc39 	bl	80091ac <vTaskSwitchContext>
	prvTaskExitError();
 800993a:	f7ff ffa7 	bl	800988c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800993e:	2300      	movs	r3, #0
}
 8009940:	0018      	movs	r0, r3
 8009942:	46bd      	mov	sp, r7
 8009944:	bd80      	pop	{r7, pc}
 8009946:	46c0      	nop			; (mov r8, r8)
 8009948:	e000ed20 	.word	0xe000ed20
 800994c:	20000010 	.word	0x20000010

08009950 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009950:	b580      	push	{r7, lr}
 8009952:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009954:	4b05      	ldr	r3, [pc, #20]	; (800996c <vPortYield+0x1c>)
 8009956:	2280      	movs	r2, #128	; 0x80
 8009958:	0552      	lsls	r2, r2, #21
 800995a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800995c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009960:	f3bf 8f6f 	isb	sy
}
 8009964:	46c0      	nop			; (mov r8, r8)
 8009966:	46bd      	mov	sp, r7
 8009968:	bd80      	pop	{r7, pc}
 800996a:	46c0      	nop			; (mov r8, r8)
 800996c:	e000ed04 	.word	0xe000ed04

08009970 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009970:	b580      	push	{r7, lr}
 8009972:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8009974:	b672      	cpsid	i
	uxCriticalNesting++;
 8009976:	4b06      	ldr	r3, [pc, #24]	; (8009990 <vPortEnterCritical+0x20>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	1c5a      	adds	r2, r3, #1
 800997c:	4b04      	ldr	r3, [pc, #16]	; (8009990 <vPortEnterCritical+0x20>)
 800997e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009980:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009984:	f3bf 8f6f 	isb	sy
}
 8009988:	46c0      	nop			; (mov r8, r8)
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	20000010 	.word	0x20000010

08009994 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009994:	b580      	push	{r7, lr}
 8009996:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009998:	4b09      	ldr	r3, [pc, #36]	; (80099c0 <vPortExitCritical+0x2c>)
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d101      	bne.n	80099a4 <vPortExitCritical+0x10>
 80099a0:	b672      	cpsid	i
 80099a2:	e7fe      	b.n	80099a2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80099a4:	4b06      	ldr	r3, [pc, #24]	; (80099c0 <vPortExitCritical+0x2c>)
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	1e5a      	subs	r2, r3, #1
 80099aa:	4b05      	ldr	r3, [pc, #20]	; (80099c0 <vPortExitCritical+0x2c>)
 80099ac:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80099ae:	4b04      	ldr	r3, [pc, #16]	; (80099c0 <vPortExitCritical+0x2c>)
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d100      	bne.n	80099b8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80099b6:	b662      	cpsie	i
	}
}
 80099b8:	46c0      	nop			; (mov r8, r8)
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	46c0      	nop			; (mov r8, r8)
 80099c0:	20000010 	.word	0x20000010

080099c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80099c4:	f3ef 8010 	mrs	r0, PRIMASK
 80099c8:	b672      	cpsid	i
 80099ca:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80099cc:	46c0      	nop			; (mov r8, r8)
 80099ce:	0018      	movs	r0, r3

080099d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80099d0:	f380 8810 	msr	PRIMASK, r0
 80099d4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80099d6:	46c0      	nop			; (mov r8, r8)
	...

080099e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80099e0:	f3ef 8009 	mrs	r0, PSP
 80099e4:	4b0e      	ldr	r3, [pc, #56]	; (8009a20 <pxCurrentTCBConst>)
 80099e6:	681a      	ldr	r2, [r3, #0]
 80099e8:	3820      	subs	r0, #32
 80099ea:	6010      	str	r0, [r2, #0]
 80099ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80099ee:	4644      	mov	r4, r8
 80099f0:	464d      	mov	r5, r9
 80099f2:	4656      	mov	r6, sl
 80099f4:	465f      	mov	r7, fp
 80099f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80099f8:	b508      	push	{r3, lr}
 80099fa:	b672      	cpsid	i
 80099fc:	f7ff fbd6 	bl	80091ac <vTaskSwitchContext>
 8009a00:	b662      	cpsie	i
 8009a02:	bc0c      	pop	{r2, r3}
 8009a04:	6811      	ldr	r1, [r2, #0]
 8009a06:	6808      	ldr	r0, [r1, #0]
 8009a08:	3010      	adds	r0, #16
 8009a0a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009a0c:	46a0      	mov	r8, r4
 8009a0e:	46a9      	mov	r9, r5
 8009a10:	46b2      	mov	sl, r6
 8009a12:	46bb      	mov	fp, r7
 8009a14:	f380 8809 	msr	PSP, r0
 8009a18:	3820      	subs	r0, #32
 8009a1a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8009a1c:	4718      	bx	r3
 8009a1e:	46c0      	nop			; (mov r8, r8)

08009a20 <pxCurrentTCBConst>:
 8009a20:	20003784 	.word	0x20003784
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009a24:	46c0      	nop			; (mov r8, r8)
 8009a26:	46c0      	nop			; (mov r8, r8)

08009a28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8009a2e:	f7ff ffc9 	bl	80099c4 <ulSetInterruptMaskFromISR>
 8009a32:	0003      	movs	r3, r0
 8009a34:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009a36:	f7ff fb09 	bl	800904c <xTaskIncrementTick>
 8009a3a:	1e03      	subs	r3, r0, #0
 8009a3c:	d003      	beq.n	8009a46 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009a3e:	4b06      	ldr	r3, [pc, #24]	; (8009a58 <SysTick_Handler+0x30>)
 8009a40:	2280      	movs	r2, #128	; 0x80
 8009a42:	0552      	lsls	r2, r2, #21
 8009a44:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	0018      	movs	r0, r3
 8009a4a:	f7ff ffc1 	bl	80099d0 <vClearInterruptMaskFromISR>
}
 8009a4e:	46c0      	nop			; (mov r8, r8)
 8009a50:	46bd      	mov	sp, r7
 8009a52:	b002      	add	sp, #8
 8009a54:	bd80      	pop	{r7, pc}
 8009a56:	46c0      	nop			; (mov r8, r8)
 8009a58:	e000ed04 	.word	0xe000ed04

08009a5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009a60:	4b0b      	ldr	r3, [pc, #44]	; (8009a90 <vPortSetupTimerInterrupt+0x34>)
 8009a62:	2200      	movs	r2, #0
 8009a64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009a66:	4b0b      	ldr	r3, [pc, #44]	; (8009a94 <vPortSetupTimerInterrupt+0x38>)
 8009a68:	2200      	movs	r2, #0
 8009a6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009a6c:	4b0a      	ldr	r3, [pc, #40]	; (8009a98 <vPortSetupTimerInterrupt+0x3c>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	22fa      	movs	r2, #250	; 0xfa
 8009a72:	0091      	lsls	r1, r2, #2
 8009a74:	0018      	movs	r0, r3
 8009a76:	f7f6 fb51 	bl	800011c <__udivsi3>
 8009a7a:	0003      	movs	r3, r0
 8009a7c:	001a      	movs	r2, r3
 8009a7e:	4b07      	ldr	r3, [pc, #28]	; (8009a9c <vPortSetupTimerInterrupt+0x40>)
 8009a80:	3a01      	subs	r2, #1
 8009a82:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009a84:	4b02      	ldr	r3, [pc, #8]	; (8009a90 <vPortSetupTimerInterrupt+0x34>)
 8009a86:	2207      	movs	r2, #7
 8009a88:	601a      	str	r2, [r3, #0]
}
 8009a8a:	46c0      	nop			; (mov r8, r8)
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	bd80      	pop	{r7, pc}
 8009a90:	e000e010 	.word	0xe000e010
 8009a94:	e000e018 	.word	0xe000e018
 8009a98:	20000004 	.word	0x20000004
 8009a9c:	e000e014 	.word	0xe000e014

08009aa0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009aa0:	b580      	push	{r7, lr}
 8009aa2:	b086      	sub	sp, #24
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8009aac:	f7ff fa36 	bl	8008f1c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009ab0:	4b4b      	ldr	r3, [pc, #300]	; (8009be0 <pvPortMalloc+0x140>)
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ab8:	f000 f8ec 	bl	8009c94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009abc:	4b49      	ldr	r3, [pc, #292]	; (8009be4 <pvPortMalloc+0x144>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	d000      	beq.n	8009ac8 <pvPortMalloc+0x28>
 8009ac6:	e07e      	b.n	8009bc6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d012      	beq.n	8009af4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8009ace:	2208      	movs	r2, #8
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	189b      	adds	r3, r3, r2
 8009ad4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	2207      	movs	r2, #7
 8009ada:	4013      	ands	r3, r2
 8009adc:	d00a      	beq.n	8009af4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	2207      	movs	r2, #7
 8009ae2:	4393      	bics	r3, r2
 8009ae4:	3308      	adds	r3, #8
 8009ae6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2207      	movs	r2, #7
 8009aec:	4013      	ands	r3, r2
 8009aee:	d001      	beq.n	8009af4 <pvPortMalloc+0x54>
 8009af0:	b672      	cpsid	i
 8009af2:	e7fe      	b.n	8009af2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d065      	beq.n	8009bc6 <pvPortMalloc+0x126>
 8009afa:	4b3b      	ldr	r3, [pc, #236]	; (8009be8 <pvPortMalloc+0x148>)
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	687a      	ldr	r2, [r7, #4]
 8009b00:	429a      	cmp	r2, r3
 8009b02:	d860      	bhi.n	8009bc6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009b04:	4b39      	ldr	r3, [pc, #228]	; (8009bec <pvPortMalloc+0x14c>)
 8009b06:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009b08:	4b38      	ldr	r3, [pc, #224]	; (8009bec <pvPortMalloc+0x14c>)
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b0e:	e004      	b.n	8009b1a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009b1a:	697b      	ldr	r3, [r7, #20]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	687a      	ldr	r2, [r7, #4]
 8009b20:	429a      	cmp	r2, r3
 8009b22:	d903      	bls.n	8009b2c <pvPortMalloc+0x8c>
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d1f1      	bne.n	8009b10 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009b2c:	4b2c      	ldr	r3, [pc, #176]	; (8009be0 <pvPortMalloc+0x140>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	697a      	ldr	r2, [r7, #20]
 8009b32:	429a      	cmp	r2, r3
 8009b34:	d047      	beq.n	8009bc6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009b36:	693b      	ldr	r3, [r7, #16]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2208      	movs	r2, #8
 8009b3c:	189b      	adds	r3, r3, r2
 8009b3e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009b40:	697b      	ldr	r3, [r7, #20]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	693b      	ldr	r3, [r7, #16]
 8009b46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009b48:	697b      	ldr	r3, [r7, #20]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	1ad2      	subs	r2, r2, r3
 8009b50:	2308      	movs	r3, #8
 8009b52:	005b      	lsls	r3, r3, #1
 8009b54:	429a      	cmp	r2, r3
 8009b56:	d916      	bls.n	8009b86 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	18d3      	adds	r3, r2, r3
 8009b5e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	2207      	movs	r2, #7
 8009b64:	4013      	ands	r3, r2
 8009b66:	d001      	beq.n	8009b6c <pvPortMalloc+0xcc>
 8009b68:	b672      	cpsid	i
 8009b6a:	e7fe      	b.n	8009b6a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009b6c:	697b      	ldr	r3, [r7, #20]
 8009b6e:	685a      	ldr	r2, [r3, #4]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	1ad2      	subs	r2, r2, r3
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	687a      	ldr	r2, [r7, #4]
 8009b7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	0018      	movs	r0, r3
 8009b82:	f000 f8e7 	bl	8009d54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009b86:	4b18      	ldr	r3, [pc, #96]	; (8009be8 <pvPortMalloc+0x148>)
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	697b      	ldr	r3, [r7, #20]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	1ad2      	subs	r2, r2, r3
 8009b90:	4b15      	ldr	r3, [pc, #84]	; (8009be8 <pvPortMalloc+0x148>)
 8009b92:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009b94:	4b14      	ldr	r3, [pc, #80]	; (8009be8 <pvPortMalloc+0x148>)
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	4b15      	ldr	r3, [pc, #84]	; (8009bf0 <pvPortMalloc+0x150>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d203      	bcs.n	8009ba8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ba0:	4b11      	ldr	r3, [pc, #68]	; (8009be8 <pvPortMalloc+0x148>)
 8009ba2:	681a      	ldr	r2, [r3, #0]
 8009ba4:	4b12      	ldr	r3, [pc, #72]	; (8009bf0 <pvPortMalloc+0x150>)
 8009ba6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	685a      	ldr	r2, [r3, #4]
 8009bac:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <pvPortMalloc+0x144>)
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009bb6:	697b      	ldr	r3, [r7, #20]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009bbc:	4b0d      	ldr	r3, [pc, #52]	; (8009bf4 <pvPortMalloc+0x154>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	1c5a      	adds	r2, r3, #1
 8009bc2:	4b0c      	ldr	r3, [pc, #48]	; (8009bf4 <pvPortMalloc+0x154>)
 8009bc4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009bc6:	f7ff f9b5 	bl	8008f34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2207      	movs	r2, #7
 8009bce:	4013      	ands	r3, r2
 8009bd0:	d001      	beq.n	8009bd6 <pvPortMalloc+0x136>
 8009bd2:	b672      	cpsid	i
 8009bd4:	e7fe      	b.n	8009bd4 <pvPortMalloc+0x134>
	return pvReturn;
 8009bd6:	68fb      	ldr	r3, [r7, #12]
}
 8009bd8:	0018      	movs	r0, r3
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	b006      	add	sp, #24
 8009bde:	bd80      	pop	{r7, pc}
 8009be0:	200086d8 	.word	0x200086d8
 8009be4:	200086ec 	.word	0x200086ec
 8009be8:	200086dc 	.word	0x200086dc
 8009bec:	200086d0 	.word	0x200086d0
 8009bf0:	200086e0 	.word	0x200086e0
 8009bf4:	200086e4 	.word	0x200086e4

08009bf8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d03a      	beq.n	8009c80 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009c0a:	2308      	movs	r3, #8
 8009c0c:	425b      	negs	r3, r3
 8009c0e:	68fa      	ldr	r2, [r7, #12]
 8009c10:	18d3      	adds	r3, r2, r3
 8009c12:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4b1a      	ldr	r3, [pc, #104]	; (8009c88 <vPortFree+0x90>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4013      	ands	r3, r2
 8009c22:	d101      	bne.n	8009c28 <vPortFree+0x30>
 8009c24:	b672      	cpsid	i
 8009c26:	e7fe      	b.n	8009c26 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d001      	beq.n	8009c34 <vPortFree+0x3c>
 8009c30:	b672      	cpsid	i
 8009c32:	e7fe      	b.n	8009c32 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	685a      	ldr	r2, [r3, #4]
 8009c38:	4b13      	ldr	r3, [pc, #76]	; (8009c88 <vPortFree+0x90>)
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	4013      	ands	r3, r2
 8009c3e:	d01f      	beq.n	8009c80 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009c40:	68bb      	ldr	r3, [r7, #8]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d11b      	bne.n	8009c80 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009c48:	68bb      	ldr	r3, [r7, #8]
 8009c4a:	685a      	ldr	r2, [r3, #4]
 8009c4c:	4b0e      	ldr	r3, [pc, #56]	; (8009c88 <vPortFree+0x90>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	43db      	mvns	r3, r3
 8009c52:	401a      	ands	r2, r3
 8009c54:	68bb      	ldr	r3, [r7, #8]
 8009c56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009c58:	f7ff f960 	bl	8008f1c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	685a      	ldr	r2, [r3, #4]
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <vPortFree+0x94>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	18d2      	adds	r2, r2, r3
 8009c66:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <vPortFree+0x94>)
 8009c68:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009c6a:	68bb      	ldr	r3, [r7, #8]
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	f000 f871 	bl	8009d54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009c72:	4b07      	ldr	r3, [pc, #28]	; (8009c90 <vPortFree+0x98>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	1c5a      	adds	r2, r3, #1
 8009c78:	4b05      	ldr	r3, [pc, #20]	; (8009c90 <vPortFree+0x98>)
 8009c7a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8009c7c:	f7ff f95a 	bl	8008f34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009c80:	46c0      	nop			; (mov r8, r8)
 8009c82:	46bd      	mov	sp, r7
 8009c84:	b004      	add	sp, #16
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	200086ec 	.word	0x200086ec
 8009c8c:	200086dc 	.word	0x200086dc
 8009c90:	200086e8 	.word	0x200086e8

08009c94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009c9a:	4b27      	ldr	r3, [pc, #156]	; (8009d38 <prvHeapInit+0xa4>)
 8009c9c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009c9e:	4b27      	ldr	r3, [pc, #156]	; (8009d3c <prvHeapInit+0xa8>)
 8009ca0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	2207      	movs	r2, #7
 8009ca6:	4013      	ands	r3, r2
 8009ca8:	d00c      	beq.n	8009cc4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	3307      	adds	r3, #7
 8009cae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2207      	movs	r2, #7
 8009cb4:	4393      	bics	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009cb8:	68ba      	ldr	r2, [r7, #8]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	1ad2      	subs	r2, r2, r3
 8009cbe:	4b1f      	ldr	r3, [pc, #124]	; (8009d3c <prvHeapInit+0xa8>)
 8009cc0:	18d3      	adds	r3, r2, r3
 8009cc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009cc8:	4b1d      	ldr	r3, [pc, #116]	; (8009d40 <prvHeapInit+0xac>)
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009cce:	4b1c      	ldr	r3, [pc, #112]	; (8009d40 <prvHeapInit+0xac>)
 8009cd0:	2200      	movs	r2, #0
 8009cd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68ba      	ldr	r2, [r7, #8]
 8009cd8:	18d3      	adds	r3, r2, r3
 8009cda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009cdc:	2208      	movs	r2, #8
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1a9b      	subs	r3, r3, r2
 8009ce2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	2207      	movs	r2, #7
 8009ce8:	4393      	bics	r3, r2
 8009cea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	4b15      	ldr	r3, [pc, #84]	; (8009d44 <prvHeapInit+0xb0>)
 8009cf0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009cf2:	4b14      	ldr	r3, [pc, #80]	; (8009d44 <prvHeapInit+0xb0>)
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009cfa:	4b12      	ldr	r3, [pc, #72]	; (8009d44 <prvHeapInit+0xb0>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009d06:	683b      	ldr	r3, [r7, #0]
 8009d08:	68fa      	ldr	r2, [r7, #12]
 8009d0a:	1ad2      	subs	r2, r2, r3
 8009d0c:	683b      	ldr	r3, [r7, #0]
 8009d0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009d10:	4b0c      	ldr	r3, [pc, #48]	; (8009d44 <prvHeapInit+0xb0>)
 8009d12:	681a      	ldr	r2, [r3, #0]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	4b0a      	ldr	r3, [pc, #40]	; (8009d48 <prvHeapInit+0xb4>)
 8009d1e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685a      	ldr	r2, [r3, #4]
 8009d24:	4b09      	ldr	r3, [pc, #36]	; (8009d4c <prvHeapInit+0xb8>)
 8009d26:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009d28:	4b09      	ldr	r3, [pc, #36]	; (8009d50 <prvHeapInit+0xbc>)
 8009d2a:	2280      	movs	r2, #128	; 0x80
 8009d2c:	0612      	lsls	r2, r2, #24
 8009d2e:	601a      	str	r2, [r3, #0]
}
 8009d30:	46c0      	nop			; (mov r8, r8)
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b004      	add	sp, #16
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	00004e20 	.word	0x00004e20
 8009d3c:	200038b0 	.word	0x200038b0
 8009d40:	200086d0 	.word	0x200086d0
 8009d44:	200086d8 	.word	0x200086d8
 8009d48:	200086e0 	.word	0x200086e0
 8009d4c:	200086dc 	.word	0x200086dc
 8009d50:	200086ec 	.word	0x200086ec

08009d54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009d54:	b580      	push	{r7, lr}
 8009d56:	b084      	sub	sp, #16
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009d5c:	4b27      	ldr	r3, [pc, #156]	; (8009dfc <prvInsertBlockIntoFreeList+0xa8>)
 8009d5e:	60fb      	str	r3, [r7, #12]
 8009d60:	e002      	b.n	8009d68 <prvInsertBlockIntoFreeList+0x14>
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	60fb      	str	r3, [r7, #12]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	429a      	cmp	r2, r3
 8009d70:	d8f7      	bhi.n	8009d62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009d76:	68fb      	ldr	r3, [r7, #12]
 8009d78:	685b      	ldr	r3, [r3, #4]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	18d3      	adds	r3, r2, r3
 8009d7e:	687a      	ldr	r2, [r7, #4]
 8009d80:	429a      	cmp	r2, r3
 8009d82:	d108      	bne.n	8009d96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	685a      	ldr	r2, [r3, #4]
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	18d2      	adds	r2, r2, r3
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	685b      	ldr	r3, [r3, #4]
 8009d9e:	68ba      	ldr	r2, [r7, #8]
 8009da0:	18d2      	adds	r2, r2, r3
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	429a      	cmp	r2, r3
 8009da8:	d118      	bne.n	8009ddc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681a      	ldr	r2, [r3, #0]
 8009dae:	4b14      	ldr	r3, [pc, #80]	; (8009e00 <prvInsertBlockIntoFreeList+0xac>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	429a      	cmp	r2, r3
 8009db4:	d00d      	beq.n	8009dd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685a      	ldr	r2, [r3, #4]
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	18d2      	adds	r2, r2, r3
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	681a      	ldr	r2, [r3, #0]
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	601a      	str	r2, [r3, #0]
 8009dd0:	e008      	b.n	8009de4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009dd2:	4b0b      	ldr	r3, [pc, #44]	; (8009e00 <prvInsertBlockIntoFreeList+0xac>)
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	601a      	str	r2, [r3, #0]
 8009dda:	e003      	b.n	8009de4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d002      	beq.n	8009df2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	46bd      	mov	sp, r7
 8009df6:	b004      	add	sp, #16
 8009df8:	bd80      	pop	{r7, pc}
 8009dfa:	46c0      	nop			; (mov r8, r8)
 8009dfc:	200086d0 	.word	0x200086d0
 8009e00:	200086d8 	.word	0x200086d8

08009e04 <LIDAR_start>:
#include "drv_LIDAR.h"
#include "stdio.h"

//Start scanning and export point cloud data
//Sustained response
int LIDAR_start(h_LIDAR_t * h_LIDAR){
 8009e04:	b590      	push	{r4, r7, lr}
 8009e06:	b085      	sub	sp, #20
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_START};
 8009e0c:	240c      	movs	r4, #12
 8009e0e:	193b      	adds	r3, r7, r4
 8009e10:	4a0a      	ldr	r2, [pc, #40]	; (8009e3c <LIDAR_start+0x38>)
 8009e12:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.dma_receive(h_LIDAR->data_buff,DATA_BUFF_SIZE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	695b      	ldr	r3, [r3, #20]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	3271      	adds	r2, #113	; 0x71
 8009e1c:	21fa      	movs	r1, #250	; 0xfa
 8009e1e:	0109      	lsls	r1, r1, #4
 8009e20:	0010      	movs	r0, r2
 8009e22:	4798      	blx	r3
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	193a      	adds	r2, r7, r4
 8009e2a:	2102      	movs	r1, #2
 8009e2c:	0010      	movs	r0, r2
 8009e2e:	4798      	blx	r3
	return 0;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	0018      	movs	r0, r3
 8009e34:	46bd      	mov	sp, r7
 8009e36:	b005      	add	sp, #20
 8009e38:	bd90      	pop	{r4, r7, pc}
 8009e3a:	46c0      	nop			; (mov r8, r8)
 8009e3c:	000060a5 	.word	0x000060a5

08009e40 <LIDAR_stop>:

//Stop and stop scanning
//No answer
int LIDAR_stop(h_LIDAR_t * h_LIDAR){
 8009e40:	b580      	push	{r7, lr}
 8009e42:	b084      	sub	sp, #16
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_STOP};
 8009e48:	210c      	movs	r1, #12
 8009e4a:	187b      	adds	r3, r7, r1
 8009e4c:	4a06      	ldr	r2, [pc, #24]	; (8009e68 <LIDAR_stop+0x28>)
 8009e4e:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	187a      	adds	r2, r7, r1
 8009e56:	2102      	movs	r1, #2
 8009e58:	0010      	movs	r0, r2
 8009e5a:	4798      	blx	r3
	return 0;
 8009e5c:	2300      	movs	r3, #0
}
 8009e5e:	0018      	movs	r0, r3
 8009e60:	46bd      	mov	sp, r7
 8009e62:	b004      	add	sp, #16
 8009e64:	bd80      	pop	{r7, pc}
 8009e66:	46c0      	nop			; (mov r8, r8)
 8009e68:	000065a5 	.word	0x000065a5

08009e6c <LIDAR_get_info>:

//Get device information
//Single response
int LIDAR_get_info(h_LIDAR_t * h_LIDAR){
 8009e6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e6e:	46de      	mov	lr, fp
 8009e70:	4657      	mov	r7, sl
 8009e72:	464e      	mov	r6, r9
 8009e74:	4645      	mov	r5, r8
 8009e76:	b5e0      	push	{r5, r6, r7, lr}
 8009e78:	b09b      	sub	sp, #108	; 0x6c
 8009e7a:	af10      	add	r7, sp, #64	; 0x40
 8009e7c:	61f8      	str	r0, [r7, #28]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_INFO}; //Buffer de commande
 8009e7e:	210c      	movs	r1, #12
 8009e80:	2018      	movs	r0, #24
 8009e82:	180b      	adds	r3, r1, r0
 8009e84:	19db      	adds	r3, r3, r7
 8009e86:	4a61      	ldr	r2, [pc, #388]	; (800a00c <LIDAR_get_info+0x1a0>)
 8009e88:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009e8a:	69fb      	ldr	r3, [r7, #28]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	180a      	adds	r2, r1, r0
 8009e90:	19d2      	adds	r2, r2, r7
 8009e92:	2102      	movs	r1, #2
 8009e94:	0010      	movs	r0, r2
 8009e96:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->info_buff,INFO_BUFF_SIZE);
 8009e98:	69fb      	ldr	r3, [r7, #28]
 8009e9a:	68db      	ldr	r3, [r3, #12]
 8009e9c:	69fa      	ldr	r2, [r7, #28]
 8009e9e:	324c      	adds	r2, #76	; 0x4c
 8009ea0:	211b      	movs	r1, #27
 8009ea2:	0010      	movs	r0, r2
 8009ea4:	4798      	blx	r3

	h_LIDAR->device_info.start_sign=(h_LIDAR->info_buff[0]<<8)|h_LIDAR->info_buff[1];
 8009ea6:	69fb      	ldr	r3, [r7, #28]
 8009ea8:	224c      	movs	r2, #76	; 0x4c
 8009eaa:	5c9b      	ldrb	r3, [r3, r2]
 8009eac:	021b      	lsls	r3, r3, #8
 8009eae:	b21a      	sxth	r2, r3
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	214d      	movs	r1, #77	; 0x4d
 8009eb4:	5c5b      	ldrb	r3, [r3, r1]
 8009eb6:	b21b      	sxth	r3, r3
 8009eb8:	4313      	orrs	r3, r2
 8009eba:	b21b      	sxth	r3, r3
 8009ebc:	b29a      	uxth	r2, r3
 8009ebe:	69fb      	ldr	r3, [r7, #28]
 8009ec0:	851a      	strh	r2, [r3, #40]	; 0x28
	h_LIDAR->device_info.lenght=(h_LIDAR->info_buff[2])|(h_LIDAR->info_buff[3]<<8)|(h_LIDAR->info_buff[4]<<16);
 8009ec2:	69fb      	ldr	r3, [r7, #28]
 8009ec4:	224e      	movs	r2, #78	; 0x4e
 8009ec6:	5c9b      	ldrb	r3, [r3, r2]
 8009ec8:	0019      	movs	r1, r3
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	224f      	movs	r2, #79	; 0x4f
 8009ece:	5c9b      	ldrb	r3, [r3, r2]
 8009ed0:	021b      	lsls	r3, r3, #8
 8009ed2:	000a      	movs	r2, r1
 8009ed4:	431a      	orrs	r2, r3
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	2150      	movs	r1, #80	; 0x50
 8009eda:	5c5b      	ldrb	r3, [r3, r1]
 8009edc:	041b      	lsls	r3, r3, #16
 8009ede:	4313      	orrs	r3, r2
 8009ee0:	001a      	movs	r2, r3
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	62da      	str	r2, [r3, #44]	; 0x2c
	h_LIDAR->device_info.mode=h_LIDAR->info_buff[5];
 8009ee6:	69fb      	ldr	r3, [r7, #28]
 8009ee8:	2251      	movs	r2, #81	; 0x51
 8009eea:	5c99      	ldrb	r1, [r3, r2]
 8009eec:	69fb      	ldr	r3, [r7, #28]
 8009eee:	2230      	movs	r2, #48	; 0x30
 8009ef0:	5499      	strb	r1, [r3, r2]
	h_LIDAR->device_info.type_code=h_LIDAR->info_buff[6];
 8009ef2:	69fb      	ldr	r3, [r7, #28]
 8009ef4:	2252      	movs	r2, #82	; 0x52
 8009ef6:	5c99      	ldrb	r1, [r3, r2]
 8009ef8:	69fb      	ldr	r3, [r7, #28]
 8009efa:	2231      	movs	r2, #49	; 0x31
 8009efc:	5499      	strb	r1, [r3, r2]
	h_LIDAR->device_info.model=h_LIDAR->info_buff[7];
 8009efe:	69fb      	ldr	r3, [r7, #28]
 8009f00:	2253      	movs	r2, #83	; 0x53
 8009f02:	5c99      	ldrb	r1, [r3, r2]
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	2232      	movs	r2, #50	; 0x32
 8009f08:	5499      	strb	r1, [r3, r2]
	snprintf(h_LIDAR->device_info.firmware,6,"%d.%d",h_LIDAR->info_buff[8],h_LIDAR->info_buff[9]);
 8009f0a:	69fb      	ldr	r3, [r7, #28]
 8009f0c:	3333      	adds	r3, #51	; 0x33
 8009f0e:	0018      	movs	r0, r3
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	2254      	movs	r2, #84	; 0x54
 8009f14:	5c9b      	ldrb	r3, [r3, r2]
 8009f16:	0019      	movs	r1, r3
 8009f18:	69fb      	ldr	r3, [r7, #28]
 8009f1a:	2255      	movs	r2, #85	; 0x55
 8009f1c:	5c9b      	ldrb	r3, [r3, r2]
 8009f1e:	4a3c      	ldr	r2, [pc, #240]	; (800a010 <LIDAR_get_info+0x1a4>)
 8009f20:	9300      	str	r3, [sp, #0]
 8009f22:	000b      	movs	r3, r1
 8009f24:	2106      	movs	r1, #6
 8009f26:	f001 f9e5 	bl	800b2f4 <sniprintf>
	h_LIDAR->device_info.hardware=h_LIDAR->info_buff[10];
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	2256      	movs	r2, #86	; 0x56
 8009f2e:	5c99      	ldrb	r1, [r3, r2]
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	2239      	movs	r2, #57	; 0x39
 8009f34:	5499      	strb	r1, [r3, r2]
	snprintf(h_LIDAR->device_info.serial,17,"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",h_LIDAR->info_buff[11],h_LIDAR->info_buff[12],h_LIDAR->info_buff[13],h_LIDAR->info_buff[14],h_LIDAR->info_buff[15],h_LIDAR->info_buff[16],h_LIDAR->info_buff[17],h_LIDAR->info_buff[18],h_LIDAR->info_buff[19],h_LIDAR->info_buff[20],h_LIDAR->info_buff[21],h_LIDAR->info_buff[22],h_LIDAR->info_buff[23],h_LIDAR->info_buff[24],h_LIDAR->info_buff[25],h_LIDAR->info_buff[26]);
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	333a      	adds	r3, #58	; 0x3a
 8009f3a:	001d      	movs	r5, r3
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	2257      	movs	r2, #87	; 0x57
 8009f40:	5c9b      	ldrb	r3, [r3, r2]
 8009f42:	61bb      	str	r3, [r7, #24]
 8009f44:	69fb      	ldr	r3, [r7, #28]
 8009f46:	2258      	movs	r2, #88	; 0x58
 8009f48:	5c9b      	ldrb	r3, [r3, r2]
 8009f4a:	4698      	mov	r8, r3
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	2259      	movs	r2, #89	; 0x59
 8009f50:	5c9b      	ldrb	r3, [r3, r2]
 8009f52:	4699      	mov	r9, r3
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	225a      	movs	r2, #90	; 0x5a
 8009f58:	5c9b      	ldrb	r3, [r3, r2]
 8009f5a:	469a      	mov	sl, r3
 8009f5c:	69fb      	ldr	r3, [r7, #28]
 8009f5e:	225b      	movs	r2, #91	; 0x5b
 8009f60:	5c9b      	ldrb	r3, [r3, r2]
 8009f62:	469b      	mov	fp, r3
 8009f64:	69fb      	ldr	r3, [r7, #28]
 8009f66:	225c      	movs	r2, #92	; 0x5c
 8009f68:	5c9b      	ldrb	r3, [r3, r2]
 8009f6a:	617b      	str	r3, [r7, #20]
 8009f6c:	69fb      	ldr	r3, [r7, #28]
 8009f6e:	225d      	movs	r2, #93	; 0x5d
 8009f70:	5c9b      	ldrb	r3, [r3, r2]
 8009f72:	613b      	str	r3, [r7, #16]
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	225e      	movs	r2, #94	; 0x5e
 8009f78:	5c9b      	ldrb	r3, [r3, r2]
 8009f7a:	60fb      	str	r3, [r7, #12]
 8009f7c:	69fb      	ldr	r3, [r7, #28]
 8009f7e:	225f      	movs	r2, #95	; 0x5f
 8009f80:	5c9b      	ldrb	r3, [r3, r2]
 8009f82:	60bb      	str	r3, [r7, #8]
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	2260      	movs	r2, #96	; 0x60
 8009f88:	5c9b      	ldrb	r3, [r3, r2]
 8009f8a:	607b      	str	r3, [r7, #4]
 8009f8c:	69fb      	ldr	r3, [r7, #28]
 8009f8e:	2261      	movs	r2, #97	; 0x61
 8009f90:	5c9b      	ldrb	r3, [r3, r2]
 8009f92:	469c      	mov	ip, r3
 8009f94:	69fa      	ldr	r2, [r7, #28]
 8009f96:	2362      	movs	r3, #98	; 0x62
 8009f98:	5cd3      	ldrb	r3, [r2, r3]
 8009f9a:	001e      	movs	r6, r3
 8009f9c:	69fa      	ldr	r2, [r7, #28]
 8009f9e:	2363      	movs	r3, #99	; 0x63
 8009fa0:	5cd3      	ldrb	r3, [r2, r3]
 8009fa2:	001c      	movs	r4, r3
 8009fa4:	69fa      	ldr	r2, [r7, #28]
 8009fa6:	2364      	movs	r3, #100	; 0x64
 8009fa8:	5cd3      	ldrb	r3, [r2, r3]
 8009faa:	0018      	movs	r0, r3
 8009fac:	69fa      	ldr	r2, [r7, #28]
 8009fae:	2365      	movs	r3, #101	; 0x65
 8009fb0:	5cd3      	ldrb	r3, [r2, r3]
 8009fb2:	0019      	movs	r1, r3
 8009fb4:	69fa      	ldr	r2, [r7, #28]
 8009fb6:	2366      	movs	r3, #102	; 0x66
 8009fb8:	5cd3      	ldrb	r3, [r2, r3]
 8009fba:	4a16      	ldr	r2, [pc, #88]	; (800a014 <LIDAR_get_info+0x1a8>)
 8009fbc:	930e      	str	r3, [sp, #56]	; 0x38
 8009fbe:	910d      	str	r1, [sp, #52]	; 0x34
 8009fc0:	900c      	str	r0, [sp, #48]	; 0x30
 8009fc2:	940b      	str	r4, [sp, #44]	; 0x2c
 8009fc4:	960a      	str	r6, [sp, #40]	; 0x28
 8009fc6:	4661      	mov	r1, ip
 8009fc8:	9109      	str	r1, [sp, #36]	; 0x24
 8009fca:	6879      	ldr	r1, [r7, #4]
 8009fcc:	9108      	str	r1, [sp, #32]
 8009fce:	68b9      	ldr	r1, [r7, #8]
 8009fd0:	9107      	str	r1, [sp, #28]
 8009fd2:	68f9      	ldr	r1, [r7, #12]
 8009fd4:	9106      	str	r1, [sp, #24]
 8009fd6:	6939      	ldr	r1, [r7, #16]
 8009fd8:	9105      	str	r1, [sp, #20]
 8009fda:	6979      	ldr	r1, [r7, #20]
 8009fdc:	9104      	str	r1, [sp, #16]
 8009fde:	4659      	mov	r1, fp
 8009fe0:	9103      	str	r1, [sp, #12]
 8009fe2:	4651      	mov	r1, sl
 8009fe4:	9102      	str	r1, [sp, #8]
 8009fe6:	4649      	mov	r1, r9
 8009fe8:	9101      	str	r1, [sp, #4]
 8009fea:	4641      	mov	r1, r8
 8009fec:	9100      	str	r1, [sp, #0]
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	2111      	movs	r1, #17
 8009ff2:	0028      	movs	r0, r5
 8009ff4:	f001 f97e 	bl	800b2f4 <sniprintf>
//	printf("Model %x\r\n",h_LIDAR->device_info.model);
//	printf("Firmware version : %s\r\n",h_LIDAR->device_info.firmware);
//	printf("Hardware version : %d\r\n",h_LIDAR->device_info.hardware);
//	printf("Serial number : %s\r\n",h_LIDAR->device_info.serial);

	return 0;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	0018      	movs	r0, r3
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	b00b      	add	sp, #44	; 0x2c
 800a000:	bcf0      	pop	{r4, r5, r6, r7}
 800a002:	46bb      	mov	fp, r7
 800a004:	46b2      	mov	sl, r6
 800a006:	46a9      	mov	r9, r5
 800a008:	46a0      	mov	r8, r4
 800a00a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a00c:	ffff90a5 	.word	0xffff90a5
 800a010:	0800c4e4 	.word	0x0800c4e4
 800a014:	0800c4ec 	.word	0x0800c4ec

0800a018 <LIDAR_get_health_stat>:

//Get device health status
//Single response
int LIDAR_get_health_stat(h_LIDAR_t * h_LIDAR){
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_HEALTH}; //Buffer de commande
 800a020:	210c      	movs	r1, #12
 800a022:	187b      	adds	r3, r7, r1
 800a024:	4a29      	ldr	r2, [pc, #164]	; (800a0cc <LIDAR_get_health_stat+0xb4>)
 800a026:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,2);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	187a      	adds	r2, r7, r1
 800a02e:	2102      	movs	r1, #2
 800a030:	0010      	movs	r0, r2
 800a032:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->health_buff,HEALTH_BUFF_SIZE);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68db      	ldr	r3, [r3, #12]
 800a038:	687a      	ldr	r2, [r7, #4]
 800a03a:	3267      	adds	r2, #103	; 0x67
 800a03c:	210a      	movs	r1, #10
 800a03e:	0010      	movs	r0, r2
 800a040:	4798      	blx	r3

	h_LIDAR->health_stat.start_sign=(h_LIDAR->health_buff[0]<<8)|h_LIDAR->health_buff[1];
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2267      	movs	r2, #103	; 0x67
 800a046:	5c9b      	ldrb	r3, [r3, r2]
 800a048:	021b      	lsls	r3, r3, #8
 800a04a:	b21a      	sxth	r2, r3
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2168      	movs	r1, #104	; 0x68
 800a050:	5c5b      	ldrb	r3, [r3, r1]
 800a052:	b21b      	sxth	r3, r3
 800a054:	4313      	orrs	r3, r2
 800a056:	b21b      	sxth	r3, r3
 800a058:	b29a      	uxth	r2, r3
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	831a      	strh	r2, [r3, #24]
	h_LIDAR->health_stat.lenght=(h_LIDAR->health_buff[2])|(h_LIDAR->health_buff[3]<<8)|(h_LIDAR->health_buff[4]<<16);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2269      	movs	r2, #105	; 0x69
 800a062:	5c9b      	ldrb	r3, [r3, r2]
 800a064:	0019      	movs	r1, r3
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	226a      	movs	r2, #106	; 0x6a
 800a06a:	5c9b      	ldrb	r3, [r3, r2]
 800a06c:	021b      	lsls	r3, r3, #8
 800a06e:	000a      	movs	r2, r1
 800a070:	431a      	orrs	r2, r3
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	216b      	movs	r1, #107	; 0x6b
 800a076:	5c5b      	ldrb	r3, [r3, r1]
 800a078:	041b      	lsls	r3, r3, #16
 800a07a:	4313      	orrs	r3, r2
 800a07c:	001a      	movs	r2, r3
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	61da      	str	r2, [r3, #28]
	h_LIDAR->health_stat.mode=h_LIDAR->health_buff[5];
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	226c      	movs	r2, #108	; 0x6c
 800a086:	5c99      	ldrb	r1, [r3, r2]
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	2220      	movs	r2, #32
 800a08c:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.type_code=h_LIDAR->health_buff[6];
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	226d      	movs	r2, #109	; 0x6d
 800a092:	5c99      	ldrb	r1, [r3, r2]
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2221      	movs	r2, #33	; 0x21
 800a098:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.status_code=h_LIDAR->health_buff[7];
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	226e      	movs	r2, #110	; 0x6e
 800a09e:	5c99      	ldrb	r1, [r3, r2]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2222      	movs	r2, #34	; 0x22
 800a0a4:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.error_code=h_LIDAR->health_buff[8]|(h_LIDAR->health_buff[9]<<8);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	226f      	movs	r2, #111	; 0x6f
 800a0aa:	5c9b      	ldrb	r3, [r3, r2]
 800a0ac:	b21a      	sxth	r2, r3
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	2170      	movs	r1, #112	; 0x70
 800a0b2:	5c5b      	ldrb	r3, [r3, r1]
 800a0b4:	021b      	lsls	r3, r3, #8
 800a0b6:	b21b      	sxth	r3, r3
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	b21b      	sxth	r3, r3
 800a0bc:	b29a      	uxth	r2, r3
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	849a      	strh	r2, [r3, #36]	; 0x24
//	printf("Mode : %x\r\n",h_LIDAR->health_stat.mode);
//	printf("Type code : %x\r\n",h_LIDAR->health_stat.type_code);
//	printf("Status code : %x\r\n",h_LIDAR->health_stat.status_code);
//	printf("Error code : %x\r\n",h_LIDAR->health_stat.error_code);

	return 0;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	0018      	movs	r0, r3
 800a0c6:	46bd      	mov	sp, r7
 800a0c8:	b004      	add	sp, #16
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	ffff91a5 	.word	0xffff91a5

0800a0d0 <LIDAR_process_frame>:
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_RESTART};
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
	return 0;
}

void LIDAR_process_frame(h_LIDAR_t * LIDAR){
 800a0d0:	b590      	push	{r4, r7, lr}
 800a0d2:	b08b      	sub	sp, #44	; 0x2c
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
	uint16_t Si;
	int Di;
	int Ai;
	int AngleFSA=(LIDAR->processing.FSA>>1); //64
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	4a43      	ldr	r2, [pc, #268]	; (800a1e8 <LIDAR_process_frame+0x118>)
 800a0dc:	5a9b      	ldrh	r3, [r3, r2]
 800a0de:	085b      	lsrs	r3, r3, #1
 800a0e0:	b29b      	uxth	r3, r3
 800a0e2:	623b      	str	r3, [r7, #32]
	int AngleLSA=(LIDAR->processing.LSA>>1);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	4a41      	ldr	r2, [pc, #260]	; (800a1ec <LIDAR_process_frame+0x11c>)
 800a0e8:	5a9b      	ldrh	r3, [r3, r2]
 800a0ea:	085b      	lsrs	r3, r3, #1
 800a0ec:	b29b      	uxth	r3, r3
 800a0ee:	61fb      	str	r3, [r7, #28]
	int index;
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	627b      	str	r3, [r7, #36]	; 0x24
 800a0f4:	e06a      	b.n	800a1cc <LIDAR_process_frame+0xfc>
		Si=LIDAR->processing.frame_buff[2*i]|(LIDAR->processing.frame_buff[2*i+1]<<8);
 800a0f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0f8:	005b      	lsls	r3, r3, #1
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	493c      	ldr	r1, [pc, #240]	; (800a1f0 <LIDAR_process_frame+0x120>)
 800a0fe:	18d3      	adds	r3, r2, r3
 800a100:	185b      	adds	r3, r3, r1
 800a102:	781b      	ldrb	r3, [r3, #0]
 800a104:	b21a      	sxth	r2, r3
 800a106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a108:	005b      	lsls	r3, r3, #1
 800a10a:	3301      	adds	r3, #1
 800a10c:	6879      	ldr	r1, [r7, #4]
 800a10e:	4838      	ldr	r0, [pc, #224]	; (800a1f0 <LIDAR_process_frame+0x120>)
 800a110:	18cb      	adds	r3, r1, r3
 800a112:	181b      	adds	r3, r3, r0
 800a114:	781b      	ldrb	r3, [r3, #0]
 800a116:	021b      	lsls	r3, r3, #8
 800a118:	b21b      	sxth	r3, r3
 800a11a:	4313      	orrs	r3, r2
 800a11c:	b21a      	sxth	r2, r3
 800a11e:	211a      	movs	r1, #26
 800a120:	187b      	adds	r3, r7, r1
 800a122:	801a      	strh	r2, [r3, #0]
		Di=Si/4; //Distance du point i
 800a124:	187b      	adds	r3, r7, r1
 800a126:	881b      	ldrh	r3, [r3, #0]
 800a128:	089b      	lsrs	r3, r3, #2
 800a12a:	b29b      	uxth	r3, r3
 800a12c:	617b      	str	r3, [r7, #20]
		Ai=AngleFSA/64+i*(AngleLSA-AngleFSA)/64/(LIDAR->processing.LSN-1);
 800a12e:	6a3b      	ldr	r3, [r7, #32]
 800a130:	2b00      	cmp	r3, #0
 800a132:	da00      	bge.n	800a136 <LIDAR_process_frame+0x66>
 800a134:	333f      	adds	r3, #63	; 0x3f
 800a136:	119b      	asrs	r3, r3, #6
 800a138:	001c      	movs	r4, r3
 800a13a:	69fa      	ldr	r2, [r7, #28]
 800a13c:	6a3b      	ldr	r3, [r7, #32]
 800a13e:	1ad3      	subs	r3, r2, r3
 800a140:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a142:	4353      	muls	r3, r2
 800a144:	2b00      	cmp	r3, #0
 800a146:	da00      	bge.n	800a14a <LIDAR_process_frame+0x7a>
 800a148:	333f      	adds	r3, #63	; 0x3f
 800a14a:	119b      	asrs	r3, r3, #6
 800a14c:	0018      	movs	r0, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a28      	ldr	r2, [pc, #160]	; (800a1f4 <LIDAR_process_frame+0x124>)
 800a152:	5c9b      	ldrb	r3, [r3, r2]
 800a154:	3b01      	subs	r3, #1
 800a156:	0019      	movs	r1, r3
 800a158:	f7f6 f86a 	bl	8000230 <__divsi3>
 800a15c:	0003      	movs	r3, r0
 800a15e:	18e3      	adds	r3, r4, r3
 800a160:	613b      	str	r3, [r7, #16]
		index = round(Ai);
 800a162:	6938      	ldr	r0, [r7, #16]
 800a164:	f7f6 fad0 	bl	8000708 <__aeabi_i2d>
 800a168:	0002      	movs	r2, r0
 800a16a:	000b      	movs	r3, r1
 800a16c:	0010      	movs	r0, r2
 800a16e:	0019      	movs	r1, r3
 800a170:	f7f6 fa94 	bl	800069c <__aeabi_d2iz>
 800a174:	0003      	movs	r3, r0
 800a176:	60fb      	str	r3, [r7, #12]

		if(Di>1500){ //On affiche pas les points trop loin
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	4a1f      	ldr	r2, [pc, #124]	; (800a1f8 <LIDAR_process_frame+0x128>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	dd0a      	ble.n	800a196 <LIDAR_process_frame+0xc6>
			LIDAR->processing.point_buff[index]=0;
 800a180:	687a      	ldr	r2, [r7, #4]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	491d      	ldr	r1, [pc, #116]	; (800a1fc <LIDAR_process_frame+0x12c>)
 800a186:	468c      	mov	ip, r1
 800a188:	4463      	add	r3, ip
 800a18a:	009b      	lsls	r3, r3, #2
 800a18c:	18d3      	adds	r3, r2, r3
 800a18e:	3304      	adds	r3, #4
 800a190:	2200      	movs	r2, #0
 800a192:	601a      	str	r2, [r3, #0]
 800a194:	e017      	b.n	800a1c6 <LIDAR_process_frame+0xf6>
		}
		else if(Di<40){
 800a196:	697b      	ldr	r3, [r7, #20]
 800a198:	2b27      	cmp	r3, #39	; 0x27
 800a19a:	dc0a      	bgt.n	800a1b2 <LIDAR_process_frame+0xe2>
			LIDAR->processing.point_buff[index]=0;
 800a19c:	687a      	ldr	r2, [r7, #4]
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	4916      	ldr	r1, [pc, #88]	; (800a1fc <LIDAR_process_frame+0x12c>)
 800a1a2:	468c      	mov	ip, r1
 800a1a4:	4463      	add	r3, ip
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	18d3      	adds	r3, r2, r3
 800a1aa:	3304      	adds	r3, #4
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	601a      	str	r2, [r3, #0]
 800a1b0:	e009      	b.n	800a1c6 <LIDAR_process_frame+0xf6>
		}
		else{
			LIDAR->processing.point_buff[index]=Di;
 800a1b2:	687a      	ldr	r2, [r7, #4]
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	4911      	ldr	r1, [pc, #68]	; (800a1fc <LIDAR_process_frame+0x12c>)
 800a1b8:	468c      	mov	ip, r1
 800a1ba:	4463      	add	r3, ip
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	18d3      	adds	r3, r2, r3
 800a1c0:	3304      	adds	r3, #4
 800a1c2:	697a      	ldr	r2, [r7, #20]
 800a1c4:	601a      	str	r2, [r3, #0]
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 800a1c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	4a0c      	ldr	r2, [pc, #48]	; (800a200 <LIDAR_process_frame+0x130>)
 800a1d0:	5c9b      	ldrb	r3, [r3, r2]
 800a1d2:	085b      	lsrs	r3, r3, #1
 800a1d4:	b2db      	uxtb	r3, r3
 800a1d6:	001a      	movs	r2, r3
 800a1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	db8b      	blt.n	800a0f6 <LIDAR_process_frame+0x26>
		}
	}
}
 800a1de:	46c0      	nop			; (mov r8, r8)
 800a1e0:	46c0      	nop			; (mov r8, r8)
 800a1e2:	46bd      	mov	sp, r7
 800a1e4:	b00b      	add	sp, #44	; 0x2c
 800a1e6:	bd90      	pop	{r4, r7, pc}
 800a1e8:	00001018 	.word	0x00001018
 800a1ec:	0000101a 	.word	0x0000101a
 800a1f0:	00001fbf 	.word	0x00001fbf
 800a1f4:	00001017 	.word	0x00001017
 800a1f8:	000005dc 	.word	0x000005dc
 800a1fc:	00000806 	.word	0x00000806
 800a200:	0000101e 	.word	0x0000101e

0800a204 <calculer_distance_moyenne>:

// Fonction pour calculer la distance moyenne
int calculer_distance_moyenne(int distances[], int debut, int fin) {
 800a204:	b580      	push	{r7, lr}
 800a206:	b086      	sub	sp, #24
 800a208:	af00      	add	r7, sp, #0
 800a20a:	60f8      	str	r0, [r7, #12]
 800a20c:	60b9      	str	r1, [r7, #8]
 800a20e:	607a      	str	r2, [r7, #4]
	int somme = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 800a214:	68bb      	ldr	r3, [r7, #8]
 800a216:	613b      	str	r3, [r7, #16]
 800a218:	e00a      	b.n	800a230 <calculer_distance_moyenne+0x2c>
		somme += distances[i];
 800a21a:	693b      	ldr	r3, [r7, #16]
 800a21c:	009b      	lsls	r3, r3, #2
 800a21e:	68fa      	ldr	r2, [r7, #12]
 800a220:	18d3      	adds	r3, r2, r3
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	697a      	ldr	r2, [r7, #20]
 800a226:	18d3      	adds	r3, r2, r3
 800a228:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 800a22a:	693b      	ldr	r3, [r7, #16]
 800a22c:	3301      	adds	r3, #1
 800a22e:	613b      	str	r3, [r7, #16]
 800a230:	693a      	ldr	r2, [r7, #16]
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	429a      	cmp	r2, r3
 800a236:	ddf0      	ble.n	800a21a <calculer_distance_moyenne+0x16>
	}
	return somme / (fin - debut + 1);
 800a238:	687a      	ldr	r2, [r7, #4]
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	3301      	adds	r3, #1
 800a240:	0019      	movs	r1, r3
 800a242:	6978      	ldr	r0, [r7, #20]
 800a244:	f7f5 fff4 	bl	8000230 <__divsi3>
 800a248:	0003      	movs	r3, r0
}
 800a24a:	0018      	movs	r0, r3
 800a24c:	46bd      	mov	sp, r7
 800a24e:	b006      	add	sp, #24
 800a250:	bd80      	pop	{r7, pc}
	...

0800a254 <find_clusters>:

//Fonction pour regrouper les points proches en clusters
void find_clusters(h_LIDAR_t * LIDAR) {
 800a254:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a256:	b08b      	sub	sp, #44	; 0x2c
 800a258:	af00      	add	r7, sp, #0
 800a25a:	6078      	str	r0, [r7, #4]

	int * distances=LIDAR->processing.filtred_buff;
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a59      	ldr	r2, [pc, #356]	; (800a3c4 <find_clusters+0x170>)
 800a260:	4694      	mov	ip, r2
 800a262:	4463      	add	r3, ip
 800a264:	61bb      	str	r3, [r7, #24]
	int cluster_count = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	627b      	str	r3, [r7, #36]	; 0x24

	// Parcourir les 360 degrés pour regrouper les valeurs en clusters
	int debut_cluster = 0;
 800a26a:	2300      	movs	r3, #0
 800a26c:	623b      	str	r3, [r7, #32]
	for (int i = 1; i < NB_DEGRES; i++) {
 800a26e:	2301      	movs	r3, #1
 800a270:	61fb      	str	r3, [r7, #28]
 800a272:	e060      	b.n	800a336 <find_clusters+0xe2>
		if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 800a274:	69fb      	ldr	r3, [r7, #28]
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	69ba      	ldr	r2, [r7, #24]
 800a27a:	18d3      	adds	r3, r2, r3
 800a27c:	681a      	ldr	r2, [r3, #0]
 800a27e:	69fb      	ldr	r3, [r7, #28]
 800a280:	4951      	ldr	r1, [pc, #324]	; (800a3c8 <find_clusters+0x174>)
 800a282:	468c      	mov	ip, r1
 800a284:	4463      	add	r3, ip
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	69b9      	ldr	r1, [r7, #24]
 800a28a:	18cb      	adds	r3, r1, r3
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	1ad3      	subs	r3, r2, r3
 800a290:	0018      	movs	r0, r3
 800a292:	f7f6 fa39 	bl	8000708 <__aeabi_i2d>
 800a296:	0002      	movs	r2, r0
 800a298:	000b      	movs	r3, r1
 800a29a:	0011      	movs	r1, r2
 800a29c:	000c      	movs	r4, r1
 800a29e:	005b      	lsls	r3, r3, #1
 800a2a0:	085d      	lsrs	r5, r3, #1
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	4b49      	ldr	r3, [pc, #292]	; (800a3cc <find_clusters+0x178>)
 800a2a6:	0020      	movs	r0, r4
 800a2a8:	0029      	movs	r1, r5
 800a2aa:	f7f6 f8d7 	bl	800045c <__aeabi_dcmpgt>
 800a2ae:	1e03      	subs	r3, r0, #0
 800a2b0:	d03e      	beq.n	800a330 <find_clusters+0xdc>
			// Calcul de la distance moyenne pour le cluster
			int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, i - 1);
 800a2b2:	69fb      	ldr	r3, [r7, #28]
 800a2b4:	1e5a      	subs	r2, r3, #1
 800a2b6:	6a39      	ldr	r1, [r7, #32]
 800a2b8:	69bb      	ldr	r3, [r7, #24]
 800a2ba:	0018      	movs	r0, r3
 800a2bc:	f7ff ffa2 	bl	800a204 <calculer_distance_moyenne>
 800a2c0:	0003      	movs	r3, r0
 800a2c2:	60fb      	str	r3, [r7, #12]

			// Calcul de l'angle moyen pour le cluster
			int angle_moyen = (debut_cluster + i - 1) / 2;
 800a2c4:	6a3a      	ldr	r2, [r7, #32]
 800a2c6:	69fb      	ldr	r3, [r7, #28]
 800a2c8:	18d3      	adds	r3, r2, r3
 800a2ca:	3b01      	subs	r3, #1
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	da00      	bge.n	800a2d2 <find_clusters+0x7e>
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	105b      	asrs	r3, r3, #1
 800a2d4:	60bb      	str	r3, [r7, #8]

			// Stockage des valeurs du cluster dans la structure
			LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 800a2d6:	6879      	ldr	r1, [r7, #4]
 800a2d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2da:	483d      	ldr	r0, [pc, #244]	; (800a3d0 <find_clusters+0x17c>)
 800a2dc:	0013      	movs	r3, r2
 800a2de:	005b      	lsls	r3, r3, #1
 800a2e0:	189b      	adds	r3, r3, r2
 800a2e2:	009b      	lsls	r3, r3, #2
 800a2e4:	18cb      	adds	r3, r1, r3
 800a2e6:	181b      	adds	r3, r3, r0
 800a2e8:	68ba      	ldr	r2, [r7, #8]
 800a2ea:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 800a2ec:	6879      	ldr	r1, [r7, #4]
 800a2ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2f0:	4838      	ldr	r0, [pc, #224]	; (800a3d4 <find_clusters+0x180>)
 800a2f2:	0013      	movs	r3, r2
 800a2f4:	005b      	lsls	r3, r3, #1
 800a2f6:	189b      	adds	r3, r3, r2
 800a2f8:	009b      	lsls	r3, r3, #2
 800a2fa:	18cb      	adds	r3, r1, r3
 800a2fc:	181b      	adds	r3, r3, r0
 800a2fe:	68fa      	ldr	r2, [r7, #12]
 800a300:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 800a302:	69fa      	ldr	r2, [r7, #28]
 800a304:	6a3b      	ldr	r3, [r7, #32]
 800a306:	1ad1      	subs	r1, r2, r3
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a30c:	4e32      	ldr	r6, [pc, #200]	; (800a3d8 <find_clusters+0x184>)
 800a30e:	0013      	movs	r3, r2
 800a310:	005b      	lsls	r3, r3, #1
 800a312:	189b      	adds	r3, r3, r2
 800a314:	009b      	lsls	r3, r3, #2
 800a316:	18c3      	adds	r3, r0, r3
 800a318:	199b      	adds	r3, r3, r6
 800a31a:	6019      	str	r1, [r3, #0]

			debut_cluster = i;
 800a31c:	69fb      	ldr	r3, [r7, #28]
 800a31e:	623b      	str	r3, [r7, #32]
			cluster_count++;
 800a320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a322:	3301      	adds	r3, #1
 800a324:	627b      	str	r3, [r7, #36]	; 0x24
			if(cluster_count==100){ //On empeche un dépassement du tableau
 800a326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a328:	2b64      	cmp	r3, #100	; 0x64
 800a32a:	d101      	bne.n	800a330 <find_clusters+0xdc>
				cluster_count=99;
 800a32c:	2363      	movs	r3, #99	; 0x63
 800a32e:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 1; i < NB_DEGRES; i++) {
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	3301      	adds	r3, #1
 800a334:	61fb      	str	r3, [r7, #28]
 800a336:	69fa      	ldr	r2, [r7, #28]
 800a338:	23b4      	movs	r3, #180	; 0xb4
 800a33a:	005b      	lsls	r3, r3, #1
 800a33c:	429a      	cmp	r2, r3
 800a33e:	db99      	blt.n	800a274 <find_clusters+0x20>
			}
		}
	}

	// Traitement du dernier cluster
	int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 800a340:	2368      	movs	r3, #104	; 0x68
 800a342:	33ff      	adds	r3, #255	; 0xff
 800a344:	001a      	movs	r2, r3
 800a346:	6a39      	ldr	r1, [r7, #32]
 800a348:	69bb      	ldr	r3, [r7, #24]
 800a34a:	0018      	movs	r0, r3
 800a34c:	f7ff ff5a 	bl	800a204 <calculer_distance_moyenne>
 800a350:	0003      	movs	r3, r0
 800a352:	617b      	str	r3, [r7, #20]
	int angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 800a354:	6a3b      	ldr	r3, [r7, #32]
 800a356:	3368      	adds	r3, #104	; 0x68
 800a358:	33ff      	adds	r3, #255	; 0xff
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	da00      	bge.n	800a360 <find_clusters+0x10c>
 800a35e:	3301      	adds	r3, #1
 800a360:	105b      	asrs	r3, r3, #1
 800a362:	613b      	str	r3, [r7, #16]
	LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 800a364:	6879      	ldr	r1, [r7, #4]
 800a366:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a368:	4819      	ldr	r0, [pc, #100]	; (800a3d0 <find_clusters+0x17c>)
 800a36a:	0013      	movs	r3, r2
 800a36c:	005b      	lsls	r3, r3, #1
 800a36e:	189b      	adds	r3, r3, r2
 800a370:	009b      	lsls	r3, r3, #2
 800a372:	18cb      	adds	r3, r1, r3
 800a374:	181b      	adds	r3, r3, r0
 800a376:	693a      	ldr	r2, [r7, #16]
 800a378:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 800a37a:	6879      	ldr	r1, [r7, #4]
 800a37c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a37e:	4815      	ldr	r0, [pc, #84]	; (800a3d4 <find_clusters+0x180>)
 800a380:	0013      	movs	r3, r2
 800a382:	005b      	lsls	r3, r3, #1
 800a384:	189b      	adds	r3, r3, r2
 800a386:	009b      	lsls	r3, r3, #2
 800a388:	18cb      	adds	r3, r1, r3
 800a38a:	181b      	adds	r3, r3, r0
 800a38c:	697a      	ldr	r2, [r7, #20]
 800a38e:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 800a390:	6a3b      	ldr	r3, [r7, #32]
 800a392:	22b4      	movs	r2, #180	; 0xb4
 800a394:	0052      	lsls	r2, r2, #1
 800a396:	1ad1      	subs	r1, r2, r3
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a39c:	4c0e      	ldr	r4, [pc, #56]	; (800a3d8 <find_clusters+0x184>)
 800a39e:	0013      	movs	r3, r2
 800a3a0:	005b      	lsls	r3, r3, #1
 800a3a2:	189b      	adds	r3, r3, r2
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	18c3      	adds	r3, r0, r3
 800a3a8:	191b      	adds	r3, r3, r4
 800a3aa:	6019      	str	r1, [r3, #0]
	cluster_count++;
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	627b      	str	r3, [r7, #36]	; 0x24
	LIDAR->processing.cluster_cnt=cluster_count;
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	4909      	ldr	r1, [pc, #36]	; (800a3dc <find_clusters+0x188>)
 800a3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b8:	505a      	str	r2, [r3, r1]
}
 800a3ba:	46c0      	nop			; (mov r8, r8)
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	b00b      	add	sp, #44	; 0x2c
 800a3c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3c2:	46c0      	nop			; (mov r8, r8)
 800a3c4:	000025bc 	.word	0x000025bc
 800a3c8:	3fffffff 	.word	0x3fffffff
 800a3cc:	4062c000 	.word	0x4062c000
 800a3d0:	00002b5c 	.word	0x00002b5c
 800a3d4:	00002b60 	.word	0x00002b60
 800a3d8:	00002b64 	.word	0x00002b64
 800a3dc:	0000300c 	.word	0x0000300c

0800a3e0 <medianFilter>:

void medianFilter(h_LIDAR_t * LIDAR) {
 800a3e0:	b580      	push	{r7, lr}
 800a3e2:	b090      	sub	sp, #64	; 0x40
 800a3e4:	af00      	add	r7, sp, #0
 800a3e6:	6078      	str	r0, [r7, #4]
	int * signal=LIDAR->processing.point_buff; //points non filtrés
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	4a3d      	ldr	r2, [pc, #244]	; (800a4e0 <medianFilter+0x100>)
 800a3ec:	4694      	mov	ip, r2
 800a3ee:	4463      	add	r3, ip
 800a3f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int signal_length=NB_DEGRES;
 800a3f2:	23b4      	movs	r3, #180	; 0xb4
 800a3f4:	005b      	lsls	r3, r3, #1
 800a3f6:	62bb      	str	r3, [r7, #40]	; 0x28
	int window[5];
	int i, j, k, middle;

	// La médiane se trouve au milieu de la fenêtre triée
	middle = 5 / 2;
 800a3f8:	2302      	movs	r3, #2
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < signal_length; i++) {
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a400:	e065      	b.n	800a4ce <medianFilter+0xee>
		// Construire la fenêtre avec les données autour du point i
		for (j = 0; j < 5; j++) {
 800a402:	2300      	movs	r3, #0
 800a404:	63bb      	str	r3, [r7, #56]	; 0x38
 800a406:	e01e      	b.n	800a446 <medianFilter+0x66>
			int index = i - middle + j;
 800a408:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	1ad3      	subs	r3, r2, r3
 800a40e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a410:	18d3      	adds	r3, r2, r3
 800a412:	633b      	str	r3, [r7, #48]	; 0x30
			// Gérer les bords du signal
			if (index < 0) index = 0;
 800a414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a416:	2b00      	cmp	r3, #0
 800a418:	da01      	bge.n	800a41e <medianFilter+0x3e>
 800a41a:	2300      	movs	r3, #0
 800a41c:	633b      	str	r3, [r7, #48]	; 0x30
			if (index >= signal_length) index = signal_length - 1;
 800a41e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a422:	429a      	cmp	r2, r3
 800a424:	db02      	blt.n	800a42c <medianFilter+0x4c>
 800a426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a428:	3b01      	subs	r3, #1
 800a42a:	633b      	str	r3, [r7, #48]	; 0x30
			window[j] = signal[index];
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a432:	18d3      	adds	r3, r2, r3
 800a434:	6819      	ldr	r1, [r3, #0]
 800a436:	230c      	movs	r3, #12
 800a438:	18fb      	adds	r3, r7, r3
 800a43a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a43c:	0092      	lsls	r2, r2, #2
 800a43e:	50d1      	str	r1, [r2, r3]
		for (j = 0; j < 5; j++) {
 800a440:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a442:	3301      	adds	r3, #1
 800a444:	63bb      	str	r3, [r7, #56]	; 0x38
 800a446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a448:	2b04      	cmp	r3, #4
 800a44a:	dddd      	ble.n	800a408 <medianFilter+0x28>
		}

		// Trier la fenêtre pour trouver la valeur médiane
		for (j = 0; j < 5; j++) {
 800a44c:	2300      	movs	r3, #0
 800a44e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a450:	e029      	b.n	800a4a6 <medianFilter+0xc6>
			for (k = j + 1; k < 5; k++) {
 800a452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a454:	3301      	adds	r3, #1
 800a456:	637b      	str	r3, [r7, #52]	; 0x34
 800a458:	e01f      	b.n	800a49a <medianFilter+0xba>
				if (window[j] > window[k]) {
 800a45a:	200c      	movs	r0, #12
 800a45c:	183b      	adds	r3, r7, r0
 800a45e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a460:	0092      	lsls	r2, r2, #2
 800a462:	58d2      	ldr	r2, [r2, r3]
 800a464:	183b      	adds	r3, r7, r0
 800a466:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a468:	0089      	lsls	r1, r1, #2
 800a46a:	58cb      	ldr	r3, [r1, r3]
 800a46c:	429a      	cmp	r2, r3
 800a46e:	dd11      	ble.n	800a494 <medianFilter+0xb4>
					// Échange simple pour le tri
					int temp = window[j];
 800a470:	183b      	adds	r3, r7, r0
 800a472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a474:	0092      	lsls	r2, r2, #2
 800a476:	58d3      	ldr	r3, [r2, r3]
 800a478:	623b      	str	r3, [r7, #32]
					window[j] = window[k];
 800a47a:	183b      	adds	r3, r7, r0
 800a47c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a47e:	0092      	lsls	r2, r2, #2
 800a480:	58d1      	ldr	r1, [r2, r3]
 800a482:	183b      	adds	r3, r7, r0
 800a484:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a486:	0092      	lsls	r2, r2, #2
 800a488:	50d1      	str	r1, [r2, r3]
					window[k] = temp;
 800a48a:	183b      	adds	r3, r7, r0
 800a48c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a48e:	0092      	lsls	r2, r2, #2
 800a490:	6a39      	ldr	r1, [r7, #32]
 800a492:	50d1      	str	r1, [r2, r3]
			for (k = j + 1; k < 5; k++) {
 800a494:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a496:	3301      	adds	r3, #1
 800a498:	637b      	str	r3, [r7, #52]	; 0x34
 800a49a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a49c:	2b04      	cmp	r3, #4
 800a49e:	dddc      	ble.n	800a45a <medianFilter+0x7a>
		for (j = 0; j < 5; j++) {
 800a4a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a2:	3301      	adds	r3, #1
 800a4a4:	63bb      	str	r3, [r7, #56]	; 0x38
 800a4a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4a8:	2b04      	cmp	r3, #4
 800a4aa:	ddd2      	ble.n	800a452 <medianFilter+0x72>
				}
			}
		}

		// Stocker la médiane dans le signal filtré
		LIDAR->processing.filtred_buff[i] = window[middle];
 800a4ac:	230c      	movs	r3, #12
 800a4ae:	18fb      	adds	r3, r7, r3
 800a4b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a4b2:	0092      	lsls	r2, r2, #2
 800a4b4:	58d2      	ldr	r2, [r2, r3]
 800a4b6:	6879      	ldr	r1, [r7, #4]
 800a4b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ba:	480a      	ldr	r0, [pc, #40]	; (800a4e4 <medianFilter+0x104>)
 800a4bc:	4684      	mov	ip, r0
 800a4be:	4463      	add	r3, ip
 800a4c0:	009b      	lsls	r3, r3, #2
 800a4c2:	18cb      	adds	r3, r1, r3
 800a4c4:	3304      	adds	r3, #4
 800a4c6:	601a      	str	r2, [r3, #0]
	for (i = 0; i < signal_length; i++) {
 800a4c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a4ca:	3301      	adds	r3, #1
 800a4cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a4ce:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a4d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	db95      	blt.n	800a402 <medianFilter+0x22>
	}
}
 800a4d6:	46c0      	nop			; (mov r8, r8)
 800a4d8:	46c0      	nop			; (mov r8, r8)
 800a4da:	46bd      	mov	sp, r7
 800a4dc:	b010      	add	sp, #64	; 0x40
 800a4de:	bd80      	pop	{r7, pc}
 800a4e0:	0000201c 	.word	0x0000201c
 800a4e4:	0000096e 	.word	0x0000096e

0800a4e8 <capt_task>:

extern int hunter; //1 hunter, 0 souris

extern TaskHandle_t xHandleMOTOR;

void capt_task(){
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	af00      	add	r7, sp, #0
	for(;;){
		xSemaphoreTake(sem_capt, portMAX_DELAY);
 800a4ec:	4b4f      	ldr	r3, [pc, #316]	; (800a62c <capt_task+0x144>)
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	2201      	movs	r2, #1
 800a4f2:	4252      	negs	r2, r2
 800a4f4:	0011      	movs	r1, r2
 800a4f6:	0018      	movs	r0, r3
 800a4f8:	f7fe fa21 	bl	800893e <xQueueSemaphoreTake>
		switch (GPIO_Pin_mem)
 800a4fc:	4b4c      	ldr	r3, [pc, #304]	; (800a630 <capt_task+0x148>)
 800a4fe:	881b      	ldrh	r3, [r3, #0]
 800a500:	2280      	movs	r2, #128	; 0x80
 800a502:	0212      	lsls	r2, r2, #8
 800a504:	4293      	cmp	r3, r2
 800a506:	d041      	beq.n	800a58c <capt_task+0xa4>
 800a508:	2280      	movs	r2, #128	; 0x80
 800a50a:	0212      	lsls	r2, r2, #8
 800a50c:	4293      	cmp	r3, r2
 800a50e:	dd00      	ble.n	800a512 <capt_task+0x2a>
 800a510:	e062      	b.n	800a5d8 <capt_task+0xf0>
 800a512:	2280      	movs	r2, #128	; 0x80
 800a514:	01d2      	lsls	r2, r2, #7
 800a516:	4293      	cmp	r3, r2
 800a518:	d02f      	beq.n	800a57a <capt_task+0x92>
 800a51a:	2280      	movs	r2, #128	; 0x80
 800a51c:	01d2      	lsls	r2, r2, #7
 800a51e:	4293      	cmp	r3, r2
 800a520:	dc5a      	bgt.n	800a5d8 <capt_task+0xf0>
 800a522:	2280      	movs	r2, #128	; 0x80
 800a524:	0192      	lsls	r2, r2, #6
 800a526:	4293      	cmp	r3, r2
 800a528:	d01e      	beq.n	800a568 <capt_task+0x80>
 800a52a:	2280      	movs	r2, #128	; 0x80
 800a52c:	0192      	lsls	r2, r2, #6
 800a52e:	4293      	cmp	r3, r2
 800a530:	dc52      	bgt.n	800a5d8 <capt_task+0xf0>
 800a532:	2280      	movs	r2, #128	; 0x80
 800a534:	0092      	lsls	r2, r2, #2
 800a536:	4293      	cmp	r3, r2
 800a538:	d04a      	beq.n	800a5d0 <capt_task+0xe8>
 800a53a:	2280      	movs	r2, #128	; 0x80
 800a53c:	0092      	lsls	r2, r2, #2
 800a53e:	4293      	cmp	r3, r2
 800a540:	dc4a      	bgt.n	800a5d8 <capt_task+0xf0>
 800a542:	2280      	movs	r2, #128	; 0x80
 800a544:	0052      	lsls	r2, r2, #1
 800a546:	4293      	cmp	r3, r2
 800a548:	d03e      	beq.n	800a5c8 <capt_task+0xe0>
 800a54a:	2280      	movs	r2, #128	; 0x80
 800a54c:	0052      	lsls	r2, r2, #1
 800a54e:	4293      	cmp	r3, r2
 800a550:	dc42      	bgt.n	800a5d8 <capt_task+0xf0>
 800a552:	2b20      	cmp	r3, #32
 800a554:	d023      	beq.n	800a59e <capt_task+0xb6>
 800a556:	dc3f      	bgt.n	800a5d8 <capt_task+0xf0>
 800a558:	2b10      	cmp	r3, #16
 800a55a:	d031      	beq.n	800a5c0 <capt_task+0xd8>
 800a55c:	dc3c      	bgt.n	800a5d8 <capt_task+0xf0>
 800a55e:	2b01      	cmp	r3, #1
 800a560:	d026      	beq.n	800a5b0 <capt_task+0xc8>
 800a562:	2b08      	cmp	r3, #8
 800a564:	d028      	beq.n	800a5b8 <capt_task+0xd0>
 800a566:	e037      	b.n	800a5d8 <capt_task+0xf0>
		{
		case Contact1_Pin 	:
			capteurs.CONTACT_1 = TRUE;
 800a568:	4b32      	ldr	r3, [pc, #200]	; (800a634 <capt_task+0x14c>)
 800a56a:	2201      	movs	r2, #1
 800a56c:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 800a56e:	4b32      	ldr	r3, [pc, #200]	; (800a638 <capt_task+0x150>)
 800a570:	2101      	movs	r1, #1
 800a572:	0018      	movs	r0, r3
 800a574:	f7f9 fb2b 	bl	8003bce <HAL_GPIO_TogglePin>
			break;
 800a578:	e02e      	b.n	800a5d8 <capt_task+0xf0>

		case Contact2_Pin 	:
			capteurs.CONTACT_2 = TRUE;
 800a57a:	4b2e      	ldr	r3, [pc, #184]	; (800a634 <capt_task+0x14c>)
 800a57c:	2201      	movs	r2, #1
 800a57e:	705a      	strb	r2, [r3, #1]
			HAL_GPIO_TogglePin(LED_WHITE_GPIO_Port, LED_WHITE_Pin);
 800a580:	4b2d      	ldr	r3, [pc, #180]	; (800a638 <capt_task+0x150>)
 800a582:	2104      	movs	r1, #4
 800a584:	0018      	movs	r0, r3
 800a586:	f7f9 fb22 	bl	8003bce <HAL_GPIO_TogglePin>
			break;
 800a58a:	e025      	b.n	800a5d8 <capt_task+0xf0>

		case Contact3_Pin 	:
			capteurs.CONTACT_3 = TRUE;
 800a58c:	4b29      	ldr	r3, [pc, #164]	; (800a634 <capt_task+0x14c>)
 800a58e:	2201      	movs	r2, #1
 800a590:	709a      	strb	r2, [r3, #2]
			HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800a592:	4b29      	ldr	r3, [pc, #164]	; (800a638 <capt_task+0x150>)
 800a594:	2102      	movs	r1, #2
 800a596:	0018      	movs	r0, r3
 800a598:	f7f9 fb19 	bl	8003bce <HAL_GPIO_TogglePin>
			break;
 800a59c:	e01c      	b.n	800a5d8 <capt_task+0xf0>

		case Contact4_Pin 	:
			capteurs.CONTACT_4 = TRUE;
 800a59e:	4b25      	ldr	r3, [pc, #148]	; (800a634 <capt_task+0x14c>)
 800a5a0:	2201      	movs	r2, #1
 800a5a2:	70da      	strb	r2, [r3, #3]
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 800a5a4:	4b24      	ldr	r3, [pc, #144]	; (800a638 <capt_task+0x150>)
 800a5a6:	2110      	movs	r1, #16
 800a5a8:	0018      	movs	r0, r3
 800a5aa:	f7f9 fb10 	bl	8003bce <HAL_GPIO_TogglePin>
			break;
 800a5ae:	e013      	b.n	800a5d8 <capt_task+0xf0>

		case Bouton1_Pin 		:
			capteurs.BTN_1 = TRUE;
 800a5b0:	4b20      	ldr	r3, [pc, #128]	; (800a634 <capt_task+0x14c>)
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	711a      	strb	r2, [r3, #4]
			break;
 800a5b6:	e00f      	b.n	800a5d8 <capt_task+0xf0>

		case Bouton2_Pin 		:
			capteurs.BTN_2 = TRUE;
 800a5b8:	4b1e      	ldr	r3, [pc, #120]	; (800a634 <capt_task+0x14c>)
 800a5ba:	2201      	movs	r2, #1
 800a5bc:	715a      	strb	r2, [r3, #5]
			break;
 800a5be:	e00b      	b.n	800a5d8 <capt_task+0xf0>

		case Bouton3_Pin 		:
			capteurs.BTN_3 = TRUE;
 800a5c0:	4b1c      	ldr	r3, [pc, #112]	; (800a634 <capt_task+0x14c>)
 800a5c2:	2201      	movs	r2, #1
 800a5c4:	719a      	strb	r2, [r3, #6]
			break;
 800a5c6:	e007      	b.n	800a5d8 <capt_task+0xf0>

		case Bordure1_Pin 	:
			capteurs.BORDURE_1 = TRUE;
 800a5c8:	4b1a      	ldr	r3, [pc, #104]	; (800a634 <capt_task+0x14c>)
 800a5ca:	2201      	movs	r2, #1
 800a5cc:	71da      	strb	r2, [r3, #7]
			break;
 800a5ce:	e003      	b.n	800a5d8 <capt_task+0xf0>

		case Bordure2_Pin 	:
			capteurs.BORDURE_2 = TRUE;
 800a5d0:	4b18      	ldr	r3, [pc, #96]	; (800a634 <capt_task+0x14c>)
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	721a      	strb	r2, [r3, #8]
			break;
 800a5d6:	46c0      	nop			; (mov r8, r8)
		}
		//vTaskDelay(20);
		if (capteurs.CONTACT_1 || capteurs.CONTACT_2 || capteurs.CONTACT_3 || capteurs.CONTACT_4)
 800a5d8:	4b16      	ldr	r3, [pc, #88]	; (800a634 <capt_task+0x14c>)
 800a5da:	781b      	ldrb	r3, [r3, #0]
 800a5dc:	2b00      	cmp	r3, #0
 800a5de:	d10c      	bne.n	800a5fa <capt_task+0x112>
 800a5e0:	4b14      	ldr	r3, [pc, #80]	; (800a634 <capt_task+0x14c>)
 800a5e2:	785b      	ldrb	r3, [r3, #1]
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d108      	bne.n	800a5fa <capt_task+0x112>
 800a5e8:	4b12      	ldr	r3, [pc, #72]	; (800a634 <capt_task+0x14c>)
 800a5ea:	789b      	ldrb	r3, [r3, #2]
 800a5ec:	2b00      	cmp	r3, #0
 800a5ee:	d104      	bne.n	800a5fa <capt_task+0x112>
 800a5f0:	4b10      	ldr	r3, [pc, #64]	; (800a634 <capt_task+0x14c>)
 800a5f2:	78db      	ldrb	r3, [r3, #3]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d100      	bne.n	800a5fa <capt_task+0x112>
 800a5f8:	e778      	b.n	800a4ec <capt_task+0x4>
		{
			hunter = 1-hunter; //changement d'état pour passer de hunter à souris ou l'inverse
 800a5fa:	4b10      	ldr	r3, [pc, #64]	; (800a63c <capt_task+0x154>)
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	2201      	movs	r2, #1
 800a600:	1ad2      	subs	r2, r2, r3
 800a602:	4b0e      	ldr	r3, [pc, #56]	; (800a63c <capt_task+0x154>)
 800a604:	601a      	str	r2, [r3, #0]
			if(hunter){	//si hunter led bleue allumée
 800a606:	4b0d      	ldr	r3, [pc, #52]	; (800a63c <capt_task+0x154>)
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d006      	beq.n	800a61c <capt_task+0x134>
				HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800a60e:	4b0a      	ldr	r3, [pc, #40]	; (800a638 <capt_task+0x150>)
 800a610:	2201      	movs	r2, #1
 800a612:	2108      	movs	r1, #8
 800a614:	0018      	movs	r0, r3
 800a616:	f7f9 fabd 	bl	8003b94 <HAL_GPIO_WritePin>
 800a61a:	e767      	b.n	800a4ec <capt_task+0x4>
				//HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
			}
			else{ //si souris led jaune allumée
				HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_RESET);
 800a61c:	4b06      	ldr	r3, [pc, #24]	; (800a638 <capt_task+0x150>)
 800a61e:	2200      	movs	r2, #0
 800a620:	2108      	movs	r1, #8
 800a622:	0018      	movs	r0, r3
 800a624:	f7f9 fab6 	bl	8003b94 <HAL_GPIO_WritePin>
		xSemaphoreTake(sem_capt, portMAX_DELAY);
 800a628:	e760      	b.n	800a4ec <capt_task+0x4>
 800a62a:	46c0      	nop			; (mov r8, r8)
 800a62c:	20008700 	.word	0x20008700
 800a630:	200086fa 	.word	0x200086fa
 800a634:	200086f0 	.word	0x200086f0
 800a638:	50000c00 	.word	0x50000c00
 800a63c:	20000000 	.word	0x20000000

0800a640 <capt_init>:
		*/
	}
}

int capt_init()
{
 800a640:	b580      	push	{r7, lr}
 800a642:	b084      	sub	sp, #16
 800a644:	af02      	add	r7, sp, #8
	sem_capt = xSemaphoreCreateBinary();
 800a646:	2203      	movs	r2, #3
 800a648:	2100      	movs	r1, #0
 800a64a:	2001      	movs	r0, #1
 800a64c:	f7fe f8c2 	bl	80087d4 <xQueueGenericCreate>
 800a650:	0002      	movs	r2, r0
 800a652:	4b18      	ldr	r3, [pc, #96]	; (800a6b4 <capt_init+0x74>)
 800a654:	601a      	str	r2, [r3, #0]
	BaseType_t xReturned;

	printf("Loading Capt_ISR task with priority 3\n\r");
 800a656:	4b18      	ldr	r3, [pc, #96]	; (800a6b8 <capt_init+0x78>)
 800a658:	0018      	movs	r0, r3
 800a65a:	f000 fddb 	bl	800b214 <iprintf>

	xReturned = xTaskCreate(
 800a65e:	2380      	movs	r3, #128	; 0x80
 800a660:	005a      	lsls	r2, r3, #1
 800a662:	4916      	ldr	r1, [pc, #88]	; (800a6bc <capt_init+0x7c>)
 800a664:	4816      	ldr	r0, [pc, #88]	; (800a6c0 <capt_init+0x80>)
 800a666:	4b17      	ldr	r3, [pc, #92]	; (800a6c4 <capt_init+0x84>)
 800a668:	9301      	str	r3, [sp, #4]
 800a66a:	2303      	movs	r3, #3
 800a66c:	9300      	str	r3, [sp, #0]
 800a66e:	2300      	movs	r3, #0
 800a670:	f7fe fac9 	bl	8008c06 <xTaskCreate>
 800a674:	0003      	movs	r3, r0
 800a676:	607b      	str	r3, [r7, #4]
			"capt_task",
			256,
			NULL,
			3,
			&TaskHandle_CAPT);
	HAL_GPIO_WritePin(LED_BLUE_GPIO_Port, LED_BLUE_Pin, GPIO_PIN_SET);
 800a678:	4b13      	ldr	r3, [pc, #76]	; (800a6c8 <capt_init+0x88>)
 800a67a:	2201      	movs	r2, #1
 800a67c:	2108      	movs	r1, #8
 800a67e:	0018      	movs	r0, r3
 800a680:	f7f9 fa88 	bl	8003b94 <HAL_GPIO_WritePin>
	if(xReturned==pdPASS){
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	2b01      	cmp	r3, #1
 800a688:	d105      	bne.n	800a696 <capt_init+0x56>
		printf("Task loaded\r\n");
 800a68a:	4b10      	ldr	r3, [pc, #64]	; (800a6cc <capt_init+0x8c>)
 800a68c:	0018      	movs	r0, r3
 800a68e:	f000 fe27 	bl	800b2e0 <puts>
		return 0;
 800a692:	2300      	movs	r3, #0
 800a694:	e00a      	b.n	800a6ac <capt_init+0x6c>
	}
	else {
		printf("Error loading task\r\n");
 800a696:	4b0e      	ldr	r3, [pc, #56]	; (800a6d0 <capt_init+0x90>)
 800a698:	0018      	movs	r0, r3
 800a69a:	f000 fe21 	bl	800b2e0 <puts>
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, GPIO_PIN_SET);
 800a69e:	4b0a      	ldr	r3, [pc, #40]	; (800a6c8 <capt_init+0x88>)
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	2101      	movs	r1, #1
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f7f9 fa75 	bl	8003b94 <HAL_GPIO_WritePin>
		return 1;
 800a6aa:	2301      	movs	r3, #1
	}

}
 800a6ac:	0018      	movs	r0, r3
 800a6ae:	46bd      	mov	sp, r7
 800a6b0:	b002      	add	sp, #8
 800a6b2:	bd80      	pop	{r7, pc}
 800a6b4:	20008700 	.word	0x20008700
 800a6b8:	0800c510 	.word	0x0800c510
 800a6bc:	0800c538 	.word	0x0800c538
 800a6c0:	0800a4e9 	.word	0x0800a4e9
 800a6c4:	200086fc 	.word	0x200086fc
 800a6c8:	50000c00 	.word	0x50000c00
 800a6cc:	0800c544 	.word	0x0800c544
 800a6d0:	0800c554 	.word	0x0800c554

0800a6d4 <HAL_GPIO_EXTI_Rising_Callback>:
// contact1 gauche
// contact2 devant
// contact3 derrière
// contact4 droite
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 800a6d4:	b580      	push	{r7, lr}
 800a6d6:	b084      	sub	sp, #16
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	0002      	movs	r2, r0
 800a6dc:	1dbb      	adds	r3, r7, #6
 800a6de:	801a      	strh	r2, [r3, #0]
	BaseType_t higher_priority_task_woken = pdFALSE;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	60fb      	str	r3, [r7, #12]
	GPIO_Pin_mem = GPIO_Pin;
 800a6e4:	4b0b      	ldr	r3, [pc, #44]	; (800a714 <HAL_GPIO_EXTI_Rising_Callback+0x40>)
 800a6e6:	1dba      	adds	r2, r7, #6
 800a6e8:	8812      	ldrh	r2, [r2, #0]
 800a6ea:	801a      	strh	r2, [r3, #0]
	//capt_btn_task();
	xSemaphoreGiveFromISR(sem_capt, &higher_priority_task_woken);
 800a6ec:	4b0a      	ldr	r3, [pc, #40]	; (800a718 <HAL_GPIO_EXTI_Rising_Callback+0x44>)
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	220c      	movs	r2, #12
 800a6f2:	18ba      	adds	r2, r7, r2
 800a6f4:	0011      	movs	r1, r2
 800a6f6:	0018      	movs	r0, r3
 800a6f8:	f7fe f8bc 	bl	8008874 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d003      	beq.n	800a70a <HAL_GPIO_EXTI_Rising_Callback+0x36>
 800a702:	4b06      	ldr	r3, [pc, #24]	; (800a71c <HAL_GPIO_EXTI_Rising_Callback+0x48>)
 800a704:	2280      	movs	r2, #128	; 0x80
 800a706:	0552      	lsls	r2, r2, #21
 800a708:	601a      	str	r2, [r3, #0]
		HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
		capteurs.BORDURE_2 = TRUE;

		break;
	 */
}
 800a70a:	46c0      	nop			; (mov r8, r8)
 800a70c:	46bd      	mov	sp, r7
 800a70e:	b004      	add	sp, #16
 800a710:	bd80      	pop	{r7, pc}
 800a712:	46c0      	nop			; (mov r8, r8)
 800a714:	200086fa 	.word	0x200086fa
 800a718:	20008700 	.word	0x20008700
 800a71c:	e000ed04 	.word	0xe000ed04

0800a720 <angle_inverse>:
#define COEFFICIENT_ANGLE 2// Equivalent à 190.0 / 180.0
#define VITESSE_CONSTANTE 400



int angle_inverse(int angle) {
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
    int angle_oppose = 180 - angle;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	22b4      	movs	r2, #180	; 0xb4
 800a72c:	1ad3      	subs	r3, r2, r3
 800a72e:	60fb      	str	r3, [r7, #12]
    // Ajustement pour s'assurer que l'angle reste dans l'intervalle [0, 360]
    if (angle_oppose < 0) {
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2b00      	cmp	r3, #0
 800a734:	da03      	bge.n	800a73e <angle_inverse+0x1e>
        angle_oppose += 360;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	3369      	adds	r3, #105	; 0x69
 800a73a:	33ff      	adds	r3, #255	; 0xff
 800a73c:	60fb      	str	r3, [r7, #12]
    }
    printf("a = %d\r\n",angle_oppose);
 800a73e:	68fa      	ldr	r2, [r7, #12]
 800a740:	4b04      	ldr	r3, [pc, #16]	; (800a754 <angle_inverse+0x34>)
 800a742:	0011      	movs	r1, r2
 800a744:	0018      	movs	r0, r3
 800a746:	f000 fd65 	bl	800b214 <iprintf>
    return angle_oppose;
 800a74a:	68fb      	ldr	r3, [r7, #12]
}
 800a74c:	0018      	movs	r0, r3
 800a74e:	46bd      	mov	sp, r7
 800a750:	b004      	add	sp, #16
 800a752:	bd80      	pop	{r7, pc}
 800a754:	0800c568 	.word	0x0800c568

0800a758 <pwm_start>:
#include "pwm.h"


//Gestion de l'allumage des moteurs
int pwm_start(TIM_HandleTypeDef htim, int Channel)
{
 800a758:	b084      	sub	sp, #16
 800a75a:	b5b0      	push	{r4, r5, r7, lr}
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	2510      	movs	r5, #16
 800a760:	197c      	adds	r4, r7, r5
 800a762:	6020      	str	r0, [r4, #0]
 800a764:	6061      	str	r1, [r4, #4]
 800a766:	60a2      	str	r2, [r4, #8]
 800a768:	60e3      	str	r3, [r4, #12]
	return HAL_TIM_PWM_Start(&htim, Channel);
 800a76a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a76c:	197b      	adds	r3, r7, r5
 800a76e:	0011      	movs	r1, r2
 800a770:	0018      	movs	r0, r3
 800a772:	f7fa fae9 	bl	8004d48 <HAL_TIM_PWM_Start>
 800a776:	0003      	movs	r3, r0
}
 800a778:	0018      	movs	r0, r3
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bcb0      	pop	{r4, r5, r7}
 800a77e:	bc08      	pop	{r3}
 800a780:	b004      	add	sp, #16
 800a782:	4718      	bx	r3

0800a784 <pwm_stop>:

int pwm_stop(TIM_HandleTypeDef htim, int Channel)
{
 800a784:	b084      	sub	sp, #16
 800a786:	b5b0      	push	{r4, r5, r7, lr}
 800a788:	af00      	add	r7, sp, #0
 800a78a:	2510      	movs	r5, #16
 800a78c:	197c      	adds	r4, r7, r5
 800a78e:	6020      	str	r0, [r4, #0]
 800a790:	6061      	str	r1, [r4, #4]
 800a792:	60a2      	str	r2, [r4, #8]
 800a794:	60e3      	str	r3, [r4, #12]
	return HAL_TIM_PWM_Stop(&htim, Channel);
 800a796:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a798:	197b      	adds	r3, r7, r5
 800a79a:	0011      	movs	r1, r2
 800a79c:	0018      	movs	r0, r3
 800a79e:	f7fa fbb7 	bl	8004f10 <HAL_TIM_PWM_Stop>
 800a7a2:	0003      	movs	r3, r0
}
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	46bd      	mov	sp, r7
 800a7a8:	bcb0      	pop	{r4, r5, r7}
 800a7aa:	bc08      	pop	{r3}
 800a7ac:	b004      	add	sp, #16
 800a7ae:	4718      	bx	r3

0800a7b0 <motor_Init>:

//Initialisation des moteurs
void motor_Init(struct Motor_drv_struct *moteur1, struct Motor_drv_struct *moteur2){
 800a7b0:	b580      	push	{r7, lr}
 800a7b2:	b082      	sub	sp, #8
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]

	moteur1->Channel_Backward = TIM_CHANNEL_1;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	605a      	str	r2, [r3, #4]
	moteur1->Channel_Forward = TIM_CHANNEL_2;
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	601a      	str	r2, [r3, #0]
	moteur1->Timer_Backward = htim15;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	4a23      	ldr	r2, [pc, #140]	; (800a858 <motor_Init+0xa8>)
 800a7ca:	3370      	adds	r3, #112	; 0x70
 800a7cc:	0011      	movs	r1, r2
 800a7ce:	224c      	movs	r2, #76	; 0x4c
 800a7d0:	0018      	movs	r0, r3
 800a7d2:	f000 ff37 	bl	800b644 <memcpy>
	moteur1->Timer_Forward = htim15;
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	4a1f      	ldr	r2, [pc, #124]	; (800a858 <motor_Init+0xa8>)
 800a7da:	3324      	adds	r3, #36	; 0x24
 800a7dc:	0011      	movs	r1, r2
 800a7de:	224c      	movs	r2, #76	; 0x4c
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	f000 ff2f 	bl	800b644 <memcpy>
	moteur1->pwm_start = pwm_start;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	21bc      	movs	r1, #188	; 0xbc
 800a7ea:	4a1c      	ldr	r2, [pc, #112]	; (800a85c <motor_Init+0xac>)
 800a7ec:	505a      	str	r2, [r3, r1]
	moteur1->pwm_stop = pwm_stop;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	21c0      	movs	r1, #192	; 0xc0
 800a7f2:	4a1b      	ldr	r2, [pc, #108]	; (800a860 <motor_Init+0xb0>)
 800a7f4:	505a      	str	r2, [r3, r1]
	moteur1->update = update_motor;
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	21c4      	movs	r1, #196	; 0xc4
 800a7fa:	4a1a      	ldr	r2, [pc, #104]	; (800a864 <motor_Init+0xb4>)
 800a7fc:	505a      	str	r2, [r3, r1]
	moteur1->old_alpha =0;
 800a7fe:	687b      	ldr	r3, [r7, #4]
 800a800:	2200      	movs	r2, #0
 800a802:	611a      	str	r2, [r3, #16]

	moteur2->Channel_Backward = TIM_CHANNEL_1;
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2200      	movs	r2, #0
 800a808:	605a      	str	r2, [r3, #4]
	moteur2->Channel_Forward = TIM_CHANNEL_1;
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	2200      	movs	r2, #0
 800a80e:	601a      	str	r2, [r3, #0]
	moteur2->Timer_Backward = htim16;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	4a15      	ldr	r2, [pc, #84]	; (800a868 <motor_Init+0xb8>)
 800a814:	3370      	adds	r3, #112	; 0x70
 800a816:	0011      	movs	r1, r2
 800a818:	224c      	movs	r2, #76	; 0x4c
 800a81a:	0018      	movs	r0, r3
 800a81c:	f000 ff12 	bl	800b644 <memcpy>
	moteur2->Timer_Forward = htim17;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	4a12      	ldr	r2, [pc, #72]	; (800a86c <motor_Init+0xbc>)
 800a824:	3324      	adds	r3, #36	; 0x24
 800a826:	0011      	movs	r1, r2
 800a828:	224c      	movs	r2, #76	; 0x4c
 800a82a:	0018      	movs	r0, r3
 800a82c:	f000 ff0a 	bl	800b644 <memcpy>
	moteur2->pwm_start = pwm_start;
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	21bc      	movs	r1, #188	; 0xbc
 800a834:	4a09      	ldr	r2, [pc, #36]	; (800a85c <motor_Init+0xac>)
 800a836:	505a      	str	r2, [r3, r1]
	moteur2->pwm_stop = pwm_stop;
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	21c0      	movs	r1, #192	; 0xc0
 800a83c:	4a08      	ldr	r2, [pc, #32]	; (800a860 <motor_Init+0xb0>)
 800a83e:	505a      	str	r2, [r3, r1]
	moteur2->update = update_motor;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	21c4      	movs	r1, #196	; 0xc4
 800a844:	4a07      	ldr	r2, [pc, #28]	; (800a864 <motor_Init+0xb4>)
 800a846:	505a      	str	r2, [r3, r1]
	moteur2->old_alpha =0;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	2200      	movs	r2, #0
 800a84c:	611a      	str	r2, [r3, #16]
}
 800a84e:	46c0      	nop			; (mov r8, r8)
 800a850:	46bd      	mov	sp, r7
 800a852:	b002      	add	sp, #8
 800a854:	bd80      	pop	{r7, pc}
 800a856:	46c0      	nop			; (mov r8, r8)
 800a858:	20003518 	.word	0x20003518
 800a85c:	0800a759 	.word	0x0800a759
 800a860:	0800a785 	.word	0x0800a785
 800a864:	0800a871 	.word	0x0800a871
 800a868:	20003564 	.word	0x20003564
 800a86c:	200035b0 	.word	0x200035b0

0800a870 <update_motor>:

//Update alpha du moteur
void update_motor(struct Motor_drv_struct motor)
{
 800a870:	b084      	sub	sp, #16
 800a872:	b5b0      	push	{r4, r5, r7, lr}
 800a874:	b084      	sub	sp, #16
 800a876:	af00      	add	r7, sp, #0
 800a878:	2520      	movs	r5, #32
 800a87a:	197c      	adds	r4, r7, r5
 800a87c:	6020      	str	r0, [r4, #0]
 800a87e:	6061      	str	r1, [r4, #4]
 800a880:	60a2      	str	r2, [r4, #8]
 800a882:	60e3      	str	r3, [r4, #12]
	if(motor.old_sens == motor.sens){
 800a884:	0029      	movs	r1, r5
 800a886:	187b      	adds	r3, r7, r1
 800a888:	6a1a      	ldr	r2, [r3, #32]
 800a88a:	187b      	adds	r3, r7, r1
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	429a      	cmp	r2, r3
 800a890:	d000      	beq.n	800a894 <update_motor+0x24>
 800a892:	e1f8      	b.n	800ac86 <update_motor+0x416>
		if (motor.old_alpha <= motor.alpha)	//permet de faire une rampe sur le pwm
 800a894:	187b      	adds	r3, r7, r1
 800a896:	691a      	ldr	r2, [r3, #16]
 800a898:	187b      	adds	r3, r7, r1
 800a89a:	68db      	ldr	r3, [r3, #12]
 800a89c:	429a      	cmp	r2, r3
 800a89e:	dd00      	ble.n	800a8a2 <update_motor+0x32>
 800a8a0:	e0f4      	b.n	800aa8c <update_motor+0x21c>
		{
			for (int i = motor.old_alpha; i<=motor.alpha;i++){	//application de la rampe
 800a8a2:	187b      	adds	r3, r7, r1
 800a8a4:	691b      	ldr	r3, [r3, #16]
 800a8a6:	60fb      	str	r3, [r7, #12]
 800a8a8:	e0e8      	b.n	800aa7c <update_motor+0x20c>
				if (motor.sens == 1)
 800a8aa:	2220      	movs	r2, #32
 800a8ac:	18bb      	adds	r3, r7, r2
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d000      	beq.n	800a8b6 <update_motor+0x46>
 800a8b4:	e06c      	b.n	800a990 <update_motor+0x120>
				{
					__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,i);
 800a8b6:	18bb      	adds	r3, r7, r2
 800a8b8:	685b      	ldr	r3, [r3, #4]
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d104      	bne.n	800a8c8 <update_motor+0x58>
 800a8be:	18bb      	adds	r3, r7, r2
 800a8c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a8c2:	68fa      	ldr	r2, [r7, #12]
 800a8c4:	635a      	str	r2, [r3, #52]	; 0x34
 800a8c6:	e02c      	b.n	800a922 <update_motor+0xb2>
 800a8c8:	2220      	movs	r2, #32
 800a8ca:	18bb      	adds	r3, r7, r2
 800a8cc:	685b      	ldr	r3, [r3, #4]
 800a8ce:	2b04      	cmp	r3, #4
 800a8d0:	d104      	bne.n	800a8dc <update_motor+0x6c>
 800a8d2:	18bb      	adds	r3, r7, r2
 800a8d4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	6393      	str	r3, [r2, #56]	; 0x38
 800a8da:	e022      	b.n	800a922 <update_motor+0xb2>
 800a8dc:	2220      	movs	r2, #32
 800a8de:	18bb      	adds	r3, r7, r2
 800a8e0:	685b      	ldr	r3, [r3, #4]
 800a8e2:	2b08      	cmp	r3, #8
 800a8e4:	d104      	bne.n	800a8f0 <update_motor+0x80>
 800a8e6:	18bb      	adds	r3, r7, r2
 800a8e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a8ee:	e018      	b.n	800a922 <update_motor+0xb2>
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	18bb      	adds	r3, r7, r2
 800a8f4:	685b      	ldr	r3, [r3, #4]
 800a8f6:	2b0c      	cmp	r3, #12
 800a8f8:	d104      	bne.n	800a904 <update_motor+0x94>
 800a8fa:	18bb      	adds	r3, r7, r2
 800a8fc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6413      	str	r3, [r2, #64]	; 0x40
 800a902:	e00e      	b.n	800a922 <update_motor+0xb2>
 800a904:	2220      	movs	r2, #32
 800a906:	18bb      	adds	r3, r7, r2
 800a908:	685b      	ldr	r3, [r3, #4]
 800a90a:	2b10      	cmp	r3, #16
 800a90c:	d104      	bne.n	800a918 <update_motor+0xa8>
 800a90e:	18bb      	adds	r3, r7, r2
 800a910:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6593      	str	r3, [r2, #88]	; 0x58
 800a916:	e004      	b.n	800a922 <update_motor+0xb2>
 800a918:	2320      	movs	r3, #32
 800a91a:	18fb      	adds	r3, r7, r3
 800a91c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	65d3      	str	r3, [r2, #92]	; 0x5c
					__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,0);
 800a922:	2220      	movs	r2, #32
 800a924:	18bb      	adds	r3, r7, r2
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d104      	bne.n	800a936 <update_motor+0xc6>
 800a92c:	18bb      	adds	r3, r7, r2
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	2200      	movs	r2, #0
 800a932:	635a      	str	r2, [r3, #52]	; 0x34
 800a934:	e02c      	b.n	800a990 <update_motor+0x120>
 800a936:	2220      	movs	r2, #32
 800a938:	18bb      	adds	r3, r7, r2
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	2b04      	cmp	r3, #4
 800a93e:	d104      	bne.n	800a94a <update_motor+0xda>
 800a940:	18bb      	adds	r3, r7, r2
 800a942:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a944:	2300      	movs	r3, #0
 800a946:	6393      	str	r3, [r2, #56]	; 0x38
 800a948:	e022      	b.n	800a990 <update_motor+0x120>
 800a94a:	2220      	movs	r2, #32
 800a94c:	18bb      	adds	r3, r7, r2
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	2b08      	cmp	r3, #8
 800a952:	d104      	bne.n	800a95e <update_motor+0xee>
 800a954:	18bb      	adds	r3, r7, r2
 800a956:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a958:	2300      	movs	r3, #0
 800a95a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a95c:	e018      	b.n	800a990 <update_motor+0x120>
 800a95e:	2220      	movs	r2, #32
 800a960:	18bb      	adds	r3, r7, r2
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	2b0c      	cmp	r3, #12
 800a966:	d104      	bne.n	800a972 <update_motor+0x102>
 800a968:	18bb      	adds	r3, r7, r2
 800a96a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a96c:	2300      	movs	r3, #0
 800a96e:	6413      	str	r3, [r2, #64]	; 0x40
 800a970:	e00e      	b.n	800a990 <update_motor+0x120>
 800a972:	2220      	movs	r2, #32
 800a974:	18bb      	adds	r3, r7, r2
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2b10      	cmp	r3, #16
 800a97a:	d104      	bne.n	800a986 <update_motor+0x116>
 800a97c:	18bb      	adds	r3, r7, r2
 800a97e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a980:	2300      	movs	r3, #0
 800a982:	6593      	str	r3, [r2, #88]	; 0x58
 800a984:	e004      	b.n	800a990 <update_motor+0x120>
 800a986:	2320      	movs	r3, #32
 800a988:	18fb      	adds	r3, r7, r3
 800a98a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a98c:	2300      	movs	r3, #0
 800a98e:	65d3      	str	r3, [r2, #92]	; 0x5c
				}
				if (motor.sens == 2)
 800a990:	2220      	movs	r2, #32
 800a992:	18bb      	adds	r3, r7, r2
 800a994:	689b      	ldr	r3, [r3, #8]
 800a996:	2b02      	cmp	r3, #2
 800a998:	d000      	beq.n	800a99c <update_motor+0x12c>
 800a99a:	e06c      	b.n	800aa76 <update_motor+0x206>
				{
					__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,0);
 800a99c:	18bb      	adds	r3, r7, r2
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	d104      	bne.n	800a9ae <update_motor+0x13e>
 800a9a4:	18bb      	adds	r3, r7, r2
 800a9a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	635a      	str	r2, [r3, #52]	; 0x34
 800a9ac:	e02c      	b.n	800aa08 <update_motor+0x198>
 800a9ae:	2220      	movs	r2, #32
 800a9b0:	18bb      	adds	r3, r7, r2
 800a9b2:	685b      	ldr	r3, [r3, #4]
 800a9b4:	2b04      	cmp	r3, #4
 800a9b6:	d104      	bne.n	800a9c2 <update_motor+0x152>
 800a9b8:	18bb      	adds	r3, r7, r2
 800a9ba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9bc:	2300      	movs	r3, #0
 800a9be:	6393      	str	r3, [r2, #56]	; 0x38
 800a9c0:	e022      	b.n	800aa08 <update_motor+0x198>
 800a9c2:	2220      	movs	r2, #32
 800a9c4:	18bb      	adds	r3, r7, r2
 800a9c6:	685b      	ldr	r3, [r3, #4]
 800a9c8:	2b08      	cmp	r3, #8
 800a9ca:	d104      	bne.n	800a9d6 <update_motor+0x166>
 800a9cc:	18bb      	adds	r3, r7, r2
 800a9ce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9d0:	2300      	movs	r3, #0
 800a9d2:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a9d4:	e018      	b.n	800aa08 <update_motor+0x198>
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	18bb      	adds	r3, r7, r2
 800a9da:	685b      	ldr	r3, [r3, #4]
 800a9dc:	2b0c      	cmp	r3, #12
 800a9de:	d104      	bne.n	800a9ea <update_motor+0x17a>
 800a9e0:	18bb      	adds	r3, r7, r2
 800a9e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	6413      	str	r3, [r2, #64]	; 0x40
 800a9e8:	e00e      	b.n	800aa08 <update_motor+0x198>
 800a9ea:	2220      	movs	r2, #32
 800a9ec:	18bb      	adds	r3, r7, r2
 800a9ee:	685b      	ldr	r3, [r3, #4]
 800a9f0:	2b10      	cmp	r3, #16
 800a9f2:	d104      	bne.n	800a9fe <update_motor+0x18e>
 800a9f4:	18bb      	adds	r3, r7, r2
 800a9f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	6593      	str	r3, [r2, #88]	; 0x58
 800a9fc:	e004      	b.n	800aa08 <update_motor+0x198>
 800a9fe:	2320      	movs	r3, #32
 800aa00:	18fb      	adds	r3, r7, r3
 800aa02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aa04:	2300      	movs	r3, #0
 800aa06:	65d3      	str	r3, [r2, #92]	; 0x5c
					__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,i);
 800aa08:	2220      	movs	r2, #32
 800aa0a:	18bb      	adds	r3, r7, r2
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d104      	bne.n	800aa1c <update_motor+0x1ac>
 800aa12:	18bb      	adds	r3, r7, r2
 800aa14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa16:	68fa      	ldr	r2, [r7, #12]
 800aa18:	635a      	str	r2, [r3, #52]	; 0x34
 800aa1a:	e02c      	b.n	800aa76 <update_motor+0x206>
 800aa1c:	2220      	movs	r2, #32
 800aa1e:	18bb      	adds	r3, r7, r2
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2b04      	cmp	r3, #4
 800aa24:	d104      	bne.n	800aa30 <update_motor+0x1c0>
 800aa26:	18bb      	adds	r3, r7, r2
 800aa28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6393      	str	r3, [r2, #56]	; 0x38
 800aa2e:	e022      	b.n	800aa76 <update_motor+0x206>
 800aa30:	2220      	movs	r2, #32
 800aa32:	18bb      	adds	r3, r7, r2
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	2b08      	cmp	r3, #8
 800aa38:	d104      	bne.n	800aa44 <update_motor+0x1d4>
 800aa3a:	18bb      	adds	r3, r7, r2
 800aa3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	63d3      	str	r3, [r2, #60]	; 0x3c
 800aa42:	e018      	b.n	800aa76 <update_motor+0x206>
 800aa44:	2220      	movs	r2, #32
 800aa46:	18bb      	adds	r3, r7, r2
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	2b0c      	cmp	r3, #12
 800aa4c:	d104      	bne.n	800aa58 <update_motor+0x1e8>
 800aa4e:	18bb      	adds	r3, r7, r2
 800aa50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	6413      	str	r3, [r2, #64]	; 0x40
 800aa56:	e00e      	b.n	800aa76 <update_motor+0x206>
 800aa58:	2220      	movs	r2, #32
 800aa5a:	18bb      	adds	r3, r7, r2
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	2b10      	cmp	r3, #16
 800aa60:	d104      	bne.n	800aa6c <update_motor+0x1fc>
 800aa62:	18bb      	adds	r3, r7, r2
 800aa64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6593      	str	r3, [r2, #88]	; 0x58
 800aa6a:	e004      	b.n	800aa76 <update_motor+0x206>
 800aa6c:	2320      	movs	r3, #32
 800aa6e:	18fb      	adds	r3, r7, r3
 800aa70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	65d3      	str	r3, [r2, #92]	; 0x5c
			for (int i = motor.old_alpha; i<=motor.alpha;i++){	//application de la rampe
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	3301      	adds	r3, #1
 800aa7a:	60fb      	str	r3, [r7, #12]
 800aa7c:	2320      	movs	r3, #32
 800aa7e:	18fb      	adds	r3, r7, r3
 800aa80:	68db      	ldr	r3, [r3, #12]
 800aa82:	68fa      	ldr	r2, [r7, #12]
 800aa84:	429a      	cmp	r2, r3
 800aa86:	dc00      	bgt.n	800aa8a <update_motor+0x21a>
 800aa88:	e70f      	b.n	800a8aa <update_motor+0x3a>
 800aa8a:	e2e1      	b.n	800b050 <update_motor+0x7e0>
				}
			}
		}
		else if (motor.old_alpha >= motor.alpha)
 800aa8c:	2120      	movs	r1, #32
 800aa8e:	187b      	adds	r3, r7, r1
 800aa90:	691a      	ldr	r2, [r3, #16]
 800aa92:	187b      	adds	r3, r7, r1
 800aa94:	68db      	ldr	r3, [r3, #12]
 800aa96:	429a      	cmp	r2, r3
 800aa98:	da00      	bge.n	800aa9c <update_motor+0x22c>
 800aa9a:	e2d9      	b.n	800b050 <update_motor+0x7e0>
		{
			for (int i = motor.old_alpha; i>=motor.alpha;i--){	//application de la rampe
 800aa9c:	187b      	adds	r3, r7, r1
 800aa9e:	691b      	ldr	r3, [r3, #16]
 800aaa0:	60bb      	str	r3, [r7, #8]
 800aaa2:	e0e8      	b.n	800ac76 <update_motor+0x406>
				if (motor.sens == 1)
 800aaa4:	2220      	movs	r2, #32
 800aaa6:	18bb      	adds	r3, r7, r2
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d000      	beq.n	800aab0 <update_motor+0x240>
 800aaae:	e06c      	b.n	800ab8a <update_motor+0x31a>
				{
					__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,i);
 800aab0:	18bb      	adds	r3, r7, r2
 800aab2:	685b      	ldr	r3, [r3, #4]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d104      	bne.n	800aac2 <update_motor+0x252>
 800aab8:	18bb      	adds	r3, r7, r2
 800aaba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aabc:	68ba      	ldr	r2, [r7, #8]
 800aabe:	635a      	str	r2, [r3, #52]	; 0x34
 800aac0:	e02c      	b.n	800ab1c <update_motor+0x2ac>
 800aac2:	2220      	movs	r2, #32
 800aac4:	18bb      	adds	r3, r7, r2
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	2b04      	cmp	r3, #4
 800aaca:	d104      	bne.n	800aad6 <update_motor+0x266>
 800aacc:	18bb      	adds	r3, r7, r2
 800aace:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aad0:	68bb      	ldr	r3, [r7, #8]
 800aad2:	6393      	str	r3, [r2, #56]	; 0x38
 800aad4:	e022      	b.n	800ab1c <update_motor+0x2ac>
 800aad6:	2220      	movs	r2, #32
 800aad8:	18bb      	adds	r3, r7, r2
 800aada:	685b      	ldr	r3, [r3, #4]
 800aadc:	2b08      	cmp	r3, #8
 800aade:	d104      	bne.n	800aaea <update_motor+0x27a>
 800aae0:	18bb      	adds	r3, r7, r2
 800aae2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	63d3      	str	r3, [r2, #60]	; 0x3c
 800aae8:	e018      	b.n	800ab1c <update_motor+0x2ac>
 800aaea:	2220      	movs	r2, #32
 800aaec:	18bb      	adds	r3, r7, r2
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	2b0c      	cmp	r3, #12
 800aaf2:	d104      	bne.n	800aafe <update_motor+0x28e>
 800aaf4:	18bb      	adds	r3, r7, r2
 800aaf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aaf8:	68bb      	ldr	r3, [r7, #8]
 800aafa:	6413      	str	r3, [r2, #64]	; 0x40
 800aafc:	e00e      	b.n	800ab1c <update_motor+0x2ac>
 800aafe:	2220      	movs	r2, #32
 800ab00:	18bb      	adds	r3, r7, r2
 800ab02:	685b      	ldr	r3, [r3, #4]
 800ab04:	2b10      	cmp	r3, #16
 800ab06:	d104      	bne.n	800ab12 <update_motor+0x2a2>
 800ab08:	18bb      	adds	r3, r7, r2
 800ab0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	6593      	str	r3, [r2, #88]	; 0x58
 800ab10:	e004      	b.n	800ab1c <update_motor+0x2ac>
 800ab12:	2320      	movs	r3, #32
 800ab14:	18fb      	adds	r3, r7, r3
 800ab16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	65d3      	str	r3, [r2, #92]	; 0x5c
					__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,0);
 800ab1c:	2220      	movs	r2, #32
 800ab1e:	18bb      	adds	r3, r7, r2
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	d104      	bne.n	800ab30 <update_motor+0x2c0>
 800ab26:	18bb      	adds	r3, r7, r2
 800ab28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	635a      	str	r2, [r3, #52]	; 0x34
 800ab2e:	e02c      	b.n	800ab8a <update_motor+0x31a>
 800ab30:	2220      	movs	r2, #32
 800ab32:	18bb      	adds	r3, r7, r2
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	2b04      	cmp	r3, #4
 800ab38:	d104      	bne.n	800ab44 <update_motor+0x2d4>
 800ab3a:	18bb      	adds	r3, r7, r2
 800ab3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6393      	str	r3, [r2, #56]	; 0x38
 800ab42:	e022      	b.n	800ab8a <update_motor+0x31a>
 800ab44:	2220      	movs	r2, #32
 800ab46:	18bb      	adds	r3, r7, r2
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	2b08      	cmp	r3, #8
 800ab4c:	d104      	bne.n	800ab58 <update_motor+0x2e8>
 800ab4e:	18bb      	adds	r3, r7, r2
 800ab50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab52:	2300      	movs	r3, #0
 800ab54:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ab56:	e018      	b.n	800ab8a <update_motor+0x31a>
 800ab58:	2220      	movs	r2, #32
 800ab5a:	18bb      	adds	r3, r7, r2
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	2b0c      	cmp	r3, #12
 800ab60:	d104      	bne.n	800ab6c <update_motor+0x2fc>
 800ab62:	18bb      	adds	r3, r7, r2
 800ab64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab66:	2300      	movs	r3, #0
 800ab68:	6413      	str	r3, [r2, #64]	; 0x40
 800ab6a:	e00e      	b.n	800ab8a <update_motor+0x31a>
 800ab6c:	2220      	movs	r2, #32
 800ab6e:	18bb      	adds	r3, r7, r2
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b10      	cmp	r3, #16
 800ab74:	d104      	bne.n	800ab80 <update_motor+0x310>
 800ab76:	18bb      	adds	r3, r7, r2
 800ab78:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	6593      	str	r3, [r2, #88]	; 0x58
 800ab7e:	e004      	b.n	800ab8a <update_motor+0x31a>
 800ab80:	2320      	movs	r3, #32
 800ab82:	18fb      	adds	r3, r7, r3
 800ab84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ab86:	2300      	movs	r3, #0
 800ab88:	65d3      	str	r3, [r2, #92]	; 0x5c
				}
				if (motor.sens == 2)
 800ab8a:	2220      	movs	r2, #32
 800ab8c:	18bb      	adds	r3, r7, r2
 800ab8e:	689b      	ldr	r3, [r3, #8]
 800ab90:	2b02      	cmp	r3, #2
 800ab92:	d000      	beq.n	800ab96 <update_motor+0x326>
 800ab94:	e06c      	b.n	800ac70 <update_motor+0x400>
				{
					__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,0);
 800ab96:	18bb      	adds	r3, r7, r2
 800ab98:	685b      	ldr	r3, [r3, #4]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d104      	bne.n	800aba8 <update_motor+0x338>
 800ab9e:	18bb      	adds	r3, r7, r2
 800aba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aba2:	2200      	movs	r2, #0
 800aba4:	635a      	str	r2, [r3, #52]	; 0x34
 800aba6:	e02c      	b.n	800ac02 <update_motor+0x392>
 800aba8:	2220      	movs	r2, #32
 800abaa:	18bb      	adds	r3, r7, r2
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	2b04      	cmp	r3, #4
 800abb0:	d104      	bne.n	800abbc <update_motor+0x34c>
 800abb2:	18bb      	adds	r3, r7, r2
 800abb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abb6:	2300      	movs	r3, #0
 800abb8:	6393      	str	r3, [r2, #56]	; 0x38
 800abba:	e022      	b.n	800ac02 <update_motor+0x392>
 800abbc:	2220      	movs	r2, #32
 800abbe:	18bb      	adds	r3, r7, r2
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	2b08      	cmp	r3, #8
 800abc4:	d104      	bne.n	800abd0 <update_motor+0x360>
 800abc6:	18bb      	adds	r3, r7, r2
 800abc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abca:	2300      	movs	r3, #0
 800abcc:	63d3      	str	r3, [r2, #60]	; 0x3c
 800abce:	e018      	b.n	800ac02 <update_motor+0x392>
 800abd0:	2220      	movs	r2, #32
 800abd2:	18bb      	adds	r3, r7, r2
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	2b0c      	cmp	r3, #12
 800abd8:	d104      	bne.n	800abe4 <update_motor+0x374>
 800abda:	18bb      	adds	r3, r7, r2
 800abdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abde:	2300      	movs	r3, #0
 800abe0:	6413      	str	r3, [r2, #64]	; 0x40
 800abe2:	e00e      	b.n	800ac02 <update_motor+0x392>
 800abe4:	2220      	movs	r2, #32
 800abe6:	18bb      	adds	r3, r7, r2
 800abe8:	685b      	ldr	r3, [r3, #4]
 800abea:	2b10      	cmp	r3, #16
 800abec:	d104      	bne.n	800abf8 <update_motor+0x388>
 800abee:	18bb      	adds	r3, r7, r2
 800abf0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abf2:	2300      	movs	r3, #0
 800abf4:	6593      	str	r3, [r2, #88]	; 0x58
 800abf6:	e004      	b.n	800ac02 <update_motor+0x392>
 800abf8:	2320      	movs	r3, #32
 800abfa:	18fb      	adds	r3, r7, r3
 800abfc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800abfe:	2300      	movs	r3, #0
 800ac00:	65d3      	str	r3, [r2, #92]	; 0x5c
					__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,i);
 800ac02:	2220      	movs	r2, #32
 800ac04:	18bb      	adds	r3, r7, r2
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d104      	bne.n	800ac16 <update_motor+0x3a6>
 800ac0c:	18bb      	adds	r3, r7, r2
 800ac0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac10:	68ba      	ldr	r2, [r7, #8]
 800ac12:	635a      	str	r2, [r3, #52]	; 0x34
 800ac14:	e02c      	b.n	800ac70 <update_motor+0x400>
 800ac16:	2220      	movs	r2, #32
 800ac18:	18bb      	adds	r3, r7, r2
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	2b04      	cmp	r3, #4
 800ac1e:	d104      	bne.n	800ac2a <update_motor+0x3ba>
 800ac20:	18bb      	adds	r3, r7, r2
 800ac22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	6393      	str	r3, [r2, #56]	; 0x38
 800ac28:	e022      	b.n	800ac70 <update_motor+0x400>
 800ac2a:	2220      	movs	r2, #32
 800ac2c:	18bb      	adds	r3, r7, r2
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	2b08      	cmp	r3, #8
 800ac32:	d104      	bne.n	800ac3e <update_motor+0x3ce>
 800ac34:	18bb      	adds	r3, r7, r2
 800ac36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac38:	68bb      	ldr	r3, [r7, #8]
 800ac3a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ac3c:	e018      	b.n	800ac70 <update_motor+0x400>
 800ac3e:	2220      	movs	r2, #32
 800ac40:	18bb      	adds	r3, r7, r2
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2b0c      	cmp	r3, #12
 800ac46:	d104      	bne.n	800ac52 <update_motor+0x3e2>
 800ac48:	18bb      	adds	r3, r7, r2
 800ac4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	6413      	str	r3, [r2, #64]	; 0x40
 800ac50:	e00e      	b.n	800ac70 <update_motor+0x400>
 800ac52:	2220      	movs	r2, #32
 800ac54:	18bb      	adds	r3, r7, r2
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	2b10      	cmp	r3, #16
 800ac5a:	d104      	bne.n	800ac66 <update_motor+0x3f6>
 800ac5c:	18bb      	adds	r3, r7, r2
 800ac5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac60:	68bb      	ldr	r3, [r7, #8]
 800ac62:	6593      	str	r3, [r2, #88]	; 0x58
 800ac64:	e004      	b.n	800ac70 <update_motor+0x400>
 800ac66:	2320      	movs	r3, #32
 800ac68:	18fb      	adds	r3, r7, r3
 800ac6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ac6c:	68bb      	ldr	r3, [r7, #8]
 800ac6e:	65d3      	str	r3, [r2, #92]	; 0x5c
			for (int i = motor.old_alpha; i>=motor.alpha;i--){	//application de la rampe
 800ac70:	68bb      	ldr	r3, [r7, #8]
 800ac72:	3b01      	subs	r3, #1
 800ac74:	60bb      	str	r3, [r7, #8]
 800ac76:	2320      	movs	r3, #32
 800ac78:	18fb      	adds	r3, r7, r3
 800ac7a:	68db      	ldr	r3, [r3, #12]
 800ac7c:	68ba      	ldr	r2, [r7, #8]
 800ac7e:	429a      	cmp	r2, r3
 800ac80:	db00      	blt.n	800ac84 <update_motor+0x414>
 800ac82:	e70f      	b.n	800aaa4 <update_motor+0x234>
 800ac84:	e1e4      	b.n	800b050 <update_motor+0x7e0>
			}
		}
	}

	else{
		for (int i = motor.old_alpha; i>100;i--){	//application de la rampe pour le mettre à l'arret
 800ac86:	2320      	movs	r3, #32
 800ac88:	18fb      	adds	r3, r7, r3
 800ac8a:	691b      	ldr	r3, [r3, #16]
 800ac8c:	607b      	str	r3, [r7, #4]
 800ac8e:	e0e8      	b.n	800ae62 <update_motor+0x5f2>
			if (motor.old_sens == 1)
 800ac90:	2220      	movs	r2, #32
 800ac92:	18bb      	adds	r3, r7, r2
 800ac94:	6a1b      	ldr	r3, [r3, #32]
 800ac96:	2b01      	cmp	r3, #1
 800ac98:	d000      	beq.n	800ac9c <update_motor+0x42c>
 800ac9a:	e06c      	b.n	800ad76 <update_motor+0x506>
			{
				__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,i);
 800ac9c:	18bb      	adds	r3, r7, r2
 800ac9e:	685b      	ldr	r3, [r3, #4]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d104      	bne.n	800acae <update_motor+0x43e>
 800aca4:	18bb      	adds	r3, r7, r2
 800aca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800aca8:	687a      	ldr	r2, [r7, #4]
 800acaa:	635a      	str	r2, [r3, #52]	; 0x34
 800acac:	e02c      	b.n	800ad08 <update_motor+0x498>
 800acae:	2220      	movs	r2, #32
 800acb0:	18bb      	adds	r3, r7, r2
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	2b04      	cmp	r3, #4
 800acb6:	d104      	bne.n	800acc2 <update_motor+0x452>
 800acb8:	18bb      	adds	r3, r7, r2
 800acba:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	6393      	str	r3, [r2, #56]	; 0x38
 800acc0:	e022      	b.n	800ad08 <update_motor+0x498>
 800acc2:	2220      	movs	r2, #32
 800acc4:	18bb      	adds	r3, r7, r2
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	2b08      	cmp	r3, #8
 800acca:	d104      	bne.n	800acd6 <update_motor+0x466>
 800accc:	18bb      	adds	r3, r7, r2
 800acce:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	63d3      	str	r3, [r2, #60]	; 0x3c
 800acd4:	e018      	b.n	800ad08 <update_motor+0x498>
 800acd6:	2220      	movs	r2, #32
 800acd8:	18bb      	adds	r3, r7, r2
 800acda:	685b      	ldr	r3, [r3, #4]
 800acdc:	2b0c      	cmp	r3, #12
 800acde:	d104      	bne.n	800acea <update_motor+0x47a>
 800ace0:	18bb      	adds	r3, r7, r2
 800ace2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	6413      	str	r3, [r2, #64]	; 0x40
 800ace8:	e00e      	b.n	800ad08 <update_motor+0x498>
 800acea:	2220      	movs	r2, #32
 800acec:	18bb      	adds	r3, r7, r2
 800acee:	685b      	ldr	r3, [r3, #4]
 800acf0:	2b10      	cmp	r3, #16
 800acf2:	d104      	bne.n	800acfe <update_motor+0x48e>
 800acf4:	18bb      	adds	r3, r7, r2
 800acf6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	6593      	str	r3, [r2, #88]	; 0x58
 800acfc:	e004      	b.n	800ad08 <update_motor+0x498>
 800acfe:	2320      	movs	r3, #32
 800ad00:	18fb      	adds	r3, r7, r3
 800ad02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	65d3      	str	r3, [r2, #92]	; 0x5c
				__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,0);
 800ad08:	2220      	movs	r2, #32
 800ad0a:	18bb      	adds	r3, r7, r2
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d104      	bne.n	800ad1c <update_motor+0x4ac>
 800ad12:	18bb      	adds	r3, r7, r2
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	2200      	movs	r2, #0
 800ad18:	635a      	str	r2, [r3, #52]	; 0x34
 800ad1a:	e02c      	b.n	800ad76 <update_motor+0x506>
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	18bb      	adds	r3, r7, r2
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	2b04      	cmp	r3, #4
 800ad24:	d104      	bne.n	800ad30 <update_motor+0x4c0>
 800ad26:	18bb      	adds	r3, r7, r2
 800ad28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad2a:	2300      	movs	r3, #0
 800ad2c:	6393      	str	r3, [r2, #56]	; 0x38
 800ad2e:	e022      	b.n	800ad76 <update_motor+0x506>
 800ad30:	2220      	movs	r2, #32
 800ad32:	18bb      	adds	r3, r7, r2
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	2b08      	cmp	r3, #8
 800ad38:	d104      	bne.n	800ad44 <update_motor+0x4d4>
 800ad3a:	18bb      	adds	r3, r7, r2
 800ad3c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad3e:	2300      	movs	r3, #0
 800ad40:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ad42:	e018      	b.n	800ad76 <update_motor+0x506>
 800ad44:	2220      	movs	r2, #32
 800ad46:	18bb      	adds	r3, r7, r2
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	2b0c      	cmp	r3, #12
 800ad4c:	d104      	bne.n	800ad58 <update_motor+0x4e8>
 800ad4e:	18bb      	adds	r3, r7, r2
 800ad50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad52:	2300      	movs	r3, #0
 800ad54:	6413      	str	r3, [r2, #64]	; 0x40
 800ad56:	e00e      	b.n	800ad76 <update_motor+0x506>
 800ad58:	2220      	movs	r2, #32
 800ad5a:	18bb      	adds	r3, r7, r2
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	2b10      	cmp	r3, #16
 800ad60:	d104      	bne.n	800ad6c <update_motor+0x4fc>
 800ad62:	18bb      	adds	r3, r7, r2
 800ad64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad66:	2300      	movs	r3, #0
 800ad68:	6593      	str	r3, [r2, #88]	; 0x58
 800ad6a:	e004      	b.n	800ad76 <update_motor+0x506>
 800ad6c:	2320      	movs	r3, #32
 800ad6e:	18fb      	adds	r3, r7, r3
 800ad70:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ad72:	2300      	movs	r3, #0
 800ad74:	65d3      	str	r3, [r2, #92]	; 0x5c
			}
			if (motor.old_sens == 2)
 800ad76:	2220      	movs	r2, #32
 800ad78:	18bb      	adds	r3, r7, r2
 800ad7a:	6a1b      	ldr	r3, [r3, #32]
 800ad7c:	2b02      	cmp	r3, #2
 800ad7e:	d000      	beq.n	800ad82 <update_motor+0x512>
 800ad80:	e06c      	b.n	800ae5c <update_motor+0x5ec>
			{
				__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,0);
 800ad82:	18bb      	adds	r3, r7, r2
 800ad84:	685b      	ldr	r3, [r3, #4]
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d104      	bne.n	800ad94 <update_motor+0x524>
 800ad8a:	18bb      	adds	r3, r7, r2
 800ad8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ad8e:	2200      	movs	r2, #0
 800ad90:	635a      	str	r2, [r3, #52]	; 0x34
 800ad92:	e02c      	b.n	800adee <update_motor+0x57e>
 800ad94:	2220      	movs	r2, #32
 800ad96:	18bb      	adds	r3, r7, r2
 800ad98:	685b      	ldr	r3, [r3, #4]
 800ad9a:	2b04      	cmp	r3, #4
 800ad9c:	d104      	bne.n	800ada8 <update_motor+0x538>
 800ad9e:	18bb      	adds	r3, r7, r2
 800ada0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ada2:	2300      	movs	r3, #0
 800ada4:	6393      	str	r3, [r2, #56]	; 0x38
 800ada6:	e022      	b.n	800adee <update_motor+0x57e>
 800ada8:	2220      	movs	r2, #32
 800adaa:	18bb      	adds	r3, r7, r2
 800adac:	685b      	ldr	r3, [r3, #4]
 800adae:	2b08      	cmp	r3, #8
 800adb0:	d104      	bne.n	800adbc <update_motor+0x54c>
 800adb2:	18bb      	adds	r3, r7, r2
 800adb4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adb6:	2300      	movs	r3, #0
 800adb8:	63d3      	str	r3, [r2, #60]	; 0x3c
 800adba:	e018      	b.n	800adee <update_motor+0x57e>
 800adbc:	2220      	movs	r2, #32
 800adbe:	18bb      	adds	r3, r7, r2
 800adc0:	685b      	ldr	r3, [r3, #4]
 800adc2:	2b0c      	cmp	r3, #12
 800adc4:	d104      	bne.n	800add0 <update_motor+0x560>
 800adc6:	18bb      	adds	r3, r7, r2
 800adc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adca:	2300      	movs	r3, #0
 800adcc:	6413      	str	r3, [r2, #64]	; 0x40
 800adce:	e00e      	b.n	800adee <update_motor+0x57e>
 800add0:	2220      	movs	r2, #32
 800add2:	18bb      	adds	r3, r7, r2
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	2b10      	cmp	r3, #16
 800add8:	d104      	bne.n	800ade4 <update_motor+0x574>
 800adda:	18bb      	adds	r3, r7, r2
 800addc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adde:	2300      	movs	r3, #0
 800ade0:	6593      	str	r3, [r2, #88]	; 0x58
 800ade2:	e004      	b.n	800adee <update_motor+0x57e>
 800ade4:	2320      	movs	r3, #32
 800ade6:	18fb      	adds	r3, r7, r3
 800ade8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800adea:	2300      	movs	r3, #0
 800adec:	65d3      	str	r3, [r2, #92]	; 0x5c
				__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,i);
 800adee:	2220      	movs	r2, #32
 800adf0:	18bb      	adds	r3, r7, r2
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d104      	bne.n	800ae02 <update_motor+0x592>
 800adf8:	18bb      	adds	r3, r7, r2
 800adfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	635a      	str	r2, [r3, #52]	; 0x34
 800ae00:	e02c      	b.n	800ae5c <update_motor+0x5ec>
 800ae02:	2220      	movs	r2, #32
 800ae04:	18bb      	adds	r3, r7, r2
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	2b04      	cmp	r3, #4
 800ae0a:	d104      	bne.n	800ae16 <update_motor+0x5a6>
 800ae0c:	18bb      	adds	r3, r7, r2
 800ae0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	6393      	str	r3, [r2, #56]	; 0x38
 800ae14:	e022      	b.n	800ae5c <update_motor+0x5ec>
 800ae16:	2220      	movs	r2, #32
 800ae18:	18bb      	adds	r3, r7, r2
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2b08      	cmp	r3, #8
 800ae1e:	d104      	bne.n	800ae2a <update_motor+0x5ba>
 800ae20:	18bb      	adds	r3, r7, r2
 800ae22:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	63d3      	str	r3, [r2, #60]	; 0x3c
 800ae28:	e018      	b.n	800ae5c <update_motor+0x5ec>
 800ae2a:	2220      	movs	r2, #32
 800ae2c:	18bb      	adds	r3, r7, r2
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	2b0c      	cmp	r3, #12
 800ae32:	d104      	bne.n	800ae3e <update_motor+0x5ce>
 800ae34:	18bb      	adds	r3, r7, r2
 800ae36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6413      	str	r3, [r2, #64]	; 0x40
 800ae3c:	e00e      	b.n	800ae5c <update_motor+0x5ec>
 800ae3e:	2220      	movs	r2, #32
 800ae40:	18bb      	adds	r3, r7, r2
 800ae42:	681b      	ldr	r3, [r3, #0]
 800ae44:	2b10      	cmp	r3, #16
 800ae46:	d104      	bne.n	800ae52 <update_motor+0x5e2>
 800ae48:	18bb      	adds	r3, r7, r2
 800ae4a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6593      	str	r3, [r2, #88]	; 0x58
 800ae50:	e004      	b.n	800ae5c <update_motor+0x5ec>
 800ae52:	2320      	movs	r3, #32
 800ae54:	18fb      	adds	r3, r7, r3
 800ae56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	65d3      	str	r3, [r2, #92]	; 0x5c
		for (int i = motor.old_alpha; i>100;i--){	//application de la rampe pour le mettre à l'arret
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	3b01      	subs	r3, #1
 800ae60:	607b      	str	r3, [r7, #4]
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2b64      	cmp	r3, #100	; 0x64
 800ae66:	dd00      	ble.n	800ae6a <update_motor+0x5fa>
 800ae68:	e712      	b.n	800ac90 <update_motor+0x420>
			}
		}

		for (int i = 100; i<=motor.alpha;i++){	//application de la rampe pour le démarrer dans l'autre sens
 800ae6a:	2364      	movs	r3, #100	; 0x64
 800ae6c:	603b      	str	r3, [r7, #0]
 800ae6e:	e0e8      	b.n	800b042 <update_motor+0x7d2>
			if (motor.sens == 1)
 800ae70:	2220      	movs	r2, #32
 800ae72:	18bb      	adds	r3, r7, r2
 800ae74:	689b      	ldr	r3, [r3, #8]
 800ae76:	2b01      	cmp	r3, #1
 800ae78:	d000      	beq.n	800ae7c <update_motor+0x60c>
 800ae7a:	e06c      	b.n	800af56 <update_motor+0x6e6>
			{
				__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,i);
 800ae7c:	18bb      	adds	r3, r7, r2
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	2b00      	cmp	r3, #0
 800ae82:	d104      	bne.n	800ae8e <update_motor+0x61e>
 800ae84:	18bb      	adds	r3, r7, r2
 800ae86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ae88:	683a      	ldr	r2, [r7, #0]
 800ae8a:	635a      	str	r2, [r3, #52]	; 0x34
 800ae8c:	e02c      	b.n	800aee8 <update_motor+0x678>
 800ae8e:	2220      	movs	r2, #32
 800ae90:	18bb      	adds	r3, r7, r2
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	2b04      	cmp	r3, #4
 800ae96:	d104      	bne.n	800aea2 <update_motor+0x632>
 800ae98:	18bb      	adds	r3, r7, r2
 800ae9a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	6393      	str	r3, [r2, #56]	; 0x38
 800aea0:	e022      	b.n	800aee8 <update_motor+0x678>
 800aea2:	2220      	movs	r2, #32
 800aea4:	18bb      	adds	r3, r7, r2
 800aea6:	685b      	ldr	r3, [r3, #4]
 800aea8:	2b08      	cmp	r3, #8
 800aeaa:	d104      	bne.n	800aeb6 <update_motor+0x646>
 800aeac:	18bb      	adds	r3, r7, r2
 800aeae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	63d3      	str	r3, [r2, #60]	; 0x3c
 800aeb4:	e018      	b.n	800aee8 <update_motor+0x678>
 800aeb6:	2220      	movs	r2, #32
 800aeb8:	18bb      	adds	r3, r7, r2
 800aeba:	685b      	ldr	r3, [r3, #4]
 800aebc:	2b0c      	cmp	r3, #12
 800aebe:	d104      	bne.n	800aeca <update_motor+0x65a>
 800aec0:	18bb      	adds	r3, r7, r2
 800aec2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aec4:	683b      	ldr	r3, [r7, #0]
 800aec6:	6413      	str	r3, [r2, #64]	; 0x40
 800aec8:	e00e      	b.n	800aee8 <update_motor+0x678>
 800aeca:	2220      	movs	r2, #32
 800aecc:	18bb      	adds	r3, r7, r2
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	2b10      	cmp	r3, #16
 800aed2:	d104      	bne.n	800aede <update_motor+0x66e>
 800aed4:	18bb      	adds	r3, r7, r2
 800aed6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	6593      	str	r3, [r2, #88]	; 0x58
 800aedc:	e004      	b.n	800aee8 <update_motor+0x678>
 800aede:	2320      	movs	r3, #32
 800aee0:	18fb      	adds	r3, r7, r3
 800aee2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800aee4:	683b      	ldr	r3, [r7, #0]
 800aee6:	65d3      	str	r3, [r2, #92]	; 0x5c
				__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,0);
 800aee8:	2220      	movs	r2, #32
 800aeea:	18bb      	adds	r3, r7, r2
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	d104      	bne.n	800aefc <update_motor+0x68c>
 800aef2:	18bb      	adds	r3, r7, r2
 800aef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef6:	2200      	movs	r2, #0
 800aef8:	635a      	str	r2, [r3, #52]	; 0x34
 800aefa:	e02c      	b.n	800af56 <update_motor+0x6e6>
 800aefc:	2220      	movs	r2, #32
 800aefe:	18bb      	adds	r3, r7, r2
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	2b04      	cmp	r3, #4
 800af04:	d104      	bne.n	800af10 <update_motor+0x6a0>
 800af06:	18bb      	adds	r3, r7, r2
 800af08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af0a:	2300      	movs	r3, #0
 800af0c:	6393      	str	r3, [r2, #56]	; 0x38
 800af0e:	e022      	b.n	800af56 <update_motor+0x6e6>
 800af10:	2220      	movs	r2, #32
 800af12:	18bb      	adds	r3, r7, r2
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	2b08      	cmp	r3, #8
 800af18:	d104      	bne.n	800af24 <update_motor+0x6b4>
 800af1a:	18bb      	adds	r3, r7, r2
 800af1c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af1e:	2300      	movs	r3, #0
 800af20:	63d3      	str	r3, [r2, #60]	; 0x3c
 800af22:	e018      	b.n	800af56 <update_motor+0x6e6>
 800af24:	2220      	movs	r2, #32
 800af26:	18bb      	adds	r3, r7, r2
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	2b0c      	cmp	r3, #12
 800af2c:	d104      	bne.n	800af38 <update_motor+0x6c8>
 800af2e:	18bb      	adds	r3, r7, r2
 800af30:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af32:	2300      	movs	r3, #0
 800af34:	6413      	str	r3, [r2, #64]	; 0x40
 800af36:	e00e      	b.n	800af56 <update_motor+0x6e6>
 800af38:	2220      	movs	r2, #32
 800af3a:	18bb      	adds	r3, r7, r2
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	2b10      	cmp	r3, #16
 800af40:	d104      	bne.n	800af4c <update_motor+0x6dc>
 800af42:	18bb      	adds	r3, r7, r2
 800af44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af46:	2300      	movs	r3, #0
 800af48:	6593      	str	r3, [r2, #88]	; 0x58
 800af4a:	e004      	b.n	800af56 <update_motor+0x6e6>
 800af4c:	2320      	movs	r3, #32
 800af4e:	18fb      	adds	r3, r7, r3
 800af50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af52:	2300      	movs	r3, #0
 800af54:	65d3      	str	r3, [r2, #92]	; 0x5c
			}
			if (motor.sens == 2)
 800af56:	2220      	movs	r2, #32
 800af58:	18bb      	adds	r3, r7, r2
 800af5a:	689b      	ldr	r3, [r3, #8]
 800af5c:	2b02      	cmp	r3, #2
 800af5e:	d000      	beq.n	800af62 <update_motor+0x6f2>
 800af60:	e06c      	b.n	800b03c <update_motor+0x7cc>
			{
				__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,0);
 800af62:	18bb      	adds	r3, r7, r2
 800af64:	685b      	ldr	r3, [r3, #4]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d104      	bne.n	800af74 <update_motor+0x704>
 800af6a:	18bb      	adds	r3, r7, r2
 800af6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800af6e:	2200      	movs	r2, #0
 800af70:	635a      	str	r2, [r3, #52]	; 0x34
 800af72:	e02c      	b.n	800afce <update_motor+0x75e>
 800af74:	2220      	movs	r2, #32
 800af76:	18bb      	adds	r3, r7, r2
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	2b04      	cmp	r3, #4
 800af7c:	d104      	bne.n	800af88 <update_motor+0x718>
 800af7e:	18bb      	adds	r3, r7, r2
 800af80:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af82:	2300      	movs	r3, #0
 800af84:	6393      	str	r3, [r2, #56]	; 0x38
 800af86:	e022      	b.n	800afce <update_motor+0x75e>
 800af88:	2220      	movs	r2, #32
 800af8a:	18bb      	adds	r3, r7, r2
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	2b08      	cmp	r3, #8
 800af90:	d104      	bne.n	800af9c <update_motor+0x72c>
 800af92:	18bb      	adds	r3, r7, r2
 800af94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800af96:	2300      	movs	r3, #0
 800af98:	63d3      	str	r3, [r2, #60]	; 0x3c
 800af9a:	e018      	b.n	800afce <update_motor+0x75e>
 800af9c:	2220      	movs	r2, #32
 800af9e:	18bb      	adds	r3, r7, r2
 800afa0:	685b      	ldr	r3, [r3, #4]
 800afa2:	2b0c      	cmp	r3, #12
 800afa4:	d104      	bne.n	800afb0 <update_motor+0x740>
 800afa6:	18bb      	adds	r3, r7, r2
 800afa8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afaa:	2300      	movs	r3, #0
 800afac:	6413      	str	r3, [r2, #64]	; 0x40
 800afae:	e00e      	b.n	800afce <update_motor+0x75e>
 800afb0:	2220      	movs	r2, #32
 800afb2:	18bb      	adds	r3, r7, r2
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	2b10      	cmp	r3, #16
 800afb8:	d104      	bne.n	800afc4 <update_motor+0x754>
 800afba:	18bb      	adds	r3, r7, r2
 800afbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afbe:	2300      	movs	r3, #0
 800afc0:	6593      	str	r3, [r2, #88]	; 0x58
 800afc2:	e004      	b.n	800afce <update_motor+0x75e>
 800afc4:	2320      	movs	r3, #32
 800afc6:	18fb      	adds	r3, r7, r3
 800afc8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800afca:	2300      	movs	r3, #0
 800afcc:	65d3      	str	r3, [r2, #92]	; 0x5c
				__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,i);
 800afce:	2220      	movs	r2, #32
 800afd0:	18bb      	adds	r3, r7, r2
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d104      	bne.n	800afe2 <update_motor+0x772>
 800afd8:	18bb      	adds	r3, r7, r2
 800afda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800afdc:	683a      	ldr	r2, [r7, #0]
 800afde:	635a      	str	r2, [r3, #52]	; 0x34
 800afe0:	e02c      	b.n	800b03c <update_motor+0x7cc>
 800afe2:	2220      	movs	r2, #32
 800afe4:	18bb      	adds	r3, r7, r2
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	2b04      	cmp	r3, #4
 800afea:	d104      	bne.n	800aff6 <update_motor+0x786>
 800afec:	18bb      	adds	r3, r7, r2
 800afee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800aff0:	683b      	ldr	r3, [r7, #0]
 800aff2:	6393      	str	r3, [r2, #56]	; 0x38
 800aff4:	e022      	b.n	800b03c <update_motor+0x7cc>
 800aff6:	2220      	movs	r2, #32
 800aff8:	18bb      	adds	r3, r7, r2
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	2b08      	cmp	r3, #8
 800affe:	d104      	bne.n	800b00a <update_motor+0x79a>
 800b000:	18bb      	adds	r3, r7, r2
 800b002:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b004:	683b      	ldr	r3, [r7, #0]
 800b006:	63d3      	str	r3, [r2, #60]	; 0x3c
 800b008:	e018      	b.n	800b03c <update_motor+0x7cc>
 800b00a:	2220      	movs	r2, #32
 800b00c:	18bb      	adds	r3, r7, r2
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	2b0c      	cmp	r3, #12
 800b012:	d104      	bne.n	800b01e <update_motor+0x7ae>
 800b014:	18bb      	adds	r3, r7, r2
 800b016:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	6413      	str	r3, [r2, #64]	; 0x40
 800b01c:	e00e      	b.n	800b03c <update_motor+0x7cc>
 800b01e:	2220      	movs	r2, #32
 800b020:	18bb      	adds	r3, r7, r2
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	2b10      	cmp	r3, #16
 800b026:	d104      	bne.n	800b032 <update_motor+0x7c2>
 800b028:	18bb      	adds	r3, r7, r2
 800b02a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b02c:	683b      	ldr	r3, [r7, #0]
 800b02e:	6593      	str	r3, [r2, #88]	; 0x58
 800b030:	e004      	b.n	800b03c <update_motor+0x7cc>
 800b032:	2320      	movs	r3, #32
 800b034:	18fb      	adds	r3, r7, r3
 800b036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b038:	683b      	ldr	r3, [r7, #0]
 800b03a:	65d3      	str	r3, [r2, #92]	; 0x5c
		for (int i = 100; i<=motor.alpha;i++){	//application de la rampe pour le démarrer dans l'autre sens
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	3301      	adds	r3, #1
 800b040:	603b      	str	r3, [r7, #0]
 800b042:	2320      	movs	r3, #32
 800b044:	18fb      	adds	r3, r7, r3
 800b046:	68db      	ldr	r3, [r3, #12]
 800b048:	683a      	ldr	r2, [r7, #0]
 800b04a:	429a      	cmp	r2, r3
 800b04c:	dc00      	bgt.n	800b050 <update_motor+0x7e0>
 800b04e:	e70f      	b.n	800ae70 <update_motor+0x600>

	}



	motor.old_alpha = motor.alpha;	//permet de stocker l'ancien alpha pour réaliser la futur rampe
 800b050:	2120      	movs	r1, #32
 800b052:	187b      	adds	r3, r7, r1
 800b054:	68da      	ldr	r2, [r3, #12]
 800b056:	187b      	adds	r3, r7, r1
 800b058:	611a      	str	r2, [r3, #16]
}
 800b05a:	46c0      	nop			; (mov r8, r8)
 800b05c:	46bd      	mov	sp, r7
 800b05e:	b004      	add	sp, #16
 800b060:	bcb0      	pop	{r4, r5, r7}
 800b062:	bc08      	pop	{r3}
 800b064:	b004      	add	sp, #16
 800b066:	4718      	bx	r3

0800b068 <codeur_init>:
 */

#include "sensor.h"


void codeur_init(Codeur_HandleTypeDef *hcodeur, TIM_HandleTypeDef *htimEncodeur, int frequency){
 800b068:	b580      	push	{r7, lr}
 800b06a:	b084      	sub	sp, #16
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	60b9      	str	r1, [r7, #8]
 800b072:	607a      	str	r2, [r7, #4]
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 800b074:	4b0c      	ldr	r3, [pc, #48]	; (800b0a8 <codeur_init+0x40>)
 800b076:	213c      	movs	r1, #60	; 0x3c
 800b078:	0018      	movs	r0, r3
 800b07a:	f7fa f87d 	bl	8005178 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 800b07e:	4b0b      	ldr	r3, [pc, #44]	; (800b0ac <codeur_init+0x44>)
 800b080:	213c      	movs	r1, #60	; 0x3c
 800b082:	0018      	movs	r0, r3
 800b084:	f7fa f878 	bl	8005178 <HAL_TIM_Encoder_Start_IT>
	hcodeur->htimEncodeur = htimEncodeur;
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	68ba      	ldr	r2, [r7, #8]
 800b08c:	601a      	str	r2, [r3, #0]
	hcodeur->frequency = frequency;
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start(hcodeur->htimEncodeur);
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	0018      	movs	r0, r3
 800b09a:	f7f9 fd59 	bl	8004b50 <HAL_TIM_Base_Start>
}
 800b09e:	46c0      	nop			; (mov r8, r8)
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	b004      	add	sp, #16
 800b0a4:	bd80      	pop	{r7, pc}
 800b0a6:	46c0      	nop			; (mov r8, r8)
 800b0a8:	20003434 	.word	0x20003434
 800b0ac:	200033e8 	.word	0x200033e8

0800b0b0 <std>:
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	b510      	push	{r4, lr}
 800b0b4:	0004      	movs	r4, r0
 800b0b6:	6003      	str	r3, [r0, #0]
 800b0b8:	6043      	str	r3, [r0, #4]
 800b0ba:	6083      	str	r3, [r0, #8]
 800b0bc:	8181      	strh	r1, [r0, #12]
 800b0be:	6643      	str	r3, [r0, #100]	; 0x64
 800b0c0:	0019      	movs	r1, r3
 800b0c2:	81c2      	strh	r2, [r0, #14]
 800b0c4:	6103      	str	r3, [r0, #16]
 800b0c6:	6143      	str	r3, [r0, #20]
 800b0c8:	6183      	str	r3, [r0, #24]
 800b0ca:	2208      	movs	r2, #8
 800b0cc:	305c      	adds	r0, #92	; 0x5c
 800b0ce:	f000 fa37 	bl	800b540 <memset>
 800b0d2:	4b05      	ldr	r3, [pc, #20]	; (800b0e8 <std+0x38>)
 800b0d4:	6224      	str	r4, [r4, #32]
 800b0d6:	6263      	str	r3, [r4, #36]	; 0x24
 800b0d8:	4b04      	ldr	r3, [pc, #16]	; (800b0ec <std+0x3c>)
 800b0da:	62a3      	str	r3, [r4, #40]	; 0x28
 800b0dc:	4b04      	ldr	r3, [pc, #16]	; (800b0f0 <std+0x40>)
 800b0de:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b0e0:	4b04      	ldr	r3, [pc, #16]	; (800b0f4 <std+0x44>)
 800b0e2:	6323      	str	r3, [r4, #48]	; 0x30
 800b0e4:	bd10      	pop	{r4, pc}
 800b0e6:	46c0      	nop			; (mov r8, r8)
 800b0e8:	0800b35d 	.word	0x0800b35d
 800b0ec:	0800b385 	.word	0x0800b385
 800b0f0:	0800b3bd 	.word	0x0800b3bd
 800b0f4:	0800b3e9 	.word	0x0800b3e9

0800b0f8 <stdio_exit_handler>:
 800b0f8:	b510      	push	{r4, lr}
 800b0fa:	4a03      	ldr	r2, [pc, #12]	; (800b108 <stdio_exit_handler+0x10>)
 800b0fc:	4903      	ldr	r1, [pc, #12]	; (800b10c <stdio_exit_handler+0x14>)
 800b0fe:	4804      	ldr	r0, [pc, #16]	; (800b110 <stdio_exit_handler+0x18>)
 800b100:	f000 f86c 	bl	800b1dc <_fwalk_sglue>
 800b104:	bd10      	pop	{r4, pc}
 800b106:	46c0      	nop			; (mov r8, r8)
 800b108:	20000014 	.word	0x20000014
 800b10c:	0800c1b5 	.word	0x0800c1b5
 800b110:	20000020 	.word	0x20000020

0800b114 <cleanup_stdio>:
 800b114:	6841      	ldr	r1, [r0, #4]
 800b116:	4b0b      	ldr	r3, [pc, #44]	; (800b144 <cleanup_stdio+0x30>)
 800b118:	b510      	push	{r4, lr}
 800b11a:	0004      	movs	r4, r0
 800b11c:	4299      	cmp	r1, r3
 800b11e:	d001      	beq.n	800b124 <cleanup_stdio+0x10>
 800b120:	f001 f848 	bl	800c1b4 <_fflush_r>
 800b124:	68a1      	ldr	r1, [r4, #8]
 800b126:	4b08      	ldr	r3, [pc, #32]	; (800b148 <cleanup_stdio+0x34>)
 800b128:	4299      	cmp	r1, r3
 800b12a:	d002      	beq.n	800b132 <cleanup_stdio+0x1e>
 800b12c:	0020      	movs	r0, r4
 800b12e:	f001 f841 	bl	800c1b4 <_fflush_r>
 800b132:	68e1      	ldr	r1, [r4, #12]
 800b134:	4b05      	ldr	r3, [pc, #20]	; (800b14c <cleanup_stdio+0x38>)
 800b136:	4299      	cmp	r1, r3
 800b138:	d002      	beq.n	800b140 <cleanup_stdio+0x2c>
 800b13a:	0020      	movs	r0, r4
 800b13c:	f001 f83a 	bl	800c1b4 <_fflush_r>
 800b140:	bd10      	pop	{r4, pc}
 800b142:	46c0      	nop			; (mov r8, r8)
 800b144:	20008704 	.word	0x20008704
 800b148:	2000876c 	.word	0x2000876c
 800b14c:	200087d4 	.word	0x200087d4

0800b150 <global_stdio_init.part.0>:
 800b150:	b510      	push	{r4, lr}
 800b152:	4b09      	ldr	r3, [pc, #36]	; (800b178 <global_stdio_init.part.0+0x28>)
 800b154:	4a09      	ldr	r2, [pc, #36]	; (800b17c <global_stdio_init.part.0+0x2c>)
 800b156:	2104      	movs	r1, #4
 800b158:	601a      	str	r2, [r3, #0]
 800b15a:	4809      	ldr	r0, [pc, #36]	; (800b180 <global_stdio_init.part.0+0x30>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	f7ff ffa7 	bl	800b0b0 <std>
 800b162:	2201      	movs	r2, #1
 800b164:	2109      	movs	r1, #9
 800b166:	4807      	ldr	r0, [pc, #28]	; (800b184 <global_stdio_init.part.0+0x34>)
 800b168:	f7ff ffa2 	bl	800b0b0 <std>
 800b16c:	2202      	movs	r2, #2
 800b16e:	2112      	movs	r1, #18
 800b170:	4805      	ldr	r0, [pc, #20]	; (800b188 <global_stdio_init.part.0+0x38>)
 800b172:	f7ff ff9d 	bl	800b0b0 <std>
 800b176:	bd10      	pop	{r4, pc}
 800b178:	2000883c 	.word	0x2000883c
 800b17c:	0800b0f9 	.word	0x0800b0f9
 800b180:	20008704 	.word	0x20008704
 800b184:	2000876c 	.word	0x2000876c
 800b188:	200087d4 	.word	0x200087d4

0800b18c <__sfp_lock_acquire>:
 800b18c:	b510      	push	{r4, lr}
 800b18e:	4802      	ldr	r0, [pc, #8]	; (800b198 <__sfp_lock_acquire+0xc>)
 800b190:	f000 fa56 	bl	800b640 <__retarget_lock_acquire_recursive>
 800b194:	bd10      	pop	{r4, pc}
 800b196:	46c0      	nop			; (mov r8, r8)
 800b198:	20008845 	.word	0x20008845

0800b19c <__sfp_lock_release>:
 800b19c:	b510      	push	{r4, lr}
 800b19e:	4802      	ldr	r0, [pc, #8]	; (800b1a8 <__sfp_lock_release+0xc>)
 800b1a0:	f000 fa4f 	bl	800b642 <__retarget_lock_release_recursive>
 800b1a4:	bd10      	pop	{r4, pc}
 800b1a6:	46c0      	nop			; (mov r8, r8)
 800b1a8:	20008845 	.word	0x20008845

0800b1ac <__sinit>:
 800b1ac:	b510      	push	{r4, lr}
 800b1ae:	0004      	movs	r4, r0
 800b1b0:	f7ff ffec 	bl	800b18c <__sfp_lock_acquire>
 800b1b4:	6a23      	ldr	r3, [r4, #32]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d002      	beq.n	800b1c0 <__sinit+0x14>
 800b1ba:	f7ff ffef 	bl	800b19c <__sfp_lock_release>
 800b1be:	bd10      	pop	{r4, pc}
 800b1c0:	4b04      	ldr	r3, [pc, #16]	; (800b1d4 <__sinit+0x28>)
 800b1c2:	6223      	str	r3, [r4, #32]
 800b1c4:	4b04      	ldr	r3, [pc, #16]	; (800b1d8 <__sinit+0x2c>)
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d1f6      	bne.n	800b1ba <__sinit+0xe>
 800b1cc:	f7ff ffc0 	bl	800b150 <global_stdio_init.part.0>
 800b1d0:	e7f3      	b.n	800b1ba <__sinit+0xe>
 800b1d2:	46c0      	nop			; (mov r8, r8)
 800b1d4:	0800b115 	.word	0x0800b115
 800b1d8:	2000883c 	.word	0x2000883c

0800b1dc <_fwalk_sglue>:
 800b1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b1de:	0014      	movs	r4, r2
 800b1e0:	2600      	movs	r6, #0
 800b1e2:	9000      	str	r0, [sp, #0]
 800b1e4:	9101      	str	r1, [sp, #4]
 800b1e6:	68a5      	ldr	r5, [r4, #8]
 800b1e8:	6867      	ldr	r7, [r4, #4]
 800b1ea:	3f01      	subs	r7, #1
 800b1ec:	d504      	bpl.n	800b1f8 <_fwalk_sglue+0x1c>
 800b1ee:	6824      	ldr	r4, [r4, #0]
 800b1f0:	2c00      	cmp	r4, #0
 800b1f2:	d1f8      	bne.n	800b1e6 <_fwalk_sglue+0xa>
 800b1f4:	0030      	movs	r0, r6
 800b1f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b1f8:	89ab      	ldrh	r3, [r5, #12]
 800b1fa:	2b01      	cmp	r3, #1
 800b1fc:	d908      	bls.n	800b210 <_fwalk_sglue+0x34>
 800b1fe:	220e      	movs	r2, #14
 800b200:	5eab      	ldrsh	r3, [r5, r2]
 800b202:	3301      	adds	r3, #1
 800b204:	d004      	beq.n	800b210 <_fwalk_sglue+0x34>
 800b206:	0029      	movs	r1, r5
 800b208:	9800      	ldr	r0, [sp, #0]
 800b20a:	9b01      	ldr	r3, [sp, #4]
 800b20c:	4798      	blx	r3
 800b20e:	4306      	orrs	r6, r0
 800b210:	3568      	adds	r5, #104	; 0x68
 800b212:	e7ea      	b.n	800b1ea <_fwalk_sglue+0xe>

0800b214 <iprintf>:
 800b214:	b40f      	push	{r0, r1, r2, r3}
 800b216:	b507      	push	{r0, r1, r2, lr}
 800b218:	4905      	ldr	r1, [pc, #20]	; (800b230 <iprintf+0x1c>)
 800b21a:	ab04      	add	r3, sp, #16
 800b21c:	6808      	ldr	r0, [r1, #0]
 800b21e:	cb04      	ldmia	r3!, {r2}
 800b220:	6881      	ldr	r1, [r0, #8]
 800b222:	9301      	str	r3, [sp, #4]
 800b224:	f000 fca0 	bl	800bb68 <_vfiprintf_r>
 800b228:	b003      	add	sp, #12
 800b22a:	bc08      	pop	{r3}
 800b22c:	b004      	add	sp, #16
 800b22e:	4718      	bx	r3
 800b230:	2000006c 	.word	0x2000006c

0800b234 <_puts_r>:
 800b234:	6a03      	ldr	r3, [r0, #32]
 800b236:	b570      	push	{r4, r5, r6, lr}
 800b238:	0005      	movs	r5, r0
 800b23a:	000e      	movs	r6, r1
 800b23c:	6884      	ldr	r4, [r0, #8]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d101      	bne.n	800b246 <_puts_r+0x12>
 800b242:	f7ff ffb3 	bl	800b1ac <__sinit>
 800b246:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b248:	07db      	lsls	r3, r3, #31
 800b24a:	d405      	bmi.n	800b258 <_puts_r+0x24>
 800b24c:	89a3      	ldrh	r3, [r4, #12]
 800b24e:	059b      	lsls	r3, r3, #22
 800b250:	d402      	bmi.n	800b258 <_puts_r+0x24>
 800b252:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b254:	f000 f9f4 	bl	800b640 <__retarget_lock_acquire_recursive>
 800b258:	89a3      	ldrh	r3, [r4, #12]
 800b25a:	071b      	lsls	r3, r3, #28
 800b25c:	d502      	bpl.n	800b264 <_puts_r+0x30>
 800b25e:	6923      	ldr	r3, [r4, #16]
 800b260:	2b00      	cmp	r3, #0
 800b262:	d11f      	bne.n	800b2a4 <_puts_r+0x70>
 800b264:	0021      	movs	r1, r4
 800b266:	0028      	movs	r0, r5
 800b268:	f000 f906 	bl	800b478 <__swsetup_r>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d019      	beq.n	800b2a4 <_puts_r+0x70>
 800b270:	2501      	movs	r5, #1
 800b272:	426d      	negs	r5, r5
 800b274:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b276:	07db      	lsls	r3, r3, #31
 800b278:	d405      	bmi.n	800b286 <_puts_r+0x52>
 800b27a:	89a3      	ldrh	r3, [r4, #12]
 800b27c:	059b      	lsls	r3, r3, #22
 800b27e:	d402      	bmi.n	800b286 <_puts_r+0x52>
 800b280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b282:	f000 f9de 	bl	800b642 <__retarget_lock_release_recursive>
 800b286:	0028      	movs	r0, r5
 800b288:	bd70      	pop	{r4, r5, r6, pc}
 800b28a:	3601      	adds	r6, #1
 800b28c:	60a3      	str	r3, [r4, #8]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	da04      	bge.n	800b29c <_puts_r+0x68>
 800b292:	69a2      	ldr	r2, [r4, #24]
 800b294:	429a      	cmp	r2, r3
 800b296:	dc16      	bgt.n	800b2c6 <_puts_r+0x92>
 800b298:	290a      	cmp	r1, #10
 800b29a:	d014      	beq.n	800b2c6 <_puts_r+0x92>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	1c5a      	adds	r2, r3, #1
 800b2a0:	6022      	str	r2, [r4, #0]
 800b2a2:	7019      	strb	r1, [r3, #0]
 800b2a4:	68a3      	ldr	r3, [r4, #8]
 800b2a6:	7831      	ldrb	r1, [r6, #0]
 800b2a8:	3b01      	subs	r3, #1
 800b2aa:	2900      	cmp	r1, #0
 800b2ac:	d1ed      	bne.n	800b28a <_puts_r+0x56>
 800b2ae:	60a3      	str	r3, [r4, #8]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	da0f      	bge.n	800b2d4 <_puts_r+0xa0>
 800b2b4:	0028      	movs	r0, r5
 800b2b6:	0022      	movs	r2, r4
 800b2b8:	310a      	adds	r1, #10
 800b2ba:	f000 f89b 	bl	800b3f4 <__swbuf_r>
 800b2be:	250a      	movs	r5, #10
 800b2c0:	3001      	adds	r0, #1
 800b2c2:	d1d7      	bne.n	800b274 <_puts_r+0x40>
 800b2c4:	e7d4      	b.n	800b270 <_puts_r+0x3c>
 800b2c6:	0022      	movs	r2, r4
 800b2c8:	0028      	movs	r0, r5
 800b2ca:	f000 f893 	bl	800b3f4 <__swbuf_r>
 800b2ce:	3001      	adds	r0, #1
 800b2d0:	d1e8      	bne.n	800b2a4 <_puts_r+0x70>
 800b2d2:	e7cd      	b.n	800b270 <_puts_r+0x3c>
 800b2d4:	250a      	movs	r5, #10
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	1c5a      	adds	r2, r3, #1
 800b2da:	6022      	str	r2, [r4, #0]
 800b2dc:	701d      	strb	r5, [r3, #0]
 800b2de:	e7c9      	b.n	800b274 <_puts_r+0x40>

0800b2e0 <puts>:
 800b2e0:	b510      	push	{r4, lr}
 800b2e2:	4b03      	ldr	r3, [pc, #12]	; (800b2f0 <puts+0x10>)
 800b2e4:	0001      	movs	r1, r0
 800b2e6:	6818      	ldr	r0, [r3, #0]
 800b2e8:	f7ff ffa4 	bl	800b234 <_puts_r>
 800b2ec:	bd10      	pop	{r4, pc}
 800b2ee:	46c0      	nop			; (mov r8, r8)
 800b2f0:	2000006c 	.word	0x2000006c

0800b2f4 <sniprintf>:
 800b2f4:	b40c      	push	{r2, r3}
 800b2f6:	b530      	push	{r4, r5, lr}
 800b2f8:	4b17      	ldr	r3, [pc, #92]	; (800b358 <sniprintf+0x64>)
 800b2fa:	000c      	movs	r4, r1
 800b2fc:	681d      	ldr	r5, [r3, #0]
 800b2fe:	b09d      	sub	sp, #116	; 0x74
 800b300:	2900      	cmp	r1, #0
 800b302:	da08      	bge.n	800b316 <sniprintf+0x22>
 800b304:	238b      	movs	r3, #139	; 0x8b
 800b306:	2001      	movs	r0, #1
 800b308:	602b      	str	r3, [r5, #0]
 800b30a:	4240      	negs	r0, r0
 800b30c:	b01d      	add	sp, #116	; 0x74
 800b30e:	bc30      	pop	{r4, r5}
 800b310:	bc08      	pop	{r3}
 800b312:	b002      	add	sp, #8
 800b314:	4718      	bx	r3
 800b316:	2382      	movs	r3, #130	; 0x82
 800b318:	466a      	mov	r2, sp
 800b31a:	009b      	lsls	r3, r3, #2
 800b31c:	8293      	strh	r3, [r2, #20]
 800b31e:	2300      	movs	r3, #0
 800b320:	9002      	str	r0, [sp, #8]
 800b322:	9006      	str	r0, [sp, #24]
 800b324:	4299      	cmp	r1, r3
 800b326:	d000      	beq.n	800b32a <sniprintf+0x36>
 800b328:	1e4b      	subs	r3, r1, #1
 800b32a:	9304      	str	r3, [sp, #16]
 800b32c:	9307      	str	r3, [sp, #28]
 800b32e:	2301      	movs	r3, #1
 800b330:	466a      	mov	r2, sp
 800b332:	425b      	negs	r3, r3
 800b334:	82d3      	strh	r3, [r2, #22]
 800b336:	0028      	movs	r0, r5
 800b338:	ab21      	add	r3, sp, #132	; 0x84
 800b33a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b33c:	a902      	add	r1, sp, #8
 800b33e:	9301      	str	r3, [sp, #4]
 800b340:	f000 faea 	bl	800b918 <_svfiprintf_r>
 800b344:	1c43      	adds	r3, r0, #1
 800b346:	da01      	bge.n	800b34c <sniprintf+0x58>
 800b348:	238b      	movs	r3, #139	; 0x8b
 800b34a:	602b      	str	r3, [r5, #0]
 800b34c:	2c00      	cmp	r4, #0
 800b34e:	d0dd      	beq.n	800b30c <sniprintf+0x18>
 800b350:	2200      	movs	r2, #0
 800b352:	9b02      	ldr	r3, [sp, #8]
 800b354:	701a      	strb	r2, [r3, #0]
 800b356:	e7d9      	b.n	800b30c <sniprintf+0x18>
 800b358:	2000006c 	.word	0x2000006c

0800b35c <__sread>:
 800b35c:	b570      	push	{r4, r5, r6, lr}
 800b35e:	000c      	movs	r4, r1
 800b360:	250e      	movs	r5, #14
 800b362:	5f49      	ldrsh	r1, [r1, r5]
 800b364:	f000 f91a 	bl	800b59c <_read_r>
 800b368:	2800      	cmp	r0, #0
 800b36a:	db03      	blt.n	800b374 <__sread+0x18>
 800b36c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800b36e:	181b      	adds	r3, r3, r0
 800b370:	6563      	str	r3, [r4, #84]	; 0x54
 800b372:	bd70      	pop	{r4, r5, r6, pc}
 800b374:	89a3      	ldrh	r3, [r4, #12]
 800b376:	4a02      	ldr	r2, [pc, #8]	; (800b380 <__sread+0x24>)
 800b378:	4013      	ands	r3, r2
 800b37a:	81a3      	strh	r3, [r4, #12]
 800b37c:	e7f9      	b.n	800b372 <__sread+0x16>
 800b37e:	46c0      	nop			; (mov r8, r8)
 800b380:	ffffefff 	.word	0xffffefff

0800b384 <__swrite>:
 800b384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b386:	001f      	movs	r7, r3
 800b388:	898b      	ldrh	r3, [r1, #12]
 800b38a:	0005      	movs	r5, r0
 800b38c:	000c      	movs	r4, r1
 800b38e:	0016      	movs	r6, r2
 800b390:	05db      	lsls	r3, r3, #23
 800b392:	d505      	bpl.n	800b3a0 <__swrite+0x1c>
 800b394:	230e      	movs	r3, #14
 800b396:	5ec9      	ldrsh	r1, [r1, r3]
 800b398:	2200      	movs	r2, #0
 800b39a:	2302      	movs	r3, #2
 800b39c:	f000 f8ea 	bl	800b574 <_lseek_r>
 800b3a0:	89a3      	ldrh	r3, [r4, #12]
 800b3a2:	4a05      	ldr	r2, [pc, #20]	; (800b3b8 <__swrite+0x34>)
 800b3a4:	0028      	movs	r0, r5
 800b3a6:	4013      	ands	r3, r2
 800b3a8:	81a3      	strh	r3, [r4, #12]
 800b3aa:	0032      	movs	r2, r6
 800b3ac:	230e      	movs	r3, #14
 800b3ae:	5ee1      	ldrsh	r1, [r4, r3]
 800b3b0:	003b      	movs	r3, r7
 800b3b2:	f000 f907 	bl	800b5c4 <_write_r>
 800b3b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3b8:	ffffefff 	.word	0xffffefff

0800b3bc <__sseek>:
 800b3bc:	b570      	push	{r4, r5, r6, lr}
 800b3be:	000c      	movs	r4, r1
 800b3c0:	250e      	movs	r5, #14
 800b3c2:	5f49      	ldrsh	r1, [r1, r5]
 800b3c4:	f000 f8d6 	bl	800b574 <_lseek_r>
 800b3c8:	89a3      	ldrh	r3, [r4, #12]
 800b3ca:	1c42      	adds	r2, r0, #1
 800b3cc:	d103      	bne.n	800b3d6 <__sseek+0x1a>
 800b3ce:	4a05      	ldr	r2, [pc, #20]	; (800b3e4 <__sseek+0x28>)
 800b3d0:	4013      	ands	r3, r2
 800b3d2:	81a3      	strh	r3, [r4, #12]
 800b3d4:	bd70      	pop	{r4, r5, r6, pc}
 800b3d6:	2280      	movs	r2, #128	; 0x80
 800b3d8:	0152      	lsls	r2, r2, #5
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	81a3      	strh	r3, [r4, #12]
 800b3de:	6560      	str	r0, [r4, #84]	; 0x54
 800b3e0:	e7f8      	b.n	800b3d4 <__sseek+0x18>
 800b3e2:	46c0      	nop			; (mov r8, r8)
 800b3e4:	ffffefff 	.word	0xffffefff

0800b3e8 <__sclose>:
 800b3e8:	b510      	push	{r4, lr}
 800b3ea:	230e      	movs	r3, #14
 800b3ec:	5ec9      	ldrsh	r1, [r1, r3]
 800b3ee:	f000 f8af 	bl	800b550 <_close_r>
 800b3f2:	bd10      	pop	{r4, pc}

0800b3f4 <__swbuf_r>:
 800b3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3f6:	0006      	movs	r6, r0
 800b3f8:	000d      	movs	r5, r1
 800b3fa:	0014      	movs	r4, r2
 800b3fc:	2800      	cmp	r0, #0
 800b3fe:	d004      	beq.n	800b40a <__swbuf_r+0x16>
 800b400:	6a03      	ldr	r3, [r0, #32]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d101      	bne.n	800b40a <__swbuf_r+0x16>
 800b406:	f7ff fed1 	bl	800b1ac <__sinit>
 800b40a:	69a3      	ldr	r3, [r4, #24]
 800b40c:	60a3      	str	r3, [r4, #8]
 800b40e:	89a3      	ldrh	r3, [r4, #12]
 800b410:	071b      	lsls	r3, r3, #28
 800b412:	d528      	bpl.n	800b466 <__swbuf_r+0x72>
 800b414:	6923      	ldr	r3, [r4, #16]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d025      	beq.n	800b466 <__swbuf_r+0x72>
 800b41a:	6923      	ldr	r3, [r4, #16]
 800b41c:	6820      	ldr	r0, [r4, #0]
 800b41e:	b2ef      	uxtb	r7, r5
 800b420:	1ac0      	subs	r0, r0, r3
 800b422:	6963      	ldr	r3, [r4, #20]
 800b424:	b2ed      	uxtb	r5, r5
 800b426:	4283      	cmp	r3, r0
 800b428:	dc05      	bgt.n	800b436 <__swbuf_r+0x42>
 800b42a:	0021      	movs	r1, r4
 800b42c:	0030      	movs	r0, r6
 800b42e:	f000 fec1 	bl	800c1b4 <_fflush_r>
 800b432:	2800      	cmp	r0, #0
 800b434:	d11d      	bne.n	800b472 <__swbuf_r+0x7e>
 800b436:	68a3      	ldr	r3, [r4, #8]
 800b438:	3001      	adds	r0, #1
 800b43a:	3b01      	subs	r3, #1
 800b43c:	60a3      	str	r3, [r4, #8]
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	6022      	str	r2, [r4, #0]
 800b444:	701f      	strb	r7, [r3, #0]
 800b446:	6963      	ldr	r3, [r4, #20]
 800b448:	4283      	cmp	r3, r0
 800b44a:	d004      	beq.n	800b456 <__swbuf_r+0x62>
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	07db      	lsls	r3, r3, #31
 800b450:	d507      	bpl.n	800b462 <__swbuf_r+0x6e>
 800b452:	2d0a      	cmp	r5, #10
 800b454:	d105      	bne.n	800b462 <__swbuf_r+0x6e>
 800b456:	0021      	movs	r1, r4
 800b458:	0030      	movs	r0, r6
 800b45a:	f000 feab 	bl	800c1b4 <_fflush_r>
 800b45e:	2800      	cmp	r0, #0
 800b460:	d107      	bne.n	800b472 <__swbuf_r+0x7e>
 800b462:	0028      	movs	r0, r5
 800b464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b466:	0021      	movs	r1, r4
 800b468:	0030      	movs	r0, r6
 800b46a:	f000 f805 	bl	800b478 <__swsetup_r>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d0d3      	beq.n	800b41a <__swbuf_r+0x26>
 800b472:	2501      	movs	r5, #1
 800b474:	426d      	negs	r5, r5
 800b476:	e7f4      	b.n	800b462 <__swbuf_r+0x6e>

0800b478 <__swsetup_r>:
 800b478:	4b30      	ldr	r3, [pc, #192]	; (800b53c <__swsetup_r+0xc4>)
 800b47a:	b570      	push	{r4, r5, r6, lr}
 800b47c:	0005      	movs	r5, r0
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	000c      	movs	r4, r1
 800b482:	2800      	cmp	r0, #0
 800b484:	d004      	beq.n	800b490 <__swsetup_r+0x18>
 800b486:	6a03      	ldr	r3, [r0, #32]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d101      	bne.n	800b490 <__swsetup_r+0x18>
 800b48c:	f7ff fe8e 	bl	800b1ac <__sinit>
 800b490:	230c      	movs	r3, #12
 800b492:	5ee2      	ldrsh	r2, [r4, r3]
 800b494:	b293      	uxth	r3, r2
 800b496:	0711      	lsls	r1, r2, #28
 800b498:	d423      	bmi.n	800b4e2 <__swsetup_r+0x6a>
 800b49a:	06d9      	lsls	r1, r3, #27
 800b49c:	d407      	bmi.n	800b4ae <__swsetup_r+0x36>
 800b49e:	2309      	movs	r3, #9
 800b4a0:	2001      	movs	r0, #1
 800b4a2:	602b      	str	r3, [r5, #0]
 800b4a4:	3337      	adds	r3, #55	; 0x37
 800b4a6:	4313      	orrs	r3, r2
 800b4a8:	81a3      	strh	r3, [r4, #12]
 800b4aa:	4240      	negs	r0, r0
 800b4ac:	bd70      	pop	{r4, r5, r6, pc}
 800b4ae:	075b      	lsls	r3, r3, #29
 800b4b0:	d513      	bpl.n	800b4da <__swsetup_r+0x62>
 800b4b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b4:	2900      	cmp	r1, #0
 800b4b6:	d008      	beq.n	800b4ca <__swsetup_r+0x52>
 800b4b8:	0023      	movs	r3, r4
 800b4ba:	3344      	adds	r3, #68	; 0x44
 800b4bc:	4299      	cmp	r1, r3
 800b4be:	d002      	beq.n	800b4c6 <__swsetup_r+0x4e>
 800b4c0:	0028      	movs	r0, r5
 800b4c2:	f000 f8c9 	bl	800b658 <_free_r>
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	6363      	str	r3, [r4, #52]	; 0x34
 800b4ca:	2224      	movs	r2, #36	; 0x24
 800b4cc:	89a3      	ldrh	r3, [r4, #12]
 800b4ce:	4393      	bics	r3, r2
 800b4d0:	81a3      	strh	r3, [r4, #12]
 800b4d2:	2300      	movs	r3, #0
 800b4d4:	6063      	str	r3, [r4, #4]
 800b4d6:	6923      	ldr	r3, [r4, #16]
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	2308      	movs	r3, #8
 800b4dc:	89a2      	ldrh	r2, [r4, #12]
 800b4de:	4313      	orrs	r3, r2
 800b4e0:	81a3      	strh	r3, [r4, #12]
 800b4e2:	6923      	ldr	r3, [r4, #16]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d10b      	bne.n	800b500 <__swsetup_r+0x88>
 800b4e8:	21a0      	movs	r1, #160	; 0xa0
 800b4ea:	2280      	movs	r2, #128	; 0x80
 800b4ec:	89a3      	ldrh	r3, [r4, #12]
 800b4ee:	0089      	lsls	r1, r1, #2
 800b4f0:	0092      	lsls	r2, r2, #2
 800b4f2:	400b      	ands	r3, r1
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d003      	beq.n	800b500 <__swsetup_r+0x88>
 800b4f8:	0021      	movs	r1, r4
 800b4fa:	0028      	movs	r0, r5
 800b4fc:	f000 feae 	bl	800c25c <__smakebuf_r>
 800b500:	220c      	movs	r2, #12
 800b502:	5ea3      	ldrsh	r3, [r4, r2]
 800b504:	2001      	movs	r0, #1
 800b506:	001a      	movs	r2, r3
 800b508:	b299      	uxth	r1, r3
 800b50a:	4002      	ands	r2, r0
 800b50c:	4203      	tst	r3, r0
 800b50e:	d00f      	beq.n	800b530 <__swsetup_r+0xb8>
 800b510:	2200      	movs	r2, #0
 800b512:	60a2      	str	r2, [r4, #8]
 800b514:	6962      	ldr	r2, [r4, #20]
 800b516:	4252      	negs	r2, r2
 800b518:	61a2      	str	r2, [r4, #24]
 800b51a:	2000      	movs	r0, #0
 800b51c:	6922      	ldr	r2, [r4, #16]
 800b51e:	4282      	cmp	r2, r0
 800b520:	d1c4      	bne.n	800b4ac <__swsetup_r+0x34>
 800b522:	0609      	lsls	r1, r1, #24
 800b524:	d5c2      	bpl.n	800b4ac <__swsetup_r+0x34>
 800b526:	2240      	movs	r2, #64	; 0x40
 800b528:	4313      	orrs	r3, r2
 800b52a:	81a3      	strh	r3, [r4, #12]
 800b52c:	3801      	subs	r0, #1
 800b52e:	e7bd      	b.n	800b4ac <__swsetup_r+0x34>
 800b530:	0788      	lsls	r0, r1, #30
 800b532:	d400      	bmi.n	800b536 <__swsetup_r+0xbe>
 800b534:	6962      	ldr	r2, [r4, #20]
 800b536:	60a2      	str	r2, [r4, #8]
 800b538:	e7ef      	b.n	800b51a <__swsetup_r+0xa2>
 800b53a:	46c0      	nop			; (mov r8, r8)
 800b53c:	2000006c 	.word	0x2000006c

0800b540 <memset>:
 800b540:	0003      	movs	r3, r0
 800b542:	1882      	adds	r2, r0, r2
 800b544:	4293      	cmp	r3, r2
 800b546:	d100      	bne.n	800b54a <memset+0xa>
 800b548:	4770      	bx	lr
 800b54a:	7019      	strb	r1, [r3, #0]
 800b54c:	3301      	adds	r3, #1
 800b54e:	e7f9      	b.n	800b544 <memset+0x4>

0800b550 <_close_r>:
 800b550:	2300      	movs	r3, #0
 800b552:	b570      	push	{r4, r5, r6, lr}
 800b554:	4d06      	ldr	r5, [pc, #24]	; (800b570 <_close_r+0x20>)
 800b556:	0004      	movs	r4, r0
 800b558:	0008      	movs	r0, r1
 800b55a:	602b      	str	r3, [r5, #0]
 800b55c:	f7f6 fb05 	bl	8001b6a <_close>
 800b560:	1c43      	adds	r3, r0, #1
 800b562:	d103      	bne.n	800b56c <_close_r+0x1c>
 800b564:	682b      	ldr	r3, [r5, #0]
 800b566:	2b00      	cmp	r3, #0
 800b568:	d000      	beq.n	800b56c <_close_r+0x1c>
 800b56a:	6023      	str	r3, [r4, #0]
 800b56c:	bd70      	pop	{r4, r5, r6, pc}
 800b56e:	46c0      	nop			; (mov r8, r8)
 800b570:	20008840 	.word	0x20008840

0800b574 <_lseek_r>:
 800b574:	b570      	push	{r4, r5, r6, lr}
 800b576:	0004      	movs	r4, r0
 800b578:	0008      	movs	r0, r1
 800b57a:	0011      	movs	r1, r2
 800b57c:	001a      	movs	r2, r3
 800b57e:	2300      	movs	r3, #0
 800b580:	4d05      	ldr	r5, [pc, #20]	; (800b598 <_lseek_r+0x24>)
 800b582:	602b      	str	r3, [r5, #0]
 800b584:	f7f6 fb12 	bl	8001bac <_lseek>
 800b588:	1c43      	adds	r3, r0, #1
 800b58a:	d103      	bne.n	800b594 <_lseek_r+0x20>
 800b58c:	682b      	ldr	r3, [r5, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d000      	beq.n	800b594 <_lseek_r+0x20>
 800b592:	6023      	str	r3, [r4, #0]
 800b594:	bd70      	pop	{r4, r5, r6, pc}
 800b596:	46c0      	nop			; (mov r8, r8)
 800b598:	20008840 	.word	0x20008840

0800b59c <_read_r>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	0004      	movs	r4, r0
 800b5a0:	0008      	movs	r0, r1
 800b5a2:	0011      	movs	r1, r2
 800b5a4:	001a      	movs	r2, r3
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	4d05      	ldr	r5, [pc, #20]	; (800b5c0 <_read_r+0x24>)
 800b5aa:	602b      	str	r3, [r5, #0]
 800b5ac:	f7f6 faa4 	bl	8001af8 <_read>
 800b5b0:	1c43      	adds	r3, r0, #1
 800b5b2:	d103      	bne.n	800b5bc <_read_r+0x20>
 800b5b4:	682b      	ldr	r3, [r5, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d000      	beq.n	800b5bc <_read_r+0x20>
 800b5ba:	6023      	str	r3, [r4, #0]
 800b5bc:	bd70      	pop	{r4, r5, r6, pc}
 800b5be:	46c0      	nop			; (mov r8, r8)
 800b5c0:	20008840 	.word	0x20008840

0800b5c4 <_write_r>:
 800b5c4:	b570      	push	{r4, r5, r6, lr}
 800b5c6:	0004      	movs	r4, r0
 800b5c8:	0008      	movs	r0, r1
 800b5ca:	0011      	movs	r1, r2
 800b5cc:	001a      	movs	r2, r3
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	4d05      	ldr	r5, [pc, #20]	; (800b5e8 <_write_r+0x24>)
 800b5d2:	602b      	str	r3, [r5, #0]
 800b5d4:	f7f6 faad 	bl	8001b32 <_write>
 800b5d8:	1c43      	adds	r3, r0, #1
 800b5da:	d103      	bne.n	800b5e4 <_write_r+0x20>
 800b5dc:	682b      	ldr	r3, [r5, #0]
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d000      	beq.n	800b5e4 <_write_r+0x20>
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	bd70      	pop	{r4, r5, r6, pc}
 800b5e6:	46c0      	nop			; (mov r8, r8)
 800b5e8:	20008840 	.word	0x20008840

0800b5ec <__errno>:
 800b5ec:	4b01      	ldr	r3, [pc, #4]	; (800b5f4 <__errno+0x8>)
 800b5ee:	6818      	ldr	r0, [r3, #0]
 800b5f0:	4770      	bx	lr
 800b5f2:	46c0      	nop			; (mov r8, r8)
 800b5f4:	2000006c 	.word	0x2000006c

0800b5f8 <__libc_init_array>:
 800b5f8:	b570      	push	{r4, r5, r6, lr}
 800b5fa:	2600      	movs	r6, #0
 800b5fc:	4c0c      	ldr	r4, [pc, #48]	; (800b630 <__libc_init_array+0x38>)
 800b5fe:	4d0d      	ldr	r5, [pc, #52]	; (800b634 <__libc_init_array+0x3c>)
 800b600:	1b64      	subs	r4, r4, r5
 800b602:	10a4      	asrs	r4, r4, #2
 800b604:	42a6      	cmp	r6, r4
 800b606:	d109      	bne.n	800b61c <__libc_init_array+0x24>
 800b608:	2600      	movs	r6, #0
 800b60a:	f000 fef1 	bl	800c3f0 <_init>
 800b60e:	4c0a      	ldr	r4, [pc, #40]	; (800b638 <__libc_init_array+0x40>)
 800b610:	4d0a      	ldr	r5, [pc, #40]	; (800b63c <__libc_init_array+0x44>)
 800b612:	1b64      	subs	r4, r4, r5
 800b614:	10a4      	asrs	r4, r4, #2
 800b616:	42a6      	cmp	r6, r4
 800b618:	d105      	bne.n	800b626 <__libc_init_array+0x2e>
 800b61a:	bd70      	pop	{r4, r5, r6, pc}
 800b61c:	00b3      	lsls	r3, r6, #2
 800b61e:	58eb      	ldr	r3, [r5, r3]
 800b620:	4798      	blx	r3
 800b622:	3601      	adds	r6, #1
 800b624:	e7ee      	b.n	800b604 <__libc_init_array+0xc>
 800b626:	00b3      	lsls	r3, r6, #2
 800b628:	58eb      	ldr	r3, [r5, r3]
 800b62a:	4798      	blx	r3
 800b62c:	3601      	adds	r6, #1
 800b62e:	e7f2      	b.n	800b616 <__libc_init_array+0x1e>
 800b630:	0800c684 	.word	0x0800c684
 800b634:	0800c684 	.word	0x0800c684
 800b638:	0800c688 	.word	0x0800c688
 800b63c:	0800c684 	.word	0x0800c684

0800b640 <__retarget_lock_acquire_recursive>:
 800b640:	4770      	bx	lr

0800b642 <__retarget_lock_release_recursive>:
 800b642:	4770      	bx	lr

0800b644 <memcpy>:
 800b644:	2300      	movs	r3, #0
 800b646:	b510      	push	{r4, lr}
 800b648:	429a      	cmp	r2, r3
 800b64a:	d100      	bne.n	800b64e <memcpy+0xa>
 800b64c:	bd10      	pop	{r4, pc}
 800b64e:	5ccc      	ldrb	r4, [r1, r3]
 800b650:	54c4      	strb	r4, [r0, r3]
 800b652:	3301      	adds	r3, #1
 800b654:	e7f8      	b.n	800b648 <memcpy+0x4>
	...

0800b658 <_free_r>:
 800b658:	b570      	push	{r4, r5, r6, lr}
 800b65a:	0005      	movs	r5, r0
 800b65c:	2900      	cmp	r1, #0
 800b65e:	d010      	beq.n	800b682 <_free_r+0x2a>
 800b660:	1f0c      	subs	r4, r1, #4
 800b662:	6823      	ldr	r3, [r4, #0]
 800b664:	2b00      	cmp	r3, #0
 800b666:	da00      	bge.n	800b66a <_free_r+0x12>
 800b668:	18e4      	adds	r4, r4, r3
 800b66a:	0028      	movs	r0, r5
 800b66c:	f000 f8e2 	bl	800b834 <__malloc_lock>
 800b670:	4a1d      	ldr	r2, [pc, #116]	; (800b6e8 <_free_r+0x90>)
 800b672:	6813      	ldr	r3, [r2, #0]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d105      	bne.n	800b684 <_free_r+0x2c>
 800b678:	6063      	str	r3, [r4, #4]
 800b67a:	6014      	str	r4, [r2, #0]
 800b67c:	0028      	movs	r0, r5
 800b67e:	f000 f8e1 	bl	800b844 <__malloc_unlock>
 800b682:	bd70      	pop	{r4, r5, r6, pc}
 800b684:	42a3      	cmp	r3, r4
 800b686:	d908      	bls.n	800b69a <_free_r+0x42>
 800b688:	6820      	ldr	r0, [r4, #0]
 800b68a:	1821      	adds	r1, r4, r0
 800b68c:	428b      	cmp	r3, r1
 800b68e:	d1f3      	bne.n	800b678 <_free_r+0x20>
 800b690:	6819      	ldr	r1, [r3, #0]
 800b692:	685b      	ldr	r3, [r3, #4]
 800b694:	1809      	adds	r1, r1, r0
 800b696:	6021      	str	r1, [r4, #0]
 800b698:	e7ee      	b.n	800b678 <_free_r+0x20>
 800b69a:	001a      	movs	r2, r3
 800b69c:	685b      	ldr	r3, [r3, #4]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d001      	beq.n	800b6a6 <_free_r+0x4e>
 800b6a2:	42a3      	cmp	r3, r4
 800b6a4:	d9f9      	bls.n	800b69a <_free_r+0x42>
 800b6a6:	6811      	ldr	r1, [r2, #0]
 800b6a8:	1850      	adds	r0, r2, r1
 800b6aa:	42a0      	cmp	r0, r4
 800b6ac:	d10b      	bne.n	800b6c6 <_free_r+0x6e>
 800b6ae:	6820      	ldr	r0, [r4, #0]
 800b6b0:	1809      	adds	r1, r1, r0
 800b6b2:	1850      	adds	r0, r2, r1
 800b6b4:	6011      	str	r1, [r2, #0]
 800b6b6:	4283      	cmp	r3, r0
 800b6b8:	d1e0      	bne.n	800b67c <_free_r+0x24>
 800b6ba:	6818      	ldr	r0, [r3, #0]
 800b6bc:	685b      	ldr	r3, [r3, #4]
 800b6be:	1841      	adds	r1, r0, r1
 800b6c0:	6011      	str	r1, [r2, #0]
 800b6c2:	6053      	str	r3, [r2, #4]
 800b6c4:	e7da      	b.n	800b67c <_free_r+0x24>
 800b6c6:	42a0      	cmp	r0, r4
 800b6c8:	d902      	bls.n	800b6d0 <_free_r+0x78>
 800b6ca:	230c      	movs	r3, #12
 800b6cc:	602b      	str	r3, [r5, #0]
 800b6ce:	e7d5      	b.n	800b67c <_free_r+0x24>
 800b6d0:	6820      	ldr	r0, [r4, #0]
 800b6d2:	1821      	adds	r1, r4, r0
 800b6d4:	428b      	cmp	r3, r1
 800b6d6:	d103      	bne.n	800b6e0 <_free_r+0x88>
 800b6d8:	6819      	ldr	r1, [r3, #0]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	1809      	adds	r1, r1, r0
 800b6de:	6021      	str	r1, [r4, #0]
 800b6e0:	6063      	str	r3, [r4, #4]
 800b6e2:	6054      	str	r4, [r2, #4]
 800b6e4:	e7ca      	b.n	800b67c <_free_r+0x24>
 800b6e6:	46c0      	nop			; (mov r8, r8)
 800b6e8:	20008848 	.word	0x20008848

0800b6ec <sbrk_aligned>:
 800b6ec:	b570      	push	{r4, r5, r6, lr}
 800b6ee:	4e0f      	ldr	r6, [pc, #60]	; (800b72c <sbrk_aligned+0x40>)
 800b6f0:	000d      	movs	r5, r1
 800b6f2:	6831      	ldr	r1, [r6, #0]
 800b6f4:	0004      	movs	r4, r0
 800b6f6:	2900      	cmp	r1, #0
 800b6f8:	d102      	bne.n	800b700 <sbrk_aligned+0x14>
 800b6fa:	f000 fe25 	bl	800c348 <_sbrk_r>
 800b6fe:	6030      	str	r0, [r6, #0]
 800b700:	0029      	movs	r1, r5
 800b702:	0020      	movs	r0, r4
 800b704:	f000 fe20 	bl	800c348 <_sbrk_r>
 800b708:	1c43      	adds	r3, r0, #1
 800b70a:	d00a      	beq.n	800b722 <sbrk_aligned+0x36>
 800b70c:	2303      	movs	r3, #3
 800b70e:	1cc5      	adds	r5, r0, #3
 800b710:	439d      	bics	r5, r3
 800b712:	42a8      	cmp	r0, r5
 800b714:	d007      	beq.n	800b726 <sbrk_aligned+0x3a>
 800b716:	1a29      	subs	r1, r5, r0
 800b718:	0020      	movs	r0, r4
 800b71a:	f000 fe15 	bl	800c348 <_sbrk_r>
 800b71e:	3001      	adds	r0, #1
 800b720:	d101      	bne.n	800b726 <sbrk_aligned+0x3a>
 800b722:	2501      	movs	r5, #1
 800b724:	426d      	negs	r5, r5
 800b726:	0028      	movs	r0, r5
 800b728:	bd70      	pop	{r4, r5, r6, pc}
 800b72a:	46c0      	nop			; (mov r8, r8)
 800b72c:	2000884c 	.word	0x2000884c

0800b730 <_malloc_r>:
 800b730:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b732:	2203      	movs	r2, #3
 800b734:	1ccb      	adds	r3, r1, #3
 800b736:	4393      	bics	r3, r2
 800b738:	3308      	adds	r3, #8
 800b73a:	0006      	movs	r6, r0
 800b73c:	001f      	movs	r7, r3
 800b73e:	2b0c      	cmp	r3, #12
 800b740:	d238      	bcs.n	800b7b4 <_malloc_r+0x84>
 800b742:	270c      	movs	r7, #12
 800b744:	42b9      	cmp	r1, r7
 800b746:	d837      	bhi.n	800b7b8 <_malloc_r+0x88>
 800b748:	0030      	movs	r0, r6
 800b74a:	f000 f873 	bl	800b834 <__malloc_lock>
 800b74e:	4b38      	ldr	r3, [pc, #224]	; (800b830 <_malloc_r+0x100>)
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	001c      	movs	r4, r3
 800b756:	2c00      	cmp	r4, #0
 800b758:	d133      	bne.n	800b7c2 <_malloc_r+0x92>
 800b75a:	0039      	movs	r1, r7
 800b75c:	0030      	movs	r0, r6
 800b75e:	f7ff ffc5 	bl	800b6ec <sbrk_aligned>
 800b762:	0004      	movs	r4, r0
 800b764:	1c43      	adds	r3, r0, #1
 800b766:	d15e      	bne.n	800b826 <_malloc_r+0xf6>
 800b768:	9b00      	ldr	r3, [sp, #0]
 800b76a:	681c      	ldr	r4, [r3, #0]
 800b76c:	0025      	movs	r5, r4
 800b76e:	2d00      	cmp	r5, #0
 800b770:	d14e      	bne.n	800b810 <_malloc_r+0xe0>
 800b772:	2c00      	cmp	r4, #0
 800b774:	d051      	beq.n	800b81a <_malloc_r+0xea>
 800b776:	6823      	ldr	r3, [r4, #0]
 800b778:	0029      	movs	r1, r5
 800b77a:	18e3      	adds	r3, r4, r3
 800b77c:	0030      	movs	r0, r6
 800b77e:	9301      	str	r3, [sp, #4]
 800b780:	f000 fde2 	bl	800c348 <_sbrk_r>
 800b784:	9b01      	ldr	r3, [sp, #4]
 800b786:	4283      	cmp	r3, r0
 800b788:	d147      	bne.n	800b81a <_malloc_r+0xea>
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	0030      	movs	r0, r6
 800b78e:	1aff      	subs	r7, r7, r3
 800b790:	0039      	movs	r1, r7
 800b792:	f7ff ffab 	bl	800b6ec <sbrk_aligned>
 800b796:	3001      	adds	r0, #1
 800b798:	d03f      	beq.n	800b81a <_malloc_r+0xea>
 800b79a:	6823      	ldr	r3, [r4, #0]
 800b79c:	19db      	adds	r3, r3, r7
 800b79e:	6023      	str	r3, [r4, #0]
 800b7a0:	9b00      	ldr	r3, [sp, #0]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d040      	beq.n	800b82a <_malloc_r+0xfa>
 800b7a8:	685a      	ldr	r2, [r3, #4]
 800b7aa:	42a2      	cmp	r2, r4
 800b7ac:	d133      	bne.n	800b816 <_malloc_r+0xe6>
 800b7ae:	2200      	movs	r2, #0
 800b7b0:	605a      	str	r2, [r3, #4]
 800b7b2:	e014      	b.n	800b7de <_malloc_r+0xae>
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	dac5      	bge.n	800b744 <_malloc_r+0x14>
 800b7b8:	230c      	movs	r3, #12
 800b7ba:	2500      	movs	r5, #0
 800b7bc:	6033      	str	r3, [r6, #0]
 800b7be:	0028      	movs	r0, r5
 800b7c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b7c2:	6821      	ldr	r1, [r4, #0]
 800b7c4:	1bc9      	subs	r1, r1, r7
 800b7c6:	d420      	bmi.n	800b80a <_malloc_r+0xda>
 800b7c8:	290b      	cmp	r1, #11
 800b7ca:	d918      	bls.n	800b7fe <_malloc_r+0xce>
 800b7cc:	19e2      	adds	r2, r4, r7
 800b7ce:	6027      	str	r7, [r4, #0]
 800b7d0:	42a3      	cmp	r3, r4
 800b7d2:	d112      	bne.n	800b7fa <_malloc_r+0xca>
 800b7d4:	9b00      	ldr	r3, [sp, #0]
 800b7d6:	601a      	str	r2, [r3, #0]
 800b7d8:	6863      	ldr	r3, [r4, #4]
 800b7da:	6011      	str	r1, [r2, #0]
 800b7dc:	6053      	str	r3, [r2, #4]
 800b7de:	0030      	movs	r0, r6
 800b7e0:	0025      	movs	r5, r4
 800b7e2:	f000 f82f 	bl	800b844 <__malloc_unlock>
 800b7e6:	2207      	movs	r2, #7
 800b7e8:	350b      	adds	r5, #11
 800b7ea:	1d23      	adds	r3, r4, #4
 800b7ec:	4395      	bics	r5, r2
 800b7ee:	1aea      	subs	r2, r5, r3
 800b7f0:	429d      	cmp	r5, r3
 800b7f2:	d0e4      	beq.n	800b7be <_malloc_r+0x8e>
 800b7f4:	1b5b      	subs	r3, r3, r5
 800b7f6:	50a3      	str	r3, [r4, r2]
 800b7f8:	e7e1      	b.n	800b7be <_malloc_r+0x8e>
 800b7fa:	605a      	str	r2, [r3, #4]
 800b7fc:	e7ec      	b.n	800b7d8 <_malloc_r+0xa8>
 800b7fe:	6862      	ldr	r2, [r4, #4]
 800b800:	42a3      	cmp	r3, r4
 800b802:	d1d5      	bne.n	800b7b0 <_malloc_r+0x80>
 800b804:	9b00      	ldr	r3, [sp, #0]
 800b806:	601a      	str	r2, [r3, #0]
 800b808:	e7e9      	b.n	800b7de <_malloc_r+0xae>
 800b80a:	0023      	movs	r3, r4
 800b80c:	6864      	ldr	r4, [r4, #4]
 800b80e:	e7a2      	b.n	800b756 <_malloc_r+0x26>
 800b810:	002c      	movs	r4, r5
 800b812:	686d      	ldr	r5, [r5, #4]
 800b814:	e7ab      	b.n	800b76e <_malloc_r+0x3e>
 800b816:	0013      	movs	r3, r2
 800b818:	e7c4      	b.n	800b7a4 <_malloc_r+0x74>
 800b81a:	230c      	movs	r3, #12
 800b81c:	0030      	movs	r0, r6
 800b81e:	6033      	str	r3, [r6, #0]
 800b820:	f000 f810 	bl	800b844 <__malloc_unlock>
 800b824:	e7cb      	b.n	800b7be <_malloc_r+0x8e>
 800b826:	6027      	str	r7, [r4, #0]
 800b828:	e7d9      	b.n	800b7de <_malloc_r+0xae>
 800b82a:	605b      	str	r3, [r3, #4]
 800b82c:	deff      	udf	#255	; 0xff
 800b82e:	46c0      	nop			; (mov r8, r8)
 800b830:	20008848 	.word	0x20008848

0800b834 <__malloc_lock>:
 800b834:	b510      	push	{r4, lr}
 800b836:	4802      	ldr	r0, [pc, #8]	; (800b840 <__malloc_lock+0xc>)
 800b838:	f7ff ff02 	bl	800b640 <__retarget_lock_acquire_recursive>
 800b83c:	bd10      	pop	{r4, pc}
 800b83e:	46c0      	nop			; (mov r8, r8)
 800b840:	20008844 	.word	0x20008844

0800b844 <__malloc_unlock>:
 800b844:	b510      	push	{r4, lr}
 800b846:	4802      	ldr	r0, [pc, #8]	; (800b850 <__malloc_unlock+0xc>)
 800b848:	f7ff fefb 	bl	800b642 <__retarget_lock_release_recursive>
 800b84c:	bd10      	pop	{r4, pc}
 800b84e:	46c0      	nop			; (mov r8, r8)
 800b850:	20008844 	.word	0x20008844

0800b854 <__ssputs_r>:
 800b854:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b856:	b085      	sub	sp, #20
 800b858:	9301      	str	r3, [sp, #4]
 800b85a:	9203      	str	r2, [sp, #12]
 800b85c:	688e      	ldr	r6, [r1, #8]
 800b85e:	9a01      	ldr	r2, [sp, #4]
 800b860:	0007      	movs	r7, r0
 800b862:	000c      	movs	r4, r1
 800b864:	680b      	ldr	r3, [r1, #0]
 800b866:	4296      	cmp	r6, r2
 800b868:	d831      	bhi.n	800b8ce <__ssputs_r+0x7a>
 800b86a:	898a      	ldrh	r2, [r1, #12]
 800b86c:	2190      	movs	r1, #144	; 0x90
 800b86e:	00c9      	lsls	r1, r1, #3
 800b870:	420a      	tst	r2, r1
 800b872:	d029      	beq.n	800b8c8 <__ssputs_r+0x74>
 800b874:	2003      	movs	r0, #3
 800b876:	6921      	ldr	r1, [r4, #16]
 800b878:	1a5b      	subs	r3, r3, r1
 800b87a:	9302      	str	r3, [sp, #8]
 800b87c:	6963      	ldr	r3, [r4, #20]
 800b87e:	4343      	muls	r3, r0
 800b880:	0fdd      	lsrs	r5, r3, #31
 800b882:	18ed      	adds	r5, r5, r3
 800b884:	9b01      	ldr	r3, [sp, #4]
 800b886:	9802      	ldr	r0, [sp, #8]
 800b888:	3301      	adds	r3, #1
 800b88a:	181b      	adds	r3, r3, r0
 800b88c:	106d      	asrs	r5, r5, #1
 800b88e:	42ab      	cmp	r3, r5
 800b890:	d900      	bls.n	800b894 <__ssputs_r+0x40>
 800b892:	001d      	movs	r5, r3
 800b894:	0552      	lsls	r2, r2, #21
 800b896:	d529      	bpl.n	800b8ec <__ssputs_r+0x98>
 800b898:	0029      	movs	r1, r5
 800b89a:	0038      	movs	r0, r7
 800b89c:	f7ff ff48 	bl	800b730 <_malloc_r>
 800b8a0:	1e06      	subs	r6, r0, #0
 800b8a2:	d02d      	beq.n	800b900 <__ssputs_r+0xac>
 800b8a4:	9a02      	ldr	r2, [sp, #8]
 800b8a6:	6921      	ldr	r1, [r4, #16]
 800b8a8:	f7ff fecc 	bl	800b644 <memcpy>
 800b8ac:	89a2      	ldrh	r2, [r4, #12]
 800b8ae:	4b19      	ldr	r3, [pc, #100]	; (800b914 <__ssputs_r+0xc0>)
 800b8b0:	401a      	ands	r2, r3
 800b8b2:	2380      	movs	r3, #128	; 0x80
 800b8b4:	4313      	orrs	r3, r2
 800b8b6:	81a3      	strh	r3, [r4, #12]
 800b8b8:	9b02      	ldr	r3, [sp, #8]
 800b8ba:	6126      	str	r6, [r4, #16]
 800b8bc:	18f6      	adds	r6, r6, r3
 800b8be:	6026      	str	r6, [r4, #0]
 800b8c0:	6165      	str	r5, [r4, #20]
 800b8c2:	9e01      	ldr	r6, [sp, #4]
 800b8c4:	1aed      	subs	r5, r5, r3
 800b8c6:	60a5      	str	r5, [r4, #8]
 800b8c8:	9b01      	ldr	r3, [sp, #4]
 800b8ca:	429e      	cmp	r6, r3
 800b8cc:	d900      	bls.n	800b8d0 <__ssputs_r+0x7c>
 800b8ce:	9e01      	ldr	r6, [sp, #4]
 800b8d0:	0032      	movs	r2, r6
 800b8d2:	9903      	ldr	r1, [sp, #12]
 800b8d4:	6820      	ldr	r0, [r4, #0]
 800b8d6:	f000 fcff 	bl	800c2d8 <memmove>
 800b8da:	2000      	movs	r0, #0
 800b8dc:	68a3      	ldr	r3, [r4, #8]
 800b8de:	1b9b      	subs	r3, r3, r6
 800b8e0:	60a3      	str	r3, [r4, #8]
 800b8e2:	6823      	ldr	r3, [r4, #0]
 800b8e4:	199b      	adds	r3, r3, r6
 800b8e6:	6023      	str	r3, [r4, #0]
 800b8e8:	b005      	add	sp, #20
 800b8ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8ec:	002a      	movs	r2, r5
 800b8ee:	0038      	movs	r0, r7
 800b8f0:	f000 fd47 	bl	800c382 <_realloc_r>
 800b8f4:	1e06      	subs	r6, r0, #0
 800b8f6:	d1df      	bne.n	800b8b8 <__ssputs_r+0x64>
 800b8f8:	0038      	movs	r0, r7
 800b8fa:	6921      	ldr	r1, [r4, #16]
 800b8fc:	f7ff feac 	bl	800b658 <_free_r>
 800b900:	230c      	movs	r3, #12
 800b902:	2001      	movs	r0, #1
 800b904:	603b      	str	r3, [r7, #0]
 800b906:	89a2      	ldrh	r2, [r4, #12]
 800b908:	3334      	adds	r3, #52	; 0x34
 800b90a:	4313      	orrs	r3, r2
 800b90c:	81a3      	strh	r3, [r4, #12]
 800b90e:	4240      	negs	r0, r0
 800b910:	e7ea      	b.n	800b8e8 <__ssputs_r+0x94>
 800b912:	46c0      	nop			; (mov r8, r8)
 800b914:	fffffb7f 	.word	0xfffffb7f

0800b918 <_svfiprintf_r>:
 800b918:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b91a:	b0a1      	sub	sp, #132	; 0x84
 800b91c:	9003      	str	r0, [sp, #12]
 800b91e:	001d      	movs	r5, r3
 800b920:	898b      	ldrh	r3, [r1, #12]
 800b922:	000f      	movs	r7, r1
 800b924:	0016      	movs	r6, r2
 800b926:	061b      	lsls	r3, r3, #24
 800b928:	d511      	bpl.n	800b94e <_svfiprintf_r+0x36>
 800b92a:	690b      	ldr	r3, [r1, #16]
 800b92c:	2b00      	cmp	r3, #0
 800b92e:	d10e      	bne.n	800b94e <_svfiprintf_r+0x36>
 800b930:	2140      	movs	r1, #64	; 0x40
 800b932:	f7ff fefd 	bl	800b730 <_malloc_r>
 800b936:	6038      	str	r0, [r7, #0]
 800b938:	6138      	str	r0, [r7, #16]
 800b93a:	2800      	cmp	r0, #0
 800b93c:	d105      	bne.n	800b94a <_svfiprintf_r+0x32>
 800b93e:	230c      	movs	r3, #12
 800b940:	9a03      	ldr	r2, [sp, #12]
 800b942:	3801      	subs	r0, #1
 800b944:	6013      	str	r3, [r2, #0]
 800b946:	b021      	add	sp, #132	; 0x84
 800b948:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b94a:	2340      	movs	r3, #64	; 0x40
 800b94c:	617b      	str	r3, [r7, #20]
 800b94e:	2300      	movs	r3, #0
 800b950:	ac08      	add	r4, sp, #32
 800b952:	6163      	str	r3, [r4, #20]
 800b954:	3320      	adds	r3, #32
 800b956:	7663      	strb	r3, [r4, #25]
 800b958:	3310      	adds	r3, #16
 800b95a:	76a3      	strb	r3, [r4, #26]
 800b95c:	9507      	str	r5, [sp, #28]
 800b95e:	0035      	movs	r5, r6
 800b960:	782b      	ldrb	r3, [r5, #0]
 800b962:	2b00      	cmp	r3, #0
 800b964:	d001      	beq.n	800b96a <_svfiprintf_r+0x52>
 800b966:	2b25      	cmp	r3, #37	; 0x25
 800b968:	d148      	bne.n	800b9fc <_svfiprintf_r+0xe4>
 800b96a:	1bab      	subs	r3, r5, r6
 800b96c:	9305      	str	r3, [sp, #20]
 800b96e:	42b5      	cmp	r5, r6
 800b970:	d00b      	beq.n	800b98a <_svfiprintf_r+0x72>
 800b972:	0032      	movs	r2, r6
 800b974:	0039      	movs	r1, r7
 800b976:	9803      	ldr	r0, [sp, #12]
 800b978:	f7ff ff6c 	bl	800b854 <__ssputs_r>
 800b97c:	3001      	adds	r0, #1
 800b97e:	d100      	bne.n	800b982 <_svfiprintf_r+0x6a>
 800b980:	e0af      	b.n	800bae2 <_svfiprintf_r+0x1ca>
 800b982:	6963      	ldr	r3, [r4, #20]
 800b984:	9a05      	ldr	r2, [sp, #20]
 800b986:	189b      	adds	r3, r3, r2
 800b988:	6163      	str	r3, [r4, #20]
 800b98a:	782b      	ldrb	r3, [r5, #0]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d100      	bne.n	800b992 <_svfiprintf_r+0x7a>
 800b990:	e0a7      	b.n	800bae2 <_svfiprintf_r+0x1ca>
 800b992:	2201      	movs	r2, #1
 800b994:	2300      	movs	r3, #0
 800b996:	4252      	negs	r2, r2
 800b998:	6062      	str	r2, [r4, #4]
 800b99a:	a904      	add	r1, sp, #16
 800b99c:	3254      	adds	r2, #84	; 0x54
 800b99e:	1852      	adds	r2, r2, r1
 800b9a0:	1c6e      	adds	r6, r5, #1
 800b9a2:	6023      	str	r3, [r4, #0]
 800b9a4:	60e3      	str	r3, [r4, #12]
 800b9a6:	60a3      	str	r3, [r4, #8]
 800b9a8:	7013      	strb	r3, [r2, #0]
 800b9aa:	65a3      	str	r3, [r4, #88]	; 0x58
 800b9ac:	4b55      	ldr	r3, [pc, #340]	; (800bb04 <_svfiprintf_r+0x1ec>)
 800b9ae:	2205      	movs	r2, #5
 800b9b0:	0018      	movs	r0, r3
 800b9b2:	7831      	ldrb	r1, [r6, #0]
 800b9b4:	9305      	str	r3, [sp, #20]
 800b9b6:	f000 fcd9 	bl	800c36c <memchr>
 800b9ba:	1c75      	adds	r5, r6, #1
 800b9bc:	2800      	cmp	r0, #0
 800b9be:	d11f      	bne.n	800ba00 <_svfiprintf_r+0xe8>
 800b9c0:	6822      	ldr	r2, [r4, #0]
 800b9c2:	06d3      	lsls	r3, r2, #27
 800b9c4:	d504      	bpl.n	800b9d0 <_svfiprintf_r+0xb8>
 800b9c6:	2353      	movs	r3, #83	; 0x53
 800b9c8:	a904      	add	r1, sp, #16
 800b9ca:	185b      	adds	r3, r3, r1
 800b9cc:	2120      	movs	r1, #32
 800b9ce:	7019      	strb	r1, [r3, #0]
 800b9d0:	0713      	lsls	r3, r2, #28
 800b9d2:	d504      	bpl.n	800b9de <_svfiprintf_r+0xc6>
 800b9d4:	2353      	movs	r3, #83	; 0x53
 800b9d6:	a904      	add	r1, sp, #16
 800b9d8:	185b      	adds	r3, r3, r1
 800b9da:	212b      	movs	r1, #43	; 0x2b
 800b9dc:	7019      	strb	r1, [r3, #0]
 800b9de:	7833      	ldrb	r3, [r6, #0]
 800b9e0:	2b2a      	cmp	r3, #42	; 0x2a
 800b9e2:	d016      	beq.n	800ba12 <_svfiprintf_r+0xfa>
 800b9e4:	0035      	movs	r5, r6
 800b9e6:	2100      	movs	r1, #0
 800b9e8:	200a      	movs	r0, #10
 800b9ea:	68e3      	ldr	r3, [r4, #12]
 800b9ec:	782a      	ldrb	r2, [r5, #0]
 800b9ee:	1c6e      	adds	r6, r5, #1
 800b9f0:	3a30      	subs	r2, #48	; 0x30
 800b9f2:	2a09      	cmp	r2, #9
 800b9f4:	d94e      	bls.n	800ba94 <_svfiprintf_r+0x17c>
 800b9f6:	2900      	cmp	r1, #0
 800b9f8:	d111      	bne.n	800ba1e <_svfiprintf_r+0x106>
 800b9fa:	e017      	b.n	800ba2c <_svfiprintf_r+0x114>
 800b9fc:	3501      	adds	r5, #1
 800b9fe:	e7af      	b.n	800b960 <_svfiprintf_r+0x48>
 800ba00:	9b05      	ldr	r3, [sp, #20]
 800ba02:	6822      	ldr	r2, [r4, #0]
 800ba04:	1ac0      	subs	r0, r0, r3
 800ba06:	2301      	movs	r3, #1
 800ba08:	4083      	lsls	r3, r0
 800ba0a:	4313      	orrs	r3, r2
 800ba0c:	002e      	movs	r6, r5
 800ba0e:	6023      	str	r3, [r4, #0]
 800ba10:	e7cc      	b.n	800b9ac <_svfiprintf_r+0x94>
 800ba12:	9b07      	ldr	r3, [sp, #28]
 800ba14:	1d19      	adds	r1, r3, #4
 800ba16:	681b      	ldr	r3, [r3, #0]
 800ba18:	9107      	str	r1, [sp, #28]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	db01      	blt.n	800ba22 <_svfiprintf_r+0x10a>
 800ba1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba20:	e004      	b.n	800ba2c <_svfiprintf_r+0x114>
 800ba22:	425b      	negs	r3, r3
 800ba24:	60e3      	str	r3, [r4, #12]
 800ba26:	2302      	movs	r3, #2
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	6023      	str	r3, [r4, #0]
 800ba2c:	782b      	ldrb	r3, [r5, #0]
 800ba2e:	2b2e      	cmp	r3, #46	; 0x2e
 800ba30:	d10a      	bne.n	800ba48 <_svfiprintf_r+0x130>
 800ba32:	786b      	ldrb	r3, [r5, #1]
 800ba34:	2b2a      	cmp	r3, #42	; 0x2a
 800ba36:	d135      	bne.n	800baa4 <_svfiprintf_r+0x18c>
 800ba38:	9b07      	ldr	r3, [sp, #28]
 800ba3a:	3502      	adds	r5, #2
 800ba3c:	1d1a      	adds	r2, r3, #4
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	9207      	str	r2, [sp, #28]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	db2b      	blt.n	800ba9e <_svfiprintf_r+0x186>
 800ba46:	9309      	str	r3, [sp, #36]	; 0x24
 800ba48:	4e2f      	ldr	r6, [pc, #188]	; (800bb08 <_svfiprintf_r+0x1f0>)
 800ba4a:	2203      	movs	r2, #3
 800ba4c:	0030      	movs	r0, r6
 800ba4e:	7829      	ldrb	r1, [r5, #0]
 800ba50:	f000 fc8c 	bl	800c36c <memchr>
 800ba54:	2800      	cmp	r0, #0
 800ba56:	d006      	beq.n	800ba66 <_svfiprintf_r+0x14e>
 800ba58:	2340      	movs	r3, #64	; 0x40
 800ba5a:	1b80      	subs	r0, r0, r6
 800ba5c:	4083      	lsls	r3, r0
 800ba5e:	6822      	ldr	r2, [r4, #0]
 800ba60:	3501      	adds	r5, #1
 800ba62:	4313      	orrs	r3, r2
 800ba64:	6023      	str	r3, [r4, #0]
 800ba66:	7829      	ldrb	r1, [r5, #0]
 800ba68:	2206      	movs	r2, #6
 800ba6a:	4828      	ldr	r0, [pc, #160]	; (800bb0c <_svfiprintf_r+0x1f4>)
 800ba6c:	1c6e      	adds	r6, r5, #1
 800ba6e:	7621      	strb	r1, [r4, #24]
 800ba70:	f000 fc7c 	bl	800c36c <memchr>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	d03c      	beq.n	800baf2 <_svfiprintf_r+0x1da>
 800ba78:	4b25      	ldr	r3, [pc, #148]	; (800bb10 <_svfiprintf_r+0x1f8>)
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d125      	bne.n	800baca <_svfiprintf_r+0x1b2>
 800ba7e:	2207      	movs	r2, #7
 800ba80:	9b07      	ldr	r3, [sp, #28]
 800ba82:	3307      	adds	r3, #7
 800ba84:	4393      	bics	r3, r2
 800ba86:	3308      	adds	r3, #8
 800ba88:	9307      	str	r3, [sp, #28]
 800ba8a:	6963      	ldr	r3, [r4, #20]
 800ba8c:	9a04      	ldr	r2, [sp, #16]
 800ba8e:	189b      	adds	r3, r3, r2
 800ba90:	6163      	str	r3, [r4, #20]
 800ba92:	e764      	b.n	800b95e <_svfiprintf_r+0x46>
 800ba94:	4343      	muls	r3, r0
 800ba96:	0035      	movs	r5, r6
 800ba98:	2101      	movs	r1, #1
 800ba9a:	189b      	adds	r3, r3, r2
 800ba9c:	e7a6      	b.n	800b9ec <_svfiprintf_r+0xd4>
 800ba9e:	2301      	movs	r3, #1
 800baa0:	425b      	negs	r3, r3
 800baa2:	e7d0      	b.n	800ba46 <_svfiprintf_r+0x12e>
 800baa4:	2300      	movs	r3, #0
 800baa6:	200a      	movs	r0, #10
 800baa8:	001a      	movs	r2, r3
 800baaa:	3501      	adds	r5, #1
 800baac:	6063      	str	r3, [r4, #4]
 800baae:	7829      	ldrb	r1, [r5, #0]
 800bab0:	1c6e      	adds	r6, r5, #1
 800bab2:	3930      	subs	r1, #48	; 0x30
 800bab4:	2909      	cmp	r1, #9
 800bab6:	d903      	bls.n	800bac0 <_svfiprintf_r+0x1a8>
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d0c5      	beq.n	800ba48 <_svfiprintf_r+0x130>
 800babc:	9209      	str	r2, [sp, #36]	; 0x24
 800babe:	e7c3      	b.n	800ba48 <_svfiprintf_r+0x130>
 800bac0:	4342      	muls	r2, r0
 800bac2:	0035      	movs	r5, r6
 800bac4:	2301      	movs	r3, #1
 800bac6:	1852      	adds	r2, r2, r1
 800bac8:	e7f1      	b.n	800baae <_svfiprintf_r+0x196>
 800baca:	aa07      	add	r2, sp, #28
 800bacc:	9200      	str	r2, [sp, #0]
 800bace:	0021      	movs	r1, r4
 800bad0:	003a      	movs	r2, r7
 800bad2:	4b10      	ldr	r3, [pc, #64]	; (800bb14 <_svfiprintf_r+0x1fc>)
 800bad4:	9803      	ldr	r0, [sp, #12]
 800bad6:	e000      	b.n	800bada <_svfiprintf_r+0x1c2>
 800bad8:	bf00      	nop
 800bada:	9004      	str	r0, [sp, #16]
 800badc:	9b04      	ldr	r3, [sp, #16]
 800bade:	3301      	adds	r3, #1
 800bae0:	d1d3      	bne.n	800ba8a <_svfiprintf_r+0x172>
 800bae2:	89bb      	ldrh	r3, [r7, #12]
 800bae4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bae6:	065b      	lsls	r3, r3, #25
 800bae8:	d400      	bmi.n	800baec <_svfiprintf_r+0x1d4>
 800baea:	e72c      	b.n	800b946 <_svfiprintf_r+0x2e>
 800baec:	2001      	movs	r0, #1
 800baee:	4240      	negs	r0, r0
 800baf0:	e729      	b.n	800b946 <_svfiprintf_r+0x2e>
 800baf2:	aa07      	add	r2, sp, #28
 800baf4:	9200      	str	r2, [sp, #0]
 800baf6:	0021      	movs	r1, r4
 800baf8:	003a      	movs	r2, r7
 800bafa:	4b06      	ldr	r3, [pc, #24]	; (800bb14 <_svfiprintf_r+0x1fc>)
 800bafc:	9803      	ldr	r0, [sp, #12]
 800bafe:	f000 f9bf 	bl	800be80 <_printf_i>
 800bb02:	e7ea      	b.n	800bada <_svfiprintf_r+0x1c2>
 800bb04:	0800c650 	.word	0x0800c650
 800bb08:	0800c656 	.word	0x0800c656
 800bb0c:	0800c65a 	.word	0x0800c65a
 800bb10:	00000000 	.word	0x00000000
 800bb14:	0800b855 	.word	0x0800b855

0800bb18 <__sfputc_r>:
 800bb18:	6893      	ldr	r3, [r2, #8]
 800bb1a:	b510      	push	{r4, lr}
 800bb1c:	3b01      	subs	r3, #1
 800bb1e:	6093      	str	r3, [r2, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	da04      	bge.n	800bb2e <__sfputc_r+0x16>
 800bb24:	6994      	ldr	r4, [r2, #24]
 800bb26:	42a3      	cmp	r3, r4
 800bb28:	db07      	blt.n	800bb3a <__sfputc_r+0x22>
 800bb2a:	290a      	cmp	r1, #10
 800bb2c:	d005      	beq.n	800bb3a <__sfputc_r+0x22>
 800bb2e:	6813      	ldr	r3, [r2, #0]
 800bb30:	1c58      	adds	r0, r3, #1
 800bb32:	6010      	str	r0, [r2, #0]
 800bb34:	7019      	strb	r1, [r3, #0]
 800bb36:	0008      	movs	r0, r1
 800bb38:	bd10      	pop	{r4, pc}
 800bb3a:	f7ff fc5b 	bl	800b3f4 <__swbuf_r>
 800bb3e:	0001      	movs	r1, r0
 800bb40:	e7f9      	b.n	800bb36 <__sfputc_r+0x1e>

0800bb42 <__sfputs_r>:
 800bb42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb44:	0006      	movs	r6, r0
 800bb46:	000f      	movs	r7, r1
 800bb48:	0014      	movs	r4, r2
 800bb4a:	18d5      	adds	r5, r2, r3
 800bb4c:	42ac      	cmp	r4, r5
 800bb4e:	d101      	bne.n	800bb54 <__sfputs_r+0x12>
 800bb50:	2000      	movs	r0, #0
 800bb52:	e007      	b.n	800bb64 <__sfputs_r+0x22>
 800bb54:	7821      	ldrb	r1, [r4, #0]
 800bb56:	003a      	movs	r2, r7
 800bb58:	0030      	movs	r0, r6
 800bb5a:	f7ff ffdd 	bl	800bb18 <__sfputc_r>
 800bb5e:	3401      	adds	r4, #1
 800bb60:	1c43      	adds	r3, r0, #1
 800bb62:	d1f3      	bne.n	800bb4c <__sfputs_r+0xa>
 800bb64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bb68 <_vfiprintf_r>:
 800bb68:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb6a:	b0a1      	sub	sp, #132	; 0x84
 800bb6c:	000f      	movs	r7, r1
 800bb6e:	0015      	movs	r5, r2
 800bb70:	001e      	movs	r6, r3
 800bb72:	9003      	str	r0, [sp, #12]
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d004      	beq.n	800bb82 <_vfiprintf_r+0x1a>
 800bb78:	6a03      	ldr	r3, [r0, #32]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d101      	bne.n	800bb82 <_vfiprintf_r+0x1a>
 800bb7e:	f7ff fb15 	bl	800b1ac <__sinit>
 800bb82:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb84:	07db      	lsls	r3, r3, #31
 800bb86:	d405      	bmi.n	800bb94 <_vfiprintf_r+0x2c>
 800bb88:	89bb      	ldrh	r3, [r7, #12]
 800bb8a:	059b      	lsls	r3, r3, #22
 800bb8c:	d402      	bmi.n	800bb94 <_vfiprintf_r+0x2c>
 800bb8e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bb90:	f7ff fd56 	bl	800b640 <__retarget_lock_acquire_recursive>
 800bb94:	89bb      	ldrh	r3, [r7, #12]
 800bb96:	071b      	lsls	r3, r3, #28
 800bb98:	d502      	bpl.n	800bba0 <_vfiprintf_r+0x38>
 800bb9a:	693b      	ldr	r3, [r7, #16]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d113      	bne.n	800bbc8 <_vfiprintf_r+0x60>
 800bba0:	0039      	movs	r1, r7
 800bba2:	9803      	ldr	r0, [sp, #12]
 800bba4:	f7ff fc68 	bl	800b478 <__swsetup_r>
 800bba8:	2800      	cmp	r0, #0
 800bbaa:	d00d      	beq.n	800bbc8 <_vfiprintf_r+0x60>
 800bbac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bbae:	07db      	lsls	r3, r3, #31
 800bbb0:	d503      	bpl.n	800bbba <_vfiprintf_r+0x52>
 800bbb2:	2001      	movs	r0, #1
 800bbb4:	4240      	negs	r0, r0
 800bbb6:	b021      	add	sp, #132	; 0x84
 800bbb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bbba:	89bb      	ldrh	r3, [r7, #12]
 800bbbc:	059b      	lsls	r3, r3, #22
 800bbbe:	d4f8      	bmi.n	800bbb2 <_vfiprintf_r+0x4a>
 800bbc0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bbc2:	f7ff fd3e 	bl	800b642 <__retarget_lock_release_recursive>
 800bbc6:	e7f4      	b.n	800bbb2 <_vfiprintf_r+0x4a>
 800bbc8:	2300      	movs	r3, #0
 800bbca:	ac08      	add	r4, sp, #32
 800bbcc:	6163      	str	r3, [r4, #20]
 800bbce:	3320      	adds	r3, #32
 800bbd0:	7663      	strb	r3, [r4, #25]
 800bbd2:	3310      	adds	r3, #16
 800bbd4:	76a3      	strb	r3, [r4, #26]
 800bbd6:	9607      	str	r6, [sp, #28]
 800bbd8:	002e      	movs	r6, r5
 800bbda:	7833      	ldrb	r3, [r6, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	d001      	beq.n	800bbe4 <_vfiprintf_r+0x7c>
 800bbe0:	2b25      	cmp	r3, #37	; 0x25
 800bbe2:	d148      	bne.n	800bc76 <_vfiprintf_r+0x10e>
 800bbe4:	1b73      	subs	r3, r6, r5
 800bbe6:	9305      	str	r3, [sp, #20]
 800bbe8:	42ae      	cmp	r6, r5
 800bbea:	d00b      	beq.n	800bc04 <_vfiprintf_r+0x9c>
 800bbec:	002a      	movs	r2, r5
 800bbee:	0039      	movs	r1, r7
 800bbf0:	9803      	ldr	r0, [sp, #12]
 800bbf2:	f7ff ffa6 	bl	800bb42 <__sfputs_r>
 800bbf6:	3001      	adds	r0, #1
 800bbf8:	d100      	bne.n	800bbfc <_vfiprintf_r+0x94>
 800bbfa:	e0af      	b.n	800bd5c <_vfiprintf_r+0x1f4>
 800bbfc:	6963      	ldr	r3, [r4, #20]
 800bbfe:	9a05      	ldr	r2, [sp, #20]
 800bc00:	189b      	adds	r3, r3, r2
 800bc02:	6163      	str	r3, [r4, #20]
 800bc04:	7833      	ldrb	r3, [r6, #0]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d100      	bne.n	800bc0c <_vfiprintf_r+0xa4>
 800bc0a:	e0a7      	b.n	800bd5c <_vfiprintf_r+0x1f4>
 800bc0c:	2201      	movs	r2, #1
 800bc0e:	2300      	movs	r3, #0
 800bc10:	4252      	negs	r2, r2
 800bc12:	6062      	str	r2, [r4, #4]
 800bc14:	a904      	add	r1, sp, #16
 800bc16:	3254      	adds	r2, #84	; 0x54
 800bc18:	1852      	adds	r2, r2, r1
 800bc1a:	1c75      	adds	r5, r6, #1
 800bc1c:	6023      	str	r3, [r4, #0]
 800bc1e:	60e3      	str	r3, [r4, #12]
 800bc20:	60a3      	str	r3, [r4, #8]
 800bc22:	7013      	strb	r3, [r2, #0]
 800bc24:	65a3      	str	r3, [r4, #88]	; 0x58
 800bc26:	4b59      	ldr	r3, [pc, #356]	; (800bd8c <_vfiprintf_r+0x224>)
 800bc28:	2205      	movs	r2, #5
 800bc2a:	0018      	movs	r0, r3
 800bc2c:	7829      	ldrb	r1, [r5, #0]
 800bc2e:	9305      	str	r3, [sp, #20]
 800bc30:	f000 fb9c 	bl	800c36c <memchr>
 800bc34:	1c6e      	adds	r6, r5, #1
 800bc36:	2800      	cmp	r0, #0
 800bc38:	d11f      	bne.n	800bc7a <_vfiprintf_r+0x112>
 800bc3a:	6822      	ldr	r2, [r4, #0]
 800bc3c:	06d3      	lsls	r3, r2, #27
 800bc3e:	d504      	bpl.n	800bc4a <_vfiprintf_r+0xe2>
 800bc40:	2353      	movs	r3, #83	; 0x53
 800bc42:	a904      	add	r1, sp, #16
 800bc44:	185b      	adds	r3, r3, r1
 800bc46:	2120      	movs	r1, #32
 800bc48:	7019      	strb	r1, [r3, #0]
 800bc4a:	0713      	lsls	r3, r2, #28
 800bc4c:	d504      	bpl.n	800bc58 <_vfiprintf_r+0xf0>
 800bc4e:	2353      	movs	r3, #83	; 0x53
 800bc50:	a904      	add	r1, sp, #16
 800bc52:	185b      	adds	r3, r3, r1
 800bc54:	212b      	movs	r1, #43	; 0x2b
 800bc56:	7019      	strb	r1, [r3, #0]
 800bc58:	782b      	ldrb	r3, [r5, #0]
 800bc5a:	2b2a      	cmp	r3, #42	; 0x2a
 800bc5c:	d016      	beq.n	800bc8c <_vfiprintf_r+0x124>
 800bc5e:	002e      	movs	r6, r5
 800bc60:	2100      	movs	r1, #0
 800bc62:	200a      	movs	r0, #10
 800bc64:	68e3      	ldr	r3, [r4, #12]
 800bc66:	7832      	ldrb	r2, [r6, #0]
 800bc68:	1c75      	adds	r5, r6, #1
 800bc6a:	3a30      	subs	r2, #48	; 0x30
 800bc6c:	2a09      	cmp	r2, #9
 800bc6e:	d94e      	bls.n	800bd0e <_vfiprintf_r+0x1a6>
 800bc70:	2900      	cmp	r1, #0
 800bc72:	d111      	bne.n	800bc98 <_vfiprintf_r+0x130>
 800bc74:	e017      	b.n	800bca6 <_vfiprintf_r+0x13e>
 800bc76:	3601      	adds	r6, #1
 800bc78:	e7af      	b.n	800bbda <_vfiprintf_r+0x72>
 800bc7a:	9b05      	ldr	r3, [sp, #20]
 800bc7c:	6822      	ldr	r2, [r4, #0]
 800bc7e:	1ac0      	subs	r0, r0, r3
 800bc80:	2301      	movs	r3, #1
 800bc82:	4083      	lsls	r3, r0
 800bc84:	4313      	orrs	r3, r2
 800bc86:	0035      	movs	r5, r6
 800bc88:	6023      	str	r3, [r4, #0]
 800bc8a:	e7cc      	b.n	800bc26 <_vfiprintf_r+0xbe>
 800bc8c:	9b07      	ldr	r3, [sp, #28]
 800bc8e:	1d19      	adds	r1, r3, #4
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	9107      	str	r1, [sp, #28]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	db01      	blt.n	800bc9c <_vfiprintf_r+0x134>
 800bc98:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc9a:	e004      	b.n	800bca6 <_vfiprintf_r+0x13e>
 800bc9c:	425b      	negs	r3, r3
 800bc9e:	60e3      	str	r3, [r4, #12]
 800bca0:	2302      	movs	r3, #2
 800bca2:	4313      	orrs	r3, r2
 800bca4:	6023      	str	r3, [r4, #0]
 800bca6:	7833      	ldrb	r3, [r6, #0]
 800bca8:	2b2e      	cmp	r3, #46	; 0x2e
 800bcaa:	d10a      	bne.n	800bcc2 <_vfiprintf_r+0x15a>
 800bcac:	7873      	ldrb	r3, [r6, #1]
 800bcae:	2b2a      	cmp	r3, #42	; 0x2a
 800bcb0:	d135      	bne.n	800bd1e <_vfiprintf_r+0x1b6>
 800bcb2:	9b07      	ldr	r3, [sp, #28]
 800bcb4:	3602      	adds	r6, #2
 800bcb6:	1d1a      	adds	r2, r3, #4
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	9207      	str	r2, [sp, #28]
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	db2b      	blt.n	800bd18 <_vfiprintf_r+0x1b0>
 800bcc0:	9309      	str	r3, [sp, #36]	; 0x24
 800bcc2:	4d33      	ldr	r5, [pc, #204]	; (800bd90 <_vfiprintf_r+0x228>)
 800bcc4:	2203      	movs	r2, #3
 800bcc6:	0028      	movs	r0, r5
 800bcc8:	7831      	ldrb	r1, [r6, #0]
 800bcca:	f000 fb4f 	bl	800c36c <memchr>
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d006      	beq.n	800bce0 <_vfiprintf_r+0x178>
 800bcd2:	2340      	movs	r3, #64	; 0x40
 800bcd4:	1b40      	subs	r0, r0, r5
 800bcd6:	4083      	lsls	r3, r0
 800bcd8:	6822      	ldr	r2, [r4, #0]
 800bcda:	3601      	adds	r6, #1
 800bcdc:	4313      	orrs	r3, r2
 800bcde:	6023      	str	r3, [r4, #0]
 800bce0:	7831      	ldrb	r1, [r6, #0]
 800bce2:	2206      	movs	r2, #6
 800bce4:	482b      	ldr	r0, [pc, #172]	; (800bd94 <_vfiprintf_r+0x22c>)
 800bce6:	1c75      	adds	r5, r6, #1
 800bce8:	7621      	strb	r1, [r4, #24]
 800bcea:	f000 fb3f 	bl	800c36c <memchr>
 800bcee:	2800      	cmp	r0, #0
 800bcf0:	d043      	beq.n	800bd7a <_vfiprintf_r+0x212>
 800bcf2:	4b29      	ldr	r3, [pc, #164]	; (800bd98 <_vfiprintf_r+0x230>)
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d125      	bne.n	800bd44 <_vfiprintf_r+0x1dc>
 800bcf8:	2207      	movs	r2, #7
 800bcfa:	9b07      	ldr	r3, [sp, #28]
 800bcfc:	3307      	adds	r3, #7
 800bcfe:	4393      	bics	r3, r2
 800bd00:	3308      	adds	r3, #8
 800bd02:	9307      	str	r3, [sp, #28]
 800bd04:	6963      	ldr	r3, [r4, #20]
 800bd06:	9a04      	ldr	r2, [sp, #16]
 800bd08:	189b      	adds	r3, r3, r2
 800bd0a:	6163      	str	r3, [r4, #20]
 800bd0c:	e764      	b.n	800bbd8 <_vfiprintf_r+0x70>
 800bd0e:	4343      	muls	r3, r0
 800bd10:	002e      	movs	r6, r5
 800bd12:	2101      	movs	r1, #1
 800bd14:	189b      	adds	r3, r3, r2
 800bd16:	e7a6      	b.n	800bc66 <_vfiprintf_r+0xfe>
 800bd18:	2301      	movs	r3, #1
 800bd1a:	425b      	negs	r3, r3
 800bd1c:	e7d0      	b.n	800bcc0 <_vfiprintf_r+0x158>
 800bd1e:	2300      	movs	r3, #0
 800bd20:	200a      	movs	r0, #10
 800bd22:	001a      	movs	r2, r3
 800bd24:	3601      	adds	r6, #1
 800bd26:	6063      	str	r3, [r4, #4]
 800bd28:	7831      	ldrb	r1, [r6, #0]
 800bd2a:	1c75      	adds	r5, r6, #1
 800bd2c:	3930      	subs	r1, #48	; 0x30
 800bd2e:	2909      	cmp	r1, #9
 800bd30:	d903      	bls.n	800bd3a <_vfiprintf_r+0x1d2>
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0c5      	beq.n	800bcc2 <_vfiprintf_r+0x15a>
 800bd36:	9209      	str	r2, [sp, #36]	; 0x24
 800bd38:	e7c3      	b.n	800bcc2 <_vfiprintf_r+0x15a>
 800bd3a:	4342      	muls	r2, r0
 800bd3c:	002e      	movs	r6, r5
 800bd3e:	2301      	movs	r3, #1
 800bd40:	1852      	adds	r2, r2, r1
 800bd42:	e7f1      	b.n	800bd28 <_vfiprintf_r+0x1c0>
 800bd44:	aa07      	add	r2, sp, #28
 800bd46:	9200      	str	r2, [sp, #0]
 800bd48:	0021      	movs	r1, r4
 800bd4a:	003a      	movs	r2, r7
 800bd4c:	4b13      	ldr	r3, [pc, #76]	; (800bd9c <_vfiprintf_r+0x234>)
 800bd4e:	9803      	ldr	r0, [sp, #12]
 800bd50:	e000      	b.n	800bd54 <_vfiprintf_r+0x1ec>
 800bd52:	bf00      	nop
 800bd54:	9004      	str	r0, [sp, #16]
 800bd56:	9b04      	ldr	r3, [sp, #16]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	d1d3      	bne.n	800bd04 <_vfiprintf_r+0x19c>
 800bd5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bd5e:	07db      	lsls	r3, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_vfiprintf_r+0x206>
 800bd62:	89bb      	ldrh	r3, [r7, #12]
 800bd64:	059b      	lsls	r3, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_vfiprintf_r+0x206>
 800bd68:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800bd6a:	f7ff fc6a 	bl	800b642 <__retarget_lock_release_recursive>
 800bd6e:	89bb      	ldrh	r3, [r7, #12]
 800bd70:	065b      	lsls	r3, r3, #25
 800bd72:	d500      	bpl.n	800bd76 <_vfiprintf_r+0x20e>
 800bd74:	e71d      	b.n	800bbb2 <_vfiprintf_r+0x4a>
 800bd76:	980d      	ldr	r0, [sp, #52]	; 0x34
 800bd78:	e71d      	b.n	800bbb6 <_vfiprintf_r+0x4e>
 800bd7a:	aa07      	add	r2, sp, #28
 800bd7c:	9200      	str	r2, [sp, #0]
 800bd7e:	0021      	movs	r1, r4
 800bd80:	003a      	movs	r2, r7
 800bd82:	4b06      	ldr	r3, [pc, #24]	; (800bd9c <_vfiprintf_r+0x234>)
 800bd84:	9803      	ldr	r0, [sp, #12]
 800bd86:	f000 f87b 	bl	800be80 <_printf_i>
 800bd8a:	e7e3      	b.n	800bd54 <_vfiprintf_r+0x1ec>
 800bd8c:	0800c650 	.word	0x0800c650
 800bd90:	0800c656 	.word	0x0800c656
 800bd94:	0800c65a 	.word	0x0800c65a
 800bd98:	00000000 	.word	0x00000000
 800bd9c:	0800bb43 	.word	0x0800bb43

0800bda0 <_printf_common>:
 800bda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bda2:	0016      	movs	r6, r2
 800bda4:	9301      	str	r3, [sp, #4]
 800bda6:	688a      	ldr	r2, [r1, #8]
 800bda8:	690b      	ldr	r3, [r1, #16]
 800bdaa:	000c      	movs	r4, r1
 800bdac:	9000      	str	r0, [sp, #0]
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	da00      	bge.n	800bdb4 <_printf_common+0x14>
 800bdb2:	0013      	movs	r3, r2
 800bdb4:	0022      	movs	r2, r4
 800bdb6:	6033      	str	r3, [r6, #0]
 800bdb8:	3243      	adds	r2, #67	; 0x43
 800bdba:	7812      	ldrb	r2, [r2, #0]
 800bdbc:	2a00      	cmp	r2, #0
 800bdbe:	d001      	beq.n	800bdc4 <_printf_common+0x24>
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	6033      	str	r3, [r6, #0]
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	069b      	lsls	r3, r3, #26
 800bdc8:	d502      	bpl.n	800bdd0 <_printf_common+0x30>
 800bdca:	6833      	ldr	r3, [r6, #0]
 800bdcc:	3302      	adds	r3, #2
 800bdce:	6033      	str	r3, [r6, #0]
 800bdd0:	6822      	ldr	r2, [r4, #0]
 800bdd2:	2306      	movs	r3, #6
 800bdd4:	0015      	movs	r5, r2
 800bdd6:	401d      	ands	r5, r3
 800bdd8:	421a      	tst	r2, r3
 800bdda:	d027      	beq.n	800be2c <_printf_common+0x8c>
 800bddc:	0023      	movs	r3, r4
 800bdde:	3343      	adds	r3, #67	; 0x43
 800bde0:	781b      	ldrb	r3, [r3, #0]
 800bde2:	1e5a      	subs	r2, r3, #1
 800bde4:	4193      	sbcs	r3, r2
 800bde6:	6822      	ldr	r2, [r4, #0]
 800bde8:	0692      	lsls	r2, r2, #26
 800bdea:	d430      	bmi.n	800be4e <_printf_common+0xae>
 800bdec:	0022      	movs	r2, r4
 800bdee:	9901      	ldr	r1, [sp, #4]
 800bdf0:	9800      	ldr	r0, [sp, #0]
 800bdf2:	9d08      	ldr	r5, [sp, #32]
 800bdf4:	3243      	adds	r2, #67	; 0x43
 800bdf6:	47a8      	blx	r5
 800bdf8:	3001      	adds	r0, #1
 800bdfa:	d025      	beq.n	800be48 <_printf_common+0xa8>
 800bdfc:	2206      	movs	r2, #6
 800bdfe:	6823      	ldr	r3, [r4, #0]
 800be00:	2500      	movs	r5, #0
 800be02:	4013      	ands	r3, r2
 800be04:	2b04      	cmp	r3, #4
 800be06:	d105      	bne.n	800be14 <_printf_common+0x74>
 800be08:	6833      	ldr	r3, [r6, #0]
 800be0a:	68e5      	ldr	r5, [r4, #12]
 800be0c:	1aed      	subs	r5, r5, r3
 800be0e:	43eb      	mvns	r3, r5
 800be10:	17db      	asrs	r3, r3, #31
 800be12:	401d      	ands	r5, r3
 800be14:	68a3      	ldr	r3, [r4, #8]
 800be16:	6922      	ldr	r2, [r4, #16]
 800be18:	4293      	cmp	r3, r2
 800be1a:	dd01      	ble.n	800be20 <_printf_common+0x80>
 800be1c:	1a9b      	subs	r3, r3, r2
 800be1e:	18ed      	adds	r5, r5, r3
 800be20:	2600      	movs	r6, #0
 800be22:	42b5      	cmp	r5, r6
 800be24:	d120      	bne.n	800be68 <_printf_common+0xc8>
 800be26:	2000      	movs	r0, #0
 800be28:	e010      	b.n	800be4c <_printf_common+0xac>
 800be2a:	3501      	adds	r5, #1
 800be2c:	68e3      	ldr	r3, [r4, #12]
 800be2e:	6832      	ldr	r2, [r6, #0]
 800be30:	1a9b      	subs	r3, r3, r2
 800be32:	42ab      	cmp	r3, r5
 800be34:	ddd2      	ble.n	800bddc <_printf_common+0x3c>
 800be36:	0022      	movs	r2, r4
 800be38:	2301      	movs	r3, #1
 800be3a:	9901      	ldr	r1, [sp, #4]
 800be3c:	9800      	ldr	r0, [sp, #0]
 800be3e:	9f08      	ldr	r7, [sp, #32]
 800be40:	3219      	adds	r2, #25
 800be42:	47b8      	blx	r7
 800be44:	3001      	adds	r0, #1
 800be46:	d1f0      	bne.n	800be2a <_printf_common+0x8a>
 800be48:	2001      	movs	r0, #1
 800be4a:	4240      	negs	r0, r0
 800be4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be4e:	2030      	movs	r0, #48	; 0x30
 800be50:	18e1      	adds	r1, r4, r3
 800be52:	3143      	adds	r1, #67	; 0x43
 800be54:	7008      	strb	r0, [r1, #0]
 800be56:	0021      	movs	r1, r4
 800be58:	1c5a      	adds	r2, r3, #1
 800be5a:	3145      	adds	r1, #69	; 0x45
 800be5c:	7809      	ldrb	r1, [r1, #0]
 800be5e:	18a2      	adds	r2, r4, r2
 800be60:	3243      	adds	r2, #67	; 0x43
 800be62:	3302      	adds	r3, #2
 800be64:	7011      	strb	r1, [r2, #0]
 800be66:	e7c1      	b.n	800bdec <_printf_common+0x4c>
 800be68:	0022      	movs	r2, r4
 800be6a:	2301      	movs	r3, #1
 800be6c:	9901      	ldr	r1, [sp, #4]
 800be6e:	9800      	ldr	r0, [sp, #0]
 800be70:	9f08      	ldr	r7, [sp, #32]
 800be72:	321a      	adds	r2, #26
 800be74:	47b8      	blx	r7
 800be76:	3001      	adds	r0, #1
 800be78:	d0e6      	beq.n	800be48 <_printf_common+0xa8>
 800be7a:	3601      	adds	r6, #1
 800be7c:	e7d1      	b.n	800be22 <_printf_common+0x82>
	...

0800be80 <_printf_i>:
 800be80:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be82:	b08b      	sub	sp, #44	; 0x2c
 800be84:	9206      	str	r2, [sp, #24]
 800be86:	000a      	movs	r2, r1
 800be88:	3243      	adds	r2, #67	; 0x43
 800be8a:	9307      	str	r3, [sp, #28]
 800be8c:	9005      	str	r0, [sp, #20]
 800be8e:	9204      	str	r2, [sp, #16]
 800be90:	7e0a      	ldrb	r2, [r1, #24]
 800be92:	000c      	movs	r4, r1
 800be94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800be96:	2a78      	cmp	r2, #120	; 0x78
 800be98:	d809      	bhi.n	800beae <_printf_i+0x2e>
 800be9a:	2a62      	cmp	r2, #98	; 0x62
 800be9c:	d80b      	bhi.n	800beb6 <_printf_i+0x36>
 800be9e:	2a00      	cmp	r2, #0
 800bea0:	d100      	bne.n	800bea4 <_printf_i+0x24>
 800bea2:	e0be      	b.n	800c022 <_printf_i+0x1a2>
 800bea4:	497c      	ldr	r1, [pc, #496]	; (800c098 <_printf_i+0x218>)
 800bea6:	9103      	str	r1, [sp, #12]
 800bea8:	2a58      	cmp	r2, #88	; 0x58
 800beaa:	d100      	bne.n	800beae <_printf_i+0x2e>
 800beac:	e093      	b.n	800bfd6 <_printf_i+0x156>
 800beae:	0026      	movs	r6, r4
 800beb0:	3642      	adds	r6, #66	; 0x42
 800beb2:	7032      	strb	r2, [r6, #0]
 800beb4:	e022      	b.n	800befc <_printf_i+0x7c>
 800beb6:	0010      	movs	r0, r2
 800beb8:	3863      	subs	r0, #99	; 0x63
 800beba:	2815      	cmp	r0, #21
 800bebc:	d8f7      	bhi.n	800beae <_printf_i+0x2e>
 800bebe:	f7f4 f923 	bl	8000108 <__gnu_thumb1_case_shi>
 800bec2:	0016      	.short	0x0016
 800bec4:	fff6001f 	.word	0xfff6001f
 800bec8:	fff6fff6 	.word	0xfff6fff6
 800becc:	001ffff6 	.word	0x001ffff6
 800bed0:	fff6fff6 	.word	0xfff6fff6
 800bed4:	fff6fff6 	.word	0xfff6fff6
 800bed8:	003600a3 	.word	0x003600a3
 800bedc:	fff60083 	.word	0xfff60083
 800bee0:	00b4fff6 	.word	0x00b4fff6
 800bee4:	0036fff6 	.word	0x0036fff6
 800bee8:	fff6fff6 	.word	0xfff6fff6
 800beec:	0087      	.short	0x0087
 800beee:	0026      	movs	r6, r4
 800bef0:	681a      	ldr	r2, [r3, #0]
 800bef2:	3642      	adds	r6, #66	; 0x42
 800bef4:	1d11      	adds	r1, r2, #4
 800bef6:	6019      	str	r1, [r3, #0]
 800bef8:	6813      	ldr	r3, [r2, #0]
 800befa:	7033      	strb	r3, [r6, #0]
 800befc:	2301      	movs	r3, #1
 800befe:	e0a2      	b.n	800c046 <_printf_i+0x1c6>
 800bf00:	6818      	ldr	r0, [r3, #0]
 800bf02:	6809      	ldr	r1, [r1, #0]
 800bf04:	1d02      	adds	r2, r0, #4
 800bf06:	060d      	lsls	r5, r1, #24
 800bf08:	d50b      	bpl.n	800bf22 <_printf_i+0xa2>
 800bf0a:	6805      	ldr	r5, [r0, #0]
 800bf0c:	601a      	str	r2, [r3, #0]
 800bf0e:	2d00      	cmp	r5, #0
 800bf10:	da03      	bge.n	800bf1a <_printf_i+0x9a>
 800bf12:	232d      	movs	r3, #45	; 0x2d
 800bf14:	9a04      	ldr	r2, [sp, #16]
 800bf16:	426d      	negs	r5, r5
 800bf18:	7013      	strb	r3, [r2, #0]
 800bf1a:	4b5f      	ldr	r3, [pc, #380]	; (800c098 <_printf_i+0x218>)
 800bf1c:	270a      	movs	r7, #10
 800bf1e:	9303      	str	r3, [sp, #12]
 800bf20:	e01b      	b.n	800bf5a <_printf_i+0xda>
 800bf22:	6805      	ldr	r5, [r0, #0]
 800bf24:	601a      	str	r2, [r3, #0]
 800bf26:	0649      	lsls	r1, r1, #25
 800bf28:	d5f1      	bpl.n	800bf0e <_printf_i+0x8e>
 800bf2a:	b22d      	sxth	r5, r5
 800bf2c:	e7ef      	b.n	800bf0e <_printf_i+0x8e>
 800bf2e:	680d      	ldr	r5, [r1, #0]
 800bf30:	6819      	ldr	r1, [r3, #0]
 800bf32:	1d08      	adds	r0, r1, #4
 800bf34:	6018      	str	r0, [r3, #0]
 800bf36:	062e      	lsls	r6, r5, #24
 800bf38:	d501      	bpl.n	800bf3e <_printf_i+0xbe>
 800bf3a:	680d      	ldr	r5, [r1, #0]
 800bf3c:	e003      	b.n	800bf46 <_printf_i+0xc6>
 800bf3e:	066d      	lsls	r5, r5, #25
 800bf40:	d5fb      	bpl.n	800bf3a <_printf_i+0xba>
 800bf42:	680d      	ldr	r5, [r1, #0]
 800bf44:	b2ad      	uxth	r5, r5
 800bf46:	4b54      	ldr	r3, [pc, #336]	; (800c098 <_printf_i+0x218>)
 800bf48:	2708      	movs	r7, #8
 800bf4a:	9303      	str	r3, [sp, #12]
 800bf4c:	2a6f      	cmp	r2, #111	; 0x6f
 800bf4e:	d000      	beq.n	800bf52 <_printf_i+0xd2>
 800bf50:	3702      	adds	r7, #2
 800bf52:	0023      	movs	r3, r4
 800bf54:	2200      	movs	r2, #0
 800bf56:	3343      	adds	r3, #67	; 0x43
 800bf58:	701a      	strb	r2, [r3, #0]
 800bf5a:	6863      	ldr	r3, [r4, #4]
 800bf5c:	60a3      	str	r3, [r4, #8]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	db03      	blt.n	800bf6a <_printf_i+0xea>
 800bf62:	2104      	movs	r1, #4
 800bf64:	6822      	ldr	r2, [r4, #0]
 800bf66:	438a      	bics	r2, r1
 800bf68:	6022      	str	r2, [r4, #0]
 800bf6a:	2d00      	cmp	r5, #0
 800bf6c:	d102      	bne.n	800bf74 <_printf_i+0xf4>
 800bf6e:	9e04      	ldr	r6, [sp, #16]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	d00c      	beq.n	800bf8e <_printf_i+0x10e>
 800bf74:	9e04      	ldr	r6, [sp, #16]
 800bf76:	0028      	movs	r0, r5
 800bf78:	0039      	movs	r1, r7
 800bf7a:	f7f4 f955 	bl	8000228 <__aeabi_uidivmod>
 800bf7e:	9b03      	ldr	r3, [sp, #12]
 800bf80:	3e01      	subs	r6, #1
 800bf82:	5c5b      	ldrb	r3, [r3, r1]
 800bf84:	7033      	strb	r3, [r6, #0]
 800bf86:	002b      	movs	r3, r5
 800bf88:	0005      	movs	r5, r0
 800bf8a:	429f      	cmp	r7, r3
 800bf8c:	d9f3      	bls.n	800bf76 <_printf_i+0xf6>
 800bf8e:	2f08      	cmp	r7, #8
 800bf90:	d109      	bne.n	800bfa6 <_printf_i+0x126>
 800bf92:	6823      	ldr	r3, [r4, #0]
 800bf94:	07db      	lsls	r3, r3, #31
 800bf96:	d506      	bpl.n	800bfa6 <_printf_i+0x126>
 800bf98:	6862      	ldr	r2, [r4, #4]
 800bf9a:	6923      	ldr	r3, [r4, #16]
 800bf9c:	429a      	cmp	r2, r3
 800bf9e:	dc02      	bgt.n	800bfa6 <_printf_i+0x126>
 800bfa0:	2330      	movs	r3, #48	; 0x30
 800bfa2:	3e01      	subs	r6, #1
 800bfa4:	7033      	strb	r3, [r6, #0]
 800bfa6:	9b04      	ldr	r3, [sp, #16]
 800bfa8:	1b9b      	subs	r3, r3, r6
 800bfaa:	6123      	str	r3, [r4, #16]
 800bfac:	9b07      	ldr	r3, [sp, #28]
 800bfae:	0021      	movs	r1, r4
 800bfb0:	9300      	str	r3, [sp, #0]
 800bfb2:	9805      	ldr	r0, [sp, #20]
 800bfb4:	9b06      	ldr	r3, [sp, #24]
 800bfb6:	aa09      	add	r2, sp, #36	; 0x24
 800bfb8:	f7ff fef2 	bl	800bda0 <_printf_common>
 800bfbc:	3001      	adds	r0, #1
 800bfbe:	d147      	bne.n	800c050 <_printf_i+0x1d0>
 800bfc0:	2001      	movs	r0, #1
 800bfc2:	4240      	negs	r0, r0
 800bfc4:	b00b      	add	sp, #44	; 0x2c
 800bfc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfc8:	2220      	movs	r2, #32
 800bfca:	6809      	ldr	r1, [r1, #0]
 800bfcc:	430a      	orrs	r2, r1
 800bfce:	6022      	str	r2, [r4, #0]
 800bfd0:	2278      	movs	r2, #120	; 0x78
 800bfd2:	4932      	ldr	r1, [pc, #200]	; (800c09c <_printf_i+0x21c>)
 800bfd4:	9103      	str	r1, [sp, #12]
 800bfd6:	0021      	movs	r1, r4
 800bfd8:	3145      	adds	r1, #69	; 0x45
 800bfda:	700a      	strb	r2, [r1, #0]
 800bfdc:	6819      	ldr	r1, [r3, #0]
 800bfde:	6822      	ldr	r2, [r4, #0]
 800bfe0:	c920      	ldmia	r1!, {r5}
 800bfe2:	0610      	lsls	r0, r2, #24
 800bfe4:	d402      	bmi.n	800bfec <_printf_i+0x16c>
 800bfe6:	0650      	lsls	r0, r2, #25
 800bfe8:	d500      	bpl.n	800bfec <_printf_i+0x16c>
 800bfea:	b2ad      	uxth	r5, r5
 800bfec:	6019      	str	r1, [r3, #0]
 800bfee:	07d3      	lsls	r3, r2, #31
 800bff0:	d502      	bpl.n	800bff8 <_printf_i+0x178>
 800bff2:	2320      	movs	r3, #32
 800bff4:	4313      	orrs	r3, r2
 800bff6:	6023      	str	r3, [r4, #0]
 800bff8:	2710      	movs	r7, #16
 800bffa:	2d00      	cmp	r5, #0
 800bffc:	d1a9      	bne.n	800bf52 <_printf_i+0xd2>
 800bffe:	2220      	movs	r2, #32
 800c000:	6823      	ldr	r3, [r4, #0]
 800c002:	4393      	bics	r3, r2
 800c004:	6023      	str	r3, [r4, #0]
 800c006:	e7a4      	b.n	800bf52 <_printf_i+0xd2>
 800c008:	681a      	ldr	r2, [r3, #0]
 800c00a:	680d      	ldr	r5, [r1, #0]
 800c00c:	1d10      	adds	r0, r2, #4
 800c00e:	6949      	ldr	r1, [r1, #20]
 800c010:	6018      	str	r0, [r3, #0]
 800c012:	6813      	ldr	r3, [r2, #0]
 800c014:	062e      	lsls	r6, r5, #24
 800c016:	d501      	bpl.n	800c01c <_printf_i+0x19c>
 800c018:	6019      	str	r1, [r3, #0]
 800c01a:	e002      	b.n	800c022 <_printf_i+0x1a2>
 800c01c:	066d      	lsls	r5, r5, #25
 800c01e:	d5fb      	bpl.n	800c018 <_printf_i+0x198>
 800c020:	8019      	strh	r1, [r3, #0]
 800c022:	2300      	movs	r3, #0
 800c024:	9e04      	ldr	r6, [sp, #16]
 800c026:	6123      	str	r3, [r4, #16]
 800c028:	e7c0      	b.n	800bfac <_printf_i+0x12c>
 800c02a:	681a      	ldr	r2, [r3, #0]
 800c02c:	1d11      	adds	r1, r2, #4
 800c02e:	6019      	str	r1, [r3, #0]
 800c030:	6816      	ldr	r6, [r2, #0]
 800c032:	2100      	movs	r1, #0
 800c034:	0030      	movs	r0, r6
 800c036:	6862      	ldr	r2, [r4, #4]
 800c038:	f000 f998 	bl	800c36c <memchr>
 800c03c:	2800      	cmp	r0, #0
 800c03e:	d001      	beq.n	800c044 <_printf_i+0x1c4>
 800c040:	1b80      	subs	r0, r0, r6
 800c042:	6060      	str	r0, [r4, #4]
 800c044:	6863      	ldr	r3, [r4, #4]
 800c046:	6123      	str	r3, [r4, #16]
 800c048:	2300      	movs	r3, #0
 800c04a:	9a04      	ldr	r2, [sp, #16]
 800c04c:	7013      	strb	r3, [r2, #0]
 800c04e:	e7ad      	b.n	800bfac <_printf_i+0x12c>
 800c050:	0032      	movs	r2, r6
 800c052:	6923      	ldr	r3, [r4, #16]
 800c054:	9906      	ldr	r1, [sp, #24]
 800c056:	9805      	ldr	r0, [sp, #20]
 800c058:	9d07      	ldr	r5, [sp, #28]
 800c05a:	47a8      	blx	r5
 800c05c:	3001      	adds	r0, #1
 800c05e:	d0af      	beq.n	800bfc0 <_printf_i+0x140>
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	079b      	lsls	r3, r3, #30
 800c064:	d415      	bmi.n	800c092 <_printf_i+0x212>
 800c066:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c068:	68e0      	ldr	r0, [r4, #12]
 800c06a:	4298      	cmp	r0, r3
 800c06c:	daaa      	bge.n	800bfc4 <_printf_i+0x144>
 800c06e:	0018      	movs	r0, r3
 800c070:	e7a8      	b.n	800bfc4 <_printf_i+0x144>
 800c072:	0022      	movs	r2, r4
 800c074:	2301      	movs	r3, #1
 800c076:	9906      	ldr	r1, [sp, #24]
 800c078:	9805      	ldr	r0, [sp, #20]
 800c07a:	9e07      	ldr	r6, [sp, #28]
 800c07c:	3219      	adds	r2, #25
 800c07e:	47b0      	blx	r6
 800c080:	3001      	adds	r0, #1
 800c082:	d09d      	beq.n	800bfc0 <_printf_i+0x140>
 800c084:	3501      	adds	r5, #1
 800c086:	68e3      	ldr	r3, [r4, #12]
 800c088:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c08a:	1a9b      	subs	r3, r3, r2
 800c08c:	42ab      	cmp	r3, r5
 800c08e:	dcf0      	bgt.n	800c072 <_printf_i+0x1f2>
 800c090:	e7e9      	b.n	800c066 <_printf_i+0x1e6>
 800c092:	2500      	movs	r5, #0
 800c094:	e7f7      	b.n	800c086 <_printf_i+0x206>
 800c096:	46c0      	nop			; (mov r8, r8)
 800c098:	0800c661 	.word	0x0800c661
 800c09c:	0800c672 	.word	0x0800c672

0800c0a0 <__sflush_r>:
 800c0a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0a2:	898b      	ldrh	r3, [r1, #12]
 800c0a4:	0005      	movs	r5, r0
 800c0a6:	000c      	movs	r4, r1
 800c0a8:	071a      	lsls	r2, r3, #28
 800c0aa:	d45c      	bmi.n	800c166 <__sflush_r+0xc6>
 800c0ac:	684a      	ldr	r2, [r1, #4]
 800c0ae:	2a00      	cmp	r2, #0
 800c0b0:	dc04      	bgt.n	800c0bc <__sflush_r+0x1c>
 800c0b2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c0b4:	2a00      	cmp	r2, #0
 800c0b6:	dc01      	bgt.n	800c0bc <__sflush_r+0x1c>
 800c0b8:	2000      	movs	r0, #0
 800c0ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c0bc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c0be:	2f00      	cmp	r7, #0
 800c0c0:	d0fa      	beq.n	800c0b8 <__sflush_r+0x18>
 800c0c2:	2200      	movs	r2, #0
 800c0c4:	2080      	movs	r0, #128	; 0x80
 800c0c6:	682e      	ldr	r6, [r5, #0]
 800c0c8:	602a      	str	r2, [r5, #0]
 800c0ca:	001a      	movs	r2, r3
 800c0cc:	0140      	lsls	r0, r0, #5
 800c0ce:	6a21      	ldr	r1, [r4, #32]
 800c0d0:	4002      	ands	r2, r0
 800c0d2:	4203      	tst	r3, r0
 800c0d4:	d034      	beq.n	800c140 <__sflush_r+0xa0>
 800c0d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c0d8:	89a3      	ldrh	r3, [r4, #12]
 800c0da:	075b      	lsls	r3, r3, #29
 800c0dc:	d506      	bpl.n	800c0ec <__sflush_r+0x4c>
 800c0de:	6863      	ldr	r3, [r4, #4]
 800c0e0:	1ac0      	subs	r0, r0, r3
 800c0e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d001      	beq.n	800c0ec <__sflush_r+0x4c>
 800c0e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c0ea:	1ac0      	subs	r0, r0, r3
 800c0ec:	0002      	movs	r2, r0
 800c0ee:	2300      	movs	r3, #0
 800c0f0:	0028      	movs	r0, r5
 800c0f2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c0f4:	6a21      	ldr	r1, [r4, #32]
 800c0f6:	47b8      	blx	r7
 800c0f8:	89a2      	ldrh	r2, [r4, #12]
 800c0fa:	1c43      	adds	r3, r0, #1
 800c0fc:	d106      	bne.n	800c10c <__sflush_r+0x6c>
 800c0fe:	6829      	ldr	r1, [r5, #0]
 800c100:	291d      	cmp	r1, #29
 800c102:	d82c      	bhi.n	800c15e <__sflush_r+0xbe>
 800c104:	4b2a      	ldr	r3, [pc, #168]	; (800c1b0 <__sflush_r+0x110>)
 800c106:	410b      	asrs	r3, r1
 800c108:	07db      	lsls	r3, r3, #31
 800c10a:	d428      	bmi.n	800c15e <__sflush_r+0xbe>
 800c10c:	2300      	movs	r3, #0
 800c10e:	6063      	str	r3, [r4, #4]
 800c110:	6923      	ldr	r3, [r4, #16]
 800c112:	6023      	str	r3, [r4, #0]
 800c114:	04d2      	lsls	r2, r2, #19
 800c116:	d505      	bpl.n	800c124 <__sflush_r+0x84>
 800c118:	1c43      	adds	r3, r0, #1
 800c11a:	d102      	bne.n	800c122 <__sflush_r+0x82>
 800c11c:	682b      	ldr	r3, [r5, #0]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d100      	bne.n	800c124 <__sflush_r+0x84>
 800c122:	6560      	str	r0, [r4, #84]	; 0x54
 800c124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c126:	602e      	str	r6, [r5, #0]
 800c128:	2900      	cmp	r1, #0
 800c12a:	d0c5      	beq.n	800c0b8 <__sflush_r+0x18>
 800c12c:	0023      	movs	r3, r4
 800c12e:	3344      	adds	r3, #68	; 0x44
 800c130:	4299      	cmp	r1, r3
 800c132:	d002      	beq.n	800c13a <__sflush_r+0x9a>
 800c134:	0028      	movs	r0, r5
 800c136:	f7ff fa8f 	bl	800b658 <_free_r>
 800c13a:	2000      	movs	r0, #0
 800c13c:	6360      	str	r0, [r4, #52]	; 0x34
 800c13e:	e7bc      	b.n	800c0ba <__sflush_r+0x1a>
 800c140:	2301      	movs	r3, #1
 800c142:	0028      	movs	r0, r5
 800c144:	47b8      	blx	r7
 800c146:	1c43      	adds	r3, r0, #1
 800c148:	d1c6      	bne.n	800c0d8 <__sflush_r+0x38>
 800c14a:	682b      	ldr	r3, [r5, #0]
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d0c3      	beq.n	800c0d8 <__sflush_r+0x38>
 800c150:	2b1d      	cmp	r3, #29
 800c152:	d001      	beq.n	800c158 <__sflush_r+0xb8>
 800c154:	2b16      	cmp	r3, #22
 800c156:	d101      	bne.n	800c15c <__sflush_r+0xbc>
 800c158:	602e      	str	r6, [r5, #0]
 800c15a:	e7ad      	b.n	800c0b8 <__sflush_r+0x18>
 800c15c:	89a2      	ldrh	r2, [r4, #12]
 800c15e:	2340      	movs	r3, #64	; 0x40
 800c160:	4313      	orrs	r3, r2
 800c162:	81a3      	strh	r3, [r4, #12]
 800c164:	e7a9      	b.n	800c0ba <__sflush_r+0x1a>
 800c166:	690e      	ldr	r6, [r1, #16]
 800c168:	2e00      	cmp	r6, #0
 800c16a:	d0a5      	beq.n	800c0b8 <__sflush_r+0x18>
 800c16c:	680f      	ldr	r7, [r1, #0]
 800c16e:	600e      	str	r6, [r1, #0]
 800c170:	1bba      	subs	r2, r7, r6
 800c172:	9201      	str	r2, [sp, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	079b      	lsls	r3, r3, #30
 800c178:	d100      	bne.n	800c17c <__sflush_r+0xdc>
 800c17a:	694a      	ldr	r2, [r1, #20]
 800c17c:	60a2      	str	r2, [r4, #8]
 800c17e:	9b01      	ldr	r3, [sp, #4]
 800c180:	2b00      	cmp	r3, #0
 800c182:	dd99      	ble.n	800c0b8 <__sflush_r+0x18>
 800c184:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c186:	0032      	movs	r2, r6
 800c188:	001f      	movs	r7, r3
 800c18a:	0028      	movs	r0, r5
 800c18c:	9b01      	ldr	r3, [sp, #4]
 800c18e:	6a21      	ldr	r1, [r4, #32]
 800c190:	47b8      	blx	r7
 800c192:	2800      	cmp	r0, #0
 800c194:	dc06      	bgt.n	800c1a4 <__sflush_r+0x104>
 800c196:	2340      	movs	r3, #64	; 0x40
 800c198:	2001      	movs	r0, #1
 800c19a:	89a2      	ldrh	r2, [r4, #12]
 800c19c:	4240      	negs	r0, r0
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	81a3      	strh	r3, [r4, #12]
 800c1a2:	e78a      	b.n	800c0ba <__sflush_r+0x1a>
 800c1a4:	9b01      	ldr	r3, [sp, #4]
 800c1a6:	1836      	adds	r6, r6, r0
 800c1a8:	1a1b      	subs	r3, r3, r0
 800c1aa:	9301      	str	r3, [sp, #4]
 800c1ac:	e7e7      	b.n	800c17e <__sflush_r+0xde>
 800c1ae:	46c0      	nop			; (mov r8, r8)
 800c1b0:	dfbffffe 	.word	0xdfbffffe

0800c1b4 <_fflush_r>:
 800c1b4:	690b      	ldr	r3, [r1, #16]
 800c1b6:	b570      	push	{r4, r5, r6, lr}
 800c1b8:	0005      	movs	r5, r0
 800c1ba:	000c      	movs	r4, r1
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d102      	bne.n	800c1c6 <_fflush_r+0x12>
 800c1c0:	2500      	movs	r5, #0
 800c1c2:	0028      	movs	r0, r5
 800c1c4:	bd70      	pop	{r4, r5, r6, pc}
 800c1c6:	2800      	cmp	r0, #0
 800c1c8:	d004      	beq.n	800c1d4 <_fflush_r+0x20>
 800c1ca:	6a03      	ldr	r3, [r0, #32]
 800c1cc:	2b00      	cmp	r3, #0
 800c1ce:	d101      	bne.n	800c1d4 <_fflush_r+0x20>
 800c1d0:	f7fe ffec 	bl	800b1ac <__sinit>
 800c1d4:	220c      	movs	r2, #12
 800c1d6:	5ea3      	ldrsh	r3, [r4, r2]
 800c1d8:	2b00      	cmp	r3, #0
 800c1da:	d0f1      	beq.n	800c1c0 <_fflush_r+0xc>
 800c1dc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c1de:	07d2      	lsls	r2, r2, #31
 800c1e0:	d404      	bmi.n	800c1ec <_fflush_r+0x38>
 800c1e2:	059b      	lsls	r3, r3, #22
 800c1e4:	d402      	bmi.n	800c1ec <_fflush_r+0x38>
 800c1e6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c1e8:	f7ff fa2a 	bl	800b640 <__retarget_lock_acquire_recursive>
 800c1ec:	0028      	movs	r0, r5
 800c1ee:	0021      	movs	r1, r4
 800c1f0:	f7ff ff56 	bl	800c0a0 <__sflush_r>
 800c1f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c1f6:	0005      	movs	r5, r0
 800c1f8:	07db      	lsls	r3, r3, #31
 800c1fa:	d4e2      	bmi.n	800c1c2 <_fflush_r+0xe>
 800c1fc:	89a3      	ldrh	r3, [r4, #12]
 800c1fe:	059b      	lsls	r3, r3, #22
 800c200:	d4df      	bmi.n	800c1c2 <_fflush_r+0xe>
 800c202:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c204:	f7ff fa1d 	bl	800b642 <__retarget_lock_release_recursive>
 800c208:	e7db      	b.n	800c1c2 <_fflush_r+0xe>
	...

0800c20c <__swhatbuf_r>:
 800c20c:	b570      	push	{r4, r5, r6, lr}
 800c20e:	000e      	movs	r6, r1
 800c210:	001d      	movs	r5, r3
 800c212:	230e      	movs	r3, #14
 800c214:	5ec9      	ldrsh	r1, [r1, r3]
 800c216:	0014      	movs	r4, r2
 800c218:	b096      	sub	sp, #88	; 0x58
 800c21a:	2900      	cmp	r1, #0
 800c21c:	da0c      	bge.n	800c238 <__swhatbuf_r+0x2c>
 800c21e:	89b2      	ldrh	r2, [r6, #12]
 800c220:	2380      	movs	r3, #128	; 0x80
 800c222:	0011      	movs	r1, r2
 800c224:	4019      	ands	r1, r3
 800c226:	421a      	tst	r2, r3
 800c228:	d013      	beq.n	800c252 <__swhatbuf_r+0x46>
 800c22a:	2100      	movs	r1, #0
 800c22c:	3b40      	subs	r3, #64	; 0x40
 800c22e:	2000      	movs	r0, #0
 800c230:	6029      	str	r1, [r5, #0]
 800c232:	6023      	str	r3, [r4, #0]
 800c234:	b016      	add	sp, #88	; 0x58
 800c236:	bd70      	pop	{r4, r5, r6, pc}
 800c238:	466a      	mov	r2, sp
 800c23a:	f000 f861 	bl	800c300 <_fstat_r>
 800c23e:	2800      	cmp	r0, #0
 800c240:	dbed      	blt.n	800c21e <__swhatbuf_r+0x12>
 800c242:	23f0      	movs	r3, #240	; 0xf0
 800c244:	9901      	ldr	r1, [sp, #4]
 800c246:	021b      	lsls	r3, r3, #8
 800c248:	4019      	ands	r1, r3
 800c24a:	4b03      	ldr	r3, [pc, #12]	; (800c258 <__swhatbuf_r+0x4c>)
 800c24c:	18c9      	adds	r1, r1, r3
 800c24e:	424b      	negs	r3, r1
 800c250:	4159      	adcs	r1, r3
 800c252:	2380      	movs	r3, #128	; 0x80
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	e7ea      	b.n	800c22e <__swhatbuf_r+0x22>
 800c258:	ffffe000 	.word	0xffffe000

0800c25c <__smakebuf_r>:
 800c25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c25e:	2602      	movs	r6, #2
 800c260:	898b      	ldrh	r3, [r1, #12]
 800c262:	0005      	movs	r5, r0
 800c264:	000c      	movs	r4, r1
 800c266:	4233      	tst	r3, r6
 800c268:	d006      	beq.n	800c278 <__smakebuf_r+0x1c>
 800c26a:	0023      	movs	r3, r4
 800c26c:	3347      	adds	r3, #71	; 0x47
 800c26e:	6023      	str	r3, [r4, #0]
 800c270:	6123      	str	r3, [r4, #16]
 800c272:	2301      	movs	r3, #1
 800c274:	6163      	str	r3, [r4, #20]
 800c276:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c278:	466a      	mov	r2, sp
 800c27a:	ab01      	add	r3, sp, #4
 800c27c:	f7ff ffc6 	bl	800c20c <__swhatbuf_r>
 800c280:	9900      	ldr	r1, [sp, #0]
 800c282:	0007      	movs	r7, r0
 800c284:	0028      	movs	r0, r5
 800c286:	f7ff fa53 	bl	800b730 <_malloc_r>
 800c28a:	2800      	cmp	r0, #0
 800c28c:	d108      	bne.n	800c2a0 <__smakebuf_r+0x44>
 800c28e:	220c      	movs	r2, #12
 800c290:	5ea3      	ldrsh	r3, [r4, r2]
 800c292:	059a      	lsls	r2, r3, #22
 800c294:	d4ef      	bmi.n	800c276 <__smakebuf_r+0x1a>
 800c296:	2203      	movs	r2, #3
 800c298:	4393      	bics	r3, r2
 800c29a:	431e      	orrs	r6, r3
 800c29c:	81a6      	strh	r6, [r4, #12]
 800c29e:	e7e4      	b.n	800c26a <__smakebuf_r+0xe>
 800c2a0:	2380      	movs	r3, #128	; 0x80
 800c2a2:	89a2      	ldrh	r2, [r4, #12]
 800c2a4:	6020      	str	r0, [r4, #0]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	81a3      	strh	r3, [r4, #12]
 800c2aa:	9b00      	ldr	r3, [sp, #0]
 800c2ac:	6120      	str	r0, [r4, #16]
 800c2ae:	6163      	str	r3, [r4, #20]
 800c2b0:	9b01      	ldr	r3, [sp, #4]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d00c      	beq.n	800c2d0 <__smakebuf_r+0x74>
 800c2b6:	0028      	movs	r0, r5
 800c2b8:	230e      	movs	r3, #14
 800c2ba:	5ee1      	ldrsh	r1, [r4, r3]
 800c2bc:	f000 f832 	bl	800c324 <_isatty_r>
 800c2c0:	2800      	cmp	r0, #0
 800c2c2:	d005      	beq.n	800c2d0 <__smakebuf_r+0x74>
 800c2c4:	2303      	movs	r3, #3
 800c2c6:	89a2      	ldrh	r2, [r4, #12]
 800c2c8:	439a      	bics	r2, r3
 800c2ca:	3b02      	subs	r3, #2
 800c2cc:	4313      	orrs	r3, r2
 800c2ce:	81a3      	strh	r3, [r4, #12]
 800c2d0:	89a3      	ldrh	r3, [r4, #12]
 800c2d2:	433b      	orrs	r3, r7
 800c2d4:	81a3      	strh	r3, [r4, #12]
 800c2d6:	e7ce      	b.n	800c276 <__smakebuf_r+0x1a>

0800c2d8 <memmove>:
 800c2d8:	b510      	push	{r4, lr}
 800c2da:	4288      	cmp	r0, r1
 800c2dc:	d902      	bls.n	800c2e4 <memmove+0xc>
 800c2de:	188b      	adds	r3, r1, r2
 800c2e0:	4298      	cmp	r0, r3
 800c2e2:	d303      	bcc.n	800c2ec <memmove+0x14>
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	e007      	b.n	800c2f8 <memmove+0x20>
 800c2e8:	5c8b      	ldrb	r3, [r1, r2]
 800c2ea:	5483      	strb	r3, [r0, r2]
 800c2ec:	3a01      	subs	r2, #1
 800c2ee:	d2fb      	bcs.n	800c2e8 <memmove+0x10>
 800c2f0:	bd10      	pop	{r4, pc}
 800c2f2:	5ccc      	ldrb	r4, [r1, r3]
 800c2f4:	54c4      	strb	r4, [r0, r3]
 800c2f6:	3301      	adds	r3, #1
 800c2f8:	429a      	cmp	r2, r3
 800c2fa:	d1fa      	bne.n	800c2f2 <memmove+0x1a>
 800c2fc:	e7f8      	b.n	800c2f0 <memmove+0x18>
	...

0800c300 <_fstat_r>:
 800c300:	2300      	movs	r3, #0
 800c302:	b570      	push	{r4, r5, r6, lr}
 800c304:	4d06      	ldr	r5, [pc, #24]	; (800c320 <_fstat_r+0x20>)
 800c306:	0004      	movs	r4, r0
 800c308:	0008      	movs	r0, r1
 800c30a:	0011      	movs	r1, r2
 800c30c:	602b      	str	r3, [r5, #0]
 800c30e:	f7f5 fc36 	bl	8001b7e <_fstat>
 800c312:	1c43      	adds	r3, r0, #1
 800c314:	d103      	bne.n	800c31e <_fstat_r+0x1e>
 800c316:	682b      	ldr	r3, [r5, #0]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	d000      	beq.n	800c31e <_fstat_r+0x1e>
 800c31c:	6023      	str	r3, [r4, #0]
 800c31e:	bd70      	pop	{r4, r5, r6, pc}
 800c320:	20008840 	.word	0x20008840

0800c324 <_isatty_r>:
 800c324:	2300      	movs	r3, #0
 800c326:	b570      	push	{r4, r5, r6, lr}
 800c328:	4d06      	ldr	r5, [pc, #24]	; (800c344 <_isatty_r+0x20>)
 800c32a:	0004      	movs	r4, r0
 800c32c:	0008      	movs	r0, r1
 800c32e:	602b      	str	r3, [r5, #0]
 800c330:	f7f5 fc33 	bl	8001b9a <_isatty>
 800c334:	1c43      	adds	r3, r0, #1
 800c336:	d103      	bne.n	800c340 <_isatty_r+0x1c>
 800c338:	682b      	ldr	r3, [r5, #0]
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d000      	beq.n	800c340 <_isatty_r+0x1c>
 800c33e:	6023      	str	r3, [r4, #0]
 800c340:	bd70      	pop	{r4, r5, r6, pc}
 800c342:	46c0      	nop			; (mov r8, r8)
 800c344:	20008840 	.word	0x20008840

0800c348 <_sbrk_r>:
 800c348:	2300      	movs	r3, #0
 800c34a:	b570      	push	{r4, r5, r6, lr}
 800c34c:	4d06      	ldr	r5, [pc, #24]	; (800c368 <_sbrk_r+0x20>)
 800c34e:	0004      	movs	r4, r0
 800c350:	0008      	movs	r0, r1
 800c352:	602b      	str	r3, [r5, #0]
 800c354:	f7f5 fc36 	bl	8001bc4 <_sbrk>
 800c358:	1c43      	adds	r3, r0, #1
 800c35a:	d103      	bne.n	800c364 <_sbrk_r+0x1c>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d000      	beq.n	800c364 <_sbrk_r+0x1c>
 800c362:	6023      	str	r3, [r4, #0]
 800c364:	bd70      	pop	{r4, r5, r6, pc}
 800c366:	46c0      	nop			; (mov r8, r8)
 800c368:	20008840 	.word	0x20008840

0800c36c <memchr>:
 800c36c:	b2c9      	uxtb	r1, r1
 800c36e:	1882      	adds	r2, r0, r2
 800c370:	4290      	cmp	r0, r2
 800c372:	d101      	bne.n	800c378 <memchr+0xc>
 800c374:	2000      	movs	r0, #0
 800c376:	4770      	bx	lr
 800c378:	7803      	ldrb	r3, [r0, #0]
 800c37a:	428b      	cmp	r3, r1
 800c37c:	d0fb      	beq.n	800c376 <memchr+0xa>
 800c37e:	3001      	adds	r0, #1
 800c380:	e7f6      	b.n	800c370 <memchr+0x4>

0800c382 <_realloc_r>:
 800c382:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c384:	0007      	movs	r7, r0
 800c386:	000e      	movs	r6, r1
 800c388:	0014      	movs	r4, r2
 800c38a:	2900      	cmp	r1, #0
 800c38c:	d105      	bne.n	800c39a <_realloc_r+0x18>
 800c38e:	0011      	movs	r1, r2
 800c390:	f7ff f9ce 	bl	800b730 <_malloc_r>
 800c394:	0005      	movs	r5, r0
 800c396:	0028      	movs	r0, r5
 800c398:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c39a:	2a00      	cmp	r2, #0
 800c39c:	d103      	bne.n	800c3a6 <_realloc_r+0x24>
 800c39e:	f7ff f95b 	bl	800b658 <_free_r>
 800c3a2:	0025      	movs	r5, r4
 800c3a4:	e7f7      	b.n	800c396 <_realloc_r+0x14>
 800c3a6:	f000 f81b 	bl	800c3e0 <_malloc_usable_size_r>
 800c3aa:	9001      	str	r0, [sp, #4]
 800c3ac:	4284      	cmp	r4, r0
 800c3ae:	d803      	bhi.n	800c3b8 <_realloc_r+0x36>
 800c3b0:	0035      	movs	r5, r6
 800c3b2:	0843      	lsrs	r3, r0, #1
 800c3b4:	42a3      	cmp	r3, r4
 800c3b6:	d3ee      	bcc.n	800c396 <_realloc_r+0x14>
 800c3b8:	0021      	movs	r1, r4
 800c3ba:	0038      	movs	r0, r7
 800c3bc:	f7ff f9b8 	bl	800b730 <_malloc_r>
 800c3c0:	1e05      	subs	r5, r0, #0
 800c3c2:	d0e8      	beq.n	800c396 <_realloc_r+0x14>
 800c3c4:	9b01      	ldr	r3, [sp, #4]
 800c3c6:	0022      	movs	r2, r4
 800c3c8:	429c      	cmp	r4, r3
 800c3ca:	d900      	bls.n	800c3ce <_realloc_r+0x4c>
 800c3cc:	001a      	movs	r2, r3
 800c3ce:	0031      	movs	r1, r6
 800c3d0:	0028      	movs	r0, r5
 800c3d2:	f7ff f937 	bl	800b644 <memcpy>
 800c3d6:	0031      	movs	r1, r6
 800c3d8:	0038      	movs	r0, r7
 800c3da:	f7ff f93d 	bl	800b658 <_free_r>
 800c3de:	e7da      	b.n	800c396 <_realloc_r+0x14>

0800c3e0 <_malloc_usable_size_r>:
 800c3e0:	1f0b      	subs	r3, r1, #4
 800c3e2:	681b      	ldr	r3, [r3, #0]
 800c3e4:	1f18      	subs	r0, r3, #4
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	da01      	bge.n	800c3ee <_malloc_usable_size_r+0xe>
 800c3ea:	580b      	ldr	r3, [r1, r0]
 800c3ec:	18c0      	adds	r0, r0, r3
 800c3ee:	4770      	bx	lr

0800c3f0 <_init>:
 800c3f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3f2:	46c0      	nop			; (mov r8, r8)
 800c3f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3f6:	bc08      	pop	{r3}
 800c3f8:	469e      	mov	lr, r3
 800c3fa:	4770      	bx	lr

0800c3fc <_fini>:
 800c3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3fe:	46c0      	nop			; (mov r8, r8)
 800c400:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c402:	bc08      	pop	{r3}
 800c404:	469e      	mov	lr, r3
 800c406:	4770      	bx	lr
