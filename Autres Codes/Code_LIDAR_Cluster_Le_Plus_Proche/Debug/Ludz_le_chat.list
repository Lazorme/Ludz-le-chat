
Ludz_le_chat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000afd8  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800b098  0800b098  0001b098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b334  0800b334  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b334  0800b334  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b334  0800b334  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b334  0800b334  0001b334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b338  0800b338  0001b338  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800b33c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008610  2000006c  0800b3a8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000867c  0800b3a8  0002867c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3d4  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004804  00000000  00000000  0003c4ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a48  00000000  00000000  00040cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001458  00000000  00000000  000426f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bab6  00000000  00000000  00043b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a6c  00000000  00000000  0005f606  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a56eb  00000000  00000000  00080072  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006764  00000000  00000000  00125760  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0012bec4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b080 	.word	0x0800b080

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800b080 	.word	0x0800b080

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 f8db 	bl	80005d4 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f82b 	bl	8000484 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 f8cd 	bl	80005d4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 f8c3 	bl	80005d4 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 f853 	bl	8000508 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 f849 	bl	8000508 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__eqdf2>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464e      	mov	r6, r9
 8000488:	4645      	mov	r5, r8
 800048a:	46de      	mov	lr, fp
 800048c:	4657      	mov	r7, sl
 800048e:	4690      	mov	r8, r2
 8000490:	b5e0      	push	{r5, r6, r7, lr}
 8000492:	0017      	movs	r7, r2
 8000494:	031a      	lsls	r2, r3, #12
 8000496:	0b12      	lsrs	r2, r2, #12
 8000498:	0005      	movs	r5, r0
 800049a:	4684      	mov	ip, r0
 800049c:	4819      	ldr	r0, [pc, #100]	; (8000504 <__eqdf2+0x80>)
 800049e:	030e      	lsls	r6, r1, #12
 80004a0:	004c      	lsls	r4, r1, #1
 80004a2:	4691      	mov	r9, r2
 80004a4:	005a      	lsls	r2, r3, #1
 80004a6:	0fdb      	lsrs	r3, r3, #31
 80004a8:	469b      	mov	fp, r3
 80004aa:	0b36      	lsrs	r6, r6, #12
 80004ac:	0d64      	lsrs	r4, r4, #21
 80004ae:	0fc9      	lsrs	r1, r1, #31
 80004b0:	0d52      	lsrs	r2, r2, #21
 80004b2:	4284      	cmp	r4, r0
 80004b4:	d019      	beq.n	80004ea <__eqdf2+0x66>
 80004b6:	4282      	cmp	r2, r0
 80004b8:	d010      	beq.n	80004dc <__eqdf2+0x58>
 80004ba:	2001      	movs	r0, #1
 80004bc:	4294      	cmp	r4, r2
 80004be:	d10e      	bne.n	80004de <__eqdf2+0x5a>
 80004c0:	454e      	cmp	r6, r9
 80004c2:	d10c      	bne.n	80004de <__eqdf2+0x5a>
 80004c4:	2001      	movs	r0, #1
 80004c6:	45c4      	cmp	ip, r8
 80004c8:	d109      	bne.n	80004de <__eqdf2+0x5a>
 80004ca:	4559      	cmp	r1, fp
 80004cc:	d017      	beq.n	80004fe <__eqdf2+0x7a>
 80004ce:	2c00      	cmp	r4, #0
 80004d0:	d105      	bne.n	80004de <__eqdf2+0x5a>
 80004d2:	0030      	movs	r0, r6
 80004d4:	4328      	orrs	r0, r5
 80004d6:	1e43      	subs	r3, r0, #1
 80004d8:	4198      	sbcs	r0, r3
 80004da:	e000      	b.n	80004de <__eqdf2+0x5a>
 80004dc:	2001      	movs	r0, #1
 80004de:	bcf0      	pop	{r4, r5, r6, r7}
 80004e0:	46bb      	mov	fp, r7
 80004e2:	46b2      	mov	sl, r6
 80004e4:	46a9      	mov	r9, r5
 80004e6:	46a0      	mov	r8, r4
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ea:	0033      	movs	r3, r6
 80004ec:	2001      	movs	r0, #1
 80004ee:	432b      	orrs	r3, r5
 80004f0:	d1f5      	bne.n	80004de <__eqdf2+0x5a>
 80004f2:	42a2      	cmp	r2, r4
 80004f4:	d1f3      	bne.n	80004de <__eqdf2+0x5a>
 80004f6:	464b      	mov	r3, r9
 80004f8:	433b      	orrs	r3, r7
 80004fa:	d1f0      	bne.n	80004de <__eqdf2+0x5a>
 80004fc:	e7e2      	b.n	80004c4 <__eqdf2+0x40>
 80004fe:	2000      	movs	r0, #0
 8000500:	e7ed      	b.n	80004de <__eqdf2+0x5a>
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	000007ff 	.word	0x000007ff

08000508 <__gedf2>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	4647      	mov	r7, r8
 800050c:	46ce      	mov	lr, r9
 800050e:	0004      	movs	r4, r0
 8000510:	0018      	movs	r0, r3
 8000512:	0016      	movs	r6, r2
 8000514:	031b      	lsls	r3, r3, #12
 8000516:	0b1b      	lsrs	r3, r3, #12
 8000518:	4d2d      	ldr	r5, [pc, #180]	; (80005d0 <__gedf2+0xc8>)
 800051a:	004a      	lsls	r2, r1, #1
 800051c:	4699      	mov	r9, r3
 800051e:	b580      	push	{r7, lr}
 8000520:	0043      	lsls	r3, r0, #1
 8000522:	030f      	lsls	r7, r1, #12
 8000524:	46a4      	mov	ip, r4
 8000526:	46b0      	mov	r8, r6
 8000528:	0b3f      	lsrs	r7, r7, #12
 800052a:	0d52      	lsrs	r2, r2, #21
 800052c:	0fc9      	lsrs	r1, r1, #31
 800052e:	0d5b      	lsrs	r3, r3, #21
 8000530:	0fc0      	lsrs	r0, r0, #31
 8000532:	42aa      	cmp	r2, r5
 8000534:	d021      	beq.n	800057a <__gedf2+0x72>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d013      	beq.n	8000562 <__gedf2+0x5a>
 800053a:	2a00      	cmp	r2, #0
 800053c:	d122      	bne.n	8000584 <__gedf2+0x7c>
 800053e:	433c      	orrs	r4, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <__gedf2+0x42>
 8000544:	464d      	mov	r5, r9
 8000546:	432e      	orrs	r6, r5
 8000548:	d022      	beq.n	8000590 <__gedf2+0x88>
 800054a:	2c00      	cmp	r4, #0
 800054c:	d010      	beq.n	8000570 <__gedf2+0x68>
 800054e:	4281      	cmp	r1, r0
 8000550:	d022      	beq.n	8000598 <__gedf2+0x90>
 8000552:	2002      	movs	r0, #2
 8000554:	3901      	subs	r1, #1
 8000556:	4008      	ands	r0, r1
 8000558:	3801      	subs	r0, #1
 800055a:	bcc0      	pop	{r6, r7}
 800055c:	46b9      	mov	r9, r7
 800055e:	46b0      	mov	r8, r6
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	464d      	mov	r5, r9
 8000564:	432e      	orrs	r6, r5
 8000566:	d129      	bne.n	80005bc <__gedf2+0xb4>
 8000568:	2a00      	cmp	r2, #0
 800056a:	d1f0      	bne.n	800054e <__gedf2+0x46>
 800056c:	433c      	orrs	r4, r7
 800056e:	d1ee      	bne.n	800054e <__gedf2+0x46>
 8000570:	2800      	cmp	r0, #0
 8000572:	d1f2      	bne.n	800055a <__gedf2+0x52>
 8000574:	2001      	movs	r0, #1
 8000576:	4240      	negs	r0, r0
 8000578:	e7ef      	b.n	800055a <__gedf2+0x52>
 800057a:	003d      	movs	r5, r7
 800057c:	4325      	orrs	r5, r4
 800057e:	d11d      	bne.n	80005bc <__gedf2+0xb4>
 8000580:	4293      	cmp	r3, r2
 8000582:	d0ee      	beq.n	8000562 <__gedf2+0x5a>
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1e2      	bne.n	800054e <__gedf2+0x46>
 8000588:	464c      	mov	r4, r9
 800058a:	4326      	orrs	r6, r4
 800058c:	d1df      	bne.n	800054e <__gedf2+0x46>
 800058e:	e7e0      	b.n	8000552 <__gedf2+0x4a>
 8000590:	2000      	movs	r0, #0
 8000592:	2c00      	cmp	r4, #0
 8000594:	d0e1      	beq.n	800055a <__gedf2+0x52>
 8000596:	e7dc      	b.n	8000552 <__gedf2+0x4a>
 8000598:	429a      	cmp	r2, r3
 800059a:	dc0a      	bgt.n	80005b2 <__gedf2+0xaa>
 800059c:	dbe8      	blt.n	8000570 <__gedf2+0x68>
 800059e:	454f      	cmp	r7, r9
 80005a0:	d8d7      	bhi.n	8000552 <__gedf2+0x4a>
 80005a2:	d00e      	beq.n	80005c2 <__gedf2+0xba>
 80005a4:	2000      	movs	r0, #0
 80005a6:	454f      	cmp	r7, r9
 80005a8:	d2d7      	bcs.n	800055a <__gedf2+0x52>
 80005aa:	2900      	cmp	r1, #0
 80005ac:	d0e2      	beq.n	8000574 <__gedf2+0x6c>
 80005ae:	0008      	movs	r0, r1
 80005b0:	e7d3      	b.n	800055a <__gedf2+0x52>
 80005b2:	4243      	negs	r3, r0
 80005b4:	4158      	adcs	r0, r3
 80005b6:	0040      	lsls	r0, r0, #1
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7ce      	b.n	800055a <__gedf2+0x52>
 80005bc:	2002      	movs	r0, #2
 80005be:	4240      	negs	r0, r0
 80005c0:	e7cb      	b.n	800055a <__gedf2+0x52>
 80005c2:	45c4      	cmp	ip, r8
 80005c4:	d8c5      	bhi.n	8000552 <__gedf2+0x4a>
 80005c6:	2000      	movs	r0, #0
 80005c8:	45c4      	cmp	ip, r8
 80005ca:	d2c6      	bcs.n	800055a <__gedf2+0x52>
 80005cc:	e7ed      	b.n	80005aa <__gedf2+0xa2>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	000007ff 	.word	0x000007ff

080005d4 <__ledf2>:
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	4647      	mov	r7, r8
 80005d8:	46ce      	mov	lr, r9
 80005da:	0004      	movs	r4, r0
 80005dc:	0018      	movs	r0, r3
 80005de:	0016      	movs	r6, r2
 80005e0:	031b      	lsls	r3, r3, #12
 80005e2:	0b1b      	lsrs	r3, r3, #12
 80005e4:	4d2c      	ldr	r5, [pc, #176]	; (8000698 <__ledf2+0xc4>)
 80005e6:	004a      	lsls	r2, r1, #1
 80005e8:	4699      	mov	r9, r3
 80005ea:	b580      	push	{r7, lr}
 80005ec:	0043      	lsls	r3, r0, #1
 80005ee:	030f      	lsls	r7, r1, #12
 80005f0:	46a4      	mov	ip, r4
 80005f2:	46b0      	mov	r8, r6
 80005f4:	0b3f      	lsrs	r7, r7, #12
 80005f6:	0d52      	lsrs	r2, r2, #21
 80005f8:	0fc9      	lsrs	r1, r1, #31
 80005fa:	0d5b      	lsrs	r3, r3, #21
 80005fc:	0fc0      	lsrs	r0, r0, #31
 80005fe:	42aa      	cmp	r2, r5
 8000600:	d00d      	beq.n	800061e <__ledf2+0x4a>
 8000602:	42ab      	cmp	r3, r5
 8000604:	d010      	beq.n	8000628 <__ledf2+0x54>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d127      	bne.n	800065a <__ledf2+0x86>
 800060a:	433c      	orrs	r4, r7
 800060c:	2b00      	cmp	r3, #0
 800060e:	d111      	bne.n	8000634 <__ledf2+0x60>
 8000610:	464d      	mov	r5, r9
 8000612:	432e      	orrs	r6, r5
 8000614:	d10e      	bne.n	8000634 <__ledf2+0x60>
 8000616:	2000      	movs	r0, #0
 8000618:	2c00      	cmp	r4, #0
 800061a:	d015      	beq.n	8000648 <__ledf2+0x74>
 800061c:	e00e      	b.n	800063c <__ledf2+0x68>
 800061e:	003d      	movs	r5, r7
 8000620:	4325      	orrs	r5, r4
 8000622:	d110      	bne.n	8000646 <__ledf2+0x72>
 8000624:	4293      	cmp	r3, r2
 8000626:	d118      	bne.n	800065a <__ledf2+0x86>
 8000628:	464d      	mov	r5, r9
 800062a:	432e      	orrs	r6, r5
 800062c:	d10b      	bne.n	8000646 <__ledf2+0x72>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d102      	bne.n	8000638 <__ledf2+0x64>
 8000632:	433c      	orrs	r4, r7
 8000634:	2c00      	cmp	r4, #0
 8000636:	d00b      	beq.n	8000650 <__ledf2+0x7c>
 8000638:	4281      	cmp	r1, r0
 800063a:	d014      	beq.n	8000666 <__ledf2+0x92>
 800063c:	2002      	movs	r0, #2
 800063e:	3901      	subs	r1, #1
 8000640:	4008      	ands	r0, r1
 8000642:	3801      	subs	r0, #1
 8000644:	e000      	b.n	8000648 <__ledf2+0x74>
 8000646:	2002      	movs	r0, #2
 8000648:	bcc0      	pop	{r6, r7}
 800064a:	46b9      	mov	r9, r7
 800064c:	46b0      	mov	r8, r6
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	2800      	cmp	r0, #0
 8000652:	d1f9      	bne.n	8000648 <__ledf2+0x74>
 8000654:	2001      	movs	r0, #1
 8000656:	4240      	negs	r0, r0
 8000658:	e7f6      	b.n	8000648 <__ledf2+0x74>
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1ec      	bne.n	8000638 <__ledf2+0x64>
 800065e:	464c      	mov	r4, r9
 8000660:	4326      	orrs	r6, r4
 8000662:	d1e9      	bne.n	8000638 <__ledf2+0x64>
 8000664:	e7ea      	b.n	800063c <__ledf2+0x68>
 8000666:	429a      	cmp	r2, r3
 8000668:	dd04      	ble.n	8000674 <__ledf2+0xa0>
 800066a:	4243      	negs	r3, r0
 800066c:	4158      	adcs	r0, r3
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	3801      	subs	r0, #1
 8000672:	e7e9      	b.n	8000648 <__ledf2+0x74>
 8000674:	429a      	cmp	r2, r3
 8000676:	dbeb      	blt.n	8000650 <__ledf2+0x7c>
 8000678:	454f      	cmp	r7, r9
 800067a:	d8df      	bhi.n	800063c <__ledf2+0x68>
 800067c:	d006      	beq.n	800068c <__ledf2+0xb8>
 800067e:	2000      	movs	r0, #0
 8000680:	454f      	cmp	r7, r9
 8000682:	d2e1      	bcs.n	8000648 <__ledf2+0x74>
 8000684:	2900      	cmp	r1, #0
 8000686:	d0e5      	beq.n	8000654 <__ledf2+0x80>
 8000688:	0008      	movs	r0, r1
 800068a:	e7dd      	b.n	8000648 <__ledf2+0x74>
 800068c:	45c4      	cmp	ip, r8
 800068e:	d8d5      	bhi.n	800063c <__ledf2+0x68>
 8000690:	2000      	movs	r0, #0
 8000692:	45c4      	cmp	ip, r8
 8000694:	d2d8      	bcs.n	8000648 <__ledf2+0x74>
 8000696:	e7f5      	b.n	8000684 <__ledf2+0xb0>
 8000698:	000007ff 	.word	0x000007ff

0800069c <__aeabi_d2iz>:
 800069c:	000a      	movs	r2, r1
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	4c13      	ldr	r4, [pc, #76]	; (80006f0 <__aeabi_d2iz+0x54>)
 80006a2:	0053      	lsls	r3, r2, #1
 80006a4:	0309      	lsls	r1, r1, #12
 80006a6:	0005      	movs	r5, r0
 80006a8:	0b09      	lsrs	r1, r1, #12
 80006aa:	2000      	movs	r0, #0
 80006ac:	0d5b      	lsrs	r3, r3, #21
 80006ae:	0fd2      	lsrs	r2, r2, #31
 80006b0:	42a3      	cmp	r3, r4
 80006b2:	dd04      	ble.n	80006be <__aeabi_d2iz+0x22>
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <__aeabi_d2iz+0x58>)
 80006b6:	4283      	cmp	r3, r0
 80006b8:	dd02      	ble.n	80006c0 <__aeabi_d2iz+0x24>
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <__aeabi_d2iz+0x5c>)
 80006bc:	18d0      	adds	r0, r2, r3
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	2080      	movs	r0, #128	; 0x80
 80006c2:	0340      	lsls	r0, r0, #13
 80006c4:	4301      	orrs	r1, r0
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <__aeabi_d2iz+0x60>)
 80006c8:	1ac0      	subs	r0, r0, r3
 80006ca:	281f      	cmp	r0, #31
 80006cc:	dd08      	ble.n	80006e0 <__aeabi_d2iz+0x44>
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <__aeabi_d2iz+0x64>)
 80006d0:	1ac3      	subs	r3, r0, r3
 80006d2:	40d9      	lsrs	r1, r3
 80006d4:	000b      	movs	r3, r1
 80006d6:	4258      	negs	r0, r3
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d1f0      	bne.n	80006be <__aeabi_d2iz+0x22>
 80006dc:	0018      	movs	r0, r3
 80006de:	e7ee      	b.n	80006be <__aeabi_d2iz+0x22>
 80006e0:	4c08      	ldr	r4, [pc, #32]	; (8000704 <__aeabi_d2iz+0x68>)
 80006e2:	40c5      	lsrs	r5, r0
 80006e4:	46a4      	mov	ip, r4
 80006e6:	4463      	add	r3, ip
 80006e8:	4099      	lsls	r1, r3
 80006ea:	000b      	movs	r3, r1
 80006ec:	432b      	orrs	r3, r5
 80006ee:	e7f2      	b.n	80006d6 <__aeabi_d2iz+0x3a>
 80006f0:	000003fe 	.word	0x000003fe
 80006f4:	0000041d 	.word	0x0000041d
 80006f8:	7fffffff 	.word	0x7fffffff
 80006fc:	00000433 	.word	0x00000433
 8000700:	00000413 	.word	0x00000413
 8000704:	fffffbed 	.word	0xfffffbed

08000708 <__aeabi_i2d>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	2800      	cmp	r0, #0
 800070c:	d016      	beq.n	800073c <__aeabi_i2d+0x34>
 800070e:	17c3      	asrs	r3, r0, #31
 8000710:	18c5      	adds	r5, r0, r3
 8000712:	405d      	eors	r5, r3
 8000714:	0fc4      	lsrs	r4, r0, #31
 8000716:	0028      	movs	r0, r5
 8000718:	f000 f826 	bl	8000768 <__clzsi2>
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <__aeabi_i2d+0x5c>)
 800071e:	1a1b      	subs	r3, r3, r0
 8000720:	280a      	cmp	r0, #10
 8000722:	dc16      	bgt.n	8000752 <__aeabi_i2d+0x4a>
 8000724:	0002      	movs	r2, r0
 8000726:	002e      	movs	r6, r5
 8000728:	3215      	adds	r2, #21
 800072a:	4096      	lsls	r6, r2
 800072c:	220b      	movs	r2, #11
 800072e:	1a12      	subs	r2, r2, r0
 8000730:	40d5      	lsrs	r5, r2
 8000732:	055b      	lsls	r3, r3, #21
 8000734:	032d      	lsls	r5, r5, #12
 8000736:	0b2d      	lsrs	r5, r5, #12
 8000738:	0d5b      	lsrs	r3, r3, #21
 800073a:	e003      	b.n	8000744 <__aeabi_i2d+0x3c>
 800073c:	2400      	movs	r4, #0
 800073e:	2300      	movs	r3, #0
 8000740:	2500      	movs	r5, #0
 8000742:	2600      	movs	r6, #0
 8000744:	051b      	lsls	r3, r3, #20
 8000746:	432b      	orrs	r3, r5
 8000748:	07e4      	lsls	r4, r4, #31
 800074a:	4323      	orrs	r3, r4
 800074c:	0030      	movs	r0, r6
 800074e:	0019      	movs	r1, r3
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	380b      	subs	r0, #11
 8000754:	4085      	lsls	r5, r0
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	032d      	lsls	r5, r5, #12
 800075a:	2600      	movs	r6, #0
 800075c:	0b2d      	lsrs	r5, r5, #12
 800075e:	0d5b      	lsrs	r3, r3, #21
 8000760:	e7f0      	b.n	8000744 <__aeabi_i2d+0x3c>
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	0000041e 	.word	0x0000041e

08000768 <__clzsi2>:
 8000768:	211c      	movs	r1, #28
 800076a:	2301      	movs	r3, #1
 800076c:	041b      	lsls	r3, r3, #16
 800076e:	4298      	cmp	r0, r3
 8000770:	d301      	bcc.n	8000776 <__clzsi2+0xe>
 8000772:	0c00      	lsrs	r0, r0, #16
 8000774:	3910      	subs	r1, #16
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	4298      	cmp	r0, r3
 800077a:	d301      	bcc.n	8000780 <__clzsi2+0x18>
 800077c:	0a00      	lsrs	r0, r0, #8
 800077e:	3908      	subs	r1, #8
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	4298      	cmp	r0, r3
 8000784:	d301      	bcc.n	800078a <__clzsi2+0x22>
 8000786:	0900      	lsrs	r0, r0, #4
 8000788:	3904      	subs	r1, #4
 800078a:	a202      	add	r2, pc, #8	; (adr r2, 8000794 <__clzsi2+0x2c>)
 800078c:	5c10      	ldrb	r0, [r2, r0]
 800078e:	1840      	adds	r0, r0, r1
 8000790:	4770      	bx	lr
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	02020304 	.word	0x02020304
 8000798:	01010101 	.word	0x01010101
	...

080007a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	230c      	movs	r3, #12
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f009 fd0c 	bl	800a1d0 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ba:	4a35      	ldr	r2, [pc, #212]	; (8000890 <MX_ADC1_Init+0xec>)
 80007bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_ADC1_Init+0xe8>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	05d2      	lsls	r2, r2, #23
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_ADC1_Init+0xe8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_ADC1_Init+0xe8>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	0392      	lsls	r2, r2, #14
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_ADC1_Init+0xe8>)
 80007dc:	2204      	movs	r2, #4
 80007de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_ADC1_Init+0xe8>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC1_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_ADC1_Init+0xe8>)
 8000806:	222c      	movs	r2, #44	; 0x2c
 8000808:	2100      	movs	r1, #0
 800080a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC1_Init+0xe8>)
 8000814:	2206      	movs	r2, #6
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ADC1_Init+0xe8>)
 800081a:	2206      	movs	r2, #6
 800081c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC1_Init+0xe8>)
 8000820:	223c      	movs	r2, #60	; 0x3c
 8000822:	2100      	movs	r1, #0
 8000824:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_ADC1_Init+0xe8>)
 800082e:	0018      	movs	r0, r3
 8000830:	f002 f822 	bl	8002878 <HAL_ADC_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000838:	f000 fdfa 	bl	8001430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	1d3a      	adds	r2, r7, #4
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_ADC1_Init+0xe8>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f002 f9b7 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800085e:	f000 fde7 	bl	8001430 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_ADC1_Init+0xf0>)
 8000866:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2204      	movs	r2, #4
 800086c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	1d3a      	adds	r2, r7, #4
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_ADC1_Init+0xe8>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f002 f9a7 	bl	8002bc8 <HAL_ADC_ConfigChannel>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087e:	f000 fdd7 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b004      	add	sp, #16
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000088 	.word	0x20000088
 8000890:	40012400 	.word	0x40012400
 8000894:	04000002 	.word	0x04000002

08000898 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08b      	sub	sp, #44	; 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	2414      	movs	r4, #20
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f009 fc90 	bl	800a1d0 <memset>
  if(adcHandle->Instance==ADC1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	; (800096c <HAL_ADC_MspInit+0xd4>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d154      	bne.n	8000964 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0349      	lsls	r1, r1, #13
 80008c4:	430a      	orrs	r2, r1
 80008c6:	641a      	str	r2, [r3, #64]	; 0x40
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	035b      	lsls	r3, r3, #13
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Shunt1_Pin|ADC_Shunt2_Pin;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2203      	movs	r2, #3
 80008f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2203      	movs	r2, #3
 80008f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	193a      	adds	r2, r7, r4
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f002 fe35 	bl	8003578 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <HAL_ADC_MspInit+0xe0>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000916:	2205      	movs	r2, #5
 8000918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0052      	lsls	r2, r2, #1
 8000932:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fbc2 	bl	80030d4 <HAL_DMA_Init>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000954:	f000 fd6c 	bl	8001430 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800095c:	651a      	str	r2, [r3, #80]	; 0x50
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b00b      	add	sp, #44	; 0x2c
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	40012400 	.word	0x40012400
 8000970:	40021000 	.word	0x40021000
 8000974:	200000ec 	.word	0x200000ec
 8000978:	40020008 	.word	0x40020008

0800097c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_FREERTOS_Init+0x2c>)
 8000986:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000988:	c313      	stmia	r3!, {r0, r1, r4}
 800098a:	ca03      	ldmia	r2!, {r0, r1}
 800098c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2100      	movs	r1, #0
 8000992:	0018      	movs	r0, r3
 8000994:	f007 f985 	bl	8007ca2 <osThreadCreate>
 8000998:	0002      	movs	r2, r0
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <MX_FREERTOS_Init+0x30>)
 800099c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b007      	add	sp, #28
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	0800b0a4 	.word	0x0800b0a4
 80009ac:	20000148 	.word	0x20000148

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f007 f99a 	bl	8007cf2 <osDelay>
 80009be:	e7fb      	b.n	80009b8 <StartDefaultTask+0x8>

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_DMA_Init+0x48>)
 80009c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_DMA_Init+0x48>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	639a      	str	r2, [r3, #56]	; 0x38
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_DMA_Init+0x48>)
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2103      	movs	r1, #3
 80009e2:	2009      	movs	r0, #9
 80009e4:	f002 fb50 	bl	8003088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e8:	2009      	movs	r0, #9
 80009ea:	f002 fb62 	bl	80030b2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2103      	movs	r1, #3
 80009f2:	200a      	movs	r0, #10
 80009f4:	f002 fb48 	bl	8003088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f002 fb5a 	bl	80030b2 <HAL_NVIC_EnableIRQ>

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40021000 	.word	0x40021000

08000a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	2414      	movs	r4, #20
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	0018      	movs	r0, r3
 8000a18:	2314      	movs	r3, #20
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f009 fbd7 	bl	800a1d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a26:	4b74      	ldr	r3, [pc, #464]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2e:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2204      	movs	r2, #4
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b6f      	ldr	r3, [pc, #444]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b6c      	ldr	r3, [pc, #432]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b68      	ldr	r3, [pc, #416]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b66      	ldr	r3, [pc, #408]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a70:	2102      	movs	r1, #2
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b60      	ldr	r3, [pc, #384]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b5d      	ldr	r3, [pc, #372]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a88:	2108      	movs	r1, #8
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b5a      	ldr	r3, [pc, #360]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2208      	movs	r2, #8
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	00d9      	lsls	r1, r3, #3
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f002 fecb 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000aaa:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <MX_GPIO_Init+0x1f0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	213f      	movs	r1, #63	; 0x3f
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f002 fec5 	bl	8003840 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 8000ab6:	4b52      	ldr	r3, [pc, #328]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2118      	movs	r1, #24
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 febf 	bl	8003840 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Bouton1_Pin|Bouton2_Pin;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2288      	movs	r2, #136	; 0x88
 8000acc:	0352      	lsls	r2, r2, #13
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x1f8>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f002 fd4b 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton3_Pin;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2288      	movs	r2, #136	; 0x88
 8000aec:	0352      	lsls	r2, r2, #13
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2201      	movs	r2, #1
 8000af4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton3_GPIO_Port, &GPIO_InitStruct);
 8000af6:	193a      	adds	r2, r7, r4
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fd3a 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Contact1_Pin|Contact2_Pin|Contact3_Pin|Contact4_Pin
 8000b04:	0021      	movs	r1, r4
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000b0a:	601a      	str	r2, [r3, #0]
                          |Bordure2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2288      	movs	r2, #136	; 0x88
 8000b10:	0352      	lsls	r2, r2, #13
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2202      	movs	r2, #2
 8000b18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	000c      	movs	r4, r1
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f002 fd28 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	00d2      	lsls	r2, r2, #3
 8000b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	000c      	movs	r4, r1
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b46:	193a      	adds	r2, r7, r4
 8000b48:	23a0      	movs	r3, #160	; 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 fd12 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	223f      	movs	r2, #63	; 0x3f
 8000b58:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_GPIO_Init+0x1f0>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f002 fd00 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2218      	movs	r2, #24
 8000b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2201      	movs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f002 fcee 	bl	8003578 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bordure1_Pin;
 8000b9c:	0021      	movs	r1, r4
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2288      	movs	r2, #136	; 0x88
 8000baa:	0352      	lsls	r2, r2, #13
 8000bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bordure1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000bb8:	0019      	movs	r1, r3
 8000bba:	0010      	movs	r0, r2
 8000bbc:	f002 fcdc 	bl	8003578 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f002 fa5f 	bl	8003088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f002 fa71 	bl	80030b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f002 fa57 	bl	8003088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000bda:	2006      	movs	r0, #6
 8000bdc:	f002 fa69 	bl	80030b2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2103      	movs	r1, #3
 8000be4:	2007      	movs	r0, #7
 8000be6:	f002 fa4f 	bl	8003088 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f002 fa61 	bl	80030b2 <HAL_NVIC_EnableIRQ>

}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b00b      	add	sp, #44	; 0x2c
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000c00 	.word	0x50000c00
 8000c00:	50000400 	.word	0x50000400
 8000c04:	50000800 	.word	0x50000800
 8000c08:	0000e220 	.word	0x0000e220

08000c0c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
 8000c18:	1d39      	adds	r1, r7, #4
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <__io_putchar+0x20>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f004 fe3b 	bl	8005898 <HAL_UART_Transmit>
	return chr;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	2000343c 	.word	0x2000343c

08000c30 <uart_transmit>:
int uart_transmit(uint8_t *p_data, uint16_t size){
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	000a      	movs	r2, r1
 8000c3a:	1cbb      	adds	r3, r7, #2
 8000c3c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, p_data, size, HAL_MAX_DELAY);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425c      	negs	r4, r3
 8000c42:	1cbb      	adds	r3, r7, #2
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <uart_transmit+0x2c>)
 8000c4a:	0023      	movs	r3, r4
 8000c4c:	f004 fe24 	bl	8005898 <HAL_UART_Transmit>
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b003      	add	sp, #12
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	200034d0 	.word	0x200034d0

08000c60 <uart_it_transmit>:
int uart_it_transmit(uint8_t *p_data, uint16_t size){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	000a      	movs	r2, r1
 8000c6a:	1cbb      	adds	r3, r7, #2
 8000c6c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart4, p_data, size);
 8000c6e:	1cbb      	adds	r3, r7, #2
 8000c70:	881a      	ldrh	r2, [r3, #0]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <uart_it_transmit+0x28>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f004 ff8c 	bl	8005b94 <HAL_UART_Transmit_IT>
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	200034d0 	.word	0x200034d0

08000c8c <uart_dma_transmit>:
int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	000a      	movs	r2, r1
 8000c96:	1cbb      	adds	r3, r7, #2
 8000c98:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart4, p_data, size);
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	881a      	ldrh	r2, [r3, #0]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <uart_dma_transmit+0x28>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f005 f876 	bl	8005d94 <HAL_UART_Transmit_DMA>
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	200034d0 	.word	0x200034d0

08000cb8 <uart_poll_receive>:
int uart_poll_receive(uint8_t *p_data, uint16_t size){
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	1cbb      	adds	r3, r7, #2
 8000cc4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive(&huart4, p_data, size, HAL_MAX_DELAY);
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	425c      	negs	r4, r3
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <uart_poll_receive+0x2c>)
 8000cd2:	0023      	movs	r3, r4
 8000cd4:	f004 fe7c 	bl	80059d0 <HAL_UART_Receive>
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b003      	add	sp, #12
 8000ce0:	bd90      	pop	{r4, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	200034d0 	.word	0x200034d0

08000ce8 <uart_it_receive>:
int uart_it_receive(uint8_t *p_data, uint16_t size){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	1cbb      	adds	r3, r7, #2
 8000cf4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart4, p_data, size);
 8000cf6:	1cbb      	adds	r3, r7, #2
 8000cf8:	881a      	ldrh	r2, [r3, #0]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <uart_it_receive+0x28>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f004 fff0 	bl	8005ce4 <HAL_UART_Receive_IT>
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	200034d0 	.word	0x200034d0

08000d14 <uart_dma_receive>:
int uart_dma_receive(uint8_t *p_data, uint16_t size){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	1cbb      	adds	r3, r7, #2
 8000d20:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, p_data, size);
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <uart_dma_receive+0x28>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f005 f8c4 	bl	8005eb8 <HAL_UART_Receive_DMA>
	return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	200034d0 	.word	0x200034d0

08000d40 <TaskLIDAR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TaskLIDAR (void * pvParameters){
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	for(;;){
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8000d48:	4bd7      	ldr	r3, [pc, #860]	; (80010a8 <TaskLIDAR+0x368>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4252      	negs	r2, r2
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f007 f993 	bl	800807e <xQueueSemaphoreTake>
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e188      	b.n	8001070 <TaskLIDAR+0x330>
			if(i==DATA_BUFF_SIZE/2){
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	23fa      	movs	r3, #250	; 0xfa
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d107      	bne.n	8000d78 <TaskLIDAR+0x38>
				xSemaphoreTake(SemClpCallBack, portMAX_DELAY);
 8000d68:	4bd0      	ldr	r3, [pc, #832]	; (80010ac <TaskLIDAR+0x36c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4252      	negs	r2, r2
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f007 f983 	bl	800807e <xQueueSemaphoreTake>
			}
			//Réponce à la commande Scan
			if(i==0){
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d14f      	bne.n	8000e1e <TaskLIDAR+0xde>
				if((h_LIDAR.data_buff[i]==0xA5) && (h_LIDAR.data_buff[i+1]==0x5A) && (h_LIDAR.data_buff[i+2]==0x05) && (h_LIDAR.data_buff[i+3]==0x00) && (h_LIDAR.data_buff[i+4]==0x00) && (h_LIDAR.data_buff[i+5]==0x40) && (h_LIDAR.data_buff[i+6]==0x81)){
 8000d7e:	4acc      	ldr	r2, [pc, #816]	; (80010b0 <TaskLIDAR+0x370>)
 8000d80:	2171      	movs	r1, #113	; 0x71
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	18d3      	adds	r3, r2, r3
 8000d86:	185b      	adds	r3, r3, r1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2ba5      	cmp	r3, #165	; 0xa5
 8000d8c:	d147      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4ac7      	ldr	r2, [pc, #796]	; (80010b0 <TaskLIDAR+0x370>)
 8000d94:	2171      	movs	r1, #113	; 0x71
 8000d96:	18d3      	adds	r3, r2, r3
 8000d98:	185b      	adds	r3, r3, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b5a      	cmp	r3, #90	; 0x5a
 8000d9e:	d13e      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3302      	adds	r3, #2
 8000da4:	4ac2      	ldr	r2, [pc, #776]	; (80010b0 <TaskLIDAR+0x370>)
 8000da6:	2171      	movs	r1, #113	; 0x71
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	185b      	adds	r3, r3, r1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	d135      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3303      	adds	r3, #3
 8000db6:	4abe      	ldr	r2, [pc, #760]	; (80010b0 <TaskLIDAR+0x370>)
 8000db8:	2171      	movs	r1, #113	; 0x71
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	185b      	adds	r3, r3, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d12c      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	4ab9      	ldr	r2, [pc, #740]	; (80010b0 <TaskLIDAR+0x370>)
 8000dca:	2171      	movs	r1, #113	; 0x71
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	185b      	adds	r3, r3, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d123      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3305      	adds	r3, #5
 8000dda:	4ab5      	ldr	r2, [pc, #724]	; (80010b0 <TaskLIDAR+0x370>)
 8000ddc:	2171      	movs	r1, #113	; 0x71
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	185b      	adds	r3, r3, r1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b40      	cmp	r3, #64	; 0x40
 8000de6:	d11a      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3306      	adds	r3, #6
 8000dec:	4ab0      	ldr	r2, [pc, #704]	; (80010b0 <TaskLIDAR+0x370>)
 8000dee:	2171      	movs	r1, #113	; 0x71
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	185b      	adds	r3, r3, r1
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b81      	cmp	r3, #129	; 0x81
 8000df8:	d111      	bne.n	8000e1e <TaskLIDAR+0xde>
					printf("Scan Command Reply\r\n");
 8000dfa:	4bae      	ldr	r3, [pc, #696]	; (80010b4 <TaskLIDAR+0x374>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f009 f8b7 	bl	8009f70 <puts>
					h_LIDAR.processing.idx=0;
 8000e02:	4bab      	ldr	r3, [pc, #684]	; (80010b0 <TaskLIDAR+0x370>)
 8000e04:	4aac      	ldr	r2, [pc, #688]	; (80010b8 <TaskLIDAR+0x378>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	5499      	strb	r1, [r3, r2]
					i=6;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	60fb      	str	r3, [r7, #12]
					frame_start=7;
 8000e0e:	4bab      	ldr	r3, [pc, #684]	; (80010bc <TaskLIDAR+0x37c>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
					frame_end=frame_start+4;
 8000e14:	4ba9      	ldr	r3, [pc, #676]	; (80010bc <TaskLIDAR+0x37c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1d1a      	adds	r2, r3, #4
 8000e1a:	4ba9      	ldr	r3, [pc, #676]	; (80010c0 <TaskLIDAR+0x380>)
 8000e1c:	601a      	str	r2, [r3, #0]
				}
			}

			if(i==frame_start){
 8000e1e:	4ba7      	ldr	r3, [pc, #668]	; (80010bc <TaskLIDAR+0x37c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d10a      	bne.n	8000e3e <TaskLIDAR+0xfe>
				h_LIDAR.processing.PH=h_LIDAR.data_buff[i];
 8000e28:	4aa1      	ldr	r2, [pc, #644]	; (80010b0 <TaskLIDAR+0x370>)
 8000e2a:	2171      	movs	r1, #113	; 0x71
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	185b      	adds	r3, r3, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b299      	uxth	r1, r3
 8000e36:	4b9e      	ldr	r3, [pc, #632]	; (80010b0 <TaskLIDAR+0x370>)
 8000e38:	4aa2      	ldr	r2, [pc, #648]	; (80010c4 <TaskLIDAR+0x384>)
 8000e3a:	5299      	strh	r1, [r3, r2]
 8000e3c:	e115      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+1){
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	; (80010bc <TaskLIDAR+0x37c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d112      	bne.n	8000e70 <TaskLIDAR+0x130>
				h_LIDAR.processing.PH=h_LIDAR.processing.PH|(h_LIDAR.data_buff[i]<<8);
 8000e4a:	4b99      	ldr	r3, [pc, #612]	; (80010b0 <TaskLIDAR+0x370>)
 8000e4c:	4a9d      	ldr	r2, [pc, #628]	; (80010c4 <TaskLIDAR+0x384>)
 8000e4e:	5a9b      	ldrh	r3, [r3, r2]
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	4997      	ldr	r1, [pc, #604]	; (80010b0 <TaskLIDAR+0x370>)
 8000e54:	2071      	movs	r0, #113	; 0x71
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	18cb      	adds	r3, r1, r3
 8000e5a:	181b      	adds	r3, r3, r0
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b299      	uxth	r1, r3
 8000e68:	4b91      	ldr	r3, [pc, #580]	; (80010b0 <TaskLIDAR+0x370>)
 8000e6a:	4a96      	ldr	r2, [pc, #600]	; (80010c4 <TaskLIDAR+0x384>)
 8000e6c:	5299      	strh	r1, [r3, r2]
 8000e6e:	e0fc      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+2){
 8000e70:	4b92      	ldr	r3, [pc, #584]	; (80010bc <TaskLIDAR+0x37c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d109      	bne.n	8000e90 <TaskLIDAR+0x150>
				h_LIDAR.processing.CT=h_LIDAR.data_buff[i];
 8000e7c:	4a8c      	ldr	r2, [pc, #560]	; (80010b0 <TaskLIDAR+0x370>)
 8000e7e:	2171      	movs	r1, #113	; 0x71
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	185b      	adds	r3, r3, r1
 8000e86:	7819      	ldrb	r1, [r3, #0]
 8000e88:	4b89      	ldr	r3, [pc, #548]	; (80010b0 <TaskLIDAR+0x370>)
 8000e8a:	4a8f      	ldr	r2, [pc, #572]	; (80010c8 <TaskLIDAR+0x388>)
 8000e8c:	5499      	strb	r1, [r3, r2]
 8000e8e:	e0ec      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+3){
 8000e90:	4b8a      	ldr	r3, [pc, #552]	; (80010bc <TaskLIDAR+0x37c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3303      	adds	r3, #3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d117      	bne.n	8000ecc <TaskLIDAR+0x18c>
				frame_end=frame_start+9+2*h_LIDAR.data_buff[i];
 8000e9c:	4b87      	ldr	r3, [pc, #540]	; (80010bc <TaskLIDAR+0x37c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3309      	adds	r3, #9
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4982      	ldr	r1, [pc, #520]	; (80010b0 <TaskLIDAR+0x370>)
 8000ea6:	2071      	movs	r0, #113	; 0x71
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	18cb      	adds	r3, r1, r3
 8000eac:	181b      	adds	r3, r3, r0
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	18d2      	adds	r2, r2, r3
 8000eb4:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <TaskLIDAR+0x380>)
 8000eb6:	601a      	str	r2, [r3, #0]
				h_LIDAR.processing.LSN=h_LIDAR.data_buff[i];
 8000eb8:	4a7d      	ldr	r2, [pc, #500]	; (80010b0 <TaskLIDAR+0x370>)
 8000eba:	2171      	movs	r1, #113	; 0x71
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	185b      	adds	r3, r3, r1
 8000ec2:	7819      	ldrb	r1, [r3, #0]
 8000ec4:	4b7a      	ldr	r3, [pc, #488]	; (80010b0 <TaskLIDAR+0x370>)
 8000ec6:	4a81      	ldr	r2, [pc, #516]	; (80010cc <TaskLIDAR+0x38c>)
 8000ec8:	5499      	strb	r1, [r3, r2]
 8000eca:	e0ce      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+4){
 8000ecc:	4b7b      	ldr	r3, [pc, #492]	; (80010bc <TaskLIDAR+0x37c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10a      	bne.n	8000eee <TaskLIDAR+0x1ae>
				h_LIDAR.processing.FSA=h_LIDAR.data_buff[i];
 8000ed8:	4a75      	ldr	r2, [pc, #468]	; (80010b0 <TaskLIDAR+0x370>)
 8000eda:	2171      	movs	r1, #113	; 0x71
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	185b      	adds	r3, r3, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <TaskLIDAR+0x370>)
 8000ee8:	4a79      	ldr	r2, [pc, #484]	; (80010d0 <TaskLIDAR+0x390>)
 8000eea:	5299      	strh	r1, [r3, r2]
 8000eec:	e0bd      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+5){
 8000eee:	4b73      	ldr	r3, [pc, #460]	; (80010bc <TaskLIDAR+0x37c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3305      	adds	r3, #5
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d112      	bne.n	8000f20 <TaskLIDAR+0x1e0>
				h_LIDAR.processing.FSA=h_LIDAR.processing.FSA|(h_LIDAR.data_buff[i]<<8);
 8000efa:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <TaskLIDAR+0x370>)
 8000efc:	4a74      	ldr	r2, [pc, #464]	; (80010d0 <TaskLIDAR+0x390>)
 8000efe:	5a9b      	ldrh	r3, [r3, r2]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	496b      	ldr	r1, [pc, #428]	; (80010b0 <TaskLIDAR+0x370>)
 8000f04:	2071      	movs	r0, #113	; 0x71
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	18cb      	adds	r3, r1, r3
 8000f0a:	181b      	adds	r3, r3, r0
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	b299      	uxth	r1, r3
 8000f18:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <TaskLIDAR+0x370>)
 8000f1a:	4a6d      	ldr	r2, [pc, #436]	; (80010d0 <TaskLIDAR+0x390>)
 8000f1c:	5299      	strh	r1, [r3, r2]
 8000f1e:	e0a4      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+6){
 8000f20:	4b66      	ldr	r3, [pc, #408]	; (80010bc <TaskLIDAR+0x37c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3306      	adds	r3, #6
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d10a      	bne.n	8000f42 <TaskLIDAR+0x202>
				h_LIDAR.processing.LSA=h_LIDAR.data_buff[i];
 8000f2c:	4a60      	ldr	r2, [pc, #384]	; (80010b0 <TaskLIDAR+0x370>)
 8000f2e:	2171      	movs	r1, #113	; 0x71
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	18d3      	adds	r3, r2, r3
 8000f34:	185b      	adds	r3, r3, r1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b299      	uxth	r1, r3
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <TaskLIDAR+0x370>)
 8000f3c:	4a65      	ldr	r2, [pc, #404]	; (80010d4 <TaskLIDAR+0x394>)
 8000f3e:	5299      	strh	r1, [r3, r2]
 8000f40:	e093      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+7){
 8000f42:	4b5e      	ldr	r3, [pc, #376]	; (80010bc <TaskLIDAR+0x37c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3307      	adds	r3, #7
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d112      	bne.n	8000f74 <TaskLIDAR+0x234>
				h_LIDAR.processing.LSA=h_LIDAR.processing.LSA|(h_LIDAR.data_buff[i]<<8);
 8000f4e:	4b58      	ldr	r3, [pc, #352]	; (80010b0 <TaskLIDAR+0x370>)
 8000f50:	4a60      	ldr	r2, [pc, #384]	; (80010d4 <TaskLIDAR+0x394>)
 8000f52:	5a9b      	ldrh	r3, [r3, r2]
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4956      	ldr	r1, [pc, #344]	; (80010b0 <TaskLIDAR+0x370>)
 8000f58:	2071      	movs	r0, #113	; 0x71
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	18cb      	adds	r3, r1, r3
 8000f5e:	181b      	adds	r3, r3, r0
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <TaskLIDAR+0x370>)
 8000f6e:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <TaskLIDAR+0x394>)
 8000f70:	5299      	strh	r1, [r3, r2]
 8000f72:	e07a      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+8){
 8000f74:	4b51      	ldr	r3, [pc, #324]	; (80010bc <TaskLIDAR+0x37c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3308      	adds	r3, #8
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d10a      	bne.n	8000f96 <TaskLIDAR+0x256>
				h_LIDAR.processing.CS=h_LIDAR.data_buff[i];
 8000f80:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <TaskLIDAR+0x370>)
 8000f82:	2171      	movs	r1, #113	; 0x71
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	185b      	adds	r3, r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <TaskLIDAR+0x370>)
 8000f90:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <TaskLIDAR+0x398>)
 8000f92:	5299      	strh	r1, [r3, r2]
 8000f94:	e069      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+9){
 8000f96:	4b49      	ldr	r3, [pc, #292]	; (80010bc <TaskLIDAR+0x37c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3309      	adds	r3, #9
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d112      	bne.n	8000fc8 <TaskLIDAR+0x288>
				h_LIDAR.processing.CS=h_LIDAR.processing.CS|(h_LIDAR.data_buff[i]<<8);
 8000fa2:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <TaskLIDAR+0x370>)
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <TaskLIDAR+0x398>)
 8000fa6:	5a9b      	ldrh	r3, [r3, r2]
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4941      	ldr	r1, [pc, #260]	; (80010b0 <TaskLIDAR+0x370>)
 8000fac:	2071      	movs	r0, #113	; 0x71
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	18cb      	adds	r3, r1, r3
 8000fb2:	181b      	adds	r3, r3, r0
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <TaskLIDAR+0x370>)
 8000fc2:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <TaskLIDAR+0x398>)
 8000fc4:	5299      	strh	r1, [r3, r2]
 8000fc6:	e050      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_end){
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <TaskLIDAR+0x380>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d136      	bne.n	8001040 <TaskLIDAR+0x300>
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <TaskLIDAR+0x370>)
 8000fd4:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <TaskLIDAR+0x378>)
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	b2d0      	uxtb	r0, r2
 8000fdc:	4a34      	ldr	r2, [pc, #208]	; (80010b0 <TaskLIDAR+0x370>)
 8000fde:	4936      	ldr	r1, [pc, #216]	; (80010b8 <TaskLIDAR+0x378>)
 8000fe0:	5450      	strb	r0, [r2, r1]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <TaskLIDAR+0x370>)
 8000fe6:	2171      	movs	r1, #113	; 0x71
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	18d3      	adds	r3, r2, r3
 8000fec:	185b      	adds	r3, r3, r1
 8000fee:	7819      	ldrb	r1, [r3, #0]
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <TaskLIDAR+0x370>)
 8000ff2:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <TaskLIDAR+0x39c>)
 8000ff4:	181b      	adds	r3, r3, r0
 8000ff6:	189b      	adds	r3, r3, r2
 8000ff8:	1c0a      	adds	r2, r1, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
				if(frame_end-frame_start>11){
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <TaskLIDAR+0x380>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <TaskLIDAR+0x37c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b0b      	cmp	r3, #11
 8001008:	dd0b      	ble.n	8001022 <TaskLIDAR+0x2e2>
					LIDAR_process_frame(&h_LIDAR); //On récupère les différents points
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <TaskLIDAR+0x370>)
 800100c:	0018      	movs	r0, r3
 800100e:	f008 fc91 	bl	8009934 <LIDAR_process_frame>
					medianFilter(&h_LIDAR); //On filtre ces points
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <TaskLIDAR+0x370>)
 8001014:	0018      	movs	r0, r3
 8001016:	f008 fe0f 	bl	8009c38 <medianFilter>
					find_clusters(&h_LIDAR); //On regroupe ces points
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <TaskLIDAR+0x370>)
 800101c:	0018      	movs	r0, r3
 800101e:	f008 fd4b 	bl	8009ab8 <find_clusters>
				}
				h_LIDAR.processing.idx=0;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <TaskLIDAR+0x370>)
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <TaskLIDAR+0x378>)
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]
				frame_start=frame_end+1;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <TaskLIDAR+0x380>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <TaskLIDAR+0x37c>)
 8001032:	601a      	str	r2, [r3, #0]
				frame_end=frame_start+5;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <TaskLIDAR+0x37c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1d5a      	adds	r2, r3, #5
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <TaskLIDAR+0x380>)
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e014      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else{
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <TaskLIDAR+0x370>)
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <TaskLIDAR+0x378>)
 8001044:	5c9b      	ldrb	r3, [r3, r2]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	b2d0      	uxtb	r0, r2
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <TaskLIDAR+0x370>)
 800104c:	491a      	ldr	r1, [pc, #104]	; (80010b8 <TaskLIDAR+0x378>)
 800104e:	5450      	strb	r0, [r2, r1]
 8001050:	0018      	movs	r0, r3
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <TaskLIDAR+0x370>)
 8001054:	2171      	movs	r1, #113	; 0x71
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	185b      	adds	r3, r3, r1
 800105c:	7819      	ldrb	r1, [r3, #0]
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <TaskLIDAR+0x370>)
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <TaskLIDAR+0x39c>)
 8001062:	181b      	adds	r3, r3, r0
 8001064:	189b      	adds	r3, r3, r2
 8001066:	1c0a      	adds	r2, r1, #0
 8001068:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	23fa      	movs	r3, #250	; 0xfa
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	429a      	cmp	r2, r3
 8001078:	da00      	bge.n	800107c <TaskLIDAR+0x33c>
 800107a:	e670      	b.n	8000d5e <TaskLIDAR+0x1e>
			}
		}
		frame_start=frame_start-DATA_BUFF_SIZE;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <TaskLIDAR+0x37c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4917      	ldr	r1, [pc, #92]	; (80010e0 <TaskLIDAR+0x3a0>)
 8001082:	185a      	adds	r2, r3, r1
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <TaskLIDAR+0x37c>)
 8001086:	601a      	str	r2, [r3, #0]
		frame_end=frame_end-DATA_BUFF_SIZE;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <TaskLIDAR+0x380>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	185a      	adds	r2, r3, r1
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <TaskLIDAR+0x380>)
 8001090:	601a      	str	r2, [r3, #0]
		//		printf("#\r\n");
		//		for(int i=0 ; i<360/2 ; i++){
		//			//printf("%d\r\n",h_LIDAR.processing.point_buff[2*i]); //On envoi les valeurs
		//			//printf("%d\r\n",h_LIDAR.processing.filtred_buff[2*i]); //On envoi les valeurs filtrées
		//		}
		printf("#\r\n"); //Envoi des clusters
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <TaskLIDAR+0x3a4>)
 8001094:	0018      	movs	r0, r3
 8001096:	f008 ff6b 	bl	8009f70 <puts>
		dist_min=1500;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <TaskLIDAR+0x3a8>)
 800109c:	4a13      	ldr	r2, [pc, #76]	; (80010ec <TaskLIDAR+0x3ac>)
 800109e:	601a      	str	r2, [r3, #0]
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 80010a0:	2300      	movs	r3, #0
 80010a2:	60bb      	str	r3, [r7, #8]
 80010a4:	e050      	b.n	8001148 <TaskLIDAR+0x408>
 80010a6:	46c0      	nop			; (mov r8, r8)
 80010a8:	2000316c 	.word	0x2000316c
 80010ac:	20003170 	.word	0x20003170
 80010b0:	2000014c 	.word	0x2000014c
 80010b4:	0800b0b8 	.word	0x0800b0b8
 80010b8:	0000101e 	.word	0x0000101e
 80010bc:	2000315c 	.word	0x2000315c
 80010c0:	20003160 	.word	0x20003160
 80010c4:	00001014 	.word	0x00001014
 80010c8:	00001016 	.word	0x00001016
 80010cc:	00001017 	.word	0x00001017
 80010d0:	00001018 	.word	0x00001018
 80010d4:	0000101a 	.word	0x0000101a
 80010d8:	0000101c 	.word	0x0000101c
 80010dc:	00001fbf 	.word	0x00001fbf
 80010e0:	fffff060 	.word	0xfffff060
 80010e4:	0800b0cc 	.word	0x0800b0cc
 80010e8:	20003164 	.word	0x20003164
 80010ec:	000005dc 	.word	0x000005dc
			//printf("%d,%d\r\n",h_LIDAR.processing.clusters[i].angle_moyen,h_LIDAR.processing.clusters[i].distance_moyenne); //On envoi les valeurs
			if(h_LIDAR.processing.clusters[i].distance_moyenne<dist_min && h_LIDAR.processing.clusters[i].distance_moyenne !=0){
 80010f0:	4926      	ldr	r1, [pc, #152]	; (800118c <TaskLIDAR+0x44c>)
 80010f2:	68ba      	ldr	r2, [r7, #8]
 80010f4:	4826      	ldr	r0, [pc, #152]	; (8001190 <TaskLIDAR+0x450>)
 80010f6:	0013      	movs	r3, r2
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	189b      	adds	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	18cb      	adds	r3, r1, r3
 8001100:	181b      	adds	r3, r3, r0
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <TaskLIDAR+0x454>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	429a      	cmp	r2, r3
 800110a:	da1a      	bge.n	8001142 <TaskLIDAR+0x402>
 800110c:	491f      	ldr	r1, [pc, #124]	; (800118c <TaskLIDAR+0x44c>)
 800110e:	68ba      	ldr	r2, [r7, #8]
 8001110:	481f      	ldr	r0, [pc, #124]	; (8001190 <TaskLIDAR+0x450>)
 8001112:	0013      	movs	r3, r2
 8001114:	005b      	lsls	r3, r3, #1
 8001116:	189b      	adds	r3, r3, r2
 8001118:	009b      	lsls	r3, r3, #2
 800111a:	18cb      	adds	r3, r1, r3
 800111c:	181b      	adds	r3, r3, r0
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00e      	beq.n	8001142 <TaskLIDAR+0x402>
				dist_min=h_LIDAR.processing.clusters[i].distance_moyenne;
 8001124:	4919      	ldr	r1, [pc, #100]	; (800118c <TaskLIDAR+0x44c>)
 8001126:	68ba      	ldr	r2, [r7, #8]
 8001128:	4819      	ldr	r0, [pc, #100]	; (8001190 <TaskLIDAR+0x450>)
 800112a:	0013      	movs	r3, r2
 800112c:	005b      	lsls	r3, r3, #1
 800112e:	189b      	adds	r3, r3, r2
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	18cb      	adds	r3, r1, r3
 8001134:	181b      	adds	r3, r3, r0
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4b16      	ldr	r3, [pc, #88]	; (8001194 <TaskLIDAR+0x454>)
 800113a:	601a      	str	r2, [r3, #0]
				idx_min=i;
 800113c:	4b16      	ldr	r3, [pc, #88]	; (8001198 <TaskLIDAR+0x458>)
 800113e:	68ba      	ldr	r2, [r7, #8]
 8001140:	601a      	str	r2, [r3, #0]
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 8001142:	68bb      	ldr	r3, [r7, #8]
 8001144:	3301      	adds	r3, #1
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <TaskLIDAR+0x44c>)
 800114a:	4a14      	ldr	r2, [pc, #80]	; (800119c <TaskLIDAR+0x45c>)
 800114c:	589b      	ldr	r3, [r3, r2]
 800114e:	68ba      	ldr	r2, [r7, #8]
 8001150:	429a      	cmp	r2, r3
 8001152:	dbcd      	blt.n	80010f0 <TaskLIDAR+0x3b0>
			}
		}
		printf("%d,%d\r\n",h_LIDAR.processing.clusters[idx_min].angle_moyen,h_LIDAR.processing.clusters[idx_min].distance_moyenne);
 8001154:	4b10      	ldr	r3, [pc, #64]	; (8001198 <TaskLIDAR+0x458>)
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	490c      	ldr	r1, [pc, #48]	; (800118c <TaskLIDAR+0x44c>)
 800115a:	4811      	ldr	r0, [pc, #68]	; (80011a0 <TaskLIDAR+0x460>)
 800115c:	0013      	movs	r3, r2
 800115e:	005b      	lsls	r3, r3, #1
 8001160:	189b      	adds	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	18cb      	adds	r3, r1, r3
 8001166:	181b      	adds	r3, r3, r0
 8001168:	6818      	ldr	r0, [r3, #0]
 800116a:	4b0b      	ldr	r3, [pc, #44]	; (8001198 <TaskLIDAR+0x458>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	4907      	ldr	r1, [pc, #28]	; (800118c <TaskLIDAR+0x44c>)
 8001170:	4c07      	ldr	r4, [pc, #28]	; (8001190 <TaskLIDAR+0x450>)
 8001172:	0013      	movs	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	189b      	adds	r3, r3, r2
 8001178:	009b      	lsls	r3, r3, #2
 800117a:	18cb      	adds	r3, r1, r3
 800117c:	191b      	adds	r3, r3, r4
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4b08      	ldr	r3, [pc, #32]	; (80011a4 <TaskLIDAR+0x464>)
 8001182:	0001      	movs	r1, r0
 8001184:	0018      	movs	r0, r3
 8001186:	f008 fe8d 	bl	8009ea4 <iprintf>
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 800118a:	e5dd      	b.n	8000d48 <TaskLIDAR+0x8>
 800118c:	2000014c 	.word	0x2000014c
 8001190:	00002b60 	.word	0x00002b60
 8001194:	20003164 	.word	0x20003164
 8001198:	20003168 	.word	0x20003168
 800119c:	0000300c 	.word	0x0000300c
 80011a0:	00002b5c 	.word	0x00002b5c
 80011a4:	0800b0d0 	.word	0x0800b0d0

080011a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	TaskHandle_t xHandleLIDAR = NULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011b2:	f001 f9ed 	bl	8002590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011b6:	f000 f893 	bl	80012e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ba:	f7ff fc27 	bl	8000a0c <MX_GPIO_Init>
  MX_DMA_Init();
 80011be:	f7ff fbff 	bl	80009c0 <MX_DMA_Init>
  MX_ADC1_Init();
 80011c2:	f7ff faef 	bl	80007a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80011c6:	f000 fb8f 	bl	80018e8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80011ca:	f000 fbf7 	bl	80019bc <MX_TIM3_Init>
  MX_TIM14_Init();
 80011ce:	f000 fc95 	bl	8001afc <MX_TIM14_Init>
  MX_TIM15_Init();
 80011d2:	f000 fce3 	bl	8001b9c <MX_TIM15_Init>
  MX_TIM16_Init();
 80011d6:	f000 fd85 	bl	8001ce4 <MX_TIM16_Init>
  MX_TIM17_Init();
 80011da:	f000 fe0b 	bl	8001df4 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 80011de:	f001 f863 	bl	80022a8 <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 80011e2:	f001 f8af 	bl	8002344 <MX_USART4_UART_Init>
  MX_SPI1_Init();
 80011e6:	f000 f929 	bl	800143c <MX_SPI1_Init>
  MX_TIM6_Init();
 80011ea:	f000 fc4b 	bl	8001a84 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	h_LIDAR.serial_drv.transmit=uart_transmit;
 80011ee:	4b2e      	ldr	r3, [pc, #184]	; (80012a8 <main+0x100>)
 80011f0:	4a2e      	ldr	r2, [pc, #184]	; (80012ac <main+0x104>)
 80011f2:	601a      	str	r2, [r3, #0]
	h_LIDAR.serial_drv.it_transmit=uart_it_transmit;
 80011f4:	4b2c      	ldr	r3, [pc, #176]	; (80012a8 <main+0x100>)
 80011f6:	4a2e      	ldr	r2, [pc, #184]	; (80012b0 <main+0x108>)
 80011f8:	605a      	str	r2, [r3, #4]
	h_LIDAR.serial_drv.dma_transmit=uart_dma_transmit;
 80011fa:	4b2b      	ldr	r3, [pc, #172]	; (80012a8 <main+0x100>)
 80011fc:	4a2d      	ldr	r2, [pc, #180]	; (80012b4 <main+0x10c>)
 80011fe:	609a      	str	r2, [r3, #8]
	h_LIDAR.serial_drv.poll_receive=uart_poll_receive;
 8001200:	4b29      	ldr	r3, [pc, #164]	; (80012a8 <main+0x100>)
 8001202:	4a2d      	ldr	r2, [pc, #180]	; (80012b8 <main+0x110>)
 8001204:	60da      	str	r2, [r3, #12]
	h_LIDAR.serial_drv.it_receive=uart_it_receive;
 8001206:	4b28      	ldr	r3, [pc, #160]	; (80012a8 <main+0x100>)
 8001208:	4a2c      	ldr	r2, [pc, #176]	; (80012bc <main+0x114>)
 800120a:	611a      	str	r2, [r3, #16]
	h_LIDAR.serial_drv.dma_receive=uart_dma_receive;
 800120c:	4b26      	ldr	r3, [pc, #152]	; (80012a8 <main+0x100>)
 800120e:	4a2c      	ldr	r2, [pc, #176]	; (80012c0 <main+0x118>)
 8001210:	615a      	str	r2, [r3, #20]

	printf("\r\n===== Driver_LIDAR =====\r\n");
 8001212:	4b2c      	ldr	r3, [pc, #176]	; (80012c4 <main+0x11c>)
 8001214:	0018      	movs	r0, r3
 8001216:	f008 feab 	bl	8009f70 <puts>

	LIDAR_stop(&h_LIDAR);
 800121a:	4b23      	ldr	r3, [pc, #140]	; (80012a8 <main+0x100>)
 800121c:	0018      	movs	r0, r3
 800121e:	f008 f9af 	bl	8009580 <LIDAR_stop>
	HAL_Delay(1000);
 8001222:	23fa      	movs	r3, #250	; 0xfa
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	0018      	movs	r0, r3
 8001228:	f001 f9ee 	bl	8002608 <HAL_Delay>
	LIDAR_get_info(&h_LIDAR);
 800122c:	4b1e      	ldr	r3, [pc, #120]	; (80012a8 <main+0x100>)
 800122e:	0018      	movs	r0, r3
 8001230:	f008 f9bc 	bl	80095ac <LIDAR_get_info>
	LIDAR_get_health_stat(&h_LIDAR);
 8001234:	4b1c      	ldr	r3, [pc, #112]	; (80012a8 <main+0x100>)
 8001236:	0018      	movs	r0, r3
 8001238:	f008 fae2 	bl	8009800 <LIDAR_get_health_stat>

	ret = xTaskCreate(TaskLIDAR,"TaskLIDAR",STACK_SIZE,(void *) NULL,1,&xHandleLIDAR);
 800123c:	2380      	movs	r3, #128	; 0x80
 800123e:	005a      	lsls	r2, r3, #1
 8001240:	4921      	ldr	r1, [pc, #132]	; (80012c8 <main+0x120>)
 8001242:	4822      	ldr	r0, [pc, #136]	; (80012cc <main+0x124>)
 8001244:	003b      	movs	r3, r7
 8001246:	9301      	str	r3, [sp, #4]
 8001248:	2301      	movs	r3, #1
 800124a:	9300      	str	r3, [sp, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	f007 f87a 	bl	8008346 <xTaskCreate>
 8001252:	0003      	movs	r3, r0
 8001254:	607b      	str	r3, [r7, #4]
	if (ret != pdPASS)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2b01      	cmp	r3, #1
 800125a:	d005      	beq.n	8001268 <main+0xc0>
	{
		printf("Error creating TaskLIDAR\r\n");
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <main+0x128>)
 800125e:	0018      	movs	r0, r3
 8001260:	f008 fe86 	bl	8009f70 <puts>
		Error_Handler();
 8001264:	f000 f8e4 	bl	8001430 <Error_Handler>
	}
	printf("Task LIDAR created\r\n");
 8001268:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <main+0x12c>)
 800126a:	0018      	movs	r0, r3
 800126c:	f008 fe80 	bl	8009f70 <puts>

	SemHalfCallBack = xSemaphoreCreateBinary();
 8001270:	2203      	movs	r2, #3
 8001272:	2100      	movs	r1, #0
 8001274:	2001      	movs	r0, #1
 8001276:	f006 fe4d 	bl	8007f14 <xQueueGenericCreate>
 800127a:	0002      	movs	r2, r0
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <main+0x130>)
 800127e:	601a      	str	r2, [r3, #0]
	SemClpCallBack = xSemaphoreCreateBinary();
 8001280:	2203      	movs	r2, #3
 8001282:	2100      	movs	r1, #0
 8001284:	2001      	movs	r0, #1
 8001286:	f006 fe45 	bl	8007f14 <xQueueGenericCreate>
 800128a:	0002      	movs	r2, r0
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <main+0x134>)
 800128e:	601a      	str	r2, [r3, #0]

	LIDAR_start(&h_LIDAR);
 8001290:	4b05      	ldr	r3, [pc, #20]	; (80012a8 <main+0x100>)
 8001292:	0018      	movs	r0, r3
 8001294:	f008 f956 	bl	8009544 <LIDAR_start>
	vTaskStartScheduler();
 8001298:	f007 f9aa 	bl	80085f0 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 800129c:	f7ff fb6e 	bl	800097c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80012a0:	f006 fcf7 	bl	8007c92 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80012a4:	e7fe      	b.n	80012a4 <main+0xfc>
 80012a6:	46c0      	nop			; (mov r8, r8)
 80012a8:	2000014c 	.word	0x2000014c
 80012ac:	08000c31 	.word	0x08000c31
 80012b0:	08000c61 	.word	0x08000c61
 80012b4:	08000c8d 	.word	0x08000c8d
 80012b8:	08000cb9 	.word	0x08000cb9
 80012bc:	08000ce9 	.word	0x08000ce9
 80012c0:	08000d15 	.word	0x08000d15
 80012c4:	0800b0d8 	.word	0x0800b0d8
 80012c8:	0800b0f4 	.word	0x0800b0f4
 80012cc:	08000d41 	.word	0x08000d41
 80012d0:	0800b100 	.word	0x0800b100
 80012d4:	0800b11c 	.word	0x0800b11c
 80012d8:	2000316c 	.word	0x2000316c
 80012dc:	20003170 	.word	0x20003170

080012e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b093      	sub	sp, #76	; 0x4c
 80012e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e6:	2414      	movs	r4, #20
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	0018      	movs	r0, r3
 80012ec:	2334      	movs	r3, #52	; 0x34
 80012ee:	001a      	movs	r2, r3
 80012f0:	2100      	movs	r1, #0
 80012f2:	f008 ff6d 	bl	800a1d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	0018      	movs	r0, r3
 80012fa:	2310      	movs	r3, #16
 80012fc:	001a      	movs	r2, r3
 80012fe:	2100      	movs	r1, #0
 8001300:	f008 ff66 	bl	800a1d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	0018      	movs	r0, r3
 800130a:	f002 faf5 	bl	80038f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800130e:	193b      	adds	r3, r7, r4
 8001310:	2202      	movs	r2, #2
 8001312:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001314:	193b      	adds	r3, r7, r4
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	0052      	lsls	r2, r2, #1
 800131a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800131c:	0021      	movs	r1, r4
 800131e:	187b      	adds	r3, r7, r1
 8001320:	2200      	movs	r2, #0
 8001322:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001324:	187b      	adds	r3, r7, r1
 8001326:	2240      	movs	r2, #64	; 0x40
 8001328:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132a:	187b      	adds	r3, r7, r1
 800132c:	2202      	movs	r2, #2
 800132e:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001330:	187b      	adds	r3, r7, r1
 8001332:	2202      	movs	r2, #2
 8001334:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001336:	187b      	adds	r3, r7, r1
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 800133c:	187b      	adds	r3, r7, r1
 800133e:	2208      	movs	r2, #8
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001342:	187b      	adds	r3, r7, r1
 8001344:	2280      	movs	r2, #128	; 0x80
 8001346:	0292      	lsls	r2, r2, #10
 8001348:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800134a:	187b      	adds	r3, r7, r1
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	0592      	lsls	r2, r2, #22
 8001350:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001352:	187b      	adds	r3, r7, r1
 8001354:	0018      	movs	r0, r3
 8001356:	f002 fb1b 	bl	8003990 <HAL_RCC_OscConfig>
 800135a:	1e03      	subs	r3, r0, #0
 800135c:	d001      	beq.n	8001362 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800135e:	f000 f867 	bl	8001430 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2207      	movs	r2, #7
 8001366:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001368:	1d3b      	adds	r3, r7, #4
 800136a:	2202      	movs	r2, #2
 800136c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	2200      	movs	r2, #0
 8001372:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2102      	movs	r1, #2
 800137e:	0018      	movs	r0, r3
 8001380:	f002 fe16 	bl	8003fb0 <HAL_RCC_ClockConfig>
 8001384:	1e03      	subs	r3, r0, #0
 8001386:	d001      	beq.n	800138c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001388:	f000 f852 	bl	8001430 <Error_Handler>
  }
}
 800138c:	46c0      	nop			; (mov r8, r8)
 800138e:	46bd      	mov	sp, r7
 8001390:	b013      	add	sp, #76	; 0x4c
 8001392:	bd90      	pop	{r4, r7, pc}

08001394 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemHalfCallBack,&higher_priority_task_woken);
 80013a0:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_UART_RxHalfCpltCallback+0x34>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	220c      	movs	r2, #12
 80013a6:	18ba      	adds	r2, r7, r2
 80013a8:	0011      	movs	r1, r2
 80013aa:	0018      	movs	r0, r3
 80013ac:	f006 fe02 	bl	8007fb4 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d003      	beq.n	80013be <HAL_UART_RxHalfCpltCallback+0x2a>
 80013b6:	4b05      	ldr	r3, [pc, #20]	; (80013cc <HAL_UART_RxHalfCpltCallback+0x38>)
 80013b8:	2280      	movs	r2, #128	; 0x80
 80013ba:	0552      	lsls	r2, r2, #21
 80013bc:	601a      	str	r2, [r3, #0]
}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	46bd      	mov	sp, r7
 80013c2:	b004      	add	sp, #16
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	46c0      	nop			; (mov r8, r8)
 80013c8:	2000316c 	.word	0x2000316c
 80013cc:	e000ed04 	.word	0xe000ed04

080013d0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 80013d8:	2300      	movs	r3, #0
 80013da:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemClpCallBack,&higher_priority_task_woken);
 80013dc:	4b09      	ldr	r3, [pc, #36]	; (8001404 <HAL_UART_RxCpltCallback+0x34>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	220c      	movs	r2, #12
 80013e2:	18ba      	adds	r2, r7, r2
 80013e4:	0011      	movs	r1, r2
 80013e6:	0018      	movs	r0, r3
 80013e8:	f006 fde4 	bl	8007fb4 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d003      	beq.n	80013fa <HAL_UART_RxCpltCallback+0x2a>
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <HAL_UART_RxCpltCallback+0x38>)
 80013f4:	2280      	movs	r2, #128	; 0x80
 80013f6:	0552      	lsls	r2, r2, #21
 80013f8:	601a      	str	r2, [r3, #0]
}
 80013fa:	46c0      	nop			; (mov r8, r8)
 80013fc:	46bd      	mov	sp, r7
 80013fe:	b004      	add	sp, #16
 8001400:	bd80      	pop	{r7, pc}
 8001402:	46c0      	nop			; (mov r8, r8)
 8001404:	20003170 	.word	0x20003170
 8001408:	e000ed04 	.word	0xe000ed04

0800140c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	4a04      	ldr	r2, [pc, #16]	; (800142c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d101      	bne.n	8001422 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800141e:	f001 f8d7 	bl	80025d0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	46bd      	mov	sp, r7
 8001426:	b002      	add	sp, #8
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	40001400 	.word	0x40001400

08001430 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001434:	b672      	cpsid	i
}
 8001436:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8001438:	e7fe      	b.n	8001438 <Error_Handler+0x8>
	...

0800143c <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001440:	4b1b      	ldr	r3, [pc, #108]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001442:	4a1c      	ldr	r2, [pc, #112]	; (80014b4 <MX_SPI1_Init+0x78>)
 8001444:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001446:	4b1a      	ldr	r3, [pc, #104]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001448:	2282      	movs	r2, #130	; 0x82
 800144a:	0052      	lsls	r2, r2, #1
 800144c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001450:	2200      	movs	r2, #0
 8001452:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001456:	22c0      	movs	r2, #192	; 0xc0
 8001458:	0092      	lsls	r2, r2, #2
 800145a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <MX_SPI1_Init+0x74>)
 800145e:	2200      	movs	r2, #0
 8001460:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <MX_SPI1_Init+0x74>)
 800146a:	2280      	movs	r2, #128	; 0x80
 800146c:	0092      	lsls	r2, r2, #2
 800146e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001472:	2210      	movs	r2, #16
 8001474:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001476:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <MX_SPI1_Init+0x74>)
 800147e:	2200      	movs	r2, #0
 8001480:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001484:	2200      	movs	r2, #0
 8001486:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <MX_SPI1_Init+0x74>)
 800148a:	2207      	movs	r2, #7
 800148c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001490:	2200      	movs	r2, #0
 8001492:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <MX_SPI1_Init+0x74>)
 8001496:	2208      	movs	r2, #8
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <MX_SPI1_Init+0x74>)
 800149c:	0018      	movs	r0, r3
 800149e:	f003 f88d 	bl	80045bc <HAL_SPI_Init>
 80014a2:	1e03      	subs	r3, r0, #0
 80014a4:	d001      	beq.n	80014aa <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014a6:	f7ff ffc3 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	20003174 	.word	0x20003174
 80014b4:	40013000 	.word	0x40013000

080014b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b08b      	sub	sp, #44	; 0x2c
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	2414      	movs	r4, #20
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	2314      	movs	r3, #20
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f008 fe80 	bl	800a1d0 <memset>
  if(spiHandle->Instance==SPI1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <HAL_SPI_MspInit+0x8c>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d130      	bne.n	800153c <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80014da:	4b1b      	ldr	r3, [pc, #108]	; (8001548 <HAL_SPI_MspInit+0x90>)
 80014dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014de:	4b1a      	ldr	r3, [pc, #104]	; (8001548 <HAL_SPI_MspInit+0x90>)
 80014e0:	2180      	movs	r1, #128	; 0x80
 80014e2:	0149      	lsls	r1, r1, #5
 80014e4:	430a      	orrs	r2, r1
 80014e6:	641a      	str	r2, [r3, #64]	; 0x40
 80014e8:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_SPI_MspInit+0x90>)
 80014ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ec:	2380      	movs	r3, #128	; 0x80
 80014ee:	015b      	lsls	r3, r3, #5
 80014f0:	4013      	ands	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
 80014f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014f6:	4b14      	ldr	r3, [pc, #80]	; (8001548 <HAL_SPI_MspInit+0x90>)
 80014f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014fa:	4b13      	ldr	r3, [pc, #76]	; (8001548 <HAL_SPI_MspInit+0x90>)
 80014fc:	2101      	movs	r1, #1
 80014fe:	430a      	orrs	r2, r1
 8001500:	635a      	str	r2, [r3, #52]	; 0x34
 8001502:	4b11      	ldr	r3, [pc, #68]	; (8001548 <HAL_SPI_MspInit+0x90>)
 8001504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001506:	2201      	movs	r2, #1
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
 800150c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_11;
 800150e:	0021      	movs	r1, r4
 8001510:	187b      	adds	r3, r7, r1
 8001512:	4a0e      	ldr	r2, [pc, #56]	; (800154c <HAL_SPI_MspInit+0x94>)
 8001514:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001516:	187b      	adds	r3, r7, r1
 8001518:	2202      	movs	r2, #2
 800151a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151c:	187b      	adds	r3, r7, r1
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	187b      	adds	r3, r7, r1
 8001524:	2200      	movs	r2, #0
 8001526:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001528:	187b      	adds	r3, r7, r1
 800152a:	2200      	movs	r2, #0
 800152c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800152e:	187a      	adds	r2, r7, r1
 8001530:	23a0      	movs	r3, #160	; 0xa0
 8001532:	05db      	lsls	r3, r3, #23
 8001534:	0011      	movs	r1, r2
 8001536:	0018      	movs	r0, r3
 8001538:	f002 f81e 	bl	8003578 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800153c:	46c0      	nop			; (mov r8, r8)
 800153e:	46bd      	mov	sp, r7
 8001540:	b00b      	add	sp, #44	; 0x2c
 8001542:	bd90      	pop	{r4, r7, pc}
 8001544:	40013000 	.word	0x40013000
 8001548:	40021000 	.word	0x40021000
 800154c:	00000824 	.word	0x00000824

08001550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b082      	sub	sp, #8
 8001554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <HAL_MspInit+0x5c>)
 8001558:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800155a:	4b14      	ldr	r3, [pc, #80]	; (80015ac <HAL_MspInit+0x5c>)
 800155c:	2101      	movs	r1, #1
 800155e:	430a      	orrs	r2, r1
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
 8001562:	4b12      	ldr	r3, [pc, #72]	; (80015ac <HAL_MspInit+0x5c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001566:	2201      	movs	r2, #1
 8001568:	4013      	ands	r3, r2
 800156a:	607b      	str	r3, [r7, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156e:	4b0f      	ldr	r3, [pc, #60]	; (80015ac <HAL_MspInit+0x5c>)
 8001570:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001572:	4b0e      	ldr	r3, [pc, #56]	; (80015ac <HAL_MspInit+0x5c>)
 8001574:	2180      	movs	r1, #128	; 0x80
 8001576:	0549      	lsls	r1, r1, #21
 8001578:	430a      	orrs	r2, r1
 800157a:	63da      	str	r2, [r3, #60]	; 0x3c
 800157c:	4b0b      	ldr	r3, [pc, #44]	; (80015ac <HAL_MspInit+0x5c>)
 800157e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	055b      	lsls	r3, r3, #21
 8001584:	4013      	ands	r3, r2
 8001586:	603b      	str	r3, [r7, #0]
 8001588:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800158a:	2302      	movs	r3, #2
 800158c:	425b      	negs	r3, r3
 800158e:	2200      	movs	r2, #0
 8001590:	2103      	movs	r1, #3
 8001592:	0018      	movs	r0, r3
 8001594:	f001 fd78 	bl	8003088 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001598:	23c0      	movs	r3, #192	; 0xc0
 800159a:	00db      	lsls	r3, r3, #3
 800159c:	0018      	movs	r0, r3
 800159e:	f001 f857 	bl	8002650 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	46c0      	nop			; (mov r8, r8)
 80015ac:	40021000 	.word	0x40021000

080015b0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b0:	b5b0      	push	{r4, r5, r7, lr}
 80015b2:	b08c      	sub	sp, #48	; 0x30
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015b8:	232b      	movs	r3, #43	; 0x2b
 80015ba:	18fb      	adds	r3, r7, r3
 80015bc:	2200      	movs	r2, #0
 80015be:	701a      	strb	r2, [r3, #0]

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80015c0:	4b37      	ldr	r3, [pc, #220]	; (80016a0 <HAL_InitTick+0xf0>)
 80015c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015c4:	4b36      	ldr	r3, [pc, #216]	; (80016a0 <HAL_InitTick+0xf0>)
 80015c6:	2120      	movs	r1, #32
 80015c8:	430a      	orrs	r2, r1
 80015ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80015cc:	4b34      	ldr	r3, [pc, #208]	; (80016a0 <HAL_InitTick+0xf0>)
 80015ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015d0:	2220      	movs	r2, #32
 80015d2:	4013      	ands	r3, r2
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015d8:	230c      	movs	r3, #12
 80015da:	18fa      	adds	r2, r7, r3
 80015dc:	2410      	movs	r4, #16
 80015de:	193b      	adds	r3, r7, r4
 80015e0:	0011      	movs	r1, r2
 80015e2:	0018      	movs	r0, r3
 80015e4:	f002 fe8c 	bl	8004300 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015e8:	193b      	adds	r3, r7, r4
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80015ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d104      	bne.n	80015fe <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80015f4:	f002 fe6e 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 80015f8:	0003      	movs	r3, r0
 80015fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80015fc:	e004      	b.n	8001608 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80015fe:	f002 fe69 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8001602:	0003      	movs	r3, r0
 8001604:	005b      	lsls	r3, r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	4926      	ldr	r1, [pc, #152]	; (80016a4 <HAL_InitTick+0xf4>)
 800160c:	0018      	movs	r0, r3
 800160e:	f7fe fd85 	bl	800011c <__udivsi3>
 8001612:	0003      	movs	r3, r0
 8001614:	3b01      	subs	r3, #1
 8001616:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001618:	4b23      	ldr	r3, [pc, #140]	; (80016a8 <HAL_InitTick+0xf8>)
 800161a:	4a24      	ldr	r2, [pc, #144]	; (80016ac <HAL_InitTick+0xfc>)
 800161c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800161e:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <HAL_InitTick+0xf8>)
 8001620:	4a23      	ldr	r2, [pc, #140]	; (80016b0 <HAL_InitTick+0x100>)
 8001622:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8001624:	4b20      	ldr	r3, [pc, #128]	; (80016a8 <HAL_InitTick+0xf8>)
 8001626:	6a3a      	ldr	r2, [r7, #32]
 8001628:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 800162a:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <HAL_InitTick+0xf8>)
 800162c:	2200      	movs	r2, #0
 800162e:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <HAL_InitTick+0xf8>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001636:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_InitTick+0xf8>)
 8001638:	2200      	movs	r2, #0
 800163a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 800163c:	252b      	movs	r5, #43	; 0x2b
 800163e:	197c      	adds	r4, r7, r5
 8001640:	4b19      	ldr	r3, [pc, #100]	; (80016a8 <HAL_InitTick+0xf8>)
 8001642:	0018      	movs	r0, r3
 8001644:	f003 f872 	bl	800472c <HAL_TIM_Base_Init>
 8001648:	0003      	movs	r3, r0
 800164a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800164c:	197b      	adds	r3, r7, r5
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d11e      	bne.n	8001692 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 8001654:	197c      	adds	r4, r7, r5
 8001656:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <HAL_InitTick+0xf8>)
 8001658:	0018      	movs	r0, r3
 800165a:	f003 f8bf 	bl	80047dc <HAL_TIM_Base_Start_IT>
 800165e:	0003      	movs	r3, r0
 8001660:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8001662:	197b      	adds	r3, r7, r5
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d113      	bne.n	8001692 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800166a:	2012      	movs	r0, #18
 800166c:	f001 fd21 	bl	80030b2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2b03      	cmp	r3, #3
 8001674:	d809      	bhi.n	800168a <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	0019      	movs	r1, r3
 800167c:	2012      	movs	r0, #18
 800167e:	f001 fd03 	bl	8003088 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001682:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_InitTick+0x104>)
 8001684:	687a      	ldr	r2, [r7, #4]
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	e003      	b.n	8001692 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800168a:	232b      	movs	r3, #43	; 0x2b
 800168c:	18fb      	adds	r3, r7, r3
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001692:	232b      	movs	r3, #43	; 0x2b
 8001694:	18fb      	adds	r3, r7, r3
 8001696:	781b      	ldrb	r3, [r3, #0]
}
 8001698:	0018      	movs	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	b00c      	add	sp, #48	; 0x30
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	40021000 	.word	0x40021000
 80016a4:	000f4240 	.word	0x000f4240
 80016a8:	200031d8 	.word	0x200031d8
 80016ac:	40001400 	.word	0x40001400
 80016b0:	000003e7 	.word	0x000003e7
 80016b4:	20000004 	.word	0x20000004

080016b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016bc:	e7fe      	b.n	80016bc <NMI_Handler+0x4>

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton1_Pin);
 80016c8:	2001      	movs	r0, #1
 80016ca:	f002 f8d7 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton2_Pin);
 80016d8:	2008      	movs	r0, #8
 80016da:	f002 f8cf 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 80016de:	46c0      	nop			; (mov r8, r8)
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton3_Pin);
 80016e8:	2010      	movs	r0, #16
 80016ea:	f002 f8c7 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact4_Pin);
 80016ee:	2020      	movs	r0, #32
 80016f0:	f002 f8c4 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure1_Pin);
 80016f4:	2380      	movs	r3, #128	; 0x80
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	0018      	movs	r0, r3
 80016fa:	f002 f8bf 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure2_Pin);
 80016fe:	2380      	movs	r3, #128	; 0x80
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	0018      	movs	r0, r3
 8001704:	f002 f8ba 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact1_Pin);
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	019b      	lsls	r3, r3, #6
 800170c:	0018      	movs	r0, r3
 800170e:	f002 f8b5 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact2_Pin);
 8001712:	2380      	movs	r3, #128	; 0x80
 8001714:	01db      	lsls	r3, r3, #7
 8001716:	0018      	movs	r0, r3
 8001718:	f002 f8b0 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact3_Pin);
 800171c:	2380      	movs	r3, #128	; 0x80
 800171e:	021b      	lsls	r3, r3, #8
 8001720:	0018      	movs	r0, r3
 8001722:	f002 f8ab 	bl	800387c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001730:	4b03      	ldr	r3, [pc, #12]	; (8001740 <DMA1_Channel1_IRQHandler+0x14>)
 8001732:	0018      	movs	r0, r3
 8001734:	f001 fdde 	bl	80032f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8001738:	46c0      	nop			; (mov r8, r8)
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	46c0      	nop			; (mov r8, r8)
 8001740:	200000ec 	.word	0x200000ec

08001744 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <DMA1_Channel2_3_IRQHandler+0x14>)
 800174a:	0018      	movs	r0, r3
 800174c:	f001 fdd2 	bl	80032f4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	20003564 	.word	0x20003564

0800175c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001760:	4b03      	ldr	r3, [pc, #12]	; (8001770 <TIM1_CC_IRQHandler+0x14>)
 8001762:	0018      	movs	r0, r3
 8001764:	f003 f990 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001768:	46c0      	nop			; (mov r8, r8)
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	46c0      	nop			; (mov r8, r8)
 8001770:	20003228 	.word	0x20003228

08001774 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001778:	4b03      	ldr	r3, [pc, #12]	; (8001788 <TIM3_IRQHandler+0x14>)
 800177a:	0018      	movs	r0, r3
 800177c:	f003 f984 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001780:	46c0      	nop			; (mov r8, r8)
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	20003274 	.word	0x20003274

0800178c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001790:	4b03      	ldr	r3, [pc, #12]	; (80017a0 <TIM7_IRQHandler+0x14>)
 8001792:	0018      	movs	r0, r3
 8001794:	f003 f978 	bl	8004a88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	200031d8 	.word	0x200031d8

080017a4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b086      	sub	sp, #24
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	60f8      	str	r0, [r7, #12]
 80017ac:	60b9      	str	r1, [r7, #8]
 80017ae:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017b0:	2300      	movs	r3, #0
 80017b2:	617b      	str	r3, [r7, #20]
 80017b4:	e00a      	b.n	80017cc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80017b6:	e000      	b.n	80017ba <_read+0x16>
 80017b8:	bf00      	nop
 80017ba:	0001      	movs	r1, r0
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	1c5a      	adds	r2, r3, #1
 80017c0:	60ba      	str	r2, [r7, #8]
 80017c2:	b2ca      	uxtb	r2, r1
 80017c4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3301      	adds	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697a      	ldr	r2, [r7, #20]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbf0      	blt.n	80017b6 <_read+0x12>
  }

  return len;
 80017d4:	687b      	ldr	r3, [r7, #4]
}
 80017d6:	0018      	movs	r0, r3
 80017d8:	46bd      	mov	sp, r7
 80017da:	b006      	add	sp, #24
 80017dc:	bd80      	pop	{r7, pc}

080017de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80017de:	b580      	push	{r7, lr}
 80017e0:	b086      	sub	sp, #24
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017ea:	2300      	movs	r3, #0
 80017ec:	617b      	str	r3, [r7, #20]
 80017ee:	e009      	b.n	8001804 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	1c5a      	adds	r2, r3, #1
 80017f4:	60ba      	str	r2, [r7, #8]
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	0018      	movs	r0, r3
 80017fa:	f7ff fa07 	bl	8000c0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	3301      	adds	r3, #1
 8001802:	617b      	str	r3, [r7, #20]
 8001804:	697a      	ldr	r2, [r7, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	429a      	cmp	r2, r3
 800180a:	dbf1      	blt.n	80017f0 <_write+0x12>
  }
  return len;
 800180c:	687b      	ldr	r3, [r7, #4]
}
 800180e:	0018      	movs	r0, r3
 8001810:	46bd      	mov	sp, r7
 8001812:	b006      	add	sp, #24
 8001814:	bd80      	pop	{r7, pc}

08001816 <_close>:

int _close(int file)
{
 8001816:	b580      	push	{r7, lr}
 8001818:	b082      	sub	sp, #8
 800181a:	af00      	add	r7, sp, #0
 800181c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800181e:	2301      	movs	r3, #1
 8001820:	425b      	negs	r3, r3
}
 8001822:	0018      	movs	r0, r3
 8001824:	46bd      	mov	sp, r7
 8001826:	b002      	add	sp, #8
 8001828:	bd80      	pop	{r7, pc}

0800182a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
 8001832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	0192      	lsls	r2, r2, #6
 800183a:	605a      	str	r2, [r3, #4]
  return 0;
 800183c:	2300      	movs	r3, #0
}
 800183e:	0018      	movs	r0, r3
 8001840:	46bd      	mov	sp, r7
 8001842:	b002      	add	sp, #8
 8001844:	bd80      	pop	{r7, pc}

08001846 <_isatty>:

int _isatty(int file)
{
 8001846:	b580      	push	{r7, lr}
 8001848:	b082      	sub	sp, #8
 800184a:	af00      	add	r7, sp, #0
 800184c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800184e:	2301      	movs	r3, #1
}
 8001850:	0018      	movs	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	b002      	add	sp, #8
 8001856:	bd80      	pop	{r7, pc}

08001858 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001864:	2300      	movs	r3, #0
}
 8001866:	0018      	movs	r0, r3
 8001868:	46bd      	mov	sp, r7
 800186a:	b004      	add	sp, #16
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001878:	4a14      	ldr	r2, [pc, #80]	; (80018cc <_sbrk+0x5c>)
 800187a:	4b15      	ldr	r3, [pc, #84]	; (80018d0 <_sbrk+0x60>)
 800187c:	1ad3      	subs	r3, r2, r3
 800187e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001884:	4b13      	ldr	r3, [pc, #76]	; (80018d4 <_sbrk+0x64>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d102      	bne.n	8001892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <_sbrk+0x64>)
 800188e:	4a12      	ldr	r2, [pc, #72]	; (80018d8 <_sbrk+0x68>)
 8001890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001892:	4b10      	ldr	r3, [pc, #64]	; (80018d4 <_sbrk+0x64>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	18d3      	adds	r3, r2, r3
 800189a:	693a      	ldr	r2, [r7, #16]
 800189c:	429a      	cmp	r2, r3
 800189e:	d207      	bcs.n	80018b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018a0:	f008 fcec 	bl	800a27c <__errno>
 80018a4:	0003      	movs	r3, r0
 80018a6:	220c      	movs	r2, #12
 80018a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018aa:	2301      	movs	r3, #1
 80018ac:	425b      	negs	r3, r3
 80018ae:	e009      	b.n	80018c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018b0:	4b08      	ldr	r3, [pc, #32]	; (80018d4 <_sbrk+0x64>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018b6:	4b07      	ldr	r3, [pc, #28]	; (80018d4 <_sbrk+0x64>)
 80018b8:	681a      	ldr	r2, [r3, #0]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	18d2      	adds	r2, r2, r3
 80018be:	4b05      	ldr	r3, [pc, #20]	; (80018d4 <_sbrk+0x64>)
 80018c0:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80018c2:	68fb      	ldr	r3, [r7, #12]
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b006      	add	sp, #24
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20009000 	.word	0x20009000
 80018d0:	00000400 	.word	0x00000400
 80018d4:	20003224 	.word	0x20003224
 80018d8:	20008680 	.word	0x20008680

080018dc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
	...

080018e8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80018e8:	b590      	push	{r4, r7, lr}
 80018ea:	b08d      	sub	sp, #52	; 0x34
 80018ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80018ee:	240c      	movs	r4, #12
 80018f0:	193b      	adds	r3, r7, r4
 80018f2:	0018      	movs	r0, r3
 80018f4:	2324      	movs	r3, #36	; 0x24
 80018f6:	001a      	movs	r2, r3
 80018f8:	2100      	movs	r1, #0
 80018fa:	f008 fc69 	bl	800a1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018fe:	003b      	movs	r3, r7
 8001900:	0018      	movs	r0, r3
 8001902:	230c      	movs	r3, #12
 8001904:	001a      	movs	r2, r3
 8001906:	2100      	movs	r1, #0
 8001908:	f008 fc62 	bl	800a1d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800190c:	4b28      	ldr	r3, [pc, #160]	; (80019b0 <MX_TIM1_Init+0xc8>)
 800190e:	4a29      	ldr	r2, [pc, #164]	; (80019b4 <MX_TIM1_Init+0xcc>)
 8001910:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001912:	4b27      	ldr	r3, [pc, #156]	; (80019b0 <MX_TIM1_Init+0xc8>)
 8001914:	2200      	movs	r2, #0
 8001916:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001918:	4b25      	ldr	r3, [pc, #148]	; (80019b0 <MX_TIM1_Init+0xc8>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800191e:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <MX_TIM1_Init+0xc8>)
 8001920:	4a25      	ldr	r2, [pc, #148]	; (80019b8 <MX_TIM1_Init+0xd0>)
 8001922:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001924:	4b22      	ldr	r3, [pc, #136]	; (80019b0 <MX_TIM1_Init+0xc8>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800192a:	4b21      	ldr	r3, [pc, #132]	; (80019b0 <MX_TIM1_Init+0xc8>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001930:	4b1f      	ldr	r3, [pc, #124]	; (80019b0 <MX_TIM1_Init+0xc8>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001936:	0021      	movs	r1, r4
 8001938:	187b      	adds	r3, r7, r1
 800193a:	2203      	movs	r2, #3
 800193c:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800193e:	187b      	adds	r3, r7, r1
 8001940:	2202      	movs	r2, #2
 8001942:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001944:	187b      	adds	r3, r7, r1
 8001946:	2201      	movs	r2, #1
 8001948:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800194a:	187b      	adds	r3, r7, r1
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001950:	187b      	adds	r3, r7, r1
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001956:	187b      	adds	r3, r7, r1
 8001958:	2202      	movs	r2, #2
 800195a:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800195c:	187b      	adds	r3, r7, r1
 800195e:	2201      	movs	r2, #1
 8001960:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001962:	187b      	adds	r3, r7, r1
 8001964:	2200      	movs	r2, #0
 8001966:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001968:	187b      	adds	r3, r7, r1
 800196a:	2200      	movs	r2, #0
 800196c:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800196e:	187a      	adds	r2, r7, r1
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_TIM1_Init+0xc8>)
 8001972:	0011      	movs	r1, r2
 8001974:	0018      	movs	r0, r3
 8001976:	f002 ffdf 	bl	8004938 <HAL_TIM_Encoder_Init>
 800197a:	1e03      	subs	r3, r0, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 800197e:	f7ff fd57 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001982:	003b      	movs	r3, r7
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001988:	003b      	movs	r3, r7
 800198a:	2200      	movs	r2, #0
 800198c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198e:	003b      	movs	r3, r7
 8001990:	2200      	movs	r2, #0
 8001992:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001994:	003a      	movs	r2, r7
 8001996:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_TIM1_Init+0xc8>)
 8001998:	0011      	movs	r1, r2
 800199a:	0018      	movs	r0, r3
 800199c:	f003 fe00 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	1e03      	subs	r3, r0, #0
 80019a2:	d001      	beq.n	80019a8 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80019a4:	f7ff fd44 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	b00d      	add	sp, #52	; 0x34
 80019ae:	bd90      	pop	{r4, r7, pc}
 80019b0:	20003228 	.word	0x20003228
 80019b4:	40012c00 	.word	0x40012c00
 80019b8:	0000ffff 	.word	0x0000ffff

080019bc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80019bc:	b590      	push	{r4, r7, lr}
 80019be:	b08d      	sub	sp, #52	; 0x34
 80019c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80019c2:	240c      	movs	r4, #12
 80019c4:	193b      	adds	r3, r7, r4
 80019c6:	0018      	movs	r0, r3
 80019c8:	2324      	movs	r3, #36	; 0x24
 80019ca:	001a      	movs	r2, r3
 80019cc:	2100      	movs	r1, #0
 80019ce:	f008 fbff 	bl	800a1d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d2:	003b      	movs	r3, r7
 80019d4:	0018      	movs	r0, r3
 80019d6:	230c      	movs	r3, #12
 80019d8:	001a      	movs	r2, r3
 80019da:	2100      	movs	r1, #0
 80019dc:	f008 fbf8 	bl	800a1d0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80019e0:	4b25      	ldr	r3, [pc, #148]	; (8001a78 <MX_TIM3_Init+0xbc>)
 80019e2:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <MX_TIM3_Init+0xc0>)
 80019e4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80019e6:	4b24      	ldr	r3, [pc, #144]	; (8001a78 <MX_TIM3_Init+0xbc>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b22      	ldr	r3, [pc, #136]	; (8001a78 <MX_TIM3_Init+0xbc>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80019f2:	4b21      	ldr	r3, [pc, #132]	; (8001a78 <MX_TIM3_Init+0xbc>)
 80019f4:	4a22      	ldr	r2, [pc, #136]	; (8001a80 <MX_TIM3_Init+0xc4>)
 80019f6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019f8:	4b1f      	ldr	r3, [pc, #124]	; (8001a78 <MX_TIM3_Init+0xbc>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019fe:	4b1e      	ldr	r3, [pc, #120]	; (8001a78 <MX_TIM3_Init+0xbc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001a04:	0021      	movs	r1, r4
 8001a06:	187b      	adds	r3, r7, r1
 8001a08:	2203      	movs	r2, #3
 8001a0a:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001a0c:	187b      	adds	r3, r7, r1
 8001a0e:	2202      	movs	r2, #2
 8001a10:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001a12:	187b      	adds	r3, r7, r1
 8001a14:	2201      	movs	r2, #1
 8001a16:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001a18:	187b      	adds	r3, r7, r1
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001a1e:	187b      	adds	r3, r7, r1
 8001a20:	2200      	movs	r2, #0
 8001a22:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001a24:	187b      	adds	r3, r7, r1
 8001a26:	2202      	movs	r2, #2
 8001a28:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001a2a:	187b      	adds	r3, r7, r1
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001a30:	187b      	adds	r3, r7, r1
 8001a32:	2200      	movs	r2, #0
 8001a34:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001a36:	187b      	adds	r3, r7, r1
 8001a38:	2200      	movs	r2, #0
 8001a3a:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001a3c:	187a      	adds	r2, r7, r1
 8001a3e:	4b0e      	ldr	r3, [pc, #56]	; (8001a78 <MX_TIM3_Init+0xbc>)
 8001a40:	0011      	movs	r1, r2
 8001a42:	0018      	movs	r0, r3
 8001a44:	f002 ff78 	bl	8004938 <HAL_TIM_Encoder_Init>
 8001a48:	1e03      	subs	r3, r0, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001a4c:	f7ff fcf0 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a50:	003b      	movs	r3, r7
 8001a52:	2200      	movs	r2, #0
 8001a54:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a56:	003b      	movs	r3, r7
 8001a58:	2200      	movs	r2, #0
 8001a5a:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a5c:	003a      	movs	r2, r7
 8001a5e:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <MX_TIM3_Init+0xbc>)
 8001a60:	0011      	movs	r1, r2
 8001a62:	0018      	movs	r0, r3
 8001a64:	f003 fd9c 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a68:	1e03      	subs	r3, r0, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a6c:	f7ff fce0 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a70:	46c0      	nop			; (mov r8, r8)
 8001a72:	46bd      	mov	sp, r7
 8001a74:	b00d      	add	sp, #52	; 0x34
 8001a76:	bd90      	pop	{r4, r7, pc}
 8001a78:	20003274 	.word	0x20003274
 8001a7c:	40000400 	.word	0x40000400
 8001a80:	0000ffff 	.word	0x0000ffff

08001a84 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	0018      	movs	r0, r3
 8001a8e:	230c      	movs	r3, #12
 8001a90:	001a      	movs	r2, r3
 8001a92:	2100      	movs	r1, #0
 8001a94:	f008 fb9c 	bl	800a1d0 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a98:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <MX_TIM6_Init+0x6c>)
 8001a9a:	4a16      	ldr	r2, [pc, #88]	; (8001af4 <MX_TIM6_Init+0x70>)
 8001a9c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <MX_TIM6_Init+0x6c>)
 8001aa0:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <MX_TIM6_Init+0x74>)
 8001aa2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa4:	4b12      	ldr	r3, [pc, #72]	; (8001af0 <MX_TIM6_Init+0x6c>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001aaa:	4b11      	ldr	r3, [pc, #68]	; (8001af0 <MX_TIM6_Init+0x6c>)
 8001aac:	2263      	movs	r2, #99	; 0x63
 8001aae:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	; (8001af0 <MX_TIM6_Init+0x6c>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	; (8001af0 <MX_TIM6_Init+0x6c>)
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f002 fe37 	bl	800472c <HAL_TIM_Base_Init>
 8001abe:	1e03      	subs	r3, r0, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001ac2:	f7ff fcb5 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ac6:	1d3b      	adds	r3, r7, #4
 8001ac8:	2220      	movs	r2, #32
 8001aca:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	2200      	movs	r2, #0
 8001ad0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001ad2:	1d3a      	adds	r2, r7, #4
 8001ad4:	4b06      	ldr	r3, [pc, #24]	; (8001af0 <MX_TIM6_Init+0x6c>)
 8001ad6:	0011      	movs	r1, r2
 8001ad8:	0018      	movs	r0, r3
 8001ada:	f003 fd61 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001ade:	1e03      	subs	r3, r0, #0
 8001ae0:	d001      	beq.n	8001ae6 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001ae2:	f7ff fca5 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ae6:	46c0      	nop			; (mov r8, r8)
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	b004      	add	sp, #16
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	46c0      	nop			; (mov r8, r8)
 8001af0:	200032c0 	.word	0x200032c0
 8001af4:	40001000 	.word	0x40001000
 8001af8:	0000f9ff 	.word	0x0000f9ff

08001afc <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b088      	sub	sp, #32
 8001b00:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	0018      	movs	r0, r3
 8001b06:	231c      	movs	r3, #28
 8001b08:	001a      	movs	r2, r3
 8001b0a:	2100      	movs	r1, #0
 8001b0c:	f008 fb60 	bl	800a1d0 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001b10:	4b1f      	ldr	r3, [pc, #124]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b12:	4a20      	ldr	r2, [pc, #128]	; (8001b94 <MX_TIM14_Init+0x98>)
 8001b14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b1c:	4b1c      	ldr	r3, [pc, #112]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001b22:	4b1b      	ldr	r3, [pc, #108]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b24:	4a1c      	ldr	r2, [pc, #112]	; (8001b98 <MX_TIM14_Init+0x9c>)
 8001b26:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b28:	4b19      	ldr	r3, [pc, #100]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b2e:	4b18      	ldr	r3, [pc, #96]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001b34:	4b16      	ldr	r3, [pc, #88]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b36:	0018      	movs	r0, r3
 8001b38:	f002 fdf8 	bl	800472c <HAL_TIM_Base_Init>
 8001b3c:	1e03      	subs	r3, r0, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001b40:	f7ff fc76 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001b44:	4b12      	ldr	r3, [pc, #72]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b46:	0018      	movs	r0, r3
 8001b48:	f002 fe9e 	bl	8004888 <HAL_TIM_PWM_Init>
 8001b4c:	1e03      	subs	r3, r0, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001b50:	f7ff fc6e 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b54:	1d3b      	adds	r3, r7, #4
 8001b56:	2260      	movs	r2, #96	; 0x60
 8001b58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	2200      	movs	r2, #0
 8001b64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b6c:	1d39      	adds	r1, r7, #4
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	0018      	movs	r0, r3
 8001b74:	f003 f8ba 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001b78:	1e03      	subs	r3, r0, #0
 8001b7a:	d001      	beq.n	8001b80 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001b7c:	f7ff fc58 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <MX_TIM14_Init+0x94>)
 8001b82:	0018      	movs	r0, r3
 8001b84:	f000 fad2 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001b88:	46c0      	nop			; (mov r8, r8)
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	b008      	add	sp, #32
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	2000330c 	.word	0x2000330c
 8001b94:	40002000 	.word	0x40002000
 8001b98:	0000ffff 	.word	0x0000ffff

08001b9c <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b098      	sub	sp, #96	; 0x60
 8001ba0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba2:	2354      	movs	r3, #84	; 0x54
 8001ba4:	18fb      	adds	r3, r7, r3
 8001ba6:	0018      	movs	r0, r3
 8001ba8:	230c      	movs	r3, #12
 8001baa:	001a      	movs	r2, r3
 8001bac:	2100      	movs	r1, #0
 8001bae:	f008 fb0f 	bl	800a1d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bb2:	2338      	movs	r3, #56	; 0x38
 8001bb4:	18fb      	adds	r3, r7, r3
 8001bb6:	0018      	movs	r0, r3
 8001bb8:	231c      	movs	r3, #28
 8001bba:	001a      	movs	r2, r3
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	f008 fb07 	bl	800a1d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bc2:	1d3b      	adds	r3, r7, #4
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	2334      	movs	r3, #52	; 0x34
 8001bc8:	001a      	movs	r2, r3
 8001bca:	2100      	movs	r1, #0
 8001bcc:	f008 fb00 	bl	800a1d0 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001bd0:	4b41      	ldr	r3, [pc, #260]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001bd2:	4a42      	ldr	r2, [pc, #264]	; (8001cdc <MX_TIM15_Init+0x140>)
 8001bd4:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 8001bd6:	4b40      	ldr	r3, [pc, #256]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001bd8:	2213      	movs	r2, #19
 8001bda:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bdc:	4b3e      	ldr	r3, [pc, #248]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001be2:	4b3d      	ldr	r3, [pc, #244]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001be4:	4a3e      	ldr	r2, [pc, #248]	; (8001ce0 <MX_TIM15_Init+0x144>)
 8001be6:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001be8:	4b3b      	ldr	r3, [pc, #236]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001bee:	4b3a      	ldr	r3, [pc, #232]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bf4:	4b38      	ldr	r3, [pc, #224]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001bfa:	4b37      	ldr	r3, [pc, #220]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001bfc:	0018      	movs	r0, r3
 8001bfe:	f002 fe43 	bl	8004888 <HAL_TIM_PWM_Init>
 8001c02:	1e03      	subs	r3, r0, #0
 8001c04:	d001      	beq.n	8001c0a <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001c06:	f7ff fc13 	bl	8001430 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c0a:	2154      	movs	r1, #84	; 0x54
 8001c0c:	187b      	adds	r3, r7, r1
 8001c0e:	2200      	movs	r2, #0
 8001c10:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c12:	187b      	adds	r3, r7, r1
 8001c14:	2200      	movs	r2, #0
 8001c16:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001c18:	187a      	adds	r2, r7, r1
 8001c1a:	4b2f      	ldr	r3, [pc, #188]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001c1c:	0011      	movs	r1, r2
 8001c1e:	0018      	movs	r0, r3
 8001c20:	f003 fcbe 	bl	80055a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001c24:	1e03      	subs	r3, r0, #0
 8001c26:	d001      	beq.n	8001c2c <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001c28:	f7ff fc02 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c2c:	2138      	movs	r1, #56	; 0x38
 8001c2e:	187b      	adds	r3, r7, r1
 8001c30:	2260      	movs	r2, #96	; 0x60
 8001c32:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001c34:	187b      	adds	r3, r7, r1
 8001c36:	2200      	movs	r2, #0
 8001c38:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c3a:	187b      	adds	r3, r7, r1
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c40:	187b      	adds	r3, r7, r1
 8001c42:	2200      	movs	r2, #0
 8001c44:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c46:	187b      	adds	r3, r7, r1
 8001c48:	2200      	movs	r2, #0
 8001c4a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4c:	187b      	adds	r3, r7, r1
 8001c4e:	2200      	movs	r2, #0
 8001c50:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c52:	187b      	adds	r3, r7, r1
 8001c54:	2200      	movs	r2, #0
 8001c56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c58:	1879      	adds	r1, r7, r1
 8001c5a:	4b1f      	ldr	r3, [pc, #124]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f003 f844 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001c64:	1e03      	subs	r3, r0, #0
 8001c66:	d001      	beq.n	8001c6c <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001c68:	f7ff fbe2 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6c:	2338      	movs	r3, #56	; 0x38
 8001c6e:	18f9      	adds	r1, r7, r3
 8001c70:	4b19      	ldr	r3, [pc, #100]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001c72:	2204      	movs	r2, #4
 8001c74:	0018      	movs	r0, r3
 8001c76:	f003 f839 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001c7a:	1e03      	subs	r3, r0, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8001c7e:	f7ff fbd7 	bl	8001430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	2200      	movs	r2, #0
 8001c92:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c94:	1d3b      	adds	r3, r7, #4
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c9a:	1d3b      	adds	r3, r7, #4
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ca0:	1d3b      	adds	r3, r7, #4
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	0192      	lsls	r2, r2, #6
 8001ca6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ca8:	1d3b      	adds	r3, r7, #4
 8001caa:	2200      	movs	r2, #0
 8001cac:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001cae:	1d3b      	adds	r3, r7, #4
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001cb4:	1d3a      	adds	r2, r7, #4
 8001cb6:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001cb8:	0011      	movs	r1, r2
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f003 fcd8 	bl	8005670 <HAL_TIMEx_ConfigBreakDeadTime>
 8001cc0:	1e03      	subs	r3, r0, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001cc4:	f7ff fbb4 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001cc8:	4b03      	ldr	r3, [pc, #12]	; (8001cd8 <MX_TIM15_Init+0x13c>)
 8001cca:	0018      	movs	r0, r3
 8001ccc:	f000 fa2e 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001cd0:	46c0      	nop			; (mov r8, r8)
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	b018      	add	sp, #96	; 0x60
 8001cd6:	bd80      	pop	{r7, pc}
 8001cd8:	20003358 	.word	0x20003358
 8001cdc:	40014000 	.word	0x40014000
 8001ce0:	000003e7 	.word	0x000003e7

08001ce4 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b094      	sub	sp, #80	; 0x50
 8001ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cea:	2334      	movs	r3, #52	; 0x34
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	0018      	movs	r0, r3
 8001cf0:	231c      	movs	r3, #28
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	f008 fa6b 	bl	800a1d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001cfa:	003b      	movs	r3, r7
 8001cfc:	0018      	movs	r0, r3
 8001cfe:	2334      	movs	r3, #52	; 0x34
 8001d00:	001a      	movs	r2, r3
 8001d02:	2100      	movs	r1, #0
 8001d04:	f008 fa64 	bl	800a1d0 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001d08:	4b37      	ldr	r3, [pc, #220]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d0a:	4a38      	ldr	r2, [pc, #224]	; (8001dec <MX_TIM16_Init+0x108>)
 8001d0c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8001d0e:	4b36      	ldr	r3, [pc, #216]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d10:	2213      	movs	r2, #19
 8001d12:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	4b34      	ldr	r3, [pc, #208]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001d1a:	4b33      	ldr	r3, [pc, #204]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d1c:	4a34      	ldr	r2, [pc, #208]	; (8001df0 <MX_TIM16_Init+0x10c>)
 8001d1e:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d20:	4b31      	ldr	r3, [pc, #196]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001d26:	4b30      	ldr	r3, [pc, #192]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	4b2e      	ldr	r3, [pc, #184]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001d32:	4b2d      	ldr	r3, [pc, #180]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d34:	0018      	movs	r0, r3
 8001d36:	f002 fcf9 	bl	800472c <HAL_TIM_Base_Init>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001d3e:	f7ff fb77 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001d42:	4b29      	ldr	r3, [pc, #164]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d44:	0018      	movs	r0, r3
 8001d46:	f002 fd9f 	bl	8004888 <HAL_TIM_PWM_Init>
 8001d4a:	1e03      	subs	r3, r0, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001d4e:	f7ff fb6f 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d52:	2134      	movs	r1, #52	; 0x34
 8001d54:	187b      	adds	r3, r7, r1
 8001d56:	2260      	movs	r2, #96	; 0x60
 8001d58:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001d5a:	187b      	adds	r3, r7, r1
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d60:	187b      	adds	r3, r7, r1
 8001d62:	2200      	movs	r2, #0
 8001d64:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d66:	187b      	adds	r3, r7, r1
 8001d68:	2200      	movs	r2, #0
 8001d6a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d6c:	187b      	adds	r3, r7, r1
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d72:	187b      	adds	r3, r7, r1
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d78:	187b      	adds	r3, r7, r1
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d7e:	1879      	adds	r1, r7, r1
 8001d80:	4b19      	ldr	r3, [pc, #100]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001d82:	2200      	movs	r2, #0
 8001d84:	0018      	movs	r0, r3
 8001d86:	f002 ffb1 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001d8a:	1e03      	subs	r3, r0, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001d8e:	f7ff fb4f 	bl	8001430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d92:	003b      	movs	r3, r7
 8001d94:	2200      	movs	r2, #0
 8001d96:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d98:	003b      	movs	r3, r7
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d9e:	003b      	movs	r3, r7
 8001da0:	2200      	movs	r2, #0
 8001da2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001da4:	003b      	movs	r3, r7
 8001da6:	2200      	movs	r2, #0
 8001da8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001daa:	003b      	movs	r3, r7
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001db0:	003b      	movs	r3, r7
 8001db2:	2280      	movs	r2, #128	; 0x80
 8001db4:	0192      	lsls	r2, r2, #6
 8001db6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001db8:	003b      	movs	r3, r7
 8001dba:	2200      	movs	r2, #0
 8001dbc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001dbe:	003b      	movs	r3, r7
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001dc4:	003a      	movs	r2, r7
 8001dc6:	4b08      	ldr	r3, [pc, #32]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001dc8:	0011      	movs	r1, r2
 8001dca:	0018      	movs	r0, r3
 8001dcc:	f003 fc50 	bl	8005670 <HAL_TIMEx_ConfigBreakDeadTime>
 8001dd0:	1e03      	subs	r3, r0, #0
 8001dd2:	d001      	beq.n	8001dd8 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001dd4:	f7ff fb2c 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <MX_TIM16_Init+0x104>)
 8001dda:	0018      	movs	r0, r3
 8001ddc:	f000 f9a6 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001de0:	46c0      	nop			; (mov r8, r8)
 8001de2:	46bd      	mov	sp, r7
 8001de4:	b014      	add	sp, #80	; 0x50
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	200033a4 	.word	0x200033a4
 8001dec:	40014400 	.word	0x40014400
 8001df0:	000003e7 	.word	0x000003e7

08001df4 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b094      	sub	sp, #80	; 0x50
 8001df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dfa:	2334      	movs	r3, #52	; 0x34
 8001dfc:	18fb      	adds	r3, r7, r3
 8001dfe:	0018      	movs	r0, r3
 8001e00:	231c      	movs	r3, #28
 8001e02:	001a      	movs	r2, r3
 8001e04:	2100      	movs	r1, #0
 8001e06:	f008 f9e3 	bl	800a1d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e0a:	003b      	movs	r3, r7
 8001e0c:	0018      	movs	r0, r3
 8001e0e:	2334      	movs	r3, #52	; 0x34
 8001e10:	001a      	movs	r2, r3
 8001e12:	2100      	movs	r1, #0
 8001e14:	f008 f9dc 	bl	800a1d0 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001e18:	4b37      	ldr	r3, [pc, #220]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e1a:	4a38      	ldr	r2, [pc, #224]	; (8001efc <MX_TIM17_Init+0x108>)
 8001e1c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 8001e1e:	4b36      	ldr	r3, [pc, #216]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e20:	2213      	movs	r2, #19
 8001e22:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e24:	4b34      	ldr	r3, [pc, #208]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001e2a:	4b33      	ldr	r3, [pc, #204]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e2c:	4a34      	ldr	r2, [pc, #208]	; (8001f00 <MX_TIM17_Init+0x10c>)
 8001e2e:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e30:	4b31      	ldr	r3, [pc, #196]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e32:	2200      	movs	r2, #0
 8001e34:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001e36:	4b30      	ldr	r3, [pc, #192]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e38:	2200      	movs	r2, #0
 8001e3a:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e3c:	4b2e      	ldr	r3, [pc, #184]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e3e:	2200      	movs	r2, #0
 8001e40:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e44:	0018      	movs	r0, r3
 8001e46:	f002 fc71 	bl	800472c <HAL_TIM_Base_Init>
 8001e4a:	1e03      	subs	r3, r0, #0
 8001e4c:	d001      	beq.n	8001e52 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001e4e:	f7ff faef 	bl	8001430 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001e52:	4b29      	ldr	r3, [pc, #164]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e54:	0018      	movs	r0, r3
 8001e56:	f002 fd17 	bl	8004888 <HAL_TIM_PWM_Init>
 8001e5a:	1e03      	subs	r3, r0, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001e5e:	f7ff fae7 	bl	8001430 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e62:	2134      	movs	r1, #52	; 0x34
 8001e64:	187b      	adds	r3, r7, r1
 8001e66:	2260      	movs	r2, #96	; 0x60
 8001e68:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001e6a:	187b      	adds	r3, r7, r1
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e70:	187b      	adds	r3, r7, r1
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e76:	187b      	adds	r3, r7, r1
 8001e78:	2200      	movs	r2, #0
 8001e7a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e7c:	187b      	adds	r3, r7, r1
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e82:	187b      	adds	r3, r7, r1
 8001e84:	2200      	movs	r2, #0
 8001e86:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e8e:	1879      	adds	r1, r7, r1
 8001e90:	4b19      	ldr	r3, [pc, #100]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	0018      	movs	r0, r3
 8001e96:	f002 ff29 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001e9a:	1e03      	subs	r3, r0, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001e9e:	f7ff fac7 	bl	8001430 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001ea2:	003b      	movs	r3, r7
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001ea8:	003b      	movs	r3, r7
 8001eaa:	2200      	movs	r2, #0
 8001eac:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001eae:	003b      	movs	r3, r7
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001eb4:	003b      	movs	r3, r7
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001eba:	003b      	movs	r3, r7
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001ec0:	003b      	movs	r3, r7
 8001ec2:	2280      	movs	r2, #128	; 0x80
 8001ec4:	0192      	lsls	r2, r2, #6
 8001ec6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001ec8:	003b      	movs	r3, r7
 8001eca:	2200      	movs	r2, #0
 8001ecc:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ece:	003b      	movs	r3, r7
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001ed4:	003a      	movs	r2, r7
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001ed8:	0011      	movs	r1, r2
 8001eda:	0018      	movs	r0, r3
 8001edc:	f003 fbc8 	bl	8005670 <HAL_TIMEx_ConfigBreakDeadTime>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001ee4:	f7ff faa4 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001ee8:	4b03      	ldr	r3, [pc, #12]	; (8001ef8 <MX_TIM17_Init+0x104>)
 8001eea:	0018      	movs	r0, r3
 8001eec:	f000 f91e 	bl	800212c <HAL_TIM_MspPostInit>

}
 8001ef0:	46c0      	nop			; (mov r8, r8)
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	b014      	add	sp, #80	; 0x50
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	200033f0 	.word	0x200033f0
 8001efc:	40014800 	.word	0x40014800
 8001f00:	000003e7 	.word	0x000003e7

08001f04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f04:	b590      	push	{r4, r7, lr}
 8001f06:	b08d      	sub	sp, #52	; 0x34
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	241c      	movs	r4, #28
 8001f0e:	193b      	adds	r3, r7, r4
 8001f10:	0018      	movs	r0, r3
 8001f12:	2314      	movs	r3, #20
 8001f14:	001a      	movs	r2, r3
 8001f16:	2100      	movs	r1, #0
 8001f18:	f008 f95a 	bl	800a1d0 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a3e      	ldr	r2, [pc, #248]	; (800201c <HAL_TIM_Encoder_MspInit+0x118>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d13a      	bne.n	8001f9c <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001f26:	4b3e      	ldr	r3, [pc, #248]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f2a:	4b3d      	ldr	r3, [pc, #244]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f2c:	2180      	movs	r1, #128	; 0x80
 8001f2e:	0109      	lsls	r1, r1, #4
 8001f30:	430a      	orrs	r2, r1
 8001f32:	641a      	str	r2, [r3, #64]	; 0x40
 8001f34:	4b3a      	ldr	r3, [pc, #232]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f36:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	011b      	lsls	r3, r3, #4
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	4b37      	ldr	r3, [pc, #220]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f44:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f46:	4b36      	ldr	r3, [pc, #216]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f48:	2101      	movs	r1, #1
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f4e:	4b34      	ldr	r3, [pc, #208]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f52:	2201      	movs	r2, #1
 8001f54:	4013      	ands	r3, r2
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CODEUR1_PH1_Pin|CODEUR1_PH2_Pin;
 8001f5a:	193b      	adds	r3, r7, r4
 8001f5c:	22c0      	movs	r2, #192	; 0xc0
 8001f5e:	0092      	lsls	r2, r2, #2
 8001f60:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	0021      	movs	r1, r4
 8001f64:	187b      	adds	r3, r7, r1
 8001f66:	2202      	movs	r2, #2
 8001f68:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	187b      	adds	r3, r7, r1
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	187b      	adds	r3, r7, r1
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f76:	187b      	adds	r3, r7, r1
 8001f78:	2202      	movs	r2, #2
 8001f7a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f7c:	187a      	adds	r2, r7, r1
 8001f7e:	23a0      	movs	r3, #160	; 0xa0
 8001f80:	05db      	lsls	r3, r3, #23
 8001f82:	0011      	movs	r1, r2
 8001f84:	0018      	movs	r0, r3
 8001f86:	f001 faf7 	bl	8003578 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2103      	movs	r1, #3
 8001f8e:	200e      	movs	r0, #14
 8001f90:	f001 f87a 	bl	8003088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f94:	200e      	movs	r0, #14
 8001f96:	f001 f88c 	bl	80030b2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f9a:	e03a      	b.n	8002012 <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a20      	ldr	r2, [pc, #128]	; (8002024 <HAL_TIM_Encoder_MspInit+0x120>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d135      	bne.n	8002012 <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001fa6:	4b1e      	ldr	r3, [pc, #120]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001fa8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001faa:	4b1d      	ldr	r3, [pc, #116]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001fac:	2102      	movs	r1, #2
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fb2:	4b1b      	ldr	r3, [pc, #108]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fb6:	2202      	movs	r2, #2
 8001fb8:	4013      	ands	r3, r2
 8001fba:	613b      	str	r3, [r7, #16]
 8001fbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fbe:	4b18      	ldr	r3, [pc, #96]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fc2:	4b17      	ldr	r3, [pc, #92]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001fc4:	2104      	movs	r1, #4
 8001fc6:	430a      	orrs	r2, r1
 8001fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001fca:	4b15      	ldr	r3, [pc, #84]	; (8002020 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001fcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fce:	2204      	movs	r2, #4
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CODEUR2_PH1_Pin|CODEUR2_PH2_Pin;
 8001fd6:	211c      	movs	r1, #28
 8001fd8:	187b      	adds	r3, r7, r1
 8001fda:	22c0      	movs	r2, #192	; 0xc0
 8001fdc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fde:	187b      	adds	r3, r7, r1
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	187b      	adds	r3, r7, r1
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	187b      	adds	r3, r7, r1
 8001fec:	2200      	movs	r2, #0
 8001fee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001ff0:	187b      	adds	r3, r7, r1
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff6:	187b      	adds	r3, r7, r1
 8001ff8:	4a0b      	ldr	r2, [pc, #44]	; (8002028 <HAL_TIM_Encoder_MspInit+0x124>)
 8001ffa:	0019      	movs	r1, r3
 8001ffc:	0010      	movs	r0, r2
 8001ffe:	f001 fabb 	bl	8003578 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	2103      	movs	r1, #3
 8002006:	2010      	movs	r0, #16
 8002008:	f001 f83e 	bl	8003088 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800200c:	2010      	movs	r0, #16
 800200e:	f001 f850 	bl	80030b2 <HAL_NVIC_EnableIRQ>
}
 8002012:	46c0      	nop			; (mov r8, r8)
 8002014:	46bd      	mov	sp, r7
 8002016:	b00d      	add	sp, #52	; 0x34
 8002018:	bd90      	pop	{r4, r7, pc}
 800201a:	46c0      	nop			; (mov r8, r8)
 800201c:	40012c00 	.word	0x40012c00
 8002020:	40021000 	.word	0x40021000
 8002024:	40000400 	.word	0x40000400
 8002028:	50000800 	.word	0x50000800

0800202c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a27      	ldr	r2, [pc, #156]	; (80020d8 <HAL_TIM_Base_MspInit+0xac>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d10c      	bne.n	8002058 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800203e:	4b27      	ldr	r3, [pc, #156]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002044:	2110      	movs	r1, #16
 8002046:	430a      	orrs	r2, r1
 8002048:	63da      	str	r2, [r3, #60]	; 0x3c
 800204a:	4b24      	ldr	r3, [pc, #144]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	2210      	movs	r2, #16
 8002050:	4013      	ands	r3, r2
 8002052:	617b      	str	r3, [r7, #20]
 8002054:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002056:	e03a      	b.n	80020ce <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a20      	ldr	r2, [pc, #128]	; (80020e0 <HAL_TIM_Base_MspInit+0xb4>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d10e      	bne.n	8002080 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8002062:	4b1e      	ldr	r3, [pc, #120]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002064:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002066:	4b1d      	ldr	r3, [pc, #116]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002068:	2180      	movs	r1, #128	; 0x80
 800206a:	0209      	lsls	r1, r1, #8
 800206c:	430a      	orrs	r2, r1
 800206e:	641a      	str	r2, [r3, #64]	; 0x40
 8002070:	4b1a      	ldr	r3, [pc, #104]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002072:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002074:	2380      	movs	r3, #128	; 0x80
 8002076:	021b      	lsls	r3, r3, #8
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
}
 800207e:	e026      	b.n	80020ce <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a17      	ldr	r2, [pc, #92]	; (80020e4 <HAL_TIM_Base_MspInit+0xb8>)
 8002086:	4293      	cmp	r3, r2
 8002088:	d10e      	bne.n	80020a8 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800208a:	4b14      	ldr	r3, [pc, #80]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 800208c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800208e:	4b13      	ldr	r3, [pc, #76]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 8002090:	2180      	movs	r1, #128	; 0x80
 8002092:	0289      	lsls	r1, r1, #10
 8002094:	430a      	orrs	r2, r1
 8002096:	641a      	str	r2, [r3, #64]	; 0x40
 8002098:	4b10      	ldr	r3, [pc, #64]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 800209a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	029b      	lsls	r3, r3, #10
 80020a0:	4013      	ands	r3, r2
 80020a2:	60fb      	str	r3, [r7, #12]
 80020a4:	68fb      	ldr	r3, [r7, #12]
}
 80020a6:	e012      	b.n	80020ce <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM17)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0e      	ldr	r2, [pc, #56]	; (80020e8 <HAL_TIM_Base_MspInit+0xbc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10d      	bne.n	80020ce <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80020b2:	4b0a      	ldr	r3, [pc, #40]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 80020b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020b6:	4b09      	ldr	r3, [pc, #36]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 80020b8:	2180      	movs	r1, #128	; 0x80
 80020ba:	02c9      	lsls	r1, r1, #11
 80020bc:	430a      	orrs	r2, r1
 80020be:	641a      	str	r2, [r3, #64]	; 0x40
 80020c0:	4b06      	ldr	r3, [pc, #24]	; (80020dc <HAL_TIM_Base_MspInit+0xb0>)
 80020c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020c4:	2380      	movs	r3, #128	; 0x80
 80020c6:	02db      	lsls	r3, r3, #11
 80020c8:	4013      	ands	r3, r2
 80020ca:	60bb      	str	r3, [r7, #8]
 80020cc:	68bb      	ldr	r3, [r7, #8]
}
 80020ce:	46c0      	nop			; (mov r8, r8)
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b006      	add	sp, #24
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	40001000 	.word	0x40001000
 80020dc:	40021000 	.word	0x40021000
 80020e0:	40002000 	.word	0x40002000
 80020e4:	40014400 	.word	0x40014400
 80020e8:	40014800 	.word	0x40014800

080020ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	; (8002124 <HAL_TIM_PWM_MspInit+0x38>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d10d      	bne.n	800211a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 80020fe:	4b0a      	ldr	r3, [pc, #40]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 8002100:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002102:	4b09      	ldr	r3, [pc, #36]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 8002104:	2180      	movs	r1, #128	; 0x80
 8002106:	0249      	lsls	r1, r1, #9
 8002108:	430a      	orrs	r2, r1
 800210a:	641a      	str	r2, [r3, #64]	; 0x40
 800210c:	4b06      	ldr	r3, [pc, #24]	; (8002128 <HAL_TIM_PWM_MspInit+0x3c>)
 800210e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002110:	2380      	movs	r3, #128	; 0x80
 8002112:	025b      	lsls	r3, r3, #9
 8002114:	4013      	ands	r3, r2
 8002116:	60fb      	str	r3, [r7, #12]
 8002118:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	46bd      	mov	sp, r7
 800211e:	b004      	add	sp, #16
 8002120:	bd80      	pop	{r7, pc}
 8002122:	46c0      	nop			; (mov r8, r8)
 8002124:	40014000 	.word	0x40014000
 8002128:	40021000 	.word	0x40021000

0800212c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800212c:	b590      	push	{r4, r7, lr}
 800212e:	b08d      	sub	sp, #52	; 0x34
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002134:	241c      	movs	r4, #28
 8002136:	193b      	adds	r3, r7, r4
 8002138:	0018      	movs	r0, r3
 800213a:	2314      	movs	r3, #20
 800213c:	001a      	movs	r2, r3
 800213e:	2100      	movs	r1, #0
 8002140:	f008 f846 	bl	800a1d0 <memset>
  if(timHandle->Instance==TIM14)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a51      	ldr	r2, [pc, #324]	; (8002290 <HAL_TIM_MspPostInit+0x164>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d123      	bne.n	8002196 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800214e:	4b51      	ldr	r3, [pc, #324]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 8002150:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002152:	4b50      	ldr	r3, [pc, #320]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 8002154:	2104      	movs	r1, #4
 8002156:	430a      	orrs	r2, r1
 8002158:	635a      	str	r2, [r3, #52]	; 0x34
 800215a:	4b4e      	ldr	r3, [pc, #312]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 800215c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800215e:	2204      	movs	r2, #4
 8002160:	4013      	ands	r3, r2
 8002162:	61bb      	str	r3, [r7, #24]
 8002164:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOT_LIDAR_Pin;
 8002166:	193b      	adds	r3, r7, r4
 8002168:	2280      	movs	r2, #128	; 0x80
 800216a:	0152      	lsls	r2, r2, #5
 800216c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800216e:	0021      	movs	r1, r4
 8002170:	187b      	adds	r3, r7, r1
 8002172:	2202      	movs	r2, #2
 8002174:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002176:	187b      	adds	r3, r7, r1
 8002178:	2200      	movs	r2, #0
 800217a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800217c:	187b      	adds	r3, r7, r1
 800217e:	2200      	movs	r2, #0
 8002180:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8002182:	187b      	adds	r3, r7, r1
 8002184:	2202      	movs	r2, #2
 8002186:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8002188:	187b      	adds	r3, r7, r1
 800218a:	4a43      	ldr	r2, [pc, #268]	; (8002298 <HAL_TIM_MspPostInit+0x16c>)
 800218c:	0019      	movs	r1, r3
 800218e:	0010      	movs	r0, r2
 8002190:	f001 f9f2 	bl	8003578 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002194:	e078      	b.n	8002288 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	4a40      	ldr	r2, [pc, #256]	; (800229c <HAL_TIM_MspPostInit+0x170>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d122      	bne.n	80021e6 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021a0:	4b3c      	ldr	r3, [pc, #240]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 80021a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021a4:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 80021a6:	2104      	movs	r1, #4
 80021a8:	430a      	orrs	r2, r1
 80021aa:	635a      	str	r2, [r3, #52]	; 0x34
 80021ac:	4b39      	ldr	r3, [pc, #228]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 80021ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b0:	2204      	movs	r2, #4
 80021b2:	4013      	ands	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
 80021b6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_MOT2_PH1_Pin|PWM_MOT2_PH2_Pin;
 80021b8:	211c      	movs	r1, #28
 80021ba:	187b      	adds	r3, r7, r1
 80021bc:	2206      	movs	r2, #6
 80021be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c0:	187b      	adds	r3, r7, r1
 80021c2:	2202      	movs	r2, #2
 80021c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	187b      	adds	r3, r7, r1
 80021c8:	2200      	movs	r2, #0
 80021ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021cc:	187b      	adds	r3, r7, r1
 80021ce:	2200      	movs	r2, #0
 80021d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 80021d2:	187b      	adds	r3, r7, r1
 80021d4:	2202      	movs	r2, #2
 80021d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021d8:	187b      	adds	r3, r7, r1
 80021da:	4a2f      	ldr	r2, [pc, #188]	; (8002298 <HAL_TIM_MspPostInit+0x16c>)
 80021dc:	0019      	movs	r1, r3
 80021de:	0010      	movs	r0, r2
 80021e0:	f001 f9ca 	bl	8003578 <HAL_GPIO_Init>
}
 80021e4:	e050      	b.n	8002288 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a2d      	ldr	r2, [pc, #180]	; (80022a0 <HAL_TIM_MspPostInit+0x174>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d123      	bne.n	8002238 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f0:	4b28      	ldr	r3, [pc, #160]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 80021f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021f4:	4b27      	ldr	r3, [pc, #156]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 80021f6:	2101      	movs	r1, #1
 80021f8:	430a      	orrs	r2, r1
 80021fa:	635a      	str	r2, [r3, #52]	; 0x34
 80021fc:	4b25      	ldr	r3, [pc, #148]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 80021fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002200:	2201      	movs	r2, #1
 8002202:	4013      	ands	r3, r2
 8002204:	613b      	str	r3, [r7, #16]
 8002206:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_MOT1_PH1_Pin;
 8002208:	211c      	movs	r1, #28
 800220a:	187b      	adds	r3, r7, r1
 800220c:	2240      	movs	r2, #64	; 0x40
 800220e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002210:	187b      	adds	r3, r7, r1
 8002212:	2202      	movs	r2, #2
 8002214:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002216:	187b      	adds	r3, r7, r1
 8002218:	2200      	movs	r2, #0
 800221a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221c:	187b      	adds	r3, r7, r1
 800221e:	2200      	movs	r2, #0
 8002220:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8002222:	187b      	adds	r3, r7, r1
 8002224:	2205      	movs	r2, #5
 8002226:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH1_GPIO_Port, &GPIO_InitStruct);
 8002228:	187a      	adds	r2, r7, r1
 800222a:	23a0      	movs	r3, #160	; 0xa0
 800222c:	05db      	lsls	r3, r3, #23
 800222e:	0011      	movs	r1, r2
 8002230:	0018      	movs	r0, r3
 8002232:	f001 f9a1 	bl	8003578 <HAL_GPIO_Init>
}
 8002236:	e027      	b.n	8002288 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a19      	ldr	r2, [pc, #100]	; (80022a4 <HAL_TIM_MspPostInit+0x178>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d122      	bne.n	8002288 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 8002244:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002246:	4b13      	ldr	r3, [pc, #76]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 8002248:	2101      	movs	r1, #1
 800224a:	430a      	orrs	r2, r1
 800224c:	635a      	str	r2, [r3, #52]	; 0x34
 800224e:	4b11      	ldr	r3, [pc, #68]	; (8002294 <HAL_TIM_MspPostInit+0x168>)
 8002250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002252:	2201      	movs	r2, #1
 8002254:	4013      	ands	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOT1_PH2_Pin;
 800225a:	211c      	movs	r1, #28
 800225c:	187b      	adds	r3, r7, r1
 800225e:	2280      	movs	r2, #128	; 0x80
 8002260:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	187b      	adds	r3, r7, r1
 8002264:	2202      	movs	r2, #2
 8002266:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002268:	187b      	adds	r3, r7, r1
 800226a:	2200      	movs	r2, #0
 800226c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226e:	187b      	adds	r3, r7, r1
 8002270:	2200      	movs	r2, #0
 8002272:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8002274:	187b      	adds	r3, r7, r1
 8002276:	2205      	movs	r2, #5
 8002278:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH2_GPIO_Port, &GPIO_InitStruct);
 800227a:	187a      	adds	r2, r7, r1
 800227c:	23a0      	movs	r3, #160	; 0xa0
 800227e:	05db      	lsls	r3, r3, #23
 8002280:	0011      	movs	r1, r2
 8002282:	0018      	movs	r0, r3
 8002284:	f001 f978 	bl	8003578 <HAL_GPIO_Init>
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b00d      	add	sp, #52	; 0x34
 800228e:	bd90      	pop	{r4, r7, pc}
 8002290:	40002000 	.word	0x40002000
 8002294:	40021000 	.word	0x40021000
 8002298:	50000800 	.word	0x50000800
 800229c:	40014000 	.word	0x40014000
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800

080022a8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022ac:	4b23      	ldr	r3, [pc, #140]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022ae:	4a24      	ldr	r2, [pc, #144]	; (8002340 <MX_USART1_UART_Init+0x98>)
 80022b0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 80022b2:	4b22      	ldr	r3, [pc, #136]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022b4:	22e1      	movs	r2, #225	; 0xe1
 80022b6:	0292      	lsls	r2, r2, #10
 80022b8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022ba:	4b20      	ldr	r3, [pc, #128]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022bc:	2200      	movs	r2, #0
 80022be:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c0:	4b1e      	ldr	r3, [pc, #120]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022c6:	4b1d      	ldr	r3, [pc, #116]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022cc:	4b1b      	ldr	r3, [pc, #108]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022ce:	220c      	movs	r2, #12
 80022d0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022d2:	4b1a      	ldr	r3, [pc, #104]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022da:	2200      	movs	r2, #0
 80022dc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022de:	4b17      	ldr	r3, [pc, #92]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80022e4:	4b15      	ldr	r3, [pc, #84]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022ea:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022f0:	4b12      	ldr	r3, [pc, #72]	; (800233c <MX_USART1_UART_Init+0x94>)
 80022f2:	0018      	movs	r0, r3
 80022f4:	f003 fa7a 	bl	80057ec <HAL_UART_Init>
 80022f8:	1e03      	subs	r3, r0, #0
 80022fa:	d001      	beq.n	8002300 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80022fc:	f7ff f898 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_USART1_UART_Init+0x94>)
 8002302:	2100      	movs	r1, #0
 8002304:	0018      	movs	r0, r3
 8002306:	f005 fbcb 	bl	8007aa0 <HAL_UARTEx_SetTxFifoThreshold>
 800230a:	1e03      	subs	r3, r0, #0
 800230c:	d001      	beq.n	8002312 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800230e:	f7ff f88f 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002312:	4b0a      	ldr	r3, [pc, #40]	; (800233c <MX_USART1_UART_Init+0x94>)
 8002314:	2100      	movs	r1, #0
 8002316:	0018      	movs	r0, r3
 8002318:	f005 fc02 	bl	8007b20 <HAL_UARTEx_SetRxFifoThreshold>
 800231c:	1e03      	subs	r3, r0, #0
 800231e:	d001      	beq.n	8002324 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8002320:	f7ff f886 	bl	8001430 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <MX_USART1_UART_Init+0x94>)
 8002326:	0018      	movs	r0, r3
 8002328:	f005 fb80 	bl	8007a2c <HAL_UARTEx_DisableFifoMode>
 800232c:	1e03      	subs	r3, r0, #0
 800232e:	d001      	beq.n	8002334 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8002330:	f7ff f87e 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002334:	46c0      	nop			; (mov r8, r8)
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	46c0      	nop			; (mov r8, r8)
 800233c:	2000343c 	.word	0x2000343c
 8002340:	40013800 	.word	0x40013800

08002344 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 800234a:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <MX_USART4_UART_Init+0x64>)
 800234c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 800234e:	4b15      	ldr	r3, [pc, #84]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 8002350:	22fa      	movs	r2, #250	; 0xfa
 8002352:	0252      	lsls	r2, r2, #9
 8002354:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002356:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800235c:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002362:	4b10      	ldr	r3, [pc, #64]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002368:	4b0e      	ldr	r3, [pc, #56]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 800236a:	220c      	movs	r2, #12
 800236c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236e:	4b0d      	ldr	r3, [pc, #52]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002374:	4b0b      	ldr	r3, [pc, #44]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002380:	4b08      	ldr	r3, [pc, #32]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002386:	4b07      	ldr	r3, [pc, #28]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 8002388:	2200      	movs	r2, #0
 800238a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <MX_USART4_UART_Init+0x60>)
 800238e:	0018      	movs	r0, r3
 8002390:	f003 fa2c 	bl	80057ec <HAL_UART_Init>
 8002394:	1e03      	subs	r3, r0, #0
 8002396:	d001      	beq.n	800239c <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8002398:	f7ff f84a 	bl	8001430 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800239c:	46c0      	nop			; (mov r8, r8)
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	46c0      	nop			; (mov r8, r8)
 80023a4:	200034d0 	.word	0x200034d0
 80023a8:	40004c00 	.word	0x40004c00

080023ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80023ac:	b590      	push	{r4, r7, lr}
 80023ae:	b093      	sub	sp, #76	; 0x4c
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b4:	2334      	movs	r3, #52	; 0x34
 80023b6:	18fb      	adds	r3, r7, r3
 80023b8:	0018      	movs	r0, r3
 80023ba:	2314      	movs	r3, #20
 80023bc:	001a      	movs	r2, r3
 80023be:	2100      	movs	r1, #0
 80023c0:	f007 ff06 	bl	800a1d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80023c4:	2418      	movs	r4, #24
 80023c6:	193b      	adds	r3, r7, r4
 80023c8:	0018      	movs	r0, r3
 80023ca:	231c      	movs	r3, #28
 80023cc:	001a      	movs	r2, r3
 80023ce:	2100      	movs	r1, #0
 80023d0:	f007 fefe 	bl	800a1d0 <memset>
  if(uartHandle->Instance==USART1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	4a52      	ldr	r2, [pc, #328]	; (8002524 <HAL_UART_MspInit+0x178>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d13e      	bne.n	800245c <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80023de:	193b      	adds	r3, r7, r4
 80023e0:	2201      	movs	r2, #1
 80023e2:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 80023e4:	193b      	adds	r3, r7, r4
 80023e6:	2200      	movs	r2, #0
 80023e8:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80023ea:	193b      	adds	r3, r7, r4
 80023ec:	0018      	movs	r0, r3
 80023ee:	f001 ffb1 	bl	8004354 <HAL_RCCEx_PeriphCLKConfig>
 80023f2:	1e03      	subs	r3, r0, #0
 80023f4:	d001      	beq.n	80023fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80023f6:	f7ff f81b 	bl	8001430 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80023fa:	4b4b      	ldr	r3, [pc, #300]	; (8002528 <HAL_UART_MspInit+0x17c>)
 80023fc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023fe:	4b4a      	ldr	r3, [pc, #296]	; (8002528 <HAL_UART_MspInit+0x17c>)
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	01c9      	lsls	r1, r1, #7
 8002404:	430a      	orrs	r2, r1
 8002406:	641a      	str	r2, [r3, #64]	; 0x40
 8002408:	4b47      	ldr	r3, [pc, #284]	; (8002528 <HAL_UART_MspInit+0x17c>)
 800240a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	01db      	lsls	r3, r3, #7
 8002410:	4013      	ands	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002416:	4b44      	ldr	r3, [pc, #272]	; (8002528 <HAL_UART_MspInit+0x17c>)
 8002418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241a:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_UART_MspInit+0x17c>)
 800241c:	2104      	movs	r1, #4
 800241e:	430a      	orrs	r2, r1
 8002420:	635a      	str	r2, [r3, #52]	; 0x34
 8002422:	4b41      	ldr	r3, [pc, #260]	; (8002528 <HAL_UART_MspInit+0x17c>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	2204      	movs	r2, #4
 8002428:	4013      	ands	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Debug_Pin|USART1_RX_Debug_Pin;
 800242e:	2134      	movs	r1, #52	; 0x34
 8002430:	187b      	adds	r3, r7, r1
 8002432:	2230      	movs	r2, #48	; 0x30
 8002434:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002436:	187b      	adds	r3, r7, r1
 8002438:	2202      	movs	r2, #2
 800243a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	187b      	adds	r3, r7, r1
 800243e:	2200      	movs	r2, #0
 8002440:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002442:	187b      	adds	r3, r7, r1
 8002444:	2200      	movs	r2, #0
 8002446:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2201      	movs	r2, #1
 800244c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800244e:	187b      	adds	r3, r7, r1
 8002450:	4a36      	ldr	r2, [pc, #216]	; (800252c <HAL_UART_MspInit+0x180>)
 8002452:	0019      	movs	r1, r3
 8002454:	0010      	movs	r0, r2
 8002456:	f001 f88f 	bl	8003578 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800245a:	e05f      	b.n	800251c <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART4)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a33      	ldr	r2, [pc, #204]	; (8002530 <HAL_UART_MspInit+0x184>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d15a      	bne.n	800251c <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART4_CLK_ENABLE();
 8002466:	4b30      	ldr	r3, [pc, #192]	; (8002528 <HAL_UART_MspInit+0x17c>)
 8002468:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800246a:	4b2f      	ldr	r3, [pc, #188]	; (8002528 <HAL_UART_MspInit+0x17c>)
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0309      	lsls	r1, r1, #12
 8002470:	430a      	orrs	r2, r1
 8002472:	63da      	str	r2, [r3, #60]	; 0x3c
 8002474:	4b2c      	ldr	r3, [pc, #176]	; (8002528 <HAL_UART_MspInit+0x17c>)
 8002476:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002478:	2380      	movs	r3, #128	; 0x80
 800247a:	031b      	lsls	r3, r3, #12
 800247c:	4013      	ands	r3, r2
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002482:	4b29      	ldr	r3, [pc, #164]	; (8002528 <HAL_UART_MspInit+0x17c>)
 8002484:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002486:	4b28      	ldr	r3, [pc, #160]	; (8002528 <HAL_UART_MspInit+0x17c>)
 8002488:	2104      	movs	r1, #4
 800248a:	430a      	orrs	r2, r1
 800248c:	635a      	str	r2, [r3, #52]	; 0x34
 800248e:	4b26      	ldr	r3, [pc, #152]	; (8002528 <HAL_UART_MspInit+0x17c>)
 8002490:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002492:	2204      	movs	r2, #4
 8002494:	4013      	ands	r3, r2
 8002496:	60bb      	str	r3, [r7, #8]
 8002498:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_RX_LIDAR_Pin|USART4_TX_LIDAR_Pin;
 800249a:	2134      	movs	r1, #52	; 0x34
 800249c:	187b      	adds	r3, r7, r1
 800249e:	22c0      	movs	r2, #192	; 0xc0
 80024a0:	0112      	lsls	r2, r2, #4
 80024a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024a4:	187b      	adds	r3, r7, r1
 80024a6:	2202      	movs	r2, #2
 80024a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024aa:	187b      	adds	r3, r7, r1
 80024ac:	2200      	movs	r2, #0
 80024ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b0:	187b      	adds	r3, r7, r1
 80024b2:	2200      	movs	r2, #0
 80024b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 80024b6:	187b      	adds	r3, r7, r1
 80024b8:	2201      	movs	r2, #1
 80024ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024bc:	187b      	adds	r3, r7, r1
 80024be:	4a1b      	ldr	r2, [pc, #108]	; (800252c <HAL_UART_MspInit+0x180>)
 80024c0:	0019      	movs	r1, r3
 80024c2:	0010      	movs	r0, r2
 80024c4:	f001 f858 	bl	8003578 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 80024c8:	4b1a      	ldr	r3, [pc, #104]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024ca:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <HAL_UART_MspInit+0x18c>)
 80024cc:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 80024ce:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024d0:	2238      	movs	r2, #56	; 0x38
 80024d2:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80024d4:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024d6:	2200      	movs	r2, #0
 80024d8:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80024da:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024dc:	2200      	movs	r2, #0
 80024de:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024e2:	2280      	movs	r2, #128	; 0x80
 80024e4:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80024e6:	4b13      	ldr	r3, [pc, #76]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024f4:	2220      	movs	r2, #32
 80024f6:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <HAL_UART_MspInit+0x188>)
 80024fa:	2200      	movs	r2, #0
 80024fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_UART_MspInit+0x188>)
 8002500:	0018      	movs	r0, r3
 8002502:	f000 fde7 	bl	80030d4 <HAL_DMA_Init>
 8002506:	1e03      	subs	r3, r0, #0
 8002508:	d001      	beq.n	800250e <HAL_UART_MspInit+0x162>
      Error_Handler();
 800250a:	f7fe ff91 	bl	8001430 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2180      	movs	r1, #128	; 0x80
 8002512:	4a08      	ldr	r2, [pc, #32]	; (8002534 <HAL_UART_MspInit+0x188>)
 8002514:	505a      	str	r2, [r3, r1]
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <HAL_UART_MspInit+0x188>)
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800251c:	46c0      	nop			; (mov r8, r8)
 800251e:	46bd      	mov	sp, r7
 8002520:	b013      	add	sp, #76	; 0x4c
 8002522:	bd90      	pop	{r4, r7, pc}
 8002524:	40013800 	.word	0x40013800
 8002528:	40021000 	.word	0x40021000
 800252c:	50000800 	.word	0x50000800
 8002530:	40004c00 	.word	0x40004c00
 8002534:	20003564 	.word	0x20003564
 8002538:	4002001c 	.word	0x4002001c

0800253c <Reset_Handler>:
 800253c:	480d      	ldr	r0, [pc, #52]	; (8002574 <LoopForever+0x2>)
 800253e:	4685      	mov	sp, r0
 8002540:	f7ff f9cc 	bl	80018dc <SystemInit>
 8002544:	480c      	ldr	r0, [pc, #48]	; (8002578 <LoopForever+0x6>)
 8002546:	490d      	ldr	r1, [pc, #52]	; (800257c <LoopForever+0xa>)
 8002548:	4a0d      	ldr	r2, [pc, #52]	; (8002580 <LoopForever+0xe>)
 800254a:	2300      	movs	r3, #0
 800254c:	e002      	b.n	8002554 <LoopCopyDataInit>

0800254e <CopyDataInit>:
 800254e:	58d4      	ldr	r4, [r2, r3]
 8002550:	50c4      	str	r4, [r0, r3]
 8002552:	3304      	adds	r3, #4

08002554 <LoopCopyDataInit>:
 8002554:	18c4      	adds	r4, r0, r3
 8002556:	428c      	cmp	r4, r1
 8002558:	d3f9      	bcc.n	800254e <CopyDataInit>
 800255a:	4a0a      	ldr	r2, [pc, #40]	; (8002584 <LoopForever+0x12>)
 800255c:	4c0a      	ldr	r4, [pc, #40]	; (8002588 <LoopForever+0x16>)
 800255e:	2300      	movs	r3, #0
 8002560:	e001      	b.n	8002566 <LoopFillZerobss>

08002562 <FillZerobss>:
 8002562:	6013      	str	r3, [r2, #0]
 8002564:	3204      	adds	r2, #4

08002566 <LoopFillZerobss>:
 8002566:	42a2      	cmp	r2, r4
 8002568:	d3fb      	bcc.n	8002562 <FillZerobss>
 800256a:	f007 fe8d 	bl	800a288 <__libc_init_array>
 800256e:	f7fe fe1b 	bl	80011a8 <main>

08002572 <LoopForever>:
 8002572:	e7fe      	b.n	8002572 <LoopForever>
 8002574:	20009000 	.word	0x20009000
 8002578:	20000000 	.word	0x20000000
 800257c:	2000006c 	.word	0x2000006c
 8002580:	0800b33c 	.word	0x0800b33c
 8002584:	2000006c 	.word	0x2000006c
 8002588:	2000867c 	.word	0x2000867c

0800258c <ADC1_IRQHandler>:
 800258c:	e7fe      	b.n	800258c <ADC1_IRQHandler>
	...

08002590 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002596:	1dfb      	adds	r3, r7, #7
 8002598:	2200      	movs	r2, #0
 800259a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_Init+0x3c>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <HAL_Init+0x3c>)
 80025a2:	2180      	movs	r1, #128	; 0x80
 80025a4:	0049      	lsls	r1, r1, #1
 80025a6:	430a      	orrs	r2, r1
 80025a8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80025aa:	2003      	movs	r0, #3
 80025ac:	f7ff f800 	bl	80015b0 <HAL_InitTick>
 80025b0:	1e03      	subs	r3, r0, #0
 80025b2:	d003      	beq.n	80025bc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80025b4:	1dfb      	adds	r3, r7, #7
 80025b6:	2201      	movs	r2, #1
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	e001      	b.n	80025c0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80025bc:	f7fe ffc8 	bl	8001550 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80025c0:	1dfb      	adds	r3, r7, #7
 80025c2:	781b      	ldrb	r3, [r3, #0]
}
 80025c4:	0018      	movs	r0, r3
 80025c6:	46bd      	mov	sp, r7
 80025c8:	b002      	add	sp, #8
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	40022000 	.word	0x40022000

080025d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80025d4:	4b05      	ldr	r3, [pc, #20]	; (80025ec <HAL_IncTick+0x1c>)
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	001a      	movs	r2, r3
 80025da:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <HAL_IncTick+0x20>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	18d2      	adds	r2, r2, r3
 80025e0:	4b03      	ldr	r3, [pc, #12]	; (80025f0 <HAL_IncTick+0x20>)
 80025e2:	601a      	str	r2, [r3, #0]
}
 80025e4:	46c0      	nop			; (mov r8, r8)
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	20000008 	.word	0x20000008
 80025f0:	200035c0 	.word	0x200035c0

080025f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	af00      	add	r7, sp, #0
  return uwTick;
 80025f8:	4b02      	ldr	r3, [pc, #8]	; (8002604 <HAL_GetTick+0x10>)
 80025fa:	681b      	ldr	r3, [r3, #0]
}
 80025fc:	0018      	movs	r0, r3
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}
 8002602:	46c0      	nop			; (mov r8, r8)
 8002604:	200035c0 	.word	0x200035c0

08002608 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b084      	sub	sp, #16
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002610:	f7ff fff0 	bl	80025f4 <HAL_GetTick>
 8002614:	0003      	movs	r3, r0
 8002616:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	3301      	adds	r3, #1
 8002620:	d005      	beq.n	800262e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002622:	4b0a      	ldr	r3, [pc, #40]	; (800264c <HAL_Delay+0x44>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	001a      	movs	r2, r3
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	189b      	adds	r3, r3, r2
 800262c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800262e:	46c0      	nop			; (mov r8, r8)
 8002630:	f7ff ffe0 	bl	80025f4 <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	68bb      	ldr	r3, [r7, #8]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	68fa      	ldr	r2, [r7, #12]
 800263c:	429a      	cmp	r2, r3
 800263e:	d8f7      	bhi.n	8002630 <HAL_Delay+0x28>
  {
  }
}
 8002640:	46c0      	nop			; (mov r8, r8)
 8002642:	46c0      	nop			; (mov r8, r8)
 8002644:	46bd      	mov	sp, r7
 8002646:	b004      	add	sp, #16
 8002648:	bd80      	pop	{r7, pc}
 800264a:	46c0      	nop			; (mov r8, r8)
 800264c:	20000008 	.word	0x20000008

08002650 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b082      	sub	sp, #8
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8002658:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a06      	ldr	r2, [pc, #24]	; (8002678 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	4b04      	ldr	r3, [pc, #16]	; (8002674 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	430a      	orrs	r2, r1
 8002668:	601a      	str	r2, [r3, #0]
}
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	46bd      	mov	sp, r7
 800266e:	b002      	add	sp, #8
 8002670:	bd80      	pop	{r7, pc}
 8002672:	46c0      	nop			; (mov r8, r8)
 8002674:	40010000 	.word	0x40010000
 8002678:	fffff9ff 	.word	0xfffff9ff

0800267c <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	4a05      	ldr	r2, [pc, #20]	; (80026a0 <LL_ADC_SetCommonPathInternalCh+0x24>)
 800268c:	401a      	ands	r2, r3
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	431a      	orrs	r2, r3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	46bd      	mov	sp, r7
 800269a:	b002      	add	sp, #8
 800269c:	bd80      	pop	{r7, pc}
 800269e:	46c0      	nop			; (mov r8, r8)
 80026a0:	fe3fffff 	.word	0xfe3fffff

080026a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	23e0      	movs	r3, #224	; 0xe0
 80026b2:	045b      	lsls	r3, r3, #17
 80026b4:	4013      	ands	r3, r2
}
 80026b6:	0018      	movs	r0, r3
 80026b8:	46bd      	mov	sp, r7
 80026ba:	b002      	add	sp, #8
 80026bc:	bd80      	pop	{r7, pc}

080026be <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b084      	sub	sp, #16
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	695b      	ldr	r3, [r3, #20]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	2104      	movs	r1, #4
 80026d2:	400a      	ands	r2, r1
 80026d4:	2107      	movs	r1, #7
 80026d6:	4091      	lsls	r1, r2
 80026d8:	000a      	movs	r2, r1
 80026da:	43d2      	mvns	r2, r2
 80026dc:	401a      	ands	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	2104      	movs	r1, #4
 80026e2:	400b      	ands	r3, r1
 80026e4:	6879      	ldr	r1, [r7, #4]
 80026e6:	4099      	lsls	r1, r3
 80026e8:	000b      	movs	r3, r1
 80026ea:	431a      	orrs	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80026f0:	46c0      	nop			; (mov r8, r8)
 80026f2:	46bd      	mov	sp, r7
 80026f4:	b004      	add	sp, #16
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b082      	sub	sp, #8
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	2104      	movs	r1, #4
 800270a:	400a      	ands	r2, r1
 800270c:	2107      	movs	r1, #7
 800270e:	4091      	lsls	r1, r2
 8002710:	000a      	movs	r2, r1
 8002712:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	2104      	movs	r1, #4
 8002718:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800271a:	40da      	lsrs	r2, r3
 800271c:	0013      	movs	r3, r2
}
 800271e:	0018      	movs	r0, r3
 8002720:	46bd      	mov	sp, r7
 8002722:	b002      	add	sp, #8
 8002724:	bd80      	pop	{r7, pc}

08002726 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b084      	sub	sp, #16
 800272a:	af00      	add	r7, sp, #0
 800272c:	60f8      	str	r0, [r7, #12]
 800272e:	60b9      	str	r1, [r7, #8]
 8002730:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002736:	68ba      	ldr	r2, [r7, #8]
 8002738:	211f      	movs	r1, #31
 800273a:	400a      	ands	r2, r1
 800273c:	210f      	movs	r1, #15
 800273e:	4091      	lsls	r1, r2
 8002740:	000a      	movs	r2, r1
 8002742:	43d2      	mvns	r2, r2
 8002744:	401a      	ands	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	0e9b      	lsrs	r3, r3, #26
 800274a:	210f      	movs	r1, #15
 800274c:	4019      	ands	r1, r3
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	201f      	movs	r0, #31
 8002752:	4003      	ands	r3, r0
 8002754:	4099      	lsls	r1, r3
 8002756:	000b      	movs	r3, r1
 8002758:	431a      	orrs	r2, r3
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800275e:	46c0      	nop			; (mov r8, r8)
 8002760:	46bd      	mov	sp, r7
 8002762:	b004      	add	sp, #16
 8002764:	bd80      	pop	{r7, pc}

08002766 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b082      	sub	sp, #8
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
 800276e:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	035b      	lsls	r3, r3, #13
 8002778:	0b5b      	lsrs	r3, r3, #13
 800277a:	431a      	orrs	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002780:	46c0      	nop			; (mov r8, r8)
 8002782:	46bd      	mov	sp, r7
 8002784:	b002      	add	sp, #8
 8002786:	bd80      	pop	{r7, pc}

08002788 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002796:	683a      	ldr	r2, [r7, #0]
 8002798:	0352      	lsls	r2, r2, #13
 800279a:	0b52      	lsrs	r2, r2, #13
 800279c:	43d2      	mvns	r2, r2
 800279e:	401a      	ands	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b084      	sub	sp, #16
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	0212      	lsls	r2, r2, #8
 80027c0:	43d2      	mvns	r2, r2
 80027c2:	401a      	ands	r2, r3
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	021b      	lsls	r3, r3, #8
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	400b      	ands	r3, r1
 80027cc:	4904      	ldr	r1, [pc, #16]	; (80027e0 <LL_ADC_SetChannelSamplingTime+0x34>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	46bd      	mov	sp, r7
 80027da:	b004      	add	sp, #16
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	46c0      	nop			; (mov r8, r8)
 80027e0:	07ffff00 	.word	0x07ffff00

080027e4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	4a05      	ldr	r2, [pc, #20]	; (8002808 <LL_ADC_EnableInternalRegulator+0x24>)
 80027f2:	4013      	ands	r3, r2
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	0552      	lsls	r2, r2, #21
 80027f8:	431a      	orrs	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80027fe:	46c0      	nop			; (mov r8, r8)
 8002800:	46bd      	mov	sp, r7
 8002802:	b002      	add	sp, #8
 8002804:	bd80      	pop	{r7, pc}
 8002806:	46c0      	nop			; (mov r8, r8)
 8002808:	6fffffe8 	.word	0x6fffffe8

0800280c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	2380      	movs	r3, #128	; 0x80
 800281a:	055b      	lsls	r3, r3, #21
 800281c:	401a      	ands	r2, r3
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	055b      	lsls	r3, r3, #21
 8002822:	429a      	cmp	r2, r3
 8002824:	d101      	bne.n	800282a <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002826:	2301      	movs	r3, #1
 8002828:	e000      	b.n	800282c <LL_ADC_IsInternalRegulatorEnabled+0x20>
 800282a:	2300      	movs	r3, #0
}
 800282c:	0018      	movs	r0, r3
 800282e:	46bd      	mov	sp, r7
 8002830:	b002      	add	sp, #8
 8002832:	bd80      	pop	{r7, pc}

08002834 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b082      	sub	sp, #8
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	2201      	movs	r2, #1
 8002842:	4013      	ands	r3, r2
 8002844:	2b01      	cmp	r3, #1
 8002846:	d101      	bne.n	800284c <LL_ADC_IsEnabled+0x18>
 8002848:	2301      	movs	r3, #1
 800284a:	e000      	b.n	800284e <LL_ADC_IsEnabled+0x1a>
 800284c:	2300      	movs	r3, #0
}
 800284e:	0018      	movs	r0, r3
 8002850:	46bd      	mov	sp, r7
 8002852:	b002      	add	sp, #8
 8002854:	bd80      	pop	{r7, pc}

08002856 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002856:	b580      	push	{r7, lr}
 8002858:	b082      	sub	sp, #8
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	689b      	ldr	r3, [r3, #8]
 8002862:	2204      	movs	r2, #4
 8002864:	4013      	ands	r3, r2
 8002866:	2b04      	cmp	r3, #4
 8002868:	d101      	bne.n	800286e <LL_ADC_REG_IsConversionOngoing+0x18>
 800286a:	2301      	movs	r3, #1
 800286c:	e000      	b.n	8002870 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800286e:	2300      	movs	r3, #0
}
 8002870:	0018      	movs	r0, r3
 8002872:	46bd      	mov	sp, r7
 8002874:	b002      	add	sp, #8
 8002876:	bd80      	pop	{r7, pc}

08002878 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b088      	sub	sp, #32
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002880:	231f      	movs	r3, #31
 8002882:	18fb      	adds	r3, r7, r3
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002888:	2300      	movs	r3, #0
 800288a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 800288c:	2300      	movs	r3, #0
 800288e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d101      	bne.n	800289e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	e17f      	b.n	8002b9e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d10a      	bne.n	80028bc <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	0018      	movs	r0, r3
 80028aa:	f7fd fff5 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2200      	movs	r2, #0
 80028b2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2254      	movs	r2, #84	; 0x54
 80028b8:	2100      	movs	r1, #0
 80028ba:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	0018      	movs	r0, r3
 80028c2:	f7ff ffa3 	bl	800280c <LL_ADC_IsInternalRegulatorEnabled>
 80028c6:	1e03      	subs	r3, r0, #0
 80028c8:	d115      	bne.n	80028f6 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	0018      	movs	r0, r3
 80028d0:	f7ff ff88 	bl	80027e4 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028d4:	4bb4      	ldr	r3, [pc, #720]	; (8002ba8 <HAL_ADC_Init+0x330>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	49b4      	ldr	r1, [pc, #720]	; (8002bac <HAL_ADC_Init+0x334>)
 80028da:	0018      	movs	r0, r3
 80028dc:	f7fd fc1e 	bl	800011c <__udivsi3>
 80028e0:	0003      	movs	r3, r0
 80028e2:	3301      	adds	r3, #1
 80028e4:	005b      	lsls	r3, r3, #1
 80028e6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028e8:	e002      	b.n	80028f0 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3b01      	subs	r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f9      	bne.n	80028ea <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	0018      	movs	r0, r3
 80028fc:	f7ff ff86 	bl	800280c <LL_ADC_IsInternalRegulatorEnabled>
 8002900:	1e03      	subs	r3, r0, #0
 8002902:	d10f      	bne.n	8002924 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	2210      	movs	r2, #16
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002914:	2201      	movs	r2, #1
 8002916:	431a      	orrs	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800291c:	231f      	movs	r3, #31
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	2201      	movs	r2, #1
 8002922:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff ff94 	bl	8002856 <LL_ADC_REG_IsConversionOngoing>
 800292e:	0003      	movs	r3, r0
 8002930:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002936:	2210      	movs	r2, #16
 8002938:	4013      	ands	r3, r2
 800293a:	d000      	beq.n	800293e <HAL_ADC_Init+0xc6>
 800293c:	e122      	b.n	8002b84 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d000      	beq.n	8002946 <HAL_ADC_Init+0xce>
 8002944:	e11e      	b.n	8002b84 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294a:	4a99      	ldr	r2, [pc, #612]	; (8002bb0 <HAL_ADC_Init+0x338>)
 800294c:	4013      	ands	r3, r2
 800294e:	2202      	movs	r2, #2
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff ff6a 	bl	8002834 <LL_ADC_IsEnabled>
 8002960:	1e03      	subs	r3, r0, #0
 8002962:	d000      	beq.n	8002966 <HAL_ADC_Init+0xee>
 8002964:	e0ad      	b.n	8002ac2 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	7e1b      	ldrb	r3, [r3, #24]
 800296e:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002970:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	7e5b      	ldrb	r3, [r3, #25]
 8002976:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002978:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7e9b      	ldrb	r3, [r3, #26]
 800297e:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002980:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	2b00      	cmp	r3, #0
 8002988:	d002      	beq.n	8002990 <HAL_ADC_Init+0x118>
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	015b      	lsls	r3, r3, #5
 800298e:	e000      	b.n	8002992 <HAL_ADC_Init+0x11a>
 8002990:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002992:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002998:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	691b      	ldr	r3, [r3, #16]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	da04      	bge.n	80029ac <HAL_ADC_Init+0x134>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	005b      	lsls	r3, r3, #1
 80029a8:	085b      	lsrs	r3, r3, #1
 80029aa:	e001      	b.n	80029b0 <HAL_ADC_Init+0x138>
 80029ac:	2380      	movs	r3, #128	; 0x80
 80029ae:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 80029b0:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	212c      	movs	r1, #44	; 0x2c
 80029b6:	5c5b      	ldrb	r3, [r3, r1]
 80029b8:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 80029ba:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2220      	movs	r2, #32
 80029c6:	5c9b      	ldrb	r3, [r3, r2]
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d115      	bne.n	80029f8 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	7e9b      	ldrb	r3, [r3, #26]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d105      	bne.n	80029e0 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2280      	movs	r2, #128	; 0x80
 80029d8:	0252      	lsls	r2, r2, #9
 80029da:	4313      	orrs	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
 80029de:	e00b      	b.n	80029f8 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e4:	2220      	movs	r2, #32
 80029e6:	431a      	orrs	r2, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029f0:	2201      	movs	r2, #1
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00a      	beq.n	8002a16 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a04:	23e0      	movs	r3, #224	; 0xe0
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	4313      	orrs	r3, r2
 8002a14:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	4a65      	ldr	r2, [pc, #404]	; (8002bb4 <HAL_ADC_Init+0x33c>)
 8002a1e:	4013      	ands	r3, r2
 8002a20:	0019      	movs	r1, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	430a      	orrs	r2, r1
 8002a2a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	0f9b      	lsrs	r3, r3, #30
 8002a32:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	697a      	ldr	r2, [r7, #20]
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	223c      	movs	r2, #60	; 0x3c
 8002a44:	5c9b      	ldrb	r3, [r3, r2]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d111      	bne.n	8002a6e <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	0f9b      	lsrs	r3, r3, #30
 8002a50:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002a56:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002a5c:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002a62:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	2201      	movs	r2, #1
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	691b      	ldr	r3, [r3, #16]
 8002a74:	4a50      	ldr	r2, [pc, #320]	; (8002bb8 <HAL_ADC_Init+0x340>)
 8002a76:	4013      	ands	r3, r2
 8002a78:	0019      	movs	r1, r3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685a      	ldr	r2, [r3, #4]
 8002a88:	23c0      	movs	r3, #192	; 0xc0
 8002a8a:	061b      	lsls	r3, r3, #24
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d018      	beq.n	8002ac2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	05db      	lsls	r3, r3, #23
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d012      	beq.n	8002ac2 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002aa0:	2380      	movs	r3, #128	; 0x80
 8002aa2:	061b      	lsls	r3, r3, #24
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d00c      	beq.n	8002ac2 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002aa8:	4b44      	ldr	r3, [pc, #272]	; (8002bbc <HAL_ADC_Init+0x344>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a44      	ldr	r2, [pc, #272]	; (8002bc0 <HAL_ADC_Init+0x348>)
 8002aae:	4013      	ands	r3, r2
 8002ab0:	0019      	movs	r1, r3
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685a      	ldr	r2, [r3, #4]
 8002ab6:	23f0      	movs	r3, #240	; 0xf0
 8002ab8:	039b      	lsls	r3, r3, #14
 8002aba:	401a      	ands	r2, r3
 8002abc:	4b3f      	ldr	r3, [pc, #252]	; (8002bbc <HAL_ADC_Init+0x344>)
 8002abe:	430a      	orrs	r2, r1
 8002ac0:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aca:	001a      	movs	r2, r3
 8002acc:	2100      	movs	r1, #0
 8002ace:	f7ff fdf6 	bl	80026be <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6818      	ldr	r0, [r3, #0]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	493a      	ldr	r1, [pc, #232]	; (8002bc4 <HAL_ADC_Init+0x34c>)
 8002adc:	001a      	movs	r2, r3
 8002ade:	f7ff fdee 	bl	80026be <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d109      	bne.n	8002afe <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2110      	movs	r1, #16
 8002af6:	4249      	negs	r1, r1
 8002af8:	430a      	orrs	r2, r1
 8002afa:	629a      	str	r2, [r3, #40]	; 0x28
 8002afc:	e018      	b.n	8002b30 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691a      	ldr	r2, [r3, #16]
 8002b02:	2380      	movs	r3, #128	; 0x80
 8002b04:	039b      	lsls	r3, r3, #14
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d112      	bne.n	8002b30 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	3b01      	subs	r3, #1
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	221c      	movs	r2, #28
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	4252      	negs	r2, r2
 8002b20:	409a      	lsls	r2, r3
 8002b22:	0011      	movs	r1, r2
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	430a      	orrs	r2, r1
 8002b2e:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2100      	movs	r1, #0
 8002b36:	0018      	movs	r0, r3
 8002b38:	f7ff fdde 	bl	80026f8 <LL_ADC_GetSamplingTimeCommonChannels>
 8002b3c:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d10b      	bne.n	8002b5e <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b50:	2203      	movs	r2, #3
 8002b52:	4393      	bics	r3, r2
 8002b54:	2201      	movs	r2, #1
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b5c:	e01c      	b.n	8002b98 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b62:	2212      	movs	r2, #18
 8002b64:	4393      	bics	r3, r2
 8002b66:	2210      	movs	r2, #16
 8002b68:	431a      	orrs	r2, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b72:	2201      	movs	r2, #1
 8002b74:	431a      	orrs	r2, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b7a:	231f      	movs	r3, #31
 8002b7c:	18fb      	adds	r3, r7, r3
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b82:	e009      	b.n	8002b98 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b88:	2210      	movs	r2, #16
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b90:	231f      	movs	r3, #31
 8002b92:	18fb      	adds	r3, r7, r3
 8002b94:	2201      	movs	r2, #1
 8002b96:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002b98:	231f      	movs	r3, #31
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	781b      	ldrb	r3, [r3, #0]
}
 8002b9e:	0018      	movs	r0, r3
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	b008      	add	sp, #32
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	46c0      	nop			; (mov r8, r8)
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	00030d40 	.word	0x00030d40
 8002bb0:	fffffefd 	.word	0xfffffefd
 8002bb4:	fffe0201 	.word	0xfffe0201
 8002bb8:	1ffffc02 	.word	0x1ffffc02
 8002bbc:	40012708 	.word	0x40012708
 8002bc0:	ffc3ffff 	.word	0xffc3ffff
 8002bc4:	07ffff04 	.word	0x07ffff04

08002bc8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd2:	2317      	movs	r3, #23
 8002bd4:	18fb      	adds	r3, r7, r3
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002bda:	2300      	movs	r3, #0
 8002bdc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2254      	movs	r2, #84	; 0x54
 8002be2:	5c9b      	ldrb	r3, [r3, r2]
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	d101      	bne.n	8002bec <HAL_ADC_ConfigChannel+0x24>
 8002be8:	2302      	movs	r3, #2
 8002bea:	e1c0      	b.n	8002f6e <HAL_ADC_ConfigChannel+0x3a6>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2254      	movs	r2, #84	; 0x54
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f7ff fe2c 	bl	8002856 <LL_ADC_REG_IsConversionOngoing>
 8002bfe:	1e03      	subs	r3, r0, #0
 8002c00:	d000      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0x3c>
 8002c02:	e1a3      	b.n	8002f4c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	2b02      	cmp	r3, #2
 8002c0a:	d100      	bne.n	8002c0e <HAL_ADC_ConfigChannel+0x46>
 8002c0c:	e143      	b.n	8002e96 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	691a      	ldr	r2, [r3, #16]
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d004      	beq.n	8002c24 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002c1e:	4ac1      	ldr	r2, [pc, #772]	; (8002f24 <HAL_ADC_ConfigChannel+0x35c>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d108      	bne.n	8002c36 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	0010      	movs	r0, r2
 8002c30:	f7ff fd99 	bl	8002766 <LL_ADC_REG_SetSequencerChAdd>
 8002c34:	e0c9      	b.n	8002dca <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	211f      	movs	r1, #31
 8002c40:	400b      	ands	r3, r1
 8002c42:	210f      	movs	r1, #15
 8002c44:	4099      	lsls	r1, r3
 8002c46:	000b      	movs	r3, r1
 8002c48:	43db      	mvns	r3, r3
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	035b      	lsls	r3, r3, #13
 8002c54:	0b5b      	lsrs	r3, r3, #13
 8002c56:	d105      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x9c>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	0e9b      	lsrs	r3, r3, #26
 8002c5e:	221f      	movs	r2, #31
 8002c60:	4013      	ands	r3, r2
 8002c62:	e098      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	d000      	beq.n	8002c70 <HAL_ADC_ConfigChannel+0xa8>
 8002c6e:	e091      	b.n	8002d94 <HAL_ADC_ConfigChannel+0x1cc>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	2202      	movs	r2, #2
 8002c76:	4013      	ands	r3, r2
 8002c78:	d000      	beq.n	8002c7c <HAL_ADC_ConfigChannel+0xb4>
 8002c7a:	e089      	b.n	8002d90 <HAL_ADC_ConfigChannel+0x1c8>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	2204      	movs	r2, #4
 8002c82:	4013      	ands	r3, r2
 8002c84:	d000      	beq.n	8002c88 <HAL_ADC_ConfigChannel+0xc0>
 8002c86:	e081      	b.n	8002d8c <HAL_ADC_ConfigChannel+0x1c4>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	4013      	ands	r3, r2
 8002c90:	d000      	beq.n	8002c94 <HAL_ADC_ConfigChannel+0xcc>
 8002c92:	e079      	b.n	8002d88 <HAL_ADC_ConfigChannel+0x1c0>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2210      	movs	r2, #16
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	d000      	beq.n	8002ca0 <HAL_ADC_ConfigChannel+0xd8>
 8002c9e:	e071      	b.n	8002d84 <HAL_ADC_ConfigChannel+0x1bc>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2220      	movs	r2, #32
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	d000      	beq.n	8002cac <HAL_ADC_ConfigChannel+0xe4>
 8002caa:	e069      	b.n	8002d80 <HAL_ADC_ConfigChannel+0x1b8>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	2240      	movs	r2, #64	; 0x40
 8002cb2:	4013      	ands	r3, r2
 8002cb4:	d000      	beq.n	8002cb8 <HAL_ADC_ConfigChannel+0xf0>
 8002cb6:	e061      	b.n	8002d7c <HAL_ADC_ConfigChannel+0x1b4>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2280      	movs	r2, #128	; 0x80
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	d000      	beq.n	8002cc4 <HAL_ADC_ConfigChannel+0xfc>
 8002cc2:	e059      	b.n	8002d78 <HAL_ADC_ConfigChannel+0x1b0>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	005b      	lsls	r3, r3, #1
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d151      	bne.n	8002d74 <HAL_ADC_ConfigChannel+0x1ac>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d149      	bne.n	8002d70 <HAL_ADC_ConfigChannel+0x1a8>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	2380      	movs	r3, #128	; 0x80
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	d141      	bne.n	8002d6c <HAL_ADC_ConfigChannel+0x1a4>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681a      	ldr	r2, [r3, #0]
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	011b      	lsls	r3, r3, #4
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	d139      	bne.n	8002d68 <HAL_ADC_ConfigChannel+0x1a0>
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	2380      	movs	r3, #128	; 0x80
 8002cfa:	015b      	lsls	r3, r3, #5
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	d131      	bne.n	8002d64 <HAL_ADC_ConfigChannel+0x19c>
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	681a      	ldr	r2, [r3, #0]
 8002d04:	2380      	movs	r3, #128	; 0x80
 8002d06:	019b      	lsls	r3, r3, #6
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d129      	bne.n	8002d60 <HAL_ADC_ConfigChannel+0x198>
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	681a      	ldr	r2, [r3, #0]
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	01db      	lsls	r3, r3, #7
 8002d14:	4013      	ands	r3, r2
 8002d16:	d121      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x194>
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	021b      	lsls	r3, r3, #8
 8002d20:	4013      	ands	r3, r2
 8002d22:	d119      	bne.n	8002d58 <HAL_ADC_ConfigChannel+0x190>
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	2380      	movs	r3, #128	; 0x80
 8002d2a:	025b      	lsls	r3, r3, #9
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	d111      	bne.n	8002d54 <HAL_ADC_ConfigChannel+0x18c>
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	029b      	lsls	r3, r3, #10
 8002d38:	4013      	ands	r3, r2
 8002d3a:	d109      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x188>
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	681a      	ldr	r2, [r3, #0]
 8002d40:	2380      	movs	r3, #128	; 0x80
 8002d42:	02db      	lsls	r3, r3, #11
 8002d44:	4013      	ands	r3, r2
 8002d46:	d001      	beq.n	8002d4c <HAL_ADC_ConfigChannel+0x184>
 8002d48:	2312      	movs	r3, #18
 8002d4a:	e024      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e022      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d50:	2311      	movs	r3, #17
 8002d52:	e020      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d54:	2310      	movs	r3, #16
 8002d56:	e01e      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d58:	230f      	movs	r3, #15
 8002d5a:	e01c      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d5c:	230e      	movs	r3, #14
 8002d5e:	e01a      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d60:	230d      	movs	r3, #13
 8002d62:	e018      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d64:	230c      	movs	r3, #12
 8002d66:	e016      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d68:	230b      	movs	r3, #11
 8002d6a:	e014      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d6c:	230a      	movs	r3, #10
 8002d6e:	e012      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d70:	2309      	movs	r3, #9
 8002d72:	e010      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d74:	2308      	movs	r3, #8
 8002d76:	e00e      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d78:	2307      	movs	r3, #7
 8002d7a:	e00c      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d7c:	2306      	movs	r3, #6
 8002d7e:	e00a      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d80:	2305      	movs	r3, #5
 8002d82:	e008      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d84:	2304      	movs	r3, #4
 8002d86:	e006      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d88:	2303      	movs	r3, #3
 8002d8a:	e004      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e002      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d90:	2301      	movs	r3, #1
 8002d92:	e000      	b.n	8002d96 <HAL_ADC_ConfigChannel+0x1ce>
 8002d94:	2300      	movs	r3, #0
 8002d96:	683a      	ldr	r2, [r7, #0]
 8002d98:	6852      	ldr	r2, [r2, #4]
 8002d9a:	201f      	movs	r0, #31
 8002d9c:	4002      	ands	r2, r0
 8002d9e:	4093      	lsls	r3, r2
 8002da0:	000a      	movs	r2, r1
 8002da2:	431a      	orrs	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	089b      	lsrs	r3, r3, #2
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	69db      	ldr	r3, [r3, #28]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d808      	bhi.n	8002dca <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	6859      	ldr	r1, [r3, #4]
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	001a      	movs	r2, r3
 8002dc6:	f7ff fcae 	bl	8002726 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	6819      	ldr	r1, [r3, #0]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	001a      	movs	r2, r3
 8002dd8:	f7ff fce8 	bl	80027ac <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	db00      	blt.n	8002de6 <HAL_ADC_ConfigChannel+0x21e>
 8002de4:	e0bc      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002de6:	4b50      	ldr	r3, [pc, #320]	; (8002f28 <HAL_ADC_ConfigChannel+0x360>)
 8002de8:	0018      	movs	r0, r3
 8002dea:	f7ff fc5b 	bl	80026a4 <LL_ADC_GetCommonPathInternalCh>
 8002dee:	0003      	movs	r3, r0
 8002df0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4d      	ldr	r2, [pc, #308]	; (8002f2c <HAL_ADC_ConfigChannel+0x364>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d122      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002dfc:	693a      	ldr	r2, [r7, #16]
 8002dfe:	2380      	movs	r3, #128	; 0x80
 8002e00:	041b      	lsls	r3, r3, #16
 8002e02:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e04:	d11d      	bne.n	8002e42 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	2280      	movs	r2, #128	; 0x80
 8002e0a:	0412      	lsls	r2, r2, #16
 8002e0c:	4313      	orrs	r3, r2
 8002e0e:	4a46      	ldr	r2, [pc, #280]	; (8002f28 <HAL_ADC_ConfigChannel+0x360>)
 8002e10:	0019      	movs	r1, r3
 8002e12:	0010      	movs	r0, r2
 8002e14:	f7ff fc32 	bl	800267c <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e18:	4b45      	ldr	r3, [pc, #276]	; (8002f30 <HAL_ADC_ConfigChannel+0x368>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4945      	ldr	r1, [pc, #276]	; (8002f34 <HAL_ADC_ConfigChannel+0x36c>)
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fd f97c 	bl	800011c <__udivsi3>
 8002e24:	0003      	movs	r3, r0
 8002e26:	1c5a      	adds	r2, r3, #1
 8002e28:	0013      	movs	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	189b      	adds	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e32:	e002      	b.n	8002e3a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	3b01      	subs	r3, #1
 8002e38:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d1f9      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002e40:	e08e      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a3c      	ldr	r2, [pc, #240]	; (8002f38 <HAL_ADC_ConfigChannel+0x370>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d10e      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	045b      	lsls	r3, r3, #17
 8002e52:	4013      	ands	r3, r2
 8002e54:	d109      	bne.n	8002e6a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	2280      	movs	r2, #128	; 0x80
 8002e5a:	0452      	lsls	r2, r2, #17
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	4a32      	ldr	r2, [pc, #200]	; (8002f28 <HAL_ADC_ConfigChannel+0x360>)
 8002e60:	0019      	movs	r1, r3
 8002e62:	0010      	movs	r0, r2
 8002e64:	f7ff fc0a 	bl	800267c <LL_ADC_SetCommonPathInternalCh>
 8002e68:	e07a      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a33      	ldr	r2, [pc, #204]	; (8002f3c <HAL_ADC_ConfigChannel+0x374>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d000      	beq.n	8002e76 <HAL_ADC_ConfigChannel+0x2ae>
 8002e74:	e074      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e76:	693a      	ldr	r2, [r7, #16]
 8002e78:	2380      	movs	r3, #128	; 0x80
 8002e7a:	03db      	lsls	r3, r3, #15
 8002e7c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e7e:	d000      	beq.n	8002e82 <HAL_ADC_ConfigChannel+0x2ba>
 8002e80:	e06e      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	2280      	movs	r2, #128	; 0x80
 8002e86:	03d2      	lsls	r2, r2, #15
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	4a27      	ldr	r2, [pc, #156]	; (8002f28 <HAL_ADC_ConfigChannel+0x360>)
 8002e8c:	0019      	movs	r1, r3
 8002e8e:	0010      	movs	r0, r2
 8002e90:	f7ff fbf4 	bl	800267c <LL_ADC_SetCommonPathInternalCh>
 8002e94:	e064      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691a      	ldr	r2, [r3, #16]
 8002e9a:	2380      	movs	r3, #128	; 0x80
 8002e9c:	061b      	lsls	r3, r3, #24
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d004      	beq.n	8002eac <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ea6:	4a1f      	ldr	r2, [pc, #124]	; (8002f24 <HAL_ADC_ConfigChannel+0x35c>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d107      	bne.n	8002ebc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	0019      	movs	r1, r3
 8002eb6:	0010      	movs	r0, r2
 8002eb8:	f7ff fc66 	bl	8002788 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	da4d      	bge.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ec4:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_ADC_ConfigChannel+0x360>)
 8002ec6:	0018      	movs	r0, r3
 8002ec8:	f7ff fbec 	bl	80026a4 <LL_ADC_GetCommonPathInternalCh>
 8002ecc:	0003      	movs	r3, r0
 8002ece:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a15      	ldr	r2, [pc, #84]	; (8002f2c <HAL_ADC_ConfigChannel+0x364>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d108      	bne.n	8002eec <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <HAL_ADC_ConfigChannel+0x378>)
 8002ede:	4013      	ands	r3, r2
 8002ee0:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <HAL_ADC_ConfigChannel+0x360>)
 8002ee2:	0019      	movs	r1, r3
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	f7ff fbc9 	bl	800267c <LL_ADC_SetCommonPathInternalCh>
 8002eea:	e039      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a11      	ldr	r2, [pc, #68]	; (8002f38 <HAL_ADC_ConfigChannel+0x370>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d108      	bne.n	8002f08 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	4a12      	ldr	r2, [pc, #72]	; (8002f44 <HAL_ADC_ConfigChannel+0x37c>)
 8002efa:	4013      	ands	r3, r2
 8002efc:	4a0a      	ldr	r2, [pc, #40]	; (8002f28 <HAL_ADC_ConfigChannel+0x360>)
 8002efe:	0019      	movs	r1, r3
 8002f00:	0010      	movs	r0, r2
 8002f02:	f7ff fbbb 	bl	800267c <LL_ADC_SetCommonPathInternalCh>
 8002f06:	e02b      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0b      	ldr	r2, [pc, #44]	; (8002f3c <HAL_ADC_ConfigChannel+0x374>)
 8002f0e:	4293      	cmp	r3, r2
 8002f10:	d126      	bne.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	4a0c      	ldr	r2, [pc, #48]	; (8002f48 <HAL_ADC_ConfigChannel+0x380>)
 8002f16:	4013      	ands	r3, r2
 8002f18:	4a03      	ldr	r2, [pc, #12]	; (8002f28 <HAL_ADC_ConfigChannel+0x360>)
 8002f1a:	0019      	movs	r1, r3
 8002f1c:	0010      	movs	r0, r2
 8002f1e:	f7ff fbad 	bl	800267c <LL_ADC_SetCommonPathInternalCh>
 8002f22:	e01d      	b.n	8002f60 <HAL_ADC_ConfigChannel+0x398>
 8002f24:	80000004 	.word	0x80000004
 8002f28:	40012708 	.word	0x40012708
 8002f2c:	b0001000 	.word	0xb0001000
 8002f30:	20000000 	.word	0x20000000
 8002f34:	00030d40 	.word	0x00030d40
 8002f38:	b8004000 	.word	0xb8004000
 8002f3c:	b4002000 	.word	0xb4002000
 8002f40:	ff7fffff 	.word	0xff7fffff
 8002f44:	feffffff 	.word	0xfeffffff
 8002f48:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f50:	2220      	movs	r2, #32
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002f58:	2317      	movs	r3, #23
 8002f5a:	18fb      	adds	r3, r7, r3
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2254      	movs	r2, #84	; 0x54
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002f68:	2317      	movs	r3, #23
 8002f6a:	18fb      	adds	r3, r7, r3
 8002f6c:	781b      	ldrb	r3, [r3, #0]
}
 8002f6e:	0018      	movs	r0, r3
 8002f70:	46bd      	mov	sp, r7
 8002f72:	b006      	add	sp, #24
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	46c0      	nop			; (mov r8, r8)

08002f78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b082      	sub	sp, #8
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	0002      	movs	r2, r0
 8002f80:	1dfb      	adds	r3, r7, #7
 8002f82:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f84:	1dfb      	adds	r3, r7, #7
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b7f      	cmp	r3, #127	; 0x7f
 8002f8a:	d809      	bhi.n	8002fa0 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f8c:	1dfb      	adds	r3, r7, #7
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	001a      	movs	r2, r3
 8002f92:	231f      	movs	r3, #31
 8002f94:	401a      	ands	r2, r3
 8002f96:	4b04      	ldr	r3, [pc, #16]	; (8002fa8 <__NVIC_EnableIRQ+0x30>)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4091      	lsls	r1, r2
 8002f9c:	000a      	movs	r2, r1
 8002f9e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002fa0:	46c0      	nop			; (mov r8, r8)
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	b002      	add	sp, #8
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	e000e100 	.word	0xe000e100

08002fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fac:	b590      	push	{r4, r7, lr}
 8002fae:	b083      	sub	sp, #12
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	0002      	movs	r2, r0
 8002fb4:	6039      	str	r1, [r7, #0]
 8002fb6:	1dfb      	adds	r3, r7, #7
 8002fb8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002fba:	1dfb      	adds	r3, r7, #7
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b7f      	cmp	r3, #127	; 0x7f
 8002fc0:	d828      	bhi.n	8003014 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fc2:	4a2f      	ldr	r2, [pc, #188]	; (8003080 <__NVIC_SetPriority+0xd4>)
 8002fc4:	1dfb      	adds	r3, r7, #7
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	b25b      	sxtb	r3, r3
 8002fca:	089b      	lsrs	r3, r3, #2
 8002fcc:	33c0      	adds	r3, #192	; 0xc0
 8002fce:	009b      	lsls	r3, r3, #2
 8002fd0:	589b      	ldr	r3, [r3, r2]
 8002fd2:	1dfa      	adds	r2, r7, #7
 8002fd4:	7812      	ldrb	r2, [r2, #0]
 8002fd6:	0011      	movs	r1, r2
 8002fd8:	2203      	movs	r2, #3
 8002fda:	400a      	ands	r2, r1
 8002fdc:	00d2      	lsls	r2, r2, #3
 8002fde:	21ff      	movs	r1, #255	; 0xff
 8002fe0:	4091      	lsls	r1, r2
 8002fe2:	000a      	movs	r2, r1
 8002fe4:	43d2      	mvns	r2, r2
 8002fe6:	401a      	ands	r2, r3
 8002fe8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	019b      	lsls	r3, r3, #6
 8002fee:	22ff      	movs	r2, #255	; 0xff
 8002ff0:	401a      	ands	r2, r3
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	0018      	movs	r0, r3
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	4003      	ands	r3, r0
 8002ffc:	00db      	lsls	r3, r3, #3
 8002ffe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003000:	481f      	ldr	r0, [pc, #124]	; (8003080 <__NVIC_SetPriority+0xd4>)
 8003002:	1dfb      	adds	r3, r7, #7
 8003004:	781b      	ldrb	r3, [r3, #0]
 8003006:	b25b      	sxtb	r3, r3
 8003008:	089b      	lsrs	r3, r3, #2
 800300a:	430a      	orrs	r2, r1
 800300c:	33c0      	adds	r3, #192	; 0xc0
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8003012:	e031      	b.n	8003078 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003014:	4a1b      	ldr	r2, [pc, #108]	; (8003084 <__NVIC_SetPriority+0xd8>)
 8003016:	1dfb      	adds	r3, r7, #7
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	0019      	movs	r1, r3
 800301c:	230f      	movs	r3, #15
 800301e:	400b      	ands	r3, r1
 8003020:	3b08      	subs	r3, #8
 8003022:	089b      	lsrs	r3, r3, #2
 8003024:	3306      	adds	r3, #6
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	3304      	adds	r3, #4
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	1dfa      	adds	r2, r7, #7
 8003030:	7812      	ldrb	r2, [r2, #0]
 8003032:	0011      	movs	r1, r2
 8003034:	2203      	movs	r2, #3
 8003036:	400a      	ands	r2, r1
 8003038:	00d2      	lsls	r2, r2, #3
 800303a:	21ff      	movs	r1, #255	; 0xff
 800303c:	4091      	lsls	r1, r2
 800303e:	000a      	movs	r2, r1
 8003040:	43d2      	mvns	r2, r2
 8003042:	401a      	ands	r2, r3
 8003044:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	019b      	lsls	r3, r3, #6
 800304a:	22ff      	movs	r2, #255	; 0xff
 800304c:	401a      	ands	r2, r3
 800304e:	1dfb      	adds	r3, r7, #7
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	0018      	movs	r0, r3
 8003054:	2303      	movs	r3, #3
 8003056:	4003      	ands	r3, r0
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800305c:	4809      	ldr	r0, [pc, #36]	; (8003084 <__NVIC_SetPriority+0xd8>)
 800305e:	1dfb      	adds	r3, r7, #7
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	001c      	movs	r4, r3
 8003064:	230f      	movs	r3, #15
 8003066:	4023      	ands	r3, r4
 8003068:	3b08      	subs	r3, #8
 800306a:	089b      	lsrs	r3, r3, #2
 800306c:	430a      	orrs	r2, r1
 800306e:	3306      	adds	r3, #6
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	18c3      	adds	r3, r0, r3
 8003074:	3304      	adds	r3, #4
 8003076:	601a      	str	r2, [r3, #0]
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b003      	add	sp, #12
 800307e:	bd90      	pop	{r4, r7, pc}
 8003080:	e000e100 	.word	0xe000e100
 8003084:	e000ed00 	.word	0xe000ed00

08003088 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	60b9      	str	r1, [r7, #8]
 8003090:	607a      	str	r2, [r7, #4]
 8003092:	210f      	movs	r1, #15
 8003094:	187b      	adds	r3, r7, r1
 8003096:	1c02      	adds	r2, r0, #0
 8003098:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	187b      	adds	r3, r7, r1
 800309e:	781b      	ldrb	r3, [r3, #0]
 80030a0:	b25b      	sxtb	r3, r3
 80030a2:	0011      	movs	r1, r2
 80030a4:	0018      	movs	r0, r3
 80030a6:	f7ff ff81 	bl	8002fac <__NVIC_SetPriority>
}
 80030aa:	46c0      	nop			; (mov r8, r8)
 80030ac:	46bd      	mov	sp, r7
 80030ae:	b004      	add	sp, #16
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b082      	sub	sp, #8
 80030b6:	af00      	add	r7, sp, #0
 80030b8:	0002      	movs	r2, r0
 80030ba:	1dfb      	adds	r3, r7, #7
 80030bc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030be:	1dfb      	adds	r3, r7, #7
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	b25b      	sxtb	r3, r3
 80030c4:	0018      	movs	r0, r3
 80030c6:	f7ff ff57 	bl	8002f78 <__NVIC_EnableIRQ>
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}
	...

080030d4 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d101      	bne.n	80030e6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	e077      	b.n	80031d6 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a3d      	ldr	r2, [pc, #244]	; (80031e0 <HAL_DMA_Init+0x10c>)
 80030ec:	4694      	mov	ip, r2
 80030ee:	4463      	add	r3, ip
 80030f0:	2114      	movs	r1, #20
 80030f2:	0018      	movs	r0, r3
 80030f4:	f7fd f812 	bl	800011c <__udivsi3>
 80030f8:	0003      	movs	r3, r0
 80030fa:	009a      	lsls	r2, r3, #2
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2225      	movs	r2, #37	; 0x25
 8003104:	2102      	movs	r1, #2
 8003106:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4934      	ldr	r1, [pc, #208]	; (80031e4 <HAL_DMA_Init+0x110>)
 8003114:	400a      	ands	r2, r1
 8003116:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6819      	ldr	r1, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	689a      	ldr	r2, [r3, #8]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68db      	ldr	r3, [r3, #12]
 8003126:	431a      	orrs	r2, r3
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	695b      	ldr	r3, [r3, #20]
 8003132:	431a      	orrs	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	699b      	ldr	r3, [r3, #24]
 8003138:	431a      	orrs	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	431a      	orrs	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a1b      	ldr	r3, [r3, #32]
 8003144:	431a      	orrs	r2, r3
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	430a      	orrs	r2, r1
 800314c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	0018      	movs	r0, r3
 8003152:	f000 f9c1 	bl	80034d8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	2380      	movs	r3, #128	; 0x80
 800315c:	01db      	lsls	r3, r3, #7
 800315e:	429a      	cmp	r2, r3
 8003160:	d102      	bne.n	8003168 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003170:	213f      	movs	r1, #63	; 0x3f
 8003172:	400a      	ands	r2, r1
 8003174:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800317e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d011      	beq.n	80031ac <HAL_DMA_Init+0xd8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	2b04      	cmp	r3, #4
 800318e:	d80d      	bhi.n	80031ac <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	0018      	movs	r0, r3
 8003194:	f000 f9cc 	bl	8003530 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800319c:	2200      	movs	r2, #0
 800319e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031a4:	687a      	ldr	r2, [r7, #4]
 80031a6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80031a8:	605a      	str	r2, [r3, #4]
 80031aa:	e008      	b.n	80031be <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2200      	movs	r2, #0
 80031b6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2200      	movs	r2, #0
 80031bc:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2225      	movs	r2, #37	; 0x25
 80031c8:	2101      	movs	r1, #1
 80031ca:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	2224      	movs	r2, #36	; 0x24
 80031d0:	2100      	movs	r1, #0
 80031d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80031d4:	2300      	movs	r3, #0
}
 80031d6:	0018      	movs	r0, r3
 80031d8:	46bd      	mov	sp, r7
 80031da:	b002      	add	sp, #8
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	bffdfff8 	.word	0xbffdfff8
 80031e4:	ffff800f 	.word	0xffff800f

080031e8 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b086      	sub	sp, #24
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	60b9      	str	r1, [r7, #8]
 80031f2:	607a      	str	r2, [r7, #4]
 80031f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031f6:	2317      	movs	r3, #23
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	2200      	movs	r2, #0
 80031fc:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2224      	movs	r2, #36	; 0x24
 8003202:	5c9b      	ldrb	r3, [r3, r2]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_DMA_Start_IT+0x24>
 8003208:	2302      	movs	r3, #2
 800320a:	e06f      	b.n	80032ec <HAL_DMA_Start_IT+0x104>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2224      	movs	r2, #36	; 0x24
 8003210:	2101      	movs	r1, #1
 8003212:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2225      	movs	r2, #37	; 0x25
 8003218:	5c9b      	ldrb	r3, [r3, r2]
 800321a:	b2db      	uxtb	r3, r3
 800321c:	2b01      	cmp	r3, #1
 800321e:	d157      	bne.n	80032d0 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2225      	movs	r2, #37	; 0x25
 8003224:	2102      	movs	r1, #2
 8003226:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2200      	movs	r2, #0
 800322c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2101      	movs	r1, #1
 800323a:	438a      	bics	r2, r1
 800323c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	687a      	ldr	r2, [r7, #4]
 8003242:	68b9      	ldr	r1, [r7, #8]
 8003244:	68f8      	ldr	r0, [r7, #12]
 8003246:	f000 f907 	bl	8003458 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	2b00      	cmp	r3, #0
 8003250:	d008      	beq.n	8003264 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	210e      	movs	r1, #14
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e00f      	b.n	8003284 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	2104      	movs	r1, #4
 8003270:	438a      	bics	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	210a      	movs	r1, #10
 8003280:	430a      	orrs	r2, r1
 8003282:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	2380      	movs	r3, #128	; 0x80
 800328c:	025b      	lsls	r3, r3, #9
 800328e:	4013      	ands	r3, r2
 8003290:	d008      	beq.n	80032a4 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800329c:	2180      	movs	r1, #128	; 0x80
 800329e:	0049      	lsls	r1, r1, #1
 80032a0:	430a      	orrs	r2, r1
 80032a2:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d008      	beq.n	80032be <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80032b6:	2180      	movs	r1, #128	; 0x80
 80032b8:	0049      	lsls	r1, r1, #1
 80032ba:	430a      	orrs	r2, r1
 80032bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	681a      	ldr	r2, [r3, #0]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	2101      	movs	r1, #1
 80032ca:	430a      	orrs	r2, r1
 80032cc:	601a      	str	r2, [r3, #0]
 80032ce:	e00a      	b.n	80032e6 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2280      	movs	r2, #128	; 0x80
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	2224      	movs	r2, #36	; 0x24
 80032da:	2100      	movs	r1, #0
 80032dc:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 80032de:	2317      	movs	r3, #23
 80032e0:	18fb      	adds	r3, r7, r3
 80032e2:	2201      	movs	r2, #1
 80032e4:	701a      	strb	r2, [r3, #0]
  }

  return status;
 80032e6:	2317      	movs	r3, #23
 80032e8:	18fb      	adds	r3, r7, r3
 80032ea:	781b      	ldrb	r3, [r3, #0]
}
 80032ec:	0018      	movs	r0, r3
 80032ee:	46bd      	mov	sp, r7
 80032f0:	b006      	add	sp, #24
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b084      	sub	sp, #16
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 80032fc:	4b55      	ldr	r3, [pc, #340]	; (8003454 <HAL_DMA_IRQHandler+0x160>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330e:	221c      	movs	r2, #28
 8003310:	4013      	ands	r3, r2
 8003312:	2204      	movs	r2, #4
 8003314:	409a      	lsls	r2, r3
 8003316:	0013      	movs	r3, r2
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4013      	ands	r3, r2
 800331c:	d027      	beq.n	800336e <HAL_DMA_IRQHandler+0x7a>
 800331e:	68bb      	ldr	r3, [r7, #8]
 8003320:	2204      	movs	r2, #4
 8003322:	4013      	ands	r3, r2
 8003324:	d023      	beq.n	800336e <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2220      	movs	r2, #32
 800332e:	4013      	ands	r3, r2
 8003330:	d107      	bne.n	8003342 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	681a      	ldr	r2, [r3, #0]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2104      	movs	r1, #4
 800333e:	438a      	bics	r2, r1
 8003340:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8003342:	4b44      	ldr	r3, [pc, #272]	; (8003454 <HAL_DMA_IRQHandler+0x160>)
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	221c      	movs	r2, #28
 800334c:	4013      	ands	r3, r2
 800334e:	2204      	movs	r2, #4
 8003350:	409a      	lsls	r2, r3
 8003352:	4b40      	ldr	r3, [pc, #256]	; (8003454 <HAL_DMA_IRQHandler+0x160>)
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335c:	2b00      	cmp	r3, #0
 800335e:	d100      	bne.n	8003362 <HAL_DMA_IRQHandler+0x6e>
 8003360:	e073      	b.n	800344a <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	0010      	movs	r0, r2
 800336a:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 800336c:	e06d      	b.n	800344a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003372:	221c      	movs	r2, #28
 8003374:	4013      	ands	r3, r2
 8003376:	2202      	movs	r2, #2
 8003378:	409a      	lsls	r2, r3
 800337a:	0013      	movs	r3, r2
 800337c:	68fa      	ldr	r2, [r7, #12]
 800337e:	4013      	ands	r3, r2
 8003380:	d02e      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xec>
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	2202      	movs	r2, #2
 8003386:	4013      	ands	r3, r2
 8003388:	d02a      	beq.n	80033e0 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2220      	movs	r2, #32
 8003392:	4013      	ands	r3, r2
 8003394:	d10b      	bne.n	80033ae <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	210a      	movs	r1, #10
 80033a2:	438a      	bics	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	2225      	movs	r2, #37	; 0x25
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 80033ae:	4b29      	ldr	r3, [pc, #164]	; (8003454 <HAL_DMA_IRQHandler+0x160>)
 80033b0:	6859      	ldr	r1, [r3, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	221c      	movs	r2, #28
 80033b8:	4013      	ands	r3, r2
 80033ba:	2202      	movs	r2, #2
 80033bc:	409a      	lsls	r2, r3
 80033be:	4b25      	ldr	r3, [pc, #148]	; (8003454 <HAL_DMA_IRQHandler+0x160>)
 80033c0:	430a      	orrs	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d03a      	beq.n	800344a <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	0010      	movs	r0, r2
 80033dc:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 80033de:	e034      	b.n	800344a <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e4:	221c      	movs	r2, #28
 80033e6:	4013      	ands	r3, r2
 80033e8:	2208      	movs	r2, #8
 80033ea:	409a      	lsls	r2, r3
 80033ec:	0013      	movs	r3, r2
 80033ee:	68fa      	ldr	r2, [r7, #12]
 80033f0:	4013      	ands	r3, r2
 80033f2:	d02b      	beq.n	800344c <HAL_DMA_IRQHandler+0x158>
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	2208      	movs	r2, #8
 80033f8:	4013      	ands	r3, r2
 80033fa:	d027      	beq.n	800344c <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	210e      	movs	r1, #14
 8003408:	438a      	bics	r2, r1
 800340a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <HAL_DMA_IRQHandler+0x160>)
 800340e:	6859      	ldr	r1, [r3, #4]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003414:	221c      	movs	r2, #28
 8003416:	4013      	ands	r3, r2
 8003418:	2201      	movs	r2, #1
 800341a:	409a      	lsls	r2, r3
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <HAL_DMA_IRQHandler+0x160>)
 800341e:	430a      	orrs	r2, r1
 8003420:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2201      	movs	r2, #1
 8003426:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2225      	movs	r2, #37	; 0x25
 800342c:	2101      	movs	r1, #1
 800342e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2224      	movs	r2, #36	; 0x24
 8003434:	2100      	movs	r1, #0
 8003436:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	0010      	movs	r0, r2
 8003448:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800344a:	46c0      	nop			; (mov r8, r8)
 800344c:	46c0      	nop			; (mov r8, r8)
}
 800344e:	46bd      	mov	sp, r7
 8003450:	b004      	add	sp, #16
 8003452:	bd80      	pop	{r7, pc}
 8003454:	40020000 	.word	0x40020000

08003458 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
 8003464:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800346a:	68fa      	ldr	r2, [r7, #12]
 800346c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800346e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003474:	2b00      	cmp	r3, #0
 8003476:	d004      	beq.n	8003482 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	68fa      	ldr	r2, [r7, #12]
 800347e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003480:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003482:	4b14      	ldr	r3, [pc, #80]	; (80034d4 <DMA_SetConfig+0x7c>)
 8003484:	6859      	ldr	r1, [r3, #4]
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	221c      	movs	r2, #28
 800348c:	4013      	ands	r3, r2
 800348e:	2201      	movs	r2, #1
 8003490:	409a      	lsls	r2, r3
 8003492:	4b10      	ldr	r3, [pc, #64]	; (80034d4 <DMA_SetConfig+0x7c>)
 8003494:	430a      	orrs	r2, r1
 8003496:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	2b10      	cmp	r3, #16
 80034a6:	d108      	bne.n	80034ba <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68ba      	ldr	r2, [r7, #8]
 80034b6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80034b8:	e007      	b.n	80034ca <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68ba      	ldr	r2, [r7, #8]
 80034c0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	60da      	str	r2, [r3, #12]
}
 80034ca:	46c0      	nop			; (mov r8, r8)
 80034cc:	46bd      	mov	sp, r7
 80034ce:	b004      	add	sp, #16
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	46c0      	nop			; (mov r8, r8)
 80034d4:	40020000 	.word	0x40020000

080034d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b084      	sub	sp, #16
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	4a10      	ldr	r2, [pc, #64]	; (8003528 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80034e8:	4694      	mov	ip, r2
 80034ea:	4463      	add	r3, ip
 80034ec:	009b      	lsls	r3, r3, #2
 80034ee:	001a      	movs	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	001a      	movs	r2, r3
 80034fa:	23ff      	movs	r3, #255	; 0xff
 80034fc:	4013      	ands	r3, r2
 80034fe:	3b08      	subs	r3, #8
 8003500:	2114      	movs	r1, #20
 8003502:	0018      	movs	r0, r3
 8003504:	f7fc fe0a 	bl	800011c <__udivsi3>
 8003508:	0003      	movs	r3, r0
 800350a:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	4a07      	ldr	r2, [pc, #28]	; (800352c <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8003510:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	221f      	movs	r2, #31
 8003516:	4013      	ands	r3, r2
 8003518:	2201      	movs	r2, #1
 800351a:	409a      	lsls	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b004      	add	sp, #16
 8003526:	bd80      	pop	{r7, pc}
 8003528:	10008200 	.word	0x10008200
 800352c:	40020880 	.word	0x40020880

08003530 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	223f      	movs	r2, #63	; 0x3f
 800353e:	4013      	ands	r3, r2
 8003540:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	4a0a      	ldr	r2, [pc, #40]	; (8003570 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003546:	4694      	mov	ip, r2
 8003548:	4463      	add	r3, ip
 800354a:	009b      	lsls	r3, r3, #2
 800354c:	001a      	movs	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a07      	ldr	r2, [pc, #28]	; (8003574 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003556:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	3b01      	subs	r3, #1
 800355c:	2203      	movs	r2, #3
 800355e:	4013      	ands	r3, r2
 8003560:	2201      	movs	r2, #1
 8003562:	409a      	lsls	r2, r3
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	46bd      	mov	sp, r7
 800356c:	b004      	add	sp, #16
 800356e:	bd80      	pop	{r7, pc}
 8003570:	1000823f 	.word	0x1000823f
 8003574:	40020940 	.word	0x40020940

08003578 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
 8003580:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003586:	e147      	b.n	8003818 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2101      	movs	r1, #1
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4091      	lsls	r1, r2
 8003592:	000a      	movs	r2, r1
 8003594:	4013      	ands	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d100      	bne.n	80035a0 <HAL_GPIO_Init+0x28>
 800359e:	e138      	b.n	8003812 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2203      	movs	r2, #3
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d005      	beq.n	80035b8 <HAL_GPIO_Init+0x40>
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2203      	movs	r2, #3
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d130      	bne.n	800361a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	2203      	movs	r2, #3
 80035c4:	409a      	lsls	r2, r3
 80035c6:	0013      	movs	r3, r2
 80035c8:	43da      	mvns	r2, r3
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	4013      	ands	r3, r2
 80035ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	68da      	ldr	r2, [r3, #12]
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	409a      	lsls	r2, r3
 80035da:	0013      	movs	r3, r2
 80035dc:	693a      	ldr	r2, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	693a      	ldr	r2, [r7, #16]
 80035e6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80035ee:	2201      	movs	r2, #1
 80035f0:	697b      	ldr	r3, [r7, #20]
 80035f2:	409a      	lsls	r2, r3
 80035f4:	0013      	movs	r3, r2
 80035f6:	43da      	mvns	r2, r3
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	4013      	ands	r3, r2
 80035fc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	091b      	lsrs	r3, r3, #4
 8003604:	2201      	movs	r2, #1
 8003606:	401a      	ands	r2, r3
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	409a      	lsls	r2, r3
 800360c:	0013      	movs	r3, r2
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	4313      	orrs	r3, r2
 8003612:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	2203      	movs	r2, #3
 8003620:	4013      	ands	r3, r2
 8003622:	2b03      	cmp	r3, #3
 8003624:	d017      	beq.n	8003656 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	2203      	movs	r2, #3
 8003632:	409a      	lsls	r2, r3
 8003634:	0013      	movs	r3, r2
 8003636:	43da      	mvns	r2, r3
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	4013      	ands	r3, r2
 800363c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	689a      	ldr	r2, [r3, #8]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	005b      	lsls	r3, r3, #1
 8003646:	409a      	lsls	r2, r3
 8003648:	0013      	movs	r3, r2
 800364a:	693a      	ldr	r2, [r7, #16]
 800364c:	4313      	orrs	r3, r2
 800364e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	693a      	ldr	r2, [r7, #16]
 8003654:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2203      	movs	r2, #3
 800365c:	4013      	ands	r3, r2
 800365e:	2b02      	cmp	r3, #2
 8003660:	d123      	bne.n	80036aa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	08da      	lsrs	r2, r3, #3
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	3208      	adds	r2, #8
 800366a:	0092      	lsls	r2, r2, #2
 800366c:	58d3      	ldr	r3, [r2, r3]
 800366e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	2207      	movs	r2, #7
 8003674:	4013      	ands	r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	220f      	movs	r2, #15
 800367a:	409a      	lsls	r2, r3
 800367c:	0013      	movs	r3, r2
 800367e:	43da      	mvns	r2, r3
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	4013      	ands	r3, r2
 8003684:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	691a      	ldr	r2, [r3, #16]
 800368a:	697b      	ldr	r3, [r7, #20]
 800368c:	2107      	movs	r1, #7
 800368e:	400b      	ands	r3, r1
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	409a      	lsls	r2, r3
 8003694:	0013      	movs	r3, r2
 8003696:	693a      	ldr	r2, [r7, #16]
 8003698:	4313      	orrs	r3, r2
 800369a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	08da      	lsrs	r2, r3, #3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	3208      	adds	r2, #8
 80036a4:	0092      	lsls	r2, r2, #2
 80036a6:	6939      	ldr	r1, [r7, #16]
 80036a8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80036b0:	697b      	ldr	r3, [r7, #20]
 80036b2:	005b      	lsls	r3, r3, #1
 80036b4:	2203      	movs	r2, #3
 80036b6:	409a      	lsls	r2, r3
 80036b8:	0013      	movs	r3, r2
 80036ba:	43da      	mvns	r2, r3
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4013      	ands	r3, r2
 80036c0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	2203      	movs	r2, #3
 80036c8:	401a      	ands	r2, r3
 80036ca:	697b      	ldr	r3, [r7, #20]
 80036cc:	005b      	lsls	r3, r3, #1
 80036ce:	409a      	lsls	r2, r3
 80036d0:	0013      	movs	r3, r2
 80036d2:	693a      	ldr	r2, [r7, #16]
 80036d4:	4313      	orrs	r3, r2
 80036d6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	693a      	ldr	r2, [r7, #16]
 80036dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	23c0      	movs	r3, #192	; 0xc0
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	4013      	ands	r3, r2
 80036e8:	d100      	bne.n	80036ec <HAL_GPIO_Init+0x174>
 80036ea:	e092      	b.n	8003812 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80036ec:	4a50      	ldr	r2, [pc, #320]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 80036ee:	697b      	ldr	r3, [r7, #20]
 80036f0:	089b      	lsrs	r3, r3, #2
 80036f2:	3318      	adds	r3, #24
 80036f4:	009b      	lsls	r3, r3, #2
 80036f6:	589b      	ldr	r3, [r3, r2]
 80036f8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80036fa:	697b      	ldr	r3, [r7, #20]
 80036fc:	2203      	movs	r2, #3
 80036fe:	4013      	ands	r3, r2
 8003700:	00db      	lsls	r3, r3, #3
 8003702:	220f      	movs	r2, #15
 8003704:	409a      	lsls	r2, r3
 8003706:	0013      	movs	r3, r2
 8003708:	43da      	mvns	r2, r3
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	4013      	ands	r3, r2
 800370e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	23a0      	movs	r3, #160	; 0xa0
 8003714:	05db      	lsls	r3, r3, #23
 8003716:	429a      	cmp	r2, r3
 8003718:	d013      	beq.n	8003742 <HAL_GPIO_Init+0x1ca>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a45      	ldr	r2, [pc, #276]	; (8003834 <HAL_GPIO_Init+0x2bc>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00d      	beq.n	800373e <HAL_GPIO_Init+0x1c6>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a44      	ldr	r2, [pc, #272]	; (8003838 <HAL_GPIO_Init+0x2c0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d007      	beq.n	800373a <HAL_GPIO_Init+0x1c2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a43      	ldr	r2, [pc, #268]	; (800383c <HAL_GPIO_Init+0x2c4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d101      	bne.n	8003736 <HAL_GPIO_Init+0x1be>
 8003732:	2303      	movs	r3, #3
 8003734:	e006      	b.n	8003744 <HAL_GPIO_Init+0x1cc>
 8003736:	2305      	movs	r3, #5
 8003738:	e004      	b.n	8003744 <HAL_GPIO_Init+0x1cc>
 800373a:	2302      	movs	r3, #2
 800373c:	e002      	b.n	8003744 <HAL_GPIO_Init+0x1cc>
 800373e:	2301      	movs	r3, #1
 8003740:	e000      	b.n	8003744 <HAL_GPIO_Init+0x1cc>
 8003742:	2300      	movs	r3, #0
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	2103      	movs	r1, #3
 8003748:	400a      	ands	r2, r1
 800374a:	00d2      	lsls	r2, r2, #3
 800374c:	4093      	lsls	r3, r2
 800374e:	693a      	ldr	r2, [r7, #16]
 8003750:	4313      	orrs	r3, r2
 8003752:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8003754:	4936      	ldr	r1, [pc, #216]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	089b      	lsrs	r3, r3, #2
 800375a:	3318      	adds	r3, #24
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003762:	4b33      	ldr	r3, [pc, #204]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	43da      	mvns	r2, r3
 800376c:	693b      	ldr	r3, [r7, #16]
 800376e:	4013      	ands	r3, r2
 8003770:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	035b      	lsls	r3, r3, #13
 800377a:	4013      	ands	r3, r2
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800377e:	693a      	ldr	r2, [r7, #16]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4313      	orrs	r3, r2
 8003784:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003786:	4b2a      	ldr	r3, [pc, #168]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 8003788:	693a      	ldr	r2, [r7, #16]
 800378a:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 800378c:	4b28      	ldr	r3, [pc, #160]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	43da      	mvns	r2, r3
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	4013      	ands	r3, r2
 800379a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685a      	ldr	r2, [r3, #4]
 80037a0:	2380      	movs	r3, #128	; 0x80
 80037a2:	039b      	lsls	r3, r3, #14
 80037a4:	4013      	ands	r3, r2
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80037a8:	693a      	ldr	r2, [r7, #16]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80037b0:	4b1f      	ldr	r3, [pc, #124]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 80037b2:	693a      	ldr	r2, [r7, #16]
 80037b4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80037b6:	4a1e      	ldr	r2, [pc, #120]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 80037b8:	2384      	movs	r3, #132	; 0x84
 80037ba:	58d3      	ldr	r3, [r2, r3]
 80037bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	43da      	mvns	r2, r3
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	4013      	ands	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685a      	ldr	r2, [r3, #4]
 80037cc:	2380      	movs	r3, #128	; 0x80
 80037ce:	029b      	lsls	r3, r3, #10
 80037d0:	4013      	ands	r3, r2
 80037d2:	d003      	beq.n	80037dc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80037d4:	693a      	ldr	r2, [r7, #16]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	4313      	orrs	r3, r2
 80037da:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80037dc:	4914      	ldr	r1, [pc, #80]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 80037de:	2284      	movs	r2, #132	; 0x84
 80037e0:	693b      	ldr	r3, [r7, #16]
 80037e2:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80037e4:	4a12      	ldr	r2, [pc, #72]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 80037e6:	2380      	movs	r3, #128	; 0x80
 80037e8:	58d3      	ldr	r3, [r2, r3]
 80037ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	43da      	mvns	r2, r3
 80037f0:	693b      	ldr	r3, [r7, #16]
 80037f2:	4013      	ands	r3, r2
 80037f4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	2380      	movs	r3, #128	; 0x80
 80037fc:	025b      	lsls	r3, r3, #9
 80037fe:	4013      	ands	r3, r2
 8003800:	d003      	beq.n	800380a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003802:	693a      	ldr	r2, [r7, #16]
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800380a:	4909      	ldr	r1, [pc, #36]	; (8003830 <HAL_GPIO_Init+0x2b8>)
 800380c:	2280      	movs	r2, #128	; 0x80
 800380e:	693b      	ldr	r3, [r7, #16]
 8003810:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	3301      	adds	r3, #1
 8003816:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681a      	ldr	r2, [r3, #0]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	40da      	lsrs	r2, r3
 8003820:	1e13      	subs	r3, r2, #0
 8003822:	d000      	beq.n	8003826 <HAL_GPIO_Init+0x2ae>
 8003824:	e6b0      	b.n	8003588 <HAL_GPIO_Init+0x10>
  }
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b006      	add	sp, #24
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021800 	.word	0x40021800
 8003834:	50000400 	.word	0x50000400
 8003838:	50000800 	.word	0x50000800
 800383c:	50000c00 	.word	0x50000c00

08003840 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	0008      	movs	r0, r1
 800384a:	0011      	movs	r1, r2
 800384c:	1cbb      	adds	r3, r7, #2
 800384e:	1c02      	adds	r2, r0, #0
 8003850:	801a      	strh	r2, [r3, #0]
 8003852:	1c7b      	adds	r3, r7, #1
 8003854:	1c0a      	adds	r2, r1, #0
 8003856:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003858:	1c7b      	adds	r3, r7, #1
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d004      	beq.n	800386a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003860:	1cbb      	adds	r3, r7, #2
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003868:	e003      	b.n	8003872 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800386a:	1cbb      	adds	r3, r7, #2
 800386c:	881a      	ldrh	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003872:	46c0      	nop			; (mov r8, r8)
 8003874:	46bd      	mov	sp, r7
 8003876:	b002      	add	sp, #8
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	0002      	movs	r2, r0
 8003884:	1dbb      	adds	r3, r7, #6
 8003886:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003888:	4b10      	ldr	r3, [pc, #64]	; (80038cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800388a:	68db      	ldr	r3, [r3, #12]
 800388c:	1dba      	adds	r2, r7, #6
 800388e:	8812      	ldrh	r2, [r2, #0]
 8003890:	4013      	ands	r3, r2
 8003892:	d008      	beq.n	80038a6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003894:	4b0d      	ldr	r3, [pc, #52]	; (80038cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003896:	1dba      	adds	r2, r7, #6
 8003898:	8812      	ldrh	r2, [r2, #0]
 800389a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 800389c:	1dbb      	adds	r3, r7, #6
 800389e:	881b      	ldrh	r3, [r3, #0]
 80038a0:	0018      	movs	r0, r3
 80038a2:	f000 f815 	bl	80038d0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80038a6:	4b09      	ldr	r3, [pc, #36]	; (80038cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	1dba      	adds	r2, r7, #6
 80038ac:	8812      	ldrh	r2, [r2, #0]
 80038ae:	4013      	ands	r3, r2
 80038b0:	d008      	beq.n	80038c4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80038b2:	4b06      	ldr	r3, [pc, #24]	; (80038cc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80038ba:	1dbb      	adds	r3, r7, #6
 80038bc:	881b      	ldrh	r3, [r3, #0]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 f810 	bl	80038e4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80038c4:	46c0      	nop			; (mov r8, r8)
 80038c6:	46bd      	mov	sp, r7
 80038c8:	b002      	add	sp, #8
 80038ca:	bd80      	pop	{r7, pc}
 80038cc:	40021800 	.word	0x40021800

080038d0 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	0002      	movs	r2, r0
 80038d8:	1dbb      	adds	r3, r7, #6
 80038da:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80038dc:	46c0      	nop			; (mov r8, r8)
 80038de:	46bd      	mov	sp, r7
 80038e0:	b002      	add	sp, #8
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	0002      	movs	r2, r0
 80038ec:	1dbb      	adds	r3, r7, #6
 80038ee:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 80038f0:	46c0      	nop			; (mov r8, r8)
 80038f2:	46bd      	mov	sp, r7
 80038f4:	b002      	add	sp, #8
 80038f6:	bd80      	pop	{r7, pc}

080038f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b084      	sub	sp, #16
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003900:	4b19      	ldr	r3, [pc, #100]	; (8003968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a19      	ldr	r2, [pc, #100]	; (800396c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003906:	4013      	ands	r3, r2
 8003908:	0019      	movs	r1, r3
 800390a:	4b17      	ldr	r3, [pc, #92]	; (8003968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	430a      	orrs	r2, r1
 8003910:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	429a      	cmp	r2, r3
 800391a:	d11f      	bne.n	800395c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800391c:	4b14      	ldr	r3, [pc, #80]	; (8003970 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	0013      	movs	r3, r2
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	189b      	adds	r3, r3, r2
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	4912      	ldr	r1, [pc, #72]	; (8003974 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800392a:	0018      	movs	r0, r3
 800392c:	f7fc fbf6 	bl	800011c <__udivsi3>
 8003930:	0003      	movs	r3, r0
 8003932:	3301      	adds	r3, #1
 8003934:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003936:	e008      	b.n	800394a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d003      	beq.n	8003946 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	3b01      	subs	r3, #1
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e001      	b.n	800394a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e009      	b.n	800395e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800394a:	4b07      	ldr	r3, [pc, #28]	; (8003968 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800394c:	695a      	ldr	r2, [r3, #20]
 800394e:	2380      	movs	r3, #128	; 0x80
 8003950:	00db      	lsls	r3, r3, #3
 8003952:	401a      	ands	r2, r3
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	00db      	lsls	r3, r3, #3
 8003958:	429a      	cmp	r2, r3
 800395a:	d0ed      	beq.n	8003938 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800395c:	2300      	movs	r3, #0
}
 800395e:	0018      	movs	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	b004      	add	sp, #16
 8003964:	bd80      	pop	{r7, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	40007000 	.word	0x40007000
 800396c:	fffff9ff 	.word	0xfffff9ff
 8003970:	20000000 	.word	0x20000000
 8003974:	000f4240 	.word	0x000f4240

08003978 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003978:	b580      	push	{r7, lr}
 800397a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 800397c:	4b03      	ldr	r3, [pc, #12]	; (800398c <LL_RCC_GetAPB1Prescaler+0x14>)
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	23e0      	movs	r3, #224	; 0xe0
 8003982:	01db      	lsls	r3, r3, #7
 8003984:	4013      	ands	r3, r2
}
 8003986:	0018      	movs	r0, r3
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40021000 	.word	0x40021000

08003990 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b088      	sub	sp, #32
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e2f3      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2201      	movs	r2, #1
 80039a8:	4013      	ands	r3, r2
 80039aa:	d100      	bne.n	80039ae <HAL_RCC_OscConfig+0x1e>
 80039ac:	e07c      	b.n	8003aa8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039ae:	4bc3      	ldr	r3, [pc, #780]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	2238      	movs	r2, #56	; 0x38
 80039b4:	4013      	ands	r3, r2
 80039b6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039b8:	4bc0      	ldr	r3, [pc, #768]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	2203      	movs	r2, #3
 80039be:	4013      	ands	r3, r2
 80039c0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d102      	bne.n	80039ce <HAL_RCC_OscConfig+0x3e>
 80039c8:	697b      	ldr	r3, [r7, #20]
 80039ca:	2b03      	cmp	r3, #3
 80039cc:	d002      	beq.n	80039d4 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80039ce:	69bb      	ldr	r3, [r7, #24]
 80039d0:	2b08      	cmp	r3, #8
 80039d2:	d10b      	bne.n	80039ec <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039d4:	4bb9      	ldr	r3, [pc, #740]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 80039d6:	681a      	ldr	r2, [r3, #0]
 80039d8:	2380      	movs	r3, #128	; 0x80
 80039da:	029b      	lsls	r3, r3, #10
 80039dc:	4013      	ands	r3, r2
 80039de:	d062      	beq.n	8003aa6 <HAL_RCC_OscConfig+0x116>
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d15e      	bne.n	8003aa6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e2ce      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	685a      	ldr	r2, [r3, #4]
 80039f0:	2380      	movs	r3, #128	; 0x80
 80039f2:	025b      	lsls	r3, r3, #9
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x78>
 80039f8:	4bb0      	ldr	r3, [pc, #704]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	4baf      	ldr	r3, [pc, #700]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 80039fe:	2180      	movs	r1, #128	; 0x80
 8003a00:	0249      	lsls	r1, r1, #9
 8003a02:	430a      	orrs	r2, r1
 8003a04:	601a      	str	r2, [r3, #0]
 8003a06:	e020      	b.n	8003a4a <HAL_RCC_OscConfig+0xba>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	23a0      	movs	r3, #160	; 0xa0
 8003a0e:	02db      	lsls	r3, r3, #11
 8003a10:	429a      	cmp	r2, r3
 8003a12:	d10e      	bne.n	8003a32 <HAL_RCC_OscConfig+0xa2>
 8003a14:	4ba9      	ldr	r3, [pc, #676]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	4ba8      	ldr	r3, [pc, #672]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a1a:	2180      	movs	r1, #128	; 0x80
 8003a1c:	02c9      	lsls	r1, r1, #11
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	601a      	str	r2, [r3, #0]
 8003a22:	4ba6      	ldr	r3, [pc, #664]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	4ba5      	ldr	r3, [pc, #660]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a28:	2180      	movs	r1, #128	; 0x80
 8003a2a:	0249      	lsls	r1, r1, #9
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	e00b      	b.n	8003a4a <HAL_RCC_OscConfig+0xba>
 8003a32:	4ba2      	ldr	r3, [pc, #648]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	4ba1      	ldr	r3, [pc, #644]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a38:	49a1      	ldr	r1, [pc, #644]	; (8003cc0 <HAL_RCC_OscConfig+0x330>)
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	4b9f      	ldr	r3, [pc, #636]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	4b9e      	ldr	r3, [pc, #632]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a44:	499f      	ldr	r1, [pc, #636]	; (8003cc4 <HAL_RCC_OscConfig+0x334>)
 8003a46:	400a      	ands	r2, r1
 8003a48:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d014      	beq.n	8003a7c <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a52:	f7fe fdcf 	bl	80025f4 <HAL_GetTick>
 8003a56:	0003      	movs	r3, r0
 8003a58:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5a:	e008      	b.n	8003a6e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a5c:	f7fe fdca 	bl	80025f4 <HAL_GetTick>
 8003a60:	0002      	movs	r2, r0
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	1ad3      	subs	r3, r2, r3
 8003a66:	2b64      	cmp	r3, #100	; 0x64
 8003a68:	d901      	bls.n	8003a6e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	e28d      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a6e:	4b93      	ldr	r3, [pc, #588]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	029b      	lsls	r3, r3, #10
 8003a76:	4013      	ands	r3, r2
 8003a78:	d0f0      	beq.n	8003a5c <HAL_RCC_OscConfig+0xcc>
 8003a7a:	e015      	b.n	8003aa8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a7c:	f7fe fdba 	bl	80025f4 <HAL_GetTick>
 8003a80:	0003      	movs	r3, r0
 8003a82:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a84:	e008      	b.n	8003a98 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a86:	f7fe fdb5 	bl	80025f4 <HAL_GetTick>
 8003a8a:	0002      	movs	r2, r0
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	1ad3      	subs	r3, r2, r3
 8003a90:	2b64      	cmp	r3, #100	; 0x64
 8003a92:	d901      	bls.n	8003a98 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a94:	2303      	movs	r3, #3
 8003a96:	e278      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a98:	4b88      	ldr	r3, [pc, #544]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	2380      	movs	r3, #128	; 0x80
 8003a9e:	029b      	lsls	r3, r3, #10
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d1f0      	bne.n	8003a86 <HAL_RCC_OscConfig+0xf6>
 8003aa4:	e000      	b.n	8003aa8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003aa6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	2202      	movs	r2, #2
 8003aae:	4013      	ands	r3, r2
 8003ab0:	d100      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x124>
 8003ab2:	e099      	b.n	8003be8 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003ab4:	4b81      	ldr	r3, [pc, #516]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	2238      	movs	r2, #56	; 0x38
 8003aba:	4013      	ands	r3, r2
 8003abc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003abe:	4b7f      	ldr	r3, [pc, #508]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	2203      	movs	r2, #3
 8003ac4:	4013      	ands	r3, r2
 8003ac6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	2b10      	cmp	r3, #16
 8003acc:	d102      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x144>
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2b02      	cmp	r3, #2
 8003ad2:	d002      	beq.n	8003ada <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d135      	bne.n	8003b46 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ada:	4b78      	ldr	r3, [pc, #480]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	00db      	lsls	r3, r3, #3
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d005      	beq.n	8003af2 <HAL_RCC_OscConfig+0x162>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d101      	bne.n	8003af2 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	e24b      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003af2:	4b72      	ldr	r3, [pc, #456]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	4a74      	ldr	r2, [pc, #464]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	0019      	movs	r1, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	021a      	lsls	r2, r3, #8
 8003b02:	4b6e      	ldr	r3, [pc, #440]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b04:	430a      	orrs	r2, r1
 8003b06:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d112      	bne.n	8003b34 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b0e:	4b6b      	ldr	r3, [pc, #428]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4a6e      	ldr	r2, [pc, #440]	; (8003ccc <HAL_RCC_OscConfig+0x33c>)
 8003b14:	4013      	ands	r3, r2
 8003b16:	0019      	movs	r1, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691a      	ldr	r2, [r3, #16]
 8003b1c:	4b67      	ldr	r3, [pc, #412]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003b22:	4b66      	ldr	r3, [pc, #408]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	0adb      	lsrs	r3, r3, #11
 8003b28:	2207      	movs	r2, #7
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	4a68      	ldr	r2, [pc, #416]	; (8003cd0 <HAL_RCC_OscConfig+0x340>)
 8003b2e:	40da      	lsrs	r2, r3
 8003b30:	4b68      	ldr	r3, [pc, #416]	; (8003cd4 <HAL_RCC_OscConfig+0x344>)
 8003b32:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003b34:	4b68      	ldr	r3, [pc, #416]	; (8003cd8 <HAL_RCC_OscConfig+0x348>)
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	0018      	movs	r0, r3
 8003b3a:	f7fd fd39 	bl	80015b0 <HAL_InitTick>
 8003b3e:	1e03      	subs	r3, r0, #0
 8003b40:	d051      	beq.n	8003be6 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e221      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d030      	beq.n	8003bb0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003b4e:	4b5b      	ldr	r3, [pc, #364]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4a5e      	ldr	r2, [pc, #376]	; (8003ccc <HAL_RCC_OscConfig+0x33c>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	4b57      	ldr	r3, [pc, #348]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003b62:	4b56      	ldr	r3, [pc, #344]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4b55      	ldr	r3, [pc, #340]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b68:	2180      	movs	r1, #128	; 0x80
 8003b6a:	0049      	lsls	r1, r1, #1
 8003b6c:	430a      	orrs	r2, r1
 8003b6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b70:	f7fe fd40 	bl	80025f4 <HAL_GetTick>
 8003b74:	0003      	movs	r3, r0
 8003b76:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b7a:	f7fe fd3b 	bl	80025f4 <HAL_GetTick>
 8003b7e:	0002      	movs	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e1fe      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b8c:	4b4b      	ldr	r3, [pc, #300]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b8e:	681a      	ldr	r2, [r3, #0]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	00db      	lsls	r3, r3, #3
 8003b94:	4013      	ands	r3, r2
 8003b96:	d0f0      	beq.n	8003b7a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b98:	4b48      	ldr	r3, [pc, #288]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	4a4a      	ldr	r2, [pc, #296]	; (8003cc8 <HAL_RCC_OscConfig+0x338>)
 8003b9e:	4013      	ands	r3, r2
 8003ba0:	0019      	movs	r1, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	021a      	lsls	r2, r3, #8
 8003ba8:	4b44      	ldr	r3, [pc, #272]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003baa:	430a      	orrs	r2, r1
 8003bac:	605a      	str	r2, [r3, #4]
 8003bae:	e01b      	b.n	8003be8 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003bb0:	4b42      	ldr	r3, [pc, #264]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	681a      	ldr	r2, [r3, #0]
 8003bb4:	4b41      	ldr	r3, [pc, #260]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003bb6:	4949      	ldr	r1, [pc, #292]	; (8003cdc <HAL_RCC_OscConfig+0x34c>)
 8003bb8:	400a      	ands	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fd1a 	bl	80025f4 <HAL_GetTick>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bc6:	f7fe fd15 	bl	80025f4 <HAL_GetTick>
 8003bca:	0002      	movs	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1d8      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003bd8:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	00db      	lsls	r3, r3, #3
 8003be0:	4013      	ands	r3, r2
 8003be2:	d1f0      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x236>
 8003be4:	e000      	b.n	8003be8 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003be6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2208      	movs	r2, #8
 8003bee:	4013      	ands	r3, r2
 8003bf0:	d047      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003bf2:	4b32      	ldr	r3, [pc, #200]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	2238      	movs	r2, #56	; 0x38
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b18      	cmp	r3, #24
 8003bfc:	d10a      	bne.n	8003c14 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003bfe:	4b2f      	ldr	r3, [pc, #188]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003c00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c02:	2202      	movs	r2, #2
 8003c04:	4013      	ands	r3, r2
 8003c06:	d03c      	beq.n	8003c82 <HAL_RCC_OscConfig+0x2f2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d138      	bne.n	8003c82 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	e1ba      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	699b      	ldr	r3, [r3, #24]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d019      	beq.n	8003c50 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003c1c:	4b27      	ldr	r3, [pc, #156]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c20:	4b26      	ldr	r3, [pc, #152]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003c22:	2101      	movs	r1, #1
 8003c24:	430a      	orrs	r2, r1
 8003c26:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c28:	f7fe fce4 	bl	80025f4 <HAL_GetTick>
 8003c2c:	0003      	movs	r3, r0
 8003c2e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c30:	e008      	b.n	8003c44 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c32:	f7fe fcdf 	bl	80025f4 <HAL_GetTick>
 8003c36:	0002      	movs	r2, r0
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	2b02      	cmp	r3, #2
 8003c3e:	d901      	bls.n	8003c44 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003c40:	2303      	movs	r3, #3
 8003c42:	e1a2      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003c44:	4b1d      	ldr	r3, [pc, #116]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003c46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c48:	2202      	movs	r2, #2
 8003c4a:	4013      	ands	r3, r2
 8003c4c:	d0f1      	beq.n	8003c32 <HAL_RCC_OscConfig+0x2a2>
 8003c4e:	e018      	b.n	8003c82 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003c50:	4b1a      	ldr	r3, [pc, #104]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003c52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c54:	4b19      	ldr	r3, [pc, #100]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003c56:	2101      	movs	r1, #1
 8003c58:	438a      	bics	r2, r1
 8003c5a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c5c:	f7fe fcca 	bl	80025f4 <HAL_GetTick>
 8003c60:	0003      	movs	r3, r0
 8003c62:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c64:	e008      	b.n	8003c78 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c66:	f7fe fcc5 	bl	80025f4 <HAL_GetTick>
 8003c6a:	0002      	movs	r2, r0
 8003c6c:	693b      	ldr	r3, [r7, #16]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e188      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c78:	4b10      	ldr	r3, [pc, #64]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	4013      	ands	r3, r2
 8003c80:	d1f1      	bne.n	8003c66 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	2204      	movs	r2, #4
 8003c88:	4013      	ands	r3, r2
 8003c8a:	d100      	bne.n	8003c8e <HAL_RCC_OscConfig+0x2fe>
 8003c8c:	e0c6      	b.n	8003e1c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c8e:	231f      	movs	r3, #31
 8003c90:	18fb      	adds	r3, r7, r3
 8003c92:	2200      	movs	r2, #0
 8003c94:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c96:	4b09      	ldr	r3, [pc, #36]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2238      	movs	r2, #56	; 0x38
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	2b20      	cmp	r3, #32
 8003ca0:	d11e      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003ca2:	4b06      	ldr	r3, [pc, #24]	; (8003cbc <HAL_RCC_OscConfig+0x32c>)
 8003ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	4013      	ands	r3, r2
 8003caa:	d100      	bne.n	8003cae <HAL_RCC_OscConfig+0x31e>
 8003cac:	e0b6      	b.n	8003e1c <HAL_RCC_OscConfig+0x48c>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d000      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x328>
 8003cb6:	e0b1      	b.n	8003e1c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003cb8:	2301      	movs	r3, #1
 8003cba:	e166      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
 8003cbc:	40021000 	.word	0x40021000
 8003cc0:	fffeffff 	.word	0xfffeffff
 8003cc4:	fffbffff 	.word	0xfffbffff
 8003cc8:	ffff80ff 	.word	0xffff80ff
 8003ccc:	ffffc7ff 	.word	0xffffc7ff
 8003cd0:	00f42400 	.word	0x00f42400
 8003cd4:	20000000 	.word	0x20000000
 8003cd8:	20000004 	.word	0x20000004
 8003cdc:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003ce0:	4bac      	ldr	r3, [pc, #688]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003ce2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ce4:	2380      	movs	r3, #128	; 0x80
 8003ce6:	055b      	lsls	r3, r3, #21
 8003ce8:	4013      	ands	r3, r2
 8003cea:	d101      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x360>
 8003cec:	2301      	movs	r3, #1
 8003cee:	e000      	b.n	8003cf2 <HAL_RCC_OscConfig+0x362>
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d011      	beq.n	8003d1a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003cf6:	4ba7      	ldr	r3, [pc, #668]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003cf8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cfa:	4ba6      	ldr	r3, [pc, #664]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003cfc:	2180      	movs	r1, #128	; 0x80
 8003cfe:	0549      	lsls	r1, r1, #21
 8003d00:	430a      	orrs	r2, r1
 8003d02:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d04:	4ba3      	ldr	r3, [pc, #652]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d08:	2380      	movs	r3, #128	; 0x80
 8003d0a:	055b      	lsls	r3, r3, #21
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003d12:	231f      	movs	r3, #31
 8003d14:	18fb      	adds	r3, r7, r3
 8003d16:	2201      	movs	r2, #1
 8003d18:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d1a:	4b9f      	ldr	r3, [pc, #636]	; (8003f98 <HAL_RCC_OscConfig+0x608>)
 8003d1c:	681a      	ldr	r2, [r3, #0]
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	4013      	ands	r3, r2
 8003d24:	d11a      	bne.n	8003d5c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d26:	4b9c      	ldr	r3, [pc, #624]	; (8003f98 <HAL_RCC_OscConfig+0x608>)
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	4b9b      	ldr	r3, [pc, #620]	; (8003f98 <HAL_RCC_OscConfig+0x608>)
 8003d2c:	2180      	movs	r1, #128	; 0x80
 8003d2e:	0049      	lsls	r1, r1, #1
 8003d30:	430a      	orrs	r2, r1
 8003d32:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003d34:	f7fe fc5e 	bl	80025f4 <HAL_GetTick>
 8003d38:	0003      	movs	r3, r0
 8003d3a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fe fc59 	bl	80025f4 <HAL_GetTick>
 8003d42:	0002      	movs	r2, r0
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b02      	cmp	r3, #2
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e11c      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d50:	4b91      	ldr	r3, [pc, #580]	; (8003f98 <HAL_RCC_OscConfig+0x608>)
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	2380      	movs	r3, #128	; 0x80
 8003d56:	005b      	lsls	r3, r3, #1
 8003d58:	4013      	ands	r3, r2
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d106      	bne.n	8003d72 <HAL_RCC_OscConfig+0x3e2>
 8003d64:	4b8b      	ldr	r3, [pc, #556]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d66:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d68:	4b8a      	ldr	r3, [pc, #552]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d6a:	2101      	movs	r1, #1
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d70:	e01c      	b.n	8003dac <HAL_RCC_OscConfig+0x41c>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	2b05      	cmp	r3, #5
 8003d78:	d10c      	bne.n	8003d94 <HAL_RCC_OscConfig+0x404>
 8003d7a:	4b86      	ldr	r3, [pc, #536]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d7c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d7e:	4b85      	ldr	r3, [pc, #532]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d80:	2104      	movs	r1, #4
 8003d82:	430a      	orrs	r2, r1
 8003d84:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d86:	4b83      	ldr	r3, [pc, #524]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d88:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d8a:	4b82      	ldr	r3, [pc, #520]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d8c:	2101      	movs	r1, #1
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d92:	e00b      	b.n	8003dac <HAL_RCC_OscConfig+0x41c>
 8003d94:	4b7f      	ldr	r3, [pc, #508]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d98:	4b7e      	ldr	r3, [pc, #504]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003d9a:	2101      	movs	r1, #1
 8003d9c:	438a      	bics	r2, r1
 8003d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003da0:	4b7c      	ldr	r3, [pc, #496]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003da2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003da4:	4b7b      	ldr	r3, [pc, #492]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003da6:	2104      	movs	r1, #4
 8003da8:	438a      	bics	r2, r1
 8003daa:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d014      	beq.n	8003dde <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003db4:	f7fe fc1e 	bl	80025f4 <HAL_GetTick>
 8003db8:	0003      	movs	r3, r0
 8003dba:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dbc:	e009      	b.n	8003dd2 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fe fc19 	bl	80025f4 <HAL_GetTick>
 8003dc2:	0002      	movs	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	4a74      	ldr	r2, [pc, #464]	; (8003f9c <HAL_RCC_OscConfig+0x60c>)
 8003dca:	4293      	cmp	r3, r2
 8003dcc:	d901      	bls.n	8003dd2 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003dce:	2303      	movs	r3, #3
 8003dd0:	e0db      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003dd2:	4b70      	ldr	r3, [pc, #448]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	4013      	ands	r3, r2
 8003dda:	d0f0      	beq.n	8003dbe <HAL_RCC_OscConfig+0x42e>
 8003ddc:	e013      	b.n	8003e06 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dde:	f7fe fc09 	bl	80025f4 <HAL_GetTick>
 8003de2:	0003      	movs	r3, r0
 8003de4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003de6:	e009      	b.n	8003dfc <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de8:	f7fe fc04 	bl	80025f4 <HAL_GetTick>
 8003dec:	0002      	movs	r2, r0
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	1ad3      	subs	r3, r2, r3
 8003df2:	4a6a      	ldr	r2, [pc, #424]	; (8003f9c <HAL_RCC_OscConfig+0x60c>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0c6      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003dfc:	4b65      	ldr	r3, [pc, #404]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	2202      	movs	r2, #2
 8003e02:	4013      	ands	r3, r2
 8003e04:	d1f0      	bne.n	8003de8 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003e06:	231f      	movs	r3, #31
 8003e08:	18fb      	adds	r3, r7, r3
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d105      	bne.n	8003e1c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003e10:	4b60      	ldr	r3, [pc, #384]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003e12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e14:	4b5f      	ldr	r3, [pc, #380]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003e16:	4962      	ldr	r1, [pc, #392]	; (8003fa0 <HAL_RCC_OscConfig+0x610>)
 8003e18:	400a      	ands	r2, r1
 8003e1a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	69db      	ldr	r3, [r3, #28]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d100      	bne.n	8003e26 <HAL_RCC_OscConfig+0x496>
 8003e24:	e0b0      	b.n	8003f88 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e26:	4b5b      	ldr	r3, [pc, #364]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	2238      	movs	r2, #56	; 0x38
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	2b10      	cmp	r3, #16
 8003e30:	d100      	bne.n	8003e34 <HAL_RCC_OscConfig+0x4a4>
 8003e32:	e078      	b.n	8003f26 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	69db      	ldr	r3, [r3, #28]
 8003e38:	2b02      	cmp	r3, #2
 8003e3a:	d153      	bne.n	8003ee4 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e3c:	4b55      	ldr	r3, [pc, #340]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b54      	ldr	r3, [pc, #336]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003e42:	4958      	ldr	r1, [pc, #352]	; (8003fa4 <HAL_RCC_OscConfig+0x614>)
 8003e44:	400a      	ands	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e48:	f7fe fbd4 	bl	80025f4 <HAL_GetTick>
 8003e4c:	0003      	movs	r3, r0
 8003e4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e50:	e008      	b.n	8003e64 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e52:	f7fe fbcf 	bl	80025f4 <HAL_GetTick>
 8003e56:	0002      	movs	r2, r0
 8003e58:	693b      	ldr	r3, [r7, #16]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d901      	bls.n	8003e64 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e092      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e64:	4b4b      	ldr	r3, [pc, #300]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	049b      	lsls	r3, r3, #18
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	d1f0      	bne.n	8003e52 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e70:	4b48      	ldr	r3, [pc, #288]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a4c      	ldr	r2, [pc, #304]	; (8003fa8 <HAL_RCC_OscConfig+0x618>)
 8003e76:	4013      	ands	r3, r2
 8003e78:	0019      	movs	r1, r3
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1a      	ldr	r2, [r3, #32]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e82:	431a      	orrs	r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e88:	021b      	lsls	r3, r3, #8
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e90:	431a      	orrs	r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e96:	431a      	orrs	r2, r3
 8003e98:	4b3e      	ldr	r3, [pc, #248]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e9e:	4b3d      	ldr	r3, [pc, #244]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4b3c      	ldr	r3, [pc, #240]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003ea4:	2180      	movs	r1, #128	; 0x80
 8003ea6:	0449      	lsls	r1, r1, #17
 8003ea8:	430a      	orrs	r2, r1
 8003eaa:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003eac:	4b39      	ldr	r3, [pc, #228]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4b38      	ldr	r3, [pc, #224]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003eb2:	2180      	movs	r1, #128	; 0x80
 8003eb4:	0549      	lsls	r1, r1, #21
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eba:	f7fe fb9b 	bl	80025f4 <HAL_GetTick>
 8003ebe:	0003      	movs	r3, r0
 8003ec0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ec4:	f7fe fb96 	bl	80025f4 <HAL_GetTick>
 8003ec8:	0002      	movs	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e059      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed6:	4b2f      	ldr	r3, [pc, #188]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	049b      	lsls	r3, r3, #18
 8003ede:	4013      	ands	r3, r2
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x534>
 8003ee2:	e051      	b.n	8003f88 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ee4:	4b2b      	ldr	r3, [pc, #172]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	4b2a      	ldr	r3, [pc, #168]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003eea:	492e      	ldr	r1, [pc, #184]	; (8003fa4 <HAL_RCC_OscConfig+0x614>)
 8003eec:	400a      	ands	r2, r1
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef0:	f7fe fb80 	bl	80025f4 <HAL_GetTick>
 8003ef4:	0003      	movs	r3, r0
 8003ef6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ef8:	e008      	b.n	8003f0c <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003efa:	f7fe fb7b 	bl	80025f4 <HAL_GetTick>
 8003efe:	0002      	movs	r2, r0
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	1ad3      	subs	r3, r2, r3
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d901      	bls.n	8003f0c <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e03e      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0c:	4b21      	ldr	r3, [pc, #132]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003f0e:	681a      	ldr	r2, [r3, #0]
 8003f10:	2380      	movs	r3, #128	; 0x80
 8003f12:	049b      	lsls	r3, r3, #18
 8003f14:	4013      	ands	r3, r2
 8003f16:	d1f0      	bne.n	8003efa <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003f18:	4b1e      	ldr	r3, [pc, #120]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	4b1d      	ldr	r3, [pc, #116]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003f1e:	4923      	ldr	r1, [pc, #140]	; (8003fac <HAL_RCC_OscConfig+0x61c>)
 8003f20:	400a      	ands	r2, r1
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e030      	b.n	8003f88 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	69db      	ldr	r3, [r3, #28]
 8003f2a:	2b01      	cmp	r3, #1
 8003f2c:	d101      	bne.n	8003f32 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	e02b      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003f32:	4b18      	ldr	r3, [pc, #96]	; (8003f94 <HAL_RCC_OscConfig+0x604>)
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	2203      	movs	r2, #3
 8003f3c:	401a      	ands	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d11e      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2270      	movs	r2, #112	; 0x70
 8003f4a:	401a      	ands	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d117      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	23fe      	movs	r3, #254	; 0xfe
 8003f58:	01db      	lsls	r3, r3, #7
 8003f5a:	401a      	ands	r2, r3
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d10e      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f66:	697a      	ldr	r2, [r7, #20]
 8003f68:	23f8      	movs	r3, #248	; 0xf8
 8003f6a:	039b      	lsls	r3, r3, #14
 8003f6c:	401a      	ands	r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d106      	bne.n	8003f84 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	0f5b      	lsrs	r3, r3, #29
 8003f7a:	075a      	lsls	r2, r3, #29
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d001      	beq.n	8003f88 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	0018      	movs	r0, r3
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	b008      	add	sp, #32
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	46c0      	nop			; (mov r8, r8)
 8003f94:	40021000 	.word	0x40021000
 8003f98:	40007000 	.word	0x40007000
 8003f9c:	00001388 	.word	0x00001388
 8003fa0:	efffffff 	.word	0xefffffff
 8003fa4:	feffffff 	.word	0xfeffffff
 8003fa8:	1fc1808c 	.word	0x1fc1808c
 8003fac:	effefffc 	.word	0xeffefffc

08003fb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0e9      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003fc4:	4b76      	ldr	r3, [pc, #472]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2207      	movs	r2, #7
 8003fca:	4013      	ands	r3, r2
 8003fcc:	683a      	ldr	r2, [r7, #0]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d91e      	bls.n	8004010 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fd2:	4b73      	ldr	r3, [pc, #460]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2207      	movs	r2, #7
 8003fd8:	4393      	bics	r3, r2
 8003fda:	0019      	movs	r1, r3
 8003fdc:	4b70      	ldr	r3, [pc, #448]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003fe4:	f7fe fb06 	bl	80025f4 <HAL_GetTick>
 8003fe8:	0003      	movs	r3, r0
 8003fea:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003fec:	e009      	b.n	8004002 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fee:	f7fe fb01 	bl	80025f4 <HAL_GetTick>
 8003ff2:	0002      	movs	r2, r0
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	4a6a      	ldr	r2, [pc, #424]	; (80041a4 <HAL_RCC_ClockConfig+0x1f4>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e0ca      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004002:	4b67      	ldr	r3, [pc, #412]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	2207      	movs	r2, #7
 8004008:	4013      	ands	r3, r2
 800400a:	683a      	ldr	r2, [r7, #0]
 800400c:	429a      	cmp	r2, r3
 800400e:	d1ee      	bne.n	8003fee <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2202      	movs	r2, #2
 8004016:	4013      	ands	r3, r2
 8004018:	d015      	beq.n	8004046 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	2204      	movs	r2, #4
 8004020:	4013      	ands	r3, r2
 8004022:	d006      	beq.n	8004032 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004024:	4b60      	ldr	r3, [pc, #384]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004026:	689a      	ldr	r2, [r3, #8]
 8004028:	4b5f      	ldr	r3, [pc, #380]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 800402a:	21e0      	movs	r1, #224	; 0xe0
 800402c:	01c9      	lsls	r1, r1, #7
 800402e:	430a      	orrs	r2, r1
 8004030:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004032:	4b5d      	ldr	r3, [pc, #372]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	4a5d      	ldr	r2, [pc, #372]	; (80041ac <HAL_RCC_ClockConfig+0x1fc>)
 8004038:	4013      	ands	r3, r2
 800403a:	0019      	movs	r1, r3
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	4b59      	ldr	r3, [pc, #356]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004042:	430a      	orrs	r2, r1
 8004044:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2201      	movs	r2, #1
 800404c:	4013      	ands	r3, r2
 800404e:	d057      	beq.n	8004100 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d107      	bne.n	8004068 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004058:	4b53      	ldr	r3, [pc, #332]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	2380      	movs	r3, #128	; 0x80
 800405e:	029b      	lsls	r3, r3, #10
 8004060:	4013      	ands	r3, r2
 8004062:	d12b      	bne.n	80040bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e097      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	2b02      	cmp	r3, #2
 800406e:	d107      	bne.n	8004080 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004070:	4b4d      	ldr	r3, [pc, #308]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	2380      	movs	r3, #128	; 0x80
 8004076:	049b      	lsls	r3, r3, #18
 8004078:	4013      	ands	r3, r2
 800407a:	d11f      	bne.n	80040bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	e08b      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d107      	bne.n	8004098 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004088:	4b47      	ldr	r3, [pc, #284]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	2380      	movs	r3, #128	; 0x80
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4013      	ands	r3, r2
 8004092:	d113      	bne.n	80040bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	e07f      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	2b03      	cmp	r3, #3
 800409e:	d106      	bne.n	80040ae <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80040a0:	4b41      	ldr	r3, [pc, #260]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 80040a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80040a4:	2202      	movs	r2, #2
 80040a6:	4013      	ands	r3, r2
 80040a8:	d108      	bne.n	80040bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	e074      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80040ae:	4b3e      	ldr	r3, [pc, #248]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 80040b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040b2:	2202      	movs	r2, #2
 80040b4:	4013      	ands	r3, r2
 80040b6:	d101      	bne.n	80040bc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e06d      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80040bc:	4b3a      	ldr	r3, [pc, #232]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	2207      	movs	r2, #7
 80040c2:	4393      	bics	r3, r2
 80040c4:	0019      	movs	r1, r3
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685a      	ldr	r2, [r3, #4]
 80040ca:	4b37      	ldr	r3, [pc, #220]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 80040cc:	430a      	orrs	r2, r1
 80040ce:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040d0:	f7fe fa90 	bl	80025f4 <HAL_GetTick>
 80040d4:	0003      	movs	r3, r0
 80040d6:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040d8:	e009      	b.n	80040ee <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040da:	f7fe fa8b 	bl	80025f4 <HAL_GetTick>
 80040de:	0002      	movs	r2, r0
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	4a2f      	ldr	r2, [pc, #188]	; (80041a4 <HAL_RCC_ClockConfig+0x1f4>)
 80040e6:	4293      	cmp	r3, r2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e054      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80040ee:	4b2e      	ldr	r3, [pc, #184]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	2238      	movs	r2, #56	; 0x38
 80040f4:	401a      	ands	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d1ec      	bne.n	80040da <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004100:	4b27      	ldr	r3, [pc, #156]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2207      	movs	r2, #7
 8004106:	4013      	ands	r3, r2
 8004108:	683a      	ldr	r2, [r7, #0]
 800410a:	429a      	cmp	r2, r3
 800410c:	d21e      	bcs.n	800414c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800410e:	4b24      	ldr	r3, [pc, #144]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2207      	movs	r2, #7
 8004114:	4393      	bics	r3, r2
 8004116:	0019      	movs	r1, r3
 8004118:	4b21      	ldr	r3, [pc, #132]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 800411a:	683a      	ldr	r2, [r7, #0]
 800411c:	430a      	orrs	r2, r1
 800411e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004120:	f7fe fa68 	bl	80025f4 <HAL_GetTick>
 8004124:	0003      	movs	r3, r0
 8004126:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004128:	e009      	b.n	800413e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800412a:	f7fe fa63 	bl	80025f4 <HAL_GetTick>
 800412e:	0002      	movs	r2, r0
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	1ad3      	subs	r3, r2, r3
 8004134:	4a1b      	ldr	r2, [pc, #108]	; (80041a4 <HAL_RCC_ClockConfig+0x1f4>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d901      	bls.n	800413e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800413a:	2303      	movs	r3, #3
 800413c:	e02c      	b.n	8004198 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800413e:	4b18      	ldr	r3, [pc, #96]	; (80041a0 <HAL_RCC_ClockConfig+0x1f0>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2207      	movs	r2, #7
 8004144:	4013      	ands	r3, r2
 8004146:	683a      	ldr	r2, [r7, #0]
 8004148:	429a      	cmp	r2, r3
 800414a:	d1ee      	bne.n	800412a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2204      	movs	r2, #4
 8004152:	4013      	ands	r3, r2
 8004154:	d009      	beq.n	800416a <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004156:	4b14      	ldr	r3, [pc, #80]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004158:	689b      	ldr	r3, [r3, #8]
 800415a:	4a15      	ldr	r2, [pc, #84]	; (80041b0 <HAL_RCC_ClockConfig+0x200>)
 800415c:	4013      	ands	r3, r2
 800415e:	0019      	movs	r1, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68da      	ldr	r2, [r3, #12]
 8004164:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004166:	430a      	orrs	r2, r1
 8004168:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800416a:	f000 f829 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800416e:	0001      	movs	r1, r0
 8004170:	4b0d      	ldr	r3, [pc, #52]	; (80041a8 <HAL_RCC_ClockConfig+0x1f8>)
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	0a1b      	lsrs	r3, r3, #8
 8004176:	220f      	movs	r2, #15
 8004178:	401a      	ands	r2, r3
 800417a:	4b0e      	ldr	r3, [pc, #56]	; (80041b4 <HAL_RCC_ClockConfig+0x204>)
 800417c:	0092      	lsls	r2, r2, #2
 800417e:	58d3      	ldr	r3, [r2, r3]
 8004180:	221f      	movs	r2, #31
 8004182:	4013      	ands	r3, r2
 8004184:	000a      	movs	r2, r1
 8004186:	40da      	lsrs	r2, r3
 8004188:	4b0b      	ldr	r3, [pc, #44]	; (80041b8 <HAL_RCC_ClockConfig+0x208>)
 800418a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_RCC_ClockConfig+0x20c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	0018      	movs	r0, r3
 8004192:	f7fd fa0d 	bl	80015b0 <HAL_InitTick>
 8004196:	0003      	movs	r3, r0
}
 8004198:	0018      	movs	r0, r3
 800419a:	46bd      	mov	sp, r7
 800419c:	b004      	add	sp, #16
 800419e:	bd80      	pop	{r7, pc}
 80041a0:	40022000 	.word	0x40022000
 80041a4:	00001388 	.word	0x00001388
 80041a8:	40021000 	.word	0x40021000
 80041ac:	fffff0ff 	.word	0xfffff0ff
 80041b0:	ffff8fff 	.word	0xffff8fff
 80041b4:	0800b224 	.word	0x0800b224
 80041b8:	20000000 	.word	0x20000000
 80041bc:	20000004 	.word	0x20000004

080041c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b086      	sub	sp, #24
 80041c4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80041c6:	4b3c      	ldr	r3, [pc, #240]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	2238      	movs	r2, #56	; 0x38
 80041cc:	4013      	ands	r3, r2
 80041ce:	d10f      	bne.n	80041f0 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80041d0:	4b39      	ldr	r3, [pc, #228]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0adb      	lsrs	r3, r3, #11
 80041d6:	2207      	movs	r2, #7
 80041d8:	4013      	ands	r3, r2
 80041da:	2201      	movs	r2, #1
 80041dc:	409a      	lsls	r2, r3
 80041de:	0013      	movs	r3, r2
 80041e0:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80041e2:	6839      	ldr	r1, [r7, #0]
 80041e4:	4835      	ldr	r0, [pc, #212]	; (80042bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80041e6:	f7fb ff99 	bl	800011c <__udivsi3>
 80041ea:	0003      	movs	r3, r0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e05d      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041f0:	4b31      	ldr	r3, [pc, #196]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	2238      	movs	r2, #56	; 0x38
 80041f6:	4013      	ands	r3, r2
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d102      	bne.n	8004202 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041fc:	4b2f      	ldr	r3, [pc, #188]	; (80042bc <HAL_RCC_GetSysClockFreq+0xfc>)
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	e054      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004202:	4b2d      	ldr	r3, [pc, #180]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	2238      	movs	r2, #56	; 0x38
 8004208:	4013      	ands	r3, r2
 800420a:	2b10      	cmp	r3, #16
 800420c:	d138      	bne.n	8004280 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800420e:	4b2a      	ldr	r3, [pc, #168]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004210:	68db      	ldr	r3, [r3, #12]
 8004212:	2203      	movs	r2, #3
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004218:	4b27      	ldr	r3, [pc, #156]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	091b      	lsrs	r3, r3, #4
 800421e:	2207      	movs	r2, #7
 8004220:	4013      	ands	r3, r2
 8004222:	3301      	adds	r3, #1
 8004224:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b03      	cmp	r3, #3
 800422a:	d10d      	bne.n	8004248 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800422c:	68b9      	ldr	r1, [r7, #8]
 800422e:	4823      	ldr	r0, [pc, #140]	; (80042bc <HAL_RCC_GetSysClockFreq+0xfc>)
 8004230:	f7fb ff74 	bl	800011c <__udivsi3>
 8004234:	0003      	movs	r3, r0
 8004236:	0019      	movs	r1, r3
 8004238:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 800423a:	68db      	ldr	r3, [r3, #12]
 800423c:	0a1b      	lsrs	r3, r3, #8
 800423e:	227f      	movs	r2, #127	; 0x7f
 8004240:	4013      	ands	r3, r2
 8004242:	434b      	muls	r3, r1
 8004244:	617b      	str	r3, [r7, #20]
        break;
 8004246:	e00d      	b.n	8004264 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8004248:	68b9      	ldr	r1, [r7, #8]
 800424a:	481c      	ldr	r0, [pc, #112]	; (80042bc <HAL_RCC_GetSysClockFreq+0xfc>)
 800424c:	f7fb ff66 	bl	800011c <__udivsi3>
 8004250:	0003      	movs	r3, r0
 8004252:	0019      	movs	r1, r3
 8004254:	4b18      	ldr	r3, [pc, #96]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	0a1b      	lsrs	r3, r3, #8
 800425a:	227f      	movs	r2, #127	; 0x7f
 800425c:	4013      	ands	r3, r2
 800425e:	434b      	muls	r3, r1
 8004260:	617b      	str	r3, [r7, #20]
        break;
 8004262:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8004264:	4b14      	ldr	r3, [pc, #80]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	0f5b      	lsrs	r3, r3, #29
 800426a:	2207      	movs	r2, #7
 800426c:	4013      	ands	r3, r2
 800426e:	3301      	adds	r3, #1
 8004270:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	6978      	ldr	r0, [r7, #20]
 8004276:	f7fb ff51 	bl	800011c <__udivsi3>
 800427a:	0003      	movs	r3, r0
 800427c:	613b      	str	r3, [r7, #16]
 800427e:	e015      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004280:	4b0d      	ldr	r3, [pc, #52]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	2238      	movs	r2, #56	; 0x38
 8004286:	4013      	ands	r3, r2
 8004288:	2b20      	cmp	r3, #32
 800428a:	d103      	bne.n	8004294 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800428c:	2380      	movs	r3, #128	; 0x80
 800428e:	021b      	lsls	r3, r3, #8
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	e00b      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004294:	4b08      	ldr	r3, [pc, #32]	; (80042b8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	2238      	movs	r2, #56	; 0x38
 800429a:	4013      	ands	r3, r2
 800429c:	2b18      	cmp	r3, #24
 800429e:	d103      	bne.n	80042a8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80042a0:	23fa      	movs	r3, #250	; 0xfa
 80042a2:	01db      	lsls	r3, r3, #7
 80042a4:	613b      	str	r3, [r7, #16]
 80042a6:	e001      	b.n	80042ac <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80042a8:	2300      	movs	r3, #0
 80042aa:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80042ac:	693b      	ldr	r3, [r7, #16]
}
 80042ae:	0018      	movs	r0, r3
 80042b0:	46bd      	mov	sp, r7
 80042b2:	b006      	add	sp, #24
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	46c0      	nop			; (mov r8, r8)
 80042b8:	40021000 	.word	0x40021000
 80042bc:	00f42400 	.word	0x00f42400

080042c0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c4:	4b02      	ldr	r3, [pc, #8]	; (80042d0 <HAL_RCC_GetHCLKFreq+0x10>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	0018      	movs	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	20000000 	.word	0x20000000

080042d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d4:	b5b0      	push	{r4, r5, r7, lr}
 80042d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80042d8:	f7ff fff2 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 80042dc:	0004      	movs	r4, r0
 80042de:	f7ff fb4b 	bl	8003978 <LL_RCC_GetAPB1Prescaler>
 80042e2:	0003      	movs	r3, r0
 80042e4:	0b1a      	lsrs	r2, r3, #12
 80042e6:	4b05      	ldr	r3, [pc, #20]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x28>)
 80042e8:	0092      	lsls	r2, r2, #2
 80042ea:	58d3      	ldr	r3, [r2, r3]
 80042ec:	221f      	movs	r2, #31
 80042ee:	4013      	ands	r3, r2
 80042f0:	40dc      	lsrs	r4, r3
 80042f2:	0023      	movs	r3, r4
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bdb0      	pop	{r4, r5, r7, pc}
 80042fa:	46c0      	nop			; (mov r8, r8)
 80042fc:	0800b264 	.word	0x0800b264

08004300 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2207      	movs	r2, #7
 800430e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004310:	4b0e      	ldr	r3, [pc, #56]	; (800434c <HAL_RCC_GetClockConfig+0x4c>)
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2207      	movs	r2, #7
 8004316:	401a      	ands	r2, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800431c:	4b0b      	ldr	r3, [pc, #44]	; (800434c <HAL_RCC_GetClockConfig+0x4c>)
 800431e:	689a      	ldr	r2, [r3, #8]
 8004320:	23f0      	movs	r3, #240	; 0xf0
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	401a      	ands	r2, r3
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800432a:	4b08      	ldr	r3, [pc, #32]	; (800434c <HAL_RCC_GetClockConfig+0x4c>)
 800432c:	689a      	ldr	r2, [r3, #8]
 800432e:	23e0      	movs	r3, #224	; 0xe0
 8004330:	01db      	lsls	r3, r3, #7
 8004332:	401a      	ands	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004338:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetClockConfig+0x50>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	2207      	movs	r2, #7
 800433e:	401a      	ands	r2, r3
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	601a      	str	r2, [r3, #0]
}
 8004344:	46c0      	nop			; (mov r8, r8)
 8004346:	46bd      	mov	sp, r7
 8004348:	b002      	add	sp, #8
 800434a:	bd80      	pop	{r7, pc}
 800434c:	40021000 	.word	0x40021000
 8004350:	40022000 	.word	0x40022000

08004354 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800435c:	2313      	movs	r3, #19
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	2200      	movs	r2, #0
 8004362:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004364:	2312      	movs	r3, #18
 8004366:	18fb      	adds	r3, r7, r3
 8004368:	2200      	movs	r2, #0
 800436a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	2380      	movs	r3, #128	; 0x80
 8004372:	029b      	lsls	r3, r3, #10
 8004374:	4013      	ands	r3, r2
 8004376:	d100      	bne.n	800437a <HAL_RCCEx_PeriphCLKConfig+0x26>
 8004378:	e0a3      	b.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800437a:	2011      	movs	r0, #17
 800437c:	183b      	adds	r3, r7, r0
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004382:	4b86      	ldr	r3, [pc, #536]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004384:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004386:	2380      	movs	r3, #128	; 0x80
 8004388:	055b      	lsls	r3, r3, #21
 800438a:	4013      	ands	r3, r2
 800438c:	d110      	bne.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800438e:	4b83      	ldr	r3, [pc, #524]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004390:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004392:	4b82      	ldr	r3, [pc, #520]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004394:	2180      	movs	r1, #128	; 0x80
 8004396:	0549      	lsls	r1, r1, #21
 8004398:	430a      	orrs	r2, r1
 800439a:	63da      	str	r2, [r3, #60]	; 0x3c
 800439c:	4b7f      	ldr	r3, [pc, #508]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800439e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80043a0:	2380      	movs	r3, #128	; 0x80
 80043a2:	055b      	lsls	r3, r3, #21
 80043a4:	4013      	ands	r3, r2
 80043a6:	60bb      	str	r3, [r7, #8]
 80043a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043aa:	183b      	adds	r3, r7, r0
 80043ac:	2201      	movs	r2, #1
 80043ae:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80043b0:	4b7b      	ldr	r3, [pc, #492]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	4b7a      	ldr	r3, [pc, #488]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	0049      	lsls	r1, r1, #1
 80043ba:	430a      	orrs	r2, r1
 80043bc:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80043be:	f7fe f919 	bl	80025f4 <HAL_GetTick>
 80043c2:	0003      	movs	r3, r0
 80043c4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043c6:	e00b      	b.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043c8:	f7fe f914 	bl	80025f4 <HAL_GetTick>
 80043cc:	0002      	movs	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	d904      	bls.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 80043d6:	2313      	movs	r3, #19
 80043d8:	18fb      	adds	r3, r7, r3
 80043da:	2203      	movs	r2, #3
 80043dc:	701a      	strb	r2, [r3, #0]
        break;
 80043de:	e005      	b.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80043e0:	4b6f      	ldr	r3, [pc, #444]	; (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	005b      	lsls	r3, r3, #1
 80043e8:	4013      	ands	r3, r2
 80043ea:	d0ed      	beq.n	80043c8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 80043ec:	2313      	movs	r3, #19
 80043ee:	18fb      	adds	r3, r7, r3
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d154      	bne.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80043f6:	4b69      	ldr	r3, [pc, #420]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043fa:	23c0      	movs	r3, #192	; 0xc0
 80043fc:	009b      	lsls	r3, r3, #2
 80043fe:	4013      	ands	r3, r2
 8004400:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	2b00      	cmp	r3, #0
 8004406:	d019      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	697a      	ldr	r2, [r7, #20]
 800440e:	429a      	cmp	r2, r3
 8004410:	d014      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004412:	4b62      	ldr	r3, [pc, #392]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004414:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004416:	4a63      	ldr	r2, [pc, #396]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004418:	4013      	ands	r3, r2
 800441a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800441c:	4b5f      	ldr	r3, [pc, #380]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800441e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004420:	4b5e      	ldr	r3, [pc, #376]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004422:	2180      	movs	r1, #128	; 0x80
 8004424:	0249      	lsls	r1, r1, #9
 8004426:	430a      	orrs	r2, r1
 8004428:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800442a:	4b5c      	ldr	r3, [pc, #368]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800442c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800442e:	4b5b      	ldr	r3, [pc, #364]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004430:	495d      	ldr	r1, [pc, #372]	; (80045a8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8004432:	400a      	ands	r2, r1
 8004434:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004436:	4b59      	ldr	r3, [pc, #356]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	2201      	movs	r2, #1
 8004440:	4013      	ands	r3, r2
 8004442:	d016      	beq.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004444:	f7fe f8d6 	bl	80025f4 <HAL_GetTick>
 8004448:	0003      	movs	r3, r0
 800444a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800444c:	e00c      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800444e:	f7fe f8d1 	bl	80025f4 <HAL_GetTick>
 8004452:	0002      	movs	r2, r0
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	1ad3      	subs	r3, r2, r3
 8004458:	4a54      	ldr	r2, [pc, #336]	; (80045ac <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d904      	bls.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800445e:	2313      	movs	r3, #19
 8004460:	18fb      	adds	r3, r7, r3
 8004462:	2203      	movs	r2, #3
 8004464:	701a      	strb	r2, [r3, #0]
            break;
 8004466:	e004      	b.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004468:	4b4c      	ldr	r3, [pc, #304]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800446a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800446c:	2202      	movs	r2, #2
 800446e:	4013      	ands	r3, r2
 8004470:	d0ed      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004472:	2313      	movs	r3, #19
 8004474:	18fb      	adds	r3, r7, r3
 8004476:	781b      	ldrb	r3, [r3, #0]
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10a      	bne.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800447c:	4b47      	ldr	r3, [pc, #284]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800447e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004480:	4a48      	ldr	r2, [pc, #288]	; (80045a4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004482:	4013      	ands	r3, r2
 8004484:	0019      	movs	r1, r3
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	699a      	ldr	r2, [r3, #24]
 800448a:	4b44      	ldr	r3, [pc, #272]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800448c:	430a      	orrs	r2, r1
 800448e:	65da      	str	r2, [r3, #92]	; 0x5c
 8004490:	e00c      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004492:	2312      	movs	r3, #18
 8004494:	18fb      	adds	r3, r7, r3
 8004496:	2213      	movs	r2, #19
 8004498:	18ba      	adds	r2, r7, r2
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	701a      	strb	r2, [r3, #0]
 800449e:	e005      	b.n	80044ac <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044a0:	2312      	movs	r3, #18
 80044a2:	18fb      	adds	r3, r7, r3
 80044a4:	2213      	movs	r2, #19
 80044a6:	18ba      	adds	r2, r7, r2
 80044a8:	7812      	ldrb	r2, [r2, #0]
 80044aa:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80044ac:	2311      	movs	r3, #17
 80044ae:	18fb      	adds	r3, r7, r3
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044b6:	4b39      	ldr	r3, [pc, #228]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80044ba:	4b38      	ldr	r3, [pc, #224]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044bc:	493c      	ldr	r1, [pc, #240]	; (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80044be:	400a      	ands	r2, r1
 80044c0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2201      	movs	r2, #1
 80044c8:	4013      	ands	r3, r2
 80044ca:	d009      	beq.n	80044e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80044cc:	4b33      	ldr	r3, [pc, #204]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044d0:	2203      	movs	r2, #3
 80044d2:	4393      	bics	r3, r2
 80044d4:	0019      	movs	r1, r3
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685a      	ldr	r2, [r3, #4]
 80044da:	4b30      	ldr	r3, [pc, #192]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044dc:	430a      	orrs	r2, r1
 80044de:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	2202      	movs	r2, #2
 80044e6:	4013      	ands	r3, r2
 80044e8:	d009      	beq.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80044ea:	4b2c      	ldr	r3, [pc, #176]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044ee:	220c      	movs	r2, #12
 80044f0:	4393      	bics	r3, r2
 80044f2:	0019      	movs	r1, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	689a      	ldr	r2, [r3, #8]
 80044f8:	4b28      	ldr	r3, [pc, #160]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044fa:	430a      	orrs	r2, r1
 80044fc:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	2220      	movs	r2, #32
 8004504:	4013      	ands	r3, r2
 8004506:	d009      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004508:	4b24      	ldr	r3, [pc, #144]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	4a29      	ldr	r2, [pc, #164]	; (80045b4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800450e:	4013      	ands	r3, r2
 8004510:	0019      	movs	r1, r3
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68da      	ldr	r2, [r3, #12]
 8004516:	4b21      	ldr	r3, [pc, #132]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004518:	430a      	orrs	r2, r1
 800451a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681a      	ldr	r2, [r3, #0]
 8004520:	2380      	movs	r3, #128	; 0x80
 8004522:	01db      	lsls	r3, r3, #7
 8004524:	4013      	ands	r3, r2
 8004526:	d015      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004528:	4b1c      	ldr	r3, [pc, #112]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800452a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452c:	009b      	lsls	r3, r3, #2
 800452e:	0899      	lsrs	r1, r3, #2
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	695a      	ldr	r2, [r3, #20]
 8004534:	4b19      	ldr	r3, [pc, #100]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004536:	430a      	orrs	r2, r1
 8004538:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	695a      	ldr	r2, [r3, #20]
 800453e:	2380      	movs	r3, #128	; 0x80
 8004540:	05db      	lsls	r3, r3, #23
 8004542:	429a      	cmp	r2, r3
 8004544:	d106      	bne.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004548:	68da      	ldr	r2, [r3, #12]
 800454a:	4b14      	ldr	r3, [pc, #80]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800454c:	2180      	movs	r1, #128	; 0x80
 800454e:	0249      	lsls	r1, r1, #9
 8004550:	430a      	orrs	r2, r1
 8004552:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	2380      	movs	r3, #128	; 0x80
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	4013      	ands	r3, r2
 800455e:	d016      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8004560:	4b0e      	ldr	r3, [pc, #56]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	4a14      	ldr	r2, [pc, #80]	; (80045b8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004566:	4013      	ands	r3, r2
 8004568:	0019      	movs	r1, r3
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	691a      	ldr	r2, [r3, #16]
 800456e:	4b0b      	ldr	r3, [pc, #44]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004570:	430a      	orrs	r2, r1
 8004572:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	2380      	movs	r3, #128	; 0x80
 800457a:	01db      	lsls	r3, r3, #7
 800457c:	429a      	cmp	r2, r3
 800457e:	d106      	bne.n	800458e <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004580:	4b06      	ldr	r3, [pc, #24]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	4b05      	ldr	r3, [pc, #20]	; (800459c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	0249      	lsls	r1, r1, #9
 800458a:	430a      	orrs	r2, r1
 800458c:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800458e:	2312      	movs	r3, #18
 8004590:	18fb      	adds	r3, r7, r3
 8004592:	781b      	ldrb	r3, [r3, #0]
}
 8004594:	0018      	movs	r0, r3
 8004596:	46bd      	mov	sp, r7
 8004598:	b006      	add	sp, #24
 800459a:	bd80      	pop	{r7, pc}
 800459c:	40021000 	.word	0x40021000
 80045a0:	40007000 	.word	0x40007000
 80045a4:	fffffcff 	.word	0xfffffcff
 80045a8:	fffeffff 	.word	0xfffeffff
 80045ac:	00001388 	.word	0x00001388
 80045b0:	efffffff 	.word	0xefffffff
 80045b4:	ffffcfff 	.word	0xffffcfff
 80045b8:	ffff3fff 	.word	0xffff3fff

080045bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b084      	sub	sp, #16
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d101      	bne.n	80045ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e0a8      	b.n	8004720 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	2382      	movs	r3, #130	; 0x82
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	429a      	cmp	r2, r3
 80045e0:	d009      	beq.n	80045f6 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2200      	movs	r2, #0
 80045e6:	61da      	str	r2, [r3, #28]
 80045e8:	e005      	b.n	80045f6 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2200      	movs	r2, #0
 80045fa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	225d      	movs	r2, #93	; 0x5d
 8004600:	5c9b      	ldrb	r3, [r3, r2]
 8004602:	b2db      	uxtb	r3, r3
 8004604:	2b00      	cmp	r3, #0
 8004606:	d107      	bne.n	8004618 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	225c      	movs	r2, #92	; 0x5c
 800460c:	2100      	movs	r1, #0
 800460e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	0018      	movs	r0, r3
 8004614:	f7fc ff50 	bl	80014b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	225d      	movs	r2, #93	; 0x5d
 800461c:	2102      	movs	r1, #2
 800461e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2140      	movs	r1, #64	; 0x40
 800462c:	438a      	bics	r2, r1
 800462e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68da      	ldr	r2, [r3, #12]
 8004634:	23e0      	movs	r3, #224	; 0xe0
 8004636:	00db      	lsls	r3, r3, #3
 8004638:	429a      	cmp	r2, r3
 800463a:	d902      	bls.n	8004642 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e002      	b.n	8004648 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004642:	2380      	movs	r3, #128	; 0x80
 8004644:	015b      	lsls	r3, r3, #5
 8004646:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	68da      	ldr	r2, [r3, #12]
 800464c:	23f0      	movs	r3, #240	; 0xf0
 800464e:	011b      	lsls	r3, r3, #4
 8004650:	429a      	cmp	r2, r3
 8004652:	d008      	beq.n	8004666 <HAL_SPI_Init+0xaa>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	23e0      	movs	r3, #224	; 0xe0
 800465a:	00db      	lsls	r3, r3, #3
 800465c:	429a      	cmp	r2, r3
 800465e:	d002      	beq.n	8004666 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685a      	ldr	r2, [r3, #4]
 800466a:	2382      	movs	r3, #130	; 0x82
 800466c:	005b      	lsls	r3, r3, #1
 800466e:	401a      	ands	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6899      	ldr	r1, [r3, #8]
 8004674:	2384      	movs	r3, #132	; 0x84
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	400b      	ands	r3, r1
 800467a:	431a      	orrs	r2, r3
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	691b      	ldr	r3, [r3, #16]
 8004680:	2102      	movs	r1, #2
 8004682:	400b      	ands	r3, r1
 8004684:	431a      	orrs	r2, r3
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	2101      	movs	r1, #1
 800468c:	400b      	ands	r3, r1
 800468e:	431a      	orrs	r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6999      	ldr	r1, [r3, #24]
 8004694:	2380      	movs	r3, #128	; 0x80
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	400b      	ands	r3, r1
 800469a:	431a      	orrs	r2, r3
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	69db      	ldr	r3, [r3, #28]
 80046a0:	2138      	movs	r1, #56	; 0x38
 80046a2:	400b      	ands	r3, r1
 80046a4:	431a      	orrs	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	2180      	movs	r1, #128	; 0x80
 80046ac:	400b      	ands	r3, r1
 80046ae:	431a      	orrs	r2, r3
 80046b0:	0011      	movs	r1, r2
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046b6:	2380      	movs	r3, #128	; 0x80
 80046b8:	019b      	lsls	r3, r3, #6
 80046ba:	401a      	ands	r2, r3
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	430a      	orrs	r2, r1
 80046c2:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	0c1b      	lsrs	r3, r3, #16
 80046ca:	2204      	movs	r2, #4
 80046cc:	401a      	ands	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d2:	2110      	movs	r1, #16
 80046d4:	400b      	ands	r3, r1
 80046d6:	431a      	orrs	r2, r3
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046dc:	2108      	movs	r1, #8
 80046de:	400b      	ands	r3, r1
 80046e0:	431a      	orrs	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	68d9      	ldr	r1, [r3, #12]
 80046e6:	23f0      	movs	r3, #240	; 0xf0
 80046e8:	011b      	lsls	r3, r3, #4
 80046ea:	400b      	ands	r3, r1
 80046ec:	431a      	orrs	r2, r3
 80046ee:	0011      	movs	r1, r2
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	2380      	movs	r3, #128	; 0x80
 80046f4:	015b      	lsls	r3, r3, #5
 80046f6:	401a      	ands	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	430a      	orrs	r2, r1
 80046fe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4907      	ldr	r1, [pc, #28]	; (8004728 <HAL_SPI_Init+0x16c>)
 800470c:	400a      	ands	r2, r1
 800470e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2200      	movs	r2, #0
 8004714:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	225d      	movs	r2, #93	; 0x5d
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	0018      	movs	r0, r3
 8004722:	46bd      	mov	sp, r7
 8004724:	b004      	add	sp, #16
 8004726:	bd80      	pop	{r7, pc}
 8004728:	fffff7ff 	.word	0xfffff7ff

0800472c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e04a      	b.n	80047d4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	223d      	movs	r2, #61	; 0x3d
 8004742:	5c9b      	ldrb	r3, [r3, r2]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d107      	bne.n	800475a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	223c      	movs	r2, #60	; 0x3c
 800474e:	2100      	movs	r1, #0
 8004750:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	0018      	movs	r0, r3
 8004756:	f7fd fc69 	bl	800202c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	223d      	movs	r2, #61	; 0x3d
 800475e:	2102      	movs	r1, #2
 8004760:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	3304      	adds	r3, #4
 800476a:	0019      	movs	r1, r3
 800476c:	0010      	movs	r0, r2
 800476e:	f000 fbdd 	bl	8004f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2248      	movs	r2, #72	; 0x48
 8004776:	2101      	movs	r1, #1
 8004778:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	223e      	movs	r2, #62	; 0x3e
 800477e:	2101      	movs	r1, #1
 8004780:	5499      	strb	r1, [r3, r2]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	223f      	movs	r2, #63	; 0x3f
 8004786:	2101      	movs	r1, #1
 8004788:	5499      	strb	r1, [r3, r2]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2240      	movs	r2, #64	; 0x40
 800478e:	2101      	movs	r1, #1
 8004790:	5499      	strb	r1, [r3, r2]
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2241      	movs	r2, #65	; 0x41
 8004796:	2101      	movs	r1, #1
 8004798:	5499      	strb	r1, [r3, r2]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	2242      	movs	r2, #66	; 0x42
 800479e:	2101      	movs	r1, #1
 80047a0:	5499      	strb	r1, [r3, r2]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2243      	movs	r2, #67	; 0x43
 80047a6:	2101      	movs	r1, #1
 80047a8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2244      	movs	r2, #68	; 0x44
 80047ae:	2101      	movs	r1, #1
 80047b0:	5499      	strb	r1, [r3, r2]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2245      	movs	r2, #69	; 0x45
 80047b6:	2101      	movs	r1, #1
 80047b8:	5499      	strb	r1, [r3, r2]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	2246      	movs	r2, #70	; 0x46
 80047be:	2101      	movs	r1, #1
 80047c0:	5499      	strb	r1, [r3, r2]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2247      	movs	r2, #71	; 0x47
 80047c6:	2101      	movs	r1, #1
 80047c8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	223d      	movs	r2, #61	; 0x3d
 80047ce:	2101      	movs	r1, #1
 80047d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	0018      	movs	r0, r3
 80047d6:	46bd      	mov	sp, r7
 80047d8:	b002      	add	sp, #8
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	223d      	movs	r2, #61	; 0x3d
 80047e8:	5c9b      	ldrb	r3, [r3, r2]
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b01      	cmp	r3, #1
 80047ee:	d001      	beq.n	80047f4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e03c      	b.n	800486e <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	223d      	movs	r2, #61	; 0x3d
 80047f8:	2102      	movs	r1, #2
 80047fa:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	68da      	ldr	r2, [r3, #12]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	2101      	movs	r1, #1
 8004808:	430a      	orrs	r2, r1
 800480a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a19      	ldr	r2, [pc, #100]	; (8004878 <HAL_TIM_Base_Start_IT+0x9c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d009      	beq.n	800482a <HAL_TIM_Base_Start_IT+0x4e>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a18      	ldr	r2, [pc, #96]	; (800487c <HAL_TIM_Base_Start_IT+0xa0>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d004      	beq.n	800482a <HAL_TIM_Base_Start_IT+0x4e>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	4a16      	ldr	r2, [pc, #88]	; (8004880 <HAL_TIM_Base_Start_IT+0xa4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d116      	bne.n	8004858 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	4a14      	ldr	r2, [pc, #80]	; (8004884 <HAL_TIM_Base_Start_IT+0xa8>)
 8004832:	4013      	ands	r3, r2
 8004834:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	2b06      	cmp	r3, #6
 800483a:	d016      	beq.n	800486a <HAL_TIM_Base_Start_IT+0x8e>
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	2380      	movs	r3, #128	; 0x80
 8004840:	025b      	lsls	r3, r3, #9
 8004842:	429a      	cmp	r2, r3
 8004844:	d011      	beq.n	800486a <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	2101      	movs	r1, #1
 8004852:	430a      	orrs	r2, r1
 8004854:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004856:	e008      	b.n	800486a <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	2101      	movs	r1, #1
 8004864:	430a      	orrs	r2, r1
 8004866:	601a      	str	r2, [r3, #0]
 8004868:	e000      	b.n	800486c <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800486a:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800486c:	2300      	movs	r3, #0
}
 800486e:	0018      	movs	r0, r3
 8004870:	46bd      	mov	sp, r7
 8004872:	b004      	add	sp, #16
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	40012c00 	.word	0x40012c00
 800487c:	40000400 	.word	0x40000400
 8004880:	40014000 	.word	0x40014000
 8004884:	00010007 	.word	0x00010007

08004888 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e04a      	b.n	8004930 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	223d      	movs	r2, #61	; 0x3d
 800489e:	5c9b      	ldrb	r3, [r3, r2]
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d107      	bne.n	80048b6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	223c      	movs	r2, #60	; 0x3c
 80048aa:	2100      	movs	r1, #0
 80048ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	0018      	movs	r0, r3
 80048b2:	f7fd fc1b 	bl	80020ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	223d      	movs	r2, #61	; 0x3d
 80048ba:	2102      	movs	r1, #2
 80048bc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	3304      	adds	r3, #4
 80048c6:	0019      	movs	r1, r3
 80048c8:	0010      	movs	r0, r2
 80048ca:	f000 fb2f 	bl	8004f2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2248      	movs	r2, #72	; 0x48
 80048d2:	2101      	movs	r1, #1
 80048d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	223e      	movs	r2, #62	; 0x3e
 80048da:	2101      	movs	r1, #1
 80048dc:	5499      	strb	r1, [r3, r2]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	223f      	movs	r2, #63	; 0x3f
 80048e2:	2101      	movs	r1, #1
 80048e4:	5499      	strb	r1, [r3, r2]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2240      	movs	r2, #64	; 0x40
 80048ea:	2101      	movs	r1, #1
 80048ec:	5499      	strb	r1, [r3, r2]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2241      	movs	r2, #65	; 0x41
 80048f2:	2101      	movs	r1, #1
 80048f4:	5499      	strb	r1, [r3, r2]
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2242      	movs	r2, #66	; 0x42
 80048fa:	2101      	movs	r1, #1
 80048fc:	5499      	strb	r1, [r3, r2]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2243      	movs	r2, #67	; 0x43
 8004902:	2101      	movs	r1, #1
 8004904:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2244      	movs	r2, #68	; 0x44
 800490a:	2101      	movs	r1, #1
 800490c:	5499      	strb	r1, [r3, r2]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2245      	movs	r2, #69	; 0x45
 8004912:	2101      	movs	r1, #1
 8004914:	5499      	strb	r1, [r3, r2]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2246      	movs	r2, #70	; 0x46
 800491a:	2101      	movs	r1, #1
 800491c:	5499      	strb	r1, [r3, r2]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2247      	movs	r2, #71	; 0x47
 8004922:	2101      	movs	r1, #1
 8004924:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	223d      	movs	r2, #61	; 0x3d
 800492a:	2101      	movs	r1, #1
 800492c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	0018      	movs	r0, r3
 8004932:	46bd      	mov	sp, r7
 8004934:	b002      	add	sp, #8
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b086      	sub	sp, #24
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d101      	bne.n	800494c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	e090      	b.n	8004a6e <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	223d      	movs	r2, #61	; 0x3d
 8004950:	5c9b      	ldrb	r3, [r3, r2]
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b00      	cmp	r3, #0
 8004956:	d107      	bne.n	8004968 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	223c      	movs	r2, #60	; 0x3c
 800495c:	2100      	movs	r1, #0
 800495e:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	0018      	movs	r0, r3
 8004964:	f7fd face 	bl	8001f04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	223d      	movs	r2, #61	; 0x3d
 800496c:	2102      	movs	r1, #2
 800496e:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	689a      	ldr	r2, [r3, #8]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	493f      	ldr	r1, [pc, #252]	; (8004a78 <HAL_TIM_Encoder_Init+0x140>)
 800497c:	400a      	ands	r2, r1
 800497e:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	3304      	adds	r3, #4
 8004988:	0019      	movs	r1, r3
 800498a:	0010      	movs	r0, r2
 800498c:	f000 face 	bl	8004f2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699b      	ldr	r3, [r3, #24]
 800499e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6a1b      	ldr	r3, [r3, #32]
 80049a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	697a      	ldr	r2, [r7, #20]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4a31      	ldr	r2, [pc, #196]	; (8004a7c <HAL_TIM_Encoder_Init+0x144>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	021b      	lsls	r3, r3, #8
 80049c4:	4313      	orrs	r3, r2
 80049c6:	693a      	ldr	r2, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	4a2c      	ldr	r2, [pc, #176]	; (8004a80 <HAL_TIM_Encoder_Init+0x148>)
 80049d0:	4013      	ands	r3, r2
 80049d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	4a2b      	ldr	r2, [pc, #172]	; (8004a84 <HAL_TIM_Encoder_Init+0x14c>)
 80049d8:	4013      	ands	r3, r2
 80049da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	68da      	ldr	r2, [r3, #12]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	69db      	ldr	r3, [r3, #28]
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	4313      	orrs	r3, r2
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80049ee:	683b      	ldr	r3, [r7, #0]
 80049f0:	691b      	ldr	r3, [r3, #16]
 80049f2:	011a      	lsls	r2, r3, #4
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	031b      	lsls	r3, r3, #12
 80049fa:	4313      	orrs	r3, r2
 80049fc:	693a      	ldr	r2, [r7, #16]
 80049fe:	4313      	orrs	r3, r2
 8004a00:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	2222      	movs	r2, #34	; 0x22
 8004a06:	4393      	bics	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2288      	movs	r2, #136	; 0x88
 8004a0e:	4393      	bics	r3, r2
 8004a10:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685a      	ldr	r2, [r3, #4]
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	011b      	lsls	r3, r3, #4
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	697a      	ldr	r2, [r7, #20]
 8004a2a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	68fa      	ldr	r2, [r7, #12]
 8004a3a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2248      	movs	r2, #72	; 0x48
 8004a40:	2101      	movs	r1, #1
 8004a42:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	223e      	movs	r2, #62	; 0x3e
 8004a48:	2101      	movs	r1, #1
 8004a4a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	223f      	movs	r2, #63	; 0x3f
 8004a50:	2101      	movs	r1, #1
 8004a52:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2244      	movs	r2, #68	; 0x44
 8004a58:	2101      	movs	r1, #1
 8004a5a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2245      	movs	r2, #69	; 0x45
 8004a60:	2101      	movs	r1, #1
 8004a62:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	223d      	movs	r2, #61	; 0x3d
 8004a68:	2101      	movs	r1, #1
 8004a6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	0018      	movs	r0, r3
 8004a70:	46bd      	mov	sp, r7
 8004a72:	b006      	add	sp, #24
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	46c0      	nop			; (mov r8, r8)
 8004a78:	fffebff8 	.word	0xfffebff8
 8004a7c:	fffffcfc 	.word	0xfffffcfc
 8004a80:	fffff3f3 	.word	0xfffff3f3
 8004a84:	ffff0f0f 	.word	0xffff0f0f

08004a88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	2202      	movs	r2, #2
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d124      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	4013      	ands	r3, r2
 8004aa8:	2b02      	cmp	r3, #2
 8004aaa:	d11d      	bne.n	8004ae8 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	4252      	negs	r2, r2
 8004ab4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	2203      	movs	r2, #3
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	d004      	beq.n	8004ad2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 fa16 	bl	8004efc <HAL_TIM_IC_CaptureCallback>
 8004ad0:	e007      	b.n	8004ae2 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	0018      	movs	r0, r3
 8004ad6:	f000 fa09 	bl	8004eec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 fa15 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2204      	movs	r2, #4
 8004af0:	4013      	ands	r3, r2
 8004af2:	2b04      	cmp	r3, #4
 8004af4:	d125      	bne.n	8004b42 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2204      	movs	r2, #4
 8004afe:	4013      	ands	r3, r2
 8004b00:	2b04      	cmp	r3, #4
 8004b02:	d11e      	bne.n	8004b42 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	2205      	movs	r2, #5
 8004b0a:	4252      	negs	r2, r2
 8004b0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2202      	movs	r2, #2
 8004b12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	23c0      	movs	r3, #192	; 0xc0
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4013      	ands	r3, r2
 8004b20:	d004      	beq.n	8004b2c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	0018      	movs	r0, r3
 8004b26:	f000 f9e9 	bl	8004efc <HAL_TIM_IC_CaptureCallback>
 8004b2a:	e007      	b.n	8004b3c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	0018      	movs	r0, r3
 8004b30:	f000 f9dc 	bl	8004eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	0018      	movs	r0, r3
 8004b38:	f000 f9e8 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2208      	movs	r2, #8
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	2b08      	cmp	r3, #8
 8004b4e:	d124      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	68db      	ldr	r3, [r3, #12]
 8004b56:	2208      	movs	r2, #8
 8004b58:	4013      	ands	r3, r2
 8004b5a:	2b08      	cmp	r3, #8
 8004b5c:	d11d      	bne.n	8004b9a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2209      	movs	r2, #9
 8004b64:	4252      	negs	r2, r2
 8004b66:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2204      	movs	r2, #4
 8004b6c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69db      	ldr	r3, [r3, #28]
 8004b74:	2203      	movs	r2, #3
 8004b76:	4013      	ands	r3, r2
 8004b78:	d004      	beq.n	8004b84 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 f9bd 	bl	8004efc <HAL_TIM_IC_CaptureCallback>
 8004b82:	e007      	b.n	8004b94 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	0018      	movs	r0, r3
 8004b88:	f000 f9b0 	bl	8004eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	0018      	movs	r0, r3
 8004b90:	f000 f9bc 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	2210      	movs	r2, #16
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	2b10      	cmp	r3, #16
 8004ba6:	d125      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	68db      	ldr	r3, [r3, #12]
 8004bae:	2210      	movs	r2, #16
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	2b10      	cmp	r3, #16
 8004bb4:	d11e      	bne.n	8004bf4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	2211      	movs	r2, #17
 8004bbc:	4252      	negs	r2, r2
 8004bbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2208      	movs	r2, #8
 8004bc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	23c0      	movs	r3, #192	; 0xc0
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4013      	ands	r3, r2
 8004bd2:	d004      	beq.n	8004bde <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	0018      	movs	r0, r3
 8004bd8:	f000 f990 	bl	8004efc <HAL_TIM_IC_CaptureCallback>
 8004bdc:	e007      	b.n	8004bee <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	0018      	movs	r0, r3
 8004be2:	f000 f983 	bl	8004eec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	0018      	movs	r0, r3
 8004bea:	f000 f98f 	bl	8004f0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d10f      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d108      	bne.n	8004c22 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	2202      	movs	r2, #2
 8004c16:	4252      	negs	r2, r2
 8004c18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7fc fbf5 	bl	800140c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	691b      	ldr	r3, [r3, #16]
 8004c28:	2280      	movs	r2, #128	; 0x80
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b80      	cmp	r3, #128	; 0x80
 8004c2e:	d10f      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68db      	ldr	r3, [r3, #12]
 8004c36:	2280      	movs	r2, #128	; 0x80
 8004c38:	4013      	ands	r3, r2
 8004c3a:	2b80      	cmp	r3, #128	; 0x80
 8004c3c:	d108      	bne.n	8004c50 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	2281      	movs	r2, #129	; 0x81
 8004c44:	4252      	negs	r2, r2
 8004c46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	0018      	movs	r0, r3
 8004c4c:	f000 fdbe 	bl	80057cc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	691a      	ldr	r2, [r3, #16]
 8004c56:	2380      	movs	r3, #128	; 0x80
 8004c58:	005b      	lsls	r3, r3, #1
 8004c5a:	401a      	ands	r2, r3
 8004c5c:	2380      	movs	r3, #128	; 0x80
 8004c5e:	005b      	lsls	r3, r3, #1
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d10e      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	2280      	movs	r2, #128	; 0x80
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	2b80      	cmp	r3, #128	; 0x80
 8004c70:	d107      	bne.n	8004c82 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a1c      	ldr	r2, [pc, #112]	; (8004ce8 <HAL_TIM_IRQHandler+0x260>)
 8004c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	0018      	movs	r0, r3
 8004c7e:	f000 fdad 	bl	80057dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2240      	movs	r2, #64	; 0x40
 8004c8a:	4013      	ands	r3, r2
 8004c8c:	2b40      	cmp	r3, #64	; 0x40
 8004c8e:	d10f      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	2240      	movs	r2, #64	; 0x40
 8004c98:	4013      	ands	r3, r2
 8004c9a:	2b40      	cmp	r3, #64	; 0x40
 8004c9c:	d108      	bne.n	8004cb0 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2241      	movs	r2, #65	; 0x41
 8004ca4:	4252      	negs	r2, r2
 8004ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	0018      	movs	r0, r3
 8004cac:	f000 f936 	bl	8004f1c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2220      	movs	r2, #32
 8004cb8:	4013      	ands	r3, r2
 8004cba:	2b20      	cmp	r3, #32
 8004cbc:	d10f      	bne.n	8004cde <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	2220      	movs	r2, #32
 8004cc6:	4013      	ands	r3, r2
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d108      	bne.n	8004cde <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2221      	movs	r2, #33	; 0x21
 8004cd2:	4252      	negs	r2, r2
 8004cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	0018      	movs	r0, r3
 8004cda:	f000 fd6f 	bl	80057bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cde:	46c0      	nop			; (mov r8, r8)
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	b002      	add	sp, #8
 8004ce4:	bd80      	pop	{r7, pc}
 8004ce6:	46c0      	nop			; (mov r8, r8)
 8004ce8:	fffffeff 	.word	0xfffffeff

08004cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf8:	2317      	movs	r3, #23
 8004cfa:	18fb      	adds	r3, r7, r3
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	223c      	movs	r2, #60	; 0x3c
 8004d04:	5c9b      	ldrb	r3, [r3, r2]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d101      	bne.n	8004d0e <HAL_TIM_PWM_ConfigChannel+0x22>
 8004d0a:	2302      	movs	r3, #2
 8004d0c:	e0e5      	b.n	8004eda <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	223c      	movs	r2, #60	; 0x3c
 8004d12:	2101      	movs	r1, #1
 8004d14:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2b14      	cmp	r3, #20
 8004d1a:	d900      	bls.n	8004d1e <HAL_TIM_PWM_ConfigChannel+0x32>
 8004d1c:	e0d1      	b.n	8004ec2 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	009a      	lsls	r2, r3, #2
 8004d22:	4b70      	ldr	r3, [pc, #448]	; (8004ee4 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004d24:	18d3      	adds	r3, r2, r3
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	0011      	movs	r1, r2
 8004d32:	0018      	movs	r0, r3
 8004d34:	f000 f970 	bl	8005018 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2108      	movs	r1, #8
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2104      	movs	r1, #4
 8004d54:	438a      	bics	r2, r1
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	619a      	str	r2, [r3, #24]
      break;
 8004d6a:	e0af      	b.n	8004ecc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68ba      	ldr	r2, [r7, #8]
 8004d72:	0011      	movs	r1, r2
 8004d74:	0018      	movs	r0, r3
 8004d76:	f000 f9d9 	bl	800512c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	699a      	ldr	r2, [r3, #24]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	2180      	movs	r1, #128	; 0x80
 8004d86:	0109      	lsls	r1, r1, #4
 8004d88:	430a      	orrs	r2, r1
 8004d8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699a      	ldr	r2, [r3, #24]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4954      	ldr	r1, [pc, #336]	; (8004ee8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d98:	400a      	ands	r2, r1
 8004d9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	6999      	ldr	r1, [r3, #24]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	691b      	ldr	r3, [r3, #16]
 8004da6:	021a      	lsls	r2, r3, #8
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	619a      	str	r2, [r3, #24]
      break;
 8004db0:	e08c      	b.n	8004ecc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	68ba      	ldr	r2, [r7, #8]
 8004db8:	0011      	movs	r1, r2
 8004dba:	0018      	movs	r0, r3
 8004dbc:	f000 fa3a 	bl	8005234 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	69da      	ldr	r2, [r3, #28]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2108      	movs	r1, #8
 8004dcc:	430a      	orrs	r2, r1
 8004dce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69da      	ldr	r2, [r3, #28]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2104      	movs	r1, #4
 8004ddc:	438a      	bics	r2, r1
 8004dde:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	69d9      	ldr	r1, [r3, #28]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691a      	ldr	r2, [r3, #16]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	430a      	orrs	r2, r1
 8004df0:	61da      	str	r2, [r3, #28]
      break;
 8004df2:	e06b      	b.n	8004ecc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68ba      	ldr	r2, [r7, #8]
 8004dfa:	0011      	movs	r1, r2
 8004dfc:	0018      	movs	r0, r3
 8004dfe:	f000 faa1 	bl	8005344 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2180      	movs	r1, #128	; 0x80
 8004e0e:	0109      	lsls	r1, r1, #4
 8004e10:	430a      	orrs	r2, r1
 8004e12:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	69da      	ldr	r2, [r3, #28]
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	4932      	ldr	r1, [pc, #200]	; (8004ee8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e20:	400a      	ands	r2, r1
 8004e22:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69d9      	ldr	r1, [r3, #28]
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	021a      	lsls	r2, r3, #8
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	430a      	orrs	r2, r1
 8004e36:	61da      	str	r2, [r3, #28]
      break;
 8004e38:	e048      	b.n	8004ecc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68ba      	ldr	r2, [r7, #8]
 8004e40:	0011      	movs	r1, r2
 8004e42:	0018      	movs	r0, r3
 8004e44:	f000 fae8 	bl	8005418 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	2108      	movs	r1, #8
 8004e54:	430a      	orrs	r2, r1
 8004e56:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	2104      	movs	r1, #4
 8004e64:	438a      	bics	r2, r1
 8004e66:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	691a      	ldr	r2, [r3, #16]
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	430a      	orrs	r2, r1
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e7a:	e027      	b.n	8004ecc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	68ba      	ldr	r2, [r7, #8]
 8004e82:	0011      	movs	r1, r2
 8004e84:	0018      	movs	r0, r3
 8004e86:	f000 fb27 	bl	80054d8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2180      	movs	r1, #128	; 0x80
 8004e96:	0109      	lsls	r1, r1, #4
 8004e98:	430a      	orrs	r2, r1
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	4910      	ldr	r1, [pc, #64]	; (8004ee8 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004ea8:	400a      	ands	r2, r1
 8004eaa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	021a      	lsls	r2, r3, #8
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	430a      	orrs	r2, r1
 8004ebe:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ec0:	e004      	b.n	8004ecc <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004ec2:	2317      	movs	r3, #23
 8004ec4:	18fb      	adds	r3, r7, r3
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	701a      	strb	r2, [r3, #0]
      break;
 8004eca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	223c      	movs	r2, #60	; 0x3c
 8004ed0:	2100      	movs	r1, #0
 8004ed2:	5499      	strb	r1, [r3, r2]

  return status;
 8004ed4:	2317      	movs	r3, #23
 8004ed6:	18fb      	adds	r3, r7, r3
 8004ed8:	781b      	ldrb	r3, [r3, #0]
}
 8004eda:	0018      	movs	r0, r3
 8004edc:	46bd      	mov	sp, r7
 8004ede:	b006      	add	sp, #24
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	46c0      	nop			; (mov r8, r8)
 8004ee4:	0800b284 	.word	0x0800b284
 8004ee8:	fffffbff 	.word	0xfffffbff

08004eec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b082      	sub	sp, #8
 8004ef0:	af00      	add	r7, sp, #0
 8004ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ef4:	46c0      	nop			; (mov r8, r8)
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	b002      	add	sp, #8
 8004efa:	bd80      	pop	{r7, pc}

08004efc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f04:	46c0      	nop			; (mov r8, r8)
 8004f06:	46bd      	mov	sp, r7
 8004f08:	b002      	add	sp, #8
 8004f0a:	bd80      	pop	{r7, pc}

08004f0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f14:	46c0      	nop			; (mov r8, r8)
 8004f16:	46bd      	mov	sp, r7
 8004f18:	b002      	add	sp, #8
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f24:	46c0      	nop			; (mov r8, r8)
 8004f26:	46bd      	mov	sp, r7
 8004f28:	b002      	add	sp, #8
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b084      	sub	sp, #16
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
 8004f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	4a2f      	ldr	r2, [pc, #188]	; (8004ffc <TIM_Base_SetConfig+0xd0>)
 8004f40:	4293      	cmp	r3, r2
 8004f42:	d003      	beq.n	8004f4c <TIM_Base_SetConfig+0x20>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a2e      	ldr	r2, [pc, #184]	; (8005000 <TIM_Base_SetConfig+0xd4>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d108      	bne.n	8004f5e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2270      	movs	r2, #112	; 0x70
 8004f50:	4393      	bics	r3, r2
 8004f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	68fa      	ldr	r2, [r7, #12]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	4a26      	ldr	r2, [pc, #152]	; (8004ffc <TIM_Base_SetConfig+0xd0>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d013      	beq.n	8004f8e <TIM_Base_SetConfig+0x62>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a25      	ldr	r2, [pc, #148]	; (8005000 <TIM_Base_SetConfig+0xd4>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d00f      	beq.n	8004f8e <TIM_Base_SetConfig+0x62>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a24      	ldr	r2, [pc, #144]	; (8005004 <TIM_Base_SetConfig+0xd8>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d00b      	beq.n	8004f8e <TIM_Base_SetConfig+0x62>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a23      	ldr	r2, [pc, #140]	; (8005008 <TIM_Base_SetConfig+0xdc>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d007      	beq.n	8004f8e <TIM_Base_SetConfig+0x62>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a22      	ldr	r2, [pc, #136]	; (800500c <TIM_Base_SetConfig+0xe0>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d003      	beq.n	8004f8e <TIM_Base_SetConfig+0x62>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a21      	ldr	r2, [pc, #132]	; (8005010 <TIM_Base_SetConfig+0xe4>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d108      	bne.n	8004fa0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <TIM_Base_SetConfig+0xe8>)
 8004f92:	4013      	ands	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	68db      	ldr	r3, [r3, #12]
 8004f9a:	68fa      	ldr	r2, [r7, #12]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2280      	movs	r2, #128	; 0x80
 8004fa4:	4393      	bics	r3, r2
 8004fa6:	001a      	movs	r2, r3
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	695b      	ldr	r3, [r3, #20]
 8004fac:	4313      	orrs	r3, r2
 8004fae:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	689a      	ldr	r2, [r3, #8]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a0c      	ldr	r2, [pc, #48]	; (8004ffc <TIM_Base_SetConfig+0xd0>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d00b      	beq.n	8004fe6 <TIM_Base_SetConfig+0xba>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a0d      	ldr	r2, [pc, #52]	; (8005008 <TIM_Base_SetConfig+0xdc>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d007      	beq.n	8004fe6 <TIM_Base_SetConfig+0xba>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a0c      	ldr	r2, [pc, #48]	; (800500c <TIM_Base_SetConfig+0xe0>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d003      	beq.n	8004fe6 <TIM_Base_SetConfig+0xba>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	4a0b      	ldr	r2, [pc, #44]	; (8005010 <TIM_Base_SetConfig+0xe4>)
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d103      	bne.n	8004fee <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	691a      	ldr	r2, [r3, #16]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	615a      	str	r2, [r3, #20]
}
 8004ff4:	46c0      	nop			; (mov r8, r8)
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	b004      	add	sp, #16
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	40012c00 	.word	0x40012c00
 8005000:	40000400 	.word	0x40000400
 8005004:	40002000 	.word	0x40002000
 8005008:	40014000 	.word	0x40014000
 800500c:	40014400 	.word	0x40014400
 8005010:	40014800 	.word	0x40014800
 8005014:	fffffcff 	.word	0xfffffcff

08005018 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b086      	sub	sp, #24
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	2201      	movs	r2, #1
 8005028:	4393      	bics	r3, r2
 800502a:	001a      	movs	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a1b      	ldr	r3, [r3, #32]
 8005034:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685b      	ldr	r3, [r3, #4]
 800503a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	4a32      	ldr	r2, [pc, #200]	; (8005110 <TIM_OC1_SetConfig+0xf8>)
 8005046:	4013      	ands	r3, r2
 8005048:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	2203      	movs	r2, #3
 800504e:	4393      	bics	r3, r2
 8005050:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	4313      	orrs	r3, r2
 800505a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	2202      	movs	r2, #2
 8005060:	4393      	bics	r3, r2
 8005062:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	4a28      	ldr	r2, [pc, #160]	; (8005114 <TIM_OC1_SetConfig+0xfc>)
 8005072:	4293      	cmp	r3, r2
 8005074:	d00b      	beq.n	800508e <TIM_OC1_SetConfig+0x76>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a27      	ldr	r2, [pc, #156]	; (8005118 <TIM_OC1_SetConfig+0x100>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d007      	beq.n	800508e <TIM_OC1_SetConfig+0x76>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	4a26      	ldr	r2, [pc, #152]	; (800511c <TIM_OC1_SetConfig+0x104>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d003      	beq.n	800508e <TIM_OC1_SetConfig+0x76>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <TIM_OC1_SetConfig+0x108>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d10c      	bne.n	80050a8 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2208      	movs	r2, #8
 8005092:	4393      	bics	r3, r2
 8005094:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	68db      	ldr	r3, [r3, #12]
 800509a:	697a      	ldr	r2, [r7, #20]
 800509c:	4313      	orrs	r3, r2
 800509e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80050a0:	697b      	ldr	r3, [r7, #20]
 80050a2:	2204      	movs	r2, #4
 80050a4:	4393      	bics	r3, r2
 80050a6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	4a1a      	ldr	r2, [pc, #104]	; (8005114 <TIM_OC1_SetConfig+0xfc>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d00b      	beq.n	80050c8 <TIM_OC1_SetConfig+0xb0>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	4a19      	ldr	r2, [pc, #100]	; (8005118 <TIM_OC1_SetConfig+0x100>)
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d007      	beq.n	80050c8 <TIM_OC1_SetConfig+0xb0>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a18      	ldr	r2, [pc, #96]	; (800511c <TIM_OC1_SetConfig+0x104>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d003      	beq.n	80050c8 <TIM_OC1_SetConfig+0xb0>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4a17      	ldr	r2, [pc, #92]	; (8005120 <TIM_OC1_SetConfig+0x108>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d111      	bne.n	80050ec <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4a16      	ldr	r2, [pc, #88]	; (8005124 <TIM_OC1_SetConfig+0x10c>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <TIM_OC1_SetConfig+0x110>)
 80050d4:	4013      	ands	r3, r2
 80050d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	695b      	ldr	r3, [r3, #20]
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4313      	orrs	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	699b      	ldr	r3, [r3, #24]
 80050e6:	693a      	ldr	r2, [r7, #16]
 80050e8:	4313      	orrs	r3, r2
 80050ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685a      	ldr	r2, [r3, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	697a      	ldr	r2, [r7, #20]
 8005104:	621a      	str	r2, [r3, #32]
}
 8005106:	46c0      	nop			; (mov r8, r8)
 8005108:	46bd      	mov	sp, r7
 800510a:	b006      	add	sp, #24
 800510c:	bd80      	pop	{r7, pc}
 800510e:	46c0      	nop			; (mov r8, r8)
 8005110:	fffeff8f 	.word	0xfffeff8f
 8005114:	40012c00 	.word	0x40012c00
 8005118:	40014000 	.word	0x40014000
 800511c:	40014400 	.word	0x40014400
 8005120:	40014800 	.word	0x40014800
 8005124:	fffffeff 	.word	0xfffffeff
 8005128:	fffffdff 	.word	0xfffffdff

0800512c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b086      	sub	sp, #24
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6a1b      	ldr	r3, [r3, #32]
 800513a:	2210      	movs	r2, #16
 800513c:	4393      	bics	r3, r2
 800513e:	001a      	movs	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	6a1b      	ldr	r3, [r3, #32]
 8005148:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	685b      	ldr	r3, [r3, #4]
 800514e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	4a2e      	ldr	r2, [pc, #184]	; (8005214 <TIM_OC2_SetConfig+0xe8>)
 800515a:	4013      	ands	r3, r2
 800515c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	4a2d      	ldr	r2, [pc, #180]	; (8005218 <TIM_OC2_SetConfig+0xec>)
 8005162:	4013      	ands	r3, r2
 8005164:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	021b      	lsls	r3, r3, #8
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	4313      	orrs	r3, r2
 8005170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2220      	movs	r2, #32
 8005176:	4393      	bics	r3, r2
 8005178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	011b      	lsls	r3, r3, #4
 8005180:	697a      	ldr	r2, [r7, #20]
 8005182:	4313      	orrs	r3, r2
 8005184:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a24      	ldr	r2, [pc, #144]	; (800521c <TIM_OC2_SetConfig+0xf0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d10d      	bne.n	80051aa <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	2280      	movs	r2, #128	; 0x80
 8005192:	4393      	bics	r3, r2
 8005194:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	011b      	lsls	r3, r3, #4
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	4313      	orrs	r3, r2
 80051a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	2240      	movs	r2, #64	; 0x40
 80051a6:	4393      	bics	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4a1b      	ldr	r2, [pc, #108]	; (800521c <TIM_OC2_SetConfig+0xf0>)
 80051ae:	4293      	cmp	r3, r2
 80051b0:	d00b      	beq.n	80051ca <TIM_OC2_SetConfig+0x9e>
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a1a      	ldr	r2, [pc, #104]	; (8005220 <TIM_OC2_SetConfig+0xf4>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d007      	beq.n	80051ca <TIM_OC2_SetConfig+0x9e>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	4a19      	ldr	r2, [pc, #100]	; (8005224 <TIM_OC2_SetConfig+0xf8>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d003      	beq.n	80051ca <TIM_OC2_SetConfig+0x9e>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	4a18      	ldr	r2, [pc, #96]	; (8005228 <TIM_OC2_SetConfig+0xfc>)
 80051c6:	4293      	cmp	r3, r2
 80051c8:	d113      	bne.n	80051f2 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	4a17      	ldr	r2, [pc, #92]	; (800522c <TIM_OC2_SetConfig+0x100>)
 80051ce:	4013      	ands	r3, r2
 80051d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80051d2:	693b      	ldr	r3, [r7, #16]
 80051d4:	4a16      	ldr	r2, [pc, #88]	; (8005230 <TIM_OC2_SetConfig+0x104>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	4313      	orrs	r3, r2
 80051e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	699b      	ldr	r3, [r3, #24]
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	693a      	ldr	r2, [r7, #16]
 80051ee:	4313      	orrs	r3, r2
 80051f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	685a      	ldr	r2, [r3, #4]
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	697a      	ldr	r2, [r7, #20]
 800520a:	621a      	str	r2, [r3, #32]
}
 800520c:	46c0      	nop			; (mov r8, r8)
 800520e:	46bd      	mov	sp, r7
 8005210:	b006      	add	sp, #24
 8005212:	bd80      	pop	{r7, pc}
 8005214:	feff8fff 	.word	0xfeff8fff
 8005218:	fffffcff 	.word	0xfffffcff
 800521c:	40012c00 	.word	0x40012c00
 8005220:	40014000 	.word	0x40014000
 8005224:	40014400 	.word	0x40014400
 8005228:	40014800 	.word	0x40014800
 800522c:	fffffbff 	.word	0xfffffbff
 8005230:	fffff7ff 	.word	0xfffff7ff

08005234 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b086      	sub	sp, #24
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6a1b      	ldr	r3, [r3, #32]
 8005242:	4a35      	ldr	r2, [pc, #212]	; (8005318 <TIM_OC3_SetConfig+0xe4>)
 8005244:	401a      	ands	r2, r3
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6a1b      	ldr	r3, [r3, #32]
 800524e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	69db      	ldr	r3, [r3, #28]
 800525a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	4a2f      	ldr	r2, [pc, #188]	; (800531c <TIM_OC3_SetConfig+0xe8>)
 8005260:	4013      	ands	r3, r2
 8005262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	2203      	movs	r2, #3
 8005268:	4393      	bics	r3, r2
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	4313      	orrs	r3, r2
 8005274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	4a29      	ldr	r2, [pc, #164]	; (8005320 <TIM_OC3_SetConfig+0xec>)
 800527a:	4013      	ands	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	021b      	lsls	r3, r3, #8
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	4313      	orrs	r3, r2
 8005288:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	4a25      	ldr	r2, [pc, #148]	; (8005324 <TIM_OC3_SetConfig+0xf0>)
 800528e:	4293      	cmp	r3, r2
 8005290:	d10d      	bne.n	80052ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	4a24      	ldr	r2, [pc, #144]	; (8005328 <TIM_OC3_SetConfig+0xf4>)
 8005296:	4013      	ands	r3, r2
 8005298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800529a:	683b      	ldr	r3, [r7, #0]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	021b      	lsls	r3, r3, #8
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4a20      	ldr	r2, [pc, #128]	; (800532c <TIM_OC3_SetConfig+0xf8>)
 80052aa:	4013      	ands	r3, r2
 80052ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a1c      	ldr	r2, [pc, #112]	; (8005324 <TIM_OC3_SetConfig+0xf0>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d00b      	beq.n	80052ce <TIM_OC3_SetConfig+0x9a>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a1d      	ldr	r2, [pc, #116]	; (8005330 <TIM_OC3_SetConfig+0xfc>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d007      	beq.n	80052ce <TIM_OC3_SetConfig+0x9a>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1c      	ldr	r2, [pc, #112]	; (8005334 <TIM_OC3_SetConfig+0x100>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d003      	beq.n	80052ce <TIM_OC3_SetConfig+0x9a>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a1b      	ldr	r2, [pc, #108]	; (8005338 <TIM_OC3_SetConfig+0x104>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d113      	bne.n	80052f6 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	4a1a      	ldr	r2, [pc, #104]	; (800533c <TIM_OC3_SetConfig+0x108>)
 80052d2:	4013      	ands	r3, r2
 80052d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	4a19      	ldr	r2, [pc, #100]	; (8005340 <TIM_OC3_SetConfig+0x10c>)
 80052da:	4013      	ands	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	011b      	lsls	r3, r3, #4
 80052e4:	693a      	ldr	r2, [r7, #16]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	011b      	lsls	r3, r3, #4
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	4313      	orrs	r3, r2
 80052f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	693a      	ldr	r2, [r7, #16]
 80052fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	68fa      	ldr	r2, [r7, #12]
 8005300:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685a      	ldr	r2, [r3, #4]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	697a      	ldr	r2, [r7, #20]
 800530e:	621a      	str	r2, [r3, #32]
}
 8005310:	46c0      	nop			; (mov r8, r8)
 8005312:	46bd      	mov	sp, r7
 8005314:	b006      	add	sp, #24
 8005316:	bd80      	pop	{r7, pc}
 8005318:	fffffeff 	.word	0xfffffeff
 800531c:	fffeff8f 	.word	0xfffeff8f
 8005320:	fffffdff 	.word	0xfffffdff
 8005324:	40012c00 	.word	0x40012c00
 8005328:	fffff7ff 	.word	0xfffff7ff
 800532c:	fffffbff 	.word	0xfffffbff
 8005330:	40014000 	.word	0x40014000
 8005334:	40014400 	.word	0x40014400
 8005338:	40014800 	.word	0x40014800
 800533c:	ffffefff 	.word	0xffffefff
 8005340:	ffffdfff 	.word	0xffffdfff

08005344 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b086      	sub	sp, #24
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a1b      	ldr	r3, [r3, #32]
 8005352:	4a28      	ldr	r2, [pc, #160]	; (80053f4 <TIM_OC4_SetConfig+0xb0>)
 8005354:	401a      	ands	r2, r3
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6a1b      	ldr	r3, [r3, #32]
 800535e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	69db      	ldr	r3, [r3, #28]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	4a22      	ldr	r2, [pc, #136]	; (80053f8 <TIM_OC4_SetConfig+0xb4>)
 8005370:	4013      	ands	r3, r2
 8005372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	4a21      	ldr	r2, [pc, #132]	; (80053fc <TIM_OC4_SetConfig+0xb8>)
 8005378:	4013      	ands	r3, r2
 800537a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	021b      	lsls	r3, r3, #8
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	4313      	orrs	r3, r2
 8005386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	4a1d      	ldr	r2, [pc, #116]	; (8005400 <TIM_OC4_SetConfig+0xbc>)
 800538c:	4013      	ands	r3, r2
 800538e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	689b      	ldr	r3, [r3, #8]
 8005394:	031b      	lsls	r3, r3, #12
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	4313      	orrs	r3, r2
 800539a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a19      	ldr	r2, [pc, #100]	; (8005404 <TIM_OC4_SetConfig+0xc0>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_OC4_SetConfig+0x78>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a18      	ldr	r2, [pc, #96]	; (8005408 <TIM_OC4_SetConfig+0xc4>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_OC4_SetConfig+0x78>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a17      	ldr	r2, [pc, #92]	; (800540c <TIM_OC4_SetConfig+0xc8>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_OC4_SetConfig+0x78>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a16      	ldr	r2, [pc, #88]	; (8005410 <TIM_OC4_SetConfig+0xcc>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d109      	bne.n	80053d0 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	4a15      	ldr	r2, [pc, #84]	; (8005414 <TIM_OC4_SetConfig+0xd0>)
 80053c0:	4013      	ands	r3, r2
 80053c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	695b      	ldr	r3, [r3, #20]
 80053c8:	019b      	lsls	r3, r3, #6
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68fa      	ldr	r2, [r7, #12]
 80053da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	685a      	ldr	r2, [r3, #4]
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	693a      	ldr	r2, [r7, #16]
 80053e8:	621a      	str	r2, [r3, #32]
}
 80053ea:	46c0      	nop			; (mov r8, r8)
 80053ec:	46bd      	mov	sp, r7
 80053ee:	b006      	add	sp, #24
 80053f0:	bd80      	pop	{r7, pc}
 80053f2:	46c0      	nop			; (mov r8, r8)
 80053f4:	ffffefff 	.word	0xffffefff
 80053f8:	feff8fff 	.word	0xfeff8fff
 80053fc:	fffffcff 	.word	0xfffffcff
 8005400:	ffffdfff 	.word	0xffffdfff
 8005404:	40012c00 	.word	0x40012c00
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800
 8005414:	ffffbfff 	.word	0xffffbfff

08005418 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b086      	sub	sp, #24
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
 8005420:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a1b      	ldr	r3, [r3, #32]
 8005426:	4a25      	ldr	r2, [pc, #148]	; (80054bc <TIM_OC5_SetConfig+0xa4>)
 8005428:	401a      	ands	r2, r3
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a1b      	ldr	r3, [r3, #32]
 8005432:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	685b      	ldr	r3, [r3, #4]
 8005438:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	4a1f      	ldr	r2, [pc, #124]	; (80054c0 <TIM_OC5_SetConfig+0xa8>)
 8005444:	4013      	ands	r3, r2
 8005446:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	4313      	orrs	r3, r2
 8005450:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	4a1b      	ldr	r2, [pc, #108]	; (80054c4 <TIM_OC5_SetConfig+0xac>)
 8005456:	4013      	ands	r3, r2
 8005458:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689b      	ldr	r3, [r3, #8]
 800545e:	041b      	lsls	r3, r3, #16
 8005460:	693a      	ldr	r2, [r7, #16]
 8005462:	4313      	orrs	r3, r2
 8005464:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	4a17      	ldr	r2, [pc, #92]	; (80054c8 <TIM_OC5_SetConfig+0xb0>)
 800546a:	4293      	cmp	r3, r2
 800546c:	d00b      	beq.n	8005486 <TIM_OC5_SetConfig+0x6e>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	4a16      	ldr	r2, [pc, #88]	; (80054cc <TIM_OC5_SetConfig+0xb4>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d007      	beq.n	8005486 <TIM_OC5_SetConfig+0x6e>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4a15      	ldr	r2, [pc, #84]	; (80054d0 <TIM_OC5_SetConfig+0xb8>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d003      	beq.n	8005486 <TIM_OC5_SetConfig+0x6e>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	4a14      	ldr	r2, [pc, #80]	; (80054d4 <TIM_OC5_SetConfig+0xbc>)
 8005482:	4293      	cmp	r3, r2
 8005484:	d109      	bne.n	800549a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	4a0c      	ldr	r2, [pc, #48]	; (80054bc <TIM_OC5_SetConfig+0xa4>)
 800548a:	4013      	ands	r3, r2
 800548c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	021b      	lsls	r3, r3, #8
 8005494:	697a      	ldr	r2, [r7, #20]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	697a      	ldr	r2, [r7, #20]
 800549e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80054a6:	683b      	ldr	r3, [r7, #0]
 80054a8:	685a      	ldr	r2, [r3, #4]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	621a      	str	r2, [r3, #32]
}
 80054b4:	46c0      	nop			; (mov r8, r8)
 80054b6:	46bd      	mov	sp, r7
 80054b8:	b006      	add	sp, #24
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	fffeffff 	.word	0xfffeffff
 80054c0:	fffeff8f 	.word	0xfffeff8f
 80054c4:	fffdffff 	.word	0xfffdffff
 80054c8:	40012c00 	.word	0x40012c00
 80054cc:	40014000 	.word	0x40014000
 80054d0:	40014400 	.word	0x40014400
 80054d4:	40014800 	.word	0x40014800

080054d8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	4a26      	ldr	r2, [pc, #152]	; (8005580 <TIM_OC6_SetConfig+0xa8>)
 80054e8:	401a      	ands	r2, r3
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6a1b      	ldr	r3, [r3, #32]
 80054f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	4a20      	ldr	r2, [pc, #128]	; (8005584 <TIM_OC6_SetConfig+0xac>)
 8005504:	4013      	ands	r3, r2
 8005506:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	021b      	lsls	r3, r3, #8
 800550e:	68fa      	ldr	r2, [r7, #12]
 8005510:	4313      	orrs	r3, r2
 8005512:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	4a1c      	ldr	r2, [pc, #112]	; (8005588 <TIM_OC6_SetConfig+0xb0>)
 8005518:	4013      	ands	r3, r2
 800551a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	051b      	lsls	r3, r3, #20
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	4313      	orrs	r3, r2
 8005526:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a18      	ldr	r2, [pc, #96]	; (800558c <TIM_OC6_SetConfig+0xb4>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d00b      	beq.n	8005548 <TIM_OC6_SetConfig+0x70>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	4a17      	ldr	r2, [pc, #92]	; (8005590 <TIM_OC6_SetConfig+0xb8>)
 8005534:	4293      	cmp	r3, r2
 8005536:	d007      	beq.n	8005548 <TIM_OC6_SetConfig+0x70>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	4a16      	ldr	r2, [pc, #88]	; (8005594 <TIM_OC6_SetConfig+0xbc>)
 800553c:	4293      	cmp	r3, r2
 800553e:	d003      	beq.n	8005548 <TIM_OC6_SetConfig+0x70>
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4a15      	ldr	r2, [pc, #84]	; (8005598 <TIM_OC6_SetConfig+0xc0>)
 8005544:	4293      	cmp	r3, r2
 8005546:	d109      	bne.n	800555c <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	4a14      	ldr	r2, [pc, #80]	; (800559c <TIM_OC6_SetConfig+0xc4>)
 800554c:	4013      	ands	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	695b      	ldr	r3, [r3, #20]
 8005554:	029b      	lsls	r3, r3, #10
 8005556:	697a      	ldr	r2, [r7, #20]
 8005558:	4313      	orrs	r3, r2
 800555a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	697a      	ldr	r2, [r7, #20]
 8005560:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	68fa      	ldr	r2, [r7, #12]
 8005566:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	685a      	ldr	r2, [r3, #4]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	693a      	ldr	r2, [r7, #16]
 8005574:	621a      	str	r2, [r3, #32]
}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	46bd      	mov	sp, r7
 800557a:	b006      	add	sp, #24
 800557c:	bd80      	pop	{r7, pc}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	ffefffff 	.word	0xffefffff
 8005584:	feff8fff 	.word	0xfeff8fff
 8005588:	ffdfffff 	.word	0xffdfffff
 800558c:	40012c00 	.word	0x40012c00
 8005590:	40014000 	.word	0x40014000
 8005594:	40014400 	.word	0x40014400
 8005598:	40014800 	.word	0x40014800
 800559c:	fffbffff 	.word	0xfffbffff

080055a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	223c      	movs	r2, #60	; 0x3c
 80055ae:	5c9b      	ldrb	r3, [r3, r2]
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d101      	bne.n	80055b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055b4:	2302      	movs	r3, #2
 80055b6:	e04f      	b.n	8005658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	223c      	movs	r2, #60	; 0x3c
 80055bc:	2101      	movs	r1, #1
 80055be:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	223d      	movs	r2, #61	; 0x3d
 80055c4:	2102      	movs	r1, #2
 80055c6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	685b      	ldr	r3, [r3, #4]
 80055ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	4a20      	ldr	r2, [pc, #128]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80055de:	4293      	cmp	r3, r2
 80055e0:	d108      	bne.n	80055f4 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	4a1f      	ldr	r2, [pc, #124]	; (8005664 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80055e6:	4013      	ands	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	68fa      	ldr	r2, [r7, #12]
 80055f0:	4313      	orrs	r3, r2
 80055f2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2270      	movs	r2, #112	; 0x70
 80055f8:	4393      	bics	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68fa      	ldr	r2, [r7, #12]
 8005602:	4313      	orrs	r3, r2
 8005604:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	68fa      	ldr	r2, [r7, #12]
 800560c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a13      	ldr	r2, [pc, #76]	; (8005660 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d009      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a12      	ldr	r2, [pc, #72]	; (8005668 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a11      	ldr	r2, [pc, #68]	; (800566c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005628:	4293      	cmp	r3, r2
 800562a:	d10c      	bne.n	8005646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2280      	movs	r2, #128	; 0x80
 8005630:	4393      	bics	r3, r2
 8005632:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005634:	683b      	ldr	r3, [r7, #0]
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	68ba      	ldr	r2, [r7, #8]
 800563a:	4313      	orrs	r3, r2
 800563c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68ba      	ldr	r2, [r7, #8]
 8005644:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	223d      	movs	r2, #61	; 0x3d
 800564a:	2101      	movs	r1, #1
 800564c:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	223c      	movs	r2, #60	; 0x3c
 8005652:	2100      	movs	r1, #0
 8005654:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005656:	2300      	movs	r3, #0
}
 8005658:	0018      	movs	r0, r3
 800565a:	46bd      	mov	sp, r7
 800565c:	b004      	add	sp, #16
 800565e:	bd80      	pop	{r7, pc}
 8005660:	40012c00 	.word	0x40012c00
 8005664:	ff0fffff 	.word	0xff0fffff
 8005668:	40000400 	.word	0x40000400
 800566c:	40014000 	.word	0x40014000

08005670 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005670:	b580      	push	{r7, lr}
 8005672:	b084      	sub	sp, #16
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800567a:	2300      	movs	r3, #0
 800567c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	223c      	movs	r2, #60	; 0x3c
 8005682:	5c9b      	ldrb	r3, [r3, r2]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d101      	bne.n	800568c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005688:	2302      	movs	r3, #2
 800568a:	e079      	b.n	8005780 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	223c      	movs	r2, #60	; 0x3c
 8005690:	2101      	movs	r1, #1
 8005692:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	22ff      	movs	r2, #255	; 0xff
 8005698:	4393      	bics	r3, r2
 800569a:	001a      	movs	r2, r3
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4313      	orrs	r3, r2
 80056a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4a38      	ldr	r2, [pc, #224]	; (8005788 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80056a8:	401a      	ands	r2, r3
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	4313      	orrs	r3, r2
 80056b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	4a35      	ldr	r2, [pc, #212]	; (800578c <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 80056b6:	401a      	ands	r2, r3
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4313      	orrs	r3, r2
 80056be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	4a33      	ldr	r2, [pc, #204]	; (8005790 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 80056c4:	401a      	ands	r2, r3
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a30      	ldr	r2, [pc, #192]	; (8005794 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80056d2:	401a      	ands	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80056e0:	401a      	ands	r2, r3
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	695b      	ldr	r3, [r3, #20]
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	4a2b      	ldr	r2, [pc, #172]	; (800579c <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80056ee:	401a      	ands	r2, r3
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f4:	4313      	orrs	r3, r2
 80056f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	4a29      	ldr	r2, [pc, #164]	; (80057a0 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80056fc:	401a      	ands	r2, r3
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	699b      	ldr	r3, [r3, #24]
 8005702:	041b      	lsls	r3, r3, #16
 8005704:	4313      	orrs	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a25      	ldr	r2, [pc, #148]	; (80057a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d106      	bne.n	8005720 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	4a24      	ldr	r2, [pc, #144]	; (80057a8 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005716:	401a      	ands	r2, r3
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	69db      	ldr	r3, [r3, #28]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4a1f      	ldr	r2, [pc, #124]	; (80057a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005726:	4293      	cmp	r3, r2
 8005728:	d121      	bne.n	800576e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4a1f      	ldr	r2, [pc, #124]	; (80057ac <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800572e:	401a      	ands	r2, r3
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005734:	051b      	lsls	r3, r3, #20
 8005736:	4313      	orrs	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	4a1c      	ldr	r2, [pc, #112]	; (80057b0 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 800573e:	401a      	ands	r2, r3
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	6a1b      	ldr	r3, [r3, #32]
 8005744:	4313      	orrs	r3, r2
 8005746:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4a1a      	ldr	r2, [pc, #104]	; (80057b4 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 800574c:	401a      	ands	r2, r3
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	4313      	orrs	r3, r2
 8005754:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a12      	ldr	r2, [pc, #72]	; (80057a4 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d106      	bne.n	800576e <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4a15      	ldr	r2, [pc, #84]	; (80057b8 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005764:	401a      	ands	r2, r3
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800576a:	4313      	orrs	r3, r2
 800576c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	223c      	movs	r2, #60	; 0x3c
 800577a:	2100      	movs	r1, #0
 800577c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800577e:	2300      	movs	r3, #0
}
 8005780:	0018      	movs	r0, r3
 8005782:	46bd      	mov	sp, r7
 8005784:	b004      	add	sp, #16
 8005786:	bd80      	pop	{r7, pc}
 8005788:	fffffcff 	.word	0xfffffcff
 800578c:	fffffbff 	.word	0xfffffbff
 8005790:	fffff7ff 	.word	0xfffff7ff
 8005794:	ffffefff 	.word	0xffffefff
 8005798:	ffffdfff 	.word	0xffffdfff
 800579c:	ffffbfff 	.word	0xffffbfff
 80057a0:	fff0ffff 	.word	0xfff0ffff
 80057a4:	40012c00 	.word	0x40012c00
 80057a8:	efffffff 	.word	0xefffffff
 80057ac:	ff0fffff 	.word	0xff0fffff
 80057b0:	feffffff 	.word	0xfeffffff
 80057b4:	fdffffff 	.word	0xfdffffff
 80057b8:	dfffffff 	.word	0xdfffffff

080057bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80057bc:	b580      	push	{r7, lr}
 80057be:	b082      	sub	sp, #8
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80057c4:	46c0      	nop			; (mov r8, r8)
 80057c6:	46bd      	mov	sp, r7
 80057c8:	b002      	add	sp, #8
 80057ca:	bd80      	pop	{r7, pc}

080057cc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80057d4:	46c0      	nop			; (mov r8, r8)
 80057d6:	46bd      	mov	sp, r7
 80057d8:	b002      	add	sp, #8
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80057e4:	46c0      	nop			; (mov r8, r8)
 80057e6:	46bd      	mov	sp, r7
 80057e8:	b002      	add	sp, #8
 80057ea:	bd80      	pop	{r7, pc}

080057ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057ec:	b580      	push	{r7, lr}
 80057ee:	b082      	sub	sp, #8
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d101      	bne.n	80057fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
 80057fc:	e046      	b.n	800588c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2288      	movs	r2, #136	; 0x88
 8005802:	589b      	ldr	r3, [r3, r2]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d107      	bne.n	8005818 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2284      	movs	r2, #132	; 0x84
 800580c:	2100      	movs	r1, #0
 800580e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0018      	movs	r0, r3
 8005814:	f7fc fdca 	bl	80023ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2288      	movs	r2, #136	; 0x88
 800581c:	2124      	movs	r1, #36	; 0x24
 800581e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2101      	movs	r1, #1
 800582c:	438a      	bics	r2, r1
 800582e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	0018      	movs	r0, r3
 8005834:	f000 fbba 	bl	8005fac <UART_SetConfig>
 8005838:	0003      	movs	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d101      	bne.n	8005842 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e024      	b.n	800588c <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005846:	2b00      	cmp	r3, #0
 8005848:	d003      	beq.n	8005852 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0018      	movs	r0, r3
 800584e:	f000 fd51 	bl	80062f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	490d      	ldr	r1, [pc, #52]	; (8005894 <HAL_UART_Init+0xa8>)
 800585e:	400a      	ands	r2, r1
 8005860:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	689a      	ldr	r2, [r3, #8]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	212a      	movs	r1, #42	; 0x2a
 800586e:	438a      	bics	r2, r1
 8005870:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2101      	movs	r1, #1
 800587e:	430a      	orrs	r2, r1
 8005880:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	0018      	movs	r0, r3
 8005886:	f000 fde9 	bl	800645c <UART_CheckIdleState>
 800588a:	0003      	movs	r3, r0
}
 800588c:	0018      	movs	r0, r3
 800588e:	46bd      	mov	sp, r7
 8005890:	b002      	add	sp, #8
 8005892:	bd80      	pop	{r7, pc}
 8005894:	ffffb7ff 	.word	0xffffb7ff

08005898 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08a      	sub	sp, #40	; 0x28
 800589c:	af02      	add	r7, sp, #8
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	603b      	str	r3, [r7, #0]
 80058a4:	1dbb      	adds	r3, r7, #6
 80058a6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2288      	movs	r2, #136	; 0x88
 80058ac:	589b      	ldr	r3, [r3, r2]
 80058ae:	2b20      	cmp	r3, #32
 80058b0:	d000      	beq.n	80058b4 <HAL_UART_Transmit+0x1c>
 80058b2:	e088      	b.n	80059c6 <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_UART_Transmit+0x2a>
 80058ba:	1dbb      	adds	r3, r7, #6
 80058bc:	881b      	ldrh	r3, [r3, #0]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d101      	bne.n	80058c6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e080      	b.n	80059c8 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	689a      	ldr	r2, [r3, #8]
 80058ca:	2380      	movs	r3, #128	; 0x80
 80058cc:	015b      	lsls	r3, r3, #5
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d109      	bne.n	80058e6 <HAL_UART_Transmit+0x4e>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	691b      	ldr	r3, [r3, #16]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d105      	bne.n	80058e6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2201      	movs	r2, #1
 80058de:	4013      	ands	r3, r2
 80058e0:	d001      	beq.n	80058e6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80058e2:	2301      	movs	r3, #1
 80058e4:	e070      	b.n	80059c8 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2290      	movs	r2, #144	; 0x90
 80058ea:	2100      	movs	r1, #0
 80058ec:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2288      	movs	r2, #136	; 0x88
 80058f2:	2121      	movs	r1, #33	; 0x21
 80058f4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058f6:	f7fc fe7d 	bl	80025f4 <HAL_GetTick>
 80058fa:	0003      	movs	r3, r0
 80058fc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	1dba      	adds	r2, r7, #6
 8005902:	2154      	movs	r1, #84	; 0x54
 8005904:	8812      	ldrh	r2, [r2, #0]
 8005906:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	1dba      	adds	r2, r7, #6
 800590c:	2156      	movs	r1, #86	; 0x56
 800590e:	8812      	ldrh	r2, [r2, #0]
 8005910:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	689a      	ldr	r2, [r3, #8]
 8005916:	2380      	movs	r3, #128	; 0x80
 8005918:	015b      	lsls	r3, r3, #5
 800591a:	429a      	cmp	r2, r3
 800591c:	d108      	bne.n	8005930 <HAL_UART_Transmit+0x98>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	691b      	ldr	r3, [r3, #16]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d104      	bne.n	8005930 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005926:	2300      	movs	r3, #0
 8005928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	e003      	b.n	8005938 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005930:	68bb      	ldr	r3, [r7, #8]
 8005932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005938:	e02c      	b.n	8005994 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800593a:	697a      	ldr	r2, [r7, #20]
 800593c:	68f8      	ldr	r0, [r7, #12]
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	9300      	str	r3, [sp, #0]
 8005942:	0013      	movs	r3, r2
 8005944:	2200      	movs	r2, #0
 8005946:	2180      	movs	r1, #128	; 0x80
 8005948:	f000 fdd6 	bl	80064f8 <UART_WaitOnFlagUntilTimeout>
 800594c:	1e03      	subs	r3, r0, #0
 800594e:	d001      	beq.n	8005954 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e039      	b.n	80059c8 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8005954:	69fb      	ldr	r3, [r7, #28]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d10b      	bne.n	8005972 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	001a      	movs	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	05d2      	lsls	r2, r2, #23
 8005966:	0dd2      	lsrs	r2, r2, #23
 8005968:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	3302      	adds	r3, #2
 800596e:	61bb      	str	r3, [r7, #24]
 8005970:	e007      	b.n	8005982 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005972:	69fb      	ldr	r3, [r7, #28]
 8005974:	781a      	ldrb	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	3301      	adds	r3, #1
 8005980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2256      	movs	r2, #86	; 0x56
 8005986:	5a9b      	ldrh	r3, [r3, r2]
 8005988:	b29b      	uxth	r3, r3
 800598a:	3b01      	subs	r3, #1
 800598c:	b299      	uxth	r1, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2256      	movs	r2, #86	; 0x56
 8005992:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2256      	movs	r2, #86	; 0x56
 8005998:	5a9b      	ldrh	r3, [r3, r2]
 800599a:	b29b      	uxth	r3, r3
 800599c:	2b00      	cmp	r3, #0
 800599e:	d1cc      	bne.n	800593a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059a0:	697a      	ldr	r2, [r7, #20]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	0013      	movs	r3, r2
 80059aa:	2200      	movs	r2, #0
 80059ac:	2140      	movs	r1, #64	; 0x40
 80059ae:	f000 fda3 	bl	80064f8 <UART_WaitOnFlagUntilTimeout>
 80059b2:	1e03      	subs	r3, r0, #0
 80059b4:	d001      	beq.n	80059ba <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 80059b6:	2303      	movs	r3, #3
 80059b8:	e006      	b.n	80059c8 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2288      	movs	r2, #136	; 0x88
 80059be:	2120      	movs	r1, #32
 80059c0:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 80059c2:	2300      	movs	r3, #0
 80059c4:	e000      	b.n	80059c8 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 80059c6:	2302      	movs	r3, #2
  }
}
 80059c8:	0018      	movs	r0, r3
 80059ca:	46bd      	mov	sp, r7
 80059cc:	b008      	add	sp, #32
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	; 0x28
 80059d4:	af02      	add	r7, sp, #8
 80059d6:	60f8      	str	r0, [r7, #12]
 80059d8:	60b9      	str	r1, [r7, #8]
 80059da:	603b      	str	r3, [r7, #0]
 80059dc:	1dbb      	adds	r3, r7, #6
 80059de:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	228c      	movs	r2, #140	; 0x8c
 80059e4:	589b      	ldr	r3, [r3, r2]
 80059e6:	2b20      	cmp	r3, #32
 80059e8:	d000      	beq.n	80059ec <HAL_UART_Receive+0x1c>
 80059ea:	e0cc      	b.n	8005b86 <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_UART_Receive+0x2a>
 80059f2:	1dbb      	adds	r3, r7, #6
 80059f4:	881b      	ldrh	r3, [r3, #0]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d101      	bne.n	80059fe <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e0c4      	b.n	8005b88 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	015b      	lsls	r3, r3, #5
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d109      	bne.n	8005a1e <HAL_UART_Receive+0x4e>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d105      	bne.n	8005a1e <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2201      	movs	r2, #1
 8005a16:	4013      	ands	r3, r2
 8005a18:	d001      	beq.n	8005a1e <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e0b4      	b.n	8005b88 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2290      	movs	r2, #144	; 0x90
 8005a22:	2100      	movs	r1, #0
 8005a24:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	228c      	movs	r2, #140	; 0x8c
 8005a2a:	2122      	movs	r1, #34	; 0x22
 8005a2c:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2200      	movs	r2, #0
 8005a32:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a34:	f7fc fdde 	bl	80025f4 <HAL_GetTick>
 8005a38:	0003      	movs	r3, r0
 8005a3a:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	1dba      	adds	r2, r7, #6
 8005a40:	215c      	movs	r1, #92	; 0x5c
 8005a42:	8812      	ldrh	r2, [r2, #0]
 8005a44:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	1dba      	adds	r2, r7, #6
 8005a4a:	215e      	movs	r1, #94	; 0x5e
 8005a4c:	8812      	ldrh	r2, [r2, #0]
 8005a4e:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	689a      	ldr	r2, [r3, #8]
 8005a54:	2380      	movs	r3, #128	; 0x80
 8005a56:	015b      	lsls	r3, r3, #5
 8005a58:	429a      	cmp	r2, r3
 8005a5a:	d10d      	bne.n	8005a78 <HAL_UART_Receive+0xa8>
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	691b      	ldr	r3, [r3, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d104      	bne.n	8005a6e <HAL_UART_Receive+0x9e>
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	2260      	movs	r2, #96	; 0x60
 8005a68:	4949      	ldr	r1, [pc, #292]	; (8005b90 <HAL_UART_Receive+0x1c0>)
 8005a6a:	5299      	strh	r1, [r3, r2]
 8005a6c:	e02e      	b.n	8005acc <HAL_UART_Receive+0xfc>
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	2260      	movs	r2, #96	; 0x60
 8005a72:	21ff      	movs	r1, #255	; 0xff
 8005a74:	5299      	strh	r1, [r3, r2]
 8005a76:	e029      	b.n	8005acc <HAL_UART_Receive+0xfc>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d10d      	bne.n	8005a9c <HAL_UART_Receive+0xcc>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	691b      	ldr	r3, [r3, #16]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d104      	bne.n	8005a92 <HAL_UART_Receive+0xc2>
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2260      	movs	r2, #96	; 0x60
 8005a8c:	21ff      	movs	r1, #255	; 0xff
 8005a8e:	5299      	strh	r1, [r3, r2]
 8005a90:	e01c      	b.n	8005acc <HAL_UART_Receive+0xfc>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2260      	movs	r2, #96	; 0x60
 8005a96:	217f      	movs	r1, #127	; 0x7f
 8005a98:	5299      	strh	r1, [r3, r2]
 8005a9a:	e017      	b.n	8005acc <HAL_UART_Receive+0xfc>
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	689a      	ldr	r2, [r3, #8]
 8005aa0:	2380      	movs	r3, #128	; 0x80
 8005aa2:	055b      	lsls	r3, r3, #21
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d10d      	bne.n	8005ac4 <HAL_UART_Receive+0xf4>
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	691b      	ldr	r3, [r3, #16]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d104      	bne.n	8005aba <HAL_UART_Receive+0xea>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2260      	movs	r2, #96	; 0x60
 8005ab4:	217f      	movs	r1, #127	; 0x7f
 8005ab6:	5299      	strh	r1, [r3, r2]
 8005ab8:	e008      	b.n	8005acc <HAL_UART_Receive+0xfc>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2260      	movs	r2, #96	; 0x60
 8005abe:	213f      	movs	r1, #63	; 0x3f
 8005ac0:	5299      	strh	r1, [r3, r2]
 8005ac2:	e003      	b.n	8005acc <HAL_UART_Receive+0xfc>
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2260      	movs	r2, #96	; 0x60
 8005ac8:	2100      	movs	r1, #0
 8005aca:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005acc:	2312      	movs	r3, #18
 8005ace:	18fb      	adds	r3, r7, r3
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	2160      	movs	r1, #96	; 0x60
 8005ad4:	5a52      	ldrh	r2, [r2, r1]
 8005ad6:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	2380      	movs	r3, #128	; 0x80
 8005ade:	015b      	lsls	r3, r3, #5
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d108      	bne.n	8005af6 <HAL_UART_Receive+0x126>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d104      	bne.n	8005af6 <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005aec:	2300      	movs	r3, #0
 8005aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005af0:	68bb      	ldr	r3, [r7, #8]
 8005af2:	61bb      	str	r3, [r7, #24]
 8005af4:	e003      	b.n	8005afe <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005afe:	e036      	b.n	8005b6e <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	0013      	movs	r3, r2
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	2120      	movs	r1, #32
 8005b0e:	f000 fcf3 	bl	80064f8 <UART_WaitOnFlagUntilTimeout>
 8005b12:	1e03      	subs	r3, r0, #0
 8005b14:	d001      	beq.n	8005b1a <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8005b16:	2303      	movs	r3, #3
 8005b18:	e036      	b.n	8005b88 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005b1a:	69fb      	ldr	r3, [r7, #28]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10e      	bne.n	8005b3e <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b26:	b29b      	uxth	r3, r3
 8005b28:	2212      	movs	r2, #18
 8005b2a:	18ba      	adds	r2, r7, r2
 8005b2c:	8812      	ldrh	r2, [r2, #0]
 8005b2e:	4013      	ands	r3, r2
 8005b30:	b29a      	uxth	r2, r3
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005b36:	69bb      	ldr	r3, [r7, #24]
 8005b38:	3302      	adds	r3, #2
 8005b3a:	61bb      	str	r3, [r7, #24]
 8005b3c:	e00e      	b.n	8005b5c <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2212      	movs	r2, #18
 8005b48:	18ba      	adds	r2, r7, r2
 8005b4a:	8812      	ldrh	r2, [r2, #0]
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	4013      	ands	r3, r2
 8005b50:	b2da      	uxtb	r2, r3
 8005b52:	69fb      	ldr	r3, [r7, #28]
 8005b54:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	3301      	adds	r3, #1
 8005b5a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	225e      	movs	r2, #94	; 0x5e
 8005b60:	5a9b      	ldrh	r3, [r3, r2]
 8005b62:	b29b      	uxth	r3, r3
 8005b64:	3b01      	subs	r3, #1
 8005b66:	b299      	uxth	r1, r3
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	225e      	movs	r2, #94	; 0x5e
 8005b6c:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	225e      	movs	r2, #94	; 0x5e
 8005b72:	5a9b      	ldrh	r3, [r3, r2]
 8005b74:	b29b      	uxth	r3, r3
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d1c2      	bne.n	8005b00 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	228c      	movs	r2, #140	; 0x8c
 8005b7e:	2120      	movs	r1, #32
 8005b80:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005b82:	2300      	movs	r3, #0
 8005b84:	e000      	b.n	8005b88 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8005b86:	2302      	movs	r3, #2
  }
}
 8005b88:	0018      	movs	r0, r3
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	b008      	add	sp, #32
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	000001ff 	.word	0x000001ff

08005b94 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b08c      	sub	sp, #48	; 0x30
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	60f8      	str	r0, [r7, #12]
 8005b9c:	60b9      	str	r1, [r7, #8]
 8005b9e:	1dbb      	adds	r3, r7, #6
 8005ba0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2288      	movs	r2, #136	; 0x88
 8005ba6:	589b      	ldr	r3, [r3, r2]
 8005ba8:	2b20      	cmp	r3, #32
 8005baa:	d000      	beq.n	8005bae <HAL_UART_Transmit_IT+0x1a>
 8005bac:	e08d      	b.n	8005cca <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_UART_Transmit_IT+0x28>
 8005bb4:	1dbb      	adds	r3, r7, #6
 8005bb6:	881b      	ldrh	r3, [r3, #0]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d101      	bne.n	8005bc0 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e085      	b.n	8005ccc <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	2380      	movs	r3, #128	; 0x80
 8005bc6:	015b      	lsls	r3, r3, #5
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d109      	bne.n	8005be0 <HAL_UART_Transmit_IT+0x4c>
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d105      	bne.n	8005be0 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	4013      	ands	r3, r2
 8005bda:	d001      	beq.n	8005be0 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e075      	b.n	8005ccc <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	68ba      	ldr	r2, [r7, #8]
 8005be4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	1dba      	adds	r2, r7, #6
 8005bea:	2154      	movs	r1, #84	; 0x54
 8005bec:	8812      	ldrh	r2, [r2, #0]
 8005bee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	1dba      	adds	r2, r7, #6
 8005bf4:	2156      	movs	r1, #86	; 0x56
 8005bf6:	8812      	ldrh	r2, [r2, #0]
 8005bf8:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2290      	movs	r2, #144	; 0x90
 8005c04:	2100      	movs	r1, #0
 8005c06:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2288      	movs	r2, #136	; 0x88
 8005c0c:	2121      	movs	r1, #33	; 0x21
 8005c0e:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005c14:	2380      	movs	r3, #128	; 0x80
 8005c16:	059b      	lsls	r3, r3, #22
 8005c18:	429a      	cmp	r2, r3
 8005c1a:	d12a      	bne.n	8005c72 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	2380      	movs	r3, #128	; 0x80
 8005c22:	015b      	lsls	r3, r3, #5
 8005c24:	429a      	cmp	r2, r3
 8005c26:	d107      	bne.n	8005c38 <HAL_UART_Transmit_IT+0xa4>
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	691b      	ldr	r3, [r3, #16]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d103      	bne.n	8005c38 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	4a28      	ldr	r2, [pc, #160]	; (8005cd4 <HAL_UART_Transmit_IT+0x140>)
 8005c34:	679a      	str	r2, [r3, #120]	; 0x78
 8005c36:	e002      	b.n	8005c3e <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a27      	ldr	r2, [pc, #156]	; (8005cd8 <HAL_UART_Transmit_IT+0x144>)
 8005c3c:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c42:	61fb      	str	r3, [r7, #28]
  return(result);
 8005c44:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c48:	2301      	movs	r3, #1
 8005c4a:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c4c:	6a3b      	ldr	r3, [r7, #32]
 8005c4e:	f383 8810 	msr	PRIMASK, r3
}
 8005c52:	46c0      	nop			; (mov r8, r8)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689a      	ldr	r2, [r3, #8]
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2180      	movs	r1, #128	; 0x80
 8005c60:	0409      	lsls	r1, r1, #16
 8005c62:	430a      	orrs	r2, r1
 8005c64:	609a      	str	r2, [r3, #8]
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c6c:	f383 8810 	msr	PRIMASK, r3
}
 8005c70:	e029      	b.n	8005cc6 <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	689a      	ldr	r2, [r3, #8]
 8005c76:	2380      	movs	r3, #128	; 0x80
 8005c78:	015b      	lsls	r3, r3, #5
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d107      	bne.n	8005c8e <HAL_UART_Transmit_IT+0xfa>
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d103      	bne.n	8005c8e <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	4a14      	ldr	r2, [pc, #80]	; (8005cdc <HAL_UART_Transmit_IT+0x148>)
 8005c8a:	679a      	str	r2, [r3, #120]	; 0x78
 8005c8c:	e002      	b.n	8005c94 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	4a13      	ldr	r2, [pc, #76]	; (8005ce0 <HAL_UART_Transmit_IT+0x14c>)
 8005c92:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c94:	f3ef 8310 	mrs	r3, PRIMASK
 8005c98:	613b      	str	r3, [r7, #16]
  return(result);
 8005c9a:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ca2:	697b      	ldr	r3, [r7, #20]
 8005ca4:	f383 8810 	msr	PRIMASK, r3
}
 8005ca8:	46c0      	nop			; (mov r8, r8)
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	2180      	movs	r1, #128	; 0x80
 8005cb6:	430a      	orrs	r2, r1
 8005cb8:	601a      	str	r2, [r3, #0]
 8005cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	f383 8810 	msr	PRIMASK, r3
}
 8005cc4:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e000      	b.n	8005ccc <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005cca:	2302      	movs	r3, #2
  }
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b00c      	add	sp, #48	; 0x30
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	08007079 	.word	0x08007079
 8005cd8:	08006f8d 	.word	0x08006f8d
 8005cdc:	08006ecd 	.word	0x08006ecd
 8005ce0:	08006e19 	.word	0x08006e19

08005ce4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b088      	sub	sp, #32
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	1dbb      	adds	r3, r7, #6
 8005cf0:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	228c      	movs	r2, #140	; 0x8c
 8005cf6:	589b      	ldr	r3, [r3, r2]
 8005cf8:	2b20      	cmp	r3, #32
 8005cfa:	d145      	bne.n	8005d88 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d003      	beq.n	8005d0a <HAL_UART_Receive_IT+0x26>
 8005d02:	1dbb      	adds	r3, r7, #6
 8005d04:	881b      	ldrh	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e03d      	b.n	8005d8a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689a      	ldr	r2, [r3, #8]
 8005d12:	2380      	movs	r3, #128	; 0x80
 8005d14:	015b      	lsls	r3, r3, #5
 8005d16:	429a      	cmp	r2, r3
 8005d18:	d109      	bne.n	8005d2e <HAL_UART_Receive_IT+0x4a>
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d105      	bne.n	8005d2e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	2201      	movs	r2, #1
 8005d26:	4013      	ands	r3, r2
 8005d28:	d001      	beq.n	8005d2e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e02d      	b.n	8005d8a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	685a      	ldr	r2, [r3, #4]
 8005d3a:	2380      	movs	r3, #128	; 0x80
 8005d3c:	041b      	lsls	r3, r3, #16
 8005d3e:	4013      	ands	r3, r2
 8005d40:	d019      	beq.n	8005d76 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005d42:	f3ef 8310 	mrs	r3, PRIMASK
 8005d46:	613b      	str	r3, [r7, #16]
  return(result);
 8005d48:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005d4a:	61fb      	str	r3, [r7, #28]
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	f383 8810 	msr	PRIMASK, r3
}
 8005d56:	46c0      	nop			; (mov r8, r8)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	2180      	movs	r1, #128	; 0x80
 8005d64:	04c9      	lsls	r1, r1, #19
 8005d66:	430a      	orrs	r2, r1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	69fb      	ldr	r3, [r7, #28]
 8005d6c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	f383 8810 	msr	PRIMASK, r3
}
 8005d74:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d76:	1dbb      	adds	r3, r7, #6
 8005d78:	881a      	ldrh	r2, [r3, #0]
 8005d7a:	68b9      	ldr	r1, [r7, #8]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	0018      	movs	r0, r3
 8005d80:	f000 fc82 	bl	8006688 <UART_Start_Receive_IT>
 8005d84:	0003      	movs	r3, r0
 8005d86:	e000      	b.n	8005d8a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005d88:	2302      	movs	r3, #2
  }
}
 8005d8a:	0018      	movs	r0, r3
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	b008      	add	sp, #32
 8005d90:	bd80      	pop	{r7, pc}
	...

08005d94 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	b088      	sub	sp, #32
 8005d98:	af00      	add	r7, sp, #0
 8005d9a:	60f8      	str	r0, [r7, #12]
 8005d9c:	60b9      	str	r1, [r7, #8]
 8005d9e:	1dbb      	adds	r3, r7, #6
 8005da0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2288      	movs	r2, #136	; 0x88
 8005da6:	589b      	ldr	r3, [r3, r2]
 8005da8:	2b20      	cmp	r3, #32
 8005daa:	d000      	beq.n	8005dae <HAL_UART_Transmit_DMA+0x1a>
 8005dac:	e079      	b.n	8005ea2 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dae:	68bb      	ldr	r3, [r7, #8]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d003      	beq.n	8005dbc <HAL_UART_Transmit_DMA+0x28>
 8005db4:	1dbb      	adds	r3, r7, #6
 8005db6:	881b      	ldrh	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d101      	bne.n	8005dc0 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e071      	b.n	8005ea4 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689a      	ldr	r2, [r3, #8]
 8005dc4:	2380      	movs	r3, #128	; 0x80
 8005dc6:	015b      	lsls	r3, r3, #5
 8005dc8:	429a      	cmp	r2, r3
 8005dca:	d109      	bne.n	8005de0 <HAL_UART_Transmit_DMA+0x4c>
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	691b      	ldr	r3, [r3, #16]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d105      	bne.n	8005de0 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2201      	movs	r2, #1
 8005dd8:	4013      	ands	r3, r2
 8005dda:	d001      	beq.n	8005de0 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e061      	b.n	8005ea4 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	68ba      	ldr	r2, [r7, #8]
 8005de4:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	1dba      	adds	r2, r7, #6
 8005dea:	2154      	movs	r1, #84	; 0x54
 8005dec:	8812      	ldrh	r2, [r2, #0]
 8005dee:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	1dba      	adds	r2, r7, #6
 8005df4:	2156      	movs	r1, #86	; 0x56
 8005df6:	8812      	ldrh	r2, [r2, #0]
 8005df8:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2290      	movs	r2, #144	; 0x90
 8005dfe:	2100      	movs	r1, #0
 8005e00:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2288      	movs	r2, #136	; 0x88
 8005e06:	2121      	movs	r1, #33	; 0x21
 8005e08:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d028      	beq.n	8005e64 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e16:	4a25      	ldr	r2, [pc, #148]	; (8005eac <HAL_UART_Transmit_DMA+0x118>)
 8005e18:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e1e:	4a24      	ldr	r2, [pc, #144]	; (8005eb0 <HAL_UART_Transmit_DMA+0x11c>)
 8005e20:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e26:	4a23      	ldr	r2, [pc, #140]	; (8005eb4 <HAL_UART_Transmit_DMA+0x120>)
 8005e28:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005e2e:	2200      	movs	r2, #0
 8005e30:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3a:	0019      	movs	r1, r3
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	3328      	adds	r3, #40	; 0x28
 8005e42:	001a      	movs	r2, r3
 8005e44:	1dbb      	adds	r3, r7, #6
 8005e46:	881b      	ldrh	r3, [r3, #0]
 8005e48:	f7fd f9ce 	bl	80031e8 <HAL_DMA_Start_IT>
 8005e4c:	1e03      	subs	r3, r0, #0
 8005e4e:	d009      	beq.n	8005e64 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	2290      	movs	r2, #144	; 0x90
 8005e54:	2110      	movs	r1, #16
 8005e56:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	2288      	movs	r2, #136	; 0x88
 8005e5c:	2120      	movs	r1, #32
 8005e5e:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8005e60:	2301      	movs	r3, #1
 8005e62:	e01f      	b.n	8005ea4 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2240      	movs	r2, #64	; 0x40
 8005e6a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e70:	613b      	str	r3, [r7, #16]
  return(result);
 8005e72:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e74:	61fb      	str	r3, [r7, #28]
 8005e76:	2301      	movs	r3, #1
 8005e78:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e7a:	697b      	ldr	r3, [r7, #20]
 8005e7c:	f383 8810 	msr	PRIMASK, r3
}
 8005e80:	46c0      	nop			; (mov r8, r8)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	689a      	ldr	r2, [r3, #8]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	2180      	movs	r1, #128	; 0x80
 8005e8e:	430a      	orrs	r2, r1
 8005e90:	609a      	str	r2, [r3, #8]
 8005e92:	69fb      	ldr	r3, [r7, #28]
 8005e94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e96:	69bb      	ldr	r3, [r7, #24]
 8005e98:	f383 8810 	msr	PRIMASK, r3
}
 8005e9c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	e000      	b.n	8005ea4 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005ea2:	2302      	movs	r3, #2
  }
}
 8005ea4:	0018      	movs	r0, r3
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	b008      	add	sp, #32
 8005eaa:	bd80      	pop	{r7, pc}
 8005eac:	08006b69 	.word	0x08006b69
 8005eb0:	08006c01 	.word	0x08006c01
 8005eb4:	08006d93 	.word	0x08006d93

08005eb8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b088      	sub	sp, #32
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	1dbb      	adds	r3, r7, #6
 8005ec4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	228c      	movs	r2, #140	; 0x8c
 8005eca:	589b      	ldr	r3, [r3, r2]
 8005ecc:	2b20      	cmp	r3, #32
 8005ece:	d145      	bne.n	8005f5c <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d003      	beq.n	8005ede <HAL_UART_Receive_DMA+0x26>
 8005ed6:	1dbb      	adds	r3, r7, #6
 8005ed8:	881b      	ldrh	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e03d      	b.n	8005f5e <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	689a      	ldr	r2, [r3, #8]
 8005ee6:	2380      	movs	r3, #128	; 0x80
 8005ee8:	015b      	lsls	r3, r3, #5
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d109      	bne.n	8005f02 <HAL_UART_Receive_DMA+0x4a>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d105      	bne.n	8005f02 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	4013      	ands	r3, r2
 8005efc:	d001      	beq.n	8005f02 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005efe:	2301      	movs	r3, #1
 8005f00:	e02d      	b.n	8005f5e <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2200      	movs	r2, #0
 8005f06:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	685a      	ldr	r2, [r3, #4]
 8005f0e:	2380      	movs	r3, #128	; 0x80
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	4013      	ands	r3, r2
 8005f14:	d019      	beq.n	8005f4a <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f16:	f3ef 8310 	mrs	r3, PRIMASK
 8005f1a:	613b      	str	r3, [r7, #16]
  return(result);
 8005f1c:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005f1e:	61fb      	str	r3, [r7, #28]
 8005f20:	2301      	movs	r3, #1
 8005f22:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f383 8810 	msr	PRIMASK, r3
}
 8005f2a:	46c0      	nop			; (mov r8, r8)
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	681a      	ldr	r2, [r3, #0]
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	2180      	movs	r1, #128	; 0x80
 8005f38:	04c9      	lsls	r1, r1, #19
 8005f3a:	430a      	orrs	r2, r1
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f42:	69bb      	ldr	r3, [r7, #24]
 8005f44:	f383 8810 	msr	PRIMASK, r3
}
 8005f48:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005f4a:	1dbb      	adds	r3, r7, #6
 8005f4c:	881a      	ldrh	r2, [r3, #0]
 8005f4e:	68b9      	ldr	r1, [r7, #8]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	0018      	movs	r0, r3
 8005f54:	f000 fcbc 	bl	80068d0 <UART_Start_Receive_DMA>
 8005f58:	0003      	movs	r3, r0
 8005f5a:	e000      	b.n	8005f5e <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005f5c:	2302      	movs	r3, #2
  }
}
 8005f5e:	0018      	movs	r0, r3
 8005f60:	46bd      	mov	sp, r7
 8005f62:	b008      	add	sp, #32
 8005f64:	bd80      	pop	{r7, pc}

08005f66 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005f66:	b580      	push	{r7, lr}
 8005f68:	b082      	sub	sp, #8
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f6e:	46c0      	nop			; (mov r8, r8)
 8005f70:	46bd      	mov	sp, r7
 8005f72:	b002      	add	sp, #8
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b082      	sub	sp, #8
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f7e:	46c0      	nop			; (mov r8, r8)
 8005f80:	46bd      	mov	sp, r7
 8005f82:	b002      	add	sp, #8
 8005f84:	bd80      	pop	{r7, pc}

08005f86 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f86:	b580      	push	{r7, lr}
 8005f88:	b082      	sub	sp, #8
 8005f8a:	af00      	add	r7, sp, #0
 8005f8c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f8e:	46c0      	nop			; (mov r8, r8)
 8005f90:	46bd      	mov	sp, r7
 8005f92:	b002      	add	sp, #8
 8005f94:	bd80      	pop	{r7, pc}

08005f96 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f96:	b580      	push	{r7, lr}
 8005f98:	b082      	sub	sp, #8
 8005f9a:	af00      	add	r7, sp, #0
 8005f9c:	6078      	str	r0, [r7, #4]
 8005f9e:	000a      	movs	r2, r1
 8005fa0:	1cbb      	adds	r3, r7, #2
 8005fa2:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005fa4:	46c0      	nop			; (mov r8, r8)
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	b002      	add	sp, #8
 8005faa:	bd80      	pop	{r7, pc}

08005fac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b088      	sub	sp, #32
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005fb4:	231a      	movs	r3, #26
 8005fb6:	18fb      	adds	r3, r7, r3
 8005fb8:	2200      	movs	r2, #0
 8005fba:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689a      	ldr	r2, [r3, #8]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	691b      	ldr	r3, [r3, #16]
 8005fc4:	431a      	orrs	r2, r3
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	695b      	ldr	r3, [r3, #20]
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4abc      	ldr	r2, [pc, #752]	; (80062cc <UART_SetConfig+0x320>)
 8005fdc:	4013      	ands	r3, r2
 8005fde:	0019      	movs	r1, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	69fa      	ldr	r2, [r7, #28]
 8005fe6:	430a      	orrs	r2, r1
 8005fe8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	4ab7      	ldr	r2, [pc, #732]	; (80062d0 <UART_SetConfig+0x324>)
 8005ff2:	4013      	ands	r3, r2
 8005ff4:	0019      	movs	r1, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	68da      	ldr	r2, [r3, #12]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6a1b      	ldr	r3, [r3, #32]
 800600c:	69fa      	ldr	r2, [r7, #28]
 800600e:	4313      	orrs	r3, r2
 8006010:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	4aae      	ldr	r2, [pc, #696]	; (80062d4 <UART_SetConfig+0x328>)
 800601a:	4013      	ands	r3, r2
 800601c:	0019      	movs	r1, r3
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69fa      	ldr	r2, [r7, #28]
 8006024:	430a      	orrs	r2, r1
 8006026:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800602e:	220f      	movs	r2, #15
 8006030:	4393      	bics	r3, r2
 8006032:	0019      	movs	r1, r3
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	4aa4      	ldr	r2, [pc, #656]	; (80062d8 <UART_SetConfig+0x32c>)
 8006046:	4293      	cmp	r3, r2
 8006048:	d127      	bne.n	800609a <UART_SetConfig+0xee>
 800604a:	4ba4      	ldr	r3, [pc, #656]	; (80062dc <UART_SetConfig+0x330>)
 800604c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800604e:	2203      	movs	r2, #3
 8006050:	4013      	ands	r3, r2
 8006052:	2b03      	cmp	r3, #3
 8006054:	d017      	beq.n	8006086 <UART_SetConfig+0xda>
 8006056:	d81b      	bhi.n	8006090 <UART_SetConfig+0xe4>
 8006058:	2b02      	cmp	r3, #2
 800605a:	d00a      	beq.n	8006072 <UART_SetConfig+0xc6>
 800605c:	d818      	bhi.n	8006090 <UART_SetConfig+0xe4>
 800605e:	2b00      	cmp	r3, #0
 8006060:	d002      	beq.n	8006068 <UART_SetConfig+0xbc>
 8006062:	2b01      	cmp	r3, #1
 8006064:	d00a      	beq.n	800607c <UART_SetConfig+0xd0>
 8006066:	e013      	b.n	8006090 <UART_SetConfig+0xe4>
 8006068:	231b      	movs	r3, #27
 800606a:	18fb      	adds	r3, r7, r3
 800606c:	2200      	movs	r2, #0
 800606e:	701a      	strb	r2, [r3, #0]
 8006070:	e058      	b.n	8006124 <UART_SetConfig+0x178>
 8006072:	231b      	movs	r3, #27
 8006074:	18fb      	adds	r3, r7, r3
 8006076:	2202      	movs	r2, #2
 8006078:	701a      	strb	r2, [r3, #0]
 800607a:	e053      	b.n	8006124 <UART_SetConfig+0x178>
 800607c:	231b      	movs	r3, #27
 800607e:	18fb      	adds	r3, r7, r3
 8006080:	2204      	movs	r2, #4
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e04e      	b.n	8006124 <UART_SetConfig+0x178>
 8006086:	231b      	movs	r3, #27
 8006088:	18fb      	adds	r3, r7, r3
 800608a:	2208      	movs	r2, #8
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	e049      	b.n	8006124 <UART_SetConfig+0x178>
 8006090:	231b      	movs	r3, #27
 8006092:	18fb      	adds	r3, r7, r3
 8006094:	2210      	movs	r2, #16
 8006096:	701a      	strb	r2, [r3, #0]
 8006098:	e044      	b.n	8006124 <UART_SetConfig+0x178>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	4a90      	ldr	r2, [pc, #576]	; (80062e0 <UART_SetConfig+0x334>)
 80060a0:	4293      	cmp	r3, r2
 80060a2:	d127      	bne.n	80060f4 <UART_SetConfig+0x148>
 80060a4:	4b8d      	ldr	r3, [pc, #564]	; (80062dc <UART_SetConfig+0x330>)
 80060a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060a8:	220c      	movs	r2, #12
 80060aa:	4013      	ands	r3, r2
 80060ac:	2b0c      	cmp	r3, #12
 80060ae:	d017      	beq.n	80060e0 <UART_SetConfig+0x134>
 80060b0:	d81b      	bhi.n	80060ea <UART_SetConfig+0x13e>
 80060b2:	2b08      	cmp	r3, #8
 80060b4:	d00a      	beq.n	80060cc <UART_SetConfig+0x120>
 80060b6:	d818      	bhi.n	80060ea <UART_SetConfig+0x13e>
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <UART_SetConfig+0x116>
 80060bc:	2b04      	cmp	r3, #4
 80060be:	d00a      	beq.n	80060d6 <UART_SetConfig+0x12a>
 80060c0:	e013      	b.n	80060ea <UART_SetConfig+0x13e>
 80060c2:	231b      	movs	r3, #27
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	2200      	movs	r2, #0
 80060c8:	701a      	strb	r2, [r3, #0]
 80060ca:	e02b      	b.n	8006124 <UART_SetConfig+0x178>
 80060cc:	231b      	movs	r3, #27
 80060ce:	18fb      	adds	r3, r7, r3
 80060d0:	2202      	movs	r2, #2
 80060d2:	701a      	strb	r2, [r3, #0]
 80060d4:	e026      	b.n	8006124 <UART_SetConfig+0x178>
 80060d6:	231b      	movs	r3, #27
 80060d8:	18fb      	adds	r3, r7, r3
 80060da:	2204      	movs	r2, #4
 80060dc:	701a      	strb	r2, [r3, #0]
 80060de:	e021      	b.n	8006124 <UART_SetConfig+0x178>
 80060e0:	231b      	movs	r3, #27
 80060e2:	18fb      	adds	r3, r7, r3
 80060e4:	2208      	movs	r2, #8
 80060e6:	701a      	strb	r2, [r3, #0]
 80060e8:	e01c      	b.n	8006124 <UART_SetConfig+0x178>
 80060ea:	231b      	movs	r3, #27
 80060ec:	18fb      	adds	r3, r7, r3
 80060ee:	2210      	movs	r2, #16
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	e017      	b.n	8006124 <UART_SetConfig+0x178>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	4a7a      	ldr	r2, [pc, #488]	; (80062e4 <UART_SetConfig+0x338>)
 80060fa:	4293      	cmp	r3, r2
 80060fc:	d104      	bne.n	8006108 <UART_SetConfig+0x15c>
 80060fe:	231b      	movs	r3, #27
 8006100:	18fb      	adds	r3, r7, r3
 8006102:	2200      	movs	r2, #0
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	e00d      	b.n	8006124 <UART_SetConfig+0x178>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a76      	ldr	r2, [pc, #472]	; (80062e8 <UART_SetConfig+0x33c>)
 800610e:	4293      	cmp	r3, r2
 8006110:	d104      	bne.n	800611c <UART_SetConfig+0x170>
 8006112:	231b      	movs	r3, #27
 8006114:	18fb      	adds	r3, r7, r3
 8006116:	2200      	movs	r2, #0
 8006118:	701a      	strb	r2, [r3, #0]
 800611a:	e003      	b.n	8006124 <UART_SetConfig+0x178>
 800611c:	231b      	movs	r3, #27
 800611e:	18fb      	adds	r3, r7, r3
 8006120:	2210      	movs	r2, #16
 8006122:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	021b      	lsls	r3, r3, #8
 800612c:	429a      	cmp	r2, r3
 800612e:	d000      	beq.n	8006132 <UART_SetConfig+0x186>
 8006130:	e065      	b.n	80061fe <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8006132:	231b      	movs	r3, #27
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	2b08      	cmp	r3, #8
 800613a:	d015      	beq.n	8006168 <UART_SetConfig+0x1bc>
 800613c:	dc18      	bgt.n	8006170 <UART_SetConfig+0x1c4>
 800613e:	2b04      	cmp	r3, #4
 8006140:	d00d      	beq.n	800615e <UART_SetConfig+0x1b2>
 8006142:	dc15      	bgt.n	8006170 <UART_SetConfig+0x1c4>
 8006144:	2b00      	cmp	r3, #0
 8006146:	d002      	beq.n	800614e <UART_SetConfig+0x1a2>
 8006148:	2b02      	cmp	r3, #2
 800614a:	d005      	beq.n	8006158 <UART_SetConfig+0x1ac>
 800614c:	e010      	b.n	8006170 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800614e:	f7fe f8c1 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 8006152:	0003      	movs	r3, r0
 8006154:	617b      	str	r3, [r7, #20]
        break;
 8006156:	e012      	b.n	800617e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006158:	4b64      	ldr	r3, [pc, #400]	; (80062ec <UART_SetConfig+0x340>)
 800615a:	617b      	str	r3, [r7, #20]
        break;
 800615c:	e00f      	b.n	800617e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800615e:	f7fe f82f 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 8006162:	0003      	movs	r3, r0
 8006164:	617b      	str	r3, [r7, #20]
        break;
 8006166:	e00a      	b.n	800617e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	617b      	str	r3, [r7, #20]
        break;
 800616e:	e006      	b.n	800617e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006170:	2300      	movs	r3, #0
 8006172:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006174:	231a      	movs	r3, #26
 8006176:	18fb      	adds	r3, r7, r3
 8006178:	2201      	movs	r2, #1
 800617a:	701a      	strb	r2, [r3, #0]
        break;
 800617c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d100      	bne.n	8006186 <UART_SetConfig+0x1da>
 8006184:	e08d      	b.n	80062a2 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800618a:	4b59      	ldr	r3, [pc, #356]	; (80062f0 <UART_SetConfig+0x344>)
 800618c:	0052      	lsls	r2, r2, #1
 800618e:	5ad3      	ldrh	r3, [r2, r3]
 8006190:	0019      	movs	r1, r3
 8006192:	6978      	ldr	r0, [r7, #20]
 8006194:	f7f9 ffc2 	bl	800011c <__udivsi3>
 8006198:	0003      	movs	r3, r0
 800619a:	005a      	lsls	r2, r3, #1
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	085b      	lsrs	r3, r3, #1
 80061a2:	18d2      	adds	r2, r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	0019      	movs	r1, r3
 80061aa:	0010      	movs	r0, r2
 80061ac:	f7f9 ffb6 	bl	800011c <__udivsi3>
 80061b0:	0003      	movs	r3, r0
 80061b2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	2b0f      	cmp	r3, #15
 80061b8:	d91c      	bls.n	80061f4 <UART_SetConfig+0x248>
 80061ba:	693a      	ldr	r2, [r7, #16]
 80061bc:	2380      	movs	r3, #128	; 0x80
 80061be:	025b      	lsls	r3, r3, #9
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d217      	bcs.n	80061f4 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80061c4:	693b      	ldr	r3, [r7, #16]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	200e      	movs	r0, #14
 80061ca:	183b      	adds	r3, r7, r0
 80061cc:	210f      	movs	r1, #15
 80061ce:	438a      	bics	r2, r1
 80061d0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	085b      	lsrs	r3, r3, #1
 80061d6:	b29b      	uxth	r3, r3
 80061d8:	2207      	movs	r2, #7
 80061da:	4013      	ands	r3, r2
 80061dc:	b299      	uxth	r1, r3
 80061de:	183b      	adds	r3, r7, r0
 80061e0:	183a      	adds	r2, r7, r0
 80061e2:	8812      	ldrh	r2, [r2, #0]
 80061e4:	430a      	orrs	r2, r1
 80061e6:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	183a      	adds	r2, r7, r0
 80061ee:	8812      	ldrh	r2, [r2, #0]
 80061f0:	60da      	str	r2, [r3, #12]
 80061f2:	e056      	b.n	80062a2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80061f4:	231a      	movs	r3, #26
 80061f6:	18fb      	adds	r3, r7, r3
 80061f8:	2201      	movs	r2, #1
 80061fa:	701a      	strb	r2, [r3, #0]
 80061fc:	e051      	b.n	80062a2 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80061fe:	231b      	movs	r3, #27
 8006200:	18fb      	adds	r3, r7, r3
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	2b08      	cmp	r3, #8
 8006206:	d015      	beq.n	8006234 <UART_SetConfig+0x288>
 8006208:	dc18      	bgt.n	800623c <UART_SetConfig+0x290>
 800620a:	2b04      	cmp	r3, #4
 800620c:	d00d      	beq.n	800622a <UART_SetConfig+0x27e>
 800620e:	dc15      	bgt.n	800623c <UART_SetConfig+0x290>
 8006210:	2b00      	cmp	r3, #0
 8006212:	d002      	beq.n	800621a <UART_SetConfig+0x26e>
 8006214:	2b02      	cmp	r3, #2
 8006216:	d005      	beq.n	8006224 <UART_SetConfig+0x278>
 8006218:	e010      	b.n	800623c <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800621a:	f7fe f85b 	bl	80042d4 <HAL_RCC_GetPCLK1Freq>
 800621e:	0003      	movs	r3, r0
 8006220:	617b      	str	r3, [r7, #20]
        break;
 8006222:	e012      	b.n	800624a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006224:	4b31      	ldr	r3, [pc, #196]	; (80062ec <UART_SetConfig+0x340>)
 8006226:	617b      	str	r3, [r7, #20]
        break;
 8006228:	e00f      	b.n	800624a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800622a:	f7fd ffc9 	bl	80041c0 <HAL_RCC_GetSysClockFreq>
 800622e:	0003      	movs	r3, r0
 8006230:	617b      	str	r3, [r7, #20]
        break;
 8006232:	e00a      	b.n	800624a <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006234:	2380      	movs	r3, #128	; 0x80
 8006236:	021b      	lsls	r3, r3, #8
 8006238:	617b      	str	r3, [r7, #20]
        break;
 800623a:	e006      	b.n	800624a <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 800623c:	2300      	movs	r3, #0
 800623e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006240:	231a      	movs	r3, #26
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	2201      	movs	r2, #1
 8006246:	701a      	strb	r2, [r3, #0]
        break;
 8006248:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d028      	beq.n	80062a2 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006254:	4b26      	ldr	r3, [pc, #152]	; (80062f0 <UART_SetConfig+0x344>)
 8006256:	0052      	lsls	r2, r2, #1
 8006258:	5ad3      	ldrh	r3, [r2, r3]
 800625a:	0019      	movs	r1, r3
 800625c:	6978      	ldr	r0, [r7, #20]
 800625e:	f7f9 ff5d 	bl	800011c <__udivsi3>
 8006262:	0003      	movs	r3, r0
 8006264:	001a      	movs	r2, r3
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	085b      	lsrs	r3, r3, #1
 800626c:	18d2      	adds	r2, r2, r3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	0019      	movs	r1, r3
 8006274:	0010      	movs	r0, r2
 8006276:	f7f9 ff51 	bl	800011c <__udivsi3>
 800627a:	0003      	movs	r3, r0
 800627c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	2b0f      	cmp	r3, #15
 8006282:	d90a      	bls.n	800629a <UART_SetConfig+0x2ee>
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	2380      	movs	r3, #128	; 0x80
 8006288:	025b      	lsls	r3, r3, #9
 800628a:	429a      	cmp	r2, r3
 800628c:	d205      	bcs.n	800629a <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	b29a      	uxth	r2, r3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	60da      	str	r2, [r3, #12]
 8006298:	e003      	b.n	80062a2 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800629a:	231a      	movs	r3, #26
 800629c:	18fb      	adds	r3, r7, r3
 800629e:	2201      	movs	r2, #1
 80062a0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	226a      	movs	r2, #106	; 0x6a
 80062a6:	2101      	movs	r1, #1
 80062a8:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	2268      	movs	r2, #104	; 0x68
 80062ae:	2101      	movs	r1, #1
 80062b0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2200      	movs	r2, #0
 80062b6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80062be:	231a      	movs	r3, #26
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	781b      	ldrb	r3, [r3, #0]
}
 80062c4:	0018      	movs	r0, r3
 80062c6:	46bd      	mov	sp, r7
 80062c8:	b008      	add	sp, #32
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	cfff69f3 	.word	0xcfff69f3
 80062d0:	ffffcfff 	.word	0xffffcfff
 80062d4:	11fff4ff 	.word	0x11fff4ff
 80062d8:	40013800 	.word	0x40013800
 80062dc:	40021000 	.word	0x40021000
 80062e0:	40004400 	.word	0x40004400
 80062e4:	40004800 	.word	0x40004800
 80062e8:	40004c00 	.word	0x40004c00
 80062ec:	00f42400 	.word	0x00f42400
 80062f0:	0800b2d8 	.word	0x0800b2d8

080062f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b082      	sub	sp, #8
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006300:	2201      	movs	r2, #1
 8006302:	4013      	ands	r3, r2
 8006304:	d00b      	beq.n	800631e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	4a4a      	ldr	r2, [pc, #296]	; (8006438 <UART_AdvFeatureConfig+0x144>)
 800630e:	4013      	ands	r3, r2
 8006310:	0019      	movs	r1, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006322:	2202      	movs	r2, #2
 8006324:	4013      	ands	r3, r2
 8006326:	d00b      	beq.n	8006340 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	4a43      	ldr	r2, [pc, #268]	; (800643c <UART_AdvFeatureConfig+0x148>)
 8006330:	4013      	ands	r3, r2
 8006332:	0019      	movs	r1, r3
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	430a      	orrs	r2, r1
 800633e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006344:	2204      	movs	r2, #4
 8006346:	4013      	ands	r3, r2
 8006348:	d00b      	beq.n	8006362 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a3b      	ldr	r2, [pc, #236]	; (8006440 <UART_AdvFeatureConfig+0x14c>)
 8006352:	4013      	ands	r3, r2
 8006354:	0019      	movs	r1, r3
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	430a      	orrs	r2, r1
 8006360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006366:	2208      	movs	r2, #8
 8006368:	4013      	ands	r3, r2
 800636a:	d00b      	beq.n	8006384 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	4a34      	ldr	r2, [pc, #208]	; (8006444 <UART_AdvFeatureConfig+0x150>)
 8006374:	4013      	ands	r3, r2
 8006376:	0019      	movs	r1, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	430a      	orrs	r2, r1
 8006382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006388:	2210      	movs	r2, #16
 800638a:	4013      	ands	r3, r2
 800638c:	d00b      	beq.n	80063a6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	4a2c      	ldr	r2, [pc, #176]	; (8006448 <UART_AdvFeatureConfig+0x154>)
 8006396:	4013      	ands	r3, r2
 8006398:	0019      	movs	r1, r3
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063aa:	2220      	movs	r2, #32
 80063ac:	4013      	ands	r3, r2
 80063ae:	d00b      	beq.n	80063c8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	4a25      	ldr	r2, [pc, #148]	; (800644c <UART_AdvFeatureConfig+0x158>)
 80063b8:	4013      	ands	r3, r2
 80063ba:	0019      	movs	r1, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	430a      	orrs	r2, r1
 80063c6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063cc:	2240      	movs	r2, #64	; 0x40
 80063ce:	4013      	ands	r3, r2
 80063d0:	d01d      	beq.n	800640e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4a1d      	ldr	r2, [pc, #116]	; (8006450 <UART_AdvFeatureConfig+0x15c>)
 80063da:	4013      	ands	r3, r2
 80063dc:	0019      	movs	r1, r3
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80063ee:	2380      	movs	r3, #128	; 0x80
 80063f0:	035b      	lsls	r3, r3, #13
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d10b      	bne.n	800640e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	4a15      	ldr	r2, [pc, #84]	; (8006454 <UART_AdvFeatureConfig+0x160>)
 80063fe:	4013      	ands	r3, r2
 8006400:	0019      	movs	r1, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	430a      	orrs	r2, r1
 800640c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006412:	2280      	movs	r2, #128	; 0x80
 8006414:	4013      	ands	r3, r2
 8006416:	d00b      	beq.n	8006430 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	4a0e      	ldr	r2, [pc, #56]	; (8006458 <UART_AdvFeatureConfig+0x164>)
 8006420:	4013      	ands	r3, r2
 8006422:	0019      	movs	r1, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	430a      	orrs	r2, r1
 800642e:	605a      	str	r2, [r3, #4]
  }
}
 8006430:	46c0      	nop			; (mov r8, r8)
 8006432:	46bd      	mov	sp, r7
 8006434:	b002      	add	sp, #8
 8006436:	bd80      	pop	{r7, pc}
 8006438:	fffdffff 	.word	0xfffdffff
 800643c:	fffeffff 	.word	0xfffeffff
 8006440:	fffbffff 	.word	0xfffbffff
 8006444:	ffff7fff 	.word	0xffff7fff
 8006448:	ffffefff 	.word	0xffffefff
 800644c:	ffffdfff 	.word	0xffffdfff
 8006450:	ffefffff 	.word	0xffefffff
 8006454:	ff9fffff 	.word	0xff9fffff
 8006458:	fff7ffff 	.word	0xfff7ffff

0800645c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af02      	add	r7, sp, #8
 8006462:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2290      	movs	r2, #144	; 0x90
 8006468:	2100      	movs	r1, #0
 800646a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800646c:	f7fc f8c2 	bl	80025f4 <HAL_GetTick>
 8006470:	0003      	movs	r3, r0
 8006472:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	2208      	movs	r2, #8
 800647c:	4013      	ands	r3, r2
 800647e:	2b08      	cmp	r3, #8
 8006480:	d10c      	bne.n	800649c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	2280      	movs	r2, #128	; 0x80
 8006486:	0391      	lsls	r1, r2, #14
 8006488:	6878      	ldr	r0, [r7, #4]
 800648a:	4a1a      	ldr	r2, [pc, #104]	; (80064f4 <UART_CheckIdleState+0x98>)
 800648c:	9200      	str	r2, [sp, #0]
 800648e:	2200      	movs	r2, #0
 8006490:	f000 f832 	bl	80064f8 <UART_WaitOnFlagUntilTimeout>
 8006494:	1e03      	subs	r3, r0, #0
 8006496:	d001      	beq.n	800649c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e026      	b.n	80064ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	2204      	movs	r2, #4
 80064a4:	4013      	ands	r3, r2
 80064a6:	2b04      	cmp	r3, #4
 80064a8:	d10c      	bne.n	80064c4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2280      	movs	r2, #128	; 0x80
 80064ae:	03d1      	lsls	r1, r2, #15
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	4a10      	ldr	r2, [pc, #64]	; (80064f4 <UART_CheckIdleState+0x98>)
 80064b4:	9200      	str	r2, [sp, #0]
 80064b6:	2200      	movs	r2, #0
 80064b8:	f000 f81e 	bl	80064f8 <UART_WaitOnFlagUntilTimeout>
 80064bc:	1e03      	subs	r3, r0, #0
 80064be:	d001      	beq.n	80064c4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e012      	b.n	80064ea <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2288      	movs	r2, #136	; 0x88
 80064c8:	2120      	movs	r1, #32
 80064ca:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	228c      	movs	r2, #140	; 0x8c
 80064d0:	2120      	movs	r1, #32
 80064d2:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2200      	movs	r2, #0
 80064d8:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2284      	movs	r2, #132	; 0x84
 80064e4:	2100      	movs	r1, #0
 80064e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b004      	add	sp, #16
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	46c0      	nop			; (mov r8, r8)
 80064f4:	01ffffff 	.word	0x01ffffff

080064f8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b094      	sub	sp, #80	; 0x50
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	603b      	str	r3, [r7, #0]
 8006504:	1dfb      	adds	r3, r7, #7
 8006506:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006508:	e0a7      	b.n	800665a <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800650a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800650c:	3301      	adds	r3, #1
 800650e:	d100      	bne.n	8006512 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006510:	e0a3      	b.n	800665a <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006512:	f7fc f86f 	bl	80025f4 <HAL_GetTick>
 8006516:	0002      	movs	r2, r0
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	1ad3      	subs	r3, r2, r3
 800651c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800651e:	429a      	cmp	r2, r3
 8006520:	d302      	bcc.n	8006528 <UART_WaitOnFlagUntilTimeout+0x30>
 8006522:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006524:	2b00      	cmp	r3, #0
 8006526:	d13f      	bne.n	80065a8 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006528:	f3ef 8310 	mrs	r3, PRIMASK
 800652c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800652e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006530:	647b      	str	r3, [r7, #68]	; 0x44
 8006532:	2301      	movs	r3, #1
 8006534:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006538:	f383 8810 	msr	PRIMASK, r3
}
 800653c:	46c0      	nop			; (mov r8, r8)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	494e      	ldr	r1, [pc, #312]	; (8006684 <UART_WaitOnFlagUntilTimeout+0x18c>)
 800654a:	400a      	ands	r2, r1
 800654c:	601a      	str	r2, [r3, #0]
 800654e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006550:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006554:	f383 8810 	msr	PRIMASK, r3
}
 8006558:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800655a:	f3ef 8310 	mrs	r3, PRIMASK
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006562:	643b      	str	r3, [r7, #64]	; 0x40
 8006564:	2301      	movs	r3, #1
 8006566:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800656a:	f383 8810 	msr	PRIMASK, r3
}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	689a      	ldr	r2, [r3, #8]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	2101      	movs	r1, #1
 800657c:	438a      	bics	r2, r1
 800657e:	609a      	str	r2, [r3, #8]
 8006580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006582:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	f383 8810 	msr	PRIMASK, r3
}
 800658a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2288      	movs	r2, #136	; 0x88
 8006590:	2120      	movs	r1, #32
 8006592:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	228c      	movs	r2, #140	; 0x8c
 8006598:	2120      	movs	r1, #32
 800659a:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2284      	movs	r2, #132	; 0x84
 80065a0:	2100      	movs	r1, #0
 80065a2:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80065a4:	2303      	movs	r3, #3
 80065a6:	e069      	b.n	800667c <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	2204      	movs	r2, #4
 80065b0:	4013      	ands	r3, r2
 80065b2:	d052      	beq.n	800665a <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	69da      	ldr	r2, [r3, #28]
 80065ba:	2380      	movs	r3, #128	; 0x80
 80065bc:	011b      	lsls	r3, r3, #4
 80065be:	401a      	ands	r2, r3
 80065c0:	2380      	movs	r3, #128	; 0x80
 80065c2:	011b      	lsls	r3, r3, #4
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d148      	bne.n	800665a <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2280      	movs	r2, #128	; 0x80
 80065ce:	0112      	lsls	r2, r2, #4
 80065d0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80065d2:	f3ef 8310 	mrs	r3, PRIMASK
 80065d6:	613b      	str	r3, [r7, #16]
  return(result);
 80065d8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80065da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80065dc:	2301      	movs	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f383 8810 	msr	PRIMASK, r3
}
 80065e6:	46c0      	nop			; (mov r8, r8)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	681a      	ldr	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	4924      	ldr	r1, [pc, #144]	; (8006684 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80065f4:	400a      	ands	r2, r1
 80065f6:	601a      	str	r2, [r3, #0]
 80065f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	f383 8810 	msr	PRIMASK, r3
}
 8006602:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006604:	f3ef 8310 	mrs	r3, PRIMASK
 8006608:	61fb      	str	r3, [r7, #28]
  return(result);
 800660a:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800660c:	64bb      	str	r3, [r7, #72]	; 0x48
 800660e:	2301      	movs	r3, #1
 8006610:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006612:	6a3b      	ldr	r3, [r7, #32]
 8006614:	f383 8810 	msr	PRIMASK, r3
}
 8006618:	46c0      	nop			; (mov r8, r8)
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	689a      	ldr	r2, [r3, #8]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	2101      	movs	r1, #1
 8006626:	438a      	bics	r2, r1
 8006628:	609a      	str	r2, [r3, #8]
 800662a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800662c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800662e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006630:	f383 8810 	msr	PRIMASK, r3
}
 8006634:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2288      	movs	r2, #136	; 0x88
 800663a:	2120      	movs	r1, #32
 800663c:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	228c      	movs	r2, #140	; 0x8c
 8006642:	2120      	movs	r1, #32
 8006644:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	2290      	movs	r2, #144	; 0x90
 800664a:	2120      	movs	r1, #32
 800664c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2284      	movs	r2, #132	; 0x84
 8006652:	2100      	movs	r1, #0
 8006654:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006656:	2303      	movs	r3, #3
 8006658:	e010      	b.n	800667c <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	69db      	ldr	r3, [r3, #28]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	4013      	ands	r3, r2
 8006664:	68ba      	ldr	r2, [r7, #8]
 8006666:	1ad3      	subs	r3, r2, r3
 8006668:	425a      	negs	r2, r3
 800666a:	4153      	adcs	r3, r2
 800666c:	b2db      	uxtb	r3, r3
 800666e:	001a      	movs	r2, r3
 8006670:	1dfb      	adds	r3, r7, #7
 8006672:	781b      	ldrb	r3, [r3, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d100      	bne.n	800667a <UART_WaitOnFlagUntilTimeout+0x182>
 8006678:	e747      	b.n	800650a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800667a:	2300      	movs	r3, #0
}
 800667c:	0018      	movs	r0, r3
 800667e:	46bd      	mov	sp, r7
 8006680:	b014      	add	sp, #80	; 0x50
 8006682:	bd80      	pop	{r7, pc}
 8006684:	fffffe5f 	.word	0xfffffe5f

08006688 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b098      	sub	sp, #96	; 0x60
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	60b9      	str	r1, [r7, #8]
 8006692:	1dbb      	adds	r3, r7, #6
 8006694:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	1dba      	adds	r2, r7, #6
 80066a0:	215c      	movs	r1, #92	; 0x5c
 80066a2:	8812      	ldrh	r2, [r2, #0]
 80066a4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	1dba      	adds	r2, r7, #6
 80066aa:	215e      	movs	r1, #94	; 0x5e
 80066ac:	8812      	ldrh	r2, [r2, #0]
 80066ae:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	2200      	movs	r2, #0
 80066b4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	689a      	ldr	r2, [r3, #8]
 80066ba:	2380      	movs	r3, #128	; 0x80
 80066bc:	015b      	lsls	r3, r3, #5
 80066be:	429a      	cmp	r2, r3
 80066c0:	d10d      	bne.n	80066de <UART_Start_Receive_IT+0x56>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	691b      	ldr	r3, [r3, #16]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d104      	bne.n	80066d4 <UART_Start_Receive_IT+0x4c>
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2260      	movs	r2, #96	; 0x60
 80066ce:	497b      	ldr	r1, [pc, #492]	; (80068bc <UART_Start_Receive_IT+0x234>)
 80066d0:	5299      	strh	r1, [r3, r2]
 80066d2:	e02e      	b.n	8006732 <UART_Start_Receive_IT+0xaa>
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2260      	movs	r2, #96	; 0x60
 80066d8:	21ff      	movs	r1, #255	; 0xff
 80066da:	5299      	strh	r1, [r3, r2]
 80066dc:	e029      	b.n	8006732 <UART_Start_Receive_IT+0xaa>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d10d      	bne.n	8006702 <UART_Start_Receive_IT+0x7a>
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	691b      	ldr	r3, [r3, #16]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d104      	bne.n	80066f8 <UART_Start_Receive_IT+0x70>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2260      	movs	r2, #96	; 0x60
 80066f2:	21ff      	movs	r1, #255	; 0xff
 80066f4:	5299      	strh	r1, [r3, r2]
 80066f6:	e01c      	b.n	8006732 <UART_Start_Receive_IT+0xaa>
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	2260      	movs	r2, #96	; 0x60
 80066fc:	217f      	movs	r1, #127	; 0x7f
 80066fe:	5299      	strh	r1, [r3, r2]
 8006700:	e017      	b.n	8006732 <UART_Start_Receive_IT+0xaa>
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	2380      	movs	r3, #128	; 0x80
 8006708:	055b      	lsls	r3, r3, #21
 800670a:	429a      	cmp	r2, r3
 800670c:	d10d      	bne.n	800672a <UART_Start_Receive_IT+0xa2>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	691b      	ldr	r3, [r3, #16]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d104      	bne.n	8006720 <UART_Start_Receive_IT+0x98>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	2260      	movs	r2, #96	; 0x60
 800671a:	217f      	movs	r1, #127	; 0x7f
 800671c:	5299      	strh	r1, [r3, r2]
 800671e:	e008      	b.n	8006732 <UART_Start_Receive_IT+0xaa>
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2260      	movs	r2, #96	; 0x60
 8006724:	213f      	movs	r1, #63	; 0x3f
 8006726:	5299      	strh	r1, [r3, r2]
 8006728:	e003      	b.n	8006732 <UART_Start_Receive_IT+0xaa>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2260      	movs	r2, #96	; 0x60
 800672e:	2100      	movs	r1, #0
 8006730:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2290      	movs	r2, #144	; 0x90
 8006736:	2100      	movs	r1, #0
 8006738:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	228c      	movs	r2, #140	; 0x8c
 800673e:	2122      	movs	r1, #34	; 0x22
 8006740:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006742:	f3ef 8310 	mrs	r3, PRIMASK
 8006746:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006748:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800674a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800674c:	2301      	movs	r3, #1
 800674e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006750:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006752:	f383 8810 	msr	PRIMASK, r3
}
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689a      	ldr	r2, [r3, #8]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	2101      	movs	r1, #1
 8006764:	430a      	orrs	r2, r1
 8006766:	609a      	str	r2, [r3, #8]
 8006768:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800676a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800676c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800676e:	f383 8810 	msr	PRIMASK, r3
}
 8006772:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006778:	2380      	movs	r3, #128	; 0x80
 800677a:	059b      	lsls	r3, r3, #22
 800677c:	429a      	cmp	r2, r3
 800677e:	d150      	bne.n	8006822 <UART_Start_Receive_IT+0x19a>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2268      	movs	r2, #104	; 0x68
 8006784:	5a9b      	ldrh	r3, [r3, r2]
 8006786:	1dba      	adds	r2, r7, #6
 8006788:	8812      	ldrh	r2, [r2, #0]
 800678a:	429a      	cmp	r2, r3
 800678c:	d349      	bcc.n	8006822 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	2380      	movs	r3, #128	; 0x80
 8006794:	015b      	lsls	r3, r3, #5
 8006796:	429a      	cmp	r2, r3
 8006798:	d107      	bne.n	80067aa <UART_Start_Receive_IT+0x122>
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	691b      	ldr	r3, [r3, #16]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d103      	bne.n	80067aa <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	4a46      	ldr	r2, [pc, #280]	; (80068c0 <UART_Start_Receive_IT+0x238>)
 80067a6:	675a      	str	r2, [r3, #116]	; 0x74
 80067a8:	e002      	b.n	80067b0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	4a45      	ldr	r2, [pc, #276]	; (80068c4 <UART_Start_Receive_IT+0x23c>)
 80067ae:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	691b      	ldr	r3, [r3, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d019      	beq.n	80067ec <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067b8:	f3ef 8310 	mrs	r3, PRIMASK
 80067bc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80067be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80067c0:	65bb      	str	r3, [r7, #88]	; 0x58
 80067c2:	2301      	movs	r3, #1
 80067c4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	f383 8810 	msr	PRIMASK, r3
}
 80067cc:	46c0      	nop			; (mov r8, r8)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	681a      	ldr	r2, [r3, #0]
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	2180      	movs	r1, #128	; 0x80
 80067da:	0049      	lsls	r1, r1, #1
 80067dc:	430a      	orrs	r2, r1
 80067de:	601a      	str	r2, [r3, #0]
 80067e0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067e6:	f383 8810 	msr	PRIMASK, r3
}
 80067ea:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067ec:	f3ef 8310 	mrs	r3, PRIMASK
 80067f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80067f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80067f4:	657b      	str	r3, [r7, #84]	; 0x54
 80067f6:	2301      	movs	r3, #1
 80067f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067fc:	f383 8810 	msr	PRIMASK, r3
}
 8006800:	46c0      	nop			; (mov r8, r8)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2180      	movs	r1, #128	; 0x80
 800680e:	0549      	lsls	r1, r1, #21
 8006810:	430a      	orrs	r2, r1
 8006812:	609a      	str	r2, [r3, #8]
 8006814:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006816:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681a:	f383 8810 	msr	PRIMASK, r3
}
 800681e:	46c0      	nop			; (mov r8, r8)
 8006820:	e047      	b.n	80068b2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	689a      	ldr	r2, [r3, #8]
 8006826:	2380      	movs	r3, #128	; 0x80
 8006828:	015b      	lsls	r3, r3, #5
 800682a:	429a      	cmp	r2, r3
 800682c:	d107      	bne.n	800683e <UART_Start_Receive_IT+0x1b6>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d103      	bne.n	800683e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	4a23      	ldr	r2, [pc, #140]	; (80068c8 <UART_Start_Receive_IT+0x240>)
 800683a:	675a      	str	r2, [r3, #116]	; 0x74
 800683c:	e002      	b.n	8006844 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	4a22      	ldr	r2, [pc, #136]	; (80068cc <UART_Start_Receive_IT+0x244>)
 8006842:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	691b      	ldr	r3, [r3, #16]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d019      	beq.n	8006880 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800684c:	f3ef 8310 	mrs	r3, PRIMASK
 8006850:	61fb      	str	r3, [r7, #28]
  return(result);
 8006852:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006856:	2301      	movs	r3, #1
 8006858:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800685a:	6a3b      	ldr	r3, [r7, #32]
 800685c:	f383 8810 	msr	PRIMASK, r3
}
 8006860:	46c0      	nop			; (mov r8, r8)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2190      	movs	r1, #144	; 0x90
 800686e:	0049      	lsls	r1, r1, #1
 8006870:	430a      	orrs	r2, r1
 8006872:	601a      	str	r2, [r3, #0]
 8006874:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	f383 8810 	msr	PRIMASK, r3
}
 800687e:	e018      	b.n	80068b2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006880:	f3ef 8310 	mrs	r3, PRIMASK
 8006884:	613b      	str	r3, [r7, #16]
  return(result);
 8006886:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006888:	653b      	str	r3, [r7, #80]	; 0x50
 800688a:	2301      	movs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	f383 8810 	msr	PRIMASK, r3
}
 8006894:	46c0      	nop			; (mov r8, r8)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2120      	movs	r1, #32
 80068a2:	430a      	orrs	r2, r1
 80068a4:	601a      	str	r2, [r3, #0]
 80068a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80068a8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80068aa:	69bb      	ldr	r3, [r7, #24]
 80068ac:	f383 8810 	msr	PRIMASK, r3
}
 80068b0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 80068b2:	2300      	movs	r3, #0
}
 80068b4:	0018      	movs	r0, r3
 80068b6:	46bd      	mov	sp, r7
 80068b8:	b018      	add	sp, #96	; 0x60
 80068ba:	bd80      	pop	{r7, pc}
 80068bc:	000001ff 	.word	0x000001ff
 80068c0:	08007741 	.word	0x08007741
 80068c4:	08007455 	.word	0x08007455
 80068c8:	080072e1 	.word	0x080072e1
 80068cc:	0800716d 	.word	0x0800716d

080068d0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b090      	sub	sp, #64	; 0x40
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	1dbb      	adds	r3, r7, #6
 80068dc:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	68ba      	ldr	r2, [r7, #8]
 80068e2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	1dba      	adds	r2, r7, #6
 80068e8:	215c      	movs	r1, #92	; 0x5c
 80068ea:	8812      	ldrh	r2, [r2, #0]
 80068ec:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2290      	movs	r2, #144	; 0x90
 80068f2:	2100      	movs	r1, #0
 80068f4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	228c      	movs	r2, #140	; 0x8c
 80068fa:	2122      	movs	r1, #34	; 0x22
 80068fc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2280      	movs	r2, #128	; 0x80
 8006902:	589b      	ldr	r3, [r3, r2]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d02d      	beq.n	8006964 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2280      	movs	r2, #128	; 0x80
 800690c:	589b      	ldr	r3, [r3, r2]
 800690e:	4a40      	ldr	r2, [pc, #256]	; (8006a10 <UART_Start_Receive_DMA+0x140>)
 8006910:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	2280      	movs	r2, #128	; 0x80
 8006916:	589b      	ldr	r3, [r3, r2]
 8006918:	4a3e      	ldr	r2, [pc, #248]	; (8006a14 <UART_Start_Receive_DMA+0x144>)
 800691a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2280      	movs	r2, #128	; 0x80
 8006920:	589b      	ldr	r3, [r3, r2]
 8006922:	4a3d      	ldr	r2, [pc, #244]	; (8006a18 <UART_Start_Receive_DMA+0x148>)
 8006924:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	2280      	movs	r2, #128	; 0x80
 800692a:	589b      	ldr	r3, [r3, r2]
 800692c:	2200      	movs	r2, #0
 800692e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2280      	movs	r2, #128	; 0x80
 8006934:	5898      	ldr	r0, [r3, r2]
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	3324      	adds	r3, #36	; 0x24
 800693c:	0019      	movs	r1, r3
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006942:	001a      	movs	r2, r3
 8006944:	1dbb      	adds	r3, r7, #6
 8006946:	881b      	ldrh	r3, [r3, #0]
 8006948:	f7fc fc4e 	bl	80031e8 <HAL_DMA_Start_IT>
 800694c:	1e03      	subs	r3, r0, #0
 800694e:	d009      	beq.n	8006964 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2290      	movs	r2, #144	; 0x90
 8006954:	2110      	movs	r1, #16
 8006956:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	228c      	movs	r2, #140	; 0x8c
 800695c:	2120      	movs	r1, #32
 800695e:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8006960:	2301      	movs	r3, #1
 8006962:	e050      	b.n	8006a06 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d019      	beq.n	80069a0 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800696c:	f3ef 8310 	mrs	r3, PRIMASK
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006974:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006976:	2301      	movs	r3, #1
 8006978:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800697a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800697c:	f383 8810 	msr	PRIMASK, r3
}
 8006980:	46c0      	nop			; (mov r8, r8)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2180      	movs	r1, #128	; 0x80
 800698e:	0049      	lsls	r1, r1, #1
 8006990:	430a      	orrs	r2, r1
 8006992:	601a      	str	r2, [r3, #0]
 8006994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006996:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800699a:	f383 8810 	msr	PRIMASK, r3
}
 800699e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069a0:	f3ef 8310 	mrs	r3, PRIMASK
 80069a4:	613b      	str	r3, [r7, #16]
  return(result);
 80069a6:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80069aa:	2301      	movs	r3, #1
 80069ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	f383 8810 	msr	PRIMASK, r3
}
 80069b4:	46c0      	nop			; (mov r8, r8)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	689a      	ldr	r2, [r3, #8]
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	2101      	movs	r1, #1
 80069c2:	430a      	orrs	r2, r1
 80069c4:	609a      	str	r2, [r3, #8]
 80069c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069ca:	69bb      	ldr	r3, [r7, #24]
 80069cc:	f383 8810 	msr	PRIMASK, r3
}
 80069d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069d2:	f3ef 8310 	mrs	r3, PRIMASK
 80069d6:	61fb      	str	r3, [r7, #28]
  return(result);
 80069d8:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069da:	637b      	str	r3, [r7, #52]	; 0x34
 80069dc:	2301      	movs	r3, #1
 80069de:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e0:	6a3b      	ldr	r3, [r7, #32]
 80069e2:	f383 8810 	msr	PRIMASK, r3
}
 80069e6:	46c0      	nop			; (mov r8, r8)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	689a      	ldr	r2, [r3, #8]
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	2140      	movs	r1, #64	; 0x40
 80069f4:	430a      	orrs	r2, r1
 80069f6:	609a      	str	r2, [r3, #8]
 80069f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069fa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fe:	f383 8810 	msr	PRIMASK, r3
}
 8006a02:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8006a04:	2300      	movs	r3, #0
}
 8006a06:	0018      	movs	r0, r3
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	b010      	add	sp, #64	; 0x40
 8006a0c:	bd80      	pop	{r7, pc}
 8006a0e:	46c0      	nop			; (mov r8, r8)
 8006a10:	08006c21 	.word	0x08006c21
 8006a14:	08006d51 	.word	0x08006d51
 8006a18:	08006d93 	.word	0x08006d93

08006a1c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b08a      	sub	sp, #40	; 0x28
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a24:	f3ef 8310 	mrs	r3, PRIMASK
 8006a28:	60bb      	str	r3, [r7, #8]
  return(result);
 8006a2a:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006a2c:	627b      	str	r3, [r7, #36]	; 0x24
 8006a2e:	2301      	movs	r3, #1
 8006a30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	f383 8810 	msr	PRIMASK, r3
}
 8006a38:	46c0      	nop			; (mov r8, r8)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	21c0      	movs	r1, #192	; 0xc0
 8006a46:	438a      	bics	r2, r1
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	f383 8810 	msr	PRIMASK, r3
}
 8006a54:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a56:	f3ef 8310 	mrs	r3, PRIMASK
 8006a5a:	617b      	str	r3, [r7, #20]
  return(result);
 8006a5c:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006a5e:	623b      	str	r3, [r7, #32]
 8006a60:	2301      	movs	r3, #1
 8006a62:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f383 8810 	msr	PRIMASK, r3
}
 8006a6a:	46c0      	nop			; (mov r8, r8)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	689a      	ldr	r2, [r3, #8]
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	681b      	ldr	r3, [r3, #0]
 8006a76:	4908      	ldr	r1, [pc, #32]	; (8006a98 <UART_EndTxTransfer+0x7c>)
 8006a78:	400a      	ands	r2, r1
 8006a7a:	609a      	str	r2, [r3, #8]
 8006a7c:	6a3b      	ldr	r3, [r7, #32]
 8006a7e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f383 8810 	msr	PRIMASK, r3
}
 8006a86:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2288      	movs	r2, #136	; 0x88
 8006a8c:	2120      	movs	r1, #32
 8006a8e:	5099      	str	r1, [r3, r2]
}
 8006a90:	46c0      	nop			; (mov r8, r8)
 8006a92:	46bd      	mov	sp, r7
 8006a94:	b00a      	add	sp, #40	; 0x28
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	ff7fffff 	.word	0xff7fffff

08006a9c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08e      	sub	sp, #56	; 0x38
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa8:	617b      	str	r3, [r7, #20]
  return(result);
 8006aaa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aac:	637b      	str	r3, [r7, #52]	; 0x34
 8006aae:	2301      	movs	r3, #1
 8006ab0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	f383 8810 	msr	PRIMASK, r3
}
 8006ab8:	46c0      	nop			; (mov r8, r8)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	4926      	ldr	r1, [pc, #152]	; (8006b60 <UART_EndRxTransfer+0xc4>)
 8006ac6:	400a      	ands	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006acc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ace:	69fb      	ldr	r3, [r7, #28]
 8006ad0:	f383 8810 	msr	PRIMASK, r3
}
 8006ad4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ad6:	f3ef 8310 	mrs	r3, PRIMASK
 8006ada:	623b      	str	r3, [r7, #32]
  return(result);
 8006adc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ade:	633b      	str	r3, [r7, #48]	; 0x30
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	f383 8810 	msr	PRIMASK, r3
}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	689a      	ldr	r2, [r3, #8]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	491b      	ldr	r1, [pc, #108]	; (8006b64 <UART_EndRxTransfer+0xc8>)
 8006af8:	400a      	ands	r2, r1
 8006afa:	609a      	str	r2, [r3, #8]
 8006afc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006afe:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b02:	f383 8810 	msr	PRIMASK, r3
}
 8006b06:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d118      	bne.n	8006b42 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b10:	f3ef 8310 	mrs	r3, PRIMASK
 8006b14:	60bb      	str	r3, [r7, #8]
  return(result);
 8006b16:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b1a:	2301      	movs	r3, #1
 8006b1c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	f383 8810 	msr	PRIMASK, r3
}
 8006b24:	46c0      	nop			; (mov r8, r8)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	681a      	ldr	r2, [r3, #0]
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	2110      	movs	r1, #16
 8006b32:	438a      	bics	r2, r1
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b3a:	693b      	ldr	r3, [r7, #16]
 8006b3c:	f383 8810 	msr	PRIMASK, r3
}
 8006b40:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	228c      	movs	r2, #140	; 0x8c
 8006b46:	2120      	movs	r1, #32
 8006b48:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006b56:	46c0      	nop			; (mov r8, r8)
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	b00e      	add	sp, #56	; 0x38
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	46c0      	nop			; (mov r8, r8)
 8006b60:	fffffedf 	.word	0xfffffedf
 8006b64:	effffffe 	.word	0xeffffffe

08006b68 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08c      	sub	sp, #48	; 0x30
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b74:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	2220      	movs	r2, #32
 8006b7e:	4013      	ands	r3, r2
 8006b80:	d135      	bne.n	8006bee <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	2256      	movs	r2, #86	; 0x56
 8006b86:	2100      	movs	r1, #0
 8006b88:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b8a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b8e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b90:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b94:	2301      	movs	r3, #1
 8006b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b98:	693b      	ldr	r3, [r7, #16]
 8006b9a:	f383 8810 	msr	PRIMASK, r3
}
 8006b9e:	46c0      	nop			; (mov r8, r8)
 8006ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2180      	movs	r1, #128	; 0x80
 8006bac:	438a      	bics	r2, r1
 8006bae:	609a      	str	r2, [r3, #8]
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f383 8810 	msr	PRIMASK, r3
}
 8006bba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bbc:	f3ef 8310 	mrs	r3, PRIMASK
 8006bc0:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bc2:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006bc4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006bca:	69fb      	ldr	r3, [r7, #28]
 8006bcc:	f383 8810 	msr	PRIMASK, r3
}
 8006bd0:	46c0      	nop			; (mov r8, r8)
 8006bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2140      	movs	r1, #64	; 0x40
 8006bde:	430a      	orrs	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f383 8810 	msr	PRIMASK, r3
}
 8006bec:	e004      	b.n	8006bf8 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8006bee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf0:	0018      	movs	r0, r3
 8006bf2:	f7ff f9b8 	bl	8005f66 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006bf6:	46c0      	nop			; (mov r8, r8)
 8006bf8:	46c0      	nop			; (mov r8, r8)
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	b00c      	add	sp, #48	; 0x30
 8006bfe:	bd80      	pop	{r7, pc}

08006c00 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b084      	sub	sp, #16
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c0c:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	0018      	movs	r0, r3
 8006c12:	f7ff f9b0 	bl	8005f76 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006c16:	46c0      	nop			; (mov r8, r8)
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	b004      	add	sp, #16
 8006c1c:	bd80      	pop	{r7, pc}
	...

08006c20 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b094      	sub	sp, #80	; 0x50
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2c:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2220      	movs	r2, #32
 8006c36:	4013      	ands	r3, r2
 8006c38:	d16f      	bne.n	8006d1a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006c3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3c:	225e      	movs	r2, #94	; 0x5e
 8006c3e:	2100      	movs	r1, #0
 8006c40:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c42:	f3ef 8310 	mrs	r3, PRIMASK
 8006c46:	61bb      	str	r3, [r7, #24]
  return(result);
 8006c48:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c4a:	64bb      	str	r3, [r7, #72]	; 0x48
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c50:	69fb      	ldr	r3, [r7, #28]
 8006c52:	f383 8810 	msr	PRIMASK, r3
}
 8006c56:	46c0      	nop			; (mov r8, r8)
 8006c58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	493a      	ldr	r1, [pc, #232]	; (8006d4c <UART_DMAReceiveCplt+0x12c>)
 8006c64:	400a      	ands	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]
 8006c68:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	f383 8810 	msr	PRIMASK, r3
}
 8006c72:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c74:	f3ef 8310 	mrs	r3, PRIMASK
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7c:	647b      	str	r3, [r7, #68]	; 0x44
 8006c7e:	2301      	movs	r3, #1
 8006c80:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	f383 8810 	msr	PRIMASK, r3
}
 8006c88:	46c0      	nop			; (mov r8, r8)
 8006c8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	689a      	ldr	r2, [r3, #8]
 8006c90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	2101      	movs	r1, #1
 8006c96:	438a      	bics	r2, r1
 8006c98:	609a      	str	r2, [r3, #8]
 8006c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ca0:	f383 8810 	msr	PRIMASK, r3
}
 8006ca4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ca6:	f3ef 8310 	mrs	r3, PRIMASK
 8006caa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006cae:	643b      	str	r3, [r7, #64]	; 0x40
 8006cb0:	2301      	movs	r3, #1
 8006cb2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006cb6:	f383 8810 	msr	PRIMASK, r3
}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	689a      	ldr	r2, [r3, #8]
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2140      	movs	r1, #64	; 0x40
 8006cc8:	438a      	bics	r2, r1
 8006cca:	609a      	str	r2, [r3, #8]
 8006ccc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006cce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cd2:	f383 8810 	msr	PRIMASK, r3
}
 8006cd6:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cda:	228c      	movs	r2, #140	; 0x8c
 8006cdc:	2120      	movs	r1, #32
 8006cde:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d118      	bne.n	8006d1a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ce8:	f3ef 8310 	mrs	r3, PRIMASK
 8006cec:	60fb      	str	r3, [r7, #12]
  return(result);
 8006cee:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cf6:	693b      	ldr	r3, [r7, #16]
 8006cf8:	f383 8810 	msr	PRIMASK, r3
}
 8006cfc:	46c0      	nop			; (mov r8, r8)
 8006cfe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	681a      	ldr	r2, [r3, #0]
 8006d04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2110      	movs	r1, #16
 8006d0a:	438a      	bics	r2, r1
 8006d0c:	601a      	str	r2, [r3, #0]
 8006d0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d10:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f383 8810 	msr	PRIMASK, r3
}
 8006d18:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d24:	2b01      	cmp	r3, #1
 8006d26:	d108      	bne.n	8006d3a <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d2a:	225c      	movs	r2, #92	; 0x5c
 8006d2c:	5a9a      	ldrh	r2, [r3, r2]
 8006d2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d30:	0011      	movs	r1, r2
 8006d32:	0018      	movs	r0, r3
 8006d34:	f7ff f92f 	bl	8005f96 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d38:	e003      	b.n	8006d42 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006d3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d3c:	0018      	movs	r0, r3
 8006d3e:	f7fa fb47 	bl	80013d0 <HAL_UART_RxCpltCallback>
}
 8006d42:	46c0      	nop			; (mov r8, r8)
 8006d44:	46bd      	mov	sp, r7
 8006d46:	b014      	add	sp, #80	; 0x50
 8006d48:	bd80      	pop	{r7, pc}
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	fffffeff 	.word	0xfffffeff

08006d50 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b084      	sub	sp, #16
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d5c:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2201      	movs	r2, #1
 8006d62:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d68:	2b01      	cmp	r3, #1
 8006d6a:	d10a      	bne.n	8006d82 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	225c      	movs	r2, #92	; 0x5c
 8006d70:	5a9b      	ldrh	r3, [r3, r2]
 8006d72:	085b      	lsrs	r3, r3, #1
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	0011      	movs	r1, r2
 8006d7a:	0018      	movs	r0, r3
 8006d7c:	f7ff f90b 	bl	8005f96 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d80:	e003      	b.n	8006d8a <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	0018      	movs	r0, r3
 8006d86:	f7fa fb05 	bl	8001394 <HAL_UART_RxHalfCpltCallback>
}
 8006d8a:	46c0      	nop			; (mov r8, r8)
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	b004      	add	sp, #16
 8006d90:	bd80      	pop	{r7, pc}

08006d92 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d92:	b580      	push	{r7, lr}
 8006d94:	b086      	sub	sp, #24
 8006d96:	af00      	add	r7, sp, #0
 8006d98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d9e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006da0:	697b      	ldr	r3, [r7, #20]
 8006da2:	2288      	movs	r2, #136	; 0x88
 8006da4:	589b      	ldr	r3, [r3, r2]
 8006da6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	228c      	movs	r2, #140	; 0x8c
 8006dac:	589b      	ldr	r3, [r3, r2]
 8006dae:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	2280      	movs	r2, #128	; 0x80
 8006db8:	4013      	ands	r3, r2
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d10a      	bne.n	8006dd4 <UART_DMAError+0x42>
 8006dbe:	693b      	ldr	r3, [r7, #16]
 8006dc0:	2b21      	cmp	r3, #33	; 0x21
 8006dc2:	d107      	bne.n	8006dd4 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	2256      	movs	r2, #86	; 0x56
 8006dc8:	2100      	movs	r1, #0
 8006dca:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006dcc:	697b      	ldr	r3, [r7, #20]
 8006dce:	0018      	movs	r0, r3
 8006dd0:	f7ff fe24 	bl	8006a1c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	2240      	movs	r2, #64	; 0x40
 8006ddc:	4013      	ands	r3, r2
 8006dde:	2b40      	cmp	r3, #64	; 0x40
 8006de0:	d10a      	bne.n	8006df8 <UART_DMAError+0x66>
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	2b22      	cmp	r3, #34	; 0x22
 8006de6:	d107      	bne.n	8006df8 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006de8:	697b      	ldr	r3, [r7, #20]
 8006dea:	225e      	movs	r2, #94	; 0x5e
 8006dec:	2100      	movs	r1, #0
 8006dee:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	0018      	movs	r0, r3
 8006df4:	f7ff fe52 	bl	8006a9c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006df8:	697b      	ldr	r3, [r7, #20]
 8006dfa:	2290      	movs	r2, #144	; 0x90
 8006dfc:	589b      	ldr	r3, [r3, r2]
 8006dfe:	2210      	movs	r2, #16
 8006e00:	431a      	orrs	r2, r3
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2190      	movs	r1, #144	; 0x90
 8006e06:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006e08:	697b      	ldr	r3, [r7, #20]
 8006e0a:	0018      	movs	r0, r3
 8006e0c:	f7ff f8bb 	bl	8005f86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	46bd      	mov	sp, r7
 8006e14:	b006      	add	sp, #24
 8006e16:	bd80      	pop	{r7, pc}

08006e18 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b08a      	sub	sp, #40	; 0x28
 8006e1c:	af00      	add	r7, sp, #0
 8006e1e:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2288      	movs	r2, #136	; 0x88
 8006e24:	589b      	ldr	r3, [r3, r2]
 8006e26:	2b21      	cmp	r3, #33	; 0x21
 8006e28:	d14c      	bne.n	8006ec4 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2256      	movs	r2, #86	; 0x56
 8006e2e:	5a9b      	ldrh	r3, [r3, r2]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d132      	bne.n	8006e9c <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e36:	f3ef 8310 	mrs	r3, PRIMASK
 8006e3a:	60bb      	str	r3, [r7, #8]
  return(result);
 8006e3c:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e3e:	627b      	str	r3, [r7, #36]	; 0x24
 8006e40:	2301      	movs	r3, #1
 8006e42:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f383 8810 	msr	PRIMASK, r3
}
 8006e4a:	46c0      	nop			; (mov r8, r8)
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2180      	movs	r1, #128	; 0x80
 8006e58:	438a      	bics	r2, r1
 8006e5a:	601a      	str	r2, [r3, #0]
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e5e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f383 8810 	msr	PRIMASK, r3
}
 8006e66:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e68:	f3ef 8310 	mrs	r3, PRIMASK
 8006e6c:	617b      	str	r3, [r7, #20]
  return(result);
 8006e6e:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e70:	623b      	str	r3, [r7, #32]
 8006e72:	2301      	movs	r3, #1
 8006e74:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e76:	69bb      	ldr	r3, [r7, #24]
 8006e78:	f383 8810 	msr	PRIMASK, r3
}
 8006e7c:	46c0      	nop			; (mov r8, r8)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	681a      	ldr	r2, [r3, #0]
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	2140      	movs	r1, #64	; 0x40
 8006e8a:	430a      	orrs	r2, r1
 8006e8c:	601a      	str	r2, [r3, #0]
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e92:	69fb      	ldr	r3, [r7, #28]
 8006e94:	f383 8810 	msr	PRIMASK, r3
}
 8006e98:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006e9a:	e013      	b.n	8006ec4 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ea0:	781a      	ldrb	r2, [r3, #0]
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eac:	1c5a      	adds	r2, r3, #1
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2256      	movs	r2, #86	; 0x56
 8006eb6:	5a9b      	ldrh	r3, [r3, r2]
 8006eb8:	b29b      	uxth	r3, r3
 8006eba:	3b01      	subs	r3, #1
 8006ebc:	b299      	uxth	r1, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2256      	movs	r2, #86	; 0x56
 8006ec2:	5299      	strh	r1, [r3, r2]
}
 8006ec4:	46c0      	nop			; (mov r8, r8)
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	b00a      	add	sp, #40	; 0x28
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b08c      	sub	sp, #48	; 0x30
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2288      	movs	r2, #136	; 0x88
 8006ed8:	589b      	ldr	r3, [r3, r2]
 8006eda:	2b21      	cmp	r3, #33	; 0x21
 8006edc:	d151      	bne.n	8006f82 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2256      	movs	r2, #86	; 0x56
 8006ee2:	5a9b      	ldrh	r3, [r3, r2]
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d132      	bne.n	8006f50 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eea:	f3ef 8310 	mrs	r3, PRIMASK
 8006eee:	60fb      	str	r3, [r7, #12]
  return(result);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f383 8810 	msr	PRIMASK, r3
}
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2180      	movs	r1, #128	; 0x80
 8006f0c:	438a      	bics	r2, r1
 8006f0e:	601a      	str	r2, [r3, #0]
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f383 8810 	msr	PRIMASK, r3
}
 8006f1a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f1c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f20:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f22:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f24:	627b      	str	r3, [r7, #36]	; 0x24
 8006f26:	2301      	movs	r3, #1
 8006f28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	f383 8810 	msr	PRIMASK, r3
}
 8006f30:	46c0      	nop			; (mov r8, r8)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	2140      	movs	r1, #64	; 0x40
 8006f3e:	430a      	orrs	r2, r1
 8006f40:	601a      	str	r2, [r3, #0]
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f46:	6a3b      	ldr	r3, [r7, #32]
 8006f48:	f383 8810 	msr	PRIMASK, r3
}
 8006f4c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006f4e:	e018      	b.n	8006f82 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f54:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f58:	881b      	ldrh	r3, [r3, #0]
 8006f5a:	001a      	movs	r2, r3
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	05d2      	lsls	r2, r2, #23
 8006f62:	0dd2      	lsrs	r2, r2, #23
 8006f64:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f6a:	1c9a      	adds	r2, r3, #2
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	2256      	movs	r2, #86	; 0x56
 8006f74:	5a9b      	ldrh	r3, [r3, r2]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	3b01      	subs	r3, #1
 8006f7a:	b299      	uxth	r1, r3
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2256      	movs	r2, #86	; 0x56
 8006f80:	5299      	strh	r1, [r3, r2]
}
 8006f82:	46c0      	nop			; (mov r8, r8)
 8006f84:	46bd      	mov	sp, r7
 8006f86:	b00c      	add	sp, #48	; 0x30
 8006f88:	bd80      	pop	{r7, pc}
	...

08006f8c <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f8c:	b580      	push	{r7, lr}
 8006f8e:	b08c      	sub	sp, #48	; 0x30
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2288      	movs	r2, #136	; 0x88
 8006f98:	589b      	ldr	r3, [r3, r2]
 8006f9a:	2b21      	cmp	r3, #33	; 0x21
 8006f9c:	d165      	bne.n	800706a <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f9e:	232e      	movs	r3, #46	; 0x2e
 8006fa0:	18fb      	adds	r3, r7, r3
 8006fa2:	687a      	ldr	r2, [r7, #4]
 8006fa4:	216a      	movs	r1, #106	; 0x6a
 8006fa6:	5a52      	ldrh	r2, [r2, r1]
 8006fa8:	801a      	strh	r2, [r3, #0]
 8006faa:	e059      	b.n	8007060 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2256      	movs	r2, #86	; 0x56
 8006fb0:	5a9b      	ldrh	r3, [r3, r2]
 8006fb2:	b29b      	uxth	r3, r3
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d133      	bne.n	8007020 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8006fbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006fc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8006fc2:	2301      	movs	r3, #1
 8006fc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc6:	693b      	ldr	r3, [r7, #16]
 8006fc8:	f383 8810 	msr	PRIMASK, r3
}
 8006fcc:	46c0      	nop			; (mov r8, r8)
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	689a      	ldr	r2, [r3, #8]
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4926      	ldr	r1, [pc, #152]	; (8007074 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8006fda:	400a      	ands	r2, r1
 8006fdc:	609a      	str	r2, [r3, #8]
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f383 8810 	msr	PRIMASK, r3
}
 8006fe8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fea:	f3ef 8310 	mrs	r3, PRIMASK
 8006fee:	61bb      	str	r3, [r7, #24]
  return(result);
 8006ff0:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ff4:	2301      	movs	r3, #1
 8006ff6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ff8:	69fb      	ldr	r3, [r7, #28]
 8006ffa:	f383 8810 	msr	PRIMASK, r3
}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	681a      	ldr	r2, [r3, #0]
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2140      	movs	r1, #64	; 0x40
 800700c:	430a      	orrs	r2, r1
 800700e:	601a      	str	r2, [r3, #0]
 8007010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007012:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007014:	6a3b      	ldr	r3, [r7, #32]
 8007016:	f383 8810 	msr	PRIMASK, r3
}
 800701a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800701c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800701e:	e024      	b.n	800706a <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	69db      	ldr	r3, [r3, #28]
 8007026:	2280      	movs	r2, #128	; 0x80
 8007028:	4013      	ands	r3, r2
 800702a:	d013      	beq.n	8007054 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007030:	781a      	ldrb	r2, [r3, #0]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800703c:	1c5a      	adds	r2, r3, #1
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2256      	movs	r2, #86	; 0x56
 8007046:	5a9b      	ldrh	r3, [r3, r2]
 8007048:	b29b      	uxth	r3, r3
 800704a:	3b01      	subs	r3, #1
 800704c:	b299      	uxth	r1, r3
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2256      	movs	r2, #86	; 0x56
 8007052:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007054:	212e      	movs	r1, #46	; 0x2e
 8007056:	187b      	adds	r3, r7, r1
 8007058:	881a      	ldrh	r2, [r3, #0]
 800705a:	187b      	adds	r3, r7, r1
 800705c:	3a01      	subs	r2, #1
 800705e:	801a      	strh	r2, [r3, #0]
 8007060:	232e      	movs	r3, #46	; 0x2e
 8007062:	18fb      	adds	r3, r7, r3
 8007064:	881b      	ldrh	r3, [r3, #0]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d1a0      	bne.n	8006fac <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800706a:	46c0      	nop			; (mov r8, r8)
 800706c:	46bd      	mov	sp, r7
 800706e:	b00c      	add	sp, #48	; 0x30
 8007070:	bd80      	pop	{r7, pc}
 8007072:	46c0      	nop			; (mov r8, r8)
 8007074:	ff7fffff 	.word	0xff7fffff

08007078 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b08c      	sub	sp, #48	; 0x30
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2288      	movs	r2, #136	; 0x88
 8007084:	589b      	ldr	r3, [r3, r2]
 8007086:	2b21      	cmp	r3, #33	; 0x21
 8007088:	d16a      	bne.n	8007160 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800708a:	232e      	movs	r3, #46	; 0x2e
 800708c:	18fb      	adds	r3, r7, r3
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	216a      	movs	r1, #106	; 0x6a
 8007092:	5a52      	ldrh	r2, [r2, r1]
 8007094:	801a      	strh	r2, [r3, #0]
 8007096:	e05e      	b.n	8007156 <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2256      	movs	r2, #86	; 0x56
 800709c:	5a9b      	ldrh	r3, [r3, r2]
 800709e:	b29b      	uxth	r3, r3
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d133      	bne.n	800710c <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070a4:	f3ef 8310 	mrs	r3, PRIMASK
 80070a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80070aa:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80070ac:	627b      	str	r3, [r7, #36]	; 0x24
 80070ae:	2301      	movs	r3, #1
 80070b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	f383 8810 	msr	PRIMASK, r3
}
 80070b8:	46c0      	nop			; (mov r8, r8)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	689a      	ldr	r2, [r3, #8]
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4928      	ldr	r1, [pc, #160]	; (8007168 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 80070c6:	400a      	ands	r2, r1
 80070c8:	609a      	str	r2, [r3, #8]
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f383 8810 	msr	PRIMASK, r3
}
 80070d4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070d6:	f3ef 8310 	mrs	r3, PRIMASK
 80070da:	617b      	str	r3, [r7, #20]
  return(result);
 80070dc:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80070de:	623b      	str	r3, [r7, #32]
 80070e0:	2301      	movs	r3, #1
 80070e2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070e4:	69bb      	ldr	r3, [r7, #24]
 80070e6:	f383 8810 	msr	PRIMASK, r3
}
 80070ea:	46c0      	nop			; (mov r8, r8)
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2140      	movs	r1, #64	; 0x40
 80070f8:	430a      	orrs	r2, r1
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	6a3b      	ldr	r3, [r7, #32]
 80070fe:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007100:	69fb      	ldr	r3, [r7, #28]
 8007102:	f383 8810 	msr	PRIMASK, r3
}
 8007106:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8007108:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800710a:	e029      	b.n	8007160 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	69db      	ldr	r3, [r3, #28]
 8007112:	2280      	movs	r2, #128	; 0x80
 8007114:	4013      	ands	r3, r2
 8007116:	d018      	beq.n	800714a <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800711c:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800711e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007120:	881b      	ldrh	r3, [r3, #0]
 8007122:	001a      	movs	r2, r3
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	05d2      	lsls	r2, r2, #23
 800712a:	0dd2      	lsrs	r2, r2, #23
 800712c:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007132:	1c9a      	adds	r2, r3, #2
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2256      	movs	r2, #86	; 0x56
 800713c:	5a9b      	ldrh	r3, [r3, r2]
 800713e:	b29b      	uxth	r3, r3
 8007140:	3b01      	subs	r3, #1
 8007142:	b299      	uxth	r1, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2256      	movs	r2, #86	; 0x56
 8007148:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800714a:	212e      	movs	r1, #46	; 0x2e
 800714c:	187b      	adds	r3, r7, r1
 800714e:	881a      	ldrh	r2, [r3, #0]
 8007150:	187b      	adds	r3, r7, r1
 8007152:	3a01      	subs	r2, #1
 8007154:	801a      	strh	r2, [r3, #0]
 8007156:	232e      	movs	r3, #46	; 0x2e
 8007158:	18fb      	adds	r3, r7, r3
 800715a:	881b      	ldrh	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d19b      	bne.n	8007098 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8007160:	46c0      	nop			; (mov r8, r8)
 8007162:	46bd      	mov	sp, r7
 8007164:	b00c      	add	sp, #48	; 0x30
 8007166:	bd80      	pop	{r7, pc}
 8007168:	ff7fffff 	.word	0xff7fffff

0800716c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b090      	sub	sp, #64	; 0x40
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007174:	203e      	movs	r0, #62	; 0x3e
 8007176:	183b      	adds	r3, r7, r0
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	2160      	movs	r1, #96	; 0x60
 800717c:	5a52      	ldrh	r2, [r2, r1]
 800717e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	228c      	movs	r2, #140	; 0x8c
 8007184:	589b      	ldr	r3, [r3, r2]
 8007186:	2b22      	cmp	r3, #34	; 0x22
 8007188:	d000      	beq.n	800718c <UART_RxISR_8BIT+0x20>
 800718a:	e09a      	b.n	80072c2 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007192:	213c      	movs	r1, #60	; 0x3c
 8007194:	187b      	adds	r3, r7, r1
 8007196:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007198:	187b      	adds	r3, r7, r1
 800719a:	881b      	ldrh	r3, [r3, #0]
 800719c:	b2da      	uxtb	r2, r3
 800719e:	183b      	adds	r3, r7, r0
 80071a0:	881b      	ldrh	r3, [r3, #0]
 80071a2:	b2d9      	uxtb	r1, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071a8:	400a      	ands	r2, r1
 80071aa:	b2d2      	uxtb	r2, r2
 80071ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80071b2:	1c5a      	adds	r2, r3, #1
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	225e      	movs	r2, #94	; 0x5e
 80071bc:	5a9b      	ldrh	r3, [r3, r2]
 80071be:	b29b      	uxth	r3, r3
 80071c0:	3b01      	subs	r3, #1
 80071c2:	b299      	uxth	r1, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	225e      	movs	r2, #94	; 0x5e
 80071c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	225e      	movs	r2, #94	; 0x5e
 80071ce:	5a9b      	ldrh	r3, [r3, r2]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d000      	beq.n	80071d8 <UART_RxISR_8BIT+0x6c>
 80071d6:	e07c      	b.n	80072d2 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071d8:	f3ef 8310 	mrs	r3, PRIMASK
 80071dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80071de:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80071e0:	63bb      	str	r3, [r7, #56]	; 0x38
 80071e2:	2301      	movs	r3, #1
 80071e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	f383 8810 	msr	PRIMASK, r3
}
 80071ec:	46c0      	nop			; (mov r8, r8)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4938      	ldr	r1, [pc, #224]	; (80072dc <UART_RxISR_8BIT+0x170>)
 80071fa:	400a      	ands	r2, r1
 80071fc:	601a      	str	r2, [r3, #0]
 80071fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007200:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	f383 8810 	msr	PRIMASK, r3
}
 8007208:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800720a:	f3ef 8310 	mrs	r3, PRIMASK
 800720e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007212:	637b      	str	r3, [r7, #52]	; 0x34
 8007214:	2301      	movs	r3, #1
 8007216:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721a:	f383 8810 	msr	PRIMASK, r3
}
 800721e:	46c0      	nop			; (mov r8, r8)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	2101      	movs	r1, #1
 800722c:	438a      	bics	r2, r1
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007232:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007236:	f383 8810 	msr	PRIMASK, r3
}
 800723a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	228c      	movs	r2, #140	; 0x8c
 8007240:	2120      	movs	r1, #32
 8007242:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2200      	movs	r2, #0
 800724e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007254:	2b01      	cmp	r3, #1
 8007256:	d12f      	bne.n	80072b8 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	2200      	movs	r2, #0
 800725c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800725e:	f3ef 8310 	mrs	r3, PRIMASK
 8007262:	60fb      	str	r3, [r7, #12]
  return(result);
 8007264:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007266:	633b      	str	r3, [r7, #48]	; 0x30
 8007268:	2301      	movs	r3, #1
 800726a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	f383 8810 	msr	PRIMASK, r3
}
 8007272:	46c0      	nop			; (mov r8, r8)
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681a      	ldr	r2, [r3, #0]
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	2110      	movs	r1, #16
 8007280:	438a      	bics	r2, r1
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007286:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f383 8810 	msr	PRIMASK, r3
}
 800728e:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	69db      	ldr	r3, [r3, #28]
 8007296:	2210      	movs	r2, #16
 8007298:	4013      	ands	r3, r2
 800729a:	2b10      	cmp	r3, #16
 800729c:	d103      	bne.n	80072a6 <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	2210      	movs	r2, #16
 80072a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	225c      	movs	r2, #92	; 0x5c
 80072aa:	5a9a      	ldrh	r2, [r3, r2]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	0011      	movs	r1, r2
 80072b0:	0018      	movs	r0, r3
 80072b2:	f7fe fe70 	bl	8005f96 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80072b6:	e00c      	b.n	80072d2 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	0018      	movs	r0, r3
 80072bc:	f7fa f888 	bl	80013d0 <HAL_UART_RxCpltCallback>
}
 80072c0:	e007      	b.n	80072d2 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	699a      	ldr	r2, [r3, #24]
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	2108      	movs	r1, #8
 80072ce:	430a      	orrs	r2, r1
 80072d0:	619a      	str	r2, [r3, #24]
}
 80072d2:	46c0      	nop			; (mov r8, r8)
 80072d4:	46bd      	mov	sp, r7
 80072d6:	b010      	add	sp, #64	; 0x40
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	46c0      	nop			; (mov r8, r8)
 80072dc:	fffffedf 	.word	0xfffffedf

080072e0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b090      	sub	sp, #64	; 0x40
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80072e8:	203e      	movs	r0, #62	; 0x3e
 80072ea:	183b      	adds	r3, r7, r0
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	2160      	movs	r1, #96	; 0x60
 80072f0:	5a52      	ldrh	r2, [r2, r1]
 80072f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	228c      	movs	r2, #140	; 0x8c
 80072f8:	589b      	ldr	r3, [r3, r2]
 80072fa:	2b22      	cmp	r3, #34	; 0x22
 80072fc:	d000      	beq.n	8007300 <UART_RxISR_16BIT+0x20>
 80072fe:	e09a      	b.n	8007436 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007306:	213c      	movs	r1, #60	; 0x3c
 8007308:	187b      	adds	r3, r7, r1
 800730a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007310:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007312:	187b      	adds	r3, r7, r1
 8007314:	183a      	adds	r2, r7, r0
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	8812      	ldrh	r2, [r2, #0]
 800731a:	4013      	ands	r3, r2
 800731c:	b29a      	uxth	r2, r3
 800731e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007320:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007326:	1c9a      	adds	r2, r3, #2
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	225e      	movs	r2, #94	; 0x5e
 8007330:	5a9b      	ldrh	r3, [r3, r2]
 8007332:	b29b      	uxth	r3, r3
 8007334:	3b01      	subs	r3, #1
 8007336:	b299      	uxth	r1, r3
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	225e      	movs	r2, #94	; 0x5e
 800733c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	225e      	movs	r2, #94	; 0x5e
 8007342:	5a9b      	ldrh	r3, [r3, r2]
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b00      	cmp	r3, #0
 8007348:	d000      	beq.n	800734c <UART_RxISR_16BIT+0x6c>
 800734a:	e07c      	b.n	8007446 <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800734c:	f3ef 8310 	mrs	r3, PRIMASK
 8007350:	617b      	str	r3, [r7, #20]
  return(result);
 8007352:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007354:	637b      	str	r3, [r7, #52]	; 0x34
 8007356:	2301      	movs	r3, #1
 8007358:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	f383 8810 	msr	PRIMASK, r3
}
 8007360:	46c0      	nop			; (mov r8, r8)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4938      	ldr	r1, [pc, #224]	; (8007450 <UART_RxISR_16BIT+0x170>)
 800736e:	400a      	ands	r2, r1
 8007370:	601a      	str	r2, [r3, #0]
 8007372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007374:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007376:	69fb      	ldr	r3, [r7, #28]
 8007378:	f383 8810 	msr	PRIMASK, r3
}
 800737c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800737e:	f3ef 8310 	mrs	r3, PRIMASK
 8007382:	623b      	str	r3, [r7, #32]
  return(result);
 8007384:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007386:	633b      	str	r3, [r7, #48]	; 0x30
 8007388:	2301      	movs	r3, #1
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800738c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738e:	f383 8810 	msr	PRIMASK, r3
}
 8007392:	46c0      	nop			; (mov r8, r8)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	2101      	movs	r1, #1
 80073a0:	438a      	bics	r2, r1
 80073a2:	609a      	str	r2, [r3, #8]
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073aa:	f383 8810 	msr	PRIMASK, r3
}
 80073ae:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	228c      	movs	r2, #140	; 0x8c
 80073b4:	2120      	movs	r1, #32
 80073b6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2200      	movs	r2, #0
 80073bc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2200      	movs	r2, #0
 80073c2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d12f      	bne.n	800742c <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80073d2:	f3ef 8310 	mrs	r3, PRIMASK
 80073d6:	60bb      	str	r3, [r7, #8]
  return(result);
 80073d8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80073dc:	2301      	movs	r3, #1
 80073de:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	f383 8810 	msr	PRIMASK, r3
}
 80073e6:	46c0      	nop			; (mov r8, r8)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	2110      	movs	r1, #16
 80073f4:	438a      	bics	r2, r1
 80073f6:	601a      	str	r2, [r3, #0]
 80073f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f383 8810 	msr	PRIMASK, r3
}
 8007402:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	2210      	movs	r2, #16
 800740c:	4013      	ands	r3, r2
 800740e:	2b10      	cmp	r3, #16
 8007410:	d103      	bne.n	800741a <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2210      	movs	r2, #16
 8007418:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	225c      	movs	r2, #92	; 0x5c
 800741e:	5a9a      	ldrh	r2, [r3, r2]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	0011      	movs	r1, r2
 8007424:	0018      	movs	r0, r3
 8007426:	f7fe fdb6 	bl	8005f96 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800742a:	e00c      	b.n	8007446 <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	0018      	movs	r0, r3
 8007430:	f7f9 ffce 	bl	80013d0 <HAL_UART_RxCpltCallback>
}
 8007434:	e007      	b.n	8007446 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	699a      	ldr	r2, [r3, #24]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2108      	movs	r1, #8
 8007442:	430a      	orrs	r2, r1
 8007444:	619a      	str	r2, [r3, #24]
}
 8007446:	46c0      	nop			; (mov r8, r8)
 8007448:	46bd      	mov	sp, r7
 800744a:	b010      	add	sp, #64	; 0x40
 800744c:	bd80      	pop	{r7, pc}
 800744e:	46c0      	nop			; (mov r8, r8)
 8007450:	fffffedf 	.word	0xfffffedf

08007454 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b09c      	sub	sp, #112	; 0x70
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800745c:	236a      	movs	r3, #106	; 0x6a
 800745e:	18fb      	adds	r3, r7, r3
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	2160      	movs	r1, #96	; 0x60
 8007464:	5a52      	ldrh	r2, [r2, r1]
 8007466:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	69db      	ldr	r3, [r3, #28]
 800746e:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	228c      	movs	r2, #140	; 0x8c
 8007484:	589b      	ldr	r3, [r3, r2]
 8007486:	2b22      	cmp	r3, #34	; 0x22
 8007488:	d000      	beq.n	800748c <UART_RxISR_8BIT_FIFOEN+0x38>
 800748a:	e144      	b.n	8007716 <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800748c:	235e      	movs	r3, #94	; 0x5e
 800748e:	18fb      	adds	r3, r7, r3
 8007490:	687a      	ldr	r2, [r7, #4]
 8007492:	2168      	movs	r1, #104	; 0x68
 8007494:	5a52      	ldrh	r2, [r2, r1]
 8007496:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007498:	e0eb      	b.n	8007672 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074a0:	215c      	movs	r1, #92	; 0x5c
 80074a2:	187b      	adds	r3, r7, r1
 80074a4:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80074a6:	187b      	adds	r3, r7, r1
 80074a8:	881b      	ldrh	r3, [r3, #0]
 80074aa:	b2da      	uxtb	r2, r3
 80074ac:	236a      	movs	r3, #106	; 0x6a
 80074ae:	18fb      	adds	r3, r7, r3
 80074b0:	881b      	ldrh	r3, [r3, #0]
 80074b2:	b2d9      	uxtb	r1, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074b8:	400a      	ands	r2, r1
 80074ba:	b2d2      	uxtb	r2, r2
 80074bc:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80074c2:	1c5a      	adds	r2, r3, #1
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	225e      	movs	r2, #94	; 0x5e
 80074cc:	5a9b      	ldrh	r3, [r3, r2]
 80074ce:	b29b      	uxth	r3, r3
 80074d0:	3b01      	subs	r3, #1
 80074d2:	b299      	uxth	r1, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	225e      	movs	r2, #94	; 0x5e
 80074d8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	69db      	ldr	r3, [r3, #28]
 80074e0:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80074e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074e4:	2207      	movs	r2, #7
 80074e6:	4013      	ands	r3, r2
 80074e8:	d049      	beq.n	800757e <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80074ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074ec:	2201      	movs	r2, #1
 80074ee:	4013      	ands	r3, r2
 80074f0:	d010      	beq.n	8007514 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80074f2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80074f4:	2380      	movs	r3, #128	; 0x80
 80074f6:	005b      	lsls	r3, r3, #1
 80074f8:	4013      	ands	r3, r2
 80074fa:	d00b      	beq.n	8007514 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	2201      	movs	r2, #1
 8007502:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2290      	movs	r2, #144	; 0x90
 8007508:	589b      	ldr	r3, [r3, r2]
 800750a:	2201      	movs	r2, #1
 800750c:	431a      	orrs	r2, r3
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	2190      	movs	r1, #144	; 0x90
 8007512:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007514:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007516:	2202      	movs	r2, #2
 8007518:	4013      	ands	r3, r2
 800751a:	d00f      	beq.n	800753c <UART_RxISR_8BIT_FIFOEN+0xe8>
 800751c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800751e:	2201      	movs	r2, #1
 8007520:	4013      	ands	r3, r2
 8007522:	d00b      	beq.n	800753c <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2202      	movs	r2, #2
 800752a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	2290      	movs	r2, #144	; 0x90
 8007530:	589b      	ldr	r3, [r3, r2]
 8007532:	2204      	movs	r2, #4
 8007534:	431a      	orrs	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	2190      	movs	r1, #144	; 0x90
 800753a:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800753c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800753e:	2204      	movs	r2, #4
 8007540:	4013      	ands	r3, r2
 8007542:	d00f      	beq.n	8007564 <UART_RxISR_8BIT_FIFOEN+0x110>
 8007544:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007546:	2201      	movs	r2, #1
 8007548:	4013      	ands	r3, r2
 800754a:	d00b      	beq.n	8007564 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2204      	movs	r2, #4
 8007552:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2290      	movs	r2, #144	; 0x90
 8007558:	589b      	ldr	r3, [r3, r2]
 800755a:	2202      	movs	r2, #2
 800755c:	431a      	orrs	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2190      	movs	r1, #144	; 0x90
 8007562:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2290      	movs	r2, #144	; 0x90
 8007568:	589b      	ldr	r3, [r3, r2]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d007      	beq.n	800757e <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	0018      	movs	r0, r3
 8007572:	f7fe fd08 	bl	8005f86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2290      	movs	r2, #144	; 0x90
 800757a:	2100      	movs	r1, #0
 800757c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	225e      	movs	r2, #94	; 0x5e
 8007582:	5a9b      	ldrh	r3, [r3, r2]
 8007584:	b29b      	uxth	r3, r3
 8007586:	2b00      	cmp	r3, #0
 8007588:	d173      	bne.n	8007672 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800758a:	f3ef 8310 	mrs	r3, PRIMASK
 800758e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007592:	65bb      	str	r3, [r7, #88]	; 0x58
 8007594:	2301      	movs	r3, #1
 8007596:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800759a:	f383 8810 	msr	PRIMASK, r3
}
 800759e:	46c0      	nop			; (mov r8, r8)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	681a      	ldr	r2, [r3, #0]
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	4961      	ldr	r1, [pc, #388]	; (8007730 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 80075ac:	400a      	ands	r2, r1
 80075ae:	601a      	str	r2, [r3, #0]
 80075b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075b6:	f383 8810 	msr	PRIMASK, r3
}
 80075ba:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075bc:	f3ef 8310 	mrs	r3, PRIMASK
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 80075c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80075c4:	657b      	str	r3, [r7, #84]	; 0x54
 80075c6:	2301      	movs	r3, #1
 80075c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075cc:	f383 8810 	msr	PRIMASK, r3
}
 80075d0:	46c0      	nop			; (mov r8, r8)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	689a      	ldr	r2, [r3, #8]
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	4955      	ldr	r1, [pc, #340]	; (8007734 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 80075de:	400a      	ands	r2, r1
 80075e0:	609a      	str	r2, [r3, #8]
 80075e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80075e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e8:	f383 8810 	msr	PRIMASK, r3
}
 80075ec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	228c      	movs	r2, #140	; 0x8c
 80075f2:	2120      	movs	r1, #32
 80075f4:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	2200      	movs	r2, #0
 8007600:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007606:	2b01      	cmp	r3, #1
 8007608:	d12f      	bne.n	800766a <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2200      	movs	r2, #0
 800760e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007610:	f3ef 8310 	mrs	r3, PRIMASK
 8007614:	623b      	str	r3, [r7, #32]
  return(result);
 8007616:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007618:	653b      	str	r3, [r7, #80]	; 0x50
 800761a:	2301      	movs	r3, #1
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	f383 8810 	msr	PRIMASK, r3
}
 8007624:	46c0      	nop			; (mov r8, r8)
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	681a      	ldr	r2, [r3, #0]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2110      	movs	r1, #16
 8007632:	438a      	bics	r2, r1
 8007634:	601a      	str	r2, [r3, #0]
 8007636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007638:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800763c:	f383 8810 	msr	PRIMASK, r3
}
 8007640:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	69db      	ldr	r3, [r3, #28]
 8007648:	2210      	movs	r2, #16
 800764a:	4013      	ands	r3, r2
 800764c:	2b10      	cmp	r3, #16
 800764e:	d103      	bne.n	8007658 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	2210      	movs	r2, #16
 8007656:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	225c      	movs	r2, #92	; 0x5c
 800765c:	5a9a      	ldrh	r2, [r3, r2]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	0011      	movs	r1, r2
 8007662:	0018      	movs	r0, r3
 8007664:	f7fe fc97 	bl	8005f96 <HAL_UARTEx_RxEventCallback>
 8007668:	e003      	b.n	8007672 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	0018      	movs	r0, r3
 800766e:	f7f9 feaf 	bl	80013d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007672:	235e      	movs	r3, #94	; 0x5e
 8007674:	18fb      	adds	r3, r7, r3
 8007676:	881b      	ldrh	r3, [r3, #0]
 8007678:	2b00      	cmp	r3, #0
 800767a:	d004      	beq.n	8007686 <UART_RxISR_8BIT_FIFOEN+0x232>
 800767c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800767e:	2220      	movs	r2, #32
 8007680:	4013      	ands	r3, r2
 8007682:	d000      	beq.n	8007686 <UART_RxISR_8BIT_FIFOEN+0x232>
 8007684:	e709      	b.n	800749a <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007686:	204e      	movs	r0, #78	; 0x4e
 8007688:	183b      	adds	r3, r7, r0
 800768a:	687a      	ldr	r2, [r7, #4]
 800768c:	215e      	movs	r1, #94	; 0x5e
 800768e:	5a52      	ldrh	r2, [r2, r1]
 8007690:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007692:	0001      	movs	r1, r0
 8007694:	187b      	adds	r3, r7, r1
 8007696:	881b      	ldrh	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d044      	beq.n	8007726 <UART_RxISR_8BIT_FIFOEN+0x2d2>
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2268      	movs	r2, #104	; 0x68
 80076a0:	5a9b      	ldrh	r3, [r3, r2]
 80076a2:	187a      	adds	r2, r7, r1
 80076a4:	8812      	ldrh	r2, [r2, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d23d      	bcs.n	8007726 <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076aa:	f3ef 8310 	mrs	r3, PRIMASK
 80076ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80076b0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80076b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80076b4:	2301      	movs	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f383 8810 	msr	PRIMASK, r3
}
 80076be:	46c0      	nop			; (mov r8, r8)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	689a      	ldr	r2, [r3, #8]
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	491b      	ldr	r1, [pc, #108]	; (8007738 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 80076cc:	400a      	ands	r2, r1
 80076ce:	609a      	str	r2, [r3, #8]
 80076d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	f383 8810 	msr	PRIMASK, r3
}
 80076da:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	4a17      	ldr	r2, [pc, #92]	; (800773c <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 80076e0:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e2:	f3ef 8310 	mrs	r3, PRIMASK
 80076e6:	617b      	str	r3, [r7, #20]
  return(result);
 80076e8:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076ea:	647b      	str	r3, [r7, #68]	; 0x44
 80076ec:	2301      	movs	r3, #1
 80076ee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f0:	69bb      	ldr	r3, [r7, #24]
 80076f2:	f383 8810 	msr	PRIMASK, r3
}
 80076f6:	46c0      	nop			; (mov r8, r8)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	681a      	ldr	r2, [r3, #0]
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	2120      	movs	r1, #32
 8007704:	430a      	orrs	r2, r1
 8007706:	601a      	str	r2, [r3, #0]
 8007708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800770a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	f383 8810 	msr	PRIMASK, r3
}
 8007712:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007714:	e007      	b.n	8007726 <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	699a      	ldr	r2, [r3, #24]
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2108      	movs	r1, #8
 8007722:	430a      	orrs	r2, r1
 8007724:	619a      	str	r2, [r3, #24]
}
 8007726:	46c0      	nop			; (mov r8, r8)
 8007728:	46bd      	mov	sp, r7
 800772a:	b01c      	add	sp, #112	; 0x70
 800772c:	bd80      	pop	{r7, pc}
 800772e:	46c0      	nop			; (mov r8, r8)
 8007730:	fffffeff 	.word	0xfffffeff
 8007734:	effffffe 	.word	0xeffffffe
 8007738:	efffffff 	.word	0xefffffff
 800773c:	0800716d 	.word	0x0800716d

08007740 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b09e      	sub	sp, #120	; 0x78
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007748:	2372      	movs	r3, #114	; 0x72
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	2160      	movs	r1, #96	; 0x60
 8007750:	5a52      	ldrh	r2, [r2, r1]
 8007752:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	69db      	ldr	r3, [r3, #28]
 800775a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	228c      	movs	r2, #140	; 0x8c
 8007770:	589b      	ldr	r3, [r3, r2]
 8007772:	2b22      	cmp	r3, #34	; 0x22
 8007774:	d000      	beq.n	8007778 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007776:	e144      	b.n	8007a02 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007778:	2366      	movs	r3, #102	; 0x66
 800777a:	18fb      	adds	r3, r7, r3
 800777c:	687a      	ldr	r2, [r7, #4]
 800777e:	2168      	movs	r1, #104	; 0x68
 8007780:	5a52      	ldrh	r2, [r2, r1]
 8007782:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007784:	e0eb      	b.n	800795e <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800778c:	2164      	movs	r1, #100	; 0x64
 800778e:	187b      	adds	r3, r7, r1
 8007790:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007796:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007798:	187b      	adds	r3, r7, r1
 800779a:	2272      	movs	r2, #114	; 0x72
 800779c:	18ba      	adds	r2, r7, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	8812      	ldrh	r2, [r2, #0]
 80077a2:	4013      	ands	r3, r2
 80077a4:	b29a      	uxth	r2, r3
 80077a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80077a8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80077ae:	1c9a      	adds	r2, r3, #2
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	225e      	movs	r2, #94	; 0x5e
 80077b8:	5a9b      	ldrh	r3, [r3, r2]
 80077ba:	b29b      	uxth	r3, r3
 80077bc:	3b01      	subs	r3, #1
 80077be:	b299      	uxth	r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	225e      	movs	r2, #94	; 0x5e
 80077c4:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	69db      	ldr	r3, [r3, #28]
 80077cc:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077d0:	2207      	movs	r2, #7
 80077d2:	4013      	ands	r3, r2
 80077d4:	d049      	beq.n	800786a <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077d8:	2201      	movs	r2, #1
 80077da:	4013      	ands	r3, r2
 80077dc:	d010      	beq.n	8007800 <UART_RxISR_16BIT_FIFOEN+0xc0>
 80077de:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80077e0:	2380      	movs	r3, #128	; 0x80
 80077e2:	005b      	lsls	r3, r3, #1
 80077e4:	4013      	ands	r3, r2
 80077e6:	d00b      	beq.n	8007800 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	2201      	movs	r2, #1
 80077ee:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2290      	movs	r2, #144	; 0x90
 80077f4:	589b      	ldr	r3, [r3, r2]
 80077f6:	2201      	movs	r2, #1
 80077f8:	431a      	orrs	r2, r3
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2190      	movs	r1, #144	; 0x90
 80077fe:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007800:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007802:	2202      	movs	r2, #2
 8007804:	4013      	ands	r3, r2
 8007806:	d00f      	beq.n	8007828 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007808:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800780a:	2201      	movs	r2, #1
 800780c:	4013      	ands	r3, r2
 800780e:	d00b      	beq.n	8007828 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	2202      	movs	r2, #2
 8007816:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2290      	movs	r2, #144	; 0x90
 800781c:	589b      	ldr	r3, [r3, r2]
 800781e:	2204      	movs	r2, #4
 8007820:	431a      	orrs	r2, r3
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2190      	movs	r1, #144	; 0x90
 8007826:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007828:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800782a:	2204      	movs	r2, #4
 800782c:	4013      	ands	r3, r2
 800782e:	d00f      	beq.n	8007850 <UART_RxISR_16BIT_FIFOEN+0x110>
 8007830:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007832:	2201      	movs	r2, #1
 8007834:	4013      	ands	r3, r2
 8007836:	d00b      	beq.n	8007850 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2204      	movs	r2, #4
 800783e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	2290      	movs	r2, #144	; 0x90
 8007844:	589b      	ldr	r3, [r3, r2]
 8007846:	2202      	movs	r2, #2
 8007848:	431a      	orrs	r2, r3
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2190      	movs	r1, #144	; 0x90
 800784e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	2290      	movs	r2, #144	; 0x90
 8007854:	589b      	ldr	r3, [r3, r2]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d007      	beq.n	800786a <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	0018      	movs	r0, r3
 800785e:	f7fe fb92 	bl	8005f86 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2290      	movs	r2, #144	; 0x90
 8007866:	2100      	movs	r1, #0
 8007868:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	225e      	movs	r2, #94	; 0x5e
 800786e:	5a9b      	ldrh	r3, [r3, r2]
 8007870:	b29b      	uxth	r3, r3
 8007872:	2b00      	cmp	r3, #0
 8007874:	d173      	bne.n	800795e <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007876:	f3ef 8310 	mrs	r3, PRIMASK
 800787a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800787e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007880:	2301      	movs	r3, #1
 8007882:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007884:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007886:	f383 8810 	msr	PRIMASK, r3
}
 800788a:	46c0      	nop			; (mov r8, r8)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	4961      	ldr	r1, [pc, #388]	; (8007a1c <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8007898:	400a      	ands	r2, r1
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800789e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	f383 8810 	msr	PRIMASK, r3
}
 80078a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078a8:	f3ef 8310 	mrs	r3, PRIMASK
 80078ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80078ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80078b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80078b2:	2301      	movs	r3, #1
 80078b4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80078b8:	f383 8810 	msr	PRIMASK, r3
}
 80078bc:	46c0      	nop			; (mov r8, r8)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	689a      	ldr	r2, [r3, #8]
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	4955      	ldr	r1, [pc, #340]	; (8007a20 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 80078ca:	400a      	ands	r2, r1
 80078cc:	609a      	str	r2, [r3, #8]
 80078ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80078d0:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078d4:	f383 8810 	msr	PRIMASK, r3
}
 80078d8:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	228c      	movs	r2, #140	; 0x8c
 80078de:	2120      	movs	r1, #32
 80078e0:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	2200      	movs	r2, #0
 80078e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2200      	movs	r2, #0
 80078ec:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d12f      	bne.n	8007956 <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2200      	movs	r2, #0
 80078fa:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078fc:	f3ef 8310 	mrs	r3, PRIMASK
 8007900:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007902:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007904:	657b      	str	r3, [r7, #84]	; 0x54
 8007906:	2301      	movs	r3, #1
 8007908:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	f383 8810 	msr	PRIMASK, r3
}
 8007910:	46c0      	nop			; (mov r8, r8)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	681a      	ldr	r2, [r3, #0]
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	2110      	movs	r1, #16
 800791e:	438a      	bics	r2, r1
 8007920:	601a      	str	r2, [r3, #0]
 8007922:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007924:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007928:	f383 8810 	msr	PRIMASK, r3
}
 800792c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	69db      	ldr	r3, [r3, #28]
 8007934:	2210      	movs	r2, #16
 8007936:	4013      	ands	r3, r2
 8007938:	2b10      	cmp	r3, #16
 800793a:	d103      	bne.n	8007944 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	2210      	movs	r2, #16
 8007942:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	225c      	movs	r2, #92	; 0x5c
 8007948:	5a9a      	ldrh	r2, [r3, r2]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	0011      	movs	r1, r2
 800794e:	0018      	movs	r0, r3
 8007950:	f7fe fb21 	bl	8005f96 <HAL_UARTEx_RxEventCallback>
 8007954:	e003      	b.n	800795e <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	0018      	movs	r0, r3
 800795a:	f7f9 fd39 	bl	80013d0 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800795e:	2366      	movs	r3, #102	; 0x66
 8007960:	18fb      	adds	r3, r7, r3
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d004      	beq.n	8007972 <UART_RxISR_16BIT_FIFOEN+0x232>
 8007968:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800796a:	2220      	movs	r2, #32
 800796c:	4013      	ands	r3, r2
 800796e:	d000      	beq.n	8007972 <UART_RxISR_16BIT_FIFOEN+0x232>
 8007970:	e709      	b.n	8007786 <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007972:	2052      	movs	r0, #82	; 0x52
 8007974:	183b      	adds	r3, r7, r0
 8007976:	687a      	ldr	r2, [r7, #4]
 8007978:	215e      	movs	r1, #94	; 0x5e
 800797a:	5a52      	ldrh	r2, [r2, r1]
 800797c:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800797e:	0001      	movs	r1, r0
 8007980:	187b      	adds	r3, r7, r1
 8007982:	881b      	ldrh	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d044      	beq.n	8007a12 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2268      	movs	r2, #104	; 0x68
 800798c:	5a9b      	ldrh	r3, [r3, r2]
 800798e:	187a      	adds	r2, r7, r1
 8007990:	8812      	ldrh	r2, [r2, #0]
 8007992:	429a      	cmp	r2, r3
 8007994:	d23d      	bcs.n	8007a12 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007996:	f3ef 8310 	mrs	r3, PRIMASK
 800799a:	60fb      	str	r3, [r7, #12]
  return(result);
 800799c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800799e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079a0:	2301      	movs	r3, #1
 80079a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	f383 8810 	msr	PRIMASK, r3
}
 80079aa:	46c0      	nop			; (mov r8, r8)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	689a      	ldr	r2, [r3, #8]
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	491b      	ldr	r1, [pc, #108]	; (8007a24 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 80079b8:	400a      	ands	r2, r1
 80079ba:	609a      	str	r2, [r3, #8]
 80079bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80079be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079c0:	697b      	ldr	r3, [r7, #20]
 80079c2:	f383 8810 	msr	PRIMASK, r3
}
 80079c6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	4a17      	ldr	r2, [pc, #92]	; (8007a28 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 80079cc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079ce:	f3ef 8310 	mrs	r3, PRIMASK
 80079d2:	61bb      	str	r3, [r7, #24]
  return(result);
 80079d4:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80079d6:	64bb      	str	r3, [r7, #72]	; 0x48
 80079d8:	2301      	movs	r3, #1
 80079da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f383 8810 	msr	PRIMASK, r3
}
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	681a      	ldr	r2, [r3, #0]
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	2120      	movs	r1, #32
 80079f0:	430a      	orrs	r2, r1
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80079f6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	f383 8810 	msr	PRIMASK, r3
}
 80079fe:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a00:	e007      	b.n	8007a12 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	699a      	ldr	r2, [r3, #24]
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2108      	movs	r1, #8
 8007a0e:	430a      	orrs	r2, r1
 8007a10:	619a      	str	r2, [r3, #24]
}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	46bd      	mov	sp, r7
 8007a16:	b01e      	add	sp, #120	; 0x78
 8007a18:	bd80      	pop	{r7, pc}
 8007a1a:	46c0      	nop			; (mov r8, r8)
 8007a1c:	fffffeff 	.word	0xfffffeff
 8007a20:	effffffe 	.word	0xeffffffe
 8007a24:	efffffff 	.word	0xefffffff
 8007a28:	080072e1 	.word	0x080072e1

08007a2c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a2c:	b580      	push	{r7, lr}
 8007a2e:	b084      	sub	sp, #16
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2284      	movs	r2, #132	; 0x84
 8007a38:	5c9b      	ldrb	r3, [r3, r2]
 8007a3a:	2b01      	cmp	r3, #1
 8007a3c:	d101      	bne.n	8007a42 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a3e:	2302      	movs	r3, #2
 8007a40:	e027      	b.n	8007a92 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2284      	movs	r2, #132	; 0x84
 8007a46:	2101      	movs	r1, #1
 8007a48:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2288      	movs	r2, #136	; 0x88
 8007a4e:	2124      	movs	r1, #36	; 0x24
 8007a50:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	2101      	movs	r1, #1
 8007a66:	438a      	bics	r2, r1
 8007a68:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	4a0b      	ldr	r2, [pc, #44]	; (8007a9c <HAL_UARTEx_DisableFifoMode+0x70>)
 8007a6e:	4013      	ands	r3, r2
 8007a70:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	68fa      	ldr	r2, [r7, #12]
 8007a7e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2288      	movs	r2, #136	; 0x88
 8007a84:	2120      	movs	r1, #32
 8007a86:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	2284      	movs	r2, #132	; 0x84
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a90:	2300      	movs	r3, #0
}
 8007a92:	0018      	movs	r0, r3
 8007a94:	46bd      	mov	sp, r7
 8007a96:	b004      	add	sp, #16
 8007a98:	bd80      	pop	{r7, pc}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	dfffffff 	.word	0xdfffffff

08007aa0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007aa0:	b580      	push	{r7, lr}
 8007aa2:	b084      	sub	sp, #16
 8007aa4:	af00      	add	r7, sp, #0
 8007aa6:	6078      	str	r0, [r7, #4]
 8007aa8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2284      	movs	r2, #132	; 0x84
 8007aae:	5c9b      	ldrb	r3, [r3, r2]
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	d101      	bne.n	8007ab8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007ab4:	2302      	movs	r3, #2
 8007ab6:	e02e      	b.n	8007b16 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2284      	movs	r2, #132	; 0x84
 8007abc:	2101      	movs	r1, #1
 8007abe:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2288      	movs	r2, #136	; 0x88
 8007ac4:	2124      	movs	r1, #36	; 0x24
 8007ac6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2101      	movs	r1, #1
 8007adc:	438a      	bics	r2, r1
 8007ade:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	689b      	ldr	r3, [r3, #8]
 8007ae6:	00db      	lsls	r3, r3, #3
 8007ae8:	08d9      	lsrs	r1, r3, #3
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	683a      	ldr	r2, [r7, #0]
 8007af0:	430a      	orrs	r2, r1
 8007af2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	0018      	movs	r0, r3
 8007af8:	f000 f854 	bl	8007ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	2288      	movs	r2, #136	; 0x88
 8007b08:	2120      	movs	r1, #32
 8007b0a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2284      	movs	r2, #132	; 0x84
 8007b10:	2100      	movs	r1, #0
 8007b12:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b14:	2300      	movs	r3, #0
}
 8007b16:	0018      	movs	r0, r3
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	b004      	add	sp, #16
 8007b1c:	bd80      	pop	{r7, pc}
	...

08007b20 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2284      	movs	r2, #132	; 0x84
 8007b2e:	5c9b      	ldrb	r3, [r3, r2]
 8007b30:	2b01      	cmp	r3, #1
 8007b32:	d101      	bne.n	8007b38 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b34:	2302      	movs	r3, #2
 8007b36:	e02f      	b.n	8007b98 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2284      	movs	r2, #132	; 0x84
 8007b3c:	2101      	movs	r1, #1
 8007b3e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2288      	movs	r2, #136	; 0x88
 8007b44:	2124      	movs	r1, #36	; 0x24
 8007b46:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	438a      	bics	r2, r1
 8007b5e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	689b      	ldr	r3, [r3, #8]
 8007b66:	4a0e      	ldr	r2, [pc, #56]	; (8007ba0 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007b68:	4013      	ands	r3, r2
 8007b6a:	0019      	movs	r1, r3
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	683a      	ldr	r2, [r7, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	0018      	movs	r0, r3
 8007b7a:	f000 f813 	bl	8007ba4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	68fa      	ldr	r2, [r7, #12]
 8007b84:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2288      	movs	r2, #136	; 0x88
 8007b8a:	2120      	movs	r1, #32
 8007b8c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	2284      	movs	r2, #132	; 0x84
 8007b92:	2100      	movs	r1, #0
 8007b94:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b96:	2300      	movs	r3, #0
}
 8007b98:	0018      	movs	r0, r3
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	b004      	add	sp, #16
 8007b9e:	bd80      	pop	{r7, pc}
 8007ba0:	f1ffffff 	.word	0xf1ffffff

08007ba4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007ba4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
 8007baa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d108      	bne.n	8007bc6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	226a      	movs	r2, #106	; 0x6a
 8007bb8:	2101      	movs	r1, #1
 8007bba:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	2268      	movs	r2, #104	; 0x68
 8007bc0:	2101      	movs	r1, #1
 8007bc2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bc4:	e043      	b.n	8007c4e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bc6:	260f      	movs	r6, #15
 8007bc8:	19bb      	adds	r3, r7, r6
 8007bca:	2208      	movs	r2, #8
 8007bcc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bce:	200e      	movs	r0, #14
 8007bd0:	183b      	adds	r3, r7, r0
 8007bd2:	2208      	movs	r2, #8
 8007bd4:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	689b      	ldr	r3, [r3, #8]
 8007bdc:	0e5b      	lsrs	r3, r3, #25
 8007bde:	b2da      	uxtb	r2, r3
 8007be0:	240d      	movs	r4, #13
 8007be2:	193b      	adds	r3, r7, r4
 8007be4:	2107      	movs	r1, #7
 8007be6:	400a      	ands	r2, r1
 8007be8:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	0f5b      	lsrs	r3, r3, #29
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	250c      	movs	r5, #12
 8007bf6:	197b      	adds	r3, r7, r5
 8007bf8:	2107      	movs	r1, #7
 8007bfa:	400a      	ands	r2, r1
 8007bfc:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bfe:	183b      	adds	r3, r7, r0
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	197a      	adds	r2, r7, r5
 8007c04:	7812      	ldrb	r2, [r2, #0]
 8007c06:	4914      	ldr	r1, [pc, #80]	; (8007c58 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c08:	5c8a      	ldrb	r2, [r1, r2]
 8007c0a:	435a      	muls	r2, r3
 8007c0c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007c0e:	197b      	adds	r3, r7, r5
 8007c10:	781b      	ldrb	r3, [r3, #0]
 8007c12:	4a12      	ldr	r2, [pc, #72]	; (8007c5c <UARTEx_SetNbDataToProcess+0xb8>)
 8007c14:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007c16:	0019      	movs	r1, r3
 8007c18:	f7f8 fb0a 	bl	8000230 <__divsi3>
 8007c1c:	0003      	movs	r3, r0
 8007c1e:	b299      	uxth	r1, r3
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	226a      	movs	r2, #106	; 0x6a
 8007c24:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c26:	19bb      	adds	r3, r7, r6
 8007c28:	781b      	ldrb	r3, [r3, #0]
 8007c2a:	193a      	adds	r2, r7, r4
 8007c2c:	7812      	ldrb	r2, [r2, #0]
 8007c2e:	490a      	ldr	r1, [pc, #40]	; (8007c58 <UARTEx_SetNbDataToProcess+0xb4>)
 8007c30:	5c8a      	ldrb	r2, [r1, r2]
 8007c32:	435a      	muls	r2, r3
 8007c34:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c36:	193b      	adds	r3, r7, r4
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	4a08      	ldr	r2, [pc, #32]	; (8007c5c <UARTEx_SetNbDataToProcess+0xb8>)
 8007c3c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c3e:	0019      	movs	r1, r3
 8007c40:	f7f8 faf6 	bl	8000230 <__divsi3>
 8007c44:	0003      	movs	r3, r0
 8007c46:	b299      	uxth	r1, r3
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2268      	movs	r2, #104	; 0x68
 8007c4c:	5299      	strh	r1, [r3, r2]
}
 8007c4e:	46c0      	nop			; (mov r8, r8)
 8007c50:	46bd      	mov	sp, r7
 8007c52:	b005      	add	sp, #20
 8007c54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c56:	46c0      	nop			; (mov r8, r8)
 8007c58:	0800b2f0 	.word	0x0800b2f0
 8007c5c:	0800b2f8 	.word	0x0800b2f8

08007c60 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b084      	sub	sp, #16
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	0002      	movs	r2, r0
 8007c68:	1dbb      	adds	r3, r7, #6
 8007c6a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c70:	1dbb      	adds	r3, r7, #6
 8007c72:	2200      	movs	r2, #0
 8007c74:	5e9b      	ldrsh	r3, [r3, r2]
 8007c76:	2b84      	cmp	r3, #132	; 0x84
 8007c78:	d006      	beq.n	8007c88 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8007c7a:	1dbb      	adds	r3, r7, #6
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	5e9a      	ldrsh	r2, [r3, r2]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	18d3      	adds	r3, r2, r3
 8007c84:	3303      	adds	r3, #3
 8007c86:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c88:	68fb      	ldr	r3, [r7, #12]
}
 8007c8a:	0018      	movs	r0, r3
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	b004      	add	sp, #16
 8007c90:	bd80      	pop	{r7, pc}

08007c92 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c96:	f000 fcab 	bl	80085f0 <vTaskStartScheduler>
  
  return osOK;
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	0018      	movs	r0, r3
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007ca2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007ca4:	b087      	sub	sp, #28
 8007ca6:	af02      	add	r7, sp, #8
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	685c      	ldr	r4, [r3, #4]
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cb8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2208      	movs	r2, #8
 8007cbe:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007cc0:	0018      	movs	r0, r3
 8007cc2:	f7ff ffcd 	bl	8007c60 <makeFreeRtosPriority>
 8007cc6:	0001      	movs	r1, r0
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	230c      	movs	r3, #12
 8007ccc:	18fb      	adds	r3, r7, r3
 8007cce:	9301      	str	r3, [sp, #4]
 8007cd0:	9100      	str	r1, [sp, #0]
 8007cd2:	0013      	movs	r3, r2
 8007cd4:	0032      	movs	r2, r6
 8007cd6:	0029      	movs	r1, r5
 8007cd8:	0020      	movs	r0, r4
 8007cda:	f000 fb34 	bl	8008346 <xTaskCreate>
 8007cde:	0003      	movs	r3, r0
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d001      	beq.n	8007ce8 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	e000      	b.n	8007cea <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
}
 8007cea:	0018      	movs	r0, r3
 8007cec:	46bd      	mov	sp, r7
 8007cee:	b005      	add	sp, #20
 8007cf0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007cf2 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007cf2:	b580      	push	{r7, lr}
 8007cf4:	b084      	sub	sp, #16
 8007cf6:	af00      	add	r7, sp, #0
 8007cf8:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d001      	beq.n	8007d08 <osDelay+0x16>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	e000      	b.n	8007d0a <osDelay+0x18>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	0018      	movs	r0, r3
 8007d0c:	f000 fc4a 	bl	80085a4 <vTaskDelay>
  
  return osOK;
 8007d10:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007d12:	0018      	movs	r0, r3
 8007d14:	46bd      	mov	sp, r7
 8007d16:	b004      	add	sp, #16
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b082      	sub	sp, #8
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	3308      	adds	r3, #8
 8007d26:	001a      	movs	r2, r3
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2201      	movs	r2, #1
 8007d30:	4252      	negs	r2, r2
 8007d32:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	3308      	adds	r3, #8
 8007d38:	001a      	movs	r2, r3
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	3308      	adds	r3, #8
 8007d42:	001a      	movs	r2, r3
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	46bd      	mov	sp, r7
 8007d52:	b002      	add	sp, #8
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b082      	sub	sp, #8
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007d64:	46c0      	nop			; (mov r8, r8)
 8007d66:	46bd      	mov	sp, r7
 8007d68:	b002      	add	sp, #8
 8007d6a:	bd80      	pop	{r7, pc}

08007d6c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d7c:	683b      	ldr	r3, [r7, #0]
 8007d7e:	68fa      	ldr	r2, [r7, #12]
 8007d80:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	689a      	ldr	r2, [r3, #8]
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	689b      	ldr	r3, [r3, #8]
 8007d8e:	683a      	ldr	r2, [r7, #0]
 8007d90:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	601a      	str	r2, [r3, #0]
}
 8007da8:	46c0      	nop			; (mov r8, r8)
 8007daa:	46bd      	mov	sp, r7
 8007dac:	b004      	add	sp, #16
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	d103      	bne.n	8007dce <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	60fb      	str	r3, [r7, #12]
 8007dcc:	e00c      	b.n	8007de8 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	3308      	adds	r3, #8
 8007dd2:	60fb      	str	r3, [r7, #12]
 8007dd4:	e002      	b.n	8007ddc <vListInsert+0x2c>
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	60fb      	str	r3, [r7, #12]
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	429a      	cmp	r2, r3
 8007de6:	d2f6      	bcs.n	8007dd6 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	685a      	ldr	r2, [r3, #4]
 8007dec:	683b      	ldr	r3, [r7, #0]
 8007dee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	685b      	ldr	r3, [r3, #4]
 8007df4:	683a      	ldr	r2, [r7, #0]
 8007df6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	68fa      	ldr	r2, [r7, #12]
 8007dfc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	683a      	ldr	r2, [r7, #0]
 8007e02:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	687a      	ldr	r2, [r7, #4]
 8007e08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	1c5a      	adds	r2, r3, #1
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	601a      	str	r2, [r3, #0]
}
 8007e14:	46c0      	nop			; (mov r8, r8)
 8007e16:	46bd      	mov	sp, r7
 8007e18:	b004      	add	sp, #16
 8007e1a:	bd80      	pop	{r7, pc}

08007e1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b084      	sub	sp, #16
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	691b      	ldr	r3, [r3, #16]
 8007e28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	687a      	ldr	r2, [r7, #4]
 8007e30:	6892      	ldr	r2, [r2, #8]
 8007e32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	687a      	ldr	r2, [r7, #4]
 8007e3a:	6852      	ldr	r2, [r2, #4]
 8007e3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	687a      	ldr	r2, [r7, #4]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d103      	bne.n	8007e50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	689a      	ldr	r2, [r3, #8]
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2200      	movs	r2, #0
 8007e54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	1e5a      	subs	r2, r3, #1
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
}
 8007e64:	0018      	movs	r0, r3
 8007e66:	46bd      	mov	sp, r7
 8007e68:	b004      	add	sp, #16
 8007e6a:	bd80      	pop	{r7, pc}

08007e6c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b084      	sub	sp, #16
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
 8007e74:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <xQueueGenericReset+0x18>
 8007e80:	b672      	cpsid	i
 8007e82:	e7fe      	b.n	8007e82 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8007e84:	f001 f914 	bl	80090b0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681a      	ldr	r2, [r3, #0]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e94:	434b      	muls	r3, r1
 8007e96:	18d2      	adds	r2, r2, r3
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681a      	ldr	r2, [r3, #0]
 8007ea6:	68fb      	ldr	r3, [r7, #12]
 8007ea8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681a      	ldr	r2, [r3, #0]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb2:	1e59      	subs	r1, r3, #1
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007eb8:	434b      	muls	r3, r1
 8007eba:	18d2      	adds	r2, r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2244      	movs	r2, #68	; 0x44
 8007ec4:	21ff      	movs	r1, #255	; 0xff
 8007ec6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2245      	movs	r2, #69	; 0x45
 8007ecc:	21ff      	movs	r1, #255	; 0xff
 8007ece:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d10d      	bne.n	8007ef2 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007ed6:	68fb      	ldr	r3, [r7, #12]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d013      	beq.n	8007f06 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	3310      	adds	r3, #16
 8007ee2:	0018      	movs	r0, r3
 8007ee4:	f000 fd72 	bl	80089cc <xTaskRemoveFromEventList>
 8007ee8:	1e03      	subs	r3, r0, #0
 8007eea:	d00c      	beq.n	8007f06 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007eec:	f001 f8d0 	bl	8009090 <vPortYield>
 8007ef0:	e009      	b.n	8007f06 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3310      	adds	r3, #16
 8007ef6:	0018      	movs	r0, r3
 8007ef8:	f7ff ff0f 	bl	8007d1a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	3324      	adds	r3, #36	; 0x24
 8007f00:	0018      	movs	r0, r3
 8007f02:	f7ff ff0a 	bl	8007d1a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007f06:	f001 f8e5 	bl	80090d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007f0a:	2301      	movs	r3, #1
}
 8007f0c:	0018      	movs	r0, r3
 8007f0e:	46bd      	mov	sp, r7
 8007f10:	b004      	add	sp, #16
 8007f12:	bd80      	pop	{r7, pc}

08007f14 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007f14:	b590      	push	{r4, r7, lr}
 8007f16:	b08b      	sub	sp, #44	; 0x2c
 8007f18:	af02      	add	r7, sp, #8
 8007f1a:	60f8      	str	r0, [r7, #12]
 8007f1c:	60b9      	str	r1, [r7, #8]
 8007f1e:	1dfb      	adds	r3, r7, #7
 8007f20:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d101      	bne.n	8007f2c <xQueueGenericCreate+0x18>
 8007f28:	b672      	cpsid	i
 8007f2a:	e7fe      	b.n	8007f2a <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	68ba      	ldr	r2, [r7, #8]
 8007f30:	4353      	muls	r3, r2
 8007f32:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	3348      	adds	r3, #72	; 0x48
 8007f38:	0018      	movs	r0, r3
 8007f3a:	f001 f951 	bl	80091e0 <pvPortMalloc>
 8007f3e:	0003      	movs	r3, r0
 8007f40:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8007f42:	69bb      	ldr	r3, [r7, #24]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d00e      	beq.n	8007f66 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007f48:	69bb      	ldr	r3, [r7, #24]
 8007f4a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	3348      	adds	r3, #72	; 0x48
 8007f50:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007f52:	1dfb      	adds	r3, r7, #7
 8007f54:	781c      	ldrb	r4, [r3, #0]
 8007f56:	697a      	ldr	r2, [r7, #20]
 8007f58:	68b9      	ldr	r1, [r7, #8]
 8007f5a:	68f8      	ldr	r0, [r7, #12]
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	0023      	movs	r3, r4
 8007f62:	f000 f805 	bl	8007f70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007f66:	69bb      	ldr	r3, [r7, #24]
	}
 8007f68:	0018      	movs	r0, r3
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	b009      	add	sp, #36	; 0x24
 8007f6e:	bd90      	pop	{r4, r7, pc}

08007f70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	60f8      	str	r0, [r7, #12]
 8007f78:	60b9      	str	r1, [r7, #8]
 8007f7a:	607a      	str	r2, [r7, #4]
 8007f7c:	001a      	movs	r2, r3
 8007f7e:	1cfb      	adds	r3, r7, #3
 8007f80:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f82:	68bb      	ldr	r3, [r7, #8]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d103      	bne.n	8007f90 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f88:	69bb      	ldr	r3, [r7, #24]
 8007f8a:	69ba      	ldr	r2, [r7, #24]
 8007f8c:	601a      	str	r2, [r3, #0]
 8007f8e:	e002      	b.n	8007f96 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f90:	69bb      	ldr	r3, [r7, #24]
 8007f92:	687a      	ldr	r2, [r7, #4]
 8007f94:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f96:	69bb      	ldr	r3, [r7, #24]
 8007f98:	68fa      	ldr	r2, [r7, #12]
 8007f9a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f9c:	69bb      	ldr	r3, [r7, #24]
 8007f9e:	68ba      	ldr	r2, [r7, #8]
 8007fa0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007fa2:	69bb      	ldr	r3, [r7, #24]
 8007fa4:	2101      	movs	r1, #1
 8007fa6:	0018      	movs	r0, r3
 8007fa8:	f7ff ff60 	bl	8007e6c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007fac:	46c0      	nop			; (mov r8, r8)
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b004      	add	sp, #16
 8007fb2:	bd80      	pop	{r7, pc}

08007fb4 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b088      	sub	sp, #32
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
 8007fbc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007fc2:	69bb      	ldr	r3, [r7, #24]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d101      	bne.n	8007fcc <xQueueGiveFromISR+0x18>
 8007fc8:	b672      	cpsid	i
 8007fca:	e7fe      	b.n	8007fca <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d001      	beq.n	8007fd8 <xQueueGiveFromISR+0x24>
 8007fd4:	b672      	cpsid	i
 8007fd6:	e7fe      	b.n	8007fd6 <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007fd8:	69bb      	ldr	r3, [r7, #24]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d103      	bne.n	8007fe8 <xQueueGiveFromISR+0x34>
 8007fe0:	69bb      	ldr	r3, [r7, #24]
 8007fe2:	689b      	ldr	r3, [r3, #8]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d101      	bne.n	8007fec <xQueueGiveFromISR+0x38>
 8007fe8:	2301      	movs	r3, #1
 8007fea:	e000      	b.n	8007fee <xQueueGiveFromISR+0x3a>
 8007fec:	2300      	movs	r3, #0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d101      	bne.n	8007ff6 <xQueueGiveFromISR+0x42>
 8007ff2:	b672      	cpsid	i
 8007ff4:	e7fe      	b.n	8007ff4 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007ff6:	f001 f885 	bl	8009104 <ulSetInterruptMaskFromISR>
 8007ffa:	0003      	movs	r3, r0
 8007ffc:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ffe:	69bb      	ldr	r3, [r7, #24]
 8008000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008002:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8008004:	69bb      	ldr	r3, [r7, #24]
 8008006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008008:	693a      	ldr	r2, [r7, #16]
 800800a:	429a      	cmp	r2, r3
 800800c:	d22c      	bcs.n	8008068 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800800e:	200f      	movs	r0, #15
 8008010:	183b      	adds	r3, r7, r0
 8008012:	69ba      	ldr	r2, [r7, #24]
 8008014:	2145      	movs	r1, #69	; 0x45
 8008016:	5c52      	ldrb	r2, [r2, r1]
 8008018:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800801a:	693b      	ldr	r3, [r7, #16]
 800801c:	1c5a      	adds	r2, r3, #1
 800801e:	69bb      	ldr	r3, [r7, #24]
 8008020:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008022:	183b      	adds	r3, r7, r0
 8008024:	781b      	ldrb	r3, [r3, #0]
 8008026:	b25b      	sxtb	r3, r3
 8008028:	3301      	adds	r3, #1
 800802a:	d111      	bne.n	8008050 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800802c:	69bb      	ldr	r3, [r7, #24]
 800802e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008030:	2b00      	cmp	r3, #0
 8008032:	d016      	beq.n	8008062 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008034:	69bb      	ldr	r3, [r7, #24]
 8008036:	3324      	adds	r3, #36	; 0x24
 8008038:	0018      	movs	r0, r3
 800803a:	f000 fcc7 	bl	80089cc <xTaskRemoveFromEventList>
 800803e:	1e03      	subs	r3, r0, #0
 8008040:	d00f      	beq.n	8008062 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d00c      	beq.n	8008062 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008048:	683b      	ldr	r3, [r7, #0]
 800804a:	2201      	movs	r2, #1
 800804c:	601a      	str	r2, [r3, #0]
 800804e:	e008      	b.n	8008062 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008050:	230f      	movs	r3, #15
 8008052:	18fb      	adds	r3, r7, r3
 8008054:	781b      	ldrb	r3, [r3, #0]
 8008056:	3301      	adds	r3, #1
 8008058:	b2db      	uxtb	r3, r3
 800805a:	b259      	sxtb	r1, r3
 800805c:	69bb      	ldr	r3, [r7, #24]
 800805e:	2245      	movs	r2, #69	; 0x45
 8008060:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8008062:	2301      	movs	r3, #1
 8008064:	61fb      	str	r3, [r7, #28]
 8008066:	e001      	b.n	800806c <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008068:	2300      	movs	r3, #0
 800806a:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	0018      	movs	r0, r3
 8008070:	f001 f84e 	bl	8009110 <vClearInterruptMaskFromISR>

	return xReturn;
 8008074:	69fb      	ldr	r3, [r7, #28]
}
 8008076:	0018      	movs	r0, r3
 8008078:	46bd      	mov	sp, r7
 800807a:	b008      	add	sp, #32
 800807c:	bd80      	pop	{r7, pc}

0800807e <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800807e:	b580      	push	{r7, lr}
 8008080:	b08a      	sub	sp, #40	; 0x28
 8008082:	af00      	add	r7, sp, #0
 8008084:	6078      	str	r0, [r7, #4]
 8008086:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008088:	2300      	movs	r3, #0
 800808a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008090:	2300      	movs	r3, #0
 8008092:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d101      	bne.n	800809e <xQueueSemaphoreTake+0x20>
 800809a:	b672      	cpsid	i
 800809c:	e7fe      	b.n	800809c <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800809e:	69fb      	ldr	r3, [r7, #28]
 80080a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d001      	beq.n	80080aa <xQueueSemaphoreTake+0x2c>
 80080a6:	b672      	cpsid	i
 80080a8:	e7fe      	b.n	80080a8 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80080aa:	f000 fe0b 	bl	8008cc4 <xTaskGetSchedulerState>
 80080ae:	1e03      	subs	r3, r0, #0
 80080b0:	d102      	bne.n	80080b8 <xQueueSemaphoreTake+0x3a>
 80080b2:	683b      	ldr	r3, [r7, #0]
 80080b4:	2b00      	cmp	r3, #0
 80080b6:	d101      	bne.n	80080bc <xQueueSemaphoreTake+0x3e>
 80080b8:	2301      	movs	r3, #1
 80080ba:	e000      	b.n	80080be <xQueueSemaphoreTake+0x40>
 80080bc:	2300      	movs	r3, #0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d101      	bne.n	80080c6 <xQueueSemaphoreTake+0x48>
 80080c2:	b672      	cpsid	i
 80080c4:	e7fe      	b.n	80080c4 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80080c6:	f000 fff3 	bl	80090b0 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ce:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80080d0:	69bb      	ldr	r3, [r7, #24]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d01d      	beq.n	8008112 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	1e5a      	subs	r2, r3, #1
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d104      	bne.n	80080f0 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80080e6:	f000 fee1 	bl	8008eac <pvTaskIncrementMutexHeldCount>
 80080ea:	0002      	movs	r2, r0
 80080ec:	69fb      	ldr	r3, [r7, #28]
 80080ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80080f0:	69fb      	ldr	r3, [r7, #28]
 80080f2:	691b      	ldr	r3, [r3, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d008      	beq.n	800810a <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	3310      	adds	r3, #16
 80080fc:	0018      	movs	r0, r3
 80080fe:	f000 fc65 	bl	80089cc <xTaskRemoveFromEventList>
 8008102:	1e03      	subs	r3, r0, #0
 8008104:	d001      	beq.n	800810a <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008106:	f000 ffc3 	bl	8009090 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800810a:	f000 ffe3 	bl	80090d4 <vPortExitCritical>
				return pdPASS;
 800810e:	2301      	movs	r3, #1
 8008110:	e08b      	b.n	800822a <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008112:	683b      	ldr	r3, [r7, #0]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d108      	bne.n	800812a <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8008118:	6a3b      	ldr	r3, [r7, #32]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d001      	beq.n	8008122 <xQueueSemaphoreTake+0xa4>
 800811e:	b672      	cpsid	i
 8008120:	e7fe      	b.n	8008120 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8008122:	f000 ffd7 	bl	80090d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008126:	2300      	movs	r3, #0
 8008128:	e07f      	b.n	800822a <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800812a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800812c:	2b00      	cmp	r3, #0
 800812e:	d106      	bne.n	800813e <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008130:	230c      	movs	r3, #12
 8008132:	18fb      	adds	r3, r7, r3
 8008134:	0018      	movs	r0, r3
 8008136:	f000 fca5 	bl	8008a84 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800813a:	2301      	movs	r3, #1
 800813c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800813e:	f000 ffc9 	bl	80090d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008142:	f000 fa8b 	bl	800865c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008146:	f000 ffb3 	bl	80090b0 <vPortEnterCritical>
 800814a:	69fb      	ldr	r3, [r7, #28]
 800814c:	2244      	movs	r2, #68	; 0x44
 800814e:	5c9b      	ldrb	r3, [r3, r2]
 8008150:	b25b      	sxtb	r3, r3
 8008152:	3301      	adds	r3, #1
 8008154:	d103      	bne.n	800815e <xQueueSemaphoreTake+0xe0>
 8008156:	69fb      	ldr	r3, [r7, #28]
 8008158:	2244      	movs	r2, #68	; 0x44
 800815a:	2100      	movs	r1, #0
 800815c:	5499      	strb	r1, [r3, r2]
 800815e:	69fb      	ldr	r3, [r7, #28]
 8008160:	2245      	movs	r2, #69	; 0x45
 8008162:	5c9b      	ldrb	r3, [r3, r2]
 8008164:	b25b      	sxtb	r3, r3
 8008166:	3301      	adds	r3, #1
 8008168:	d103      	bne.n	8008172 <xQueueSemaphoreTake+0xf4>
 800816a:	69fb      	ldr	r3, [r7, #28]
 800816c:	2245      	movs	r2, #69	; 0x45
 800816e:	2100      	movs	r1, #0
 8008170:	5499      	strb	r1, [r3, r2]
 8008172:	f000 ffaf 	bl	80090d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008176:	003a      	movs	r2, r7
 8008178:	230c      	movs	r3, #12
 800817a:	18fb      	adds	r3, r7, r3
 800817c:	0011      	movs	r1, r2
 800817e:	0018      	movs	r0, r3
 8008180:	f000 fc94 	bl	8008aac <xTaskCheckForTimeOut>
 8008184:	1e03      	subs	r3, r0, #0
 8008186:	d12e      	bne.n	80081e6 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	0018      	movs	r0, r3
 800818c:	f000 f8c5 	bl	800831a <prvIsQueueEmpty>
 8008190:	1e03      	subs	r3, r0, #0
 8008192:	d021      	beq.n	80081d8 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008194:	69fb      	ldr	r3, [r7, #28]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2b00      	cmp	r3, #0
 800819a:	d10a      	bne.n	80081b2 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800819c:	f000 ff88 	bl	80090b0 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	0018      	movs	r0, r3
 80081a6:	f000 fda9 	bl	8008cfc <xTaskPriorityInherit>
 80081aa:	0003      	movs	r3, r0
 80081ac:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 80081ae:	f000 ff91 	bl	80090d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80081b2:	69fb      	ldr	r3, [r7, #28]
 80081b4:	3324      	adds	r3, #36	; 0x24
 80081b6:	683a      	ldr	r2, [r7, #0]
 80081b8:	0011      	movs	r1, r2
 80081ba:	0018      	movs	r0, r3
 80081bc:	f000 fbe8 	bl	8008990 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80081c0:	69fb      	ldr	r3, [r7, #28]
 80081c2:	0018      	movs	r0, r3
 80081c4:	f000 f84b 	bl	800825e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80081c8:	f000 fa54 	bl	8008674 <xTaskResumeAll>
 80081cc:	1e03      	subs	r3, r0, #0
 80081ce:	d000      	beq.n	80081d2 <xQueueSemaphoreTake+0x154>
 80081d0:	e779      	b.n	80080c6 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 80081d2:	f000 ff5d 	bl	8009090 <vPortYield>
 80081d6:	e776      	b.n	80080c6 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80081d8:	69fb      	ldr	r3, [r7, #28]
 80081da:	0018      	movs	r0, r3
 80081dc:	f000 f83f 	bl	800825e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80081e0:	f000 fa48 	bl	8008674 <xTaskResumeAll>
 80081e4:	e76f      	b.n	80080c6 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80081e6:	69fb      	ldr	r3, [r7, #28]
 80081e8:	0018      	movs	r0, r3
 80081ea:	f000 f838 	bl	800825e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80081ee:	f000 fa41 	bl	8008674 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80081f2:	69fb      	ldr	r3, [r7, #28]
 80081f4:	0018      	movs	r0, r3
 80081f6:	f000 f890 	bl	800831a <prvIsQueueEmpty>
 80081fa:	1e03      	subs	r3, r0, #0
 80081fc:	d100      	bne.n	8008200 <xQueueSemaphoreTake+0x182>
 80081fe:	e762      	b.n	80080c6 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008200:	6a3b      	ldr	r3, [r7, #32]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d010      	beq.n	8008228 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 8008206:	f000 ff53 	bl	80090b0 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800820a:	69fb      	ldr	r3, [r7, #28]
 800820c:	0018      	movs	r0, r3
 800820e:	f000 f810 	bl	8008232 <prvGetDisinheritPriorityAfterTimeout>
 8008212:	0003      	movs	r3, r0
 8008214:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8008216:	69fb      	ldr	r3, [r7, #28]
 8008218:	689b      	ldr	r3, [r3, #8]
 800821a:	697a      	ldr	r2, [r7, #20]
 800821c:	0011      	movs	r1, r2
 800821e:	0018      	movs	r0, r3
 8008220:	f000 fdd4 	bl	8008dcc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8008224:	f000 ff56 	bl	80090d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008228:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800822a:	0018      	movs	r0, r3
 800822c:	46bd      	mov	sp, r7
 800822e:	b00a      	add	sp, #40	; 0x28
 8008230:	bd80      	pop	{r7, pc}

08008232 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8008232:	b580      	push	{r7, lr}
 8008234:	b084      	sub	sp, #16
 8008236:	af00      	add	r7, sp, #0
 8008238:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800823e:	2b00      	cmp	r3, #0
 8008240:	d006      	beq.n	8008250 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	2207      	movs	r2, #7
 800824a:	1ad3      	subs	r3, r2, r3
 800824c:	60fb      	str	r3, [r7, #12]
 800824e:	e001      	b.n	8008254 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008250:	2300      	movs	r3, #0
 8008252:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008254:	68fb      	ldr	r3, [r7, #12]
	}
 8008256:	0018      	movs	r0, r3
 8008258:	46bd      	mov	sp, r7
 800825a:	b004      	add	sp, #16
 800825c:	bd80      	pop	{r7, pc}

0800825e <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b084      	sub	sp, #16
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008266:	f000 ff23 	bl	80090b0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800826a:	230f      	movs	r3, #15
 800826c:	18fb      	adds	r3, r7, r3
 800826e:	687a      	ldr	r2, [r7, #4]
 8008270:	2145      	movs	r1, #69	; 0x45
 8008272:	5c52      	ldrb	r2, [r2, r1]
 8008274:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008276:	e013      	b.n	80082a0 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800827c:	2b00      	cmp	r3, #0
 800827e:	d016      	beq.n	80082ae <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	3324      	adds	r3, #36	; 0x24
 8008284:	0018      	movs	r0, r3
 8008286:	f000 fba1 	bl	80089cc <xTaskRemoveFromEventList>
 800828a:	1e03      	subs	r3, r0, #0
 800828c:	d001      	beq.n	8008292 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800828e:	f000 fc5d 	bl	8008b4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008292:	210f      	movs	r1, #15
 8008294:	187b      	adds	r3, r7, r1
 8008296:	781b      	ldrb	r3, [r3, #0]
 8008298:	3b01      	subs	r3, #1
 800829a:	b2da      	uxtb	r2, r3
 800829c:	187b      	adds	r3, r7, r1
 800829e:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80082a0:	230f      	movs	r3, #15
 80082a2:	18fb      	adds	r3, r7, r3
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	b25b      	sxtb	r3, r3
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	dce5      	bgt.n	8008278 <prvUnlockQueue+0x1a>
 80082ac:	e000      	b.n	80082b0 <prvUnlockQueue+0x52>
					break;
 80082ae:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2245      	movs	r2, #69	; 0x45
 80082b4:	21ff      	movs	r1, #255	; 0xff
 80082b6:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80082b8:	f000 ff0c 	bl	80090d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80082bc:	f000 fef8 	bl	80090b0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80082c0:	230e      	movs	r3, #14
 80082c2:	18fb      	adds	r3, r7, r3
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	2144      	movs	r1, #68	; 0x44
 80082c8:	5c52      	ldrb	r2, [r2, r1]
 80082ca:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082cc:	e013      	b.n	80082f6 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	691b      	ldr	r3, [r3, #16]
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d016      	beq.n	8008304 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	3310      	adds	r3, #16
 80082da:	0018      	movs	r0, r3
 80082dc:	f000 fb76 	bl	80089cc <xTaskRemoveFromEventList>
 80082e0:	1e03      	subs	r3, r0, #0
 80082e2:	d001      	beq.n	80082e8 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 80082e4:	f000 fc32 	bl	8008b4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80082e8:	210e      	movs	r1, #14
 80082ea:	187b      	adds	r3, r7, r1
 80082ec:	781b      	ldrb	r3, [r3, #0]
 80082ee:	3b01      	subs	r3, #1
 80082f0:	b2da      	uxtb	r2, r3
 80082f2:	187b      	adds	r3, r7, r1
 80082f4:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80082f6:	230e      	movs	r3, #14
 80082f8:	18fb      	adds	r3, r7, r3
 80082fa:	781b      	ldrb	r3, [r3, #0]
 80082fc:	b25b      	sxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dce5      	bgt.n	80082ce <prvUnlockQueue+0x70>
 8008302:	e000      	b.n	8008306 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008304:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2244      	movs	r2, #68	; 0x44
 800830a:	21ff      	movs	r1, #255	; 0xff
 800830c:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800830e:	f000 fee1 	bl	80090d4 <vPortExitCritical>
}
 8008312:	46c0      	nop			; (mov r8, r8)
 8008314:	46bd      	mov	sp, r7
 8008316:	b004      	add	sp, #16
 8008318:	bd80      	pop	{r7, pc}

0800831a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008322:	f000 fec5 	bl	80090b0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	2b00      	cmp	r3, #0
 800832c:	d102      	bne.n	8008334 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800832e:	2301      	movs	r3, #1
 8008330:	60fb      	str	r3, [r7, #12]
 8008332:	e001      	b.n	8008338 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008334:	2300      	movs	r3, #0
 8008336:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008338:	f000 fecc 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 800833c:	68fb      	ldr	r3, [r7, #12]
}
 800833e:	0018      	movs	r0, r3
 8008340:	46bd      	mov	sp, r7
 8008342:	b004      	add	sp, #16
 8008344:	bd80      	pop	{r7, pc}

08008346 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008346:	b590      	push	{r4, r7, lr}
 8008348:	b08d      	sub	sp, #52	; 0x34
 800834a:	af04      	add	r7, sp, #16
 800834c:	60f8      	str	r0, [r7, #12]
 800834e:	60b9      	str	r1, [r7, #8]
 8008350:	603b      	str	r3, [r7, #0]
 8008352:	1dbb      	adds	r3, r7, #6
 8008354:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008356:	1dbb      	adds	r3, r7, #6
 8008358:	881b      	ldrh	r3, [r3, #0]
 800835a:	009b      	lsls	r3, r3, #2
 800835c:	0018      	movs	r0, r3
 800835e:	f000 ff3f 	bl	80091e0 <pvPortMalloc>
 8008362:	0003      	movs	r3, r0
 8008364:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008366:	697b      	ldr	r3, [r7, #20]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d010      	beq.n	800838e <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800836c:	2054      	movs	r0, #84	; 0x54
 800836e:	f000 ff37 	bl	80091e0 <pvPortMalloc>
 8008372:	0003      	movs	r3, r0
 8008374:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	2b00      	cmp	r3, #0
 800837a:	d003      	beq.n	8008384 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800837c:	69fb      	ldr	r3, [r7, #28]
 800837e:	697a      	ldr	r2, [r7, #20]
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
 8008382:	e006      	b.n	8008392 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008384:	697b      	ldr	r3, [r7, #20]
 8008386:	0018      	movs	r0, r3
 8008388:	f000 ffd6 	bl	8009338 <vPortFree>
 800838c:	e001      	b.n	8008392 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800838e:	2300      	movs	r3, #0
 8008390:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d016      	beq.n	80083c6 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008398:	1dbb      	adds	r3, r7, #6
 800839a:	881a      	ldrh	r2, [r3, #0]
 800839c:	683c      	ldr	r4, [r7, #0]
 800839e:	68b9      	ldr	r1, [r7, #8]
 80083a0:	68f8      	ldr	r0, [r7, #12]
 80083a2:	2300      	movs	r3, #0
 80083a4:	9303      	str	r3, [sp, #12]
 80083a6:	69fb      	ldr	r3, [r7, #28]
 80083a8:	9302      	str	r3, [sp, #8]
 80083aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ac:	9301      	str	r3, [sp, #4]
 80083ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b0:	9300      	str	r3, [sp, #0]
 80083b2:	0023      	movs	r3, r4
 80083b4:	f000 f810 	bl	80083d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	0018      	movs	r0, r3
 80083bc:	f000 f88e 	bl	80084dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083c0:	2301      	movs	r3, #1
 80083c2:	61bb      	str	r3, [r7, #24]
 80083c4:	e002      	b.n	80083cc <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083c6:	2301      	movs	r3, #1
 80083c8:	425b      	negs	r3, r3
 80083ca:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80083cc:	69bb      	ldr	r3, [r7, #24]
	}
 80083ce:	0018      	movs	r0, r3
 80083d0:	46bd      	mov	sp, r7
 80083d2:	b009      	add	sp, #36	; 0x24
 80083d4:	bd90      	pop	{r4, r7, pc}
	...

080083d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b086      	sub	sp, #24
 80083dc:	af00      	add	r7, sp, #0
 80083de:	60f8      	str	r0, [r7, #12]
 80083e0:	60b9      	str	r1, [r7, #8]
 80083e2:	607a      	str	r2, [r7, #4]
 80083e4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80083e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	493a      	ldr	r1, [pc, #232]	; (80084d8 <prvInitialiseNewTask+0x100>)
 80083ee:	468c      	mov	ip, r1
 80083f0:	4463      	add	r3, ip
 80083f2:	009b      	lsls	r3, r3, #2
 80083f4:	18d3      	adds	r3, r2, r3
 80083f6:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	2207      	movs	r2, #7
 80083fc:	4393      	bics	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	2207      	movs	r2, #7
 8008404:	4013      	ands	r3, r2
 8008406:	d001      	beq.n	800840c <prvInitialiseNewTask+0x34>
 8008408:	b672      	cpsid	i
 800840a:	e7fe      	b.n	800840a <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d020      	beq.n	8008454 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008412:	2300      	movs	r3, #0
 8008414:	617b      	str	r3, [r7, #20]
 8008416:	e013      	b.n	8008440 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008418:	68ba      	ldr	r2, [r7, #8]
 800841a:	697b      	ldr	r3, [r7, #20]
 800841c:	18d3      	adds	r3, r2, r3
 800841e:	7818      	ldrb	r0, [r3, #0]
 8008420:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008422:	2134      	movs	r1, #52	; 0x34
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	18d3      	adds	r3, r2, r3
 8008428:	185b      	adds	r3, r3, r1
 800842a:	1c02      	adds	r2, r0, #0
 800842c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800842e:	68ba      	ldr	r2, [r7, #8]
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	18d3      	adds	r3, r2, r3
 8008434:	781b      	ldrb	r3, [r3, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	d006      	beq.n	8008448 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	3301      	adds	r3, #1
 800843e:	617b      	str	r3, [r7, #20]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	2b0f      	cmp	r3, #15
 8008444:	d9e8      	bls.n	8008418 <prvInitialiseNewTask+0x40>
 8008446:	e000      	b.n	800844a <prvInitialiseNewTask+0x72>
			{
				break;
 8008448:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800844a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800844c:	2243      	movs	r2, #67	; 0x43
 800844e:	2100      	movs	r1, #0
 8008450:	5499      	strb	r1, [r3, r2]
 8008452:	e003      	b.n	800845c <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008454:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008456:	2234      	movs	r2, #52	; 0x34
 8008458:	2100      	movs	r1, #0
 800845a:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800845c:	6a3b      	ldr	r3, [r7, #32]
 800845e:	2b06      	cmp	r3, #6
 8008460:	d901      	bls.n	8008466 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008462:	2306      	movs	r3, #6
 8008464:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008468:	6a3a      	ldr	r2, [r7, #32]
 800846a:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800846c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800846e:	6a3a      	ldr	r2, [r7, #32]
 8008470:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008474:	2200      	movs	r2, #0
 8008476:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800847a:	3304      	adds	r3, #4
 800847c:	0018      	movs	r0, r3
 800847e:	f7ff fc6a 	bl	8007d56 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008484:	3318      	adds	r3, #24
 8008486:	0018      	movs	r0, r3
 8008488:	f7ff fc65 	bl	8007d56 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800848c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800848e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008490:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008492:	6a3b      	ldr	r3, [r7, #32]
 8008494:	2207      	movs	r2, #7
 8008496:	1ad2      	subs	r2, r2, r3
 8008498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800849c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800849e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084a0:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084a4:	2200      	movs	r2, #0
 80084a6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084aa:	2250      	movs	r2, #80	; 0x50
 80084ac:	2100      	movs	r1, #0
 80084ae:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084b0:	683a      	ldr	r2, [r7, #0]
 80084b2:	68f9      	ldr	r1, [r7, #12]
 80084b4:	693b      	ldr	r3, [r7, #16]
 80084b6:	0018      	movs	r0, r3
 80084b8:	f000 fd5e 	bl	8008f78 <pxPortInitialiseStack>
 80084bc:	0002      	movs	r2, r0
 80084be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80084c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d002      	beq.n	80084ce <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80084c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084cc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80084ce:	46c0      	nop			; (mov r8, r8)
 80084d0:	46bd      	mov	sp, r7
 80084d2:	b006      	add	sp, #24
 80084d4:	bd80      	pop	{r7, pc}
 80084d6:	46c0      	nop			; (mov r8, r8)
 80084d8:	3fffffff 	.word	0x3fffffff

080084dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b082      	sub	sp, #8
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80084e4:	f000 fde4 	bl	80090b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80084e8:	4b28      	ldr	r3, [pc, #160]	; (800858c <prvAddNewTaskToReadyList+0xb0>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	1c5a      	adds	r2, r3, #1
 80084ee:	4b27      	ldr	r3, [pc, #156]	; (800858c <prvAddNewTaskToReadyList+0xb0>)
 80084f0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 80084f2:	4b27      	ldr	r3, [pc, #156]	; (8008590 <prvAddNewTaskToReadyList+0xb4>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d109      	bne.n	800850e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80084fa:	4b25      	ldr	r3, [pc, #148]	; (8008590 <prvAddNewTaskToReadyList+0xb4>)
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008500:	4b22      	ldr	r3, [pc, #136]	; (800858c <prvAddNewTaskToReadyList+0xb0>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b01      	cmp	r3, #1
 8008506:	d110      	bne.n	800852a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008508:	f000 fb3a 	bl	8008b80 <prvInitialiseTaskLists>
 800850c:	e00d      	b.n	800852a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800850e:	4b21      	ldr	r3, [pc, #132]	; (8008594 <prvAddNewTaskToReadyList+0xb8>)
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d109      	bne.n	800852a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008516:	4b1e      	ldr	r3, [pc, #120]	; (8008590 <prvAddNewTaskToReadyList+0xb4>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008520:	429a      	cmp	r2, r3
 8008522:	d802      	bhi.n	800852a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008524:	4b1a      	ldr	r3, [pc, #104]	; (8008590 <prvAddNewTaskToReadyList+0xb4>)
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800852a:	4b1b      	ldr	r3, [pc, #108]	; (8008598 <prvAddNewTaskToReadyList+0xbc>)
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	4b19      	ldr	r3, [pc, #100]	; (8008598 <prvAddNewTaskToReadyList+0xbc>)
 8008532:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008538:	4b18      	ldr	r3, [pc, #96]	; (800859c <prvAddNewTaskToReadyList+0xc0>)
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	429a      	cmp	r2, r3
 800853e:	d903      	bls.n	8008548 <prvAddNewTaskToReadyList+0x6c>
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008544:	4b15      	ldr	r3, [pc, #84]	; (800859c <prvAddNewTaskToReadyList+0xc0>)
 8008546:	601a      	str	r2, [r3, #0]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800854c:	0013      	movs	r3, r2
 800854e:	009b      	lsls	r3, r3, #2
 8008550:	189b      	adds	r3, r3, r2
 8008552:	009b      	lsls	r3, r3, #2
 8008554:	4a12      	ldr	r2, [pc, #72]	; (80085a0 <prvAddNewTaskToReadyList+0xc4>)
 8008556:	189a      	adds	r2, r3, r2
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	3304      	adds	r3, #4
 800855c:	0019      	movs	r1, r3
 800855e:	0010      	movs	r0, r2
 8008560:	f7ff fc04 	bl	8007d6c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008564:	f000 fdb6 	bl	80090d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008568:	4b0a      	ldr	r3, [pc, #40]	; (8008594 <prvAddNewTaskToReadyList+0xb8>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d008      	beq.n	8008582 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008570:	4b07      	ldr	r3, [pc, #28]	; (8008590 <prvAddNewTaskToReadyList+0xb4>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800857a:	429a      	cmp	r2, r3
 800857c:	d201      	bcs.n	8008582 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800857e:	f000 fd87 	bl	8009090 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008582:	46c0      	nop			; (mov r8, r8)
 8008584:	46bd      	mov	sp, r7
 8008586:	b002      	add	sp, #8
 8008588:	bd80      	pop	{r7, pc}
 800858a:	46c0      	nop			; (mov r8, r8)
 800858c:	200036c4 	.word	0x200036c4
 8008590:	200035c4 	.word	0x200035c4
 8008594:	200036d0 	.word	0x200036d0
 8008598:	200036e0 	.word	0x200036e0
 800859c:	200036cc 	.word	0x200036cc
 80085a0:	200035c8 	.word	0x200035c8

080085a4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b084      	sub	sp, #16
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085ac:	2300      	movs	r3, #0
 80085ae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d010      	beq.n	80085d8 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80085b6:	4b0d      	ldr	r3, [pc, #52]	; (80085ec <vTaskDelay+0x48>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2b00      	cmp	r3, #0
 80085bc:	d001      	beq.n	80085c2 <vTaskDelay+0x1e>
 80085be:	b672      	cpsid	i
 80085c0:	e7fe      	b.n	80085c0 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 80085c2:	f000 f84b 	bl	800865c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	2100      	movs	r1, #0
 80085ca:	0018      	movs	r0, r3
 80085cc:	f000 fc80 	bl	8008ed0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80085d0:	f000 f850 	bl	8008674 <xTaskResumeAll>
 80085d4:	0003      	movs	r3, r0
 80085d6:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d101      	bne.n	80085e2 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 80085de:	f000 fd57 	bl	8009090 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80085e2:	46c0      	nop			; (mov r8, r8)
 80085e4:	46bd      	mov	sp, r7
 80085e6:	b004      	add	sp, #16
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	46c0      	nop			; (mov r8, r8)
 80085ec:	200036ec 	.word	0x200036ec

080085f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80085f6:	4913      	ldr	r1, [pc, #76]	; (8008644 <vTaskStartScheduler+0x54>)
 80085f8:	4813      	ldr	r0, [pc, #76]	; (8008648 <vTaskStartScheduler+0x58>)
 80085fa:	4b14      	ldr	r3, [pc, #80]	; (800864c <vTaskStartScheduler+0x5c>)
 80085fc:	9301      	str	r3, [sp, #4]
 80085fe:	2300      	movs	r3, #0
 8008600:	9300      	str	r3, [sp, #0]
 8008602:	2300      	movs	r3, #0
 8008604:	2280      	movs	r2, #128	; 0x80
 8008606:	f7ff fe9e 	bl	8008346 <xTaskCreate>
 800860a:	0003      	movs	r3, r0
 800860c:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	2b01      	cmp	r3, #1
 8008612:	d10d      	bne.n	8008630 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008614:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008616:	4b0e      	ldr	r3, [pc, #56]	; (8008650 <vTaskStartScheduler+0x60>)
 8008618:	2201      	movs	r2, #1
 800861a:	4252      	negs	r2, r2
 800861c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800861e:	4b0d      	ldr	r3, [pc, #52]	; (8008654 <vTaskStartScheduler+0x64>)
 8008620:	2201      	movs	r2, #1
 8008622:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008624:	4b0c      	ldr	r3, [pc, #48]	; (8008658 <vTaskStartScheduler+0x68>)
 8008626:	2200      	movs	r2, #0
 8008628:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800862a:	f000 fd0d 	bl	8009048 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800862e:	e004      	b.n	800863a <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	3301      	adds	r3, #1
 8008634:	d101      	bne.n	800863a <vTaskStartScheduler+0x4a>
 8008636:	b672      	cpsid	i
 8008638:	e7fe      	b.n	8008638 <vTaskStartScheduler+0x48>
}
 800863a:	46c0      	nop			; (mov r8, r8)
 800863c:	46bd      	mov	sp, r7
 800863e:	b002      	add	sp, #8
 8008640:	bd80      	pop	{r7, pc}
 8008642:	46c0      	nop			; (mov r8, r8)
 8008644:	0800b130 	.word	0x0800b130
 8008648:	08008b61 	.word	0x08008b61
 800864c:	200036e8 	.word	0x200036e8
 8008650:	200036e4 	.word	0x200036e4
 8008654:	200036d0 	.word	0x200036d0
 8008658:	200036c8 	.word	0x200036c8

0800865c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008660:	4b03      	ldr	r3, [pc, #12]	; (8008670 <vTaskSuspendAll+0x14>)
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	1c5a      	adds	r2, r3, #1
 8008666:	4b02      	ldr	r3, [pc, #8]	; (8008670 <vTaskSuspendAll+0x14>)
 8008668:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800866a:	46c0      	nop			; (mov r8, r8)
 800866c:	46bd      	mov	sp, r7
 800866e:	bd80      	pop	{r7, pc}
 8008670:	200036ec 	.word	0x200036ec

08008674 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008674:	b580      	push	{r7, lr}
 8008676:	b084      	sub	sp, #16
 8008678:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800867a:	2300      	movs	r3, #0
 800867c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800867e:	2300      	movs	r3, #0
 8008680:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008682:	4b3a      	ldr	r3, [pc, #232]	; (800876c <xTaskResumeAll+0xf8>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <xTaskResumeAll+0x1a>
 800868a:	b672      	cpsid	i
 800868c:	e7fe      	b.n	800868c <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800868e:	f000 fd0f 	bl	80090b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008692:	4b36      	ldr	r3, [pc, #216]	; (800876c <xTaskResumeAll+0xf8>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	1e5a      	subs	r2, r3, #1
 8008698:	4b34      	ldr	r3, [pc, #208]	; (800876c <xTaskResumeAll+0xf8>)
 800869a:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800869c:	4b33      	ldr	r3, [pc, #204]	; (800876c <xTaskResumeAll+0xf8>)
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d15b      	bne.n	800875c <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80086a4:	4b32      	ldr	r3, [pc, #200]	; (8008770 <xTaskResumeAll+0xfc>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d057      	beq.n	800875c <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086ac:	e02f      	b.n	800870e <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086ae:	4b31      	ldr	r3, [pc, #196]	; (8008774 <xTaskResumeAll+0x100>)
 80086b0:	68db      	ldr	r3, [r3, #12]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	3318      	adds	r3, #24
 80086ba:	0018      	movs	r0, r3
 80086bc:	f7ff fbae 	bl	8007e1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	3304      	adds	r3, #4
 80086c4:	0018      	movs	r0, r3
 80086c6:	f7ff fba9 	bl	8007e1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086ce:	4b2a      	ldr	r3, [pc, #168]	; (8008778 <xTaskResumeAll+0x104>)
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	429a      	cmp	r2, r3
 80086d4:	d903      	bls.n	80086de <xTaskResumeAll+0x6a>
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086da:	4b27      	ldr	r3, [pc, #156]	; (8008778 <xTaskResumeAll+0x104>)
 80086dc:	601a      	str	r2, [r3, #0]
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e2:	0013      	movs	r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	189b      	adds	r3, r3, r2
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	4a24      	ldr	r2, [pc, #144]	; (800877c <xTaskResumeAll+0x108>)
 80086ec:	189a      	adds	r2, r3, r2
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	3304      	adds	r3, #4
 80086f2:	0019      	movs	r1, r3
 80086f4:	0010      	movs	r0, r2
 80086f6:	f7ff fb39 	bl	8007d6c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086fe:	4b20      	ldr	r3, [pc, #128]	; (8008780 <xTaskResumeAll+0x10c>)
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	429a      	cmp	r2, r3
 8008706:	d302      	bcc.n	800870e <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008708:	4b1e      	ldr	r3, [pc, #120]	; (8008784 <xTaskResumeAll+0x110>)
 800870a:	2201      	movs	r2, #1
 800870c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800870e:	4b19      	ldr	r3, [pc, #100]	; (8008774 <xTaskResumeAll+0x100>)
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	2b00      	cmp	r3, #0
 8008714:	d1cb      	bne.n	80086ae <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d001      	beq.n	8008720 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800871c:	f000 fab4 	bl	8008c88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008720:	4b19      	ldr	r3, [pc, #100]	; (8008788 <xTaskResumeAll+0x114>)
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d00f      	beq.n	800874c <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800872c:	f000 f82e 	bl	800878c <xTaskIncrementTick>
 8008730:	1e03      	subs	r3, r0, #0
 8008732:	d002      	beq.n	800873a <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008734:	4b13      	ldr	r3, [pc, #76]	; (8008784 <xTaskResumeAll+0x110>)
 8008736:	2201      	movs	r2, #1
 8008738:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	3b01      	subs	r3, #1
 800873e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d1f2      	bne.n	800872c <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8008746:	4b10      	ldr	r3, [pc, #64]	; (8008788 <xTaskResumeAll+0x114>)
 8008748:	2200      	movs	r2, #0
 800874a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800874c:	4b0d      	ldr	r3, [pc, #52]	; (8008784 <xTaskResumeAll+0x110>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d003      	beq.n	800875c <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008754:	2301      	movs	r3, #1
 8008756:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008758:	f000 fc9a 	bl	8009090 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800875c:	f000 fcba 	bl	80090d4 <vPortExitCritical>

	return xAlreadyYielded;
 8008760:	68bb      	ldr	r3, [r7, #8]
}
 8008762:	0018      	movs	r0, r3
 8008764:	46bd      	mov	sp, r7
 8008766:	b004      	add	sp, #16
 8008768:	bd80      	pop	{r7, pc}
 800876a:	46c0      	nop			; (mov r8, r8)
 800876c:	200036ec 	.word	0x200036ec
 8008770:	200036c4 	.word	0x200036c4
 8008774:	20003684 	.word	0x20003684
 8008778:	200036cc 	.word	0x200036cc
 800877c:	200035c8 	.word	0x200035c8
 8008780:	200035c4 	.word	0x200035c4
 8008784:	200036d8 	.word	0x200036d8
 8008788:	200036d4 	.word	0x200036d4

0800878c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b086      	sub	sp, #24
 8008790:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008792:	2300      	movs	r3, #0
 8008794:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008796:	4b4a      	ldr	r3, [pc, #296]	; (80088c0 <xTaskIncrementTick+0x134>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d000      	beq.n	80087a0 <xTaskIncrementTick+0x14>
 800879e:	e084      	b.n	80088aa <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80087a0:	4b48      	ldr	r3, [pc, #288]	; (80088c4 <xTaskIncrementTick+0x138>)
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80087a8:	4b46      	ldr	r3, [pc, #280]	; (80088c4 <xTaskIncrementTick+0x138>)
 80087aa:	693a      	ldr	r2, [r7, #16]
 80087ac:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d117      	bne.n	80087e4 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80087b4:	4b44      	ldr	r3, [pc, #272]	; (80088c8 <xTaskIncrementTick+0x13c>)
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d001      	beq.n	80087c2 <xTaskIncrementTick+0x36>
 80087be:	b672      	cpsid	i
 80087c0:	e7fe      	b.n	80087c0 <xTaskIncrementTick+0x34>
 80087c2:	4b41      	ldr	r3, [pc, #260]	; (80088c8 <xTaskIncrementTick+0x13c>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	60fb      	str	r3, [r7, #12]
 80087c8:	4b40      	ldr	r3, [pc, #256]	; (80088cc <xTaskIncrementTick+0x140>)
 80087ca:	681a      	ldr	r2, [r3, #0]
 80087cc:	4b3e      	ldr	r3, [pc, #248]	; (80088c8 <xTaskIncrementTick+0x13c>)
 80087ce:	601a      	str	r2, [r3, #0]
 80087d0:	4b3e      	ldr	r3, [pc, #248]	; (80088cc <xTaskIncrementTick+0x140>)
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	601a      	str	r2, [r3, #0]
 80087d6:	4b3e      	ldr	r3, [pc, #248]	; (80088d0 <xTaskIncrementTick+0x144>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	1c5a      	adds	r2, r3, #1
 80087dc:	4b3c      	ldr	r3, [pc, #240]	; (80088d0 <xTaskIncrementTick+0x144>)
 80087de:	601a      	str	r2, [r3, #0]
 80087e0:	f000 fa52 	bl	8008c88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80087e4:	4b3b      	ldr	r3, [pc, #236]	; (80088d4 <xTaskIncrementTick+0x148>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	693a      	ldr	r2, [r7, #16]
 80087ea:	429a      	cmp	r2, r3
 80087ec:	d349      	bcc.n	8008882 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80087ee:	4b36      	ldr	r3, [pc, #216]	; (80088c8 <xTaskIncrementTick+0x13c>)
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d104      	bne.n	8008802 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087f8:	4b36      	ldr	r3, [pc, #216]	; (80088d4 <xTaskIncrementTick+0x148>)
 80087fa:	2201      	movs	r2, #1
 80087fc:	4252      	negs	r2, r2
 80087fe:	601a      	str	r2, [r3, #0]
					break;
 8008800:	e03f      	b.n	8008882 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008802:	4b31      	ldr	r3, [pc, #196]	; (80088c8 <xTaskIncrementTick+0x13c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	68db      	ldr	r3, [r3, #12]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008812:	693a      	ldr	r2, [r7, #16]
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d203      	bcs.n	8008822 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800881a:	4b2e      	ldr	r3, [pc, #184]	; (80088d4 <xTaskIncrementTick+0x148>)
 800881c:	687a      	ldr	r2, [r7, #4]
 800881e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008820:	e02f      	b.n	8008882 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	3304      	adds	r3, #4
 8008826:	0018      	movs	r0, r3
 8008828:	f7ff faf8 	bl	8007e1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008830:	2b00      	cmp	r3, #0
 8008832:	d004      	beq.n	800883e <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008834:	68bb      	ldr	r3, [r7, #8]
 8008836:	3318      	adds	r3, #24
 8008838:	0018      	movs	r0, r3
 800883a:	f7ff faef 	bl	8007e1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008842:	4b25      	ldr	r3, [pc, #148]	; (80088d8 <xTaskIncrementTick+0x14c>)
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	429a      	cmp	r2, r3
 8008848:	d903      	bls.n	8008852 <xTaskIncrementTick+0xc6>
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800884e:	4b22      	ldr	r3, [pc, #136]	; (80088d8 <xTaskIncrementTick+0x14c>)
 8008850:	601a      	str	r2, [r3, #0]
 8008852:	68bb      	ldr	r3, [r7, #8]
 8008854:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008856:	0013      	movs	r3, r2
 8008858:	009b      	lsls	r3, r3, #2
 800885a:	189b      	adds	r3, r3, r2
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4a1f      	ldr	r2, [pc, #124]	; (80088dc <xTaskIncrementTick+0x150>)
 8008860:	189a      	adds	r2, r3, r2
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	3304      	adds	r3, #4
 8008866:	0019      	movs	r1, r3
 8008868:	0010      	movs	r0, r2
 800886a:	f7ff fa7f 	bl	8007d6c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008872:	4b1b      	ldr	r3, [pc, #108]	; (80088e0 <xTaskIncrementTick+0x154>)
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008878:	429a      	cmp	r2, r3
 800887a:	d3b8      	bcc.n	80087ee <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800887c:	2301      	movs	r3, #1
 800887e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008880:	e7b5      	b.n	80087ee <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008882:	4b17      	ldr	r3, [pc, #92]	; (80088e0 <xTaskIncrementTick+0x154>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008888:	4914      	ldr	r1, [pc, #80]	; (80088dc <xTaskIncrementTick+0x150>)
 800888a:	0013      	movs	r3, r2
 800888c:	009b      	lsls	r3, r3, #2
 800888e:	189b      	adds	r3, r3, r2
 8008890:	009b      	lsls	r3, r3, #2
 8008892:	585b      	ldr	r3, [r3, r1]
 8008894:	2b01      	cmp	r3, #1
 8008896:	d901      	bls.n	800889c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8008898:	2301      	movs	r3, #1
 800889a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800889c:	4b11      	ldr	r3, [pc, #68]	; (80088e4 <xTaskIncrementTick+0x158>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d007      	beq.n	80088b4 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80088a4:	2301      	movs	r3, #1
 80088a6:	617b      	str	r3, [r7, #20]
 80088a8:	e004      	b.n	80088b4 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80088aa:	4b0f      	ldr	r3, [pc, #60]	; (80088e8 <xTaskIncrementTick+0x15c>)
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <xTaskIncrementTick+0x15c>)
 80088b2:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80088b4:	697b      	ldr	r3, [r7, #20]
}
 80088b6:	0018      	movs	r0, r3
 80088b8:	46bd      	mov	sp, r7
 80088ba:	b006      	add	sp, #24
 80088bc:	bd80      	pop	{r7, pc}
 80088be:	46c0      	nop			; (mov r8, r8)
 80088c0:	200036ec 	.word	0x200036ec
 80088c4:	200036c8 	.word	0x200036c8
 80088c8:	2000367c 	.word	0x2000367c
 80088cc:	20003680 	.word	0x20003680
 80088d0:	200036dc 	.word	0x200036dc
 80088d4:	200036e4 	.word	0x200036e4
 80088d8:	200036cc 	.word	0x200036cc
 80088dc:	200035c8 	.word	0x200035c8
 80088e0:	200035c4 	.word	0x200035c4
 80088e4:	200036d8 	.word	0x200036d8
 80088e8:	200036d4 	.word	0x200036d4

080088ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b082      	sub	sp, #8
 80088f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80088f2:	4b22      	ldr	r3, [pc, #136]	; (800897c <vTaskSwitchContext+0x90>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80088fa:	4b21      	ldr	r3, [pc, #132]	; (8008980 <vTaskSwitchContext+0x94>)
 80088fc:	2201      	movs	r2, #1
 80088fe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008900:	e037      	b.n	8008972 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8008902:	4b1f      	ldr	r3, [pc, #124]	; (8008980 <vTaskSwitchContext+0x94>)
 8008904:	2200      	movs	r2, #0
 8008906:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008908:	4b1e      	ldr	r3, [pc, #120]	; (8008984 <vTaskSwitchContext+0x98>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	607b      	str	r3, [r7, #4]
 800890e:	e007      	b.n	8008920 <vTaskSwitchContext+0x34>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d101      	bne.n	800891a <vTaskSwitchContext+0x2e>
 8008916:	b672      	cpsid	i
 8008918:	e7fe      	b.n	8008918 <vTaskSwitchContext+0x2c>
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	3b01      	subs	r3, #1
 800891e:	607b      	str	r3, [r7, #4]
 8008920:	4919      	ldr	r1, [pc, #100]	; (8008988 <vTaskSwitchContext+0x9c>)
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	0013      	movs	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	189b      	adds	r3, r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	585b      	ldr	r3, [r3, r1]
 800892e:	2b00      	cmp	r3, #0
 8008930:	d0ee      	beq.n	8008910 <vTaskSwitchContext+0x24>
 8008932:	687a      	ldr	r2, [r7, #4]
 8008934:	0013      	movs	r3, r2
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	189b      	adds	r3, r3, r2
 800893a:	009b      	lsls	r3, r3, #2
 800893c:	4a12      	ldr	r2, [pc, #72]	; (8008988 <vTaskSwitchContext+0x9c>)
 800893e:	189b      	adds	r3, r3, r2
 8008940:	603b      	str	r3, [r7, #0]
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	685b      	ldr	r3, [r3, #4]
 8008946:	685a      	ldr	r2, [r3, #4]
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	605a      	str	r2, [r3, #4]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	685a      	ldr	r2, [r3, #4]
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	3308      	adds	r3, #8
 8008954:	429a      	cmp	r2, r3
 8008956:	d104      	bne.n	8008962 <vTaskSwitchContext+0x76>
 8008958:	683b      	ldr	r3, [r7, #0]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	685a      	ldr	r2, [r3, #4]
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	605a      	str	r2, [r3, #4]
 8008962:	683b      	ldr	r3, [r7, #0]
 8008964:	685b      	ldr	r3, [r3, #4]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	4b08      	ldr	r3, [pc, #32]	; (800898c <vTaskSwitchContext+0xa0>)
 800896a:	601a      	str	r2, [r3, #0]
 800896c:	4b05      	ldr	r3, [pc, #20]	; (8008984 <vTaskSwitchContext+0x98>)
 800896e:	687a      	ldr	r2, [r7, #4]
 8008970:	601a      	str	r2, [r3, #0]
}
 8008972:	46c0      	nop			; (mov r8, r8)
 8008974:	46bd      	mov	sp, r7
 8008976:	b002      	add	sp, #8
 8008978:	bd80      	pop	{r7, pc}
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	200036ec 	.word	0x200036ec
 8008980:	200036d8 	.word	0x200036d8
 8008984:	200036cc 	.word	0x200036cc
 8008988:	200035c8 	.word	0x200035c8
 800898c:	200035c4 	.word	0x200035c4

08008990 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d101      	bne.n	80089a4 <vTaskPlaceOnEventList+0x14>
 80089a0:	b672      	cpsid	i
 80089a2:	e7fe      	b.n	80089a2 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80089a4:	4b08      	ldr	r3, [pc, #32]	; (80089c8 <vTaskPlaceOnEventList+0x38>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	3318      	adds	r3, #24
 80089aa:	001a      	movs	r2, r3
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	0011      	movs	r1, r2
 80089b0:	0018      	movs	r0, r3
 80089b2:	f7ff f9fd 	bl	8007db0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	2101      	movs	r1, #1
 80089ba:	0018      	movs	r0, r3
 80089bc:	f000 fa88 	bl	8008ed0 <prvAddCurrentTaskToDelayedList>
}
 80089c0:	46c0      	nop			; (mov r8, r8)
 80089c2:	46bd      	mov	sp, r7
 80089c4:	b002      	add	sp, #8
 80089c6:	bd80      	pop	{r7, pc}
 80089c8:	200035c4 	.word	0x200035c4

080089cc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b084      	sub	sp, #16
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	68db      	ldr	r3, [r3, #12]
 80089d8:	68db      	ldr	r3, [r3, #12]
 80089da:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d101      	bne.n	80089e6 <xTaskRemoveFromEventList+0x1a>
 80089e2:	b672      	cpsid	i
 80089e4:	e7fe      	b.n	80089e4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80089e6:	68bb      	ldr	r3, [r7, #8]
 80089e8:	3318      	adds	r3, #24
 80089ea:	0018      	movs	r0, r3
 80089ec:	f7ff fa16 	bl	8007e1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089f0:	4b1e      	ldr	r3, [pc, #120]	; (8008a6c <xTaskRemoveFromEventList+0xa0>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d11d      	bne.n	8008a34 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	3304      	adds	r3, #4
 80089fc:	0018      	movs	r0, r3
 80089fe:	f7ff fa0d 	bl	8007e1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008a02:	68bb      	ldr	r3, [r7, #8]
 8008a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a06:	4b1a      	ldr	r3, [pc, #104]	; (8008a70 <xTaskRemoveFromEventList+0xa4>)
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	429a      	cmp	r2, r3
 8008a0c:	d903      	bls.n	8008a16 <xTaskRemoveFromEventList+0x4a>
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a12:	4b17      	ldr	r3, [pc, #92]	; (8008a70 <xTaskRemoveFromEventList+0xa4>)
 8008a14:	601a      	str	r2, [r3, #0]
 8008a16:	68bb      	ldr	r3, [r7, #8]
 8008a18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a1a:	0013      	movs	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	189b      	adds	r3, r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4a14      	ldr	r2, [pc, #80]	; (8008a74 <xTaskRemoveFromEventList+0xa8>)
 8008a24:	189a      	adds	r2, r3, r2
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	3304      	adds	r3, #4
 8008a2a:	0019      	movs	r1, r3
 8008a2c:	0010      	movs	r0, r2
 8008a2e:	f7ff f99d 	bl	8007d6c <vListInsertEnd>
 8008a32:	e007      	b.n	8008a44 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	3318      	adds	r3, #24
 8008a38:	001a      	movs	r2, r3
 8008a3a:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <xTaskRemoveFromEventList+0xac>)
 8008a3c:	0011      	movs	r1, r2
 8008a3e:	0018      	movs	r0, r3
 8008a40:	f7ff f994 	bl	8007d6c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <xTaskRemoveFromEventList+0xb0>)
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d905      	bls.n	8008a5e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008a52:	2301      	movs	r3, #1
 8008a54:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008a56:	4b0a      	ldr	r3, [pc, #40]	; (8008a80 <xTaskRemoveFromEventList+0xb4>)
 8008a58:	2201      	movs	r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
 8008a5c:	e001      	b.n	8008a62 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8008a62:	68fb      	ldr	r3, [r7, #12]
}
 8008a64:	0018      	movs	r0, r3
 8008a66:	46bd      	mov	sp, r7
 8008a68:	b004      	add	sp, #16
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	200036ec 	.word	0x200036ec
 8008a70:	200036cc 	.word	0x200036cc
 8008a74:	200035c8 	.word	0x200035c8
 8008a78:	20003684 	.word	0x20003684
 8008a7c:	200035c4 	.word	0x200035c4
 8008a80:	200036d8 	.word	0x200036d8

08008a84 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <vTaskInternalSetTimeOutState+0x20>)
 8008a8e:	681a      	ldr	r2, [r3, #0]
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a94:	4b04      	ldr	r3, [pc, #16]	; (8008aa8 <vTaskInternalSetTimeOutState+0x24>)
 8008a96:	681a      	ldr	r2, [r3, #0]
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	605a      	str	r2, [r3, #4]
}
 8008a9c:	46c0      	nop			; (mov r8, r8)
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	b002      	add	sp, #8
 8008aa2:	bd80      	pop	{r7, pc}
 8008aa4:	200036dc 	.word	0x200036dc
 8008aa8:	200036c8 	.word	0x200036c8

08008aac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b086      	sub	sp, #24
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
 8008ab4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	d101      	bne.n	8008ac0 <xTaskCheckForTimeOut+0x14>
 8008abc:	b672      	cpsid	i
 8008abe:	e7fe      	b.n	8008abe <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d101      	bne.n	8008aca <xTaskCheckForTimeOut+0x1e>
 8008ac6:	b672      	cpsid	i
 8008ac8:	e7fe      	b.n	8008ac8 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008aca:	f000 faf1 	bl	80090b0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008ace:	4b1d      	ldr	r3, [pc, #116]	; (8008b44 <xTaskCheckForTimeOut+0x98>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	693a      	ldr	r2, [r7, #16]
 8008ada:	1ad3      	subs	r3, r2, r3
 8008adc:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	3301      	adds	r3, #1
 8008ae4:	d102      	bne.n	8008aec <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	617b      	str	r3, [r7, #20]
 8008aea:	e024      	b.n	8008b36 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681a      	ldr	r2, [r3, #0]
 8008af0:	4b15      	ldr	r3, [pc, #84]	; (8008b48 <xTaskCheckForTimeOut+0x9c>)
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	429a      	cmp	r2, r3
 8008af6:	d007      	beq.n	8008b08 <xTaskCheckForTimeOut+0x5c>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	685b      	ldr	r3, [r3, #4]
 8008afc:	693a      	ldr	r2, [r7, #16]
 8008afe:	429a      	cmp	r2, r3
 8008b00:	d302      	bcc.n	8008b08 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008b02:	2301      	movs	r3, #1
 8008b04:	617b      	str	r3, [r7, #20]
 8008b06:	e016      	b.n	8008b36 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	68fa      	ldr	r2, [r7, #12]
 8008b0e:	429a      	cmp	r2, r3
 8008b10:	d20c      	bcs.n	8008b2c <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	681a      	ldr	r2, [r3, #0]
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	1ad2      	subs	r2, r2, r3
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	0018      	movs	r0, r3
 8008b22:	f7ff ffaf 	bl	8008a84 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008b26:	2300      	movs	r3, #0
 8008b28:	617b      	str	r3, [r7, #20]
 8008b2a:	e004      	b.n	8008b36 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008b2c:	683b      	ldr	r3, [r7, #0]
 8008b2e:	2200      	movs	r2, #0
 8008b30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008b32:	2301      	movs	r3, #1
 8008b34:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008b36:	f000 facd 	bl	80090d4 <vPortExitCritical>

	return xReturn;
 8008b3a:	697b      	ldr	r3, [r7, #20]
}
 8008b3c:	0018      	movs	r0, r3
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	b006      	add	sp, #24
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	200036c8 	.word	0x200036c8
 8008b48:	200036dc 	.word	0x200036dc

08008b4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008b50:	4b02      	ldr	r3, [pc, #8]	; (8008b5c <vTaskMissedYield+0x10>)
 8008b52:	2201      	movs	r2, #1
 8008b54:	601a      	str	r2, [r3, #0]
}
 8008b56:	46c0      	nop			; (mov r8, r8)
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	200036d8 	.word	0x200036d8

08008b60 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b082      	sub	sp, #8
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008b68:	f000 f84e 	bl	8008c08 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b6c:	4b03      	ldr	r3, [pc, #12]	; (8008b7c <prvIdleTask+0x1c>)
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d9f9      	bls.n	8008b68 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b74:	f000 fa8c 	bl	8009090 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008b78:	e7f6      	b.n	8008b68 <prvIdleTask+0x8>
 8008b7a:	46c0      	nop			; (mov r8, r8)
 8008b7c:	200035c8 	.word	0x200035c8

08008b80 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b86:	2300      	movs	r3, #0
 8008b88:	607b      	str	r3, [r7, #4]
 8008b8a:	e00c      	b.n	8008ba6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b8c:	687a      	ldr	r2, [r7, #4]
 8008b8e:	0013      	movs	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	189b      	adds	r3, r3, r2
 8008b94:	009b      	lsls	r3, r3, #2
 8008b96:	4a14      	ldr	r2, [pc, #80]	; (8008be8 <prvInitialiseTaskLists+0x68>)
 8008b98:	189b      	adds	r3, r3, r2
 8008b9a:	0018      	movs	r0, r3
 8008b9c:	f7ff f8bd 	bl	8007d1a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3301      	adds	r3, #1
 8008ba4:	607b      	str	r3, [r7, #4]
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2b06      	cmp	r3, #6
 8008baa:	d9ef      	bls.n	8008b8c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008bac:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <prvInitialiseTaskLists+0x6c>)
 8008bae:	0018      	movs	r0, r3
 8008bb0:	f7ff f8b3 	bl	8007d1a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008bb4:	4b0e      	ldr	r3, [pc, #56]	; (8008bf0 <prvInitialiseTaskLists+0x70>)
 8008bb6:	0018      	movs	r0, r3
 8008bb8:	f7ff f8af 	bl	8007d1a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008bbc:	4b0d      	ldr	r3, [pc, #52]	; (8008bf4 <prvInitialiseTaskLists+0x74>)
 8008bbe:	0018      	movs	r0, r3
 8008bc0:	f7ff f8ab 	bl	8007d1a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008bc4:	4b0c      	ldr	r3, [pc, #48]	; (8008bf8 <prvInitialiseTaskLists+0x78>)
 8008bc6:	0018      	movs	r0, r3
 8008bc8:	f7ff f8a7 	bl	8007d1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008bcc:	4b0b      	ldr	r3, [pc, #44]	; (8008bfc <prvInitialiseTaskLists+0x7c>)
 8008bce:	0018      	movs	r0, r3
 8008bd0:	f7ff f8a3 	bl	8007d1a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008bd4:	4b0a      	ldr	r3, [pc, #40]	; (8008c00 <prvInitialiseTaskLists+0x80>)
 8008bd6:	4a05      	ldr	r2, [pc, #20]	; (8008bec <prvInitialiseTaskLists+0x6c>)
 8008bd8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008bda:	4b0a      	ldr	r3, [pc, #40]	; (8008c04 <prvInitialiseTaskLists+0x84>)
 8008bdc:	4a04      	ldr	r2, [pc, #16]	; (8008bf0 <prvInitialiseTaskLists+0x70>)
 8008bde:	601a      	str	r2, [r3, #0]
}
 8008be0:	46c0      	nop			; (mov r8, r8)
 8008be2:	46bd      	mov	sp, r7
 8008be4:	b002      	add	sp, #8
 8008be6:	bd80      	pop	{r7, pc}
 8008be8:	200035c8 	.word	0x200035c8
 8008bec:	20003654 	.word	0x20003654
 8008bf0:	20003668 	.word	0x20003668
 8008bf4:	20003684 	.word	0x20003684
 8008bf8:	20003698 	.word	0x20003698
 8008bfc:	200036b0 	.word	0x200036b0
 8008c00:	2000367c 	.word	0x2000367c
 8008c04:	20003680 	.word	0x20003680

08008c08 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c0e:	e01a      	b.n	8008c46 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008c10:	f000 fa4e 	bl	80090b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c14:	4b10      	ldr	r3, [pc, #64]	; (8008c58 <prvCheckTasksWaitingTermination+0x50>)
 8008c16:	68db      	ldr	r3, [r3, #12]
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	3304      	adds	r3, #4
 8008c20:	0018      	movs	r0, r3
 8008c22:	f7ff f8fb 	bl	8007e1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008c26:	4b0d      	ldr	r3, [pc, #52]	; (8008c5c <prvCheckTasksWaitingTermination+0x54>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	1e5a      	subs	r2, r3, #1
 8008c2c:	4b0b      	ldr	r3, [pc, #44]	; (8008c5c <prvCheckTasksWaitingTermination+0x54>)
 8008c2e:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008c30:	4b0b      	ldr	r3, [pc, #44]	; (8008c60 <prvCheckTasksWaitingTermination+0x58>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	1e5a      	subs	r2, r3, #1
 8008c36:	4b0a      	ldr	r3, [pc, #40]	; (8008c60 <prvCheckTasksWaitingTermination+0x58>)
 8008c38:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008c3a:	f000 fa4b 	bl	80090d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	0018      	movs	r0, r3
 8008c42:	f000 f80f 	bl	8008c64 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008c46:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <prvCheckTasksWaitingTermination+0x58>)
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d1e0      	bne.n	8008c10 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008c4e:	46c0      	nop			; (mov r8, r8)
 8008c50:	46c0      	nop			; (mov r8, r8)
 8008c52:	46bd      	mov	sp, r7
 8008c54:	b002      	add	sp, #8
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20003698 	.word	0x20003698
 8008c5c:	200036c4 	.word	0x200036c4
 8008c60:	200036ac 	.word	0x200036ac

08008c64 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c70:	0018      	movs	r0, r3
 8008c72:	f000 fb61 	bl	8009338 <vPortFree>
			vPortFree( pxTCB );
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	0018      	movs	r0, r3
 8008c7a:	f000 fb5d 	bl	8009338 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c7e:	46c0      	nop			; (mov r8, r8)
 8008c80:	46bd      	mov	sp, r7
 8008c82:	b002      	add	sp, #8
 8008c84:	bd80      	pop	{r7, pc}
	...

08008c88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c8e:	4b0b      	ldr	r3, [pc, #44]	; (8008cbc <prvResetNextTaskUnblockTime+0x34>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d104      	bne.n	8008ca2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c98:	4b09      	ldr	r3, [pc, #36]	; (8008cc0 <prvResetNextTaskUnblockTime+0x38>)
 8008c9a:	2201      	movs	r2, #1
 8008c9c:	4252      	negs	r2, r2
 8008c9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008ca0:	e008      	b.n	8008cb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ca2:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <prvResetNextTaskUnblockTime+0x34>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	68db      	ldr	r3, [r3, #12]
 8008ca8:	68db      	ldr	r3, [r3, #12]
 8008caa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685a      	ldr	r2, [r3, #4]
 8008cb0:	4b03      	ldr	r3, [pc, #12]	; (8008cc0 <prvResetNextTaskUnblockTime+0x38>)
 8008cb2:	601a      	str	r2, [r3, #0]
}
 8008cb4:	46c0      	nop			; (mov r8, r8)
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	b002      	add	sp, #8
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	2000367c 	.word	0x2000367c
 8008cc0:	200036e4 	.word	0x200036e4

08008cc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b082      	sub	sp, #8
 8008cc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008cca:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <xTaskGetSchedulerState+0x30>)
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d102      	bne.n	8008cd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008cd2:	2301      	movs	r3, #1
 8008cd4:	607b      	str	r3, [r7, #4]
 8008cd6:	e008      	b.n	8008cea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008cd8:	4b07      	ldr	r3, [pc, #28]	; (8008cf8 <xTaskGetSchedulerState+0x34>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d102      	bne.n	8008ce6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008ce0:	2302      	movs	r3, #2
 8008ce2:	607b      	str	r3, [r7, #4]
 8008ce4:	e001      	b.n	8008cea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008ce6:	2300      	movs	r3, #0
 8008ce8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008cea:	687b      	ldr	r3, [r7, #4]
	}
 8008cec:	0018      	movs	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b002      	add	sp, #8
 8008cf2:	bd80      	pop	{r7, pc}
 8008cf4:	200036d0 	.word	0x200036d0
 8008cf8:	200036ec 	.word	0x200036ec

08008cfc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b084      	sub	sp, #16
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008d08:	2300      	movs	r3, #0
 8008d0a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	d051      	beq.n	8008db6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d16:	4b2a      	ldr	r3, [pc, #168]	; (8008dc0 <xTaskPriorityInherit+0xc4>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d241      	bcs.n	8008da4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	db06      	blt.n	8008d36 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d28:	4b25      	ldr	r3, [pc, #148]	; (8008dc0 <xTaskPriorityInherit+0xc4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d2e:	2207      	movs	r2, #7
 8008d30:	1ad2      	subs	r2, r2, r3
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008d36:	68bb      	ldr	r3, [r7, #8]
 8008d38:	6959      	ldr	r1, [r3, #20]
 8008d3a:	68bb      	ldr	r3, [r7, #8]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3e:	0013      	movs	r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
 8008d42:	189b      	adds	r3, r3, r2
 8008d44:	009b      	lsls	r3, r3, #2
 8008d46:	4a1f      	ldr	r2, [pc, #124]	; (8008dc4 <xTaskPriorityInherit+0xc8>)
 8008d48:	189b      	adds	r3, r3, r2
 8008d4a:	4299      	cmp	r1, r3
 8008d4c:	d122      	bne.n	8008d94 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008d4e:	68bb      	ldr	r3, [r7, #8]
 8008d50:	3304      	adds	r3, #4
 8008d52:	0018      	movs	r0, r3
 8008d54:	f7ff f862 	bl	8007e1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d58:	4b19      	ldr	r3, [pc, #100]	; (8008dc0 <xTaskPriorityInherit+0xc4>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008d62:	68bb      	ldr	r3, [r7, #8]
 8008d64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d66:	4b18      	ldr	r3, [pc, #96]	; (8008dc8 <xTaskPriorityInherit+0xcc>)
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	429a      	cmp	r2, r3
 8008d6c:	d903      	bls.n	8008d76 <xTaskPriorityInherit+0x7a>
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d72:	4b15      	ldr	r3, [pc, #84]	; (8008dc8 <xTaskPriorityInherit+0xcc>)
 8008d74:	601a      	str	r2, [r3, #0]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d7a:	0013      	movs	r3, r2
 8008d7c:	009b      	lsls	r3, r3, #2
 8008d7e:	189b      	adds	r3, r3, r2
 8008d80:	009b      	lsls	r3, r3, #2
 8008d82:	4a10      	ldr	r2, [pc, #64]	; (8008dc4 <xTaskPriorityInherit+0xc8>)
 8008d84:	189a      	adds	r2, r3, r2
 8008d86:	68bb      	ldr	r3, [r7, #8]
 8008d88:	3304      	adds	r3, #4
 8008d8a:	0019      	movs	r1, r3
 8008d8c:	0010      	movs	r0, r2
 8008d8e:	f7fe ffed 	bl	8007d6c <vListInsertEnd>
 8008d92:	e004      	b.n	8008d9e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d94:	4b0a      	ldr	r3, [pc, #40]	; (8008dc0 <xTaskPriorityInherit+0xc4>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d9e:	2301      	movs	r3, #1
 8008da0:	60fb      	str	r3, [r7, #12]
 8008da2:	e008      	b.n	8008db6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <xTaskPriorityInherit+0xc4>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	429a      	cmp	r2, r3
 8008db0:	d201      	bcs.n	8008db6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008db2:	2301      	movs	r3, #1
 8008db4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008db6:	68fb      	ldr	r3, [r7, #12]
	}
 8008db8:	0018      	movs	r0, r3
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	b004      	add	sp, #16
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	200035c4 	.word	0x200035c4
 8008dc4:	200035c8 	.word	0x200035c8
 8008dc8:	200036cc 	.word	0x200036cc

08008dcc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b086      	sub	sp, #24
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
 8008dd4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008dda:	2301      	movs	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d058      	beq.n	8008e96 <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d101      	bne.n	8008df0 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8008dec:	b672      	cpsid	i
 8008dee:	e7fe      	b.n	8008dee <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008df4:	683a      	ldr	r2, [r7, #0]
 8008df6:	429a      	cmp	r2, r3
 8008df8:	d902      	bls.n	8008e00 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008dfa:	683b      	ldr	r3, [r7, #0]
 8008dfc:	617b      	str	r3, [r7, #20]
 8008dfe:	e002      	b.n	8008e06 <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e04:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	429a      	cmp	r2, r3
 8008e0e:	d042      	beq.n	8008e96 <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e14:	68fa      	ldr	r2, [r7, #12]
 8008e16:	429a      	cmp	r2, r3
 8008e18:	d13d      	bne.n	8008e96 <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008e1a:	4b21      	ldr	r3, [pc, #132]	; (8008ea0 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	693a      	ldr	r2, [r7, #16]
 8008e20:	429a      	cmp	r2, r3
 8008e22:	d101      	bne.n	8008e28 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8008e24:	b672      	cpsid	i
 8008e26:	e7fe      	b.n	8008e26 <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e2c:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	697a      	ldr	r2, [r7, #20]
 8008e32:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008e34:	693b      	ldr	r3, [r7, #16]
 8008e36:	699b      	ldr	r3, [r3, #24]
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	db04      	blt.n	8008e46 <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	2207      	movs	r2, #7
 8008e40:	1ad2      	subs	r2, r2, r3
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008e46:	693b      	ldr	r3, [r7, #16]
 8008e48:	6959      	ldr	r1, [r3, #20]
 8008e4a:	68ba      	ldr	r2, [r7, #8]
 8008e4c:	0013      	movs	r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	189b      	adds	r3, r3, r2
 8008e52:	009b      	lsls	r3, r3, #2
 8008e54:	4a13      	ldr	r2, [pc, #76]	; (8008ea4 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8008e56:	189b      	adds	r3, r3, r2
 8008e58:	4299      	cmp	r1, r3
 8008e5a:	d11c      	bne.n	8008e96 <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e5c:	693b      	ldr	r3, [r7, #16]
 8008e5e:	3304      	adds	r3, #4
 8008e60:	0018      	movs	r0, r3
 8008e62:	f7fe ffdb 	bl	8007e1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008e66:	693b      	ldr	r3, [r7, #16]
 8008e68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e6a:	4b0f      	ldr	r3, [pc, #60]	; (8008ea8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d903      	bls.n	8008e7a <vTaskPriorityDisinheritAfterTimeout+0xae>
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e76:	4b0c      	ldr	r3, [pc, #48]	; (8008ea8 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8008e78:	601a      	str	r2, [r3, #0]
 8008e7a:	693b      	ldr	r3, [r7, #16]
 8008e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e7e:	0013      	movs	r3, r2
 8008e80:	009b      	lsls	r3, r3, #2
 8008e82:	189b      	adds	r3, r3, r2
 8008e84:	009b      	lsls	r3, r3, #2
 8008e86:	4a07      	ldr	r2, [pc, #28]	; (8008ea4 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8008e88:	189a      	adds	r2, r3, r2
 8008e8a:	693b      	ldr	r3, [r7, #16]
 8008e8c:	3304      	adds	r3, #4
 8008e8e:	0019      	movs	r1, r3
 8008e90:	0010      	movs	r0, r2
 8008e92:	f7fe ff6b 	bl	8007d6c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e96:	46c0      	nop			; (mov r8, r8)
 8008e98:	46bd      	mov	sp, r7
 8008e9a:	b006      	add	sp, #24
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	46c0      	nop			; (mov r8, r8)
 8008ea0:	200035c4 	.word	0x200035c4
 8008ea4:	200035c8 	.word	0x200035c8
 8008ea8:	200036cc 	.word	0x200036cc

08008eac <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008eac:	b580      	push	{r7, lr}
 8008eae:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008eb0:	4b06      	ldr	r3, [pc, #24]	; (8008ecc <pvTaskIncrementMutexHeldCount+0x20>)
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d004      	beq.n	8008ec2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008eb8:	4b04      	ldr	r3, [pc, #16]	; (8008ecc <pvTaskIncrementMutexHeldCount+0x20>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008ebe:	3201      	adds	r2, #1
 8008ec0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008ec2:	4b02      	ldr	r3, [pc, #8]	; (8008ecc <pvTaskIncrementMutexHeldCount+0x20>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
	}
 8008ec6:	0018      	movs	r0, r3
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	200035c4 	.word	0x200035c4

08008ed0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b084      	sub	sp, #16
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
 8008ed8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008eda:	4b21      	ldr	r3, [pc, #132]	; (8008f60 <prvAddCurrentTaskToDelayedList+0x90>)
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ee0:	4b20      	ldr	r3, [pc, #128]	; (8008f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	0018      	movs	r0, r3
 8008ee8:	f7fe ff98 	bl	8007e1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	3301      	adds	r3, #1
 8008ef0:	d10b      	bne.n	8008f0a <prvAddCurrentTaskToDelayedList+0x3a>
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d008      	beq.n	8008f0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008ef8:	4b1a      	ldr	r3, [pc, #104]	; (8008f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	1d1a      	adds	r2, r3, #4
 8008efe:	4b1a      	ldr	r3, [pc, #104]	; (8008f68 <prvAddCurrentTaskToDelayedList+0x98>)
 8008f00:	0011      	movs	r1, r2
 8008f02:	0018      	movs	r0, r3
 8008f04:	f7fe ff32 	bl	8007d6c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008f08:	e026      	b.n	8008f58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	18d3      	adds	r3, r2, r3
 8008f10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008f12:	4b14      	ldr	r3, [pc, #80]	; (8008f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	68ba      	ldr	r2, [r7, #8]
 8008f18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	429a      	cmp	r2, r3
 8008f20:	d209      	bcs.n	8008f36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f22:	4b12      	ldr	r3, [pc, #72]	; (8008f6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8008f24:	681a      	ldr	r2, [r3, #0]
 8008f26:	4b0f      	ldr	r3, [pc, #60]	; (8008f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3304      	adds	r3, #4
 8008f2c:	0019      	movs	r1, r3
 8008f2e:	0010      	movs	r0, r2
 8008f30:	f7fe ff3e 	bl	8007db0 <vListInsert>
}
 8008f34:	e010      	b.n	8008f58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008f36:	4b0e      	ldr	r3, [pc, #56]	; (8008f70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	; (8008f64 <prvAddCurrentTaskToDelayedList+0x94>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	3304      	adds	r3, #4
 8008f40:	0019      	movs	r1, r3
 8008f42:	0010      	movs	r0, r2
 8008f44:	f7fe ff34 	bl	8007db0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008f48:	4b0a      	ldr	r3, [pc, #40]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f4a:	681b      	ldr	r3, [r3, #0]
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d202      	bcs.n	8008f58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008f52:	4b08      	ldr	r3, [pc, #32]	; (8008f74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008f54:	68ba      	ldr	r2, [r7, #8]
 8008f56:	601a      	str	r2, [r3, #0]
}
 8008f58:	46c0      	nop			; (mov r8, r8)
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	b004      	add	sp, #16
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	200036c8 	.word	0x200036c8
 8008f64:	200035c4 	.word	0x200035c4
 8008f68:	200036b0 	.word	0x200036b0
 8008f6c:	20003680 	.word	0x20003680
 8008f70:	2000367c 	.word	0x2000367c
 8008f74:	200036e4 	.word	0x200036e4

08008f78 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f78:	b580      	push	{r7, lr}
 8008f7a:	b084      	sub	sp, #16
 8008f7c:	af00      	add	r7, sp, #0
 8008f7e:	60f8      	str	r0, [r7, #12]
 8008f80:	60b9      	str	r1, [r7, #8]
 8008f82:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	3b04      	subs	r3, #4
 8008f88:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	2280      	movs	r2, #128	; 0x80
 8008f8e:	0452      	lsls	r2, r2, #17
 8008f90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3b04      	subs	r3, #4
 8008f96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	3b04      	subs	r3, #4
 8008fa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008fa4:	4a08      	ldr	r2, [pc, #32]	; (8008fc8 <pxPortInitialiseStack+0x50>)
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	3b14      	subs	r3, #20
 8008fae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	3b20      	subs	r3, #32
 8008fba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008fbc:	68fb      	ldr	r3, [r7, #12]
}
 8008fbe:	0018      	movs	r0, r3
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	b004      	add	sp, #16
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	08008fcd 	.word	0x08008fcd

08008fcc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008fd6:	4b08      	ldr	r3, [pc, #32]	; (8008ff8 <prvTaskExitError+0x2c>)
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	3301      	adds	r3, #1
 8008fdc:	d001      	beq.n	8008fe2 <prvTaskExitError+0x16>
 8008fde:	b672      	cpsid	i
 8008fe0:	e7fe      	b.n	8008fe0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8008fe2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008fe4:	46c0      	nop			; (mov r8, r8)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0fc      	beq.n	8008fe6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008fec:	46c0      	nop			; (mov r8, r8)
 8008fee:	46c0      	nop			; (mov r8, r8)
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	b002      	add	sp, #8
 8008ff4:	bd80      	pop	{r7, pc}
 8008ff6:	46c0      	nop			; (mov r8, r8)
 8008ff8:	2000000c 	.word	0x2000000c

08008ffc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009000:	46c0      	nop			; (mov r8, r8)
 8009002:	46bd      	mov	sp, r7
 8009004:	bd80      	pop	{r7, pc}
	...

08009010 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009010:	4a0b      	ldr	r2, [pc, #44]	; (8009040 <pxCurrentTCBConst2>)
 8009012:	6813      	ldr	r3, [r2, #0]
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	3020      	adds	r0, #32
 8009018:	f380 8809 	msr	PSP, r0
 800901c:	2002      	movs	r0, #2
 800901e:	f380 8814 	msr	CONTROL, r0
 8009022:	f3bf 8f6f 	isb	sy
 8009026:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009028:	46ae      	mov	lr, r5
 800902a:	bc08      	pop	{r3}
 800902c:	bc04      	pop	{r2}
 800902e:	b662      	cpsie	i
 8009030:	4718      	bx	r3
 8009032:	46c0      	nop			; (mov r8, r8)
 8009034:	46c0      	nop			; (mov r8, r8)
 8009036:	46c0      	nop			; (mov r8, r8)
 8009038:	46c0      	nop			; (mov r8, r8)
 800903a:	46c0      	nop			; (mov r8, r8)
 800903c:	46c0      	nop			; (mov r8, r8)
 800903e:	46c0      	nop			; (mov r8, r8)

08009040 <pxCurrentTCBConst2>:
 8009040:	200035c4 	.word	0x200035c4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009044:	46c0      	nop			; (mov r8, r8)
 8009046:	46c0      	nop			; (mov r8, r8)

08009048 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800904c:	4b0e      	ldr	r3, [pc, #56]	; (8009088 <xPortStartScheduler+0x40>)
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	4b0d      	ldr	r3, [pc, #52]	; (8009088 <xPortStartScheduler+0x40>)
 8009052:	21ff      	movs	r1, #255	; 0xff
 8009054:	0409      	lsls	r1, r1, #16
 8009056:	430a      	orrs	r2, r1
 8009058:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800905a:	4b0b      	ldr	r3, [pc, #44]	; (8009088 <xPortStartScheduler+0x40>)
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	4b0a      	ldr	r3, [pc, #40]	; (8009088 <xPortStartScheduler+0x40>)
 8009060:	21ff      	movs	r1, #255	; 0xff
 8009062:	0609      	lsls	r1, r1, #24
 8009064:	430a      	orrs	r2, r1
 8009066:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009068:	f000 f898 	bl	800919c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800906c:	4b07      	ldr	r3, [pc, #28]	; (800908c <xPortStartScheduler+0x44>)
 800906e:	2200      	movs	r2, #0
 8009070:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009072:	f7ff ffcd 	bl	8009010 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009076:	f7ff fc39 	bl	80088ec <vTaskSwitchContext>
	prvTaskExitError();
 800907a:	f7ff ffa7 	bl	8008fcc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800907e:	2300      	movs	r3, #0
}
 8009080:	0018      	movs	r0, r3
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}
 8009086:	46c0      	nop			; (mov r8, r8)
 8009088:	e000ed20 	.word	0xe000ed20
 800908c:	2000000c 	.word	0x2000000c

08009090 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009090:	b580      	push	{r7, lr}
 8009092:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <vPortYield+0x1c>)
 8009096:	2280      	movs	r2, #128	; 0x80
 8009098:	0552      	lsls	r2, r2, #21
 800909a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800909c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80090a0:	f3bf 8f6f 	isb	sy
}
 80090a4:	46c0      	nop			; (mov r8, r8)
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	e000ed04 	.word	0xe000ed04

080090b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80090b4:	b672      	cpsid	i
	uxCriticalNesting++;
 80090b6:	4b06      	ldr	r3, [pc, #24]	; (80090d0 <vPortEnterCritical+0x20>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	1c5a      	adds	r2, r3, #1
 80090bc:	4b04      	ldr	r3, [pc, #16]	; (80090d0 <vPortEnterCritical+0x20>)
 80090be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80090c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80090c4:	f3bf 8f6f 	isb	sy
}
 80090c8:	46c0      	nop			; (mov r8, r8)
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	46c0      	nop			; (mov r8, r8)
 80090d0:	2000000c 	.word	0x2000000c

080090d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80090d4:	b580      	push	{r7, lr}
 80090d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80090d8:	4b09      	ldr	r3, [pc, #36]	; (8009100 <vPortExitCritical+0x2c>)
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d101      	bne.n	80090e4 <vPortExitCritical+0x10>
 80090e0:	b672      	cpsid	i
 80090e2:	e7fe      	b.n	80090e2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80090e4:	4b06      	ldr	r3, [pc, #24]	; (8009100 <vPortExitCritical+0x2c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	1e5a      	subs	r2, r3, #1
 80090ea:	4b05      	ldr	r3, [pc, #20]	; (8009100 <vPortExitCritical+0x2c>)
 80090ec:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80090ee:	4b04      	ldr	r3, [pc, #16]	; (8009100 <vPortExitCritical+0x2c>)
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d100      	bne.n	80090f8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80090f6:	b662      	cpsie	i
	}
}
 80090f8:	46c0      	nop			; (mov r8, r8)
 80090fa:	46bd      	mov	sp, r7
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	46c0      	nop			; (mov r8, r8)
 8009100:	2000000c 	.word	0x2000000c

08009104 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009104:	f3ef 8010 	mrs	r0, PRIMASK
 8009108:	b672      	cpsid	i
 800910a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800910c:	46c0      	nop			; (mov r8, r8)
 800910e:	0018      	movs	r0, r3

08009110 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009110:	f380 8810 	msr	PRIMASK, r0
 8009114:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8009116:	46c0      	nop			; (mov r8, r8)
	...

08009120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009120:	f3ef 8009 	mrs	r0, PSP
 8009124:	4b0e      	ldr	r3, [pc, #56]	; (8009160 <pxCurrentTCBConst>)
 8009126:	681a      	ldr	r2, [r3, #0]
 8009128:	3820      	subs	r0, #32
 800912a:	6010      	str	r0, [r2, #0]
 800912c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800912e:	4644      	mov	r4, r8
 8009130:	464d      	mov	r5, r9
 8009132:	4656      	mov	r6, sl
 8009134:	465f      	mov	r7, fp
 8009136:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009138:	b508      	push	{r3, lr}
 800913a:	b672      	cpsid	i
 800913c:	f7ff fbd6 	bl	80088ec <vTaskSwitchContext>
 8009140:	b662      	cpsie	i
 8009142:	bc0c      	pop	{r2, r3}
 8009144:	6811      	ldr	r1, [r2, #0]
 8009146:	6808      	ldr	r0, [r1, #0]
 8009148:	3010      	adds	r0, #16
 800914a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800914c:	46a0      	mov	r8, r4
 800914e:	46a9      	mov	r9, r5
 8009150:	46b2      	mov	sl, r6
 8009152:	46bb      	mov	fp, r7
 8009154:	f380 8809 	msr	PSP, r0
 8009158:	3820      	subs	r0, #32
 800915a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800915c:	4718      	bx	r3
 800915e:	46c0      	nop			; (mov r8, r8)

08009160 <pxCurrentTCBConst>:
 8009160:	200035c4 	.word	0x200035c4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009164:	46c0      	nop			; (mov r8, r8)
 8009166:	46c0      	nop			; (mov r8, r8)

08009168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009168:	b580      	push	{r7, lr}
 800916a:	b082      	sub	sp, #8
 800916c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800916e:	f7ff ffc9 	bl	8009104 <ulSetInterruptMaskFromISR>
 8009172:	0003      	movs	r3, r0
 8009174:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009176:	f7ff fb09 	bl	800878c <xTaskIncrementTick>
 800917a:	1e03      	subs	r3, r0, #0
 800917c:	d003      	beq.n	8009186 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800917e:	4b06      	ldr	r3, [pc, #24]	; (8009198 <SysTick_Handler+0x30>)
 8009180:	2280      	movs	r2, #128	; 0x80
 8009182:	0552      	lsls	r2, r2, #21
 8009184:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	0018      	movs	r0, r3
 800918a:	f7ff ffc1 	bl	8009110 <vClearInterruptMaskFromISR>
}
 800918e:	46c0      	nop			; (mov r8, r8)
 8009190:	46bd      	mov	sp, r7
 8009192:	b002      	add	sp, #8
 8009194:	bd80      	pop	{r7, pc}
 8009196:	46c0      	nop			; (mov r8, r8)
 8009198:	e000ed04 	.word	0xe000ed04

0800919c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800919c:	b580      	push	{r7, lr}
 800919e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80091a0:	4b0b      	ldr	r3, [pc, #44]	; (80091d0 <vPortSetupTimerInterrupt+0x34>)
 80091a2:	2200      	movs	r2, #0
 80091a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80091a6:	4b0b      	ldr	r3, [pc, #44]	; (80091d4 <vPortSetupTimerInterrupt+0x38>)
 80091a8:	2200      	movs	r2, #0
 80091aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80091ac:	4b0a      	ldr	r3, [pc, #40]	; (80091d8 <vPortSetupTimerInterrupt+0x3c>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	22fa      	movs	r2, #250	; 0xfa
 80091b2:	0091      	lsls	r1, r2, #2
 80091b4:	0018      	movs	r0, r3
 80091b6:	f7f6 ffb1 	bl	800011c <__udivsi3>
 80091ba:	0003      	movs	r3, r0
 80091bc:	001a      	movs	r2, r3
 80091be:	4b07      	ldr	r3, [pc, #28]	; (80091dc <vPortSetupTimerInterrupt+0x40>)
 80091c0:	3a01      	subs	r2, #1
 80091c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80091c4:	4b02      	ldr	r3, [pc, #8]	; (80091d0 <vPortSetupTimerInterrupt+0x34>)
 80091c6:	2207      	movs	r2, #7
 80091c8:	601a      	str	r2, [r3, #0]
}
 80091ca:	46c0      	nop			; (mov r8, r8)
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}
 80091d0:	e000e010 	.word	0xe000e010
 80091d4:	e000e018 	.word	0xe000e018
 80091d8:	20000000 	.word	0x20000000
 80091dc:	e000e014 	.word	0xe000e014

080091e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80091e0:	b580      	push	{r7, lr}
 80091e2:	b086      	sub	sp, #24
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80091ec:	f7ff fa36 	bl	800865c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80091f0:	4b4b      	ldr	r3, [pc, #300]	; (8009320 <pvPortMalloc+0x140>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80091f8:	f000 f8ec 	bl	80093d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80091fc:	4b49      	ldr	r3, [pc, #292]	; (8009324 <pvPortMalloc+0x144>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	687a      	ldr	r2, [r7, #4]
 8009202:	4013      	ands	r3, r2
 8009204:	d000      	beq.n	8009208 <pvPortMalloc+0x28>
 8009206:	e07e      	b.n	8009306 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d012      	beq.n	8009234 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800920e:	2208      	movs	r2, #8
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	189b      	adds	r3, r3, r2
 8009214:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2207      	movs	r2, #7
 800921a:	4013      	ands	r3, r2
 800921c:	d00a      	beq.n	8009234 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2207      	movs	r2, #7
 8009222:	4393      	bics	r3, r2
 8009224:	3308      	adds	r3, #8
 8009226:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2207      	movs	r2, #7
 800922c:	4013      	ands	r3, r2
 800922e:	d001      	beq.n	8009234 <pvPortMalloc+0x54>
 8009230:	b672      	cpsid	i
 8009232:	e7fe      	b.n	8009232 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2b00      	cmp	r3, #0
 8009238:	d065      	beq.n	8009306 <pvPortMalloc+0x126>
 800923a:	4b3b      	ldr	r3, [pc, #236]	; (8009328 <pvPortMalloc+0x148>)
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	429a      	cmp	r2, r3
 8009242:	d860      	bhi.n	8009306 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009244:	4b39      	ldr	r3, [pc, #228]	; (800932c <pvPortMalloc+0x14c>)
 8009246:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009248:	4b38      	ldr	r3, [pc, #224]	; (800932c <pvPortMalloc+0x14c>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800924e:	e004      	b.n	800925a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009250:	697b      	ldr	r3, [r7, #20]
 8009252:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009254:	697b      	ldr	r3, [r7, #20]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	687a      	ldr	r2, [r7, #4]
 8009260:	429a      	cmp	r2, r3
 8009262:	d903      	bls.n	800926c <pvPortMalloc+0x8c>
 8009264:	697b      	ldr	r3, [r7, #20]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1f1      	bne.n	8009250 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800926c:	4b2c      	ldr	r3, [pc, #176]	; (8009320 <pvPortMalloc+0x140>)
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	697a      	ldr	r2, [r7, #20]
 8009272:	429a      	cmp	r2, r3
 8009274:	d047      	beq.n	8009306 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	2208      	movs	r2, #8
 800927c:	189b      	adds	r3, r3, r2
 800927e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009280:	697b      	ldr	r3, [r7, #20]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009288:	697b      	ldr	r3, [r7, #20]
 800928a:	685a      	ldr	r2, [r3, #4]
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	1ad2      	subs	r2, r2, r3
 8009290:	2308      	movs	r3, #8
 8009292:	005b      	lsls	r3, r3, #1
 8009294:	429a      	cmp	r2, r3
 8009296:	d916      	bls.n	80092c6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	18d3      	adds	r3, r2, r3
 800929e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	2207      	movs	r2, #7
 80092a4:	4013      	ands	r3, r2
 80092a6:	d001      	beq.n	80092ac <pvPortMalloc+0xcc>
 80092a8:	b672      	cpsid	i
 80092aa:	e7fe      	b.n	80092aa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092ac:	697b      	ldr	r3, [r7, #20]
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	1ad2      	subs	r2, r2, r3
 80092b4:	68bb      	ldr	r3, [r7, #8]
 80092b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80092b8:	697b      	ldr	r3, [r7, #20]
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	0018      	movs	r0, r3
 80092c2:	f000 f8e7 	bl	8009494 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092c6:	4b18      	ldr	r3, [pc, #96]	; (8009328 <pvPortMalloc+0x148>)
 80092c8:	681a      	ldr	r2, [r3, #0]
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	1ad2      	subs	r2, r2, r3
 80092d0:	4b15      	ldr	r3, [pc, #84]	; (8009328 <pvPortMalloc+0x148>)
 80092d2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092d4:	4b14      	ldr	r3, [pc, #80]	; (8009328 <pvPortMalloc+0x148>)
 80092d6:	681a      	ldr	r2, [r3, #0]
 80092d8:	4b15      	ldr	r3, [pc, #84]	; (8009330 <pvPortMalloc+0x150>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	429a      	cmp	r2, r3
 80092de:	d203      	bcs.n	80092e8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092e0:	4b11      	ldr	r3, [pc, #68]	; (8009328 <pvPortMalloc+0x148>)
 80092e2:	681a      	ldr	r2, [r3, #0]
 80092e4:	4b12      	ldr	r3, [pc, #72]	; (8009330 <pvPortMalloc+0x150>)
 80092e6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80092e8:	697b      	ldr	r3, [r7, #20]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	4b0d      	ldr	r3, [pc, #52]	; (8009324 <pvPortMalloc+0x144>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	431a      	orrs	r2, r3
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	2200      	movs	r2, #0
 80092fa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80092fc:	4b0d      	ldr	r3, [pc, #52]	; (8009334 <pvPortMalloc+0x154>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	1c5a      	adds	r2, r3, #1
 8009302:	4b0c      	ldr	r3, [pc, #48]	; (8009334 <pvPortMalloc+0x154>)
 8009304:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009306:	f7ff f9b5 	bl	8008674 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	2207      	movs	r2, #7
 800930e:	4013      	ands	r3, r2
 8009310:	d001      	beq.n	8009316 <pvPortMalloc+0x136>
 8009312:	b672      	cpsid	i
 8009314:	e7fe      	b.n	8009314 <pvPortMalloc+0x134>
	return pvReturn;
 8009316:	68fb      	ldr	r3, [r7, #12]
}
 8009318:	0018      	movs	r0, r3
 800931a:	46bd      	mov	sp, r7
 800931c:	b006      	add	sp, #24
 800931e:	bd80      	pop	{r7, pc}
 8009320:	20008518 	.word	0x20008518
 8009324:	2000852c 	.word	0x2000852c
 8009328:	2000851c 	.word	0x2000851c
 800932c:	20008510 	.word	0x20008510
 8009330:	20008520 	.word	0x20008520
 8009334:	20008524 	.word	0x20008524

08009338 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009338:	b580      	push	{r7, lr}
 800933a:	b084      	sub	sp, #16
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d03a      	beq.n	80093c0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800934a:	2308      	movs	r3, #8
 800934c:	425b      	negs	r3, r3
 800934e:	68fa      	ldr	r2, [r7, #12]
 8009350:	18d3      	adds	r3, r2, r3
 8009352:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	4b1a      	ldr	r3, [pc, #104]	; (80093c8 <vPortFree+0x90>)
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	4013      	ands	r3, r2
 8009362:	d101      	bne.n	8009368 <vPortFree+0x30>
 8009364:	b672      	cpsid	i
 8009366:	e7fe      	b.n	8009366 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	2b00      	cmp	r3, #0
 800936e:	d001      	beq.n	8009374 <vPortFree+0x3c>
 8009370:	b672      	cpsid	i
 8009372:	e7fe      	b.n	8009372 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	685a      	ldr	r2, [r3, #4]
 8009378:	4b13      	ldr	r3, [pc, #76]	; (80093c8 <vPortFree+0x90>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	4013      	ands	r3, r2
 800937e:	d01f      	beq.n	80093c0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	2b00      	cmp	r3, #0
 8009386:	d11b      	bne.n	80093c0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	4b0e      	ldr	r3, [pc, #56]	; (80093c8 <vPortFree+0x90>)
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	43db      	mvns	r3, r3
 8009392:	401a      	ands	r2, r3
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009398:	f7ff f960 	bl	800865c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	685a      	ldr	r2, [r3, #4]
 80093a0:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <vPortFree+0x94>)
 80093a2:	681b      	ldr	r3, [r3, #0]
 80093a4:	18d2      	adds	r2, r2, r3
 80093a6:	4b09      	ldr	r3, [pc, #36]	; (80093cc <vPortFree+0x94>)
 80093a8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	0018      	movs	r0, r3
 80093ae:	f000 f871 	bl	8009494 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80093b2:	4b07      	ldr	r3, [pc, #28]	; (80093d0 <vPortFree+0x98>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	4b05      	ldr	r3, [pc, #20]	; (80093d0 <vPortFree+0x98>)
 80093ba:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80093bc:	f7ff f95a 	bl	8008674 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80093c0:	46c0      	nop			; (mov r8, r8)
 80093c2:	46bd      	mov	sp, r7
 80093c4:	b004      	add	sp, #16
 80093c6:	bd80      	pop	{r7, pc}
 80093c8:	2000852c 	.word	0x2000852c
 80093cc:	2000851c 	.word	0x2000851c
 80093d0:	20008528 	.word	0x20008528

080093d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80093d4:	b580      	push	{r7, lr}
 80093d6:	b084      	sub	sp, #16
 80093d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80093da:	4b27      	ldr	r3, [pc, #156]	; (8009478 <prvHeapInit+0xa4>)
 80093dc:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80093de:	4b27      	ldr	r3, [pc, #156]	; (800947c <prvHeapInit+0xa8>)
 80093e0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2207      	movs	r2, #7
 80093e6:	4013      	ands	r3, r2
 80093e8:	d00c      	beq.n	8009404 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	3307      	adds	r3, #7
 80093ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2207      	movs	r2, #7
 80093f4:	4393      	bics	r3, r2
 80093f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80093f8:	68ba      	ldr	r2, [r7, #8]
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	1ad2      	subs	r2, r2, r3
 80093fe:	4b1f      	ldr	r3, [pc, #124]	; (800947c <prvHeapInit+0xa8>)
 8009400:	18d3      	adds	r3, r2, r3
 8009402:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009408:	4b1d      	ldr	r3, [pc, #116]	; (8009480 <prvHeapInit+0xac>)
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800940e:	4b1c      	ldr	r3, [pc, #112]	; (8009480 <prvHeapInit+0xac>)
 8009410:	2200      	movs	r2, #0
 8009412:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	18d3      	adds	r3, r2, r3
 800941a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800941c:	2208      	movs	r2, #8
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	1a9b      	subs	r3, r3, r2
 8009422:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	2207      	movs	r2, #7
 8009428:	4393      	bics	r3, r2
 800942a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800942c:	68fa      	ldr	r2, [r7, #12]
 800942e:	4b15      	ldr	r3, [pc, #84]	; (8009484 <prvHeapInit+0xb0>)
 8009430:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009432:	4b14      	ldr	r3, [pc, #80]	; (8009484 <prvHeapInit+0xb0>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	2200      	movs	r2, #0
 8009438:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800943a:	4b12      	ldr	r3, [pc, #72]	; (8009484 <prvHeapInit+0xb0>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009446:	683b      	ldr	r3, [r7, #0]
 8009448:	68fa      	ldr	r2, [r7, #12]
 800944a:	1ad2      	subs	r2, r2, r3
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <prvHeapInit+0xb0>)
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	685a      	ldr	r2, [r3, #4]
 800945c:	4b0a      	ldr	r3, [pc, #40]	; (8009488 <prvHeapInit+0xb4>)
 800945e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009460:	683b      	ldr	r3, [r7, #0]
 8009462:	685a      	ldr	r2, [r3, #4]
 8009464:	4b09      	ldr	r3, [pc, #36]	; (800948c <prvHeapInit+0xb8>)
 8009466:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009468:	4b09      	ldr	r3, [pc, #36]	; (8009490 <prvHeapInit+0xbc>)
 800946a:	2280      	movs	r2, #128	; 0x80
 800946c:	0612      	lsls	r2, r2, #24
 800946e:	601a      	str	r2, [r3, #0]
}
 8009470:	46c0      	nop			; (mov r8, r8)
 8009472:	46bd      	mov	sp, r7
 8009474:	b004      	add	sp, #16
 8009476:	bd80      	pop	{r7, pc}
 8009478:	00004e20 	.word	0x00004e20
 800947c:	200036f0 	.word	0x200036f0
 8009480:	20008510 	.word	0x20008510
 8009484:	20008518 	.word	0x20008518
 8009488:	20008520 	.word	0x20008520
 800948c:	2000851c 	.word	0x2000851c
 8009490:	2000852c 	.word	0x2000852c

08009494 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009494:	b580      	push	{r7, lr}
 8009496:	b084      	sub	sp, #16
 8009498:	af00      	add	r7, sp, #0
 800949a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800949c:	4b27      	ldr	r3, [pc, #156]	; (800953c <prvInsertBlockIntoFreeList+0xa8>)
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e002      	b.n	80094a8 <prvInsertBlockIntoFreeList+0x14>
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	60fb      	str	r3, [r7, #12]
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	687a      	ldr	r2, [r7, #4]
 80094ae:	429a      	cmp	r2, r3
 80094b0:	d8f7      	bhi.n	80094a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	685b      	ldr	r3, [r3, #4]
 80094ba:	68ba      	ldr	r2, [r7, #8]
 80094bc:	18d3      	adds	r3, r2, r3
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d108      	bne.n	80094d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	685a      	ldr	r2, [r3, #4]
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	685b      	ldr	r3, [r3, #4]
 80094cc:	18d2      	adds	r2, r2, r3
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	68ba      	ldr	r2, [r7, #8]
 80094e0:	18d2      	adds	r2, r2, r3
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d118      	bne.n	800951c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	4b14      	ldr	r3, [pc, #80]	; (8009540 <prvInsertBlockIntoFreeList+0xac>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	429a      	cmp	r2, r3
 80094f4:	d00d      	beq.n	8009512 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	685a      	ldr	r2, [r3, #4]
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	685b      	ldr	r3, [r3, #4]
 8009500:	18d2      	adds	r2, r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	681a      	ldr	r2, [r3, #0]
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	601a      	str	r2, [r3, #0]
 8009510:	e008      	b.n	8009524 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009512:	4b0b      	ldr	r3, [pc, #44]	; (8009540 <prvInsertBlockIntoFreeList+0xac>)
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	601a      	str	r2, [r3, #0]
 800951a:	e003      	b.n	8009524 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681a      	ldr	r2, [r3, #0]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	429a      	cmp	r2, r3
 800952a:	d002      	beq.n	8009532 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	687a      	ldr	r2, [r7, #4]
 8009530:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009532:	46c0      	nop			; (mov r8, r8)
 8009534:	46bd      	mov	sp, r7
 8009536:	b004      	add	sp, #16
 8009538:	bd80      	pop	{r7, pc}
 800953a:	46c0      	nop			; (mov r8, r8)
 800953c:	20008510 	.word	0x20008510
 8009540:	20008518 	.word	0x20008518

08009544 <LIDAR_start>:
#include "drv_LIDAR.h"
#include "stdio.h"

//Start scanning and export point cloud data
//Sustained response
int LIDAR_start(h_LIDAR_t * h_LIDAR){
 8009544:	b590      	push	{r4, r7, lr}
 8009546:	b085      	sub	sp, #20
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_START};
 800954c:	240c      	movs	r4, #12
 800954e:	193b      	adds	r3, r7, r4
 8009550:	4a0a      	ldr	r2, [pc, #40]	; (800957c <LIDAR_start+0x38>)
 8009552:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.dma_receive(h_LIDAR->data_buff,DATA_BUFF_SIZE);
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	695b      	ldr	r3, [r3, #20]
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	3271      	adds	r2, #113	; 0x71
 800955c:	21fa      	movs	r1, #250	; 0xfa
 800955e:	0109      	lsls	r1, r1, #4
 8009560:	0010      	movs	r0, r2
 8009562:	4798      	blx	r3
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	193a      	adds	r2, r7, r4
 800956a:	2102      	movs	r1, #2
 800956c:	0010      	movs	r0, r2
 800956e:	4798      	blx	r3
	return 0;
 8009570:	2300      	movs	r3, #0
}
 8009572:	0018      	movs	r0, r3
 8009574:	46bd      	mov	sp, r7
 8009576:	b005      	add	sp, #20
 8009578:	bd90      	pop	{r4, r7, pc}
 800957a:	46c0      	nop			; (mov r8, r8)
 800957c:	000060a5 	.word	0x000060a5

08009580 <LIDAR_stop>:

//Stop and stop scanning
//No answer
int LIDAR_stop(h_LIDAR_t * h_LIDAR){
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_STOP};
 8009588:	210c      	movs	r1, #12
 800958a:	187b      	adds	r3, r7, r1
 800958c:	4a06      	ldr	r2, [pc, #24]	; (80095a8 <LIDAR_stop+0x28>)
 800958e:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	187a      	adds	r2, r7, r1
 8009596:	2102      	movs	r1, #2
 8009598:	0010      	movs	r0, r2
 800959a:	4798      	blx	r3
	return 0;
 800959c:	2300      	movs	r3, #0
}
 800959e:	0018      	movs	r0, r3
 80095a0:	46bd      	mov	sp, r7
 80095a2:	b004      	add	sp, #16
 80095a4:	bd80      	pop	{r7, pc}
 80095a6:	46c0      	nop			; (mov r8, r8)
 80095a8:	000065a5 	.word	0x000065a5

080095ac <LIDAR_get_info>:

//Get device information
//Single response
int LIDAR_get_info(h_LIDAR_t * h_LIDAR){
 80095ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ae:	46de      	mov	lr, fp
 80095b0:	4657      	mov	r7, sl
 80095b2:	464e      	mov	r6, r9
 80095b4:	4645      	mov	r5, r8
 80095b6:	b5e0      	push	{r5, r6, r7, lr}
 80095b8:	b09b      	sub	sp, #108	; 0x6c
 80095ba:	af10      	add	r7, sp, #64	; 0x40
 80095bc:	61f8      	str	r0, [r7, #28]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_INFO}; //Buffer de commande
 80095be:	210c      	movs	r1, #12
 80095c0:	2018      	movs	r0, #24
 80095c2:	180b      	adds	r3, r1, r0
 80095c4:	19db      	adds	r3, r3, r7
 80095c6:	4a83      	ldr	r2, [pc, #524]	; (80097d4 <LIDAR_get_info+0x228>)
 80095c8:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 80095ca:	69fb      	ldr	r3, [r7, #28]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	180a      	adds	r2, r1, r0
 80095d0:	19d2      	adds	r2, r2, r7
 80095d2:	2102      	movs	r1, #2
 80095d4:	0010      	movs	r0, r2
 80095d6:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->info_buff,INFO_BUFF_SIZE);
 80095d8:	69fb      	ldr	r3, [r7, #28]
 80095da:	68db      	ldr	r3, [r3, #12]
 80095dc:	69fa      	ldr	r2, [r7, #28]
 80095de:	324c      	adds	r2, #76	; 0x4c
 80095e0:	211b      	movs	r1, #27
 80095e2:	0010      	movs	r0, r2
 80095e4:	4798      	blx	r3

	h_LIDAR->device_info.start_sign=(h_LIDAR->info_buff[0]<<8)|h_LIDAR->info_buff[1];
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	224c      	movs	r2, #76	; 0x4c
 80095ea:	5c9b      	ldrb	r3, [r3, r2]
 80095ec:	021b      	lsls	r3, r3, #8
 80095ee:	b21a      	sxth	r2, r3
 80095f0:	69fb      	ldr	r3, [r7, #28]
 80095f2:	214d      	movs	r1, #77	; 0x4d
 80095f4:	5c5b      	ldrb	r3, [r3, r1]
 80095f6:	b21b      	sxth	r3, r3
 80095f8:	4313      	orrs	r3, r2
 80095fa:	b21b      	sxth	r3, r3
 80095fc:	b29a      	uxth	r2, r3
 80095fe:	69fb      	ldr	r3, [r7, #28]
 8009600:	851a      	strh	r2, [r3, #40]	; 0x28
	h_LIDAR->device_info.lenght=(h_LIDAR->info_buff[2])|(h_LIDAR->info_buff[3]<<8)|(h_LIDAR->info_buff[4]<<16);
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	224e      	movs	r2, #78	; 0x4e
 8009606:	5c9b      	ldrb	r3, [r3, r2]
 8009608:	0019      	movs	r1, r3
 800960a:	69fb      	ldr	r3, [r7, #28]
 800960c:	224f      	movs	r2, #79	; 0x4f
 800960e:	5c9b      	ldrb	r3, [r3, r2]
 8009610:	021b      	lsls	r3, r3, #8
 8009612:	000a      	movs	r2, r1
 8009614:	431a      	orrs	r2, r3
 8009616:	69fb      	ldr	r3, [r7, #28]
 8009618:	2150      	movs	r1, #80	; 0x50
 800961a:	5c5b      	ldrb	r3, [r3, r1]
 800961c:	041b      	lsls	r3, r3, #16
 800961e:	4313      	orrs	r3, r2
 8009620:	001a      	movs	r2, r3
 8009622:	69fb      	ldr	r3, [r7, #28]
 8009624:	62da      	str	r2, [r3, #44]	; 0x2c
	h_LIDAR->device_info.mode=h_LIDAR->info_buff[5];
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	2251      	movs	r2, #81	; 0x51
 800962a:	5c99      	ldrb	r1, [r3, r2]
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	2230      	movs	r2, #48	; 0x30
 8009630:	5499      	strb	r1, [r3, r2]
	h_LIDAR->device_info.type_code=h_LIDAR->info_buff[6];
 8009632:	69fb      	ldr	r3, [r7, #28]
 8009634:	2252      	movs	r2, #82	; 0x52
 8009636:	5c99      	ldrb	r1, [r3, r2]
 8009638:	69fb      	ldr	r3, [r7, #28]
 800963a:	2231      	movs	r2, #49	; 0x31
 800963c:	5499      	strb	r1, [r3, r2]
	h_LIDAR->device_info.model=h_LIDAR->info_buff[7];
 800963e:	69fb      	ldr	r3, [r7, #28]
 8009640:	2253      	movs	r2, #83	; 0x53
 8009642:	5c99      	ldrb	r1, [r3, r2]
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	2232      	movs	r2, #50	; 0x32
 8009648:	5499      	strb	r1, [r3, r2]
	snprintf(h_LIDAR->device_info.firmware,6,"%d.%d",h_LIDAR->info_buff[8],h_LIDAR->info_buff[9]);
 800964a:	69fb      	ldr	r3, [r7, #28]
 800964c:	3333      	adds	r3, #51	; 0x33
 800964e:	0018      	movs	r0, r3
 8009650:	69fb      	ldr	r3, [r7, #28]
 8009652:	2254      	movs	r2, #84	; 0x54
 8009654:	5c9b      	ldrb	r3, [r3, r2]
 8009656:	0019      	movs	r1, r3
 8009658:	69fb      	ldr	r3, [r7, #28]
 800965a:	2255      	movs	r2, #85	; 0x55
 800965c:	5c9b      	ldrb	r3, [r3, r2]
 800965e:	4a5e      	ldr	r2, [pc, #376]	; (80097d8 <LIDAR_get_info+0x22c>)
 8009660:	9300      	str	r3, [sp, #0]
 8009662:	000b      	movs	r3, r1
 8009664:	2106      	movs	r1, #6
 8009666:	f000 fc8d 	bl	8009f84 <sniprintf>
	h_LIDAR->device_info.hardware=h_LIDAR->info_buff[10];
 800966a:	69fb      	ldr	r3, [r7, #28]
 800966c:	2256      	movs	r2, #86	; 0x56
 800966e:	5c99      	ldrb	r1, [r3, r2]
 8009670:	69fb      	ldr	r3, [r7, #28]
 8009672:	2239      	movs	r2, #57	; 0x39
 8009674:	5499      	strb	r1, [r3, r2]
	snprintf(h_LIDAR->device_info.serial,17,"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",h_LIDAR->info_buff[11],h_LIDAR->info_buff[12],h_LIDAR->info_buff[13],h_LIDAR->info_buff[14],h_LIDAR->info_buff[15],h_LIDAR->info_buff[16],h_LIDAR->info_buff[17],h_LIDAR->info_buff[18],h_LIDAR->info_buff[19],h_LIDAR->info_buff[20],h_LIDAR->info_buff[21],h_LIDAR->info_buff[22],h_LIDAR->info_buff[23],h_LIDAR->info_buff[24],h_LIDAR->info_buff[25],h_LIDAR->info_buff[26]);
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	333a      	adds	r3, #58	; 0x3a
 800967a:	001d      	movs	r5, r3
 800967c:	69fb      	ldr	r3, [r7, #28]
 800967e:	2257      	movs	r2, #87	; 0x57
 8009680:	5c9b      	ldrb	r3, [r3, r2]
 8009682:	61bb      	str	r3, [r7, #24]
 8009684:	69fb      	ldr	r3, [r7, #28]
 8009686:	2258      	movs	r2, #88	; 0x58
 8009688:	5c9b      	ldrb	r3, [r3, r2]
 800968a:	4698      	mov	r8, r3
 800968c:	69fb      	ldr	r3, [r7, #28]
 800968e:	2259      	movs	r2, #89	; 0x59
 8009690:	5c9b      	ldrb	r3, [r3, r2]
 8009692:	4699      	mov	r9, r3
 8009694:	69fb      	ldr	r3, [r7, #28]
 8009696:	225a      	movs	r2, #90	; 0x5a
 8009698:	5c9b      	ldrb	r3, [r3, r2]
 800969a:	469a      	mov	sl, r3
 800969c:	69fb      	ldr	r3, [r7, #28]
 800969e:	225b      	movs	r2, #91	; 0x5b
 80096a0:	5c9b      	ldrb	r3, [r3, r2]
 80096a2:	469b      	mov	fp, r3
 80096a4:	69fb      	ldr	r3, [r7, #28]
 80096a6:	225c      	movs	r2, #92	; 0x5c
 80096a8:	5c9b      	ldrb	r3, [r3, r2]
 80096aa:	617b      	str	r3, [r7, #20]
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	225d      	movs	r2, #93	; 0x5d
 80096b0:	5c9b      	ldrb	r3, [r3, r2]
 80096b2:	613b      	str	r3, [r7, #16]
 80096b4:	69fb      	ldr	r3, [r7, #28]
 80096b6:	225e      	movs	r2, #94	; 0x5e
 80096b8:	5c9b      	ldrb	r3, [r3, r2]
 80096ba:	60fb      	str	r3, [r7, #12]
 80096bc:	69fb      	ldr	r3, [r7, #28]
 80096be:	225f      	movs	r2, #95	; 0x5f
 80096c0:	5c9b      	ldrb	r3, [r3, r2]
 80096c2:	60bb      	str	r3, [r7, #8]
 80096c4:	69fb      	ldr	r3, [r7, #28]
 80096c6:	2260      	movs	r2, #96	; 0x60
 80096c8:	5c9b      	ldrb	r3, [r3, r2]
 80096ca:	607b      	str	r3, [r7, #4]
 80096cc:	69fb      	ldr	r3, [r7, #28]
 80096ce:	2261      	movs	r2, #97	; 0x61
 80096d0:	5c9b      	ldrb	r3, [r3, r2]
 80096d2:	469c      	mov	ip, r3
 80096d4:	69fa      	ldr	r2, [r7, #28]
 80096d6:	2362      	movs	r3, #98	; 0x62
 80096d8:	5cd3      	ldrb	r3, [r2, r3]
 80096da:	001e      	movs	r6, r3
 80096dc:	69fa      	ldr	r2, [r7, #28]
 80096de:	2363      	movs	r3, #99	; 0x63
 80096e0:	5cd3      	ldrb	r3, [r2, r3]
 80096e2:	001c      	movs	r4, r3
 80096e4:	69fa      	ldr	r2, [r7, #28]
 80096e6:	2364      	movs	r3, #100	; 0x64
 80096e8:	5cd3      	ldrb	r3, [r2, r3]
 80096ea:	0018      	movs	r0, r3
 80096ec:	69fa      	ldr	r2, [r7, #28]
 80096ee:	2365      	movs	r3, #101	; 0x65
 80096f0:	5cd3      	ldrb	r3, [r2, r3]
 80096f2:	0019      	movs	r1, r3
 80096f4:	69fa      	ldr	r2, [r7, #28]
 80096f6:	2366      	movs	r3, #102	; 0x66
 80096f8:	5cd3      	ldrb	r3, [r2, r3]
 80096fa:	4a38      	ldr	r2, [pc, #224]	; (80097dc <LIDAR_get_info+0x230>)
 80096fc:	930e      	str	r3, [sp, #56]	; 0x38
 80096fe:	910d      	str	r1, [sp, #52]	; 0x34
 8009700:	900c      	str	r0, [sp, #48]	; 0x30
 8009702:	940b      	str	r4, [sp, #44]	; 0x2c
 8009704:	960a      	str	r6, [sp, #40]	; 0x28
 8009706:	4661      	mov	r1, ip
 8009708:	9109      	str	r1, [sp, #36]	; 0x24
 800970a:	6879      	ldr	r1, [r7, #4]
 800970c:	9108      	str	r1, [sp, #32]
 800970e:	68b9      	ldr	r1, [r7, #8]
 8009710:	9107      	str	r1, [sp, #28]
 8009712:	68f9      	ldr	r1, [r7, #12]
 8009714:	9106      	str	r1, [sp, #24]
 8009716:	6939      	ldr	r1, [r7, #16]
 8009718:	9105      	str	r1, [sp, #20]
 800971a:	6979      	ldr	r1, [r7, #20]
 800971c:	9104      	str	r1, [sp, #16]
 800971e:	4659      	mov	r1, fp
 8009720:	9103      	str	r1, [sp, #12]
 8009722:	4651      	mov	r1, sl
 8009724:	9102      	str	r1, [sp, #8]
 8009726:	4649      	mov	r1, r9
 8009728:	9101      	str	r1, [sp, #4]
 800972a:	4641      	mov	r1, r8
 800972c:	9100      	str	r1, [sp, #0]
 800972e:	69bb      	ldr	r3, [r7, #24]
 8009730:	2111      	movs	r1, #17
 8009732:	0028      	movs	r0, r5
 8009734:	f000 fc26 	bl	8009f84 <sniprintf>

	printf("Start sign : %x\r\n",h_LIDAR->device_info.start_sign);
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800973c:	001a      	movs	r2, r3
 800973e:	4b28      	ldr	r3, [pc, #160]	; (80097e0 <LIDAR_get_info+0x234>)
 8009740:	0011      	movs	r1, r2
 8009742:	0018      	movs	r0, r3
 8009744:	f000 fbae 	bl	8009ea4 <iprintf>
	printf("Length : %ld\r\n",h_LIDAR->device_info.lenght);
 8009748:	69fb      	ldr	r3, [r7, #28]
 800974a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800974c:	4b25      	ldr	r3, [pc, #148]	; (80097e4 <LIDAR_get_info+0x238>)
 800974e:	0011      	movs	r1, r2
 8009750:	0018      	movs	r0, r3
 8009752:	f000 fba7 	bl	8009ea4 <iprintf>
	printf("Mode : %x\r\n",h_LIDAR->device_info.mode);
 8009756:	69fb      	ldr	r3, [r7, #28]
 8009758:	2230      	movs	r2, #48	; 0x30
 800975a:	5c9b      	ldrb	r3, [r3, r2]
 800975c:	001a      	movs	r2, r3
 800975e:	4b22      	ldr	r3, [pc, #136]	; (80097e8 <LIDAR_get_info+0x23c>)
 8009760:	0011      	movs	r1, r2
 8009762:	0018      	movs	r0, r3
 8009764:	f000 fb9e 	bl	8009ea4 <iprintf>
	printf("Type code : %x\r\n",h_LIDAR->device_info.type_code);
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	2231      	movs	r2, #49	; 0x31
 800976c:	5c9b      	ldrb	r3, [r3, r2]
 800976e:	001a      	movs	r2, r3
 8009770:	4b1e      	ldr	r3, [pc, #120]	; (80097ec <LIDAR_get_info+0x240>)
 8009772:	0011      	movs	r1, r2
 8009774:	0018      	movs	r0, r3
 8009776:	f000 fb95 	bl	8009ea4 <iprintf>
	printf("Model %x\r\n",h_LIDAR->device_info.model);
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	2232      	movs	r2, #50	; 0x32
 800977e:	5c9b      	ldrb	r3, [r3, r2]
 8009780:	001a      	movs	r2, r3
 8009782:	4b1b      	ldr	r3, [pc, #108]	; (80097f0 <LIDAR_get_info+0x244>)
 8009784:	0011      	movs	r1, r2
 8009786:	0018      	movs	r0, r3
 8009788:	f000 fb8c 	bl	8009ea4 <iprintf>
	printf("Firmware version : %s\r\n",h_LIDAR->device_info.firmware);
 800978c:	69fb      	ldr	r3, [r7, #28]
 800978e:	3333      	adds	r3, #51	; 0x33
 8009790:	001a      	movs	r2, r3
 8009792:	4b18      	ldr	r3, [pc, #96]	; (80097f4 <LIDAR_get_info+0x248>)
 8009794:	0011      	movs	r1, r2
 8009796:	0018      	movs	r0, r3
 8009798:	f000 fb84 	bl	8009ea4 <iprintf>
	printf("Hardware version : %d\r\n",h_LIDAR->device_info.hardware);
 800979c:	69fb      	ldr	r3, [r7, #28]
 800979e:	2239      	movs	r2, #57	; 0x39
 80097a0:	5c9b      	ldrb	r3, [r3, r2]
 80097a2:	001a      	movs	r2, r3
 80097a4:	4b14      	ldr	r3, [pc, #80]	; (80097f8 <LIDAR_get_info+0x24c>)
 80097a6:	0011      	movs	r1, r2
 80097a8:	0018      	movs	r0, r3
 80097aa:	f000 fb7b 	bl	8009ea4 <iprintf>
	printf("Serial number : %s\r\n",h_LIDAR->device_info.serial);
 80097ae:	69fb      	ldr	r3, [r7, #28]
 80097b0:	333a      	adds	r3, #58	; 0x3a
 80097b2:	001a      	movs	r2, r3
 80097b4:	4b11      	ldr	r3, [pc, #68]	; (80097fc <LIDAR_get_info+0x250>)
 80097b6:	0011      	movs	r1, r2
 80097b8:	0018      	movs	r0, r3
 80097ba:	f000 fb73 	bl	8009ea4 <iprintf>

	return 0;
 80097be:	2300      	movs	r3, #0
}
 80097c0:	0018      	movs	r0, r3
 80097c2:	46bd      	mov	sp, r7
 80097c4:	b00b      	add	sp, #44	; 0x2c
 80097c6:	bcf0      	pop	{r4, r5, r6, r7}
 80097c8:	46bb      	mov	fp, r7
 80097ca:	46b2      	mov	sl, r6
 80097cc:	46a9      	mov	r9, r5
 80097ce:	46a0      	mov	r8, r4
 80097d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d2:	46c0      	nop			; (mov r8, r8)
 80097d4:	ffff90a5 	.word	0xffff90a5
 80097d8:	0800b138 	.word	0x0800b138
 80097dc:	0800b140 	.word	0x0800b140
 80097e0:	0800b164 	.word	0x0800b164
 80097e4:	0800b178 	.word	0x0800b178
 80097e8:	0800b188 	.word	0x0800b188
 80097ec:	0800b194 	.word	0x0800b194
 80097f0:	0800b1a8 	.word	0x0800b1a8
 80097f4:	0800b1b4 	.word	0x0800b1b4
 80097f8:	0800b1cc 	.word	0x0800b1cc
 80097fc:	0800b1e4 	.word	0x0800b1e4

08009800 <LIDAR_get_health_stat>:

//Get device health status
//Single response
int LIDAR_get_health_stat(h_LIDAR_t * h_LIDAR){
 8009800:	b580      	push	{r7, lr}
 8009802:	b084      	sub	sp, #16
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_HEALTH}; //Buffer de commande
 8009808:	210c      	movs	r1, #12
 800980a:	187b      	adds	r3, r7, r1
 800980c:	4a42      	ldr	r2, [pc, #264]	; (8009918 <LIDAR_get_health_stat+0x118>)
 800980e:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,2);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	187a      	adds	r2, r7, r1
 8009816:	2102      	movs	r1, #2
 8009818:	0010      	movs	r0, r2
 800981a:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->health_buff,HEALTH_BUFF_SIZE);
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	687a      	ldr	r2, [r7, #4]
 8009822:	3267      	adds	r2, #103	; 0x67
 8009824:	210a      	movs	r1, #10
 8009826:	0010      	movs	r0, r2
 8009828:	4798      	blx	r3

	h_LIDAR->health_stat.start_sign=(h_LIDAR->health_buff[0]<<8)|h_LIDAR->health_buff[1];
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2267      	movs	r2, #103	; 0x67
 800982e:	5c9b      	ldrb	r3, [r3, r2]
 8009830:	021b      	lsls	r3, r3, #8
 8009832:	b21a      	sxth	r2, r3
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2168      	movs	r1, #104	; 0x68
 8009838:	5c5b      	ldrb	r3, [r3, r1]
 800983a:	b21b      	sxth	r3, r3
 800983c:	4313      	orrs	r3, r2
 800983e:	b21b      	sxth	r3, r3
 8009840:	b29a      	uxth	r2, r3
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	831a      	strh	r2, [r3, #24]
	h_LIDAR->health_stat.lenght=(h_LIDAR->health_buff[2])|(h_LIDAR->health_buff[3]<<8)|(h_LIDAR->health_buff[4]<<16);
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2269      	movs	r2, #105	; 0x69
 800984a:	5c9b      	ldrb	r3, [r3, r2]
 800984c:	0019      	movs	r1, r3
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	226a      	movs	r2, #106	; 0x6a
 8009852:	5c9b      	ldrb	r3, [r3, r2]
 8009854:	021b      	lsls	r3, r3, #8
 8009856:	000a      	movs	r2, r1
 8009858:	431a      	orrs	r2, r3
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	216b      	movs	r1, #107	; 0x6b
 800985e:	5c5b      	ldrb	r3, [r3, r1]
 8009860:	041b      	lsls	r3, r3, #16
 8009862:	4313      	orrs	r3, r2
 8009864:	001a      	movs	r2, r3
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	61da      	str	r2, [r3, #28]
	h_LIDAR->health_stat.mode=h_LIDAR->health_buff[5];
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	226c      	movs	r2, #108	; 0x6c
 800986e:	5c99      	ldrb	r1, [r3, r2]
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	2220      	movs	r2, #32
 8009874:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.type_code=h_LIDAR->health_buff[6];
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	226d      	movs	r2, #109	; 0x6d
 800987a:	5c99      	ldrb	r1, [r3, r2]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2221      	movs	r2, #33	; 0x21
 8009880:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.status_code=h_LIDAR->health_buff[7];
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	226e      	movs	r2, #110	; 0x6e
 8009886:	5c99      	ldrb	r1, [r3, r2]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2222      	movs	r2, #34	; 0x22
 800988c:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.error_code=h_LIDAR->health_buff[8]|(h_LIDAR->health_buff[9]<<8);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	226f      	movs	r2, #111	; 0x6f
 8009892:	5c9b      	ldrb	r3, [r3, r2]
 8009894:	b21a      	sxth	r2, r3
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2170      	movs	r1, #112	; 0x70
 800989a:	5c5b      	ldrb	r3, [r3, r1]
 800989c:	021b      	lsls	r3, r3, #8
 800989e:	b21b      	sxth	r3, r3
 80098a0:	4313      	orrs	r3, r2
 80098a2:	b21b      	sxth	r3, r3
 80098a4:	b29a      	uxth	r2, r3
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	849a      	strh	r2, [r3, #36]	; 0x24

	printf("Start sign : %x\r\n",h_LIDAR->health_stat.start_sign);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	8b1b      	ldrh	r3, [r3, #24]
 80098ae:	001a      	movs	r2, r3
 80098b0:	4b1a      	ldr	r3, [pc, #104]	; (800991c <LIDAR_get_health_stat+0x11c>)
 80098b2:	0011      	movs	r1, r2
 80098b4:	0018      	movs	r0, r3
 80098b6:	f000 faf5 	bl	8009ea4 <iprintf>
	printf("Length : %ld\r\n",h_LIDAR->health_stat.lenght);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	69da      	ldr	r2, [r3, #28]
 80098be:	4b18      	ldr	r3, [pc, #96]	; (8009920 <LIDAR_get_health_stat+0x120>)
 80098c0:	0011      	movs	r1, r2
 80098c2:	0018      	movs	r0, r3
 80098c4:	f000 faee 	bl	8009ea4 <iprintf>
	printf("Mode : %x\r\n",h_LIDAR->health_stat.mode);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2220      	movs	r2, #32
 80098cc:	5c9b      	ldrb	r3, [r3, r2]
 80098ce:	001a      	movs	r2, r3
 80098d0:	4b14      	ldr	r3, [pc, #80]	; (8009924 <LIDAR_get_health_stat+0x124>)
 80098d2:	0011      	movs	r1, r2
 80098d4:	0018      	movs	r0, r3
 80098d6:	f000 fae5 	bl	8009ea4 <iprintf>
	printf("Type code : %x\r\n",h_LIDAR->health_stat.type_code);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2221      	movs	r2, #33	; 0x21
 80098de:	5c9b      	ldrb	r3, [r3, r2]
 80098e0:	001a      	movs	r2, r3
 80098e2:	4b11      	ldr	r3, [pc, #68]	; (8009928 <LIDAR_get_health_stat+0x128>)
 80098e4:	0011      	movs	r1, r2
 80098e6:	0018      	movs	r0, r3
 80098e8:	f000 fadc 	bl	8009ea4 <iprintf>
	printf("Status code : %x\r\n",h_LIDAR->health_stat.status_code);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2222      	movs	r2, #34	; 0x22
 80098f0:	5c9b      	ldrb	r3, [r3, r2]
 80098f2:	001a      	movs	r2, r3
 80098f4:	4b0d      	ldr	r3, [pc, #52]	; (800992c <LIDAR_get_health_stat+0x12c>)
 80098f6:	0011      	movs	r1, r2
 80098f8:	0018      	movs	r0, r3
 80098fa:	f000 fad3 	bl	8009ea4 <iprintf>
	printf("Error code : %x\r\n",h_LIDAR->health_stat.error_code);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009902:	001a      	movs	r2, r3
 8009904:	4b0a      	ldr	r3, [pc, #40]	; (8009930 <LIDAR_get_health_stat+0x130>)
 8009906:	0011      	movs	r1, r2
 8009908:	0018      	movs	r0, r3
 800990a:	f000 facb 	bl	8009ea4 <iprintf>

	return 0;
 800990e:	2300      	movs	r3, #0
}
 8009910:	0018      	movs	r0, r3
 8009912:	46bd      	mov	sp, r7
 8009914:	b004      	add	sp, #16
 8009916:	bd80      	pop	{r7, pc}
 8009918:	ffff91a5 	.word	0xffff91a5
 800991c:	0800b164 	.word	0x0800b164
 8009920:	0800b178 	.word	0x0800b178
 8009924:	0800b188 	.word	0x0800b188
 8009928:	0800b194 	.word	0x0800b194
 800992c:	0800b1fc 	.word	0x0800b1fc
 8009930:	0800b210 	.word	0x0800b210

08009934 <LIDAR_process_frame>:
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_RESTART};
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
	return 0;
}

void LIDAR_process_frame(h_LIDAR_t * LIDAR){
 8009934:	b590      	push	{r4, r7, lr}
 8009936:	b08b      	sub	sp, #44	; 0x2c
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
	uint16_t Si;
	int Di;
	int Ai;
	int AngleFSA=(LIDAR->processing.FSA>>1); //64
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	4a43      	ldr	r2, [pc, #268]	; (8009a4c <LIDAR_process_frame+0x118>)
 8009940:	5a9b      	ldrh	r3, [r3, r2]
 8009942:	085b      	lsrs	r3, r3, #1
 8009944:	b29b      	uxth	r3, r3
 8009946:	623b      	str	r3, [r7, #32]
	int AngleLSA=(LIDAR->processing.LSA>>1);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4a41      	ldr	r2, [pc, #260]	; (8009a50 <LIDAR_process_frame+0x11c>)
 800994c:	5a9b      	ldrh	r3, [r3, r2]
 800994e:	085b      	lsrs	r3, r3, #1
 8009950:	b29b      	uxth	r3, r3
 8009952:	61fb      	str	r3, [r7, #28]
	int index;
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 8009954:	2300      	movs	r3, #0
 8009956:	627b      	str	r3, [r7, #36]	; 0x24
 8009958:	e06a      	b.n	8009a30 <LIDAR_process_frame+0xfc>
		Si=LIDAR->processing.frame_buff[2*i]|(LIDAR->processing.frame_buff[2*i+1]<<8);
 800995a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800995c:	005b      	lsls	r3, r3, #1
 800995e:	687a      	ldr	r2, [r7, #4]
 8009960:	493c      	ldr	r1, [pc, #240]	; (8009a54 <LIDAR_process_frame+0x120>)
 8009962:	18d3      	adds	r3, r2, r3
 8009964:	185b      	adds	r3, r3, r1
 8009966:	781b      	ldrb	r3, [r3, #0]
 8009968:	b21a      	sxth	r2, r3
 800996a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800996c:	005b      	lsls	r3, r3, #1
 800996e:	3301      	adds	r3, #1
 8009970:	6879      	ldr	r1, [r7, #4]
 8009972:	4838      	ldr	r0, [pc, #224]	; (8009a54 <LIDAR_process_frame+0x120>)
 8009974:	18cb      	adds	r3, r1, r3
 8009976:	181b      	adds	r3, r3, r0
 8009978:	781b      	ldrb	r3, [r3, #0]
 800997a:	021b      	lsls	r3, r3, #8
 800997c:	b21b      	sxth	r3, r3
 800997e:	4313      	orrs	r3, r2
 8009980:	b21a      	sxth	r2, r3
 8009982:	211a      	movs	r1, #26
 8009984:	187b      	adds	r3, r7, r1
 8009986:	801a      	strh	r2, [r3, #0]
		Di=Si/4; //Distance du point i
 8009988:	187b      	adds	r3, r7, r1
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	089b      	lsrs	r3, r3, #2
 800998e:	b29b      	uxth	r3, r3
 8009990:	617b      	str	r3, [r7, #20]
		Ai=AngleFSA/64+i*(AngleLSA-AngleFSA)/64/(LIDAR->processing.LSN-1);
 8009992:	6a3b      	ldr	r3, [r7, #32]
 8009994:	2b00      	cmp	r3, #0
 8009996:	da00      	bge.n	800999a <LIDAR_process_frame+0x66>
 8009998:	333f      	adds	r3, #63	; 0x3f
 800999a:	119b      	asrs	r3, r3, #6
 800999c:	001c      	movs	r4, r3
 800999e:	69fa      	ldr	r2, [r7, #28]
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	1ad3      	subs	r3, r2, r3
 80099a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099a6:	4353      	muls	r3, r2
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	da00      	bge.n	80099ae <LIDAR_process_frame+0x7a>
 80099ac:	333f      	adds	r3, #63	; 0x3f
 80099ae:	119b      	asrs	r3, r3, #6
 80099b0:	0018      	movs	r0, r3
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	4a28      	ldr	r2, [pc, #160]	; (8009a58 <LIDAR_process_frame+0x124>)
 80099b6:	5c9b      	ldrb	r3, [r3, r2]
 80099b8:	3b01      	subs	r3, #1
 80099ba:	0019      	movs	r1, r3
 80099bc:	f7f6 fc38 	bl	8000230 <__divsi3>
 80099c0:	0003      	movs	r3, r0
 80099c2:	18e3      	adds	r3, r4, r3
 80099c4:	613b      	str	r3, [r7, #16]
		index = round(Ai);
 80099c6:	6938      	ldr	r0, [r7, #16]
 80099c8:	f7f6 fe9e 	bl	8000708 <__aeabi_i2d>
 80099cc:	0002      	movs	r2, r0
 80099ce:	000b      	movs	r3, r1
 80099d0:	0010      	movs	r0, r2
 80099d2:	0019      	movs	r1, r3
 80099d4:	f7f6 fe62 	bl	800069c <__aeabi_d2iz>
 80099d8:	0003      	movs	r3, r0
 80099da:	60fb      	str	r3, [r7, #12]

		if(Di>1500){ //On affiche pas les points trop loin
 80099dc:	697b      	ldr	r3, [r7, #20]
 80099de:	4a1f      	ldr	r2, [pc, #124]	; (8009a5c <LIDAR_process_frame+0x128>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	dd0a      	ble.n	80099fa <LIDAR_process_frame+0xc6>
			LIDAR->processing.point_buff[index]=0;
 80099e4:	687a      	ldr	r2, [r7, #4]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	491d      	ldr	r1, [pc, #116]	; (8009a60 <LIDAR_process_frame+0x12c>)
 80099ea:	468c      	mov	ip, r1
 80099ec:	4463      	add	r3, ip
 80099ee:	009b      	lsls	r3, r3, #2
 80099f0:	18d3      	adds	r3, r2, r3
 80099f2:	3304      	adds	r3, #4
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]
 80099f8:	e017      	b.n	8009a2a <LIDAR_process_frame+0xf6>
		}
		else if(Di<40){
 80099fa:	697b      	ldr	r3, [r7, #20]
 80099fc:	2b27      	cmp	r3, #39	; 0x27
 80099fe:	dc0a      	bgt.n	8009a16 <LIDAR_process_frame+0xe2>
			LIDAR->processing.point_buff[index]=0;
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	4916      	ldr	r1, [pc, #88]	; (8009a60 <LIDAR_process_frame+0x12c>)
 8009a06:	468c      	mov	ip, r1
 8009a08:	4463      	add	r3, ip
 8009a0a:	009b      	lsls	r3, r3, #2
 8009a0c:	18d3      	adds	r3, r2, r3
 8009a0e:	3304      	adds	r3, #4
 8009a10:	2200      	movs	r2, #0
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	e009      	b.n	8009a2a <LIDAR_process_frame+0xf6>
		}
		else{
			LIDAR->processing.point_buff[index]=Di;
 8009a16:	687a      	ldr	r2, [r7, #4]
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	4911      	ldr	r1, [pc, #68]	; (8009a60 <LIDAR_process_frame+0x12c>)
 8009a1c:	468c      	mov	ip, r1
 8009a1e:	4463      	add	r3, ip
 8009a20:	009b      	lsls	r3, r3, #2
 8009a22:	18d3      	adds	r3, r2, r3
 8009a24:	3304      	adds	r3, #4
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	601a      	str	r2, [r3, #0]
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 8009a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a2c:	3301      	adds	r3, #1
 8009a2e:	627b      	str	r3, [r7, #36]	; 0x24
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	4a0c      	ldr	r2, [pc, #48]	; (8009a64 <LIDAR_process_frame+0x130>)
 8009a34:	5c9b      	ldrb	r3, [r3, r2]
 8009a36:	085b      	lsrs	r3, r3, #1
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	001a      	movs	r2, r3
 8009a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a3e:	4293      	cmp	r3, r2
 8009a40:	db8b      	blt.n	800995a <LIDAR_process_frame+0x26>
		}
	}
}
 8009a42:	46c0      	nop			; (mov r8, r8)
 8009a44:	46c0      	nop			; (mov r8, r8)
 8009a46:	46bd      	mov	sp, r7
 8009a48:	b00b      	add	sp, #44	; 0x2c
 8009a4a:	bd90      	pop	{r4, r7, pc}
 8009a4c:	00001018 	.word	0x00001018
 8009a50:	0000101a 	.word	0x0000101a
 8009a54:	00001fbf 	.word	0x00001fbf
 8009a58:	00001017 	.word	0x00001017
 8009a5c:	000005dc 	.word	0x000005dc
 8009a60:	00000806 	.word	0x00000806
 8009a64:	0000101e 	.word	0x0000101e

08009a68 <calculer_distance_moyenne>:

// Fonction pour calculer la distance moyenne
int calculer_distance_moyenne(int distances[], int debut, int fin) {
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b086      	sub	sp, #24
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	60f8      	str	r0, [r7, #12]
 8009a70:	60b9      	str	r1, [r7, #8]
 8009a72:	607a      	str	r2, [r7, #4]
	int somme = 0;
 8009a74:	2300      	movs	r3, #0
 8009a76:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	613b      	str	r3, [r7, #16]
 8009a7c:	e00a      	b.n	8009a94 <calculer_distance_moyenne+0x2c>
		somme += distances[i];
 8009a7e:	693b      	ldr	r3, [r7, #16]
 8009a80:	009b      	lsls	r3, r3, #2
 8009a82:	68fa      	ldr	r2, [r7, #12]
 8009a84:	18d3      	adds	r3, r2, r3
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	697a      	ldr	r2, [r7, #20]
 8009a8a:	18d3      	adds	r3, r2, r3
 8009a8c:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	3301      	adds	r3, #1
 8009a92:	613b      	str	r3, [r7, #16]
 8009a94:	693a      	ldr	r2, [r7, #16]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	429a      	cmp	r2, r3
 8009a9a:	ddf0      	ble.n	8009a7e <calculer_distance_moyenne+0x16>
	}
	return somme / (fin - debut + 1);
 8009a9c:	687a      	ldr	r2, [r7, #4]
 8009a9e:	68bb      	ldr	r3, [r7, #8]
 8009aa0:	1ad3      	subs	r3, r2, r3
 8009aa2:	3301      	adds	r3, #1
 8009aa4:	0019      	movs	r1, r3
 8009aa6:	6978      	ldr	r0, [r7, #20]
 8009aa8:	f7f6 fbc2 	bl	8000230 <__divsi3>
 8009aac:	0003      	movs	r3, r0
}
 8009aae:	0018      	movs	r0, r3
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	b006      	add	sp, #24
 8009ab4:	bd80      	pop	{r7, pc}
	...

08009ab8 <find_clusters>:

//Fonction pour regrouper les points proches en clusters
void find_clusters(h_LIDAR_t * LIDAR) {
 8009ab8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009aba:	b08b      	sub	sp, #44	; 0x2c
 8009abc:	af00      	add	r7, sp, #0
 8009abe:	6078      	str	r0, [r7, #4]

	int * distances=LIDAR->processing.filtred_buff;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	4a56      	ldr	r2, [pc, #344]	; (8009c1c <find_clusters+0x164>)
 8009ac4:	4694      	mov	ip, r2
 8009ac6:	4463      	add	r3, ip
 8009ac8:	61bb      	str	r3, [r7, #24]
	int cluster_count = 0;
 8009aca:	2300      	movs	r3, #0
 8009acc:	627b      	str	r3, [r7, #36]	; 0x24

	// Parcourir les 360 degrés pour regrouper les valeurs en clusters
	int debut_cluster = 0;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	623b      	str	r3, [r7, #32]
	for (int i = 1; i < NB_DEGRES; i++) {
 8009ad2:	2301      	movs	r3, #1
 8009ad4:	61fb      	str	r3, [r7, #28]
 8009ad6:	e05b      	b.n	8009b90 <find_clusters+0xd8>
		if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 8009ad8:	69fb      	ldr	r3, [r7, #28]
 8009ada:	009b      	lsls	r3, r3, #2
 8009adc:	69ba      	ldr	r2, [r7, #24]
 8009ade:	18d3      	adds	r3, r2, r3
 8009ae0:	681a      	ldr	r2, [r3, #0]
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	494e      	ldr	r1, [pc, #312]	; (8009c20 <find_clusters+0x168>)
 8009ae6:	468c      	mov	ip, r1
 8009ae8:	4463      	add	r3, ip
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	69b9      	ldr	r1, [r7, #24]
 8009aee:	18cb      	adds	r3, r1, r3
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	0018      	movs	r0, r3
 8009af6:	f7f6 fe07 	bl	8000708 <__aeabi_i2d>
 8009afa:	0002      	movs	r2, r0
 8009afc:	000b      	movs	r3, r1
 8009afe:	0011      	movs	r1, r2
 8009b00:	000c      	movs	r4, r1
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	085d      	lsrs	r5, r3, #1
 8009b06:	2200      	movs	r2, #0
 8009b08:	4b46      	ldr	r3, [pc, #280]	; (8009c24 <find_clusters+0x16c>)
 8009b0a:	0020      	movs	r0, r4
 8009b0c:	0029      	movs	r1, r5
 8009b0e:	f7f6 fca5 	bl	800045c <__aeabi_dcmpgt>
 8009b12:	1e03      	subs	r3, r0, #0
 8009b14:	d039      	beq.n	8009b8a <find_clusters+0xd2>
			// Calcul de la distance moyenne pour le cluster
			int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, i - 1);
 8009b16:	69fb      	ldr	r3, [r7, #28]
 8009b18:	1e5a      	subs	r2, r3, #1
 8009b1a:	6a39      	ldr	r1, [r7, #32]
 8009b1c:	69bb      	ldr	r3, [r7, #24]
 8009b1e:	0018      	movs	r0, r3
 8009b20:	f7ff ffa2 	bl	8009a68 <calculer_distance_moyenne>
 8009b24:	0003      	movs	r3, r0
 8009b26:	60fb      	str	r3, [r7, #12]

			// Calcul de l'angle moyen pour le cluster
			int angle_moyen = (debut_cluster + i - 1) / 2;
 8009b28:	6a3a      	ldr	r2, [r7, #32]
 8009b2a:	69fb      	ldr	r3, [r7, #28]
 8009b2c:	18d3      	adds	r3, r2, r3
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	da00      	bge.n	8009b36 <find_clusters+0x7e>
 8009b34:	3301      	adds	r3, #1
 8009b36:	105b      	asrs	r3, r3, #1
 8009b38:	60bb      	str	r3, [r7, #8]

			// Stockage des valeurs du cluster dans la structure
			LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 8009b3a:	6879      	ldr	r1, [r7, #4]
 8009b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b3e:	483a      	ldr	r0, [pc, #232]	; (8009c28 <find_clusters+0x170>)
 8009b40:	0013      	movs	r3, r2
 8009b42:	005b      	lsls	r3, r3, #1
 8009b44:	189b      	adds	r3, r3, r2
 8009b46:	009b      	lsls	r3, r3, #2
 8009b48:	18cb      	adds	r3, r1, r3
 8009b4a:	181b      	adds	r3, r3, r0
 8009b4c:	68ba      	ldr	r2, [r7, #8]
 8009b4e:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 8009b50:	6879      	ldr	r1, [r7, #4]
 8009b52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b54:	4835      	ldr	r0, [pc, #212]	; (8009c2c <find_clusters+0x174>)
 8009b56:	0013      	movs	r3, r2
 8009b58:	005b      	lsls	r3, r3, #1
 8009b5a:	189b      	adds	r3, r3, r2
 8009b5c:	009b      	lsls	r3, r3, #2
 8009b5e:	18cb      	adds	r3, r1, r3
 8009b60:	181b      	adds	r3, r3, r0
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 8009b66:	69fa      	ldr	r2, [r7, #28]
 8009b68:	6a3b      	ldr	r3, [r7, #32]
 8009b6a:	1ad1      	subs	r1, r2, r3
 8009b6c:	6878      	ldr	r0, [r7, #4]
 8009b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b70:	4e2f      	ldr	r6, [pc, #188]	; (8009c30 <find_clusters+0x178>)
 8009b72:	0013      	movs	r3, r2
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	189b      	adds	r3, r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	18c3      	adds	r3, r0, r3
 8009b7c:	199b      	adds	r3, r3, r6
 8009b7e:	6019      	str	r1, [r3, #0]

			debut_cluster = i;
 8009b80:	69fb      	ldr	r3, [r7, #28]
 8009b82:	623b      	str	r3, [r7, #32]
			cluster_count++;
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	3301      	adds	r3, #1
 8009b88:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 1; i < NB_DEGRES; i++) {
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	3301      	adds	r3, #1
 8009b8e:	61fb      	str	r3, [r7, #28]
 8009b90:	69fa      	ldr	r2, [r7, #28]
 8009b92:	23b4      	movs	r3, #180	; 0xb4
 8009b94:	005b      	lsls	r3, r3, #1
 8009b96:	429a      	cmp	r2, r3
 8009b98:	db9e      	blt.n	8009ad8 <find_clusters+0x20>
		}
	}

	// Traitement du dernier cluster
	int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 8009b9a:	2368      	movs	r3, #104	; 0x68
 8009b9c:	33ff      	adds	r3, #255	; 0xff
 8009b9e:	001a      	movs	r2, r3
 8009ba0:	6a39      	ldr	r1, [r7, #32]
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	0018      	movs	r0, r3
 8009ba6:	f7ff ff5f 	bl	8009a68 <calculer_distance_moyenne>
 8009baa:	0003      	movs	r3, r0
 8009bac:	617b      	str	r3, [r7, #20]
	int angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 8009bae:	6a3b      	ldr	r3, [r7, #32]
 8009bb0:	3368      	adds	r3, #104	; 0x68
 8009bb2:	33ff      	adds	r3, #255	; 0xff
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	da00      	bge.n	8009bba <find_clusters+0x102>
 8009bb8:	3301      	adds	r3, #1
 8009bba:	105b      	asrs	r3, r3, #1
 8009bbc:	613b      	str	r3, [r7, #16]
	LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 8009bbe:	6879      	ldr	r1, [r7, #4]
 8009bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bc2:	4819      	ldr	r0, [pc, #100]	; (8009c28 <find_clusters+0x170>)
 8009bc4:	0013      	movs	r3, r2
 8009bc6:	005b      	lsls	r3, r3, #1
 8009bc8:	189b      	adds	r3, r3, r2
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	18cb      	adds	r3, r1, r3
 8009bce:	181b      	adds	r3, r3, r0
 8009bd0:	693a      	ldr	r2, [r7, #16]
 8009bd2:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 8009bd4:	6879      	ldr	r1, [r7, #4]
 8009bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bd8:	4814      	ldr	r0, [pc, #80]	; (8009c2c <find_clusters+0x174>)
 8009bda:	0013      	movs	r3, r2
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	189b      	adds	r3, r3, r2
 8009be0:	009b      	lsls	r3, r3, #2
 8009be2:	18cb      	adds	r3, r1, r3
 8009be4:	181b      	adds	r3, r3, r0
 8009be6:	697a      	ldr	r2, [r7, #20]
 8009be8:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 8009bea:	6a3b      	ldr	r3, [r7, #32]
 8009bec:	22b4      	movs	r2, #180	; 0xb4
 8009bee:	0052      	lsls	r2, r2, #1
 8009bf0:	1ad1      	subs	r1, r2, r3
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bf6:	4c0e      	ldr	r4, [pc, #56]	; (8009c30 <find_clusters+0x178>)
 8009bf8:	0013      	movs	r3, r2
 8009bfa:	005b      	lsls	r3, r3, #1
 8009bfc:	189b      	adds	r3, r3, r2
 8009bfe:	009b      	lsls	r3, r3, #2
 8009c00:	18c3      	adds	r3, r0, r3
 8009c02:	191b      	adds	r3, r3, r4
 8009c04:	6019      	str	r1, [r3, #0]
	cluster_count++;
 8009c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c08:	3301      	adds	r3, #1
 8009c0a:	627b      	str	r3, [r7, #36]	; 0x24
	LIDAR->processing.cluster_cnt=cluster_count;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	4909      	ldr	r1, [pc, #36]	; (8009c34 <find_clusters+0x17c>)
 8009c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c12:	505a      	str	r2, [r3, r1]
}
 8009c14:	46c0      	nop			; (mov r8, r8)
 8009c16:	46bd      	mov	sp, r7
 8009c18:	b00b      	add	sp, #44	; 0x2c
 8009c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009c1c:	000025bc 	.word	0x000025bc
 8009c20:	3fffffff 	.word	0x3fffffff
 8009c24:	4062c000 	.word	0x4062c000
 8009c28:	00002b5c 	.word	0x00002b5c
 8009c2c:	00002b60 	.word	0x00002b60
 8009c30:	00002b64 	.word	0x00002b64
 8009c34:	0000300c 	.word	0x0000300c

08009c38 <medianFilter>:

void medianFilter(h_LIDAR_t * LIDAR) {
 8009c38:	b580      	push	{r7, lr}
 8009c3a:	b090      	sub	sp, #64	; 0x40
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
	int * signal=LIDAR->processing.point_buff; //points non filtrés
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	4a3d      	ldr	r2, [pc, #244]	; (8009d38 <medianFilter+0x100>)
 8009c44:	4694      	mov	ip, r2
 8009c46:	4463      	add	r3, ip
 8009c48:	62fb      	str	r3, [r7, #44]	; 0x2c
	int signal_length=NB_DEGRES;
 8009c4a:	23b4      	movs	r3, #180	; 0xb4
 8009c4c:	005b      	lsls	r3, r3, #1
 8009c4e:	62bb      	str	r3, [r7, #40]	; 0x28
	int window[5];
	int i, j, k, middle;

	// La médiane se trouve au milieu de la fenêtre triée
	middle = 5 / 2;
 8009c50:	2302      	movs	r3, #2
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < signal_length; i++) {
 8009c54:	2300      	movs	r3, #0
 8009c56:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c58:	e065      	b.n	8009d26 <medianFilter+0xee>
		// Construire la fenêtre avec les données autour du point i
		for (j = 0; j < 5; j++) {
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c5e:	e01e      	b.n	8009c9e <medianFilter+0x66>
			int index = i - middle + j;
 8009c60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c64:	1ad3      	subs	r3, r2, r3
 8009c66:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c68:	18d3      	adds	r3, r2, r3
 8009c6a:	633b      	str	r3, [r7, #48]	; 0x30
			// Gérer les bords du signal
			if (index < 0) index = 0;
 8009c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	da01      	bge.n	8009c76 <medianFilter+0x3e>
 8009c72:	2300      	movs	r3, #0
 8009c74:	633b      	str	r3, [r7, #48]	; 0x30
			if (index >= signal_length) index = signal_length - 1;
 8009c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	db02      	blt.n	8009c84 <medianFilter+0x4c>
 8009c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c80:	3b01      	subs	r3, #1
 8009c82:	633b      	str	r3, [r7, #48]	; 0x30
			window[j] = signal[index];
 8009c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c86:	009b      	lsls	r3, r3, #2
 8009c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c8a:	18d3      	adds	r3, r2, r3
 8009c8c:	6819      	ldr	r1, [r3, #0]
 8009c8e:	230c      	movs	r3, #12
 8009c90:	18fb      	adds	r3, r7, r3
 8009c92:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c94:	0092      	lsls	r2, r2, #2
 8009c96:	50d1      	str	r1, [r2, r3]
		for (j = 0; j < 5; j++) {
 8009c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ca0:	2b04      	cmp	r3, #4
 8009ca2:	dddd      	ble.n	8009c60 <medianFilter+0x28>
		}

		// Trier la fenêtre pour trouver la valeur médiane
		for (j = 0; j < 5; j++) {
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	63bb      	str	r3, [r7, #56]	; 0x38
 8009ca8:	e029      	b.n	8009cfe <medianFilter+0xc6>
			for (k = j + 1; k < 5; k++) {
 8009caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cac:	3301      	adds	r3, #1
 8009cae:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb0:	e01f      	b.n	8009cf2 <medianFilter+0xba>
				if (window[j] > window[k]) {
 8009cb2:	200c      	movs	r0, #12
 8009cb4:	183b      	adds	r3, r7, r0
 8009cb6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cb8:	0092      	lsls	r2, r2, #2
 8009cba:	58d2      	ldr	r2, [r2, r3]
 8009cbc:	183b      	adds	r3, r7, r0
 8009cbe:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009cc0:	0089      	lsls	r1, r1, #2
 8009cc2:	58cb      	ldr	r3, [r1, r3]
 8009cc4:	429a      	cmp	r2, r3
 8009cc6:	dd11      	ble.n	8009cec <medianFilter+0xb4>
					// Échange simple pour le tri
					int temp = window[j];
 8009cc8:	183b      	adds	r3, r7, r0
 8009cca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009ccc:	0092      	lsls	r2, r2, #2
 8009cce:	58d3      	ldr	r3, [r2, r3]
 8009cd0:	623b      	str	r3, [r7, #32]
					window[j] = window[k];
 8009cd2:	183b      	adds	r3, r7, r0
 8009cd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009cd6:	0092      	lsls	r2, r2, #2
 8009cd8:	58d1      	ldr	r1, [r2, r3]
 8009cda:	183b      	adds	r3, r7, r0
 8009cdc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009cde:	0092      	lsls	r2, r2, #2
 8009ce0:	50d1      	str	r1, [r2, r3]
					window[k] = temp;
 8009ce2:	183b      	adds	r3, r7, r0
 8009ce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ce6:	0092      	lsls	r2, r2, #2
 8009ce8:	6a39      	ldr	r1, [r7, #32]
 8009cea:	50d1      	str	r1, [r2, r3]
			for (k = j + 1; k < 5; k++) {
 8009cec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cee:	3301      	adds	r3, #1
 8009cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8009cf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009cf4:	2b04      	cmp	r3, #4
 8009cf6:	dddc      	ble.n	8009cb2 <medianFilter+0x7a>
		for (j = 0; j < 5; j++) {
 8009cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cfa:	3301      	adds	r3, #1
 8009cfc:	63bb      	str	r3, [r7, #56]	; 0x38
 8009cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d00:	2b04      	cmp	r3, #4
 8009d02:	ddd2      	ble.n	8009caa <medianFilter+0x72>
				}
			}
		}

		// Stocker la médiane dans le signal filtré
		LIDAR->processing.filtred_buff[i] = window[middle];
 8009d04:	230c      	movs	r3, #12
 8009d06:	18fb      	adds	r3, r7, r3
 8009d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d0a:	0092      	lsls	r2, r2, #2
 8009d0c:	58d2      	ldr	r2, [r2, r3]
 8009d0e:	6879      	ldr	r1, [r7, #4]
 8009d10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d12:	480a      	ldr	r0, [pc, #40]	; (8009d3c <medianFilter+0x104>)
 8009d14:	4684      	mov	ip, r0
 8009d16:	4463      	add	r3, ip
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	18cb      	adds	r3, r1, r3
 8009d1c:	3304      	adds	r3, #4
 8009d1e:	601a      	str	r2, [r3, #0]
	for (i = 0; i < signal_length; i++) {
 8009d20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009d22:	3301      	adds	r3, #1
 8009d24:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009d26:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d2a:	429a      	cmp	r2, r3
 8009d2c:	db95      	blt.n	8009c5a <medianFilter+0x22>
	}
}
 8009d2e:	46c0      	nop			; (mov r8, r8)
 8009d30:	46c0      	nop			; (mov r8, r8)
 8009d32:	46bd      	mov	sp, r7
 8009d34:	b010      	add	sp, #64	; 0x40
 8009d36:	bd80      	pop	{r7, pc}
 8009d38:	0000201c 	.word	0x0000201c
 8009d3c:	0000096e 	.word	0x0000096e

08009d40 <std>:
 8009d40:	2300      	movs	r3, #0
 8009d42:	b510      	push	{r4, lr}
 8009d44:	0004      	movs	r4, r0
 8009d46:	6003      	str	r3, [r0, #0]
 8009d48:	6043      	str	r3, [r0, #4]
 8009d4a:	6083      	str	r3, [r0, #8]
 8009d4c:	8181      	strh	r1, [r0, #12]
 8009d4e:	6643      	str	r3, [r0, #100]	; 0x64
 8009d50:	0019      	movs	r1, r3
 8009d52:	81c2      	strh	r2, [r0, #14]
 8009d54:	6103      	str	r3, [r0, #16]
 8009d56:	6143      	str	r3, [r0, #20]
 8009d58:	6183      	str	r3, [r0, #24]
 8009d5a:	2208      	movs	r2, #8
 8009d5c:	305c      	adds	r0, #92	; 0x5c
 8009d5e:	f000 fa37 	bl	800a1d0 <memset>
 8009d62:	4b05      	ldr	r3, [pc, #20]	; (8009d78 <std+0x38>)
 8009d64:	6224      	str	r4, [r4, #32]
 8009d66:	6263      	str	r3, [r4, #36]	; 0x24
 8009d68:	4b04      	ldr	r3, [pc, #16]	; (8009d7c <std+0x3c>)
 8009d6a:	62a3      	str	r3, [r4, #40]	; 0x28
 8009d6c:	4b04      	ldr	r3, [pc, #16]	; (8009d80 <std+0x40>)
 8009d6e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d70:	4b04      	ldr	r3, [pc, #16]	; (8009d84 <std+0x44>)
 8009d72:	6323      	str	r3, [r4, #48]	; 0x30
 8009d74:	bd10      	pop	{r4, pc}
 8009d76:	46c0      	nop			; (mov r8, r8)
 8009d78:	08009fed 	.word	0x08009fed
 8009d7c:	0800a015 	.word	0x0800a015
 8009d80:	0800a04d 	.word	0x0800a04d
 8009d84:	0800a079 	.word	0x0800a079

08009d88 <stdio_exit_handler>:
 8009d88:	b510      	push	{r4, lr}
 8009d8a:	4a03      	ldr	r2, [pc, #12]	; (8009d98 <stdio_exit_handler+0x10>)
 8009d8c:	4903      	ldr	r1, [pc, #12]	; (8009d9c <stdio_exit_handler+0x14>)
 8009d8e:	4804      	ldr	r0, [pc, #16]	; (8009da0 <stdio_exit_handler+0x18>)
 8009d90:	f000 f86c 	bl	8009e6c <_fwalk_sglue>
 8009d94:	bd10      	pop	{r4, pc}
 8009d96:	46c0      	nop			; (mov r8, r8)
 8009d98:	20000010 	.word	0x20000010
 8009d9c:	0800ae45 	.word	0x0800ae45
 8009da0:	2000001c 	.word	0x2000001c

08009da4 <cleanup_stdio>:
 8009da4:	6841      	ldr	r1, [r0, #4]
 8009da6:	4b0b      	ldr	r3, [pc, #44]	; (8009dd4 <cleanup_stdio+0x30>)
 8009da8:	b510      	push	{r4, lr}
 8009daa:	0004      	movs	r4, r0
 8009dac:	4299      	cmp	r1, r3
 8009dae:	d001      	beq.n	8009db4 <cleanup_stdio+0x10>
 8009db0:	f001 f848 	bl	800ae44 <_fflush_r>
 8009db4:	68a1      	ldr	r1, [r4, #8]
 8009db6:	4b08      	ldr	r3, [pc, #32]	; (8009dd8 <cleanup_stdio+0x34>)
 8009db8:	4299      	cmp	r1, r3
 8009dba:	d002      	beq.n	8009dc2 <cleanup_stdio+0x1e>
 8009dbc:	0020      	movs	r0, r4
 8009dbe:	f001 f841 	bl	800ae44 <_fflush_r>
 8009dc2:	68e1      	ldr	r1, [r4, #12]
 8009dc4:	4b05      	ldr	r3, [pc, #20]	; (8009ddc <cleanup_stdio+0x38>)
 8009dc6:	4299      	cmp	r1, r3
 8009dc8:	d002      	beq.n	8009dd0 <cleanup_stdio+0x2c>
 8009dca:	0020      	movs	r0, r4
 8009dcc:	f001 f83a 	bl	800ae44 <_fflush_r>
 8009dd0:	bd10      	pop	{r4, pc}
 8009dd2:	46c0      	nop			; (mov r8, r8)
 8009dd4:	20008530 	.word	0x20008530
 8009dd8:	20008598 	.word	0x20008598
 8009ddc:	20008600 	.word	0x20008600

08009de0 <global_stdio_init.part.0>:
 8009de0:	b510      	push	{r4, lr}
 8009de2:	4b09      	ldr	r3, [pc, #36]	; (8009e08 <global_stdio_init.part.0+0x28>)
 8009de4:	4a09      	ldr	r2, [pc, #36]	; (8009e0c <global_stdio_init.part.0+0x2c>)
 8009de6:	2104      	movs	r1, #4
 8009de8:	601a      	str	r2, [r3, #0]
 8009dea:	4809      	ldr	r0, [pc, #36]	; (8009e10 <global_stdio_init.part.0+0x30>)
 8009dec:	2200      	movs	r2, #0
 8009dee:	f7ff ffa7 	bl	8009d40 <std>
 8009df2:	2201      	movs	r2, #1
 8009df4:	2109      	movs	r1, #9
 8009df6:	4807      	ldr	r0, [pc, #28]	; (8009e14 <global_stdio_init.part.0+0x34>)
 8009df8:	f7ff ffa2 	bl	8009d40 <std>
 8009dfc:	2202      	movs	r2, #2
 8009dfe:	2112      	movs	r1, #18
 8009e00:	4805      	ldr	r0, [pc, #20]	; (8009e18 <global_stdio_init.part.0+0x38>)
 8009e02:	f7ff ff9d 	bl	8009d40 <std>
 8009e06:	bd10      	pop	{r4, pc}
 8009e08:	20008668 	.word	0x20008668
 8009e0c:	08009d89 	.word	0x08009d89
 8009e10:	20008530 	.word	0x20008530
 8009e14:	20008598 	.word	0x20008598
 8009e18:	20008600 	.word	0x20008600

08009e1c <__sfp_lock_acquire>:
 8009e1c:	b510      	push	{r4, lr}
 8009e1e:	4802      	ldr	r0, [pc, #8]	; (8009e28 <__sfp_lock_acquire+0xc>)
 8009e20:	f000 fa56 	bl	800a2d0 <__retarget_lock_acquire_recursive>
 8009e24:	bd10      	pop	{r4, pc}
 8009e26:	46c0      	nop			; (mov r8, r8)
 8009e28:	20008671 	.word	0x20008671

08009e2c <__sfp_lock_release>:
 8009e2c:	b510      	push	{r4, lr}
 8009e2e:	4802      	ldr	r0, [pc, #8]	; (8009e38 <__sfp_lock_release+0xc>)
 8009e30:	f000 fa4f 	bl	800a2d2 <__retarget_lock_release_recursive>
 8009e34:	bd10      	pop	{r4, pc}
 8009e36:	46c0      	nop			; (mov r8, r8)
 8009e38:	20008671 	.word	0x20008671

08009e3c <__sinit>:
 8009e3c:	b510      	push	{r4, lr}
 8009e3e:	0004      	movs	r4, r0
 8009e40:	f7ff ffec 	bl	8009e1c <__sfp_lock_acquire>
 8009e44:	6a23      	ldr	r3, [r4, #32]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d002      	beq.n	8009e50 <__sinit+0x14>
 8009e4a:	f7ff ffef 	bl	8009e2c <__sfp_lock_release>
 8009e4e:	bd10      	pop	{r4, pc}
 8009e50:	4b04      	ldr	r3, [pc, #16]	; (8009e64 <__sinit+0x28>)
 8009e52:	6223      	str	r3, [r4, #32]
 8009e54:	4b04      	ldr	r3, [pc, #16]	; (8009e68 <__sinit+0x2c>)
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d1f6      	bne.n	8009e4a <__sinit+0xe>
 8009e5c:	f7ff ffc0 	bl	8009de0 <global_stdio_init.part.0>
 8009e60:	e7f3      	b.n	8009e4a <__sinit+0xe>
 8009e62:	46c0      	nop			; (mov r8, r8)
 8009e64:	08009da5 	.word	0x08009da5
 8009e68:	20008668 	.word	0x20008668

08009e6c <_fwalk_sglue>:
 8009e6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009e6e:	0014      	movs	r4, r2
 8009e70:	2600      	movs	r6, #0
 8009e72:	9000      	str	r0, [sp, #0]
 8009e74:	9101      	str	r1, [sp, #4]
 8009e76:	68a5      	ldr	r5, [r4, #8]
 8009e78:	6867      	ldr	r7, [r4, #4]
 8009e7a:	3f01      	subs	r7, #1
 8009e7c:	d504      	bpl.n	8009e88 <_fwalk_sglue+0x1c>
 8009e7e:	6824      	ldr	r4, [r4, #0]
 8009e80:	2c00      	cmp	r4, #0
 8009e82:	d1f8      	bne.n	8009e76 <_fwalk_sglue+0xa>
 8009e84:	0030      	movs	r0, r6
 8009e86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e88:	89ab      	ldrh	r3, [r5, #12]
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d908      	bls.n	8009ea0 <_fwalk_sglue+0x34>
 8009e8e:	220e      	movs	r2, #14
 8009e90:	5eab      	ldrsh	r3, [r5, r2]
 8009e92:	3301      	adds	r3, #1
 8009e94:	d004      	beq.n	8009ea0 <_fwalk_sglue+0x34>
 8009e96:	0029      	movs	r1, r5
 8009e98:	9800      	ldr	r0, [sp, #0]
 8009e9a:	9b01      	ldr	r3, [sp, #4]
 8009e9c:	4798      	blx	r3
 8009e9e:	4306      	orrs	r6, r0
 8009ea0:	3568      	adds	r5, #104	; 0x68
 8009ea2:	e7ea      	b.n	8009e7a <_fwalk_sglue+0xe>

08009ea4 <iprintf>:
 8009ea4:	b40f      	push	{r0, r1, r2, r3}
 8009ea6:	b507      	push	{r0, r1, r2, lr}
 8009ea8:	4905      	ldr	r1, [pc, #20]	; (8009ec0 <iprintf+0x1c>)
 8009eaa:	ab04      	add	r3, sp, #16
 8009eac:	6808      	ldr	r0, [r1, #0]
 8009eae:	cb04      	ldmia	r3!, {r2}
 8009eb0:	6881      	ldr	r1, [r0, #8]
 8009eb2:	9301      	str	r3, [sp, #4]
 8009eb4:	f000 fca0 	bl	800a7f8 <_vfiprintf_r>
 8009eb8:	b003      	add	sp, #12
 8009eba:	bc08      	pop	{r3}
 8009ebc:	b004      	add	sp, #16
 8009ebe:	4718      	bx	r3
 8009ec0:	20000068 	.word	0x20000068

08009ec4 <_puts_r>:
 8009ec4:	6a03      	ldr	r3, [r0, #32]
 8009ec6:	b570      	push	{r4, r5, r6, lr}
 8009ec8:	0005      	movs	r5, r0
 8009eca:	000e      	movs	r6, r1
 8009ecc:	6884      	ldr	r4, [r0, #8]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d101      	bne.n	8009ed6 <_puts_r+0x12>
 8009ed2:	f7ff ffb3 	bl	8009e3c <__sinit>
 8009ed6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009ed8:	07db      	lsls	r3, r3, #31
 8009eda:	d405      	bmi.n	8009ee8 <_puts_r+0x24>
 8009edc:	89a3      	ldrh	r3, [r4, #12]
 8009ede:	059b      	lsls	r3, r3, #22
 8009ee0:	d402      	bmi.n	8009ee8 <_puts_r+0x24>
 8009ee2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ee4:	f000 f9f4 	bl	800a2d0 <__retarget_lock_acquire_recursive>
 8009ee8:	89a3      	ldrh	r3, [r4, #12]
 8009eea:	071b      	lsls	r3, r3, #28
 8009eec:	d502      	bpl.n	8009ef4 <_puts_r+0x30>
 8009eee:	6923      	ldr	r3, [r4, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d11f      	bne.n	8009f34 <_puts_r+0x70>
 8009ef4:	0021      	movs	r1, r4
 8009ef6:	0028      	movs	r0, r5
 8009ef8:	f000 f906 	bl	800a108 <__swsetup_r>
 8009efc:	2800      	cmp	r0, #0
 8009efe:	d019      	beq.n	8009f34 <_puts_r+0x70>
 8009f00:	2501      	movs	r5, #1
 8009f02:	426d      	negs	r5, r5
 8009f04:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009f06:	07db      	lsls	r3, r3, #31
 8009f08:	d405      	bmi.n	8009f16 <_puts_r+0x52>
 8009f0a:	89a3      	ldrh	r3, [r4, #12]
 8009f0c:	059b      	lsls	r3, r3, #22
 8009f0e:	d402      	bmi.n	8009f16 <_puts_r+0x52>
 8009f10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009f12:	f000 f9de 	bl	800a2d2 <__retarget_lock_release_recursive>
 8009f16:	0028      	movs	r0, r5
 8009f18:	bd70      	pop	{r4, r5, r6, pc}
 8009f1a:	3601      	adds	r6, #1
 8009f1c:	60a3      	str	r3, [r4, #8]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	da04      	bge.n	8009f2c <_puts_r+0x68>
 8009f22:	69a2      	ldr	r2, [r4, #24]
 8009f24:	429a      	cmp	r2, r3
 8009f26:	dc16      	bgt.n	8009f56 <_puts_r+0x92>
 8009f28:	290a      	cmp	r1, #10
 8009f2a:	d014      	beq.n	8009f56 <_puts_r+0x92>
 8009f2c:	6823      	ldr	r3, [r4, #0]
 8009f2e:	1c5a      	adds	r2, r3, #1
 8009f30:	6022      	str	r2, [r4, #0]
 8009f32:	7019      	strb	r1, [r3, #0]
 8009f34:	68a3      	ldr	r3, [r4, #8]
 8009f36:	7831      	ldrb	r1, [r6, #0]
 8009f38:	3b01      	subs	r3, #1
 8009f3a:	2900      	cmp	r1, #0
 8009f3c:	d1ed      	bne.n	8009f1a <_puts_r+0x56>
 8009f3e:	60a3      	str	r3, [r4, #8]
 8009f40:	2b00      	cmp	r3, #0
 8009f42:	da0f      	bge.n	8009f64 <_puts_r+0xa0>
 8009f44:	0028      	movs	r0, r5
 8009f46:	0022      	movs	r2, r4
 8009f48:	310a      	adds	r1, #10
 8009f4a:	f000 f89b 	bl	800a084 <__swbuf_r>
 8009f4e:	250a      	movs	r5, #10
 8009f50:	3001      	adds	r0, #1
 8009f52:	d1d7      	bne.n	8009f04 <_puts_r+0x40>
 8009f54:	e7d4      	b.n	8009f00 <_puts_r+0x3c>
 8009f56:	0022      	movs	r2, r4
 8009f58:	0028      	movs	r0, r5
 8009f5a:	f000 f893 	bl	800a084 <__swbuf_r>
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d1e8      	bne.n	8009f34 <_puts_r+0x70>
 8009f62:	e7cd      	b.n	8009f00 <_puts_r+0x3c>
 8009f64:	250a      	movs	r5, #10
 8009f66:	6823      	ldr	r3, [r4, #0]
 8009f68:	1c5a      	adds	r2, r3, #1
 8009f6a:	6022      	str	r2, [r4, #0]
 8009f6c:	701d      	strb	r5, [r3, #0]
 8009f6e:	e7c9      	b.n	8009f04 <_puts_r+0x40>

08009f70 <puts>:
 8009f70:	b510      	push	{r4, lr}
 8009f72:	4b03      	ldr	r3, [pc, #12]	; (8009f80 <puts+0x10>)
 8009f74:	0001      	movs	r1, r0
 8009f76:	6818      	ldr	r0, [r3, #0]
 8009f78:	f7ff ffa4 	bl	8009ec4 <_puts_r>
 8009f7c:	bd10      	pop	{r4, pc}
 8009f7e:	46c0      	nop			; (mov r8, r8)
 8009f80:	20000068 	.word	0x20000068

08009f84 <sniprintf>:
 8009f84:	b40c      	push	{r2, r3}
 8009f86:	b530      	push	{r4, r5, lr}
 8009f88:	4b17      	ldr	r3, [pc, #92]	; (8009fe8 <sniprintf+0x64>)
 8009f8a:	000c      	movs	r4, r1
 8009f8c:	681d      	ldr	r5, [r3, #0]
 8009f8e:	b09d      	sub	sp, #116	; 0x74
 8009f90:	2900      	cmp	r1, #0
 8009f92:	da08      	bge.n	8009fa6 <sniprintf+0x22>
 8009f94:	238b      	movs	r3, #139	; 0x8b
 8009f96:	2001      	movs	r0, #1
 8009f98:	602b      	str	r3, [r5, #0]
 8009f9a:	4240      	negs	r0, r0
 8009f9c:	b01d      	add	sp, #116	; 0x74
 8009f9e:	bc30      	pop	{r4, r5}
 8009fa0:	bc08      	pop	{r3}
 8009fa2:	b002      	add	sp, #8
 8009fa4:	4718      	bx	r3
 8009fa6:	2382      	movs	r3, #130	; 0x82
 8009fa8:	466a      	mov	r2, sp
 8009faa:	009b      	lsls	r3, r3, #2
 8009fac:	8293      	strh	r3, [r2, #20]
 8009fae:	2300      	movs	r3, #0
 8009fb0:	9002      	str	r0, [sp, #8]
 8009fb2:	9006      	str	r0, [sp, #24]
 8009fb4:	4299      	cmp	r1, r3
 8009fb6:	d000      	beq.n	8009fba <sniprintf+0x36>
 8009fb8:	1e4b      	subs	r3, r1, #1
 8009fba:	9304      	str	r3, [sp, #16]
 8009fbc:	9307      	str	r3, [sp, #28]
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	466a      	mov	r2, sp
 8009fc2:	425b      	negs	r3, r3
 8009fc4:	82d3      	strh	r3, [r2, #22]
 8009fc6:	0028      	movs	r0, r5
 8009fc8:	ab21      	add	r3, sp, #132	; 0x84
 8009fca:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009fcc:	a902      	add	r1, sp, #8
 8009fce:	9301      	str	r3, [sp, #4]
 8009fd0:	f000 faea 	bl	800a5a8 <_svfiprintf_r>
 8009fd4:	1c43      	adds	r3, r0, #1
 8009fd6:	da01      	bge.n	8009fdc <sniprintf+0x58>
 8009fd8:	238b      	movs	r3, #139	; 0x8b
 8009fda:	602b      	str	r3, [r5, #0]
 8009fdc:	2c00      	cmp	r4, #0
 8009fde:	d0dd      	beq.n	8009f9c <sniprintf+0x18>
 8009fe0:	2200      	movs	r2, #0
 8009fe2:	9b02      	ldr	r3, [sp, #8]
 8009fe4:	701a      	strb	r2, [r3, #0]
 8009fe6:	e7d9      	b.n	8009f9c <sniprintf+0x18>
 8009fe8:	20000068 	.word	0x20000068

08009fec <__sread>:
 8009fec:	b570      	push	{r4, r5, r6, lr}
 8009fee:	000c      	movs	r4, r1
 8009ff0:	250e      	movs	r5, #14
 8009ff2:	5f49      	ldrsh	r1, [r1, r5]
 8009ff4:	f000 f91a 	bl	800a22c <_read_r>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	db03      	blt.n	800a004 <__sread+0x18>
 8009ffc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009ffe:	181b      	adds	r3, r3, r0
 800a000:	6563      	str	r3, [r4, #84]	; 0x54
 800a002:	bd70      	pop	{r4, r5, r6, pc}
 800a004:	89a3      	ldrh	r3, [r4, #12]
 800a006:	4a02      	ldr	r2, [pc, #8]	; (800a010 <__sread+0x24>)
 800a008:	4013      	ands	r3, r2
 800a00a:	81a3      	strh	r3, [r4, #12]
 800a00c:	e7f9      	b.n	800a002 <__sread+0x16>
 800a00e:	46c0      	nop			; (mov r8, r8)
 800a010:	ffffefff 	.word	0xffffefff

0800a014 <__swrite>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	001f      	movs	r7, r3
 800a018:	898b      	ldrh	r3, [r1, #12]
 800a01a:	0005      	movs	r5, r0
 800a01c:	000c      	movs	r4, r1
 800a01e:	0016      	movs	r6, r2
 800a020:	05db      	lsls	r3, r3, #23
 800a022:	d505      	bpl.n	800a030 <__swrite+0x1c>
 800a024:	230e      	movs	r3, #14
 800a026:	5ec9      	ldrsh	r1, [r1, r3]
 800a028:	2200      	movs	r2, #0
 800a02a:	2302      	movs	r3, #2
 800a02c:	f000 f8ea 	bl	800a204 <_lseek_r>
 800a030:	89a3      	ldrh	r3, [r4, #12]
 800a032:	4a05      	ldr	r2, [pc, #20]	; (800a048 <__swrite+0x34>)
 800a034:	0028      	movs	r0, r5
 800a036:	4013      	ands	r3, r2
 800a038:	81a3      	strh	r3, [r4, #12]
 800a03a:	0032      	movs	r2, r6
 800a03c:	230e      	movs	r3, #14
 800a03e:	5ee1      	ldrsh	r1, [r4, r3]
 800a040:	003b      	movs	r3, r7
 800a042:	f000 f907 	bl	800a254 <_write_r>
 800a046:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a048:	ffffefff 	.word	0xffffefff

0800a04c <__sseek>:
 800a04c:	b570      	push	{r4, r5, r6, lr}
 800a04e:	000c      	movs	r4, r1
 800a050:	250e      	movs	r5, #14
 800a052:	5f49      	ldrsh	r1, [r1, r5]
 800a054:	f000 f8d6 	bl	800a204 <_lseek_r>
 800a058:	89a3      	ldrh	r3, [r4, #12]
 800a05a:	1c42      	adds	r2, r0, #1
 800a05c:	d103      	bne.n	800a066 <__sseek+0x1a>
 800a05e:	4a05      	ldr	r2, [pc, #20]	; (800a074 <__sseek+0x28>)
 800a060:	4013      	ands	r3, r2
 800a062:	81a3      	strh	r3, [r4, #12]
 800a064:	bd70      	pop	{r4, r5, r6, pc}
 800a066:	2280      	movs	r2, #128	; 0x80
 800a068:	0152      	lsls	r2, r2, #5
 800a06a:	4313      	orrs	r3, r2
 800a06c:	81a3      	strh	r3, [r4, #12]
 800a06e:	6560      	str	r0, [r4, #84]	; 0x54
 800a070:	e7f8      	b.n	800a064 <__sseek+0x18>
 800a072:	46c0      	nop			; (mov r8, r8)
 800a074:	ffffefff 	.word	0xffffefff

0800a078 <__sclose>:
 800a078:	b510      	push	{r4, lr}
 800a07a:	230e      	movs	r3, #14
 800a07c:	5ec9      	ldrsh	r1, [r1, r3]
 800a07e:	f000 f8af 	bl	800a1e0 <_close_r>
 800a082:	bd10      	pop	{r4, pc}

0800a084 <__swbuf_r>:
 800a084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a086:	0006      	movs	r6, r0
 800a088:	000d      	movs	r5, r1
 800a08a:	0014      	movs	r4, r2
 800a08c:	2800      	cmp	r0, #0
 800a08e:	d004      	beq.n	800a09a <__swbuf_r+0x16>
 800a090:	6a03      	ldr	r3, [r0, #32]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <__swbuf_r+0x16>
 800a096:	f7ff fed1 	bl	8009e3c <__sinit>
 800a09a:	69a3      	ldr	r3, [r4, #24]
 800a09c:	60a3      	str	r3, [r4, #8]
 800a09e:	89a3      	ldrh	r3, [r4, #12]
 800a0a0:	071b      	lsls	r3, r3, #28
 800a0a2:	d528      	bpl.n	800a0f6 <__swbuf_r+0x72>
 800a0a4:	6923      	ldr	r3, [r4, #16]
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d025      	beq.n	800a0f6 <__swbuf_r+0x72>
 800a0aa:	6923      	ldr	r3, [r4, #16]
 800a0ac:	6820      	ldr	r0, [r4, #0]
 800a0ae:	b2ef      	uxtb	r7, r5
 800a0b0:	1ac0      	subs	r0, r0, r3
 800a0b2:	6963      	ldr	r3, [r4, #20]
 800a0b4:	b2ed      	uxtb	r5, r5
 800a0b6:	4283      	cmp	r3, r0
 800a0b8:	dc05      	bgt.n	800a0c6 <__swbuf_r+0x42>
 800a0ba:	0021      	movs	r1, r4
 800a0bc:	0030      	movs	r0, r6
 800a0be:	f000 fec1 	bl	800ae44 <_fflush_r>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d11d      	bne.n	800a102 <__swbuf_r+0x7e>
 800a0c6:	68a3      	ldr	r3, [r4, #8]
 800a0c8:	3001      	adds	r0, #1
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	60a3      	str	r3, [r4, #8]
 800a0ce:	6823      	ldr	r3, [r4, #0]
 800a0d0:	1c5a      	adds	r2, r3, #1
 800a0d2:	6022      	str	r2, [r4, #0]
 800a0d4:	701f      	strb	r7, [r3, #0]
 800a0d6:	6963      	ldr	r3, [r4, #20]
 800a0d8:	4283      	cmp	r3, r0
 800a0da:	d004      	beq.n	800a0e6 <__swbuf_r+0x62>
 800a0dc:	89a3      	ldrh	r3, [r4, #12]
 800a0de:	07db      	lsls	r3, r3, #31
 800a0e0:	d507      	bpl.n	800a0f2 <__swbuf_r+0x6e>
 800a0e2:	2d0a      	cmp	r5, #10
 800a0e4:	d105      	bne.n	800a0f2 <__swbuf_r+0x6e>
 800a0e6:	0021      	movs	r1, r4
 800a0e8:	0030      	movs	r0, r6
 800a0ea:	f000 feab 	bl	800ae44 <_fflush_r>
 800a0ee:	2800      	cmp	r0, #0
 800a0f0:	d107      	bne.n	800a102 <__swbuf_r+0x7e>
 800a0f2:	0028      	movs	r0, r5
 800a0f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a0f6:	0021      	movs	r1, r4
 800a0f8:	0030      	movs	r0, r6
 800a0fa:	f000 f805 	bl	800a108 <__swsetup_r>
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d0d3      	beq.n	800a0aa <__swbuf_r+0x26>
 800a102:	2501      	movs	r5, #1
 800a104:	426d      	negs	r5, r5
 800a106:	e7f4      	b.n	800a0f2 <__swbuf_r+0x6e>

0800a108 <__swsetup_r>:
 800a108:	4b30      	ldr	r3, [pc, #192]	; (800a1cc <__swsetup_r+0xc4>)
 800a10a:	b570      	push	{r4, r5, r6, lr}
 800a10c:	0005      	movs	r5, r0
 800a10e:	6818      	ldr	r0, [r3, #0]
 800a110:	000c      	movs	r4, r1
 800a112:	2800      	cmp	r0, #0
 800a114:	d004      	beq.n	800a120 <__swsetup_r+0x18>
 800a116:	6a03      	ldr	r3, [r0, #32]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d101      	bne.n	800a120 <__swsetup_r+0x18>
 800a11c:	f7ff fe8e 	bl	8009e3c <__sinit>
 800a120:	230c      	movs	r3, #12
 800a122:	5ee2      	ldrsh	r2, [r4, r3]
 800a124:	b293      	uxth	r3, r2
 800a126:	0711      	lsls	r1, r2, #28
 800a128:	d423      	bmi.n	800a172 <__swsetup_r+0x6a>
 800a12a:	06d9      	lsls	r1, r3, #27
 800a12c:	d407      	bmi.n	800a13e <__swsetup_r+0x36>
 800a12e:	2309      	movs	r3, #9
 800a130:	2001      	movs	r0, #1
 800a132:	602b      	str	r3, [r5, #0]
 800a134:	3337      	adds	r3, #55	; 0x37
 800a136:	4313      	orrs	r3, r2
 800a138:	81a3      	strh	r3, [r4, #12]
 800a13a:	4240      	negs	r0, r0
 800a13c:	bd70      	pop	{r4, r5, r6, pc}
 800a13e:	075b      	lsls	r3, r3, #29
 800a140:	d513      	bpl.n	800a16a <__swsetup_r+0x62>
 800a142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a144:	2900      	cmp	r1, #0
 800a146:	d008      	beq.n	800a15a <__swsetup_r+0x52>
 800a148:	0023      	movs	r3, r4
 800a14a:	3344      	adds	r3, #68	; 0x44
 800a14c:	4299      	cmp	r1, r3
 800a14e:	d002      	beq.n	800a156 <__swsetup_r+0x4e>
 800a150:	0028      	movs	r0, r5
 800a152:	f000 f8c9 	bl	800a2e8 <_free_r>
 800a156:	2300      	movs	r3, #0
 800a158:	6363      	str	r3, [r4, #52]	; 0x34
 800a15a:	2224      	movs	r2, #36	; 0x24
 800a15c:	89a3      	ldrh	r3, [r4, #12]
 800a15e:	4393      	bics	r3, r2
 800a160:	81a3      	strh	r3, [r4, #12]
 800a162:	2300      	movs	r3, #0
 800a164:	6063      	str	r3, [r4, #4]
 800a166:	6923      	ldr	r3, [r4, #16]
 800a168:	6023      	str	r3, [r4, #0]
 800a16a:	2308      	movs	r3, #8
 800a16c:	89a2      	ldrh	r2, [r4, #12]
 800a16e:	4313      	orrs	r3, r2
 800a170:	81a3      	strh	r3, [r4, #12]
 800a172:	6923      	ldr	r3, [r4, #16]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d10b      	bne.n	800a190 <__swsetup_r+0x88>
 800a178:	21a0      	movs	r1, #160	; 0xa0
 800a17a:	2280      	movs	r2, #128	; 0x80
 800a17c:	89a3      	ldrh	r3, [r4, #12]
 800a17e:	0089      	lsls	r1, r1, #2
 800a180:	0092      	lsls	r2, r2, #2
 800a182:	400b      	ands	r3, r1
 800a184:	4293      	cmp	r3, r2
 800a186:	d003      	beq.n	800a190 <__swsetup_r+0x88>
 800a188:	0021      	movs	r1, r4
 800a18a:	0028      	movs	r0, r5
 800a18c:	f000 feae 	bl	800aeec <__smakebuf_r>
 800a190:	220c      	movs	r2, #12
 800a192:	5ea3      	ldrsh	r3, [r4, r2]
 800a194:	2001      	movs	r0, #1
 800a196:	001a      	movs	r2, r3
 800a198:	b299      	uxth	r1, r3
 800a19a:	4002      	ands	r2, r0
 800a19c:	4203      	tst	r3, r0
 800a19e:	d00f      	beq.n	800a1c0 <__swsetup_r+0xb8>
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	60a2      	str	r2, [r4, #8]
 800a1a4:	6962      	ldr	r2, [r4, #20]
 800a1a6:	4252      	negs	r2, r2
 800a1a8:	61a2      	str	r2, [r4, #24]
 800a1aa:	2000      	movs	r0, #0
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	4282      	cmp	r2, r0
 800a1b0:	d1c4      	bne.n	800a13c <__swsetup_r+0x34>
 800a1b2:	0609      	lsls	r1, r1, #24
 800a1b4:	d5c2      	bpl.n	800a13c <__swsetup_r+0x34>
 800a1b6:	2240      	movs	r2, #64	; 0x40
 800a1b8:	4313      	orrs	r3, r2
 800a1ba:	81a3      	strh	r3, [r4, #12]
 800a1bc:	3801      	subs	r0, #1
 800a1be:	e7bd      	b.n	800a13c <__swsetup_r+0x34>
 800a1c0:	0788      	lsls	r0, r1, #30
 800a1c2:	d400      	bmi.n	800a1c6 <__swsetup_r+0xbe>
 800a1c4:	6962      	ldr	r2, [r4, #20]
 800a1c6:	60a2      	str	r2, [r4, #8]
 800a1c8:	e7ef      	b.n	800a1aa <__swsetup_r+0xa2>
 800a1ca:	46c0      	nop			; (mov r8, r8)
 800a1cc:	20000068 	.word	0x20000068

0800a1d0 <memset>:
 800a1d0:	0003      	movs	r3, r0
 800a1d2:	1882      	adds	r2, r0, r2
 800a1d4:	4293      	cmp	r3, r2
 800a1d6:	d100      	bne.n	800a1da <memset+0xa>
 800a1d8:	4770      	bx	lr
 800a1da:	7019      	strb	r1, [r3, #0]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	e7f9      	b.n	800a1d4 <memset+0x4>

0800a1e0 <_close_r>:
 800a1e0:	2300      	movs	r3, #0
 800a1e2:	b570      	push	{r4, r5, r6, lr}
 800a1e4:	4d06      	ldr	r5, [pc, #24]	; (800a200 <_close_r+0x20>)
 800a1e6:	0004      	movs	r4, r0
 800a1e8:	0008      	movs	r0, r1
 800a1ea:	602b      	str	r3, [r5, #0]
 800a1ec:	f7f7 fb13 	bl	8001816 <_close>
 800a1f0:	1c43      	adds	r3, r0, #1
 800a1f2:	d103      	bne.n	800a1fc <_close_r+0x1c>
 800a1f4:	682b      	ldr	r3, [r5, #0]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d000      	beq.n	800a1fc <_close_r+0x1c>
 800a1fa:	6023      	str	r3, [r4, #0]
 800a1fc:	bd70      	pop	{r4, r5, r6, pc}
 800a1fe:	46c0      	nop			; (mov r8, r8)
 800a200:	2000866c 	.word	0x2000866c

0800a204 <_lseek_r>:
 800a204:	b570      	push	{r4, r5, r6, lr}
 800a206:	0004      	movs	r4, r0
 800a208:	0008      	movs	r0, r1
 800a20a:	0011      	movs	r1, r2
 800a20c:	001a      	movs	r2, r3
 800a20e:	2300      	movs	r3, #0
 800a210:	4d05      	ldr	r5, [pc, #20]	; (800a228 <_lseek_r+0x24>)
 800a212:	602b      	str	r3, [r5, #0]
 800a214:	f7f7 fb20 	bl	8001858 <_lseek>
 800a218:	1c43      	adds	r3, r0, #1
 800a21a:	d103      	bne.n	800a224 <_lseek_r+0x20>
 800a21c:	682b      	ldr	r3, [r5, #0]
 800a21e:	2b00      	cmp	r3, #0
 800a220:	d000      	beq.n	800a224 <_lseek_r+0x20>
 800a222:	6023      	str	r3, [r4, #0]
 800a224:	bd70      	pop	{r4, r5, r6, pc}
 800a226:	46c0      	nop			; (mov r8, r8)
 800a228:	2000866c 	.word	0x2000866c

0800a22c <_read_r>:
 800a22c:	b570      	push	{r4, r5, r6, lr}
 800a22e:	0004      	movs	r4, r0
 800a230:	0008      	movs	r0, r1
 800a232:	0011      	movs	r1, r2
 800a234:	001a      	movs	r2, r3
 800a236:	2300      	movs	r3, #0
 800a238:	4d05      	ldr	r5, [pc, #20]	; (800a250 <_read_r+0x24>)
 800a23a:	602b      	str	r3, [r5, #0]
 800a23c:	f7f7 fab2 	bl	80017a4 <_read>
 800a240:	1c43      	adds	r3, r0, #1
 800a242:	d103      	bne.n	800a24c <_read_r+0x20>
 800a244:	682b      	ldr	r3, [r5, #0]
 800a246:	2b00      	cmp	r3, #0
 800a248:	d000      	beq.n	800a24c <_read_r+0x20>
 800a24a:	6023      	str	r3, [r4, #0]
 800a24c:	bd70      	pop	{r4, r5, r6, pc}
 800a24e:	46c0      	nop			; (mov r8, r8)
 800a250:	2000866c 	.word	0x2000866c

0800a254 <_write_r>:
 800a254:	b570      	push	{r4, r5, r6, lr}
 800a256:	0004      	movs	r4, r0
 800a258:	0008      	movs	r0, r1
 800a25a:	0011      	movs	r1, r2
 800a25c:	001a      	movs	r2, r3
 800a25e:	2300      	movs	r3, #0
 800a260:	4d05      	ldr	r5, [pc, #20]	; (800a278 <_write_r+0x24>)
 800a262:	602b      	str	r3, [r5, #0]
 800a264:	f7f7 fabb 	bl	80017de <_write>
 800a268:	1c43      	adds	r3, r0, #1
 800a26a:	d103      	bne.n	800a274 <_write_r+0x20>
 800a26c:	682b      	ldr	r3, [r5, #0]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d000      	beq.n	800a274 <_write_r+0x20>
 800a272:	6023      	str	r3, [r4, #0]
 800a274:	bd70      	pop	{r4, r5, r6, pc}
 800a276:	46c0      	nop			; (mov r8, r8)
 800a278:	2000866c 	.word	0x2000866c

0800a27c <__errno>:
 800a27c:	4b01      	ldr	r3, [pc, #4]	; (800a284 <__errno+0x8>)
 800a27e:	6818      	ldr	r0, [r3, #0]
 800a280:	4770      	bx	lr
 800a282:	46c0      	nop			; (mov r8, r8)
 800a284:	20000068 	.word	0x20000068

0800a288 <__libc_init_array>:
 800a288:	b570      	push	{r4, r5, r6, lr}
 800a28a:	2600      	movs	r6, #0
 800a28c:	4c0c      	ldr	r4, [pc, #48]	; (800a2c0 <__libc_init_array+0x38>)
 800a28e:	4d0d      	ldr	r5, [pc, #52]	; (800a2c4 <__libc_init_array+0x3c>)
 800a290:	1b64      	subs	r4, r4, r5
 800a292:	10a4      	asrs	r4, r4, #2
 800a294:	42a6      	cmp	r6, r4
 800a296:	d109      	bne.n	800a2ac <__libc_init_array+0x24>
 800a298:	2600      	movs	r6, #0
 800a29a:	f000 fef1 	bl	800b080 <_init>
 800a29e:	4c0a      	ldr	r4, [pc, #40]	; (800a2c8 <__libc_init_array+0x40>)
 800a2a0:	4d0a      	ldr	r5, [pc, #40]	; (800a2cc <__libc_init_array+0x44>)
 800a2a2:	1b64      	subs	r4, r4, r5
 800a2a4:	10a4      	asrs	r4, r4, #2
 800a2a6:	42a6      	cmp	r6, r4
 800a2a8:	d105      	bne.n	800a2b6 <__libc_init_array+0x2e>
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}
 800a2ac:	00b3      	lsls	r3, r6, #2
 800a2ae:	58eb      	ldr	r3, [r5, r3]
 800a2b0:	4798      	blx	r3
 800a2b2:	3601      	adds	r6, #1
 800a2b4:	e7ee      	b.n	800a294 <__libc_init_array+0xc>
 800a2b6:	00b3      	lsls	r3, r6, #2
 800a2b8:	58eb      	ldr	r3, [r5, r3]
 800a2ba:	4798      	blx	r3
 800a2bc:	3601      	adds	r6, #1
 800a2be:	e7f2      	b.n	800a2a6 <__libc_init_array+0x1e>
 800a2c0:	0800b334 	.word	0x0800b334
 800a2c4:	0800b334 	.word	0x0800b334
 800a2c8:	0800b338 	.word	0x0800b338
 800a2cc:	0800b334 	.word	0x0800b334

0800a2d0 <__retarget_lock_acquire_recursive>:
 800a2d0:	4770      	bx	lr

0800a2d2 <__retarget_lock_release_recursive>:
 800a2d2:	4770      	bx	lr

0800a2d4 <memcpy>:
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	b510      	push	{r4, lr}
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	d100      	bne.n	800a2de <memcpy+0xa>
 800a2dc:	bd10      	pop	{r4, pc}
 800a2de:	5ccc      	ldrb	r4, [r1, r3]
 800a2e0:	54c4      	strb	r4, [r0, r3]
 800a2e2:	3301      	adds	r3, #1
 800a2e4:	e7f8      	b.n	800a2d8 <memcpy+0x4>
	...

0800a2e8 <_free_r>:
 800a2e8:	b570      	push	{r4, r5, r6, lr}
 800a2ea:	0005      	movs	r5, r0
 800a2ec:	2900      	cmp	r1, #0
 800a2ee:	d010      	beq.n	800a312 <_free_r+0x2a>
 800a2f0:	1f0c      	subs	r4, r1, #4
 800a2f2:	6823      	ldr	r3, [r4, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	da00      	bge.n	800a2fa <_free_r+0x12>
 800a2f8:	18e4      	adds	r4, r4, r3
 800a2fa:	0028      	movs	r0, r5
 800a2fc:	f000 f8e2 	bl	800a4c4 <__malloc_lock>
 800a300:	4a1d      	ldr	r2, [pc, #116]	; (800a378 <_free_r+0x90>)
 800a302:	6813      	ldr	r3, [r2, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d105      	bne.n	800a314 <_free_r+0x2c>
 800a308:	6063      	str	r3, [r4, #4]
 800a30a:	6014      	str	r4, [r2, #0]
 800a30c:	0028      	movs	r0, r5
 800a30e:	f000 f8e1 	bl	800a4d4 <__malloc_unlock>
 800a312:	bd70      	pop	{r4, r5, r6, pc}
 800a314:	42a3      	cmp	r3, r4
 800a316:	d908      	bls.n	800a32a <_free_r+0x42>
 800a318:	6820      	ldr	r0, [r4, #0]
 800a31a:	1821      	adds	r1, r4, r0
 800a31c:	428b      	cmp	r3, r1
 800a31e:	d1f3      	bne.n	800a308 <_free_r+0x20>
 800a320:	6819      	ldr	r1, [r3, #0]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	1809      	adds	r1, r1, r0
 800a326:	6021      	str	r1, [r4, #0]
 800a328:	e7ee      	b.n	800a308 <_free_r+0x20>
 800a32a:	001a      	movs	r2, r3
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	2b00      	cmp	r3, #0
 800a330:	d001      	beq.n	800a336 <_free_r+0x4e>
 800a332:	42a3      	cmp	r3, r4
 800a334:	d9f9      	bls.n	800a32a <_free_r+0x42>
 800a336:	6811      	ldr	r1, [r2, #0]
 800a338:	1850      	adds	r0, r2, r1
 800a33a:	42a0      	cmp	r0, r4
 800a33c:	d10b      	bne.n	800a356 <_free_r+0x6e>
 800a33e:	6820      	ldr	r0, [r4, #0]
 800a340:	1809      	adds	r1, r1, r0
 800a342:	1850      	adds	r0, r2, r1
 800a344:	6011      	str	r1, [r2, #0]
 800a346:	4283      	cmp	r3, r0
 800a348:	d1e0      	bne.n	800a30c <_free_r+0x24>
 800a34a:	6818      	ldr	r0, [r3, #0]
 800a34c:	685b      	ldr	r3, [r3, #4]
 800a34e:	1841      	adds	r1, r0, r1
 800a350:	6011      	str	r1, [r2, #0]
 800a352:	6053      	str	r3, [r2, #4]
 800a354:	e7da      	b.n	800a30c <_free_r+0x24>
 800a356:	42a0      	cmp	r0, r4
 800a358:	d902      	bls.n	800a360 <_free_r+0x78>
 800a35a:	230c      	movs	r3, #12
 800a35c:	602b      	str	r3, [r5, #0]
 800a35e:	e7d5      	b.n	800a30c <_free_r+0x24>
 800a360:	6820      	ldr	r0, [r4, #0]
 800a362:	1821      	adds	r1, r4, r0
 800a364:	428b      	cmp	r3, r1
 800a366:	d103      	bne.n	800a370 <_free_r+0x88>
 800a368:	6819      	ldr	r1, [r3, #0]
 800a36a:	685b      	ldr	r3, [r3, #4]
 800a36c:	1809      	adds	r1, r1, r0
 800a36e:	6021      	str	r1, [r4, #0]
 800a370:	6063      	str	r3, [r4, #4]
 800a372:	6054      	str	r4, [r2, #4]
 800a374:	e7ca      	b.n	800a30c <_free_r+0x24>
 800a376:	46c0      	nop			; (mov r8, r8)
 800a378:	20008674 	.word	0x20008674

0800a37c <sbrk_aligned>:
 800a37c:	b570      	push	{r4, r5, r6, lr}
 800a37e:	4e0f      	ldr	r6, [pc, #60]	; (800a3bc <sbrk_aligned+0x40>)
 800a380:	000d      	movs	r5, r1
 800a382:	6831      	ldr	r1, [r6, #0]
 800a384:	0004      	movs	r4, r0
 800a386:	2900      	cmp	r1, #0
 800a388:	d102      	bne.n	800a390 <sbrk_aligned+0x14>
 800a38a:	f000 fe25 	bl	800afd8 <_sbrk_r>
 800a38e:	6030      	str	r0, [r6, #0]
 800a390:	0029      	movs	r1, r5
 800a392:	0020      	movs	r0, r4
 800a394:	f000 fe20 	bl	800afd8 <_sbrk_r>
 800a398:	1c43      	adds	r3, r0, #1
 800a39a:	d00a      	beq.n	800a3b2 <sbrk_aligned+0x36>
 800a39c:	2303      	movs	r3, #3
 800a39e:	1cc5      	adds	r5, r0, #3
 800a3a0:	439d      	bics	r5, r3
 800a3a2:	42a8      	cmp	r0, r5
 800a3a4:	d007      	beq.n	800a3b6 <sbrk_aligned+0x3a>
 800a3a6:	1a29      	subs	r1, r5, r0
 800a3a8:	0020      	movs	r0, r4
 800a3aa:	f000 fe15 	bl	800afd8 <_sbrk_r>
 800a3ae:	3001      	adds	r0, #1
 800a3b0:	d101      	bne.n	800a3b6 <sbrk_aligned+0x3a>
 800a3b2:	2501      	movs	r5, #1
 800a3b4:	426d      	negs	r5, r5
 800a3b6:	0028      	movs	r0, r5
 800a3b8:	bd70      	pop	{r4, r5, r6, pc}
 800a3ba:	46c0      	nop			; (mov r8, r8)
 800a3bc:	20008678 	.word	0x20008678

0800a3c0 <_malloc_r>:
 800a3c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3c2:	2203      	movs	r2, #3
 800a3c4:	1ccb      	adds	r3, r1, #3
 800a3c6:	4393      	bics	r3, r2
 800a3c8:	3308      	adds	r3, #8
 800a3ca:	0006      	movs	r6, r0
 800a3cc:	001f      	movs	r7, r3
 800a3ce:	2b0c      	cmp	r3, #12
 800a3d0:	d238      	bcs.n	800a444 <_malloc_r+0x84>
 800a3d2:	270c      	movs	r7, #12
 800a3d4:	42b9      	cmp	r1, r7
 800a3d6:	d837      	bhi.n	800a448 <_malloc_r+0x88>
 800a3d8:	0030      	movs	r0, r6
 800a3da:	f000 f873 	bl	800a4c4 <__malloc_lock>
 800a3de:	4b38      	ldr	r3, [pc, #224]	; (800a4c0 <_malloc_r+0x100>)
 800a3e0:	9300      	str	r3, [sp, #0]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	001c      	movs	r4, r3
 800a3e6:	2c00      	cmp	r4, #0
 800a3e8:	d133      	bne.n	800a452 <_malloc_r+0x92>
 800a3ea:	0039      	movs	r1, r7
 800a3ec:	0030      	movs	r0, r6
 800a3ee:	f7ff ffc5 	bl	800a37c <sbrk_aligned>
 800a3f2:	0004      	movs	r4, r0
 800a3f4:	1c43      	adds	r3, r0, #1
 800a3f6:	d15e      	bne.n	800a4b6 <_malloc_r+0xf6>
 800a3f8:	9b00      	ldr	r3, [sp, #0]
 800a3fa:	681c      	ldr	r4, [r3, #0]
 800a3fc:	0025      	movs	r5, r4
 800a3fe:	2d00      	cmp	r5, #0
 800a400:	d14e      	bne.n	800a4a0 <_malloc_r+0xe0>
 800a402:	2c00      	cmp	r4, #0
 800a404:	d051      	beq.n	800a4aa <_malloc_r+0xea>
 800a406:	6823      	ldr	r3, [r4, #0]
 800a408:	0029      	movs	r1, r5
 800a40a:	18e3      	adds	r3, r4, r3
 800a40c:	0030      	movs	r0, r6
 800a40e:	9301      	str	r3, [sp, #4]
 800a410:	f000 fde2 	bl	800afd8 <_sbrk_r>
 800a414:	9b01      	ldr	r3, [sp, #4]
 800a416:	4283      	cmp	r3, r0
 800a418:	d147      	bne.n	800a4aa <_malloc_r+0xea>
 800a41a:	6823      	ldr	r3, [r4, #0]
 800a41c:	0030      	movs	r0, r6
 800a41e:	1aff      	subs	r7, r7, r3
 800a420:	0039      	movs	r1, r7
 800a422:	f7ff ffab 	bl	800a37c <sbrk_aligned>
 800a426:	3001      	adds	r0, #1
 800a428:	d03f      	beq.n	800a4aa <_malloc_r+0xea>
 800a42a:	6823      	ldr	r3, [r4, #0]
 800a42c:	19db      	adds	r3, r3, r7
 800a42e:	6023      	str	r3, [r4, #0]
 800a430:	9b00      	ldr	r3, [sp, #0]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d040      	beq.n	800a4ba <_malloc_r+0xfa>
 800a438:	685a      	ldr	r2, [r3, #4]
 800a43a:	42a2      	cmp	r2, r4
 800a43c:	d133      	bne.n	800a4a6 <_malloc_r+0xe6>
 800a43e:	2200      	movs	r2, #0
 800a440:	605a      	str	r2, [r3, #4]
 800a442:	e014      	b.n	800a46e <_malloc_r+0xae>
 800a444:	2b00      	cmp	r3, #0
 800a446:	dac5      	bge.n	800a3d4 <_malloc_r+0x14>
 800a448:	230c      	movs	r3, #12
 800a44a:	2500      	movs	r5, #0
 800a44c:	6033      	str	r3, [r6, #0]
 800a44e:	0028      	movs	r0, r5
 800a450:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a452:	6821      	ldr	r1, [r4, #0]
 800a454:	1bc9      	subs	r1, r1, r7
 800a456:	d420      	bmi.n	800a49a <_malloc_r+0xda>
 800a458:	290b      	cmp	r1, #11
 800a45a:	d918      	bls.n	800a48e <_malloc_r+0xce>
 800a45c:	19e2      	adds	r2, r4, r7
 800a45e:	6027      	str	r7, [r4, #0]
 800a460:	42a3      	cmp	r3, r4
 800a462:	d112      	bne.n	800a48a <_malloc_r+0xca>
 800a464:	9b00      	ldr	r3, [sp, #0]
 800a466:	601a      	str	r2, [r3, #0]
 800a468:	6863      	ldr	r3, [r4, #4]
 800a46a:	6011      	str	r1, [r2, #0]
 800a46c:	6053      	str	r3, [r2, #4]
 800a46e:	0030      	movs	r0, r6
 800a470:	0025      	movs	r5, r4
 800a472:	f000 f82f 	bl	800a4d4 <__malloc_unlock>
 800a476:	2207      	movs	r2, #7
 800a478:	350b      	adds	r5, #11
 800a47a:	1d23      	adds	r3, r4, #4
 800a47c:	4395      	bics	r5, r2
 800a47e:	1aea      	subs	r2, r5, r3
 800a480:	429d      	cmp	r5, r3
 800a482:	d0e4      	beq.n	800a44e <_malloc_r+0x8e>
 800a484:	1b5b      	subs	r3, r3, r5
 800a486:	50a3      	str	r3, [r4, r2]
 800a488:	e7e1      	b.n	800a44e <_malloc_r+0x8e>
 800a48a:	605a      	str	r2, [r3, #4]
 800a48c:	e7ec      	b.n	800a468 <_malloc_r+0xa8>
 800a48e:	6862      	ldr	r2, [r4, #4]
 800a490:	42a3      	cmp	r3, r4
 800a492:	d1d5      	bne.n	800a440 <_malloc_r+0x80>
 800a494:	9b00      	ldr	r3, [sp, #0]
 800a496:	601a      	str	r2, [r3, #0]
 800a498:	e7e9      	b.n	800a46e <_malloc_r+0xae>
 800a49a:	0023      	movs	r3, r4
 800a49c:	6864      	ldr	r4, [r4, #4]
 800a49e:	e7a2      	b.n	800a3e6 <_malloc_r+0x26>
 800a4a0:	002c      	movs	r4, r5
 800a4a2:	686d      	ldr	r5, [r5, #4]
 800a4a4:	e7ab      	b.n	800a3fe <_malloc_r+0x3e>
 800a4a6:	0013      	movs	r3, r2
 800a4a8:	e7c4      	b.n	800a434 <_malloc_r+0x74>
 800a4aa:	230c      	movs	r3, #12
 800a4ac:	0030      	movs	r0, r6
 800a4ae:	6033      	str	r3, [r6, #0]
 800a4b0:	f000 f810 	bl	800a4d4 <__malloc_unlock>
 800a4b4:	e7cb      	b.n	800a44e <_malloc_r+0x8e>
 800a4b6:	6027      	str	r7, [r4, #0]
 800a4b8:	e7d9      	b.n	800a46e <_malloc_r+0xae>
 800a4ba:	605b      	str	r3, [r3, #4]
 800a4bc:	deff      	udf	#255	; 0xff
 800a4be:	46c0      	nop			; (mov r8, r8)
 800a4c0:	20008674 	.word	0x20008674

0800a4c4 <__malloc_lock>:
 800a4c4:	b510      	push	{r4, lr}
 800a4c6:	4802      	ldr	r0, [pc, #8]	; (800a4d0 <__malloc_lock+0xc>)
 800a4c8:	f7ff ff02 	bl	800a2d0 <__retarget_lock_acquire_recursive>
 800a4cc:	bd10      	pop	{r4, pc}
 800a4ce:	46c0      	nop			; (mov r8, r8)
 800a4d0:	20008670 	.word	0x20008670

0800a4d4 <__malloc_unlock>:
 800a4d4:	b510      	push	{r4, lr}
 800a4d6:	4802      	ldr	r0, [pc, #8]	; (800a4e0 <__malloc_unlock+0xc>)
 800a4d8:	f7ff fefb 	bl	800a2d2 <__retarget_lock_release_recursive>
 800a4dc:	bd10      	pop	{r4, pc}
 800a4de:	46c0      	nop			; (mov r8, r8)
 800a4e0:	20008670 	.word	0x20008670

0800a4e4 <__ssputs_r>:
 800a4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e6:	b085      	sub	sp, #20
 800a4e8:	9301      	str	r3, [sp, #4]
 800a4ea:	9203      	str	r2, [sp, #12]
 800a4ec:	688e      	ldr	r6, [r1, #8]
 800a4ee:	9a01      	ldr	r2, [sp, #4]
 800a4f0:	0007      	movs	r7, r0
 800a4f2:	000c      	movs	r4, r1
 800a4f4:	680b      	ldr	r3, [r1, #0]
 800a4f6:	4296      	cmp	r6, r2
 800a4f8:	d831      	bhi.n	800a55e <__ssputs_r+0x7a>
 800a4fa:	898a      	ldrh	r2, [r1, #12]
 800a4fc:	2190      	movs	r1, #144	; 0x90
 800a4fe:	00c9      	lsls	r1, r1, #3
 800a500:	420a      	tst	r2, r1
 800a502:	d029      	beq.n	800a558 <__ssputs_r+0x74>
 800a504:	2003      	movs	r0, #3
 800a506:	6921      	ldr	r1, [r4, #16]
 800a508:	1a5b      	subs	r3, r3, r1
 800a50a:	9302      	str	r3, [sp, #8]
 800a50c:	6963      	ldr	r3, [r4, #20]
 800a50e:	4343      	muls	r3, r0
 800a510:	0fdd      	lsrs	r5, r3, #31
 800a512:	18ed      	adds	r5, r5, r3
 800a514:	9b01      	ldr	r3, [sp, #4]
 800a516:	9802      	ldr	r0, [sp, #8]
 800a518:	3301      	adds	r3, #1
 800a51a:	181b      	adds	r3, r3, r0
 800a51c:	106d      	asrs	r5, r5, #1
 800a51e:	42ab      	cmp	r3, r5
 800a520:	d900      	bls.n	800a524 <__ssputs_r+0x40>
 800a522:	001d      	movs	r5, r3
 800a524:	0552      	lsls	r2, r2, #21
 800a526:	d529      	bpl.n	800a57c <__ssputs_r+0x98>
 800a528:	0029      	movs	r1, r5
 800a52a:	0038      	movs	r0, r7
 800a52c:	f7ff ff48 	bl	800a3c0 <_malloc_r>
 800a530:	1e06      	subs	r6, r0, #0
 800a532:	d02d      	beq.n	800a590 <__ssputs_r+0xac>
 800a534:	9a02      	ldr	r2, [sp, #8]
 800a536:	6921      	ldr	r1, [r4, #16]
 800a538:	f7ff fecc 	bl	800a2d4 <memcpy>
 800a53c:	89a2      	ldrh	r2, [r4, #12]
 800a53e:	4b19      	ldr	r3, [pc, #100]	; (800a5a4 <__ssputs_r+0xc0>)
 800a540:	401a      	ands	r2, r3
 800a542:	2380      	movs	r3, #128	; 0x80
 800a544:	4313      	orrs	r3, r2
 800a546:	81a3      	strh	r3, [r4, #12]
 800a548:	9b02      	ldr	r3, [sp, #8]
 800a54a:	6126      	str	r6, [r4, #16]
 800a54c:	18f6      	adds	r6, r6, r3
 800a54e:	6026      	str	r6, [r4, #0]
 800a550:	6165      	str	r5, [r4, #20]
 800a552:	9e01      	ldr	r6, [sp, #4]
 800a554:	1aed      	subs	r5, r5, r3
 800a556:	60a5      	str	r5, [r4, #8]
 800a558:	9b01      	ldr	r3, [sp, #4]
 800a55a:	429e      	cmp	r6, r3
 800a55c:	d900      	bls.n	800a560 <__ssputs_r+0x7c>
 800a55e:	9e01      	ldr	r6, [sp, #4]
 800a560:	0032      	movs	r2, r6
 800a562:	9903      	ldr	r1, [sp, #12]
 800a564:	6820      	ldr	r0, [r4, #0]
 800a566:	f000 fcff 	bl	800af68 <memmove>
 800a56a:	2000      	movs	r0, #0
 800a56c:	68a3      	ldr	r3, [r4, #8]
 800a56e:	1b9b      	subs	r3, r3, r6
 800a570:	60a3      	str	r3, [r4, #8]
 800a572:	6823      	ldr	r3, [r4, #0]
 800a574:	199b      	adds	r3, r3, r6
 800a576:	6023      	str	r3, [r4, #0]
 800a578:	b005      	add	sp, #20
 800a57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a57c:	002a      	movs	r2, r5
 800a57e:	0038      	movs	r0, r7
 800a580:	f000 fd47 	bl	800b012 <_realloc_r>
 800a584:	1e06      	subs	r6, r0, #0
 800a586:	d1df      	bne.n	800a548 <__ssputs_r+0x64>
 800a588:	0038      	movs	r0, r7
 800a58a:	6921      	ldr	r1, [r4, #16]
 800a58c:	f7ff feac 	bl	800a2e8 <_free_r>
 800a590:	230c      	movs	r3, #12
 800a592:	2001      	movs	r0, #1
 800a594:	603b      	str	r3, [r7, #0]
 800a596:	89a2      	ldrh	r2, [r4, #12]
 800a598:	3334      	adds	r3, #52	; 0x34
 800a59a:	4313      	orrs	r3, r2
 800a59c:	81a3      	strh	r3, [r4, #12]
 800a59e:	4240      	negs	r0, r0
 800a5a0:	e7ea      	b.n	800a578 <__ssputs_r+0x94>
 800a5a2:	46c0      	nop			; (mov r8, r8)
 800a5a4:	fffffb7f 	.word	0xfffffb7f

0800a5a8 <_svfiprintf_r>:
 800a5a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a5aa:	b0a1      	sub	sp, #132	; 0x84
 800a5ac:	9003      	str	r0, [sp, #12]
 800a5ae:	001d      	movs	r5, r3
 800a5b0:	898b      	ldrh	r3, [r1, #12]
 800a5b2:	000f      	movs	r7, r1
 800a5b4:	0016      	movs	r6, r2
 800a5b6:	061b      	lsls	r3, r3, #24
 800a5b8:	d511      	bpl.n	800a5de <_svfiprintf_r+0x36>
 800a5ba:	690b      	ldr	r3, [r1, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10e      	bne.n	800a5de <_svfiprintf_r+0x36>
 800a5c0:	2140      	movs	r1, #64	; 0x40
 800a5c2:	f7ff fefd 	bl	800a3c0 <_malloc_r>
 800a5c6:	6038      	str	r0, [r7, #0]
 800a5c8:	6138      	str	r0, [r7, #16]
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d105      	bne.n	800a5da <_svfiprintf_r+0x32>
 800a5ce:	230c      	movs	r3, #12
 800a5d0:	9a03      	ldr	r2, [sp, #12]
 800a5d2:	3801      	subs	r0, #1
 800a5d4:	6013      	str	r3, [r2, #0]
 800a5d6:	b021      	add	sp, #132	; 0x84
 800a5d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a5da:	2340      	movs	r3, #64	; 0x40
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	2300      	movs	r3, #0
 800a5e0:	ac08      	add	r4, sp, #32
 800a5e2:	6163      	str	r3, [r4, #20]
 800a5e4:	3320      	adds	r3, #32
 800a5e6:	7663      	strb	r3, [r4, #25]
 800a5e8:	3310      	adds	r3, #16
 800a5ea:	76a3      	strb	r3, [r4, #26]
 800a5ec:	9507      	str	r5, [sp, #28]
 800a5ee:	0035      	movs	r5, r6
 800a5f0:	782b      	ldrb	r3, [r5, #0]
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d001      	beq.n	800a5fa <_svfiprintf_r+0x52>
 800a5f6:	2b25      	cmp	r3, #37	; 0x25
 800a5f8:	d148      	bne.n	800a68c <_svfiprintf_r+0xe4>
 800a5fa:	1bab      	subs	r3, r5, r6
 800a5fc:	9305      	str	r3, [sp, #20]
 800a5fe:	42b5      	cmp	r5, r6
 800a600:	d00b      	beq.n	800a61a <_svfiprintf_r+0x72>
 800a602:	0032      	movs	r2, r6
 800a604:	0039      	movs	r1, r7
 800a606:	9803      	ldr	r0, [sp, #12]
 800a608:	f7ff ff6c 	bl	800a4e4 <__ssputs_r>
 800a60c:	3001      	adds	r0, #1
 800a60e:	d100      	bne.n	800a612 <_svfiprintf_r+0x6a>
 800a610:	e0af      	b.n	800a772 <_svfiprintf_r+0x1ca>
 800a612:	6963      	ldr	r3, [r4, #20]
 800a614:	9a05      	ldr	r2, [sp, #20]
 800a616:	189b      	adds	r3, r3, r2
 800a618:	6163      	str	r3, [r4, #20]
 800a61a:	782b      	ldrb	r3, [r5, #0]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d100      	bne.n	800a622 <_svfiprintf_r+0x7a>
 800a620:	e0a7      	b.n	800a772 <_svfiprintf_r+0x1ca>
 800a622:	2201      	movs	r2, #1
 800a624:	2300      	movs	r3, #0
 800a626:	4252      	negs	r2, r2
 800a628:	6062      	str	r2, [r4, #4]
 800a62a:	a904      	add	r1, sp, #16
 800a62c:	3254      	adds	r2, #84	; 0x54
 800a62e:	1852      	adds	r2, r2, r1
 800a630:	1c6e      	adds	r6, r5, #1
 800a632:	6023      	str	r3, [r4, #0]
 800a634:	60e3      	str	r3, [r4, #12]
 800a636:	60a3      	str	r3, [r4, #8]
 800a638:	7013      	strb	r3, [r2, #0]
 800a63a:	65a3      	str	r3, [r4, #88]	; 0x58
 800a63c:	4b55      	ldr	r3, [pc, #340]	; (800a794 <_svfiprintf_r+0x1ec>)
 800a63e:	2205      	movs	r2, #5
 800a640:	0018      	movs	r0, r3
 800a642:	7831      	ldrb	r1, [r6, #0]
 800a644:	9305      	str	r3, [sp, #20]
 800a646:	f000 fcd9 	bl	800affc <memchr>
 800a64a:	1c75      	adds	r5, r6, #1
 800a64c:	2800      	cmp	r0, #0
 800a64e:	d11f      	bne.n	800a690 <_svfiprintf_r+0xe8>
 800a650:	6822      	ldr	r2, [r4, #0]
 800a652:	06d3      	lsls	r3, r2, #27
 800a654:	d504      	bpl.n	800a660 <_svfiprintf_r+0xb8>
 800a656:	2353      	movs	r3, #83	; 0x53
 800a658:	a904      	add	r1, sp, #16
 800a65a:	185b      	adds	r3, r3, r1
 800a65c:	2120      	movs	r1, #32
 800a65e:	7019      	strb	r1, [r3, #0]
 800a660:	0713      	lsls	r3, r2, #28
 800a662:	d504      	bpl.n	800a66e <_svfiprintf_r+0xc6>
 800a664:	2353      	movs	r3, #83	; 0x53
 800a666:	a904      	add	r1, sp, #16
 800a668:	185b      	adds	r3, r3, r1
 800a66a:	212b      	movs	r1, #43	; 0x2b
 800a66c:	7019      	strb	r1, [r3, #0]
 800a66e:	7833      	ldrb	r3, [r6, #0]
 800a670:	2b2a      	cmp	r3, #42	; 0x2a
 800a672:	d016      	beq.n	800a6a2 <_svfiprintf_r+0xfa>
 800a674:	0035      	movs	r5, r6
 800a676:	2100      	movs	r1, #0
 800a678:	200a      	movs	r0, #10
 800a67a:	68e3      	ldr	r3, [r4, #12]
 800a67c:	782a      	ldrb	r2, [r5, #0]
 800a67e:	1c6e      	adds	r6, r5, #1
 800a680:	3a30      	subs	r2, #48	; 0x30
 800a682:	2a09      	cmp	r2, #9
 800a684:	d94e      	bls.n	800a724 <_svfiprintf_r+0x17c>
 800a686:	2900      	cmp	r1, #0
 800a688:	d111      	bne.n	800a6ae <_svfiprintf_r+0x106>
 800a68a:	e017      	b.n	800a6bc <_svfiprintf_r+0x114>
 800a68c:	3501      	adds	r5, #1
 800a68e:	e7af      	b.n	800a5f0 <_svfiprintf_r+0x48>
 800a690:	9b05      	ldr	r3, [sp, #20]
 800a692:	6822      	ldr	r2, [r4, #0]
 800a694:	1ac0      	subs	r0, r0, r3
 800a696:	2301      	movs	r3, #1
 800a698:	4083      	lsls	r3, r0
 800a69a:	4313      	orrs	r3, r2
 800a69c:	002e      	movs	r6, r5
 800a69e:	6023      	str	r3, [r4, #0]
 800a6a0:	e7cc      	b.n	800a63c <_svfiprintf_r+0x94>
 800a6a2:	9b07      	ldr	r3, [sp, #28]
 800a6a4:	1d19      	adds	r1, r3, #4
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	9107      	str	r1, [sp, #28]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	db01      	blt.n	800a6b2 <_svfiprintf_r+0x10a>
 800a6ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800a6b0:	e004      	b.n	800a6bc <_svfiprintf_r+0x114>
 800a6b2:	425b      	negs	r3, r3
 800a6b4:	60e3      	str	r3, [r4, #12]
 800a6b6:	2302      	movs	r3, #2
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	6023      	str	r3, [r4, #0]
 800a6bc:	782b      	ldrb	r3, [r5, #0]
 800a6be:	2b2e      	cmp	r3, #46	; 0x2e
 800a6c0:	d10a      	bne.n	800a6d8 <_svfiprintf_r+0x130>
 800a6c2:	786b      	ldrb	r3, [r5, #1]
 800a6c4:	2b2a      	cmp	r3, #42	; 0x2a
 800a6c6:	d135      	bne.n	800a734 <_svfiprintf_r+0x18c>
 800a6c8:	9b07      	ldr	r3, [sp, #28]
 800a6ca:	3502      	adds	r5, #2
 800a6cc:	1d1a      	adds	r2, r3, #4
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	9207      	str	r2, [sp, #28]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	db2b      	blt.n	800a72e <_svfiprintf_r+0x186>
 800a6d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a6d8:	4e2f      	ldr	r6, [pc, #188]	; (800a798 <_svfiprintf_r+0x1f0>)
 800a6da:	2203      	movs	r2, #3
 800a6dc:	0030      	movs	r0, r6
 800a6de:	7829      	ldrb	r1, [r5, #0]
 800a6e0:	f000 fc8c 	bl	800affc <memchr>
 800a6e4:	2800      	cmp	r0, #0
 800a6e6:	d006      	beq.n	800a6f6 <_svfiprintf_r+0x14e>
 800a6e8:	2340      	movs	r3, #64	; 0x40
 800a6ea:	1b80      	subs	r0, r0, r6
 800a6ec:	4083      	lsls	r3, r0
 800a6ee:	6822      	ldr	r2, [r4, #0]
 800a6f0:	3501      	adds	r5, #1
 800a6f2:	4313      	orrs	r3, r2
 800a6f4:	6023      	str	r3, [r4, #0]
 800a6f6:	7829      	ldrb	r1, [r5, #0]
 800a6f8:	2206      	movs	r2, #6
 800a6fa:	4828      	ldr	r0, [pc, #160]	; (800a79c <_svfiprintf_r+0x1f4>)
 800a6fc:	1c6e      	adds	r6, r5, #1
 800a6fe:	7621      	strb	r1, [r4, #24]
 800a700:	f000 fc7c 	bl	800affc <memchr>
 800a704:	2800      	cmp	r0, #0
 800a706:	d03c      	beq.n	800a782 <_svfiprintf_r+0x1da>
 800a708:	4b25      	ldr	r3, [pc, #148]	; (800a7a0 <_svfiprintf_r+0x1f8>)
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d125      	bne.n	800a75a <_svfiprintf_r+0x1b2>
 800a70e:	2207      	movs	r2, #7
 800a710:	9b07      	ldr	r3, [sp, #28]
 800a712:	3307      	adds	r3, #7
 800a714:	4393      	bics	r3, r2
 800a716:	3308      	adds	r3, #8
 800a718:	9307      	str	r3, [sp, #28]
 800a71a:	6963      	ldr	r3, [r4, #20]
 800a71c:	9a04      	ldr	r2, [sp, #16]
 800a71e:	189b      	adds	r3, r3, r2
 800a720:	6163      	str	r3, [r4, #20]
 800a722:	e764      	b.n	800a5ee <_svfiprintf_r+0x46>
 800a724:	4343      	muls	r3, r0
 800a726:	0035      	movs	r5, r6
 800a728:	2101      	movs	r1, #1
 800a72a:	189b      	adds	r3, r3, r2
 800a72c:	e7a6      	b.n	800a67c <_svfiprintf_r+0xd4>
 800a72e:	2301      	movs	r3, #1
 800a730:	425b      	negs	r3, r3
 800a732:	e7d0      	b.n	800a6d6 <_svfiprintf_r+0x12e>
 800a734:	2300      	movs	r3, #0
 800a736:	200a      	movs	r0, #10
 800a738:	001a      	movs	r2, r3
 800a73a:	3501      	adds	r5, #1
 800a73c:	6063      	str	r3, [r4, #4]
 800a73e:	7829      	ldrb	r1, [r5, #0]
 800a740:	1c6e      	adds	r6, r5, #1
 800a742:	3930      	subs	r1, #48	; 0x30
 800a744:	2909      	cmp	r1, #9
 800a746:	d903      	bls.n	800a750 <_svfiprintf_r+0x1a8>
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d0c5      	beq.n	800a6d8 <_svfiprintf_r+0x130>
 800a74c:	9209      	str	r2, [sp, #36]	; 0x24
 800a74e:	e7c3      	b.n	800a6d8 <_svfiprintf_r+0x130>
 800a750:	4342      	muls	r2, r0
 800a752:	0035      	movs	r5, r6
 800a754:	2301      	movs	r3, #1
 800a756:	1852      	adds	r2, r2, r1
 800a758:	e7f1      	b.n	800a73e <_svfiprintf_r+0x196>
 800a75a:	aa07      	add	r2, sp, #28
 800a75c:	9200      	str	r2, [sp, #0]
 800a75e:	0021      	movs	r1, r4
 800a760:	003a      	movs	r2, r7
 800a762:	4b10      	ldr	r3, [pc, #64]	; (800a7a4 <_svfiprintf_r+0x1fc>)
 800a764:	9803      	ldr	r0, [sp, #12]
 800a766:	e000      	b.n	800a76a <_svfiprintf_r+0x1c2>
 800a768:	bf00      	nop
 800a76a:	9004      	str	r0, [sp, #16]
 800a76c:	9b04      	ldr	r3, [sp, #16]
 800a76e:	3301      	adds	r3, #1
 800a770:	d1d3      	bne.n	800a71a <_svfiprintf_r+0x172>
 800a772:	89bb      	ldrh	r3, [r7, #12]
 800a774:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a776:	065b      	lsls	r3, r3, #25
 800a778:	d400      	bmi.n	800a77c <_svfiprintf_r+0x1d4>
 800a77a:	e72c      	b.n	800a5d6 <_svfiprintf_r+0x2e>
 800a77c:	2001      	movs	r0, #1
 800a77e:	4240      	negs	r0, r0
 800a780:	e729      	b.n	800a5d6 <_svfiprintf_r+0x2e>
 800a782:	aa07      	add	r2, sp, #28
 800a784:	9200      	str	r2, [sp, #0]
 800a786:	0021      	movs	r1, r4
 800a788:	003a      	movs	r2, r7
 800a78a:	4b06      	ldr	r3, [pc, #24]	; (800a7a4 <_svfiprintf_r+0x1fc>)
 800a78c:	9803      	ldr	r0, [sp, #12]
 800a78e:	f000 f9bf 	bl	800ab10 <_printf_i>
 800a792:	e7ea      	b.n	800a76a <_svfiprintf_r+0x1c2>
 800a794:	0800b300 	.word	0x0800b300
 800a798:	0800b306 	.word	0x0800b306
 800a79c:	0800b30a 	.word	0x0800b30a
 800a7a0:	00000000 	.word	0x00000000
 800a7a4:	0800a4e5 	.word	0x0800a4e5

0800a7a8 <__sfputc_r>:
 800a7a8:	6893      	ldr	r3, [r2, #8]
 800a7aa:	b510      	push	{r4, lr}
 800a7ac:	3b01      	subs	r3, #1
 800a7ae:	6093      	str	r3, [r2, #8]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	da04      	bge.n	800a7be <__sfputc_r+0x16>
 800a7b4:	6994      	ldr	r4, [r2, #24]
 800a7b6:	42a3      	cmp	r3, r4
 800a7b8:	db07      	blt.n	800a7ca <__sfputc_r+0x22>
 800a7ba:	290a      	cmp	r1, #10
 800a7bc:	d005      	beq.n	800a7ca <__sfputc_r+0x22>
 800a7be:	6813      	ldr	r3, [r2, #0]
 800a7c0:	1c58      	adds	r0, r3, #1
 800a7c2:	6010      	str	r0, [r2, #0]
 800a7c4:	7019      	strb	r1, [r3, #0]
 800a7c6:	0008      	movs	r0, r1
 800a7c8:	bd10      	pop	{r4, pc}
 800a7ca:	f7ff fc5b 	bl	800a084 <__swbuf_r>
 800a7ce:	0001      	movs	r1, r0
 800a7d0:	e7f9      	b.n	800a7c6 <__sfputc_r+0x1e>

0800a7d2 <__sfputs_r>:
 800a7d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7d4:	0006      	movs	r6, r0
 800a7d6:	000f      	movs	r7, r1
 800a7d8:	0014      	movs	r4, r2
 800a7da:	18d5      	adds	r5, r2, r3
 800a7dc:	42ac      	cmp	r4, r5
 800a7de:	d101      	bne.n	800a7e4 <__sfputs_r+0x12>
 800a7e0:	2000      	movs	r0, #0
 800a7e2:	e007      	b.n	800a7f4 <__sfputs_r+0x22>
 800a7e4:	7821      	ldrb	r1, [r4, #0]
 800a7e6:	003a      	movs	r2, r7
 800a7e8:	0030      	movs	r0, r6
 800a7ea:	f7ff ffdd 	bl	800a7a8 <__sfputc_r>
 800a7ee:	3401      	adds	r4, #1
 800a7f0:	1c43      	adds	r3, r0, #1
 800a7f2:	d1f3      	bne.n	800a7dc <__sfputs_r+0xa>
 800a7f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7f8 <_vfiprintf_r>:
 800a7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a7fa:	b0a1      	sub	sp, #132	; 0x84
 800a7fc:	000f      	movs	r7, r1
 800a7fe:	0015      	movs	r5, r2
 800a800:	001e      	movs	r6, r3
 800a802:	9003      	str	r0, [sp, #12]
 800a804:	2800      	cmp	r0, #0
 800a806:	d004      	beq.n	800a812 <_vfiprintf_r+0x1a>
 800a808:	6a03      	ldr	r3, [r0, #32]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d101      	bne.n	800a812 <_vfiprintf_r+0x1a>
 800a80e:	f7ff fb15 	bl	8009e3c <__sinit>
 800a812:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a814:	07db      	lsls	r3, r3, #31
 800a816:	d405      	bmi.n	800a824 <_vfiprintf_r+0x2c>
 800a818:	89bb      	ldrh	r3, [r7, #12]
 800a81a:	059b      	lsls	r3, r3, #22
 800a81c:	d402      	bmi.n	800a824 <_vfiprintf_r+0x2c>
 800a81e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a820:	f7ff fd56 	bl	800a2d0 <__retarget_lock_acquire_recursive>
 800a824:	89bb      	ldrh	r3, [r7, #12]
 800a826:	071b      	lsls	r3, r3, #28
 800a828:	d502      	bpl.n	800a830 <_vfiprintf_r+0x38>
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d113      	bne.n	800a858 <_vfiprintf_r+0x60>
 800a830:	0039      	movs	r1, r7
 800a832:	9803      	ldr	r0, [sp, #12]
 800a834:	f7ff fc68 	bl	800a108 <__swsetup_r>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d00d      	beq.n	800a858 <_vfiprintf_r+0x60>
 800a83c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a83e:	07db      	lsls	r3, r3, #31
 800a840:	d503      	bpl.n	800a84a <_vfiprintf_r+0x52>
 800a842:	2001      	movs	r0, #1
 800a844:	4240      	negs	r0, r0
 800a846:	b021      	add	sp, #132	; 0x84
 800a848:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a84a:	89bb      	ldrh	r3, [r7, #12]
 800a84c:	059b      	lsls	r3, r3, #22
 800a84e:	d4f8      	bmi.n	800a842 <_vfiprintf_r+0x4a>
 800a850:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a852:	f7ff fd3e 	bl	800a2d2 <__retarget_lock_release_recursive>
 800a856:	e7f4      	b.n	800a842 <_vfiprintf_r+0x4a>
 800a858:	2300      	movs	r3, #0
 800a85a:	ac08      	add	r4, sp, #32
 800a85c:	6163      	str	r3, [r4, #20]
 800a85e:	3320      	adds	r3, #32
 800a860:	7663      	strb	r3, [r4, #25]
 800a862:	3310      	adds	r3, #16
 800a864:	76a3      	strb	r3, [r4, #26]
 800a866:	9607      	str	r6, [sp, #28]
 800a868:	002e      	movs	r6, r5
 800a86a:	7833      	ldrb	r3, [r6, #0]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d001      	beq.n	800a874 <_vfiprintf_r+0x7c>
 800a870:	2b25      	cmp	r3, #37	; 0x25
 800a872:	d148      	bne.n	800a906 <_vfiprintf_r+0x10e>
 800a874:	1b73      	subs	r3, r6, r5
 800a876:	9305      	str	r3, [sp, #20]
 800a878:	42ae      	cmp	r6, r5
 800a87a:	d00b      	beq.n	800a894 <_vfiprintf_r+0x9c>
 800a87c:	002a      	movs	r2, r5
 800a87e:	0039      	movs	r1, r7
 800a880:	9803      	ldr	r0, [sp, #12]
 800a882:	f7ff ffa6 	bl	800a7d2 <__sfputs_r>
 800a886:	3001      	adds	r0, #1
 800a888:	d100      	bne.n	800a88c <_vfiprintf_r+0x94>
 800a88a:	e0af      	b.n	800a9ec <_vfiprintf_r+0x1f4>
 800a88c:	6963      	ldr	r3, [r4, #20]
 800a88e:	9a05      	ldr	r2, [sp, #20]
 800a890:	189b      	adds	r3, r3, r2
 800a892:	6163      	str	r3, [r4, #20]
 800a894:	7833      	ldrb	r3, [r6, #0]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d100      	bne.n	800a89c <_vfiprintf_r+0xa4>
 800a89a:	e0a7      	b.n	800a9ec <_vfiprintf_r+0x1f4>
 800a89c:	2201      	movs	r2, #1
 800a89e:	2300      	movs	r3, #0
 800a8a0:	4252      	negs	r2, r2
 800a8a2:	6062      	str	r2, [r4, #4]
 800a8a4:	a904      	add	r1, sp, #16
 800a8a6:	3254      	adds	r2, #84	; 0x54
 800a8a8:	1852      	adds	r2, r2, r1
 800a8aa:	1c75      	adds	r5, r6, #1
 800a8ac:	6023      	str	r3, [r4, #0]
 800a8ae:	60e3      	str	r3, [r4, #12]
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	7013      	strb	r3, [r2, #0]
 800a8b4:	65a3      	str	r3, [r4, #88]	; 0x58
 800a8b6:	4b59      	ldr	r3, [pc, #356]	; (800aa1c <_vfiprintf_r+0x224>)
 800a8b8:	2205      	movs	r2, #5
 800a8ba:	0018      	movs	r0, r3
 800a8bc:	7829      	ldrb	r1, [r5, #0]
 800a8be:	9305      	str	r3, [sp, #20]
 800a8c0:	f000 fb9c 	bl	800affc <memchr>
 800a8c4:	1c6e      	adds	r6, r5, #1
 800a8c6:	2800      	cmp	r0, #0
 800a8c8:	d11f      	bne.n	800a90a <_vfiprintf_r+0x112>
 800a8ca:	6822      	ldr	r2, [r4, #0]
 800a8cc:	06d3      	lsls	r3, r2, #27
 800a8ce:	d504      	bpl.n	800a8da <_vfiprintf_r+0xe2>
 800a8d0:	2353      	movs	r3, #83	; 0x53
 800a8d2:	a904      	add	r1, sp, #16
 800a8d4:	185b      	adds	r3, r3, r1
 800a8d6:	2120      	movs	r1, #32
 800a8d8:	7019      	strb	r1, [r3, #0]
 800a8da:	0713      	lsls	r3, r2, #28
 800a8dc:	d504      	bpl.n	800a8e8 <_vfiprintf_r+0xf0>
 800a8de:	2353      	movs	r3, #83	; 0x53
 800a8e0:	a904      	add	r1, sp, #16
 800a8e2:	185b      	adds	r3, r3, r1
 800a8e4:	212b      	movs	r1, #43	; 0x2b
 800a8e6:	7019      	strb	r1, [r3, #0]
 800a8e8:	782b      	ldrb	r3, [r5, #0]
 800a8ea:	2b2a      	cmp	r3, #42	; 0x2a
 800a8ec:	d016      	beq.n	800a91c <_vfiprintf_r+0x124>
 800a8ee:	002e      	movs	r6, r5
 800a8f0:	2100      	movs	r1, #0
 800a8f2:	200a      	movs	r0, #10
 800a8f4:	68e3      	ldr	r3, [r4, #12]
 800a8f6:	7832      	ldrb	r2, [r6, #0]
 800a8f8:	1c75      	adds	r5, r6, #1
 800a8fa:	3a30      	subs	r2, #48	; 0x30
 800a8fc:	2a09      	cmp	r2, #9
 800a8fe:	d94e      	bls.n	800a99e <_vfiprintf_r+0x1a6>
 800a900:	2900      	cmp	r1, #0
 800a902:	d111      	bne.n	800a928 <_vfiprintf_r+0x130>
 800a904:	e017      	b.n	800a936 <_vfiprintf_r+0x13e>
 800a906:	3601      	adds	r6, #1
 800a908:	e7af      	b.n	800a86a <_vfiprintf_r+0x72>
 800a90a:	9b05      	ldr	r3, [sp, #20]
 800a90c:	6822      	ldr	r2, [r4, #0]
 800a90e:	1ac0      	subs	r0, r0, r3
 800a910:	2301      	movs	r3, #1
 800a912:	4083      	lsls	r3, r0
 800a914:	4313      	orrs	r3, r2
 800a916:	0035      	movs	r5, r6
 800a918:	6023      	str	r3, [r4, #0]
 800a91a:	e7cc      	b.n	800a8b6 <_vfiprintf_r+0xbe>
 800a91c:	9b07      	ldr	r3, [sp, #28]
 800a91e:	1d19      	adds	r1, r3, #4
 800a920:	681b      	ldr	r3, [r3, #0]
 800a922:	9107      	str	r1, [sp, #28]
 800a924:	2b00      	cmp	r3, #0
 800a926:	db01      	blt.n	800a92c <_vfiprintf_r+0x134>
 800a928:	930b      	str	r3, [sp, #44]	; 0x2c
 800a92a:	e004      	b.n	800a936 <_vfiprintf_r+0x13e>
 800a92c:	425b      	negs	r3, r3
 800a92e:	60e3      	str	r3, [r4, #12]
 800a930:	2302      	movs	r3, #2
 800a932:	4313      	orrs	r3, r2
 800a934:	6023      	str	r3, [r4, #0]
 800a936:	7833      	ldrb	r3, [r6, #0]
 800a938:	2b2e      	cmp	r3, #46	; 0x2e
 800a93a:	d10a      	bne.n	800a952 <_vfiprintf_r+0x15a>
 800a93c:	7873      	ldrb	r3, [r6, #1]
 800a93e:	2b2a      	cmp	r3, #42	; 0x2a
 800a940:	d135      	bne.n	800a9ae <_vfiprintf_r+0x1b6>
 800a942:	9b07      	ldr	r3, [sp, #28]
 800a944:	3602      	adds	r6, #2
 800a946:	1d1a      	adds	r2, r3, #4
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	9207      	str	r2, [sp, #28]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	db2b      	blt.n	800a9a8 <_vfiprintf_r+0x1b0>
 800a950:	9309      	str	r3, [sp, #36]	; 0x24
 800a952:	4d33      	ldr	r5, [pc, #204]	; (800aa20 <_vfiprintf_r+0x228>)
 800a954:	2203      	movs	r2, #3
 800a956:	0028      	movs	r0, r5
 800a958:	7831      	ldrb	r1, [r6, #0]
 800a95a:	f000 fb4f 	bl	800affc <memchr>
 800a95e:	2800      	cmp	r0, #0
 800a960:	d006      	beq.n	800a970 <_vfiprintf_r+0x178>
 800a962:	2340      	movs	r3, #64	; 0x40
 800a964:	1b40      	subs	r0, r0, r5
 800a966:	4083      	lsls	r3, r0
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	3601      	adds	r6, #1
 800a96c:	4313      	orrs	r3, r2
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	7831      	ldrb	r1, [r6, #0]
 800a972:	2206      	movs	r2, #6
 800a974:	482b      	ldr	r0, [pc, #172]	; (800aa24 <_vfiprintf_r+0x22c>)
 800a976:	1c75      	adds	r5, r6, #1
 800a978:	7621      	strb	r1, [r4, #24]
 800a97a:	f000 fb3f 	bl	800affc <memchr>
 800a97e:	2800      	cmp	r0, #0
 800a980:	d043      	beq.n	800aa0a <_vfiprintf_r+0x212>
 800a982:	4b29      	ldr	r3, [pc, #164]	; (800aa28 <_vfiprintf_r+0x230>)
 800a984:	2b00      	cmp	r3, #0
 800a986:	d125      	bne.n	800a9d4 <_vfiprintf_r+0x1dc>
 800a988:	2207      	movs	r2, #7
 800a98a:	9b07      	ldr	r3, [sp, #28]
 800a98c:	3307      	adds	r3, #7
 800a98e:	4393      	bics	r3, r2
 800a990:	3308      	adds	r3, #8
 800a992:	9307      	str	r3, [sp, #28]
 800a994:	6963      	ldr	r3, [r4, #20]
 800a996:	9a04      	ldr	r2, [sp, #16]
 800a998:	189b      	adds	r3, r3, r2
 800a99a:	6163      	str	r3, [r4, #20]
 800a99c:	e764      	b.n	800a868 <_vfiprintf_r+0x70>
 800a99e:	4343      	muls	r3, r0
 800a9a0:	002e      	movs	r6, r5
 800a9a2:	2101      	movs	r1, #1
 800a9a4:	189b      	adds	r3, r3, r2
 800a9a6:	e7a6      	b.n	800a8f6 <_vfiprintf_r+0xfe>
 800a9a8:	2301      	movs	r3, #1
 800a9aa:	425b      	negs	r3, r3
 800a9ac:	e7d0      	b.n	800a950 <_vfiprintf_r+0x158>
 800a9ae:	2300      	movs	r3, #0
 800a9b0:	200a      	movs	r0, #10
 800a9b2:	001a      	movs	r2, r3
 800a9b4:	3601      	adds	r6, #1
 800a9b6:	6063      	str	r3, [r4, #4]
 800a9b8:	7831      	ldrb	r1, [r6, #0]
 800a9ba:	1c75      	adds	r5, r6, #1
 800a9bc:	3930      	subs	r1, #48	; 0x30
 800a9be:	2909      	cmp	r1, #9
 800a9c0:	d903      	bls.n	800a9ca <_vfiprintf_r+0x1d2>
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d0c5      	beq.n	800a952 <_vfiprintf_r+0x15a>
 800a9c6:	9209      	str	r2, [sp, #36]	; 0x24
 800a9c8:	e7c3      	b.n	800a952 <_vfiprintf_r+0x15a>
 800a9ca:	4342      	muls	r2, r0
 800a9cc:	002e      	movs	r6, r5
 800a9ce:	2301      	movs	r3, #1
 800a9d0:	1852      	adds	r2, r2, r1
 800a9d2:	e7f1      	b.n	800a9b8 <_vfiprintf_r+0x1c0>
 800a9d4:	aa07      	add	r2, sp, #28
 800a9d6:	9200      	str	r2, [sp, #0]
 800a9d8:	0021      	movs	r1, r4
 800a9da:	003a      	movs	r2, r7
 800a9dc:	4b13      	ldr	r3, [pc, #76]	; (800aa2c <_vfiprintf_r+0x234>)
 800a9de:	9803      	ldr	r0, [sp, #12]
 800a9e0:	e000      	b.n	800a9e4 <_vfiprintf_r+0x1ec>
 800a9e2:	bf00      	nop
 800a9e4:	9004      	str	r0, [sp, #16]
 800a9e6:	9b04      	ldr	r3, [sp, #16]
 800a9e8:	3301      	adds	r3, #1
 800a9ea:	d1d3      	bne.n	800a994 <_vfiprintf_r+0x19c>
 800a9ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a9ee:	07db      	lsls	r3, r3, #31
 800a9f0:	d405      	bmi.n	800a9fe <_vfiprintf_r+0x206>
 800a9f2:	89bb      	ldrh	r3, [r7, #12]
 800a9f4:	059b      	lsls	r3, r3, #22
 800a9f6:	d402      	bmi.n	800a9fe <_vfiprintf_r+0x206>
 800a9f8:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a9fa:	f7ff fc6a 	bl	800a2d2 <__retarget_lock_release_recursive>
 800a9fe:	89bb      	ldrh	r3, [r7, #12]
 800aa00:	065b      	lsls	r3, r3, #25
 800aa02:	d500      	bpl.n	800aa06 <_vfiprintf_r+0x20e>
 800aa04:	e71d      	b.n	800a842 <_vfiprintf_r+0x4a>
 800aa06:	980d      	ldr	r0, [sp, #52]	; 0x34
 800aa08:	e71d      	b.n	800a846 <_vfiprintf_r+0x4e>
 800aa0a:	aa07      	add	r2, sp, #28
 800aa0c:	9200      	str	r2, [sp, #0]
 800aa0e:	0021      	movs	r1, r4
 800aa10:	003a      	movs	r2, r7
 800aa12:	4b06      	ldr	r3, [pc, #24]	; (800aa2c <_vfiprintf_r+0x234>)
 800aa14:	9803      	ldr	r0, [sp, #12]
 800aa16:	f000 f87b 	bl	800ab10 <_printf_i>
 800aa1a:	e7e3      	b.n	800a9e4 <_vfiprintf_r+0x1ec>
 800aa1c:	0800b300 	.word	0x0800b300
 800aa20:	0800b306 	.word	0x0800b306
 800aa24:	0800b30a 	.word	0x0800b30a
 800aa28:	00000000 	.word	0x00000000
 800aa2c:	0800a7d3 	.word	0x0800a7d3

0800aa30 <_printf_common>:
 800aa30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aa32:	0016      	movs	r6, r2
 800aa34:	9301      	str	r3, [sp, #4]
 800aa36:	688a      	ldr	r2, [r1, #8]
 800aa38:	690b      	ldr	r3, [r1, #16]
 800aa3a:	000c      	movs	r4, r1
 800aa3c:	9000      	str	r0, [sp, #0]
 800aa3e:	4293      	cmp	r3, r2
 800aa40:	da00      	bge.n	800aa44 <_printf_common+0x14>
 800aa42:	0013      	movs	r3, r2
 800aa44:	0022      	movs	r2, r4
 800aa46:	6033      	str	r3, [r6, #0]
 800aa48:	3243      	adds	r2, #67	; 0x43
 800aa4a:	7812      	ldrb	r2, [r2, #0]
 800aa4c:	2a00      	cmp	r2, #0
 800aa4e:	d001      	beq.n	800aa54 <_printf_common+0x24>
 800aa50:	3301      	adds	r3, #1
 800aa52:	6033      	str	r3, [r6, #0]
 800aa54:	6823      	ldr	r3, [r4, #0]
 800aa56:	069b      	lsls	r3, r3, #26
 800aa58:	d502      	bpl.n	800aa60 <_printf_common+0x30>
 800aa5a:	6833      	ldr	r3, [r6, #0]
 800aa5c:	3302      	adds	r3, #2
 800aa5e:	6033      	str	r3, [r6, #0]
 800aa60:	6822      	ldr	r2, [r4, #0]
 800aa62:	2306      	movs	r3, #6
 800aa64:	0015      	movs	r5, r2
 800aa66:	401d      	ands	r5, r3
 800aa68:	421a      	tst	r2, r3
 800aa6a:	d027      	beq.n	800aabc <_printf_common+0x8c>
 800aa6c:	0023      	movs	r3, r4
 800aa6e:	3343      	adds	r3, #67	; 0x43
 800aa70:	781b      	ldrb	r3, [r3, #0]
 800aa72:	1e5a      	subs	r2, r3, #1
 800aa74:	4193      	sbcs	r3, r2
 800aa76:	6822      	ldr	r2, [r4, #0]
 800aa78:	0692      	lsls	r2, r2, #26
 800aa7a:	d430      	bmi.n	800aade <_printf_common+0xae>
 800aa7c:	0022      	movs	r2, r4
 800aa7e:	9901      	ldr	r1, [sp, #4]
 800aa80:	9800      	ldr	r0, [sp, #0]
 800aa82:	9d08      	ldr	r5, [sp, #32]
 800aa84:	3243      	adds	r2, #67	; 0x43
 800aa86:	47a8      	blx	r5
 800aa88:	3001      	adds	r0, #1
 800aa8a:	d025      	beq.n	800aad8 <_printf_common+0xa8>
 800aa8c:	2206      	movs	r2, #6
 800aa8e:	6823      	ldr	r3, [r4, #0]
 800aa90:	2500      	movs	r5, #0
 800aa92:	4013      	ands	r3, r2
 800aa94:	2b04      	cmp	r3, #4
 800aa96:	d105      	bne.n	800aaa4 <_printf_common+0x74>
 800aa98:	6833      	ldr	r3, [r6, #0]
 800aa9a:	68e5      	ldr	r5, [r4, #12]
 800aa9c:	1aed      	subs	r5, r5, r3
 800aa9e:	43eb      	mvns	r3, r5
 800aaa0:	17db      	asrs	r3, r3, #31
 800aaa2:	401d      	ands	r5, r3
 800aaa4:	68a3      	ldr	r3, [r4, #8]
 800aaa6:	6922      	ldr	r2, [r4, #16]
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	dd01      	ble.n	800aab0 <_printf_common+0x80>
 800aaac:	1a9b      	subs	r3, r3, r2
 800aaae:	18ed      	adds	r5, r5, r3
 800aab0:	2600      	movs	r6, #0
 800aab2:	42b5      	cmp	r5, r6
 800aab4:	d120      	bne.n	800aaf8 <_printf_common+0xc8>
 800aab6:	2000      	movs	r0, #0
 800aab8:	e010      	b.n	800aadc <_printf_common+0xac>
 800aaba:	3501      	adds	r5, #1
 800aabc:	68e3      	ldr	r3, [r4, #12]
 800aabe:	6832      	ldr	r2, [r6, #0]
 800aac0:	1a9b      	subs	r3, r3, r2
 800aac2:	42ab      	cmp	r3, r5
 800aac4:	ddd2      	ble.n	800aa6c <_printf_common+0x3c>
 800aac6:	0022      	movs	r2, r4
 800aac8:	2301      	movs	r3, #1
 800aaca:	9901      	ldr	r1, [sp, #4]
 800aacc:	9800      	ldr	r0, [sp, #0]
 800aace:	9f08      	ldr	r7, [sp, #32]
 800aad0:	3219      	adds	r2, #25
 800aad2:	47b8      	blx	r7
 800aad4:	3001      	adds	r0, #1
 800aad6:	d1f0      	bne.n	800aaba <_printf_common+0x8a>
 800aad8:	2001      	movs	r0, #1
 800aada:	4240      	negs	r0, r0
 800aadc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aade:	2030      	movs	r0, #48	; 0x30
 800aae0:	18e1      	adds	r1, r4, r3
 800aae2:	3143      	adds	r1, #67	; 0x43
 800aae4:	7008      	strb	r0, [r1, #0]
 800aae6:	0021      	movs	r1, r4
 800aae8:	1c5a      	adds	r2, r3, #1
 800aaea:	3145      	adds	r1, #69	; 0x45
 800aaec:	7809      	ldrb	r1, [r1, #0]
 800aaee:	18a2      	adds	r2, r4, r2
 800aaf0:	3243      	adds	r2, #67	; 0x43
 800aaf2:	3302      	adds	r3, #2
 800aaf4:	7011      	strb	r1, [r2, #0]
 800aaf6:	e7c1      	b.n	800aa7c <_printf_common+0x4c>
 800aaf8:	0022      	movs	r2, r4
 800aafa:	2301      	movs	r3, #1
 800aafc:	9901      	ldr	r1, [sp, #4]
 800aafe:	9800      	ldr	r0, [sp, #0]
 800ab00:	9f08      	ldr	r7, [sp, #32]
 800ab02:	321a      	adds	r2, #26
 800ab04:	47b8      	blx	r7
 800ab06:	3001      	adds	r0, #1
 800ab08:	d0e6      	beq.n	800aad8 <_printf_common+0xa8>
 800ab0a:	3601      	adds	r6, #1
 800ab0c:	e7d1      	b.n	800aab2 <_printf_common+0x82>
	...

0800ab10 <_printf_i>:
 800ab10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab12:	b08b      	sub	sp, #44	; 0x2c
 800ab14:	9206      	str	r2, [sp, #24]
 800ab16:	000a      	movs	r2, r1
 800ab18:	3243      	adds	r2, #67	; 0x43
 800ab1a:	9307      	str	r3, [sp, #28]
 800ab1c:	9005      	str	r0, [sp, #20]
 800ab1e:	9204      	str	r2, [sp, #16]
 800ab20:	7e0a      	ldrb	r2, [r1, #24]
 800ab22:	000c      	movs	r4, r1
 800ab24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab26:	2a78      	cmp	r2, #120	; 0x78
 800ab28:	d809      	bhi.n	800ab3e <_printf_i+0x2e>
 800ab2a:	2a62      	cmp	r2, #98	; 0x62
 800ab2c:	d80b      	bhi.n	800ab46 <_printf_i+0x36>
 800ab2e:	2a00      	cmp	r2, #0
 800ab30:	d100      	bne.n	800ab34 <_printf_i+0x24>
 800ab32:	e0be      	b.n	800acb2 <_printf_i+0x1a2>
 800ab34:	497c      	ldr	r1, [pc, #496]	; (800ad28 <_printf_i+0x218>)
 800ab36:	9103      	str	r1, [sp, #12]
 800ab38:	2a58      	cmp	r2, #88	; 0x58
 800ab3a:	d100      	bne.n	800ab3e <_printf_i+0x2e>
 800ab3c:	e093      	b.n	800ac66 <_printf_i+0x156>
 800ab3e:	0026      	movs	r6, r4
 800ab40:	3642      	adds	r6, #66	; 0x42
 800ab42:	7032      	strb	r2, [r6, #0]
 800ab44:	e022      	b.n	800ab8c <_printf_i+0x7c>
 800ab46:	0010      	movs	r0, r2
 800ab48:	3863      	subs	r0, #99	; 0x63
 800ab4a:	2815      	cmp	r0, #21
 800ab4c:	d8f7      	bhi.n	800ab3e <_printf_i+0x2e>
 800ab4e:	f7f5 fadb 	bl	8000108 <__gnu_thumb1_case_shi>
 800ab52:	0016      	.short	0x0016
 800ab54:	fff6001f 	.word	0xfff6001f
 800ab58:	fff6fff6 	.word	0xfff6fff6
 800ab5c:	001ffff6 	.word	0x001ffff6
 800ab60:	fff6fff6 	.word	0xfff6fff6
 800ab64:	fff6fff6 	.word	0xfff6fff6
 800ab68:	003600a3 	.word	0x003600a3
 800ab6c:	fff60083 	.word	0xfff60083
 800ab70:	00b4fff6 	.word	0x00b4fff6
 800ab74:	0036fff6 	.word	0x0036fff6
 800ab78:	fff6fff6 	.word	0xfff6fff6
 800ab7c:	0087      	.short	0x0087
 800ab7e:	0026      	movs	r6, r4
 800ab80:	681a      	ldr	r2, [r3, #0]
 800ab82:	3642      	adds	r6, #66	; 0x42
 800ab84:	1d11      	adds	r1, r2, #4
 800ab86:	6019      	str	r1, [r3, #0]
 800ab88:	6813      	ldr	r3, [r2, #0]
 800ab8a:	7033      	strb	r3, [r6, #0]
 800ab8c:	2301      	movs	r3, #1
 800ab8e:	e0a2      	b.n	800acd6 <_printf_i+0x1c6>
 800ab90:	6818      	ldr	r0, [r3, #0]
 800ab92:	6809      	ldr	r1, [r1, #0]
 800ab94:	1d02      	adds	r2, r0, #4
 800ab96:	060d      	lsls	r5, r1, #24
 800ab98:	d50b      	bpl.n	800abb2 <_printf_i+0xa2>
 800ab9a:	6805      	ldr	r5, [r0, #0]
 800ab9c:	601a      	str	r2, [r3, #0]
 800ab9e:	2d00      	cmp	r5, #0
 800aba0:	da03      	bge.n	800abaa <_printf_i+0x9a>
 800aba2:	232d      	movs	r3, #45	; 0x2d
 800aba4:	9a04      	ldr	r2, [sp, #16]
 800aba6:	426d      	negs	r5, r5
 800aba8:	7013      	strb	r3, [r2, #0]
 800abaa:	4b5f      	ldr	r3, [pc, #380]	; (800ad28 <_printf_i+0x218>)
 800abac:	270a      	movs	r7, #10
 800abae:	9303      	str	r3, [sp, #12]
 800abb0:	e01b      	b.n	800abea <_printf_i+0xda>
 800abb2:	6805      	ldr	r5, [r0, #0]
 800abb4:	601a      	str	r2, [r3, #0]
 800abb6:	0649      	lsls	r1, r1, #25
 800abb8:	d5f1      	bpl.n	800ab9e <_printf_i+0x8e>
 800abba:	b22d      	sxth	r5, r5
 800abbc:	e7ef      	b.n	800ab9e <_printf_i+0x8e>
 800abbe:	680d      	ldr	r5, [r1, #0]
 800abc0:	6819      	ldr	r1, [r3, #0]
 800abc2:	1d08      	adds	r0, r1, #4
 800abc4:	6018      	str	r0, [r3, #0]
 800abc6:	062e      	lsls	r6, r5, #24
 800abc8:	d501      	bpl.n	800abce <_printf_i+0xbe>
 800abca:	680d      	ldr	r5, [r1, #0]
 800abcc:	e003      	b.n	800abd6 <_printf_i+0xc6>
 800abce:	066d      	lsls	r5, r5, #25
 800abd0:	d5fb      	bpl.n	800abca <_printf_i+0xba>
 800abd2:	680d      	ldr	r5, [r1, #0]
 800abd4:	b2ad      	uxth	r5, r5
 800abd6:	4b54      	ldr	r3, [pc, #336]	; (800ad28 <_printf_i+0x218>)
 800abd8:	2708      	movs	r7, #8
 800abda:	9303      	str	r3, [sp, #12]
 800abdc:	2a6f      	cmp	r2, #111	; 0x6f
 800abde:	d000      	beq.n	800abe2 <_printf_i+0xd2>
 800abe0:	3702      	adds	r7, #2
 800abe2:	0023      	movs	r3, r4
 800abe4:	2200      	movs	r2, #0
 800abe6:	3343      	adds	r3, #67	; 0x43
 800abe8:	701a      	strb	r2, [r3, #0]
 800abea:	6863      	ldr	r3, [r4, #4]
 800abec:	60a3      	str	r3, [r4, #8]
 800abee:	2b00      	cmp	r3, #0
 800abf0:	db03      	blt.n	800abfa <_printf_i+0xea>
 800abf2:	2104      	movs	r1, #4
 800abf4:	6822      	ldr	r2, [r4, #0]
 800abf6:	438a      	bics	r2, r1
 800abf8:	6022      	str	r2, [r4, #0]
 800abfa:	2d00      	cmp	r5, #0
 800abfc:	d102      	bne.n	800ac04 <_printf_i+0xf4>
 800abfe:	9e04      	ldr	r6, [sp, #16]
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d00c      	beq.n	800ac1e <_printf_i+0x10e>
 800ac04:	9e04      	ldr	r6, [sp, #16]
 800ac06:	0028      	movs	r0, r5
 800ac08:	0039      	movs	r1, r7
 800ac0a:	f7f5 fb0d 	bl	8000228 <__aeabi_uidivmod>
 800ac0e:	9b03      	ldr	r3, [sp, #12]
 800ac10:	3e01      	subs	r6, #1
 800ac12:	5c5b      	ldrb	r3, [r3, r1]
 800ac14:	7033      	strb	r3, [r6, #0]
 800ac16:	002b      	movs	r3, r5
 800ac18:	0005      	movs	r5, r0
 800ac1a:	429f      	cmp	r7, r3
 800ac1c:	d9f3      	bls.n	800ac06 <_printf_i+0xf6>
 800ac1e:	2f08      	cmp	r7, #8
 800ac20:	d109      	bne.n	800ac36 <_printf_i+0x126>
 800ac22:	6823      	ldr	r3, [r4, #0]
 800ac24:	07db      	lsls	r3, r3, #31
 800ac26:	d506      	bpl.n	800ac36 <_printf_i+0x126>
 800ac28:	6862      	ldr	r2, [r4, #4]
 800ac2a:	6923      	ldr	r3, [r4, #16]
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	dc02      	bgt.n	800ac36 <_printf_i+0x126>
 800ac30:	2330      	movs	r3, #48	; 0x30
 800ac32:	3e01      	subs	r6, #1
 800ac34:	7033      	strb	r3, [r6, #0]
 800ac36:	9b04      	ldr	r3, [sp, #16]
 800ac38:	1b9b      	subs	r3, r3, r6
 800ac3a:	6123      	str	r3, [r4, #16]
 800ac3c:	9b07      	ldr	r3, [sp, #28]
 800ac3e:	0021      	movs	r1, r4
 800ac40:	9300      	str	r3, [sp, #0]
 800ac42:	9805      	ldr	r0, [sp, #20]
 800ac44:	9b06      	ldr	r3, [sp, #24]
 800ac46:	aa09      	add	r2, sp, #36	; 0x24
 800ac48:	f7ff fef2 	bl	800aa30 <_printf_common>
 800ac4c:	3001      	adds	r0, #1
 800ac4e:	d147      	bne.n	800ace0 <_printf_i+0x1d0>
 800ac50:	2001      	movs	r0, #1
 800ac52:	4240      	negs	r0, r0
 800ac54:	b00b      	add	sp, #44	; 0x2c
 800ac56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac58:	2220      	movs	r2, #32
 800ac5a:	6809      	ldr	r1, [r1, #0]
 800ac5c:	430a      	orrs	r2, r1
 800ac5e:	6022      	str	r2, [r4, #0]
 800ac60:	2278      	movs	r2, #120	; 0x78
 800ac62:	4932      	ldr	r1, [pc, #200]	; (800ad2c <_printf_i+0x21c>)
 800ac64:	9103      	str	r1, [sp, #12]
 800ac66:	0021      	movs	r1, r4
 800ac68:	3145      	adds	r1, #69	; 0x45
 800ac6a:	700a      	strb	r2, [r1, #0]
 800ac6c:	6819      	ldr	r1, [r3, #0]
 800ac6e:	6822      	ldr	r2, [r4, #0]
 800ac70:	c920      	ldmia	r1!, {r5}
 800ac72:	0610      	lsls	r0, r2, #24
 800ac74:	d402      	bmi.n	800ac7c <_printf_i+0x16c>
 800ac76:	0650      	lsls	r0, r2, #25
 800ac78:	d500      	bpl.n	800ac7c <_printf_i+0x16c>
 800ac7a:	b2ad      	uxth	r5, r5
 800ac7c:	6019      	str	r1, [r3, #0]
 800ac7e:	07d3      	lsls	r3, r2, #31
 800ac80:	d502      	bpl.n	800ac88 <_printf_i+0x178>
 800ac82:	2320      	movs	r3, #32
 800ac84:	4313      	orrs	r3, r2
 800ac86:	6023      	str	r3, [r4, #0]
 800ac88:	2710      	movs	r7, #16
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	d1a9      	bne.n	800abe2 <_printf_i+0xd2>
 800ac8e:	2220      	movs	r2, #32
 800ac90:	6823      	ldr	r3, [r4, #0]
 800ac92:	4393      	bics	r3, r2
 800ac94:	6023      	str	r3, [r4, #0]
 800ac96:	e7a4      	b.n	800abe2 <_printf_i+0xd2>
 800ac98:	681a      	ldr	r2, [r3, #0]
 800ac9a:	680d      	ldr	r5, [r1, #0]
 800ac9c:	1d10      	adds	r0, r2, #4
 800ac9e:	6949      	ldr	r1, [r1, #20]
 800aca0:	6018      	str	r0, [r3, #0]
 800aca2:	6813      	ldr	r3, [r2, #0]
 800aca4:	062e      	lsls	r6, r5, #24
 800aca6:	d501      	bpl.n	800acac <_printf_i+0x19c>
 800aca8:	6019      	str	r1, [r3, #0]
 800acaa:	e002      	b.n	800acb2 <_printf_i+0x1a2>
 800acac:	066d      	lsls	r5, r5, #25
 800acae:	d5fb      	bpl.n	800aca8 <_printf_i+0x198>
 800acb0:	8019      	strh	r1, [r3, #0]
 800acb2:	2300      	movs	r3, #0
 800acb4:	9e04      	ldr	r6, [sp, #16]
 800acb6:	6123      	str	r3, [r4, #16]
 800acb8:	e7c0      	b.n	800ac3c <_printf_i+0x12c>
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	1d11      	adds	r1, r2, #4
 800acbe:	6019      	str	r1, [r3, #0]
 800acc0:	6816      	ldr	r6, [r2, #0]
 800acc2:	2100      	movs	r1, #0
 800acc4:	0030      	movs	r0, r6
 800acc6:	6862      	ldr	r2, [r4, #4]
 800acc8:	f000 f998 	bl	800affc <memchr>
 800accc:	2800      	cmp	r0, #0
 800acce:	d001      	beq.n	800acd4 <_printf_i+0x1c4>
 800acd0:	1b80      	subs	r0, r0, r6
 800acd2:	6060      	str	r0, [r4, #4]
 800acd4:	6863      	ldr	r3, [r4, #4]
 800acd6:	6123      	str	r3, [r4, #16]
 800acd8:	2300      	movs	r3, #0
 800acda:	9a04      	ldr	r2, [sp, #16]
 800acdc:	7013      	strb	r3, [r2, #0]
 800acde:	e7ad      	b.n	800ac3c <_printf_i+0x12c>
 800ace0:	0032      	movs	r2, r6
 800ace2:	6923      	ldr	r3, [r4, #16]
 800ace4:	9906      	ldr	r1, [sp, #24]
 800ace6:	9805      	ldr	r0, [sp, #20]
 800ace8:	9d07      	ldr	r5, [sp, #28]
 800acea:	47a8      	blx	r5
 800acec:	3001      	adds	r0, #1
 800acee:	d0af      	beq.n	800ac50 <_printf_i+0x140>
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	079b      	lsls	r3, r3, #30
 800acf4:	d415      	bmi.n	800ad22 <_printf_i+0x212>
 800acf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acf8:	68e0      	ldr	r0, [r4, #12]
 800acfa:	4298      	cmp	r0, r3
 800acfc:	daaa      	bge.n	800ac54 <_printf_i+0x144>
 800acfe:	0018      	movs	r0, r3
 800ad00:	e7a8      	b.n	800ac54 <_printf_i+0x144>
 800ad02:	0022      	movs	r2, r4
 800ad04:	2301      	movs	r3, #1
 800ad06:	9906      	ldr	r1, [sp, #24]
 800ad08:	9805      	ldr	r0, [sp, #20]
 800ad0a:	9e07      	ldr	r6, [sp, #28]
 800ad0c:	3219      	adds	r2, #25
 800ad0e:	47b0      	blx	r6
 800ad10:	3001      	adds	r0, #1
 800ad12:	d09d      	beq.n	800ac50 <_printf_i+0x140>
 800ad14:	3501      	adds	r5, #1
 800ad16:	68e3      	ldr	r3, [r4, #12]
 800ad18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ad1a:	1a9b      	subs	r3, r3, r2
 800ad1c:	42ab      	cmp	r3, r5
 800ad1e:	dcf0      	bgt.n	800ad02 <_printf_i+0x1f2>
 800ad20:	e7e9      	b.n	800acf6 <_printf_i+0x1e6>
 800ad22:	2500      	movs	r5, #0
 800ad24:	e7f7      	b.n	800ad16 <_printf_i+0x206>
 800ad26:	46c0      	nop			; (mov r8, r8)
 800ad28:	0800b311 	.word	0x0800b311
 800ad2c:	0800b322 	.word	0x0800b322

0800ad30 <__sflush_r>:
 800ad30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad32:	898b      	ldrh	r3, [r1, #12]
 800ad34:	0005      	movs	r5, r0
 800ad36:	000c      	movs	r4, r1
 800ad38:	071a      	lsls	r2, r3, #28
 800ad3a:	d45c      	bmi.n	800adf6 <__sflush_r+0xc6>
 800ad3c:	684a      	ldr	r2, [r1, #4]
 800ad3e:	2a00      	cmp	r2, #0
 800ad40:	dc04      	bgt.n	800ad4c <__sflush_r+0x1c>
 800ad42:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800ad44:	2a00      	cmp	r2, #0
 800ad46:	dc01      	bgt.n	800ad4c <__sflush_r+0x1c>
 800ad48:	2000      	movs	r0, #0
 800ad4a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad4c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad4e:	2f00      	cmp	r7, #0
 800ad50:	d0fa      	beq.n	800ad48 <__sflush_r+0x18>
 800ad52:	2200      	movs	r2, #0
 800ad54:	2080      	movs	r0, #128	; 0x80
 800ad56:	682e      	ldr	r6, [r5, #0]
 800ad58:	602a      	str	r2, [r5, #0]
 800ad5a:	001a      	movs	r2, r3
 800ad5c:	0140      	lsls	r0, r0, #5
 800ad5e:	6a21      	ldr	r1, [r4, #32]
 800ad60:	4002      	ands	r2, r0
 800ad62:	4203      	tst	r3, r0
 800ad64:	d034      	beq.n	800add0 <__sflush_r+0xa0>
 800ad66:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ad68:	89a3      	ldrh	r3, [r4, #12]
 800ad6a:	075b      	lsls	r3, r3, #29
 800ad6c:	d506      	bpl.n	800ad7c <__sflush_r+0x4c>
 800ad6e:	6863      	ldr	r3, [r4, #4]
 800ad70:	1ac0      	subs	r0, r0, r3
 800ad72:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad74:	2b00      	cmp	r3, #0
 800ad76:	d001      	beq.n	800ad7c <__sflush_r+0x4c>
 800ad78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad7a:	1ac0      	subs	r0, r0, r3
 800ad7c:	0002      	movs	r2, r0
 800ad7e:	2300      	movs	r3, #0
 800ad80:	0028      	movs	r0, r5
 800ad82:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad84:	6a21      	ldr	r1, [r4, #32]
 800ad86:	47b8      	blx	r7
 800ad88:	89a2      	ldrh	r2, [r4, #12]
 800ad8a:	1c43      	adds	r3, r0, #1
 800ad8c:	d106      	bne.n	800ad9c <__sflush_r+0x6c>
 800ad8e:	6829      	ldr	r1, [r5, #0]
 800ad90:	291d      	cmp	r1, #29
 800ad92:	d82c      	bhi.n	800adee <__sflush_r+0xbe>
 800ad94:	4b2a      	ldr	r3, [pc, #168]	; (800ae40 <__sflush_r+0x110>)
 800ad96:	410b      	asrs	r3, r1
 800ad98:	07db      	lsls	r3, r3, #31
 800ad9a:	d428      	bmi.n	800adee <__sflush_r+0xbe>
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6063      	str	r3, [r4, #4]
 800ada0:	6923      	ldr	r3, [r4, #16]
 800ada2:	6023      	str	r3, [r4, #0]
 800ada4:	04d2      	lsls	r2, r2, #19
 800ada6:	d505      	bpl.n	800adb4 <__sflush_r+0x84>
 800ada8:	1c43      	adds	r3, r0, #1
 800adaa:	d102      	bne.n	800adb2 <__sflush_r+0x82>
 800adac:	682b      	ldr	r3, [r5, #0]
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d100      	bne.n	800adb4 <__sflush_r+0x84>
 800adb2:	6560      	str	r0, [r4, #84]	; 0x54
 800adb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800adb6:	602e      	str	r6, [r5, #0]
 800adb8:	2900      	cmp	r1, #0
 800adba:	d0c5      	beq.n	800ad48 <__sflush_r+0x18>
 800adbc:	0023      	movs	r3, r4
 800adbe:	3344      	adds	r3, #68	; 0x44
 800adc0:	4299      	cmp	r1, r3
 800adc2:	d002      	beq.n	800adca <__sflush_r+0x9a>
 800adc4:	0028      	movs	r0, r5
 800adc6:	f7ff fa8f 	bl	800a2e8 <_free_r>
 800adca:	2000      	movs	r0, #0
 800adcc:	6360      	str	r0, [r4, #52]	; 0x34
 800adce:	e7bc      	b.n	800ad4a <__sflush_r+0x1a>
 800add0:	2301      	movs	r3, #1
 800add2:	0028      	movs	r0, r5
 800add4:	47b8      	blx	r7
 800add6:	1c43      	adds	r3, r0, #1
 800add8:	d1c6      	bne.n	800ad68 <__sflush_r+0x38>
 800adda:	682b      	ldr	r3, [r5, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d0c3      	beq.n	800ad68 <__sflush_r+0x38>
 800ade0:	2b1d      	cmp	r3, #29
 800ade2:	d001      	beq.n	800ade8 <__sflush_r+0xb8>
 800ade4:	2b16      	cmp	r3, #22
 800ade6:	d101      	bne.n	800adec <__sflush_r+0xbc>
 800ade8:	602e      	str	r6, [r5, #0]
 800adea:	e7ad      	b.n	800ad48 <__sflush_r+0x18>
 800adec:	89a2      	ldrh	r2, [r4, #12]
 800adee:	2340      	movs	r3, #64	; 0x40
 800adf0:	4313      	orrs	r3, r2
 800adf2:	81a3      	strh	r3, [r4, #12]
 800adf4:	e7a9      	b.n	800ad4a <__sflush_r+0x1a>
 800adf6:	690e      	ldr	r6, [r1, #16]
 800adf8:	2e00      	cmp	r6, #0
 800adfa:	d0a5      	beq.n	800ad48 <__sflush_r+0x18>
 800adfc:	680f      	ldr	r7, [r1, #0]
 800adfe:	600e      	str	r6, [r1, #0]
 800ae00:	1bba      	subs	r2, r7, r6
 800ae02:	9201      	str	r2, [sp, #4]
 800ae04:	2200      	movs	r2, #0
 800ae06:	079b      	lsls	r3, r3, #30
 800ae08:	d100      	bne.n	800ae0c <__sflush_r+0xdc>
 800ae0a:	694a      	ldr	r2, [r1, #20]
 800ae0c:	60a2      	str	r2, [r4, #8]
 800ae0e:	9b01      	ldr	r3, [sp, #4]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	dd99      	ble.n	800ad48 <__sflush_r+0x18>
 800ae14:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ae16:	0032      	movs	r2, r6
 800ae18:	001f      	movs	r7, r3
 800ae1a:	0028      	movs	r0, r5
 800ae1c:	9b01      	ldr	r3, [sp, #4]
 800ae1e:	6a21      	ldr	r1, [r4, #32]
 800ae20:	47b8      	blx	r7
 800ae22:	2800      	cmp	r0, #0
 800ae24:	dc06      	bgt.n	800ae34 <__sflush_r+0x104>
 800ae26:	2340      	movs	r3, #64	; 0x40
 800ae28:	2001      	movs	r0, #1
 800ae2a:	89a2      	ldrh	r2, [r4, #12]
 800ae2c:	4240      	negs	r0, r0
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	81a3      	strh	r3, [r4, #12]
 800ae32:	e78a      	b.n	800ad4a <__sflush_r+0x1a>
 800ae34:	9b01      	ldr	r3, [sp, #4]
 800ae36:	1836      	adds	r6, r6, r0
 800ae38:	1a1b      	subs	r3, r3, r0
 800ae3a:	9301      	str	r3, [sp, #4]
 800ae3c:	e7e7      	b.n	800ae0e <__sflush_r+0xde>
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	dfbffffe 	.word	0xdfbffffe

0800ae44 <_fflush_r>:
 800ae44:	690b      	ldr	r3, [r1, #16]
 800ae46:	b570      	push	{r4, r5, r6, lr}
 800ae48:	0005      	movs	r5, r0
 800ae4a:	000c      	movs	r4, r1
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d102      	bne.n	800ae56 <_fflush_r+0x12>
 800ae50:	2500      	movs	r5, #0
 800ae52:	0028      	movs	r0, r5
 800ae54:	bd70      	pop	{r4, r5, r6, pc}
 800ae56:	2800      	cmp	r0, #0
 800ae58:	d004      	beq.n	800ae64 <_fflush_r+0x20>
 800ae5a:	6a03      	ldr	r3, [r0, #32]
 800ae5c:	2b00      	cmp	r3, #0
 800ae5e:	d101      	bne.n	800ae64 <_fflush_r+0x20>
 800ae60:	f7fe ffec 	bl	8009e3c <__sinit>
 800ae64:	220c      	movs	r2, #12
 800ae66:	5ea3      	ldrsh	r3, [r4, r2]
 800ae68:	2b00      	cmp	r3, #0
 800ae6a:	d0f1      	beq.n	800ae50 <_fflush_r+0xc>
 800ae6c:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ae6e:	07d2      	lsls	r2, r2, #31
 800ae70:	d404      	bmi.n	800ae7c <_fflush_r+0x38>
 800ae72:	059b      	lsls	r3, r3, #22
 800ae74:	d402      	bmi.n	800ae7c <_fflush_r+0x38>
 800ae76:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae78:	f7ff fa2a 	bl	800a2d0 <__retarget_lock_acquire_recursive>
 800ae7c:	0028      	movs	r0, r5
 800ae7e:	0021      	movs	r1, r4
 800ae80:	f7ff ff56 	bl	800ad30 <__sflush_r>
 800ae84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae86:	0005      	movs	r5, r0
 800ae88:	07db      	lsls	r3, r3, #31
 800ae8a:	d4e2      	bmi.n	800ae52 <_fflush_r+0xe>
 800ae8c:	89a3      	ldrh	r3, [r4, #12]
 800ae8e:	059b      	lsls	r3, r3, #22
 800ae90:	d4df      	bmi.n	800ae52 <_fflush_r+0xe>
 800ae92:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae94:	f7ff fa1d 	bl	800a2d2 <__retarget_lock_release_recursive>
 800ae98:	e7db      	b.n	800ae52 <_fflush_r+0xe>
	...

0800ae9c <__swhatbuf_r>:
 800ae9c:	b570      	push	{r4, r5, r6, lr}
 800ae9e:	000e      	movs	r6, r1
 800aea0:	001d      	movs	r5, r3
 800aea2:	230e      	movs	r3, #14
 800aea4:	5ec9      	ldrsh	r1, [r1, r3]
 800aea6:	0014      	movs	r4, r2
 800aea8:	b096      	sub	sp, #88	; 0x58
 800aeaa:	2900      	cmp	r1, #0
 800aeac:	da0c      	bge.n	800aec8 <__swhatbuf_r+0x2c>
 800aeae:	89b2      	ldrh	r2, [r6, #12]
 800aeb0:	2380      	movs	r3, #128	; 0x80
 800aeb2:	0011      	movs	r1, r2
 800aeb4:	4019      	ands	r1, r3
 800aeb6:	421a      	tst	r2, r3
 800aeb8:	d013      	beq.n	800aee2 <__swhatbuf_r+0x46>
 800aeba:	2100      	movs	r1, #0
 800aebc:	3b40      	subs	r3, #64	; 0x40
 800aebe:	2000      	movs	r0, #0
 800aec0:	6029      	str	r1, [r5, #0]
 800aec2:	6023      	str	r3, [r4, #0]
 800aec4:	b016      	add	sp, #88	; 0x58
 800aec6:	bd70      	pop	{r4, r5, r6, pc}
 800aec8:	466a      	mov	r2, sp
 800aeca:	f000 f861 	bl	800af90 <_fstat_r>
 800aece:	2800      	cmp	r0, #0
 800aed0:	dbed      	blt.n	800aeae <__swhatbuf_r+0x12>
 800aed2:	23f0      	movs	r3, #240	; 0xf0
 800aed4:	9901      	ldr	r1, [sp, #4]
 800aed6:	021b      	lsls	r3, r3, #8
 800aed8:	4019      	ands	r1, r3
 800aeda:	4b03      	ldr	r3, [pc, #12]	; (800aee8 <__swhatbuf_r+0x4c>)
 800aedc:	18c9      	adds	r1, r1, r3
 800aede:	424b      	negs	r3, r1
 800aee0:	4159      	adcs	r1, r3
 800aee2:	2380      	movs	r3, #128	; 0x80
 800aee4:	00db      	lsls	r3, r3, #3
 800aee6:	e7ea      	b.n	800aebe <__swhatbuf_r+0x22>
 800aee8:	ffffe000 	.word	0xffffe000

0800aeec <__smakebuf_r>:
 800aeec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aeee:	2602      	movs	r6, #2
 800aef0:	898b      	ldrh	r3, [r1, #12]
 800aef2:	0005      	movs	r5, r0
 800aef4:	000c      	movs	r4, r1
 800aef6:	4233      	tst	r3, r6
 800aef8:	d006      	beq.n	800af08 <__smakebuf_r+0x1c>
 800aefa:	0023      	movs	r3, r4
 800aefc:	3347      	adds	r3, #71	; 0x47
 800aefe:	6023      	str	r3, [r4, #0]
 800af00:	6123      	str	r3, [r4, #16]
 800af02:	2301      	movs	r3, #1
 800af04:	6163      	str	r3, [r4, #20]
 800af06:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800af08:	466a      	mov	r2, sp
 800af0a:	ab01      	add	r3, sp, #4
 800af0c:	f7ff ffc6 	bl	800ae9c <__swhatbuf_r>
 800af10:	9900      	ldr	r1, [sp, #0]
 800af12:	0007      	movs	r7, r0
 800af14:	0028      	movs	r0, r5
 800af16:	f7ff fa53 	bl	800a3c0 <_malloc_r>
 800af1a:	2800      	cmp	r0, #0
 800af1c:	d108      	bne.n	800af30 <__smakebuf_r+0x44>
 800af1e:	220c      	movs	r2, #12
 800af20:	5ea3      	ldrsh	r3, [r4, r2]
 800af22:	059a      	lsls	r2, r3, #22
 800af24:	d4ef      	bmi.n	800af06 <__smakebuf_r+0x1a>
 800af26:	2203      	movs	r2, #3
 800af28:	4393      	bics	r3, r2
 800af2a:	431e      	orrs	r6, r3
 800af2c:	81a6      	strh	r6, [r4, #12]
 800af2e:	e7e4      	b.n	800aefa <__smakebuf_r+0xe>
 800af30:	2380      	movs	r3, #128	; 0x80
 800af32:	89a2      	ldrh	r2, [r4, #12]
 800af34:	6020      	str	r0, [r4, #0]
 800af36:	4313      	orrs	r3, r2
 800af38:	81a3      	strh	r3, [r4, #12]
 800af3a:	9b00      	ldr	r3, [sp, #0]
 800af3c:	6120      	str	r0, [r4, #16]
 800af3e:	6163      	str	r3, [r4, #20]
 800af40:	9b01      	ldr	r3, [sp, #4]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d00c      	beq.n	800af60 <__smakebuf_r+0x74>
 800af46:	0028      	movs	r0, r5
 800af48:	230e      	movs	r3, #14
 800af4a:	5ee1      	ldrsh	r1, [r4, r3]
 800af4c:	f000 f832 	bl	800afb4 <_isatty_r>
 800af50:	2800      	cmp	r0, #0
 800af52:	d005      	beq.n	800af60 <__smakebuf_r+0x74>
 800af54:	2303      	movs	r3, #3
 800af56:	89a2      	ldrh	r2, [r4, #12]
 800af58:	439a      	bics	r2, r3
 800af5a:	3b02      	subs	r3, #2
 800af5c:	4313      	orrs	r3, r2
 800af5e:	81a3      	strh	r3, [r4, #12]
 800af60:	89a3      	ldrh	r3, [r4, #12]
 800af62:	433b      	orrs	r3, r7
 800af64:	81a3      	strh	r3, [r4, #12]
 800af66:	e7ce      	b.n	800af06 <__smakebuf_r+0x1a>

0800af68 <memmove>:
 800af68:	b510      	push	{r4, lr}
 800af6a:	4288      	cmp	r0, r1
 800af6c:	d902      	bls.n	800af74 <memmove+0xc>
 800af6e:	188b      	adds	r3, r1, r2
 800af70:	4298      	cmp	r0, r3
 800af72:	d303      	bcc.n	800af7c <memmove+0x14>
 800af74:	2300      	movs	r3, #0
 800af76:	e007      	b.n	800af88 <memmove+0x20>
 800af78:	5c8b      	ldrb	r3, [r1, r2]
 800af7a:	5483      	strb	r3, [r0, r2]
 800af7c:	3a01      	subs	r2, #1
 800af7e:	d2fb      	bcs.n	800af78 <memmove+0x10>
 800af80:	bd10      	pop	{r4, pc}
 800af82:	5ccc      	ldrb	r4, [r1, r3]
 800af84:	54c4      	strb	r4, [r0, r3]
 800af86:	3301      	adds	r3, #1
 800af88:	429a      	cmp	r2, r3
 800af8a:	d1fa      	bne.n	800af82 <memmove+0x1a>
 800af8c:	e7f8      	b.n	800af80 <memmove+0x18>
	...

0800af90 <_fstat_r>:
 800af90:	2300      	movs	r3, #0
 800af92:	b570      	push	{r4, r5, r6, lr}
 800af94:	4d06      	ldr	r5, [pc, #24]	; (800afb0 <_fstat_r+0x20>)
 800af96:	0004      	movs	r4, r0
 800af98:	0008      	movs	r0, r1
 800af9a:	0011      	movs	r1, r2
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	f7f6 fc44 	bl	800182a <_fstat>
 800afa2:	1c43      	adds	r3, r0, #1
 800afa4:	d103      	bne.n	800afae <_fstat_r+0x1e>
 800afa6:	682b      	ldr	r3, [r5, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d000      	beq.n	800afae <_fstat_r+0x1e>
 800afac:	6023      	str	r3, [r4, #0]
 800afae:	bd70      	pop	{r4, r5, r6, pc}
 800afb0:	2000866c 	.word	0x2000866c

0800afb4 <_isatty_r>:
 800afb4:	2300      	movs	r3, #0
 800afb6:	b570      	push	{r4, r5, r6, lr}
 800afb8:	4d06      	ldr	r5, [pc, #24]	; (800afd4 <_isatty_r+0x20>)
 800afba:	0004      	movs	r4, r0
 800afbc:	0008      	movs	r0, r1
 800afbe:	602b      	str	r3, [r5, #0]
 800afc0:	f7f6 fc41 	bl	8001846 <_isatty>
 800afc4:	1c43      	adds	r3, r0, #1
 800afc6:	d103      	bne.n	800afd0 <_isatty_r+0x1c>
 800afc8:	682b      	ldr	r3, [r5, #0]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d000      	beq.n	800afd0 <_isatty_r+0x1c>
 800afce:	6023      	str	r3, [r4, #0]
 800afd0:	bd70      	pop	{r4, r5, r6, pc}
 800afd2:	46c0      	nop			; (mov r8, r8)
 800afd4:	2000866c 	.word	0x2000866c

0800afd8 <_sbrk_r>:
 800afd8:	2300      	movs	r3, #0
 800afda:	b570      	push	{r4, r5, r6, lr}
 800afdc:	4d06      	ldr	r5, [pc, #24]	; (800aff8 <_sbrk_r+0x20>)
 800afde:	0004      	movs	r4, r0
 800afe0:	0008      	movs	r0, r1
 800afe2:	602b      	str	r3, [r5, #0]
 800afe4:	f7f6 fc44 	bl	8001870 <_sbrk>
 800afe8:	1c43      	adds	r3, r0, #1
 800afea:	d103      	bne.n	800aff4 <_sbrk_r+0x1c>
 800afec:	682b      	ldr	r3, [r5, #0]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d000      	beq.n	800aff4 <_sbrk_r+0x1c>
 800aff2:	6023      	str	r3, [r4, #0]
 800aff4:	bd70      	pop	{r4, r5, r6, pc}
 800aff6:	46c0      	nop			; (mov r8, r8)
 800aff8:	2000866c 	.word	0x2000866c

0800affc <memchr>:
 800affc:	b2c9      	uxtb	r1, r1
 800affe:	1882      	adds	r2, r0, r2
 800b000:	4290      	cmp	r0, r2
 800b002:	d101      	bne.n	800b008 <memchr+0xc>
 800b004:	2000      	movs	r0, #0
 800b006:	4770      	bx	lr
 800b008:	7803      	ldrb	r3, [r0, #0]
 800b00a:	428b      	cmp	r3, r1
 800b00c:	d0fb      	beq.n	800b006 <memchr+0xa>
 800b00e:	3001      	adds	r0, #1
 800b010:	e7f6      	b.n	800b000 <memchr+0x4>

0800b012 <_realloc_r>:
 800b012:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b014:	0007      	movs	r7, r0
 800b016:	000e      	movs	r6, r1
 800b018:	0014      	movs	r4, r2
 800b01a:	2900      	cmp	r1, #0
 800b01c:	d105      	bne.n	800b02a <_realloc_r+0x18>
 800b01e:	0011      	movs	r1, r2
 800b020:	f7ff f9ce 	bl	800a3c0 <_malloc_r>
 800b024:	0005      	movs	r5, r0
 800b026:	0028      	movs	r0, r5
 800b028:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b02a:	2a00      	cmp	r2, #0
 800b02c:	d103      	bne.n	800b036 <_realloc_r+0x24>
 800b02e:	f7ff f95b 	bl	800a2e8 <_free_r>
 800b032:	0025      	movs	r5, r4
 800b034:	e7f7      	b.n	800b026 <_realloc_r+0x14>
 800b036:	f000 f81b 	bl	800b070 <_malloc_usable_size_r>
 800b03a:	9001      	str	r0, [sp, #4]
 800b03c:	4284      	cmp	r4, r0
 800b03e:	d803      	bhi.n	800b048 <_realloc_r+0x36>
 800b040:	0035      	movs	r5, r6
 800b042:	0843      	lsrs	r3, r0, #1
 800b044:	42a3      	cmp	r3, r4
 800b046:	d3ee      	bcc.n	800b026 <_realloc_r+0x14>
 800b048:	0021      	movs	r1, r4
 800b04a:	0038      	movs	r0, r7
 800b04c:	f7ff f9b8 	bl	800a3c0 <_malloc_r>
 800b050:	1e05      	subs	r5, r0, #0
 800b052:	d0e8      	beq.n	800b026 <_realloc_r+0x14>
 800b054:	9b01      	ldr	r3, [sp, #4]
 800b056:	0022      	movs	r2, r4
 800b058:	429c      	cmp	r4, r3
 800b05a:	d900      	bls.n	800b05e <_realloc_r+0x4c>
 800b05c:	001a      	movs	r2, r3
 800b05e:	0031      	movs	r1, r6
 800b060:	0028      	movs	r0, r5
 800b062:	f7ff f937 	bl	800a2d4 <memcpy>
 800b066:	0031      	movs	r1, r6
 800b068:	0038      	movs	r0, r7
 800b06a:	f7ff f93d 	bl	800a2e8 <_free_r>
 800b06e:	e7da      	b.n	800b026 <_realloc_r+0x14>

0800b070 <_malloc_usable_size_r>:
 800b070:	1f0b      	subs	r3, r1, #4
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	1f18      	subs	r0, r3, #4
 800b076:	2b00      	cmp	r3, #0
 800b078:	da01      	bge.n	800b07e <_malloc_usable_size_r+0xe>
 800b07a:	580b      	ldr	r3, [r1, r0]
 800b07c:	18c0      	adds	r0, r0, r3
 800b07e:	4770      	bx	lr

0800b080 <_init>:
 800b080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b082:	46c0      	nop			; (mov r8, r8)
 800b084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b086:	bc08      	pop	{r3}
 800b088:	469e      	mov	lr, r3
 800b08a:	4770      	bx	lr

0800b08c <_fini>:
 800b08c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b08e:	46c0      	nop			; (mov r8, r8)
 800b090:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b092:	bc08      	pop	{r3}
 800b094:	469e      	mov	lr, r3
 800b096:	4770      	bx	lr
