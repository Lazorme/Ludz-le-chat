
Moteur_Pojet.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cff0  080000b8  080000b8  000100b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006d8  0800d0a8  0800d0a8  0001d0a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d780  0800d780  000201d8  2**0
                  CONTENTS
  4 .ARM          00000000  0800d780  0800d780  000201d8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d780  0800d780  000201d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d780  0800d780  0001d780  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d784  0800d784  0001d784  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d8  20000000  0800d788  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000608  200001d8  0800d960  000201d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200007e0  0800d960  000207e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016b73  00000000  00000000  00020243  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000364c  00000000  00000000  00036db6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003a408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f82  00000000  00000000  0003b7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019e42  00000000  00000000  0003c772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a321  00000000  00000000  000565b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009cc17  00000000  00000000  000708d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005cd8  00000000  00000000  0010d4ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001131c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000b8 <__do_global_dtors_aux>:
 80000b8:	b510      	push	{r4, lr}
 80000ba:	4c06      	ldr	r4, [pc, #24]	; (80000d4 <__do_global_dtors_aux+0x1c>)
 80000bc:	7823      	ldrb	r3, [r4, #0]
 80000be:	2b00      	cmp	r3, #0
 80000c0:	d107      	bne.n	80000d2 <__do_global_dtors_aux+0x1a>
 80000c2:	4b05      	ldr	r3, [pc, #20]	; (80000d8 <__do_global_dtors_aux+0x20>)
 80000c4:	2b00      	cmp	r3, #0
 80000c6:	d002      	beq.n	80000ce <__do_global_dtors_aux+0x16>
 80000c8:	4804      	ldr	r0, [pc, #16]	; (80000dc <__do_global_dtors_aux+0x24>)
 80000ca:	e000      	b.n	80000ce <__do_global_dtors_aux+0x16>
 80000cc:	bf00      	nop
 80000ce:	2301      	movs	r3, #1
 80000d0:	7023      	strb	r3, [r4, #0]
 80000d2:	bd10      	pop	{r4, pc}
 80000d4:	200001d8 	.word	0x200001d8
 80000d8:	00000000 	.word	0x00000000
 80000dc:	0800d090 	.word	0x0800d090

080000e0 <frame_dummy>:
 80000e0:	4b04      	ldr	r3, [pc, #16]	; (80000f4 <frame_dummy+0x14>)
 80000e2:	b510      	push	{r4, lr}
 80000e4:	2b00      	cmp	r3, #0
 80000e6:	d003      	beq.n	80000f0 <frame_dummy+0x10>
 80000e8:	4903      	ldr	r1, [pc, #12]	; (80000f8 <frame_dummy+0x18>)
 80000ea:	4804      	ldr	r0, [pc, #16]	; (80000fc <frame_dummy+0x1c>)
 80000ec:	e000      	b.n	80000f0 <frame_dummy+0x10>
 80000ee:	bf00      	nop
 80000f0:	bd10      	pop	{r4, pc}
 80000f2:	46c0      	nop			; (mov r8, r8)
 80000f4:	00000000 	.word	0x00000000
 80000f8:	200001dc 	.word	0x200001dc
 80000fc:	0800d090 	.word	0x0800d090

08000100 <strlen>:
 8000100:	2300      	movs	r3, #0
 8000102:	5cc2      	ldrb	r2, [r0, r3]
 8000104:	3301      	adds	r3, #1
 8000106:	2a00      	cmp	r2, #0
 8000108:	d1fb      	bne.n	8000102 <strlen+0x2>
 800010a:	1e58      	subs	r0, r3, #1
 800010c:	4770      	bx	lr
	...

08000110 <__gnu_thumb1_case_uqi>:
 8000110:	b402      	push	{r1}
 8000112:	4671      	mov	r1, lr
 8000114:	0849      	lsrs	r1, r1, #1
 8000116:	0049      	lsls	r1, r1, #1
 8000118:	5c09      	ldrb	r1, [r1, r0]
 800011a:	0049      	lsls	r1, r1, #1
 800011c:	448e      	add	lr, r1
 800011e:	bc02      	pop	{r1}
 8000120:	4770      	bx	lr
 8000122:	46c0      	nop			; (mov r8, r8)

08000124 <__gnu_thumb1_case_shi>:
 8000124:	b403      	push	{r0, r1}
 8000126:	4671      	mov	r1, lr
 8000128:	0849      	lsrs	r1, r1, #1
 800012a:	0040      	lsls	r0, r0, #1
 800012c:	0049      	lsls	r1, r1, #1
 800012e:	5e09      	ldrsh	r1, [r1, r0]
 8000130:	0049      	lsls	r1, r1, #1
 8000132:	448e      	add	lr, r1
 8000134:	bc03      	pop	{r0, r1}
 8000136:	4770      	bx	lr

08000138 <__udivsi3>:
 8000138:	2200      	movs	r2, #0
 800013a:	0843      	lsrs	r3, r0, #1
 800013c:	428b      	cmp	r3, r1
 800013e:	d374      	bcc.n	800022a <__udivsi3+0xf2>
 8000140:	0903      	lsrs	r3, r0, #4
 8000142:	428b      	cmp	r3, r1
 8000144:	d35f      	bcc.n	8000206 <__udivsi3+0xce>
 8000146:	0a03      	lsrs	r3, r0, #8
 8000148:	428b      	cmp	r3, r1
 800014a:	d344      	bcc.n	80001d6 <__udivsi3+0x9e>
 800014c:	0b03      	lsrs	r3, r0, #12
 800014e:	428b      	cmp	r3, r1
 8000150:	d328      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d30d      	bcc.n	8000174 <__udivsi3+0x3c>
 8000158:	22ff      	movs	r2, #255	; 0xff
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	ba12      	rev	r2, r2
 800015e:	0c03      	lsrs	r3, r0, #16
 8000160:	428b      	cmp	r3, r1
 8000162:	d302      	bcc.n	800016a <__udivsi3+0x32>
 8000164:	1212      	asrs	r2, r2, #8
 8000166:	0209      	lsls	r1, r1, #8
 8000168:	d065      	beq.n	8000236 <__udivsi3+0xfe>
 800016a:	0b03      	lsrs	r3, r0, #12
 800016c:	428b      	cmp	r3, r1
 800016e:	d319      	bcc.n	80001a4 <__udivsi3+0x6c>
 8000170:	e000      	b.n	8000174 <__udivsi3+0x3c>
 8000172:	0a09      	lsrs	r1, r1, #8
 8000174:	0bc3      	lsrs	r3, r0, #15
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x46>
 800017a:	03cb      	lsls	r3, r1, #15
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b83      	lsrs	r3, r0, #14
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x52>
 8000186:	038b      	lsls	r3, r1, #14
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b43      	lsrs	r3, r0, #13
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x5e>
 8000192:	034b      	lsls	r3, r1, #13
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0b03      	lsrs	r3, r0, #12
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x6a>
 800019e:	030b      	lsls	r3, r1, #12
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0ac3      	lsrs	r3, r0, #11
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x76>
 80001aa:	02cb      	lsls	r3, r1, #11
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a83      	lsrs	r3, r0, #10
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x82>
 80001b6:	028b      	lsls	r3, r1, #10
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a43      	lsrs	r3, r0, #9
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x8e>
 80001c2:	024b      	lsls	r3, r1, #9
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0a03      	lsrs	r3, r0, #8
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x9a>
 80001ce:	020b      	lsls	r3, r1, #8
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	d2cd      	bcs.n	8000172 <__udivsi3+0x3a>
 80001d6:	09c3      	lsrs	r3, r0, #7
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xa8>
 80001dc:	01cb      	lsls	r3, r1, #7
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0983      	lsrs	r3, r0, #6
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xb4>
 80001e8:	018b      	lsls	r3, r1, #6
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0943      	lsrs	r3, r0, #5
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xc0>
 80001f4:	014b      	lsls	r3, r1, #5
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	0903      	lsrs	r3, r0, #4
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xcc>
 8000200:	010b      	lsls	r3, r1, #4
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	08c3      	lsrs	r3, r0, #3
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xd8>
 800020c:	00cb      	lsls	r3, r1, #3
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0883      	lsrs	r3, r0, #2
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xe4>
 8000218:	008b      	lsls	r3, r1, #2
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0843      	lsrs	r3, r0, #1
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xf0>
 8000224:	004b      	lsls	r3, r1, #1
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	1a41      	subs	r1, r0, r1
 800022c:	d200      	bcs.n	8000230 <__udivsi3+0xf8>
 800022e:	4601      	mov	r1, r0
 8000230:	4152      	adcs	r2, r2
 8000232:	4610      	mov	r0, r2
 8000234:	4770      	bx	lr
 8000236:	e7ff      	b.n	8000238 <__udivsi3+0x100>
 8000238:	b501      	push	{r0, lr}
 800023a:	2000      	movs	r0, #0
 800023c:	f000 f8f0 	bl	8000420 <__aeabi_idiv0>
 8000240:	bd02      	pop	{r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)

08000244 <__aeabi_uidivmod>:
 8000244:	2900      	cmp	r1, #0
 8000246:	d0f7      	beq.n	8000238 <__udivsi3+0x100>
 8000248:	e776      	b.n	8000138 <__udivsi3>
 800024a:	4770      	bx	lr

0800024c <__divsi3>:
 800024c:	4603      	mov	r3, r0
 800024e:	430b      	orrs	r3, r1
 8000250:	d47f      	bmi.n	8000352 <__divsi3+0x106>
 8000252:	2200      	movs	r2, #0
 8000254:	0843      	lsrs	r3, r0, #1
 8000256:	428b      	cmp	r3, r1
 8000258:	d374      	bcc.n	8000344 <__divsi3+0xf8>
 800025a:	0903      	lsrs	r3, r0, #4
 800025c:	428b      	cmp	r3, r1
 800025e:	d35f      	bcc.n	8000320 <__divsi3+0xd4>
 8000260:	0a03      	lsrs	r3, r0, #8
 8000262:	428b      	cmp	r3, r1
 8000264:	d344      	bcc.n	80002f0 <__divsi3+0xa4>
 8000266:	0b03      	lsrs	r3, r0, #12
 8000268:	428b      	cmp	r3, r1
 800026a:	d328      	bcc.n	80002be <__divsi3+0x72>
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d30d      	bcc.n	800028e <__divsi3+0x42>
 8000272:	22ff      	movs	r2, #255	; 0xff
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	ba12      	rev	r2, r2
 8000278:	0c03      	lsrs	r3, r0, #16
 800027a:	428b      	cmp	r3, r1
 800027c:	d302      	bcc.n	8000284 <__divsi3+0x38>
 800027e:	1212      	asrs	r2, r2, #8
 8000280:	0209      	lsls	r1, r1, #8
 8000282:	d065      	beq.n	8000350 <__divsi3+0x104>
 8000284:	0b03      	lsrs	r3, r0, #12
 8000286:	428b      	cmp	r3, r1
 8000288:	d319      	bcc.n	80002be <__divsi3+0x72>
 800028a:	e000      	b.n	800028e <__divsi3+0x42>
 800028c:	0a09      	lsrs	r1, r1, #8
 800028e:	0bc3      	lsrs	r3, r0, #15
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x4c>
 8000294:	03cb      	lsls	r3, r1, #15
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b83      	lsrs	r3, r0, #14
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x58>
 80002a0:	038b      	lsls	r3, r1, #14
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b43      	lsrs	r3, r0, #13
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x64>
 80002ac:	034b      	lsls	r3, r1, #13
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0b03      	lsrs	r3, r0, #12
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x70>
 80002b8:	030b      	lsls	r3, r1, #12
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0ac3      	lsrs	r3, r0, #11
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x7c>
 80002c4:	02cb      	lsls	r3, r1, #11
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a83      	lsrs	r3, r0, #10
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x88>
 80002d0:	028b      	lsls	r3, r1, #10
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a43      	lsrs	r3, r0, #9
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0x94>
 80002dc:	024b      	lsls	r3, r1, #9
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	0a03      	lsrs	r3, r0, #8
 80002e4:	428b      	cmp	r3, r1
 80002e6:	d301      	bcc.n	80002ec <__divsi3+0xa0>
 80002e8:	020b      	lsls	r3, r1, #8
 80002ea:	1ac0      	subs	r0, r0, r3
 80002ec:	4152      	adcs	r2, r2
 80002ee:	d2cd      	bcs.n	800028c <__divsi3+0x40>
 80002f0:	09c3      	lsrs	r3, r0, #7
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xae>
 80002f6:	01cb      	lsls	r3, r1, #7
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0983      	lsrs	r3, r0, #6
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xba>
 8000302:	018b      	lsls	r3, r1, #6
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0943      	lsrs	r3, r0, #5
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xc6>
 800030e:	014b      	lsls	r3, r1, #5
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	0903      	lsrs	r3, r0, #4
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xd2>
 800031a:	010b      	lsls	r3, r1, #4
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	08c3      	lsrs	r3, r0, #3
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xde>
 8000326:	00cb      	lsls	r3, r1, #3
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0883      	lsrs	r3, r0, #2
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xea>
 8000332:	008b      	lsls	r3, r1, #2
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	0843      	lsrs	r3, r0, #1
 800033a:	428b      	cmp	r3, r1
 800033c:	d301      	bcc.n	8000342 <__divsi3+0xf6>
 800033e:	004b      	lsls	r3, r1, #1
 8000340:	1ac0      	subs	r0, r0, r3
 8000342:	4152      	adcs	r2, r2
 8000344:	1a41      	subs	r1, r0, r1
 8000346:	d200      	bcs.n	800034a <__divsi3+0xfe>
 8000348:	4601      	mov	r1, r0
 800034a:	4152      	adcs	r2, r2
 800034c:	4610      	mov	r0, r2
 800034e:	4770      	bx	lr
 8000350:	e05d      	b.n	800040e <__divsi3+0x1c2>
 8000352:	0fca      	lsrs	r2, r1, #31
 8000354:	d000      	beq.n	8000358 <__divsi3+0x10c>
 8000356:	4249      	negs	r1, r1
 8000358:	1003      	asrs	r3, r0, #32
 800035a:	d300      	bcc.n	800035e <__divsi3+0x112>
 800035c:	4240      	negs	r0, r0
 800035e:	4053      	eors	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	469c      	mov	ip, r3
 8000364:	0903      	lsrs	r3, r0, #4
 8000366:	428b      	cmp	r3, r1
 8000368:	d32d      	bcc.n	80003c6 <__divsi3+0x17a>
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d312      	bcc.n	8000396 <__divsi3+0x14a>
 8000370:	22fc      	movs	r2, #252	; 0xfc
 8000372:	0189      	lsls	r1, r1, #6
 8000374:	ba12      	rev	r2, r2
 8000376:	0a03      	lsrs	r3, r0, #8
 8000378:	428b      	cmp	r3, r1
 800037a:	d30c      	bcc.n	8000396 <__divsi3+0x14a>
 800037c:	0189      	lsls	r1, r1, #6
 800037e:	1192      	asrs	r2, r2, #6
 8000380:	428b      	cmp	r3, r1
 8000382:	d308      	bcc.n	8000396 <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d304      	bcc.n	8000396 <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	d03a      	beq.n	8000406 <__divsi3+0x1ba>
 8000390:	1192      	asrs	r2, r2, #6
 8000392:	e000      	b.n	8000396 <__divsi3+0x14a>
 8000394:	0989      	lsrs	r1, r1, #6
 8000396:	09c3      	lsrs	r3, r0, #7
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x154>
 800039c:	01cb      	lsls	r3, r1, #7
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0983      	lsrs	r3, r0, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x160>
 80003a8:	018b      	lsls	r3, r1, #6
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0943      	lsrs	r3, r0, #5
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x16c>
 80003b4:	014b      	lsls	r3, r1, #5
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	0903      	lsrs	r3, r0, #4
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x178>
 80003c0:	010b      	lsls	r3, r1, #4
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	08c3      	lsrs	r3, r0, #3
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x184>
 80003cc:	00cb      	lsls	r3, r1, #3
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	0883      	lsrs	r3, r0, #2
 80003d4:	428b      	cmp	r3, r1
 80003d6:	d301      	bcc.n	80003dc <__divsi3+0x190>
 80003d8:	008b      	lsls	r3, r1, #2
 80003da:	1ac0      	subs	r0, r0, r3
 80003dc:	4152      	adcs	r2, r2
 80003de:	d2d9      	bcs.n	8000394 <__divsi3+0x148>
 80003e0:	0843      	lsrs	r3, r0, #1
 80003e2:	428b      	cmp	r3, r1
 80003e4:	d301      	bcc.n	80003ea <__divsi3+0x19e>
 80003e6:	004b      	lsls	r3, r1, #1
 80003e8:	1ac0      	subs	r0, r0, r3
 80003ea:	4152      	adcs	r2, r2
 80003ec:	1a41      	subs	r1, r0, r1
 80003ee:	d200      	bcs.n	80003f2 <__divsi3+0x1a6>
 80003f0:	4601      	mov	r1, r0
 80003f2:	4663      	mov	r3, ip
 80003f4:	4152      	adcs	r2, r2
 80003f6:	105b      	asrs	r3, r3, #1
 80003f8:	4610      	mov	r0, r2
 80003fa:	d301      	bcc.n	8000400 <__divsi3+0x1b4>
 80003fc:	4240      	negs	r0, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d500      	bpl.n	8000404 <__divsi3+0x1b8>
 8000402:	4249      	negs	r1, r1
 8000404:	4770      	bx	lr
 8000406:	4663      	mov	r3, ip
 8000408:	105b      	asrs	r3, r3, #1
 800040a:	d300      	bcc.n	800040e <__divsi3+0x1c2>
 800040c:	4240      	negs	r0, r0
 800040e:	b501      	push	{r0, lr}
 8000410:	2000      	movs	r0, #0
 8000412:	f000 f805 	bl	8000420 <__aeabi_idiv0>
 8000416:	bd02      	pop	{r1, pc}

08000418 <__aeabi_idivmod>:
 8000418:	2900      	cmp	r1, #0
 800041a:	d0f8      	beq.n	800040e <__divsi3+0x1c2>
 800041c:	e716      	b.n	800024c <__divsi3>
 800041e:	4770      	bx	lr

08000420 <__aeabi_idiv0>:
 8000420:	4770      	bx	lr
 8000422:	46c0      	nop			; (mov r8, r8)

08000424 <__aeabi_cdrcmple>:
 8000424:	4684      	mov	ip, r0
 8000426:	0010      	movs	r0, r2
 8000428:	4662      	mov	r2, ip
 800042a:	468c      	mov	ip, r1
 800042c:	0019      	movs	r1, r3
 800042e:	4663      	mov	r3, ip
 8000430:	e000      	b.n	8000434 <__aeabi_cdcmpeq>
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__aeabi_cdcmpeq>:
 8000434:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000436:	f001 fa53 	bl	80018e0 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	d401      	bmi.n	8000442 <__aeabi_cdcmpeq+0xe>
 800043e:	2100      	movs	r1, #0
 8000440:	42c8      	cmn	r0, r1
 8000442:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000444 <__aeabi_dcmpeq>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f001 f9a3 	bl	8001790 <__eqdf2>
 800044a:	4240      	negs	r0, r0
 800044c:	3001      	adds	r0, #1
 800044e:	bd10      	pop	{r4, pc}

08000450 <__aeabi_dcmplt>:
 8000450:	b510      	push	{r4, lr}
 8000452:	f001 fa45 	bl	80018e0 <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	db01      	blt.n	800045e <__aeabi_dcmplt+0xe>
 800045a:	2000      	movs	r0, #0
 800045c:	bd10      	pop	{r4, pc}
 800045e:	2001      	movs	r0, #1
 8000460:	bd10      	pop	{r4, pc}
 8000462:	46c0      	nop			; (mov r8, r8)

08000464 <__aeabi_dcmple>:
 8000464:	b510      	push	{r4, lr}
 8000466:	f001 fa3b 	bl	80018e0 <__ledf2>
 800046a:	2800      	cmp	r0, #0
 800046c:	dd01      	ble.n	8000472 <__aeabi_dcmple+0xe>
 800046e:	2000      	movs	r0, #0
 8000470:	bd10      	pop	{r4, pc}
 8000472:	2001      	movs	r0, #1
 8000474:	bd10      	pop	{r4, pc}
 8000476:	46c0      	nop			; (mov r8, r8)

08000478 <__aeabi_dcmpgt>:
 8000478:	b510      	push	{r4, lr}
 800047a:	f001 f9cb 	bl	8001814 <__gedf2>
 800047e:	2800      	cmp	r0, #0
 8000480:	dc01      	bgt.n	8000486 <__aeabi_dcmpgt+0xe>
 8000482:	2000      	movs	r0, #0
 8000484:	bd10      	pop	{r4, pc}
 8000486:	2001      	movs	r0, #1
 8000488:	bd10      	pop	{r4, pc}
 800048a:	46c0      	nop			; (mov r8, r8)

0800048c <__aeabi_dcmpge>:
 800048c:	b510      	push	{r4, lr}
 800048e:	f001 f9c1 	bl	8001814 <__gedf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	da01      	bge.n	800049a <__aeabi_dcmpge+0xe>
 8000496:	2000      	movs	r0, #0
 8000498:	bd10      	pop	{r4, pc}
 800049a:	2001      	movs	r0, #1
 800049c:	bd10      	pop	{r4, pc}
 800049e:	46c0      	nop			; (mov r8, r8)

080004a0 <__aeabi_d2uiz>:
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	2200      	movs	r2, #0
 80004a4:	4b0c      	ldr	r3, [pc, #48]	; (80004d8 <__aeabi_d2uiz+0x38>)
 80004a6:	0004      	movs	r4, r0
 80004a8:	000d      	movs	r5, r1
 80004aa:	f7ff ffef 	bl	800048c <__aeabi_dcmpge>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d104      	bne.n	80004bc <__aeabi_d2uiz+0x1c>
 80004b2:	0020      	movs	r0, r4
 80004b4:	0029      	movs	r1, r5
 80004b6:	f002 f8d9 	bl	800266c <__aeabi_d2iz>
 80004ba:	bd70      	pop	{r4, r5, r6, pc}
 80004bc:	4b06      	ldr	r3, [pc, #24]	; (80004d8 <__aeabi_d2uiz+0x38>)
 80004be:	2200      	movs	r2, #0
 80004c0:	0020      	movs	r0, r4
 80004c2:	0029      	movs	r1, r5
 80004c4:	f001 fd32 	bl	8001f2c <__aeabi_dsub>
 80004c8:	f002 f8d0 	bl	800266c <__aeabi_d2iz>
 80004cc:	2380      	movs	r3, #128	; 0x80
 80004ce:	061b      	lsls	r3, r3, #24
 80004d0:	469c      	mov	ip, r3
 80004d2:	4460      	add	r0, ip
 80004d4:	e7f1      	b.n	80004ba <__aeabi_d2uiz+0x1a>
 80004d6:	46c0      	nop			; (mov r8, r8)
 80004d8:	41e00000 	.word	0x41e00000

080004dc <__aeabi_d2lz>:
 80004dc:	b570      	push	{r4, r5, r6, lr}
 80004de:	0005      	movs	r5, r0
 80004e0:	000c      	movs	r4, r1
 80004e2:	2200      	movs	r2, #0
 80004e4:	2300      	movs	r3, #0
 80004e6:	0028      	movs	r0, r5
 80004e8:	0021      	movs	r1, r4
 80004ea:	f7ff ffb1 	bl	8000450 <__aeabi_dcmplt>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	d108      	bne.n	8000504 <__aeabi_d2lz+0x28>
 80004f2:	0028      	movs	r0, r5
 80004f4:	0021      	movs	r1, r4
 80004f6:	f000 f80f 	bl	8000518 <__aeabi_d2ulz>
 80004fa:	0002      	movs	r2, r0
 80004fc:	000b      	movs	r3, r1
 80004fe:	0010      	movs	r0, r2
 8000500:	0019      	movs	r1, r3
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	061b      	lsls	r3, r3, #24
 8000508:	18e1      	adds	r1, r4, r3
 800050a:	0028      	movs	r0, r5
 800050c:	f000 f804 	bl	8000518 <__aeabi_d2ulz>
 8000510:	2300      	movs	r3, #0
 8000512:	4242      	negs	r2, r0
 8000514:	418b      	sbcs	r3, r1
 8000516:	e7f2      	b.n	80004fe <__aeabi_d2lz+0x22>

08000518 <__aeabi_d2ulz>:
 8000518:	b570      	push	{r4, r5, r6, lr}
 800051a:	2200      	movs	r2, #0
 800051c:	4b0b      	ldr	r3, [pc, #44]	; (800054c <__aeabi_d2ulz+0x34>)
 800051e:	000d      	movs	r5, r1
 8000520:	0004      	movs	r4, r0
 8000522:	f001 fa41 	bl	80019a8 <__aeabi_dmul>
 8000526:	f7ff ffbb 	bl	80004a0 <__aeabi_d2uiz>
 800052a:	0006      	movs	r6, r0
 800052c:	f002 f904 	bl	8002738 <__aeabi_ui2d>
 8000530:	2200      	movs	r2, #0
 8000532:	4b07      	ldr	r3, [pc, #28]	; (8000550 <__aeabi_d2ulz+0x38>)
 8000534:	f001 fa38 	bl	80019a8 <__aeabi_dmul>
 8000538:	0002      	movs	r2, r0
 800053a:	000b      	movs	r3, r1
 800053c:	0020      	movs	r0, r4
 800053e:	0029      	movs	r1, r5
 8000540:	f001 fcf4 	bl	8001f2c <__aeabi_dsub>
 8000544:	f7ff ffac 	bl	80004a0 <__aeabi_d2uiz>
 8000548:	0031      	movs	r1, r6
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	3df00000 	.word	0x3df00000
 8000550:	41f00000 	.word	0x41f00000

08000554 <__aeabi_l2d>:
 8000554:	b570      	push	{r4, r5, r6, lr}
 8000556:	0006      	movs	r6, r0
 8000558:	0008      	movs	r0, r1
 800055a:	f002 f8bd 	bl	80026d8 <__aeabi_i2d>
 800055e:	2200      	movs	r2, #0
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <__aeabi_l2d+0x28>)
 8000562:	f001 fa21 	bl	80019a8 <__aeabi_dmul>
 8000566:	000d      	movs	r5, r1
 8000568:	0004      	movs	r4, r0
 800056a:	0030      	movs	r0, r6
 800056c:	f002 f8e4 	bl	8002738 <__aeabi_ui2d>
 8000570:	002b      	movs	r3, r5
 8000572:	0022      	movs	r2, r4
 8000574:	f000 fabe 	bl	8000af4 <__aeabi_dadd>
 8000578:	bd70      	pop	{r4, r5, r6, pc}
 800057a:	46c0      	nop			; (mov r8, r8)
 800057c:	41f00000 	.word	0x41f00000

08000580 <__aeabi_fdiv>:
 8000580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000582:	464f      	mov	r7, r9
 8000584:	4646      	mov	r6, r8
 8000586:	46d6      	mov	lr, sl
 8000588:	0245      	lsls	r5, r0, #9
 800058a:	b5c0      	push	{r6, r7, lr}
 800058c:	0047      	lsls	r7, r0, #1
 800058e:	1c0c      	adds	r4, r1, #0
 8000590:	0a6d      	lsrs	r5, r5, #9
 8000592:	0e3f      	lsrs	r7, r7, #24
 8000594:	0fc6      	lsrs	r6, r0, #31
 8000596:	2f00      	cmp	r7, #0
 8000598:	d100      	bne.n	800059c <__aeabi_fdiv+0x1c>
 800059a:	e06f      	b.n	800067c <__aeabi_fdiv+0xfc>
 800059c:	2fff      	cmp	r7, #255	; 0xff
 800059e:	d100      	bne.n	80005a2 <__aeabi_fdiv+0x22>
 80005a0:	e074      	b.n	800068c <__aeabi_fdiv+0x10c>
 80005a2:	2300      	movs	r3, #0
 80005a4:	2280      	movs	r2, #128	; 0x80
 80005a6:	4699      	mov	r9, r3
 80005a8:	469a      	mov	sl, r3
 80005aa:	00ed      	lsls	r5, r5, #3
 80005ac:	04d2      	lsls	r2, r2, #19
 80005ae:	4315      	orrs	r5, r2
 80005b0:	3f7f      	subs	r7, #127	; 0x7f
 80005b2:	0263      	lsls	r3, r4, #9
 80005b4:	0a5b      	lsrs	r3, r3, #9
 80005b6:	4698      	mov	r8, r3
 80005b8:	0063      	lsls	r3, r4, #1
 80005ba:	0e1b      	lsrs	r3, r3, #24
 80005bc:	0fe4      	lsrs	r4, r4, #31
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d04d      	beq.n	800065e <__aeabi_fdiv+0xde>
 80005c2:	2bff      	cmp	r3, #255	; 0xff
 80005c4:	d045      	beq.n	8000652 <__aeabi_fdiv+0xd2>
 80005c6:	4642      	mov	r2, r8
 80005c8:	2180      	movs	r1, #128	; 0x80
 80005ca:	00d2      	lsls	r2, r2, #3
 80005cc:	04c9      	lsls	r1, r1, #19
 80005ce:	4311      	orrs	r1, r2
 80005d0:	4688      	mov	r8, r1
 80005d2:	2200      	movs	r2, #0
 80005d4:	3b7f      	subs	r3, #127	; 0x7f
 80005d6:	0031      	movs	r1, r6
 80005d8:	1aff      	subs	r7, r7, r3
 80005da:	464b      	mov	r3, r9
 80005dc:	4061      	eors	r1, r4
 80005de:	b2c9      	uxtb	r1, r1
 80005e0:	2b0f      	cmp	r3, #15
 80005e2:	d900      	bls.n	80005e6 <__aeabi_fdiv+0x66>
 80005e4:	e0b8      	b.n	8000758 <__aeabi_fdiv+0x1d8>
 80005e6:	4870      	ldr	r0, [pc, #448]	; (80007a8 <__aeabi_fdiv+0x228>)
 80005e8:	009b      	lsls	r3, r3, #2
 80005ea:	58c3      	ldr	r3, [r0, r3]
 80005ec:	469f      	mov	pc, r3
 80005ee:	2300      	movs	r3, #0
 80005f0:	4698      	mov	r8, r3
 80005f2:	0026      	movs	r6, r4
 80005f4:	4645      	mov	r5, r8
 80005f6:	4692      	mov	sl, r2
 80005f8:	4653      	mov	r3, sl
 80005fa:	2b02      	cmp	r3, #2
 80005fc:	d100      	bne.n	8000600 <__aeabi_fdiv+0x80>
 80005fe:	e08d      	b.n	800071c <__aeabi_fdiv+0x19c>
 8000600:	2b03      	cmp	r3, #3
 8000602:	d100      	bne.n	8000606 <__aeabi_fdiv+0x86>
 8000604:	e0a1      	b.n	800074a <__aeabi_fdiv+0x1ca>
 8000606:	2b01      	cmp	r3, #1
 8000608:	d018      	beq.n	800063c <__aeabi_fdiv+0xbc>
 800060a:	003b      	movs	r3, r7
 800060c:	337f      	adds	r3, #127	; 0x7f
 800060e:	2b00      	cmp	r3, #0
 8000610:	dd6d      	ble.n	80006ee <__aeabi_fdiv+0x16e>
 8000612:	076a      	lsls	r2, r5, #29
 8000614:	d004      	beq.n	8000620 <__aeabi_fdiv+0xa0>
 8000616:	220f      	movs	r2, #15
 8000618:	402a      	ands	r2, r5
 800061a:	2a04      	cmp	r2, #4
 800061c:	d000      	beq.n	8000620 <__aeabi_fdiv+0xa0>
 800061e:	3504      	adds	r5, #4
 8000620:	012a      	lsls	r2, r5, #4
 8000622:	d503      	bpl.n	800062c <__aeabi_fdiv+0xac>
 8000624:	4b61      	ldr	r3, [pc, #388]	; (80007ac <__aeabi_fdiv+0x22c>)
 8000626:	401d      	ands	r5, r3
 8000628:	003b      	movs	r3, r7
 800062a:	3380      	adds	r3, #128	; 0x80
 800062c:	2bfe      	cmp	r3, #254	; 0xfe
 800062e:	dd00      	ble.n	8000632 <__aeabi_fdiv+0xb2>
 8000630:	e074      	b.n	800071c <__aeabi_fdiv+0x19c>
 8000632:	01aa      	lsls	r2, r5, #6
 8000634:	0a52      	lsrs	r2, r2, #9
 8000636:	b2d8      	uxtb	r0, r3
 8000638:	e002      	b.n	8000640 <__aeabi_fdiv+0xc0>
 800063a:	000e      	movs	r6, r1
 800063c:	2000      	movs	r0, #0
 800063e:	2200      	movs	r2, #0
 8000640:	05c0      	lsls	r0, r0, #23
 8000642:	07f6      	lsls	r6, r6, #31
 8000644:	4310      	orrs	r0, r2
 8000646:	4330      	orrs	r0, r6
 8000648:	bce0      	pop	{r5, r6, r7}
 800064a:	46ba      	mov	sl, r7
 800064c:	46b1      	mov	r9, r6
 800064e:	46a8      	mov	r8, r5
 8000650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000652:	4643      	mov	r3, r8
 8000654:	2b00      	cmp	r3, #0
 8000656:	d13f      	bne.n	80006d8 <__aeabi_fdiv+0x158>
 8000658:	2202      	movs	r2, #2
 800065a:	3fff      	subs	r7, #255	; 0xff
 800065c:	e003      	b.n	8000666 <__aeabi_fdiv+0xe6>
 800065e:	4643      	mov	r3, r8
 8000660:	2b00      	cmp	r3, #0
 8000662:	d12d      	bne.n	80006c0 <__aeabi_fdiv+0x140>
 8000664:	2201      	movs	r2, #1
 8000666:	0031      	movs	r1, r6
 8000668:	464b      	mov	r3, r9
 800066a:	4061      	eors	r1, r4
 800066c:	b2c9      	uxtb	r1, r1
 800066e:	4313      	orrs	r3, r2
 8000670:	2b0f      	cmp	r3, #15
 8000672:	d838      	bhi.n	80006e6 <__aeabi_fdiv+0x166>
 8000674:	484e      	ldr	r0, [pc, #312]	; (80007b0 <__aeabi_fdiv+0x230>)
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	58c3      	ldr	r3, [r0, r3]
 800067a:	469f      	mov	pc, r3
 800067c:	2d00      	cmp	r5, #0
 800067e:	d113      	bne.n	80006a8 <__aeabi_fdiv+0x128>
 8000680:	2304      	movs	r3, #4
 8000682:	4699      	mov	r9, r3
 8000684:	3b03      	subs	r3, #3
 8000686:	2700      	movs	r7, #0
 8000688:	469a      	mov	sl, r3
 800068a:	e792      	b.n	80005b2 <__aeabi_fdiv+0x32>
 800068c:	2d00      	cmp	r5, #0
 800068e:	d105      	bne.n	800069c <__aeabi_fdiv+0x11c>
 8000690:	2308      	movs	r3, #8
 8000692:	4699      	mov	r9, r3
 8000694:	3b06      	subs	r3, #6
 8000696:	27ff      	movs	r7, #255	; 0xff
 8000698:	469a      	mov	sl, r3
 800069a:	e78a      	b.n	80005b2 <__aeabi_fdiv+0x32>
 800069c:	230c      	movs	r3, #12
 800069e:	4699      	mov	r9, r3
 80006a0:	3b09      	subs	r3, #9
 80006a2:	27ff      	movs	r7, #255	; 0xff
 80006a4:	469a      	mov	sl, r3
 80006a6:	e784      	b.n	80005b2 <__aeabi_fdiv+0x32>
 80006a8:	0028      	movs	r0, r5
 80006aa:	f002 f939 	bl	8002920 <__clzsi2>
 80006ae:	2776      	movs	r7, #118	; 0x76
 80006b0:	1f43      	subs	r3, r0, #5
 80006b2:	409d      	lsls	r5, r3
 80006b4:	2300      	movs	r3, #0
 80006b6:	427f      	negs	r7, r7
 80006b8:	4699      	mov	r9, r3
 80006ba:	469a      	mov	sl, r3
 80006bc:	1a3f      	subs	r7, r7, r0
 80006be:	e778      	b.n	80005b2 <__aeabi_fdiv+0x32>
 80006c0:	4640      	mov	r0, r8
 80006c2:	f002 f92d 	bl	8002920 <__clzsi2>
 80006c6:	4642      	mov	r2, r8
 80006c8:	1f43      	subs	r3, r0, #5
 80006ca:	409a      	lsls	r2, r3
 80006cc:	2376      	movs	r3, #118	; 0x76
 80006ce:	425b      	negs	r3, r3
 80006d0:	4690      	mov	r8, r2
 80006d2:	1a1b      	subs	r3, r3, r0
 80006d4:	2200      	movs	r2, #0
 80006d6:	e77e      	b.n	80005d6 <__aeabi_fdiv+0x56>
 80006d8:	2303      	movs	r3, #3
 80006da:	464a      	mov	r2, r9
 80006dc:	431a      	orrs	r2, r3
 80006de:	4691      	mov	r9, r2
 80006e0:	33fc      	adds	r3, #252	; 0xfc
 80006e2:	2203      	movs	r2, #3
 80006e4:	e777      	b.n	80005d6 <__aeabi_fdiv+0x56>
 80006e6:	000e      	movs	r6, r1
 80006e8:	20ff      	movs	r0, #255	; 0xff
 80006ea:	2200      	movs	r2, #0
 80006ec:	e7a8      	b.n	8000640 <__aeabi_fdiv+0xc0>
 80006ee:	2201      	movs	r2, #1
 80006f0:	1ad3      	subs	r3, r2, r3
 80006f2:	2b1b      	cmp	r3, #27
 80006f4:	dca2      	bgt.n	800063c <__aeabi_fdiv+0xbc>
 80006f6:	379e      	adds	r7, #158	; 0x9e
 80006f8:	002a      	movs	r2, r5
 80006fa:	40bd      	lsls	r5, r7
 80006fc:	40da      	lsrs	r2, r3
 80006fe:	1e6b      	subs	r3, r5, #1
 8000700:	419d      	sbcs	r5, r3
 8000702:	4315      	orrs	r5, r2
 8000704:	076a      	lsls	r2, r5, #29
 8000706:	d004      	beq.n	8000712 <__aeabi_fdiv+0x192>
 8000708:	220f      	movs	r2, #15
 800070a:	402a      	ands	r2, r5
 800070c:	2a04      	cmp	r2, #4
 800070e:	d000      	beq.n	8000712 <__aeabi_fdiv+0x192>
 8000710:	3504      	adds	r5, #4
 8000712:	016a      	lsls	r2, r5, #5
 8000714:	d544      	bpl.n	80007a0 <__aeabi_fdiv+0x220>
 8000716:	2001      	movs	r0, #1
 8000718:	2200      	movs	r2, #0
 800071a:	e791      	b.n	8000640 <__aeabi_fdiv+0xc0>
 800071c:	20ff      	movs	r0, #255	; 0xff
 800071e:	2200      	movs	r2, #0
 8000720:	e78e      	b.n	8000640 <__aeabi_fdiv+0xc0>
 8000722:	2280      	movs	r2, #128	; 0x80
 8000724:	2600      	movs	r6, #0
 8000726:	20ff      	movs	r0, #255	; 0xff
 8000728:	03d2      	lsls	r2, r2, #15
 800072a:	e789      	b.n	8000640 <__aeabi_fdiv+0xc0>
 800072c:	2300      	movs	r3, #0
 800072e:	4698      	mov	r8, r3
 8000730:	2280      	movs	r2, #128	; 0x80
 8000732:	03d2      	lsls	r2, r2, #15
 8000734:	4215      	tst	r5, r2
 8000736:	d008      	beq.n	800074a <__aeabi_fdiv+0x1ca>
 8000738:	4643      	mov	r3, r8
 800073a:	4213      	tst	r3, r2
 800073c:	d105      	bne.n	800074a <__aeabi_fdiv+0x1ca>
 800073e:	431a      	orrs	r2, r3
 8000740:	0252      	lsls	r2, r2, #9
 8000742:	0026      	movs	r6, r4
 8000744:	20ff      	movs	r0, #255	; 0xff
 8000746:	0a52      	lsrs	r2, r2, #9
 8000748:	e77a      	b.n	8000640 <__aeabi_fdiv+0xc0>
 800074a:	2280      	movs	r2, #128	; 0x80
 800074c:	03d2      	lsls	r2, r2, #15
 800074e:	432a      	orrs	r2, r5
 8000750:	0252      	lsls	r2, r2, #9
 8000752:	20ff      	movs	r0, #255	; 0xff
 8000754:	0a52      	lsrs	r2, r2, #9
 8000756:	e773      	b.n	8000640 <__aeabi_fdiv+0xc0>
 8000758:	4642      	mov	r2, r8
 800075a:	016b      	lsls	r3, r5, #5
 800075c:	0155      	lsls	r5, r2, #5
 800075e:	42ab      	cmp	r3, r5
 8000760:	d21a      	bcs.n	8000798 <__aeabi_fdiv+0x218>
 8000762:	201b      	movs	r0, #27
 8000764:	2200      	movs	r2, #0
 8000766:	3f01      	subs	r7, #1
 8000768:	2601      	movs	r6, #1
 800076a:	001c      	movs	r4, r3
 800076c:	0052      	lsls	r2, r2, #1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	2c00      	cmp	r4, #0
 8000772:	db01      	blt.n	8000778 <__aeabi_fdiv+0x1f8>
 8000774:	429d      	cmp	r5, r3
 8000776:	d801      	bhi.n	800077c <__aeabi_fdiv+0x1fc>
 8000778:	1b5b      	subs	r3, r3, r5
 800077a:	4332      	orrs	r2, r6
 800077c:	3801      	subs	r0, #1
 800077e:	2800      	cmp	r0, #0
 8000780:	d1f3      	bne.n	800076a <__aeabi_fdiv+0x1ea>
 8000782:	1e58      	subs	r0, r3, #1
 8000784:	4183      	sbcs	r3, r0
 8000786:	4313      	orrs	r3, r2
 8000788:	001d      	movs	r5, r3
 800078a:	003b      	movs	r3, r7
 800078c:	337f      	adds	r3, #127	; 0x7f
 800078e:	000e      	movs	r6, r1
 8000790:	2b00      	cmp	r3, #0
 8000792:	dd00      	ble.n	8000796 <__aeabi_fdiv+0x216>
 8000794:	e73d      	b.n	8000612 <__aeabi_fdiv+0x92>
 8000796:	e7aa      	b.n	80006ee <__aeabi_fdiv+0x16e>
 8000798:	201a      	movs	r0, #26
 800079a:	2201      	movs	r2, #1
 800079c:	1b5b      	subs	r3, r3, r5
 800079e:	e7e3      	b.n	8000768 <__aeabi_fdiv+0x1e8>
 80007a0:	01aa      	lsls	r2, r5, #6
 80007a2:	2000      	movs	r0, #0
 80007a4:	0a52      	lsrs	r2, r2, #9
 80007a6:	e74b      	b.n	8000640 <__aeabi_fdiv+0xc0>
 80007a8:	0800d1bc 	.word	0x0800d1bc
 80007ac:	f7ffffff 	.word	0xf7ffffff
 80007b0:	0800d1fc 	.word	0x0800d1fc

080007b4 <__aeabi_fmul>:
 80007b4:	0243      	lsls	r3, r0, #9
 80007b6:	0a5b      	lsrs	r3, r3, #9
 80007b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007ba:	464f      	mov	r7, r9
 80007bc:	4646      	mov	r6, r8
 80007be:	4699      	mov	r9, r3
 80007c0:	46d6      	mov	lr, sl
 80007c2:	0fc3      	lsrs	r3, r0, #31
 80007c4:	0045      	lsls	r5, r0, #1
 80007c6:	4698      	mov	r8, r3
 80007c8:	b5c0      	push	{r6, r7, lr}
 80007ca:	464b      	mov	r3, r9
 80007cc:	1c0f      	adds	r7, r1, #0
 80007ce:	0e2d      	lsrs	r5, r5, #24
 80007d0:	d100      	bne.n	80007d4 <__aeabi_fmul+0x20>
 80007d2:	e0cb      	b.n	800096c <__aeabi_fmul+0x1b8>
 80007d4:	2dff      	cmp	r5, #255	; 0xff
 80007d6:	d100      	bne.n	80007da <__aeabi_fmul+0x26>
 80007d8:	e0cf      	b.n	800097a <__aeabi_fmul+0x1c6>
 80007da:	2280      	movs	r2, #128	; 0x80
 80007dc:	00db      	lsls	r3, r3, #3
 80007de:	04d2      	lsls	r2, r2, #19
 80007e0:	431a      	orrs	r2, r3
 80007e2:	2300      	movs	r3, #0
 80007e4:	4691      	mov	r9, r2
 80007e6:	2600      	movs	r6, #0
 80007e8:	469a      	mov	sl, r3
 80007ea:	3d7f      	subs	r5, #127	; 0x7f
 80007ec:	027c      	lsls	r4, r7, #9
 80007ee:	007b      	lsls	r3, r7, #1
 80007f0:	0a64      	lsrs	r4, r4, #9
 80007f2:	0e1b      	lsrs	r3, r3, #24
 80007f4:	0fff      	lsrs	r7, r7, #31
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d100      	bne.n	80007fc <__aeabi_fmul+0x48>
 80007fa:	e0a9      	b.n	8000950 <__aeabi_fmul+0x19c>
 80007fc:	2bff      	cmp	r3, #255	; 0xff
 80007fe:	d011      	beq.n	8000824 <__aeabi_fmul+0x70>
 8000800:	2280      	movs	r2, #128	; 0x80
 8000802:	00e4      	lsls	r4, r4, #3
 8000804:	04d2      	lsls	r2, r2, #19
 8000806:	4314      	orrs	r4, r2
 8000808:	4642      	mov	r2, r8
 800080a:	3b7f      	subs	r3, #127	; 0x7f
 800080c:	195b      	adds	r3, r3, r5
 800080e:	407a      	eors	r2, r7
 8000810:	2000      	movs	r0, #0
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	1c5d      	adds	r5, r3, #1
 8000816:	2e0a      	cmp	r6, #10
 8000818:	dd13      	ble.n	8000842 <__aeabi_fmul+0x8e>
 800081a:	003a      	movs	r2, r7
 800081c:	2e0b      	cmp	r6, #11
 800081e:	d047      	beq.n	80008b0 <__aeabi_fmul+0xfc>
 8000820:	4647      	mov	r7, r8
 8000822:	e03f      	b.n	80008a4 <__aeabi_fmul+0xf0>
 8000824:	002b      	movs	r3, r5
 8000826:	33ff      	adds	r3, #255	; 0xff
 8000828:	2c00      	cmp	r4, #0
 800082a:	d11e      	bne.n	800086a <__aeabi_fmul+0xb6>
 800082c:	2202      	movs	r2, #2
 800082e:	4316      	orrs	r6, r2
 8000830:	4642      	mov	r2, r8
 8000832:	3501      	adds	r5, #1
 8000834:	407a      	eors	r2, r7
 8000836:	b2d2      	uxtb	r2, r2
 8000838:	35ff      	adds	r5, #255	; 0xff
 800083a:	2e0a      	cmp	r6, #10
 800083c:	dd00      	ble.n	8000840 <__aeabi_fmul+0x8c>
 800083e:	e0e4      	b.n	8000a0a <__aeabi_fmul+0x256>
 8000840:	2002      	movs	r0, #2
 8000842:	2e02      	cmp	r6, #2
 8000844:	dc1c      	bgt.n	8000880 <__aeabi_fmul+0xcc>
 8000846:	3e01      	subs	r6, #1
 8000848:	2e01      	cmp	r6, #1
 800084a:	d842      	bhi.n	80008d2 <__aeabi_fmul+0x11e>
 800084c:	2802      	cmp	r0, #2
 800084e:	d03d      	beq.n	80008cc <__aeabi_fmul+0x118>
 8000850:	2801      	cmp	r0, #1
 8000852:	d166      	bne.n	8000922 <__aeabi_fmul+0x16e>
 8000854:	2000      	movs	r0, #0
 8000856:	2100      	movs	r1, #0
 8000858:	05c0      	lsls	r0, r0, #23
 800085a:	4308      	orrs	r0, r1
 800085c:	07d2      	lsls	r2, r2, #31
 800085e:	4310      	orrs	r0, r2
 8000860:	bce0      	pop	{r5, r6, r7}
 8000862:	46ba      	mov	sl, r7
 8000864:	46b1      	mov	r9, r6
 8000866:	46a8      	mov	r8, r5
 8000868:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800086a:	2203      	movs	r2, #3
 800086c:	4316      	orrs	r6, r2
 800086e:	4642      	mov	r2, r8
 8000870:	3501      	adds	r5, #1
 8000872:	407a      	eors	r2, r7
 8000874:	b2d2      	uxtb	r2, r2
 8000876:	35ff      	adds	r5, #255	; 0xff
 8000878:	2e0a      	cmp	r6, #10
 800087a:	dd00      	ble.n	800087e <__aeabi_fmul+0xca>
 800087c:	e0e4      	b.n	8000a48 <__aeabi_fmul+0x294>
 800087e:	2003      	movs	r0, #3
 8000880:	2101      	movs	r1, #1
 8000882:	40b1      	lsls	r1, r6
 8000884:	26a6      	movs	r6, #166	; 0xa6
 8000886:	00f6      	lsls	r6, r6, #3
 8000888:	4231      	tst	r1, r6
 800088a:	d10a      	bne.n	80008a2 <__aeabi_fmul+0xee>
 800088c:	2690      	movs	r6, #144	; 0x90
 800088e:	00b6      	lsls	r6, r6, #2
 8000890:	4231      	tst	r1, r6
 8000892:	d116      	bne.n	80008c2 <__aeabi_fmul+0x10e>
 8000894:	3eb9      	subs	r6, #185	; 0xb9
 8000896:	3eff      	subs	r6, #255	; 0xff
 8000898:	420e      	tst	r6, r1
 800089a:	d01a      	beq.n	80008d2 <__aeabi_fmul+0x11e>
 800089c:	46a1      	mov	r9, r4
 800089e:	4682      	mov	sl, r0
 80008a0:	e000      	b.n	80008a4 <__aeabi_fmul+0xf0>
 80008a2:	0017      	movs	r7, r2
 80008a4:	4653      	mov	r3, sl
 80008a6:	003a      	movs	r2, r7
 80008a8:	2b02      	cmp	r3, #2
 80008aa:	d00f      	beq.n	80008cc <__aeabi_fmul+0x118>
 80008ac:	464c      	mov	r4, r9
 80008ae:	4650      	mov	r0, sl
 80008b0:	2803      	cmp	r0, #3
 80008b2:	d1cd      	bne.n	8000850 <__aeabi_fmul+0x9c>
 80008b4:	2180      	movs	r1, #128	; 0x80
 80008b6:	03c9      	lsls	r1, r1, #15
 80008b8:	4321      	orrs	r1, r4
 80008ba:	0249      	lsls	r1, r1, #9
 80008bc:	20ff      	movs	r0, #255	; 0xff
 80008be:	0a49      	lsrs	r1, r1, #9
 80008c0:	e7ca      	b.n	8000858 <__aeabi_fmul+0xa4>
 80008c2:	2180      	movs	r1, #128	; 0x80
 80008c4:	2200      	movs	r2, #0
 80008c6:	20ff      	movs	r0, #255	; 0xff
 80008c8:	03c9      	lsls	r1, r1, #15
 80008ca:	e7c5      	b.n	8000858 <__aeabi_fmul+0xa4>
 80008cc:	20ff      	movs	r0, #255	; 0xff
 80008ce:	2100      	movs	r1, #0
 80008d0:	e7c2      	b.n	8000858 <__aeabi_fmul+0xa4>
 80008d2:	0c20      	lsrs	r0, r4, #16
 80008d4:	4649      	mov	r1, r9
 80008d6:	0424      	lsls	r4, r4, #16
 80008d8:	0c24      	lsrs	r4, r4, #16
 80008da:	0027      	movs	r7, r4
 80008dc:	0c0e      	lsrs	r6, r1, #16
 80008de:	0409      	lsls	r1, r1, #16
 80008e0:	0c09      	lsrs	r1, r1, #16
 80008e2:	4374      	muls	r4, r6
 80008e4:	434f      	muls	r7, r1
 80008e6:	4346      	muls	r6, r0
 80008e8:	4348      	muls	r0, r1
 80008ea:	0c39      	lsrs	r1, r7, #16
 80008ec:	1900      	adds	r0, r0, r4
 80008ee:	1809      	adds	r1, r1, r0
 80008f0:	428c      	cmp	r4, r1
 80008f2:	d903      	bls.n	80008fc <__aeabi_fmul+0x148>
 80008f4:	2080      	movs	r0, #128	; 0x80
 80008f6:	0240      	lsls	r0, r0, #9
 80008f8:	4684      	mov	ip, r0
 80008fa:	4466      	add	r6, ip
 80008fc:	043f      	lsls	r7, r7, #16
 80008fe:	0408      	lsls	r0, r1, #16
 8000900:	0c3f      	lsrs	r7, r7, #16
 8000902:	19c0      	adds	r0, r0, r7
 8000904:	0184      	lsls	r4, r0, #6
 8000906:	1e67      	subs	r7, r4, #1
 8000908:	41bc      	sbcs	r4, r7
 800090a:	0c09      	lsrs	r1, r1, #16
 800090c:	0e80      	lsrs	r0, r0, #26
 800090e:	1989      	adds	r1, r1, r6
 8000910:	4304      	orrs	r4, r0
 8000912:	0189      	lsls	r1, r1, #6
 8000914:	430c      	orrs	r4, r1
 8000916:	0109      	lsls	r1, r1, #4
 8000918:	d571      	bpl.n	80009fe <__aeabi_fmul+0x24a>
 800091a:	2301      	movs	r3, #1
 800091c:	0861      	lsrs	r1, r4, #1
 800091e:	401c      	ands	r4, r3
 8000920:	430c      	orrs	r4, r1
 8000922:	002b      	movs	r3, r5
 8000924:	337f      	adds	r3, #127	; 0x7f
 8000926:	2b00      	cmp	r3, #0
 8000928:	dd51      	ble.n	80009ce <__aeabi_fmul+0x21a>
 800092a:	0761      	lsls	r1, r4, #29
 800092c:	d004      	beq.n	8000938 <__aeabi_fmul+0x184>
 800092e:	210f      	movs	r1, #15
 8000930:	4021      	ands	r1, r4
 8000932:	2904      	cmp	r1, #4
 8000934:	d000      	beq.n	8000938 <__aeabi_fmul+0x184>
 8000936:	3404      	adds	r4, #4
 8000938:	0121      	lsls	r1, r4, #4
 800093a:	d503      	bpl.n	8000944 <__aeabi_fmul+0x190>
 800093c:	4b43      	ldr	r3, [pc, #268]	; (8000a4c <__aeabi_fmul+0x298>)
 800093e:	401c      	ands	r4, r3
 8000940:	002b      	movs	r3, r5
 8000942:	3380      	adds	r3, #128	; 0x80
 8000944:	2bfe      	cmp	r3, #254	; 0xfe
 8000946:	dcc1      	bgt.n	80008cc <__aeabi_fmul+0x118>
 8000948:	01a1      	lsls	r1, r4, #6
 800094a:	0a49      	lsrs	r1, r1, #9
 800094c:	b2d8      	uxtb	r0, r3
 800094e:	e783      	b.n	8000858 <__aeabi_fmul+0xa4>
 8000950:	2c00      	cmp	r4, #0
 8000952:	d12c      	bne.n	80009ae <__aeabi_fmul+0x1fa>
 8000954:	2301      	movs	r3, #1
 8000956:	4642      	mov	r2, r8
 8000958:	431e      	orrs	r6, r3
 800095a:	002b      	movs	r3, r5
 800095c:	407a      	eors	r2, r7
 800095e:	2001      	movs	r0, #1
 8000960:	b2d2      	uxtb	r2, r2
 8000962:	1c5d      	adds	r5, r3, #1
 8000964:	2e0a      	cmp	r6, #10
 8000966:	dd00      	ble.n	800096a <__aeabi_fmul+0x1b6>
 8000968:	e757      	b.n	800081a <__aeabi_fmul+0x66>
 800096a:	e76a      	b.n	8000842 <__aeabi_fmul+0x8e>
 800096c:	2b00      	cmp	r3, #0
 800096e:	d110      	bne.n	8000992 <__aeabi_fmul+0x1de>
 8000970:	2301      	movs	r3, #1
 8000972:	2604      	movs	r6, #4
 8000974:	2500      	movs	r5, #0
 8000976:	469a      	mov	sl, r3
 8000978:	e738      	b.n	80007ec <__aeabi_fmul+0x38>
 800097a:	2b00      	cmp	r3, #0
 800097c:	d104      	bne.n	8000988 <__aeabi_fmul+0x1d4>
 800097e:	2302      	movs	r3, #2
 8000980:	2608      	movs	r6, #8
 8000982:	25ff      	movs	r5, #255	; 0xff
 8000984:	469a      	mov	sl, r3
 8000986:	e731      	b.n	80007ec <__aeabi_fmul+0x38>
 8000988:	2303      	movs	r3, #3
 800098a:	260c      	movs	r6, #12
 800098c:	25ff      	movs	r5, #255	; 0xff
 800098e:	469a      	mov	sl, r3
 8000990:	e72c      	b.n	80007ec <__aeabi_fmul+0x38>
 8000992:	4648      	mov	r0, r9
 8000994:	f001 ffc4 	bl	8002920 <__clzsi2>
 8000998:	464a      	mov	r2, r9
 800099a:	1f43      	subs	r3, r0, #5
 800099c:	2576      	movs	r5, #118	; 0x76
 800099e:	409a      	lsls	r2, r3
 80009a0:	2300      	movs	r3, #0
 80009a2:	426d      	negs	r5, r5
 80009a4:	4691      	mov	r9, r2
 80009a6:	2600      	movs	r6, #0
 80009a8:	469a      	mov	sl, r3
 80009aa:	1a2d      	subs	r5, r5, r0
 80009ac:	e71e      	b.n	80007ec <__aeabi_fmul+0x38>
 80009ae:	0020      	movs	r0, r4
 80009b0:	f001 ffb6 	bl	8002920 <__clzsi2>
 80009b4:	4642      	mov	r2, r8
 80009b6:	1f43      	subs	r3, r0, #5
 80009b8:	409c      	lsls	r4, r3
 80009ba:	1a2b      	subs	r3, r5, r0
 80009bc:	3b76      	subs	r3, #118	; 0x76
 80009be:	407a      	eors	r2, r7
 80009c0:	2000      	movs	r0, #0
 80009c2:	b2d2      	uxtb	r2, r2
 80009c4:	1c5d      	adds	r5, r3, #1
 80009c6:	2e0a      	cmp	r6, #10
 80009c8:	dd00      	ble.n	80009cc <__aeabi_fmul+0x218>
 80009ca:	e726      	b.n	800081a <__aeabi_fmul+0x66>
 80009cc:	e739      	b.n	8000842 <__aeabi_fmul+0x8e>
 80009ce:	2101      	movs	r1, #1
 80009d0:	1acb      	subs	r3, r1, r3
 80009d2:	2b1b      	cmp	r3, #27
 80009d4:	dd00      	ble.n	80009d8 <__aeabi_fmul+0x224>
 80009d6:	e73d      	b.n	8000854 <__aeabi_fmul+0xa0>
 80009d8:	359e      	adds	r5, #158	; 0x9e
 80009da:	0021      	movs	r1, r4
 80009dc:	40ac      	lsls	r4, r5
 80009de:	40d9      	lsrs	r1, r3
 80009e0:	1e63      	subs	r3, r4, #1
 80009e2:	419c      	sbcs	r4, r3
 80009e4:	4321      	orrs	r1, r4
 80009e6:	074b      	lsls	r3, r1, #29
 80009e8:	d004      	beq.n	80009f4 <__aeabi_fmul+0x240>
 80009ea:	230f      	movs	r3, #15
 80009ec:	400b      	ands	r3, r1
 80009ee:	2b04      	cmp	r3, #4
 80009f0:	d000      	beq.n	80009f4 <__aeabi_fmul+0x240>
 80009f2:	3104      	adds	r1, #4
 80009f4:	014b      	lsls	r3, r1, #5
 80009f6:	d504      	bpl.n	8000a02 <__aeabi_fmul+0x24e>
 80009f8:	2001      	movs	r0, #1
 80009fa:	2100      	movs	r1, #0
 80009fc:	e72c      	b.n	8000858 <__aeabi_fmul+0xa4>
 80009fe:	001d      	movs	r5, r3
 8000a00:	e78f      	b.n	8000922 <__aeabi_fmul+0x16e>
 8000a02:	0189      	lsls	r1, r1, #6
 8000a04:	2000      	movs	r0, #0
 8000a06:	0a49      	lsrs	r1, r1, #9
 8000a08:	e726      	b.n	8000858 <__aeabi_fmul+0xa4>
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	2e0f      	cmp	r6, #15
 8000a0e:	d10c      	bne.n	8000a2a <__aeabi_fmul+0x276>
 8000a10:	2180      	movs	r1, #128	; 0x80
 8000a12:	464b      	mov	r3, r9
 8000a14:	03c9      	lsls	r1, r1, #15
 8000a16:	420b      	tst	r3, r1
 8000a18:	d00d      	beq.n	8000a36 <__aeabi_fmul+0x282>
 8000a1a:	420c      	tst	r4, r1
 8000a1c:	d10b      	bne.n	8000a36 <__aeabi_fmul+0x282>
 8000a1e:	4321      	orrs	r1, r4
 8000a20:	0249      	lsls	r1, r1, #9
 8000a22:	003a      	movs	r2, r7
 8000a24:	20ff      	movs	r0, #255	; 0xff
 8000a26:	0a49      	lsrs	r1, r1, #9
 8000a28:	e716      	b.n	8000858 <__aeabi_fmul+0xa4>
 8000a2a:	2e0b      	cmp	r6, #11
 8000a2c:	d000      	beq.n	8000a30 <__aeabi_fmul+0x27c>
 8000a2e:	e6f7      	b.n	8000820 <__aeabi_fmul+0x6c>
 8000a30:	46a1      	mov	r9, r4
 8000a32:	469a      	mov	sl, r3
 8000a34:	e736      	b.n	80008a4 <__aeabi_fmul+0xf0>
 8000a36:	2180      	movs	r1, #128	; 0x80
 8000a38:	464b      	mov	r3, r9
 8000a3a:	03c9      	lsls	r1, r1, #15
 8000a3c:	4319      	orrs	r1, r3
 8000a3e:	0249      	lsls	r1, r1, #9
 8000a40:	4642      	mov	r2, r8
 8000a42:	20ff      	movs	r0, #255	; 0xff
 8000a44:	0a49      	lsrs	r1, r1, #9
 8000a46:	e707      	b.n	8000858 <__aeabi_fmul+0xa4>
 8000a48:	2303      	movs	r3, #3
 8000a4a:	e7df      	b.n	8000a0c <__aeabi_fmul+0x258>
 8000a4c:	f7ffffff 	.word	0xf7ffffff

08000a50 <__aeabi_i2f>:
 8000a50:	b570      	push	{r4, r5, r6, lr}
 8000a52:	2800      	cmp	r0, #0
 8000a54:	d013      	beq.n	8000a7e <__aeabi_i2f+0x2e>
 8000a56:	17c3      	asrs	r3, r0, #31
 8000a58:	18c5      	adds	r5, r0, r3
 8000a5a:	405d      	eors	r5, r3
 8000a5c:	0fc4      	lsrs	r4, r0, #31
 8000a5e:	0028      	movs	r0, r5
 8000a60:	f001 ff5e 	bl	8002920 <__clzsi2>
 8000a64:	239e      	movs	r3, #158	; 0x9e
 8000a66:	0001      	movs	r1, r0
 8000a68:	1a1b      	subs	r3, r3, r0
 8000a6a:	2b96      	cmp	r3, #150	; 0x96
 8000a6c:	dc0f      	bgt.n	8000a8e <__aeabi_i2f+0x3e>
 8000a6e:	2808      	cmp	r0, #8
 8000a70:	d031      	beq.n	8000ad6 <__aeabi_i2f+0x86>
 8000a72:	3908      	subs	r1, #8
 8000a74:	408d      	lsls	r5, r1
 8000a76:	026d      	lsls	r5, r5, #9
 8000a78:	0a6d      	lsrs	r5, r5, #9
 8000a7a:	b2d8      	uxtb	r0, r3
 8000a7c:	e002      	b.n	8000a84 <__aeabi_i2f+0x34>
 8000a7e:	2400      	movs	r4, #0
 8000a80:	2000      	movs	r0, #0
 8000a82:	2500      	movs	r5, #0
 8000a84:	05c0      	lsls	r0, r0, #23
 8000a86:	4328      	orrs	r0, r5
 8000a88:	07e4      	lsls	r4, r4, #31
 8000a8a:	4320      	orrs	r0, r4
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	2b99      	cmp	r3, #153	; 0x99
 8000a90:	dd0c      	ble.n	8000aac <__aeabi_i2f+0x5c>
 8000a92:	2205      	movs	r2, #5
 8000a94:	1a12      	subs	r2, r2, r0
 8000a96:	0028      	movs	r0, r5
 8000a98:	40d0      	lsrs	r0, r2
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	0008      	movs	r0, r1
 8000a9e:	301b      	adds	r0, #27
 8000aa0:	4085      	lsls	r5, r0
 8000aa2:	0028      	movs	r0, r5
 8000aa4:	1e45      	subs	r5, r0, #1
 8000aa6:	41a8      	sbcs	r0, r5
 8000aa8:	4302      	orrs	r2, r0
 8000aaa:	0015      	movs	r5, r2
 8000aac:	2905      	cmp	r1, #5
 8000aae:	dc16      	bgt.n	8000ade <__aeabi_i2f+0x8e>
 8000ab0:	002a      	movs	r2, r5
 8000ab2:	480f      	ldr	r0, [pc, #60]	; (8000af0 <__aeabi_i2f+0xa0>)
 8000ab4:	4002      	ands	r2, r0
 8000ab6:	076e      	lsls	r6, r5, #29
 8000ab8:	d009      	beq.n	8000ace <__aeabi_i2f+0x7e>
 8000aba:	260f      	movs	r6, #15
 8000abc:	4035      	ands	r5, r6
 8000abe:	2d04      	cmp	r5, #4
 8000ac0:	d005      	beq.n	8000ace <__aeabi_i2f+0x7e>
 8000ac2:	3204      	adds	r2, #4
 8000ac4:	0155      	lsls	r5, r2, #5
 8000ac6:	d502      	bpl.n	8000ace <__aeabi_i2f+0x7e>
 8000ac8:	239f      	movs	r3, #159	; 0x9f
 8000aca:	4002      	ands	r2, r0
 8000acc:	1a5b      	subs	r3, r3, r1
 8000ace:	0192      	lsls	r2, r2, #6
 8000ad0:	0a55      	lsrs	r5, r2, #9
 8000ad2:	b2d8      	uxtb	r0, r3
 8000ad4:	e7d6      	b.n	8000a84 <__aeabi_i2f+0x34>
 8000ad6:	026d      	lsls	r5, r5, #9
 8000ad8:	2096      	movs	r0, #150	; 0x96
 8000ada:	0a6d      	lsrs	r5, r5, #9
 8000adc:	e7d2      	b.n	8000a84 <__aeabi_i2f+0x34>
 8000ade:	1f4a      	subs	r2, r1, #5
 8000ae0:	4095      	lsls	r5, r2
 8000ae2:	002a      	movs	r2, r5
 8000ae4:	4802      	ldr	r0, [pc, #8]	; (8000af0 <__aeabi_i2f+0xa0>)
 8000ae6:	4002      	ands	r2, r0
 8000ae8:	076e      	lsls	r6, r5, #29
 8000aea:	d0f0      	beq.n	8000ace <__aeabi_i2f+0x7e>
 8000aec:	e7e5      	b.n	8000aba <__aeabi_i2f+0x6a>
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	fbffffff 	.word	0xfbffffff

08000af4 <__aeabi_dadd>:
 8000af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af6:	464f      	mov	r7, r9
 8000af8:	4646      	mov	r6, r8
 8000afa:	46d6      	mov	lr, sl
 8000afc:	0004      	movs	r4, r0
 8000afe:	b5c0      	push	{r6, r7, lr}
 8000b00:	001f      	movs	r7, r3
 8000b02:	030b      	lsls	r3, r1, #12
 8000b04:	0010      	movs	r0, r2
 8000b06:	004e      	lsls	r6, r1, #1
 8000b08:	0a5b      	lsrs	r3, r3, #9
 8000b0a:	0fcd      	lsrs	r5, r1, #31
 8000b0c:	0f61      	lsrs	r1, r4, #29
 8000b0e:	007a      	lsls	r2, r7, #1
 8000b10:	4319      	orrs	r1, r3
 8000b12:	00e3      	lsls	r3, r4, #3
 8000b14:	033c      	lsls	r4, r7, #12
 8000b16:	0fff      	lsrs	r7, r7, #31
 8000b18:	46bc      	mov	ip, r7
 8000b1a:	0a64      	lsrs	r4, r4, #9
 8000b1c:	0f47      	lsrs	r7, r0, #29
 8000b1e:	4327      	orrs	r7, r4
 8000b20:	0d76      	lsrs	r6, r6, #21
 8000b22:	0d52      	lsrs	r2, r2, #21
 8000b24:	00c0      	lsls	r0, r0, #3
 8000b26:	46b9      	mov	r9, r7
 8000b28:	4680      	mov	r8, r0
 8000b2a:	1ab7      	subs	r7, r6, r2
 8000b2c:	4565      	cmp	r5, ip
 8000b2e:	d100      	bne.n	8000b32 <__aeabi_dadd+0x3e>
 8000b30:	e09b      	b.n	8000c6a <__aeabi_dadd+0x176>
 8000b32:	2f00      	cmp	r7, #0
 8000b34:	dc00      	bgt.n	8000b38 <__aeabi_dadd+0x44>
 8000b36:	e084      	b.n	8000c42 <__aeabi_dadd+0x14e>
 8000b38:	2a00      	cmp	r2, #0
 8000b3a:	d100      	bne.n	8000b3e <__aeabi_dadd+0x4a>
 8000b3c:	e0be      	b.n	8000cbc <__aeabi_dadd+0x1c8>
 8000b3e:	4ac8      	ldr	r2, [pc, #800]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000b40:	4296      	cmp	r6, r2
 8000b42:	d100      	bne.n	8000b46 <__aeabi_dadd+0x52>
 8000b44:	e124      	b.n	8000d90 <__aeabi_dadd+0x29c>
 8000b46:	2280      	movs	r2, #128	; 0x80
 8000b48:	464c      	mov	r4, r9
 8000b4a:	0412      	lsls	r2, r2, #16
 8000b4c:	4314      	orrs	r4, r2
 8000b4e:	46a1      	mov	r9, r4
 8000b50:	2f38      	cmp	r7, #56	; 0x38
 8000b52:	dd00      	ble.n	8000b56 <__aeabi_dadd+0x62>
 8000b54:	e167      	b.n	8000e26 <__aeabi_dadd+0x332>
 8000b56:	2f1f      	cmp	r7, #31
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_dadd+0x68>
 8000b5a:	e1d6      	b.n	8000f0a <__aeabi_dadd+0x416>
 8000b5c:	2220      	movs	r2, #32
 8000b5e:	464c      	mov	r4, r9
 8000b60:	1bd2      	subs	r2, r2, r7
 8000b62:	4094      	lsls	r4, r2
 8000b64:	46a2      	mov	sl, r4
 8000b66:	4644      	mov	r4, r8
 8000b68:	40fc      	lsrs	r4, r7
 8000b6a:	0020      	movs	r0, r4
 8000b6c:	4654      	mov	r4, sl
 8000b6e:	4304      	orrs	r4, r0
 8000b70:	4640      	mov	r0, r8
 8000b72:	4090      	lsls	r0, r2
 8000b74:	1e42      	subs	r2, r0, #1
 8000b76:	4190      	sbcs	r0, r2
 8000b78:	464a      	mov	r2, r9
 8000b7a:	40fa      	lsrs	r2, r7
 8000b7c:	4304      	orrs	r4, r0
 8000b7e:	1a89      	subs	r1, r1, r2
 8000b80:	1b1c      	subs	r4, r3, r4
 8000b82:	42a3      	cmp	r3, r4
 8000b84:	4192      	sbcs	r2, r2
 8000b86:	4252      	negs	r2, r2
 8000b88:	1a8b      	subs	r3, r1, r2
 8000b8a:	469a      	mov	sl, r3
 8000b8c:	4653      	mov	r3, sl
 8000b8e:	021b      	lsls	r3, r3, #8
 8000b90:	d400      	bmi.n	8000b94 <__aeabi_dadd+0xa0>
 8000b92:	e0d4      	b.n	8000d3e <__aeabi_dadd+0x24a>
 8000b94:	4653      	mov	r3, sl
 8000b96:	025a      	lsls	r2, r3, #9
 8000b98:	0a53      	lsrs	r3, r2, #9
 8000b9a:	469a      	mov	sl, r3
 8000b9c:	4653      	mov	r3, sl
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d100      	bne.n	8000ba4 <__aeabi_dadd+0xb0>
 8000ba2:	e104      	b.n	8000dae <__aeabi_dadd+0x2ba>
 8000ba4:	4650      	mov	r0, sl
 8000ba6:	f001 febb 	bl	8002920 <__clzsi2>
 8000baa:	0003      	movs	r3, r0
 8000bac:	3b08      	subs	r3, #8
 8000bae:	2220      	movs	r2, #32
 8000bb0:	0020      	movs	r0, r4
 8000bb2:	1ad2      	subs	r2, r2, r3
 8000bb4:	4651      	mov	r1, sl
 8000bb6:	40d0      	lsrs	r0, r2
 8000bb8:	4099      	lsls	r1, r3
 8000bba:	0002      	movs	r2, r0
 8000bbc:	409c      	lsls	r4, r3
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	42b3      	cmp	r3, r6
 8000bc2:	da00      	bge.n	8000bc6 <__aeabi_dadd+0xd2>
 8000bc4:	e102      	b.n	8000dcc <__aeabi_dadd+0x2d8>
 8000bc6:	1b9b      	subs	r3, r3, r6
 8000bc8:	1c59      	adds	r1, r3, #1
 8000bca:	291f      	cmp	r1, #31
 8000bcc:	dd00      	ble.n	8000bd0 <__aeabi_dadd+0xdc>
 8000bce:	e0a7      	b.n	8000d20 <__aeabi_dadd+0x22c>
 8000bd0:	2320      	movs	r3, #32
 8000bd2:	0010      	movs	r0, r2
 8000bd4:	0026      	movs	r6, r4
 8000bd6:	1a5b      	subs	r3, r3, r1
 8000bd8:	409c      	lsls	r4, r3
 8000bda:	4098      	lsls	r0, r3
 8000bdc:	40ce      	lsrs	r6, r1
 8000bde:	40ca      	lsrs	r2, r1
 8000be0:	1e63      	subs	r3, r4, #1
 8000be2:	419c      	sbcs	r4, r3
 8000be4:	4330      	orrs	r0, r6
 8000be6:	4692      	mov	sl, r2
 8000be8:	2600      	movs	r6, #0
 8000bea:	4304      	orrs	r4, r0
 8000bec:	0763      	lsls	r3, r4, #29
 8000bee:	d009      	beq.n	8000c04 <__aeabi_dadd+0x110>
 8000bf0:	230f      	movs	r3, #15
 8000bf2:	4023      	ands	r3, r4
 8000bf4:	2b04      	cmp	r3, #4
 8000bf6:	d005      	beq.n	8000c04 <__aeabi_dadd+0x110>
 8000bf8:	1d23      	adds	r3, r4, #4
 8000bfa:	42a3      	cmp	r3, r4
 8000bfc:	41a4      	sbcs	r4, r4
 8000bfe:	4264      	negs	r4, r4
 8000c00:	44a2      	add	sl, r4
 8000c02:	001c      	movs	r4, r3
 8000c04:	4653      	mov	r3, sl
 8000c06:	021b      	lsls	r3, r3, #8
 8000c08:	d400      	bmi.n	8000c0c <__aeabi_dadd+0x118>
 8000c0a:	e09b      	b.n	8000d44 <__aeabi_dadd+0x250>
 8000c0c:	4b94      	ldr	r3, [pc, #592]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000c0e:	3601      	adds	r6, #1
 8000c10:	429e      	cmp	r6, r3
 8000c12:	d100      	bne.n	8000c16 <__aeabi_dadd+0x122>
 8000c14:	e0b8      	b.n	8000d88 <__aeabi_dadd+0x294>
 8000c16:	4653      	mov	r3, sl
 8000c18:	4992      	ldr	r1, [pc, #584]	; (8000e64 <__aeabi_dadd+0x370>)
 8000c1a:	08e4      	lsrs	r4, r4, #3
 8000c1c:	400b      	ands	r3, r1
 8000c1e:	0019      	movs	r1, r3
 8000c20:	075b      	lsls	r3, r3, #29
 8000c22:	4323      	orrs	r3, r4
 8000c24:	0572      	lsls	r2, r6, #21
 8000c26:	024c      	lsls	r4, r1, #9
 8000c28:	0b24      	lsrs	r4, r4, #12
 8000c2a:	0d52      	lsrs	r2, r2, #21
 8000c2c:	0512      	lsls	r2, r2, #20
 8000c2e:	07ed      	lsls	r5, r5, #31
 8000c30:	4322      	orrs	r2, r4
 8000c32:	432a      	orrs	r2, r5
 8000c34:	0018      	movs	r0, r3
 8000c36:	0011      	movs	r1, r2
 8000c38:	bce0      	pop	{r5, r6, r7}
 8000c3a:	46ba      	mov	sl, r7
 8000c3c:	46b1      	mov	r9, r6
 8000c3e:	46a8      	mov	r8, r5
 8000c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c42:	2f00      	cmp	r7, #0
 8000c44:	d048      	beq.n	8000cd8 <__aeabi_dadd+0x1e4>
 8000c46:	1b97      	subs	r7, r2, r6
 8000c48:	2e00      	cmp	r6, #0
 8000c4a:	d000      	beq.n	8000c4e <__aeabi_dadd+0x15a>
 8000c4c:	e10e      	b.n	8000e6c <__aeabi_dadd+0x378>
 8000c4e:	000c      	movs	r4, r1
 8000c50:	431c      	orrs	r4, r3
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dadd+0x162>
 8000c54:	e1b7      	b.n	8000fc6 <__aeabi_dadd+0x4d2>
 8000c56:	1e7c      	subs	r4, r7, #1
 8000c58:	2f01      	cmp	r7, #1
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x16a>
 8000c5c:	e226      	b.n	80010ac <__aeabi_dadd+0x5b8>
 8000c5e:	4d80      	ldr	r5, [pc, #512]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000c60:	42af      	cmp	r7, r5
 8000c62:	d100      	bne.n	8000c66 <__aeabi_dadd+0x172>
 8000c64:	e1d5      	b.n	8001012 <__aeabi_dadd+0x51e>
 8000c66:	0027      	movs	r7, r4
 8000c68:	e107      	b.n	8000e7a <__aeabi_dadd+0x386>
 8000c6a:	2f00      	cmp	r7, #0
 8000c6c:	dc00      	bgt.n	8000c70 <__aeabi_dadd+0x17c>
 8000c6e:	e0b2      	b.n	8000dd6 <__aeabi_dadd+0x2e2>
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	d047      	beq.n	8000d04 <__aeabi_dadd+0x210>
 8000c74:	4a7a      	ldr	r2, [pc, #488]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000c76:	4296      	cmp	r6, r2
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dadd+0x188>
 8000c7a:	e089      	b.n	8000d90 <__aeabi_dadd+0x29c>
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	464c      	mov	r4, r9
 8000c80:	0412      	lsls	r2, r2, #16
 8000c82:	4314      	orrs	r4, r2
 8000c84:	46a1      	mov	r9, r4
 8000c86:	2f38      	cmp	r7, #56	; 0x38
 8000c88:	dc6b      	bgt.n	8000d62 <__aeabi_dadd+0x26e>
 8000c8a:	2f1f      	cmp	r7, #31
 8000c8c:	dc00      	bgt.n	8000c90 <__aeabi_dadd+0x19c>
 8000c8e:	e16e      	b.n	8000f6e <__aeabi_dadd+0x47a>
 8000c90:	003a      	movs	r2, r7
 8000c92:	4648      	mov	r0, r9
 8000c94:	3a20      	subs	r2, #32
 8000c96:	40d0      	lsrs	r0, r2
 8000c98:	4684      	mov	ip, r0
 8000c9a:	2f20      	cmp	r7, #32
 8000c9c:	d007      	beq.n	8000cae <__aeabi_dadd+0x1ba>
 8000c9e:	2240      	movs	r2, #64	; 0x40
 8000ca0:	4648      	mov	r0, r9
 8000ca2:	1bd2      	subs	r2, r2, r7
 8000ca4:	4090      	lsls	r0, r2
 8000ca6:	0002      	movs	r2, r0
 8000ca8:	4640      	mov	r0, r8
 8000caa:	4310      	orrs	r0, r2
 8000cac:	4680      	mov	r8, r0
 8000cae:	4640      	mov	r0, r8
 8000cb0:	1e42      	subs	r2, r0, #1
 8000cb2:	4190      	sbcs	r0, r2
 8000cb4:	4662      	mov	r2, ip
 8000cb6:	0004      	movs	r4, r0
 8000cb8:	4314      	orrs	r4, r2
 8000cba:	e057      	b.n	8000d6c <__aeabi_dadd+0x278>
 8000cbc:	464a      	mov	r2, r9
 8000cbe:	4302      	orrs	r2, r0
 8000cc0:	d100      	bne.n	8000cc4 <__aeabi_dadd+0x1d0>
 8000cc2:	e103      	b.n	8000ecc <__aeabi_dadd+0x3d8>
 8000cc4:	1e7a      	subs	r2, r7, #1
 8000cc6:	2f01      	cmp	r7, #1
 8000cc8:	d100      	bne.n	8000ccc <__aeabi_dadd+0x1d8>
 8000cca:	e193      	b.n	8000ff4 <__aeabi_dadd+0x500>
 8000ccc:	4c64      	ldr	r4, [pc, #400]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000cce:	42a7      	cmp	r7, r4
 8000cd0:	d100      	bne.n	8000cd4 <__aeabi_dadd+0x1e0>
 8000cd2:	e18a      	b.n	8000fea <__aeabi_dadd+0x4f6>
 8000cd4:	0017      	movs	r7, r2
 8000cd6:	e73b      	b.n	8000b50 <__aeabi_dadd+0x5c>
 8000cd8:	4c63      	ldr	r4, [pc, #396]	; (8000e68 <__aeabi_dadd+0x374>)
 8000cda:	1c72      	adds	r2, r6, #1
 8000cdc:	4222      	tst	r2, r4
 8000cde:	d000      	beq.n	8000ce2 <__aeabi_dadd+0x1ee>
 8000ce0:	e0e0      	b.n	8000ea4 <__aeabi_dadd+0x3b0>
 8000ce2:	000a      	movs	r2, r1
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	2e00      	cmp	r6, #0
 8000ce8:	d000      	beq.n	8000cec <__aeabi_dadd+0x1f8>
 8000cea:	e174      	b.n	8000fd6 <__aeabi_dadd+0x4e2>
 8000cec:	2a00      	cmp	r2, #0
 8000cee:	d100      	bne.n	8000cf2 <__aeabi_dadd+0x1fe>
 8000cf0:	e1d0      	b.n	8001094 <__aeabi_dadd+0x5a0>
 8000cf2:	464a      	mov	r2, r9
 8000cf4:	4302      	orrs	r2, r0
 8000cf6:	d000      	beq.n	8000cfa <__aeabi_dadd+0x206>
 8000cf8:	e1e3      	b.n	80010c2 <__aeabi_dadd+0x5ce>
 8000cfa:	074a      	lsls	r2, r1, #29
 8000cfc:	08db      	lsrs	r3, r3, #3
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	08c9      	lsrs	r1, r1, #3
 8000d02:	e029      	b.n	8000d58 <__aeabi_dadd+0x264>
 8000d04:	464a      	mov	r2, r9
 8000d06:	4302      	orrs	r2, r0
 8000d08:	d100      	bne.n	8000d0c <__aeabi_dadd+0x218>
 8000d0a:	e17d      	b.n	8001008 <__aeabi_dadd+0x514>
 8000d0c:	1e7a      	subs	r2, r7, #1
 8000d0e:	2f01      	cmp	r7, #1
 8000d10:	d100      	bne.n	8000d14 <__aeabi_dadd+0x220>
 8000d12:	e0e0      	b.n	8000ed6 <__aeabi_dadd+0x3e2>
 8000d14:	4c52      	ldr	r4, [pc, #328]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000d16:	42a7      	cmp	r7, r4
 8000d18:	d100      	bne.n	8000d1c <__aeabi_dadd+0x228>
 8000d1a:	e166      	b.n	8000fea <__aeabi_dadd+0x4f6>
 8000d1c:	0017      	movs	r7, r2
 8000d1e:	e7b2      	b.n	8000c86 <__aeabi_dadd+0x192>
 8000d20:	0010      	movs	r0, r2
 8000d22:	3b1f      	subs	r3, #31
 8000d24:	40d8      	lsrs	r0, r3
 8000d26:	2920      	cmp	r1, #32
 8000d28:	d003      	beq.n	8000d32 <__aeabi_dadd+0x23e>
 8000d2a:	2340      	movs	r3, #64	; 0x40
 8000d2c:	1a5b      	subs	r3, r3, r1
 8000d2e:	409a      	lsls	r2, r3
 8000d30:	4314      	orrs	r4, r2
 8000d32:	1e63      	subs	r3, r4, #1
 8000d34:	419c      	sbcs	r4, r3
 8000d36:	2300      	movs	r3, #0
 8000d38:	2600      	movs	r6, #0
 8000d3a:	469a      	mov	sl, r3
 8000d3c:	4304      	orrs	r4, r0
 8000d3e:	0763      	lsls	r3, r4, #29
 8000d40:	d000      	beq.n	8000d44 <__aeabi_dadd+0x250>
 8000d42:	e755      	b.n	8000bf0 <__aeabi_dadd+0xfc>
 8000d44:	4652      	mov	r2, sl
 8000d46:	08e3      	lsrs	r3, r4, #3
 8000d48:	0752      	lsls	r2, r2, #29
 8000d4a:	4313      	orrs	r3, r2
 8000d4c:	4652      	mov	r2, sl
 8000d4e:	0037      	movs	r7, r6
 8000d50:	08d1      	lsrs	r1, r2, #3
 8000d52:	4a43      	ldr	r2, [pc, #268]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000d54:	4297      	cmp	r7, r2
 8000d56:	d01f      	beq.n	8000d98 <__aeabi_dadd+0x2a4>
 8000d58:	0309      	lsls	r1, r1, #12
 8000d5a:	057a      	lsls	r2, r7, #21
 8000d5c:	0b0c      	lsrs	r4, r1, #12
 8000d5e:	0d52      	lsrs	r2, r2, #21
 8000d60:	e764      	b.n	8000c2c <__aeabi_dadd+0x138>
 8000d62:	4642      	mov	r2, r8
 8000d64:	464c      	mov	r4, r9
 8000d66:	4314      	orrs	r4, r2
 8000d68:	1e62      	subs	r2, r4, #1
 8000d6a:	4194      	sbcs	r4, r2
 8000d6c:	18e4      	adds	r4, r4, r3
 8000d6e:	429c      	cmp	r4, r3
 8000d70:	4192      	sbcs	r2, r2
 8000d72:	4252      	negs	r2, r2
 8000d74:	4692      	mov	sl, r2
 8000d76:	448a      	add	sl, r1
 8000d78:	4653      	mov	r3, sl
 8000d7a:	021b      	lsls	r3, r3, #8
 8000d7c:	d5df      	bpl.n	8000d3e <__aeabi_dadd+0x24a>
 8000d7e:	4b38      	ldr	r3, [pc, #224]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000d80:	3601      	adds	r6, #1
 8000d82:	429e      	cmp	r6, r3
 8000d84:	d000      	beq.n	8000d88 <__aeabi_dadd+0x294>
 8000d86:	e0b3      	b.n	8000ef0 <__aeabi_dadd+0x3fc>
 8000d88:	0032      	movs	r2, r6
 8000d8a:	2400      	movs	r4, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e74d      	b.n	8000c2c <__aeabi_dadd+0x138>
 8000d90:	074a      	lsls	r2, r1, #29
 8000d92:	08db      	lsrs	r3, r3, #3
 8000d94:	4313      	orrs	r3, r2
 8000d96:	08c9      	lsrs	r1, r1, #3
 8000d98:	001a      	movs	r2, r3
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	d100      	bne.n	8000da0 <__aeabi_dadd+0x2ac>
 8000d9e:	e200      	b.n	80011a2 <__aeabi_dadd+0x6ae>
 8000da0:	2480      	movs	r4, #128	; 0x80
 8000da2:	0324      	lsls	r4, r4, #12
 8000da4:	430c      	orrs	r4, r1
 8000da6:	0324      	lsls	r4, r4, #12
 8000da8:	4a2d      	ldr	r2, [pc, #180]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000daa:	0b24      	lsrs	r4, r4, #12
 8000dac:	e73e      	b.n	8000c2c <__aeabi_dadd+0x138>
 8000dae:	0020      	movs	r0, r4
 8000db0:	f001 fdb6 	bl	8002920 <__clzsi2>
 8000db4:	0003      	movs	r3, r0
 8000db6:	3318      	adds	r3, #24
 8000db8:	2b1f      	cmp	r3, #31
 8000dba:	dc00      	bgt.n	8000dbe <__aeabi_dadd+0x2ca>
 8000dbc:	e6f7      	b.n	8000bae <__aeabi_dadd+0xba>
 8000dbe:	0022      	movs	r2, r4
 8000dc0:	3808      	subs	r0, #8
 8000dc2:	4082      	lsls	r2, r0
 8000dc4:	2400      	movs	r4, #0
 8000dc6:	42b3      	cmp	r3, r6
 8000dc8:	db00      	blt.n	8000dcc <__aeabi_dadd+0x2d8>
 8000dca:	e6fc      	b.n	8000bc6 <__aeabi_dadd+0xd2>
 8000dcc:	1af6      	subs	r6, r6, r3
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <__aeabi_dadd+0x370>)
 8000dd0:	401a      	ands	r2, r3
 8000dd2:	4692      	mov	sl, r2
 8000dd4:	e70a      	b.n	8000bec <__aeabi_dadd+0xf8>
 8000dd6:	2f00      	cmp	r7, #0
 8000dd8:	d02b      	beq.n	8000e32 <__aeabi_dadd+0x33e>
 8000dda:	1b97      	subs	r7, r2, r6
 8000ddc:	2e00      	cmp	r6, #0
 8000dde:	d100      	bne.n	8000de2 <__aeabi_dadd+0x2ee>
 8000de0:	e0b8      	b.n	8000f54 <__aeabi_dadd+0x460>
 8000de2:	4c1f      	ldr	r4, [pc, #124]	; (8000e60 <__aeabi_dadd+0x36c>)
 8000de4:	42a2      	cmp	r2, r4
 8000de6:	d100      	bne.n	8000dea <__aeabi_dadd+0x2f6>
 8000de8:	e11c      	b.n	8001024 <__aeabi_dadd+0x530>
 8000dea:	2480      	movs	r4, #128	; 0x80
 8000dec:	0424      	lsls	r4, r4, #16
 8000dee:	4321      	orrs	r1, r4
 8000df0:	2f38      	cmp	r7, #56	; 0x38
 8000df2:	dd00      	ble.n	8000df6 <__aeabi_dadd+0x302>
 8000df4:	e11e      	b.n	8001034 <__aeabi_dadd+0x540>
 8000df6:	2f1f      	cmp	r7, #31
 8000df8:	dd00      	ble.n	8000dfc <__aeabi_dadd+0x308>
 8000dfa:	e19e      	b.n	800113a <__aeabi_dadd+0x646>
 8000dfc:	2620      	movs	r6, #32
 8000dfe:	000c      	movs	r4, r1
 8000e00:	1bf6      	subs	r6, r6, r7
 8000e02:	0018      	movs	r0, r3
 8000e04:	40b3      	lsls	r3, r6
 8000e06:	40b4      	lsls	r4, r6
 8000e08:	40f8      	lsrs	r0, r7
 8000e0a:	1e5e      	subs	r6, r3, #1
 8000e0c:	41b3      	sbcs	r3, r6
 8000e0e:	40f9      	lsrs	r1, r7
 8000e10:	4304      	orrs	r4, r0
 8000e12:	431c      	orrs	r4, r3
 8000e14:	4489      	add	r9, r1
 8000e16:	4444      	add	r4, r8
 8000e18:	4544      	cmp	r4, r8
 8000e1a:	419b      	sbcs	r3, r3
 8000e1c:	425b      	negs	r3, r3
 8000e1e:	444b      	add	r3, r9
 8000e20:	469a      	mov	sl, r3
 8000e22:	0016      	movs	r6, r2
 8000e24:	e7a8      	b.n	8000d78 <__aeabi_dadd+0x284>
 8000e26:	4642      	mov	r2, r8
 8000e28:	464c      	mov	r4, r9
 8000e2a:	4314      	orrs	r4, r2
 8000e2c:	1e62      	subs	r2, r4, #1
 8000e2e:	4194      	sbcs	r4, r2
 8000e30:	e6a6      	b.n	8000b80 <__aeabi_dadd+0x8c>
 8000e32:	4c0d      	ldr	r4, [pc, #52]	; (8000e68 <__aeabi_dadd+0x374>)
 8000e34:	1c72      	adds	r2, r6, #1
 8000e36:	4222      	tst	r2, r4
 8000e38:	d000      	beq.n	8000e3c <__aeabi_dadd+0x348>
 8000e3a:	e0a8      	b.n	8000f8e <__aeabi_dadd+0x49a>
 8000e3c:	000a      	movs	r2, r1
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	d000      	beq.n	8000e46 <__aeabi_dadd+0x352>
 8000e44:	e10a      	b.n	800105c <__aeabi_dadd+0x568>
 8000e46:	2a00      	cmp	r2, #0
 8000e48:	d100      	bne.n	8000e4c <__aeabi_dadd+0x358>
 8000e4a:	e15e      	b.n	800110a <__aeabi_dadd+0x616>
 8000e4c:	464a      	mov	r2, r9
 8000e4e:	4302      	orrs	r2, r0
 8000e50:	d000      	beq.n	8000e54 <__aeabi_dadd+0x360>
 8000e52:	e161      	b.n	8001118 <__aeabi_dadd+0x624>
 8000e54:	074a      	lsls	r2, r1, #29
 8000e56:	08db      	lsrs	r3, r3, #3
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	08c9      	lsrs	r1, r1, #3
 8000e5c:	e77c      	b.n	8000d58 <__aeabi_dadd+0x264>
 8000e5e:	46c0      	nop			; (mov r8, r8)
 8000e60:	000007ff 	.word	0x000007ff
 8000e64:	ff7fffff 	.word	0xff7fffff
 8000e68:	000007fe 	.word	0x000007fe
 8000e6c:	4ccf      	ldr	r4, [pc, #828]	; (80011ac <__aeabi_dadd+0x6b8>)
 8000e6e:	42a2      	cmp	r2, r4
 8000e70:	d100      	bne.n	8000e74 <__aeabi_dadd+0x380>
 8000e72:	e0ce      	b.n	8001012 <__aeabi_dadd+0x51e>
 8000e74:	2480      	movs	r4, #128	; 0x80
 8000e76:	0424      	lsls	r4, r4, #16
 8000e78:	4321      	orrs	r1, r4
 8000e7a:	2f38      	cmp	r7, #56	; 0x38
 8000e7c:	dc5b      	bgt.n	8000f36 <__aeabi_dadd+0x442>
 8000e7e:	2f1f      	cmp	r7, #31
 8000e80:	dd00      	ble.n	8000e84 <__aeabi_dadd+0x390>
 8000e82:	e0dc      	b.n	800103e <__aeabi_dadd+0x54a>
 8000e84:	2520      	movs	r5, #32
 8000e86:	000c      	movs	r4, r1
 8000e88:	1bed      	subs	r5, r5, r7
 8000e8a:	001e      	movs	r6, r3
 8000e8c:	40ab      	lsls	r3, r5
 8000e8e:	40ac      	lsls	r4, r5
 8000e90:	40fe      	lsrs	r6, r7
 8000e92:	1e5d      	subs	r5, r3, #1
 8000e94:	41ab      	sbcs	r3, r5
 8000e96:	4334      	orrs	r4, r6
 8000e98:	40f9      	lsrs	r1, r7
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	464b      	mov	r3, r9
 8000e9e:	1a5b      	subs	r3, r3, r1
 8000ea0:	4699      	mov	r9, r3
 8000ea2:	e04c      	b.n	8000f3e <__aeabi_dadd+0x44a>
 8000ea4:	464a      	mov	r2, r9
 8000ea6:	1a1c      	subs	r4, r3, r0
 8000ea8:	1a88      	subs	r0, r1, r2
 8000eaa:	42a3      	cmp	r3, r4
 8000eac:	4192      	sbcs	r2, r2
 8000eae:	4252      	negs	r2, r2
 8000eb0:	4692      	mov	sl, r2
 8000eb2:	0002      	movs	r2, r0
 8000eb4:	4650      	mov	r0, sl
 8000eb6:	1a12      	subs	r2, r2, r0
 8000eb8:	4692      	mov	sl, r2
 8000eba:	0212      	lsls	r2, r2, #8
 8000ebc:	d478      	bmi.n	8000fb0 <__aeabi_dadd+0x4bc>
 8000ebe:	4653      	mov	r3, sl
 8000ec0:	4323      	orrs	r3, r4
 8000ec2:	d000      	beq.n	8000ec6 <__aeabi_dadd+0x3d2>
 8000ec4:	e66a      	b.n	8000b9c <__aeabi_dadd+0xa8>
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2500      	movs	r5, #0
 8000eca:	e745      	b.n	8000d58 <__aeabi_dadd+0x264>
 8000ecc:	074a      	lsls	r2, r1, #29
 8000ece:	08db      	lsrs	r3, r3, #3
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	08c9      	lsrs	r1, r1, #3
 8000ed4:	e73d      	b.n	8000d52 <__aeabi_dadd+0x25e>
 8000ed6:	181c      	adds	r4, r3, r0
 8000ed8:	429c      	cmp	r4, r3
 8000eda:	419b      	sbcs	r3, r3
 8000edc:	4449      	add	r1, r9
 8000ede:	468a      	mov	sl, r1
 8000ee0:	425b      	negs	r3, r3
 8000ee2:	449a      	add	sl, r3
 8000ee4:	4653      	mov	r3, sl
 8000ee6:	2601      	movs	r6, #1
 8000ee8:	021b      	lsls	r3, r3, #8
 8000eea:	d400      	bmi.n	8000eee <__aeabi_dadd+0x3fa>
 8000eec:	e727      	b.n	8000d3e <__aeabi_dadd+0x24a>
 8000eee:	2602      	movs	r6, #2
 8000ef0:	4652      	mov	r2, sl
 8000ef2:	4baf      	ldr	r3, [pc, #700]	; (80011b0 <__aeabi_dadd+0x6bc>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0013      	movs	r3, r2
 8000efa:	4021      	ands	r1, r4
 8000efc:	0862      	lsrs	r2, r4, #1
 8000efe:	430a      	orrs	r2, r1
 8000f00:	07dc      	lsls	r4, r3, #31
 8000f02:	085b      	lsrs	r3, r3, #1
 8000f04:	469a      	mov	sl, r3
 8000f06:	4314      	orrs	r4, r2
 8000f08:	e670      	b.n	8000bec <__aeabi_dadd+0xf8>
 8000f0a:	003a      	movs	r2, r7
 8000f0c:	464c      	mov	r4, r9
 8000f0e:	3a20      	subs	r2, #32
 8000f10:	40d4      	lsrs	r4, r2
 8000f12:	46a4      	mov	ip, r4
 8000f14:	2f20      	cmp	r7, #32
 8000f16:	d007      	beq.n	8000f28 <__aeabi_dadd+0x434>
 8000f18:	2240      	movs	r2, #64	; 0x40
 8000f1a:	4648      	mov	r0, r9
 8000f1c:	1bd2      	subs	r2, r2, r7
 8000f1e:	4090      	lsls	r0, r2
 8000f20:	0002      	movs	r2, r0
 8000f22:	4640      	mov	r0, r8
 8000f24:	4310      	orrs	r0, r2
 8000f26:	4680      	mov	r8, r0
 8000f28:	4640      	mov	r0, r8
 8000f2a:	1e42      	subs	r2, r0, #1
 8000f2c:	4190      	sbcs	r0, r2
 8000f2e:	4662      	mov	r2, ip
 8000f30:	0004      	movs	r4, r0
 8000f32:	4314      	orrs	r4, r2
 8000f34:	e624      	b.n	8000b80 <__aeabi_dadd+0x8c>
 8000f36:	4319      	orrs	r1, r3
 8000f38:	000c      	movs	r4, r1
 8000f3a:	1e63      	subs	r3, r4, #1
 8000f3c:	419c      	sbcs	r4, r3
 8000f3e:	4643      	mov	r3, r8
 8000f40:	1b1c      	subs	r4, r3, r4
 8000f42:	45a0      	cmp	r8, r4
 8000f44:	419b      	sbcs	r3, r3
 8000f46:	4649      	mov	r1, r9
 8000f48:	425b      	negs	r3, r3
 8000f4a:	1acb      	subs	r3, r1, r3
 8000f4c:	469a      	mov	sl, r3
 8000f4e:	4665      	mov	r5, ip
 8000f50:	0016      	movs	r6, r2
 8000f52:	e61b      	b.n	8000b8c <__aeabi_dadd+0x98>
 8000f54:	000c      	movs	r4, r1
 8000f56:	431c      	orrs	r4, r3
 8000f58:	d100      	bne.n	8000f5c <__aeabi_dadd+0x468>
 8000f5a:	e0c7      	b.n	80010ec <__aeabi_dadd+0x5f8>
 8000f5c:	1e7c      	subs	r4, r7, #1
 8000f5e:	2f01      	cmp	r7, #1
 8000f60:	d100      	bne.n	8000f64 <__aeabi_dadd+0x470>
 8000f62:	e0f9      	b.n	8001158 <__aeabi_dadd+0x664>
 8000f64:	4e91      	ldr	r6, [pc, #580]	; (80011ac <__aeabi_dadd+0x6b8>)
 8000f66:	42b7      	cmp	r7, r6
 8000f68:	d05c      	beq.n	8001024 <__aeabi_dadd+0x530>
 8000f6a:	0027      	movs	r7, r4
 8000f6c:	e740      	b.n	8000df0 <__aeabi_dadd+0x2fc>
 8000f6e:	2220      	movs	r2, #32
 8000f70:	464c      	mov	r4, r9
 8000f72:	4640      	mov	r0, r8
 8000f74:	1bd2      	subs	r2, r2, r7
 8000f76:	4094      	lsls	r4, r2
 8000f78:	40f8      	lsrs	r0, r7
 8000f7a:	4304      	orrs	r4, r0
 8000f7c:	4640      	mov	r0, r8
 8000f7e:	4090      	lsls	r0, r2
 8000f80:	1e42      	subs	r2, r0, #1
 8000f82:	4190      	sbcs	r0, r2
 8000f84:	464a      	mov	r2, r9
 8000f86:	40fa      	lsrs	r2, r7
 8000f88:	4304      	orrs	r4, r0
 8000f8a:	1889      	adds	r1, r1, r2
 8000f8c:	e6ee      	b.n	8000d6c <__aeabi_dadd+0x278>
 8000f8e:	4c87      	ldr	r4, [pc, #540]	; (80011ac <__aeabi_dadd+0x6b8>)
 8000f90:	42a2      	cmp	r2, r4
 8000f92:	d100      	bne.n	8000f96 <__aeabi_dadd+0x4a2>
 8000f94:	e6f9      	b.n	8000d8a <__aeabi_dadd+0x296>
 8000f96:	1818      	adds	r0, r3, r0
 8000f98:	4298      	cmp	r0, r3
 8000f9a:	419b      	sbcs	r3, r3
 8000f9c:	4449      	add	r1, r9
 8000f9e:	425b      	negs	r3, r3
 8000fa0:	18cb      	adds	r3, r1, r3
 8000fa2:	07dc      	lsls	r4, r3, #31
 8000fa4:	0840      	lsrs	r0, r0, #1
 8000fa6:	085b      	lsrs	r3, r3, #1
 8000fa8:	469a      	mov	sl, r3
 8000faa:	0016      	movs	r6, r2
 8000fac:	4304      	orrs	r4, r0
 8000fae:	e6c6      	b.n	8000d3e <__aeabi_dadd+0x24a>
 8000fb0:	4642      	mov	r2, r8
 8000fb2:	1ad4      	subs	r4, r2, r3
 8000fb4:	45a0      	cmp	r8, r4
 8000fb6:	4180      	sbcs	r0, r0
 8000fb8:	464b      	mov	r3, r9
 8000fba:	4240      	negs	r0, r0
 8000fbc:	1a59      	subs	r1, r3, r1
 8000fbe:	1a0b      	subs	r3, r1, r0
 8000fc0:	469a      	mov	sl, r3
 8000fc2:	4665      	mov	r5, ip
 8000fc4:	e5ea      	b.n	8000b9c <__aeabi_dadd+0xa8>
 8000fc6:	464b      	mov	r3, r9
 8000fc8:	464a      	mov	r2, r9
 8000fca:	08c0      	lsrs	r0, r0, #3
 8000fcc:	075b      	lsls	r3, r3, #29
 8000fce:	4665      	mov	r5, ip
 8000fd0:	4303      	orrs	r3, r0
 8000fd2:	08d1      	lsrs	r1, r2, #3
 8000fd4:	e6bd      	b.n	8000d52 <__aeabi_dadd+0x25e>
 8000fd6:	2a00      	cmp	r2, #0
 8000fd8:	d000      	beq.n	8000fdc <__aeabi_dadd+0x4e8>
 8000fda:	e08e      	b.n	80010fa <__aeabi_dadd+0x606>
 8000fdc:	464b      	mov	r3, r9
 8000fde:	4303      	orrs	r3, r0
 8000fe0:	d117      	bne.n	8001012 <__aeabi_dadd+0x51e>
 8000fe2:	2180      	movs	r1, #128	; 0x80
 8000fe4:	2500      	movs	r5, #0
 8000fe6:	0309      	lsls	r1, r1, #12
 8000fe8:	e6da      	b.n	8000da0 <__aeabi_dadd+0x2ac>
 8000fea:	074a      	lsls	r2, r1, #29
 8000fec:	08db      	lsrs	r3, r3, #3
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	08c9      	lsrs	r1, r1, #3
 8000ff2:	e6d1      	b.n	8000d98 <__aeabi_dadd+0x2a4>
 8000ff4:	1a1c      	subs	r4, r3, r0
 8000ff6:	464a      	mov	r2, r9
 8000ff8:	42a3      	cmp	r3, r4
 8000ffa:	419b      	sbcs	r3, r3
 8000ffc:	1a89      	subs	r1, r1, r2
 8000ffe:	425b      	negs	r3, r3
 8001000:	1acb      	subs	r3, r1, r3
 8001002:	469a      	mov	sl, r3
 8001004:	2601      	movs	r6, #1
 8001006:	e5c1      	b.n	8000b8c <__aeabi_dadd+0x98>
 8001008:	074a      	lsls	r2, r1, #29
 800100a:	08db      	lsrs	r3, r3, #3
 800100c:	4313      	orrs	r3, r2
 800100e:	08c9      	lsrs	r1, r1, #3
 8001010:	e69f      	b.n	8000d52 <__aeabi_dadd+0x25e>
 8001012:	4643      	mov	r3, r8
 8001014:	08d8      	lsrs	r0, r3, #3
 8001016:	464b      	mov	r3, r9
 8001018:	464a      	mov	r2, r9
 800101a:	075b      	lsls	r3, r3, #29
 800101c:	4665      	mov	r5, ip
 800101e:	4303      	orrs	r3, r0
 8001020:	08d1      	lsrs	r1, r2, #3
 8001022:	e6b9      	b.n	8000d98 <__aeabi_dadd+0x2a4>
 8001024:	4643      	mov	r3, r8
 8001026:	08d8      	lsrs	r0, r3, #3
 8001028:	464b      	mov	r3, r9
 800102a:	464a      	mov	r2, r9
 800102c:	075b      	lsls	r3, r3, #29
 800102e:	4303      	orrs	r3, r0
 8001030:	08d1      	lsrs	r1, r2, #3
 8001032:	e6b1      	b.n	8000d98 <__aeabi_dadd+0x2a4>
 8001034:	4319      	orrs	r1, r3
 8001036:	000c      	movs	r4, r1
 8001038:	1e63      	subs	r3, r4, #1
 800103a:	419c      	sbcs	r4, r3
 800103c:	e6eb      	b.n	8000e16 <__aeabi_dadd+0x322>
 800103e:	003c      	movs	r4, r7
 8001040:	000d      	movs	r5, r1
 8001042:	3c20      	subs	r4, #32
 8001044:	40e5      	lsrs	r5, r4
 8001046:	2f20      	cmp	r7, #32
 8001048:	d003      	beq.n	8001052 <__aeabi_dadd+0x55e>
 800104a:	2440      	movs	r4, #64	; 0x40
 800104c:	1be4      	subs	r4, r4, r7
 800104e:	40a1      	lsls	r1, r4
 8001050:	430b      	orrs	r3, r1
 8001052:	001c      	movs	r4, r3
 8001054:	1e63      	subs	r3, r4, #1
 8001056:	419c      	sbcs	r4, r3
 8001058:	432c      	orrs	r4, r5
 800105a:	e770      	b.n	8000f3e <__aeabi_dadd+0x44a>
 800105c:	2a00      	cmp	r2, #0
 800105e:	d0e1      	beq.n	8001024 <__aeabi_dadd+0x530>
 8001060:	464a      	mov	r2, r9
 8001062:	4302      	orrs	r2, r0
 8001064:	d0c1      	beq.n	8000fea <__aeabi_dadd+0x4f6>
 8001066:	074a      	lsls	r2, r1, #29
 8001068:	08db      	lsrs	r3, r3, #3
 800106a:	4313      	orrs	r3, r2
 800106c:	2280      	movs	r2, #128	; 0x80
 800106e:	08c9      	lsrs	r1, r1, #3
 8001070:	0312      	lsls	r2, r2, #12
 8001072:	4211      	tst	r1, r2
 8001074:	d008      	beq.n	8001088 <__aeabi_dadd+0x594>
 8001076:	4648      	mov	r0, r9
 8001078:	08c4      	lsrs	r4, r0, #3
 800107a:	4214      	tst	r4, r2
 800107c:	d104      	bne.n	8001088 <__aeabi_dadd+0x594>
 800107e:	4643      	mov	r3, r8
 8001080:	0021      	movs	r1, r4
 8001082:	08db      	lsrs	r3, r3, #3
 8001084:	0742      	lsls	r2, r0, #29
 8001086:	4313      	orrs	r3, r2
 8001088:	0f5a      	lsrs	r2, r3, #29
 800108a:	00db      	lsls	r3, r3, #3
 800108c:	0752      	lsls	r2, r2, #29
 800108e:	08db      	lsrs	r3, r3, #3
 8001090:	4313      	orrs	r3, r2
 8001092:	e681      	b.n	8000d98 <__aeabi_dadd+0x2a4>
 8001094:	464b      	mov	r3, r9
 8001096:	4303      	orrs	r3, r0
 8001098:	d100      	bne.n	800109c <__aeabi_dadd+0x5a8>
 800109a:	e714      	b.n	8000ec6 <__aeabi_dadd+0x3d2>
 800109c:	464b      	mov	r3, r9
 800109e:	464a      	mov	r2, r9
 80010a0:	08c0      	lsrs	r0, r0, #3
 80010a2:	075b      	lsls	r3, r3, #29
 80010a4:	4665      	mov	r5, ip
 80010a6:	4303      	orrs	r3, r0
 80010a8:	08d1      	lsrs	r1, r2, #3
 80010aa:	e655      	b.n	8000d58 <__aeabi_dadd+0x264>
 80010ac:	1ac4      	subs	r4, r0, r3
 80010ae:	45a0      	cmp	r8, r4
 80010b0:	4180      	sbcs	r0, r0
 80010b2:	464b      	mov	r3, r9
 80010b4:	4240      	negs	r0, r0
 80010b6:	1a59      	subs	r1, r3, r1
 80010b8:	1a0b      	subs	r3, r1, r0
 80010ba:	469a      	mov	sl, r3
 80010bc:	4665      	mov	r5, ip
 80010be:	2601      	movs	r6, #1
 80010c0:	e564      	b.n	8000b8c <__aeabi_dadd+0x98>
 80010c2:	1a1c      	subs	r4, r3, r0
 80010c4:	464a      	mov	r2, r9
 80010c6:	42a3      	cmp	r3, r4
 80010c8:	4180      	sbcs	r0, r0
 80010ca:	1a8a      	subs	r2, r1, r2
 80010cc:	4240      	negs	r0, r0
 80010ce:	1a12      	subs	r2, r2, r0
 80010d0:	4692      	mov	sl, r2
 80010d2:	0212      	lsls	r2, r2, #8
 80010d4:	d549      	bpl.n	800116a <__aeabi_dadd+0x676>
 80010d6:	4642      	mov	r2, r8
 80010d8:	1ad4      	subs	r4, r2, r3
 80010da:	45a0      	cmp	r8, r4
 80010dc:	4180      	sbcs	r0, r0
 80010de:	464b      	mov	r3, r9
 80010e0:	4240      	negs	r0, r0
 80010e2:	1a59      	subs	r1, r3, r1
 80010e4:	1a0b      	subs	r3, r1, r0
 80010e6:	469a      	mov	sl, r3
 80010e8:	4665      	mov	r5, ip
 80010ea:	e57f      	b.n	8000bec <__aeabi_dadd+0xf8>
 80010ec:	464b      	mov	r3, r9
 80010ee:	464a      	mov	r2, r9
 80010f0:	08c0      	lsrs	r0, r0, #3
 80010f2:	075b      	lsls	r3, r3, #29
 80010f4:	4303      	orrs	r3, r0
 80010f6:	08d1      	lsrs	r1, r2, #3
 80010f8:	e62b      	b.n	8000d52 <__aeabi_dadd+0x25e>
 80010fa:	464a      	mov	r2, r9
 80010fc:	08db      	lsrs	r3, r3, #3
 80010fe:	4302      	orrs	r2, r0
 8001100:	d138      	bne.n	8001174 <__aeabi_dadd+0x680>
 8001102:	074a      	lsls	r2, r1, #29
 8001104:	4313      	orrs	r3, r2
 8001106:	08c9      	lsrs	r1, r1, #3
 8001108:	e646      	b.n	8000d98 <__aeabi_dadd+0x2a4>
 800110a:	464b      	mov	r3, r9
 800110c:	464a      	mov	r2, r9
 800110e:	08c0      	lsrs	r0, r0, #3
 8001110:	075b      	lsls	r3, r3, #29
 8001112:	4303      	orrs	r3, r0
 8001114:	08d1      	lsrs	r1, r2, #3
 8001116:	e61f      	b.n	8000d58 <__aeabi_dadd+0x264>
 8001118:	181c      	adds	r4, r3, r0
 800111a:	429c      	cmp	r4, r3
 800111c:	419b      	sbcs	r3, r3
 800111e:	4449      	add	r1, r9
 8001120:	468a      	mov	sl, r1
 8001122:	425b      	negs	r3, r3
 8001124:	449a      	add	sl, r3
 8001126:	4653      	mov	r3, sl
 8001128:	021b      	lsls	r3, r3, #8
 800112a:	d400      	bmi.n	800112e <__aeabi_dadd+0x63a>
 800112c:	e607      	b.n	8000d3e <__aeabi_dadd+0x24a>
 800112e:	4652      	mov	r2, sl
 8001130:	4b1f      	ldr	r3, [pc, #124]	; (80011b0 <__aeabi_dadd+0x6bc>)
 8001132:	2601      	movs	r6, #1
 8001134:	401a      	ands	r2, r3
 8001136:	4692      	mov	sl, r2
 8001138:	e601      	b.n	8000d3e <__aeabi_dadd+0x24a>
 800113a:	003c      	movs	r4, r7
 800113c:	000e      	movs	r6, r1
 800113e:	3c20      	subs	r4, #32
 8001140:	40e6      	lsrs	r6, r4
 8001142:	2f20      	cmp	r7, #32
 8001144:	d003      	beq.n	800114e <__aeabi_dadd+0x65a>
 8001146:	2440      	movs	r4, #64	; 0x40
 8001148:	1be4      	subs	r4, r4, r7
 800114a:	40a1      	lsls	r1, r4
 800114c:	430b      	orrs	r3, r1
 800114e:	001c      	movs	r4, r3
 8001150:	1e63      	subs	r3, r4, #1
 8001152:	419c      	sbcs	r4, r3
 8001154:	4334      	orrs	r4, r6
 8001156:	e65e      	b.n	8000e16 <__aeabi_dadd+0x322>
 8001158:	4443      	add	r3, r8
 800115a:	4283      	cmp	r3, r0
 800115c:	4180      	sbcs	r0, r0
 800115e:	4449      	add	r1, r9
 8001160:	468a      	mov	sl, r1
 8001162:	4240      	negs	r0, r0
 8001164:	001c      	movs	r4, r3
 8001166:	4482      	add	sl, r0
 8001168:	e6bc      	b.n	8000ee4 <__aeabi_dadd+0x3f0>
 800116a:	4653      	mov	r3, sl
 800116c:	4323      	orrs	r3, r4
 800116e:	d100      	bne.n	8001172 <__aeabi_dadd+0x67e>
 8001170:	e6a9      	b.n	8000ec6 <__aeabi_dadd+0x3d2>
 8001172:	e5e4      	b.n	8000d3e <__aeabi_dadd+0x24a>
 8001174:	074a      	lsls	r2, r1, #29
 8001176:	4313      	orrs	r3, r2
 8001178:	2280      	movs	r2, #128	; 0x80
 800117a:	08c9      	lsrs	r1, r1, #3
 800117c:	0312      	lsls	r2, r2, #12
 800117e:	4211      	tst	r1, r2
 8001180:	d009      	beq.n	8001196 <__aeabi_dadd+0x6a2>
 8001182:	4648      	mov	r0, r9
 8001184:	08c4      	lsrs	r4, r0, #3
 8001186:	4214      	tst	r4, r2
 8001188:	d105      	bne.n	8001196 <__aeabi_dadd+0x6a2>
 800118a:	4643      	mov	r3, r8
 800118c:	4665      	mov	r5, ip
 800118e:	0021      	movs	r1, r4
 8001190:	08db      	lsrs	r3, r3, #3
 8001192:	0742      	lsls	r2, r0, #29
 8001194:	4313      	orrs	r3, r2
 8001196:	0f5a      	lsrs	r2, r3, #29
 8001198:	00db      	lsls	r3, r3, #3
 800119a:	08db      	lsrs	r3, r3, #3
 800119c:	0752      	lsls	r2, r2, #29
 800119e:	4313      	orrs	r3, r2
 80011a0:	e5fa      	b.n	8000d98 <__aeabi_dadd+0x2a4>
 80011a2:	2300      	movs	r3, #0
 80011a4:	4a01      	ldr	r2, [pc, #4]	; (80011ac <__aeabi_dadd+0x6b8>)
 80011a6:	001c      	movs	r4, r3
 80011a8:	e540      	b.n	8000c2c <__aeabi_dadd+0x138>
 80011aa:	46c0      	nop			; (mov r8, r8)
 80011ac:	000007ff 	.word	0x000007ff
 80011b0:	ff7fffff 	.word	0xff7fffff

080011b4 <__aeabi_ddiv>:
 80011b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011b6:	4657      	mov	r7, sl
 80011b8:	464e      	mov	r6, r9
 80011ba:	4645      	mov	r5, r8
 80011bc:	46de      	mov	lr, fp
 80011be:	b5e0      	push	{r5, r6, r7, lr}
 80011c0:	030c      	lsls	r4, r1, #12
 80011c2:	001f      	movs	r7, r3
 80011c4:	004b      	lsls	r3, r1, #1
 80011c6:	4681      	mov	r9, r0
 80011c8:	4692      	mov	sl, r2
 80011ca:	0005      	movs	r5, r0
 80011cc:	b085      	sub	sp, #20
 80011ce:	0b24      	lsrs	r4, r4, #12
 80011d0:	0d5b      	lsrs	r3, r3, #21
 80011d2:	0fce      	lsrs	r6, r1, #31
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d100      	bne.n	80011da <__aeabi_ddiv+0x26>
 80011d8:	e152      	b.n	8001480 <__aeabi_ddiv+0x2cc>
 80011da:	4ad2      	ldr	r2, [pc, #840]	; (8001524 <__aeabi_ddiv+0x370>)
 80011dc:	4293      	cmp	r3, r2
 80011de:	d100      	bne.n	80011e2 <__aeabi_ddiv+0x2e>
 80011e0:	e16e      	b.n	80014c0 <__aeabi_ddiv+0x30c>
 80011e2:	0f42      	lsrs	r2, r0, #29
 80011e4:	00e4      	lsls	r4, r4, #3
 80011e6:	4314      	orrs	r4, r2
 80011e8:	2280      	movs	r2, #128	; 0x80
 80011ea:	0412      	lsls	r2, r2, #16
 80011ec:	4322      	orrs	r2, r4
 80011ee:	4690      	mov	r8, r2
 80011f0:	4acd      	ldr	r2, [pc, #820]	; (8001528 <__aeabi_ddiv+0x374>)
 80011f2:	00c5      	lsls	r5, r0, #3
 80011f4:	4693      	mov	fp, r2
 80011f6:	449b      	add	fp, r3
 80011f8:	2300      	movs	r3, #0
 80011fa:	4699      	mov	r9, r3
 80011fc:	9300      	str	r3, [sp, #0]
 80011fe:	033c      	lsls	r4, r7, #12
 8001200:	007b      	lsls	r3, r7, #1
 8001202:	4650      	mov	r0, sl
 8001204:	0b24      	lsrs	r4, r4, #12
 8001206:	0d5b      	lsrs	r3, r3, #21
 8001208:	0fff      	lsrs	r7, r7, #31
 800120a:	2b00      	cmp	r3, #0
 800120c:	d100      	bne.n	8001210 <__aeabi_ddiv+0x5c>
 800120e:	e11a      	b.n	8001446 <__aeabi_ddiv+0x292>
 8001210:	4ac4      	ldr	r2, [pc, #784]	; (8001524 <__aeabi_ddiv+0x370>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d100      	bne.n	8001218 <__aeabi_ddiv+0x64>
 8001216:	e15e      	b.n	80014d6 <__aeabi_ddiv+0x322>
 8001218:	0f42      	lsrs	r2, r0, #29
 800121a:	00e4      	lsls	r4, r4, #3
 800121c:	4322      	orrs	r2, r4
 800121e:	2480      	movs	r4, #128	; 0x80
 8001220:	0424      	lsls	r4, r4, #16
 8001222:	4314      	orrs	r4, r2
 8001224:	4ac0      	ldr	r2, [pc, #768]	; (8001528 <__aeabi_ddiv+0x374>)
 8001226:	00c1      	lsls	r1, r0, #3
 8001228:	4694      	mov	ip, r2
 800122a:	465a      	mov	r2, fp
 800122c:	4463      	add	r3, ip
 800122e:	1ad3      	subs	r3, r2, r3
 8001230:	469b      	mov	fp, r3
 8001232:	2000      	movs	r0, #0
 8001234:	0033      	movs	r3, r6
 8001236:	407b      	eors	r3, r7
 8001238:	469a      	mov	sl, r3
 800123a:	464b      	mov	r3, r9
 800123c:	2b0f      	cmp	r3, #15
 800123e:	d827      	bhi.n	8001290 <__aeabi_ddiv+0xdc>
 8001240:	4aba      	ldr	r2, [pc, #744]	; (800152c <__aeabi_ddiv+0x378>)
 8001242:	009b      	lsls	r3, r3, #2
 8001244:	58d3      	ldr	r3, [r2, r3]
 8001246:	469f      	mov	pc, r3
 8001248:	46b2      	mov	sl, r6
 800124a:	9b00      	ldr	r3, [sp, #0]
 800124c:	2b02      	cmp	r3, #2
 800124e:	d016      	beq.n	800127e <__aeabi_ddiv+0xca>
 8001250:	2b03      	cmp	r3, #3
 8001252:	d100      	bne.n	8001256 <__aeabi_ddiv+0xa2>
 8001254:	e287      	b.n	8001766 <__aeabi_ddiv+0x5b2>
 8001256:	2b01      	cmp	r3, #1
 8001258:	d000      	beq.n	800125c <__aeabi_ddiv+0xa8>
 800125a:	e0d5      	b.n	8001408 <__aeabi_ddiv+0x254>
 800125c:	2300      	movs	r3, #0
 800125e:	2200      	movs	r2, #0
 8001260:	2500      	movs	r5, #0
 8001262:	051b      	lsls	r3, r3, #20
 8001264:	4313      	orrs	r3, r2
 8001266:	4652      	mov	r2, sl
 8001268:	07d2      	lsls	r2, r2, #31
 800126a:	4313      	orrs	r3, r2
 800126c:	0028      	movs	r0, r5
 800126e:	0019      	movs	r1, r3
 8001270:	b005      	add	sp, #20
 8001272:	bcf0      	pop	{r4, r5, r6, r7}
 8001274:	46bb      	mov	fp, r7
 8001276:	46b2      	mov	sl, r6
 8001278:	46a9      	mov	r9, r5
 800127a:	46a0      	mov	r8, r4
 800127c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800127e:	2200      	movs	r2, #0
 8001280:	2500      	movs	r5, #0
 8001282:	4ba8      	ldr	r3, [pc, #672]	; (8001524 <__aeabi_ddiv+0x370>)
 8001284:	e7ed      	b.n	8001262 <__aeabi_ddiv+0xae>
 8001286:	46ba      	mov	sl, r7
 8001288:	46a0      	mov	r8, r4
 800128a:	000d      	movs	r5, r1
 800128c:	9000      	str	r0, [sp, #0]
 800128e:	e7dc      	b.n	800124a <__aeabi_ddiv+0x96>
 8001290:	4544      	cmp	r4, r8
 8001292:	d200      	bcs.n	8001296 <__aeabi_ddiv+0xe2>
 8001294:	e1c4      	b.n	8001620 <__aeabi_ddiv+0x46c>
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0xe6>
 8001298:	e1bf      	b.n	800161a <__aeabi_ddiv+0x466>
 800129a:	2301      	movs	r3, #1
 800129c:	425b      	negs	r3, r3
 800129e:	469c      	mov	ip, r3
 80012a0:	002e      	movs	r6, r5
 80012a2:	4640      	mov	r0, r8
 80012a4:	2500      	movs	r5, #0
 80012a6:	44e3      	add	fp, ip
 80012a8:	0223      	lsls	r3, r4, #8
 80012aa:	0e0c      	lsrs	r4, r1, #24
 80012ac:	431c      	orrs	r4, r3
 80012ae:	0c1b      	lsrs	r3, r3, #16
 80012b0:	4699      	mov	r9, r3
 80012b2:	0423      	lsls	r3, r4, #16
 80012b4:	020a      	lsls	r2, r1, #8
 80012b6:	0c1f      	lsrs	r7, r3, #16
 80012b8:	4649      	mov	r1, r9
 80012ba:	9200      	str	r2, [sp, #0]
 80012bc:	9701      	str	r7, [sp, #4]
 80012be:	f7fe ffc1 	bl	8000244 <__aeabi_uidivmod>
 80012c2:	0002      	movs	r2, r0
 80012c4:	437a      	muls	r2, r7
 80012c6:	040b      	lsls	r3, r1, #16
 80012c8:	0c31      	lsrs	r1, r6, #16
 80012ca:	4680      	mov	r8, r0
 80012cc:	4319      	orrs	r1, r3
 80012ce:	428a      	cmp	r2, r1
 80012d0:	d907      	bls.n	80012e2 <__aeabi_ddiv+0x12e>
 80012d2:	2301      	movs	r3, #1
 80012d4:	425b      	negs	r3, r3
 80012d6:	469c      	mov	ip, r3
 80012d8:	1909      	adds	r1, r1, r4
 80012da:	44e0      	add	r8, ip
 80012dc:	428c      	cmp	r4, r1
 80012de:	d800      	bhi.n	80012e2 <__aeabi_ddiv+0x12e>
 80012e0:	e201      	b.n	80016e6 <__aeabi_ddiv+0x532>
 80012e2:	1a88      	subs	r0, r1, r2
 80012e4:	4649      	mov	r1, r9
 80012e6:	f7fe ffad 	bl	8000244 <__aeabi_uidivmod>
 80012ea:	9a01      	ldr	r2, [sp, #4]
 80012ec:	0436      	lsls	r6, r6, #16
 80012ee:	4342      	muls	r2, r0
 80012f0:	0409      	lsls	r1, r1, #16
 80012f2:	0c36      	lsrs	r6, r6, #16
 80012f4:	0003      	movs	r3, r0
 80012f6:	430e      	orrs	r6, r1
 80012f8:	42b2      	cmp	r2, r6
 80012fa:	d904      	bls.n	8001306 <__aeabi_ddiv+0x152>
 80012fc:	1936      	adds	r6, r6, r4
 80012fe:	3b01      	subs	r3, #1
 8001300:	42b4      	cmp	r4, r6
 8001302:	d800      	bhi.n	8001306 <__aeabi_ddiv+0x152>
 8001304:	e1e9      	b.n	80016da <__aeabi_ddiv+0x526>
 8001306:	1ab0      	subs	r0, r6, r2
 8001308:	4642      	mov	r2, r8
 800130a:	9e00      	ldr	r6, [sp, #0]
 800130c:	0412      	lsls	r2, r2, #16
 800130e:	431a      	orrs	r2, r3
 8001310:	0c33      	lsrs	r3, r6, #16
 8001312:	001f      	movs	r7, r3
 8001314:	0c11      	lsrs	r1, r2, #16
 8001316:	4690      	mov	r8, r2
 8001318:	9302      	str	r3, [sp, #8]
 800131a:	0413      	lsls	r3, r2, #16
 800131c:	0432      	lsls	r2, r6, #16
 800131e:	0c16      	lsrs	r6, r2, #16
 8001320:	0032      	movs	r2, r6
 8001322:	0c1b      	lsrs	r3, r3, #16
 8001324:	435a      	muls	r2, r3
 8001326:	9603      	str	r6, [sp, #12]
 8001328:	437b      	muls	r3, r7
 800132a:	434e      	muls	r6, r1
 800132c:	4379      	muls	r1, r7
 800132e:	0c17      	lsrs	r7, r2, #16
 8001330:	46bc      	mov	ip, r7
 8001332:	199b      	adds	r3, r3, r6
 8001334:	4463      	add	r3, ip
 8001336:	429e      	cmp	r6, r3
 8001338:	d903      	bls.n	8001342 <__aeabi_ddiv+0x18e>
 800133a:	2680      	movs	r6, #128	; 0x80
 800133c:	0276      	lsls	r6, r6, #9
 800133e:	46b4      	mov	ip, r6
 8001340:	4461      	add	r1, ip
 8001342:	0c1e      	lsrs	r6, r3, #16
 8001344:	1871      	adds	r1, r6, r1
 8001346:	0416      	lsls	r6, r2, #16
 8001348:	041b      	lsls	r3, r3, #16
 800134a:	0c36      	lsrs	r6, r6, #16
 800134c:	199e      	adds	r6, r3, r6
 800134e:	4288      	cmp	r0, r1
 8001350:	d302      	bcc.n	8001358 <__aeabi_ddiv+0x1a4>
 8001352:	d112      	bne.n	800137a <__aeabi_ddiv+0x1c6>
 8001354:	42b5      	cmp	r5, r6
 8001356:	d210      	bcs.n	800137a <__aeabi_ddiv+0x1c6>
 8001358:	4643      	mov	r3, r8
 800135a:	1e5a      	subs	r2, r3, #1
 800135c:	9b00      	ldr	r3, [sp, #0]
 800135e:	469c      	mov	ip, r3
 8001360:	4465      	add	r5, ip
 8001362:	001f      	movs	r7, r3
 8001364:	429d      	cmp	r5, r3
 8001366:	419b      	sbcs	r3, r3
 8001368:	425b      	negs	r3, r3
 800136a:	191b      	adds	r3, r3, r4
 800136c:	18c0      	adds	r0, r0, r3
 800136e:	4284      	cmp	r4, r0
 8001370:	d200      	bcs.n	8001374 <__aeabi_ddiv+0x1c0>
 8001372:	e19e      	b.n	80016b2 <__aeabi_ddiv+0x4fe>
 8001374:	d100      	bne.n	8001378 <__aeabi_ddiv+0x1c4>
 8001376:	e199      	b.n	80016ac <__aeabi_ddiv+0x4f8>
 8001378:	4690      	mov	r8, r2
 800137a:	1bae      	subs	r6, r5, r6
 800137c:	42b5      	cmp	r5, r6
 800137e:	41ad      	sbcs	r5, r5
 8001380:	1a40      	subs	r0, r0, r1
 8001382:	426d      	negs	r5, r5
 8001384:	1b40      	subs	r0, r0, r5
 8001386:	4284      	cmp	r4, r0
 8001388:	d100      	bne.n	800138c <__aeabi_ddiv+0x1d8>
 800138a:	e1d2      	b.n	8001732 <__aeabi_ddiv+0x57e>
 800138c:	4649      	mov	r1, r9
 800138e:	f7fe ff59 	bl	8000244 <__aeabi_uidivmod>
 8001392:	9a01      	ldr	r2, [sp, #4]
 8001394:	040b      	lsls	r3, r1, #16
 8001396:	4342      	muls	r2, r0
 8001398:	0c31      	lsrs	r1, r6, #16
 800139a:	0005      	movs	r5, r0
 800139c:	4319      	orrs	r1, r3
 800139e:	428a      	cmp	r2, r1
 80013a0:	d900      	bls.n	80013a4 <__aeabi_ddiv+0x1f0>
 80013a2:	e16c      	b.n	800167e <__aeabi_ddiv+0x4ca>
 80013a4:	1a88      	subs	r0, r1, r2
 80013a6:	4649      	mov	r1, r9
 80013a8:	f7fe ff4c 	bl	8000244 <__aeabi_uidivmod>
 80013ac:	9a01      	ldr	r2, [sp, #4]
 80013ae:	0436      	lsls	r6, r6, #16
 80013b0:	4342      	muls	r2, r0
 80013b2:	0409      	lsls	r1, r1, #16
 80013b4:	0c36      	lsrs	r6, r6, #16
 80013b6:	0003      	movs	r3, r0
 80013b8:	430e      	orrs	r6, r1
 80013ba:	42b2      	cmp	r2, r6
 80013bc:	d900      	bls.n	80013c0 <__aeabi_ddiv+0x20c>
 80013be:	e153      	b.n	8001668 <__aeabi_ddiv+0x4b4>
 80013c0:	9803      	ldr	r0, [sp, #12]
 80013c2:	1ab6      	subs	r6, r6, r2
 80013c4:	0002      	movs	r2, r0
 80013c6:	042d      	lsls	r5, r5, #16
 80013c8:	431d      	orrs	r5, r3
 80013ca:	9f02      	ldr	r7, [sp, #8]
 80013cc:	042b      	lsls	r3, r5, #16
 80013ce:	0c1b      	lsrs	r3, r3, #16
 80013d0:	435a      	muls	r2, r3
 80013d2:	437b      	muls	r3, r7
 80013d4:	469c      	mov	ip, r3
 80013d6:	0c29      	lsrs	r1, r5, #16
 80013d8:	4348      	muls	r0, r1
 80013da:	0c13      	lsrs	r3, r2, #16
 80013dc:	4484      	add	ip, r0
 80013de:	4463      	add	r3, ip
 80013e0:	4379      	muls	r1, r7
 80013e2:	4298      	cmp	r0, r3
 80013e4:	d903      	bls.n	80013ee <__aeabi_ddiv+0x23a>
 80013e6:	2080      	movs	r0, #128	; 0x80
 80013e8:	0240      	lsls	r0, r0, #9
 80013ea:	4684      	mov	ip, r0
 80013ec:	4461      	add	r1, ip
 80013ee:	0c18      	lsrs	r0, r3, #16
 80013f0:	0412      	lsls	r2, r2, #16
 80013f2:	041b      	lsls	r3, r3, #16
 80013f4:	0c12      	lsrs	r2, r2, #16
 80013f6:	1840      	adds	r0, r0, r1
 80013f8:	189b      	adds	r3, r3, r2
 80013fa:	4286      	cmp	r6, r0
 80013fc:	d200      	bcs.n	8001400 <__aeabi_ddiv+0x24c>
 80013fe:	e100      	b.n	8001602 <__aeabi_ddiv+0x44e>
 8001400:	d100      	bne.n	8001404 <__aeabi_ddiv+0x250>
 8001402:	e0fb      	b.n	80015fc <__aeabi_ddiv+0x448>
 8001404:	2301      	movs	r3, #1
 8001406:	431d      	orrs	r5, r3
 8001408:	4b49      	ldr	r3, [pc, #292]	; (8001530 <__aeabi_ddiv+0x37c>)
 800140a:	445b      	add	r3, fp
 800140c:	2b00      	cmp	r3, #0
 800140e:	dc00      	bgt.n	8001412 <__aeabi_ddiv+0x25e>
 8001410:	e0aa      	b.n	8001568 <__aeabi_ddiv+0x3b4>
 8001412:	076a      	lsls	r2, r5, #29
 8001414:	d000      	beq.n	8001418 <__aeabi_ddiv+0x264>
 8001416:	e13d      	b.n	8001694 <__aeabi_ddiv+0x4e0>
 8001418:	08e9      	lsrs	r1, r5, #3
 800141a:	4642      	mov	r2, r8
 800141c:	01d2      	lsls	r2, r2, #7
 800141e:	d506      	bpl.n	800142e <__aeabi_ddiv+0x27a>
 8001420:	4642      	mov	r2, r8
 8001422:	4b44      	ldr	r3, [pc, #272]	; (8001534 <__aeabi_ddiv+0x380>)
 8001424:	401a      	ands	r2, r3
 8001426:	2380      	movs	r3, #128	; 0x80
 8001428:	4690      	mov	r8, r2
 800142a:	00db      	lsls	r3, r3, #3
 800142c:	445b      	add	r3, fp
 800142e:	4a42      	ldr	r2, [pc, #264]	; (8001538 <__aeabi_ddiv+0x384>)
 8001430:	4293      	cmp	r3, r2
 8001432:	dd00      	ble.n	8001436 <__aeabi_ddiv+0x282>
 8001434:	e723      	b.n	800127e <__aeabi_ddiv+0xca>
 8001436:	4642      	mov	r2, r8
 8001438:	055b      	lsls	r3, r3, #21
 800143a:	0755      	lsls	r5, r2, #29
 800143c:	0252      	lsls	r2, r2, #9
 800143e:	430d      	orrs	r5, r1
 8001440:	0b12      	lsrs	r2, r2, #12
 8001442:	0d5b      	lsrs	r3, r3, #21
 8001444:	e70d      	b.n	8001262 <__aeabi_ddiv+0xae>
 8001446:	4651      	mov	r1, sl
 8001448:	4321      	orrs	r1, r4
 800144a:	d100      	bne.n	800144e <__aeabi_ddiv+0x29a>
 800144c:	e07c      	b.n	8001548 <__aeabi_ddiv+0x394>
 800144e:	2c00      	cmp	r4, #0
 8001450:	d100      	bne.n	8001454 <__aeabi_ddiv+0x2a0>
 8001452:	e0fb      	b.n	800164c <__aeabi_ddiv+0x498>
 8001454:	0020      	movs	r0, r4
 8001456:	f001 fa63 	bl	8002920 <__clzsi2>
 800145a:	0002      	movs	r2, r0
 800145c:	3a0b      	subs	r2, #11
 800145e:	231d      	movs	r3, #29
 8001460:	1a9b      	subs	r3, r3, r2
 8001462:	4652      	mov	r2, sl
 8001464:	0001      	movs	r1, r0
 8001466:	40da      	lsrs	r2, r3
 8001468:	4653      	mov	r3, sl
 800146a:	3908      	subs	r1, #8
 800146c:	408b      	lsls	r3, r1
 800146e:	408c      	lsls	r4, r1
 8001470:	0019      	movs	r1, r3
 8001472:	4314      	orrs	r4, r2
 8001474:	4b31      	ldr	r3, [pc, #196]	; (800153c <__aeabi_ddiv+0x388>)
 8001476:	4458      	add	r0, fp
 8001478:	469b      	mov	fp, r3
 800147a:	4483      	add	fp, r0
 800147c:	2000      	movs	r0, #0
 800147e:	e6d9      	b.n	8001234 <__aeabi_ddiv+0x80>
 8001480:	0003      	movs	r3, r0
 8001482:	4323      	orrs	r3, r4
 8001484:	4698      	mov	r8, r3
 8001486:	d044      	beq.n	8001512 <__aeabi_ddiv+0x35e>
 8001488:	2c00      	cmp	r4, #0
 800148a:	d100      	bne.n	800148e <__aeabi_ddiv+0x2da>
 800148c:	e0cf      	b.n	800162e <__aeabi_ddiv+0x47a>
 800148e:	0020      	movs	r0, r4
 8001490:	f001 fa46 	bl	8002920 <__clzsi2>
 8001494:	0001      	movs	r1, r0
 8001496:	0002      	movs	r2, r0
 8001498:	390b      	subs	r1, #11
 800149a:	231d      	movs	r3, #29
 800149c:	1a5b      	subs	r3, r3, r1
 800149e:	4649      	mov	r1, r9
 80014a0:	0010      	movs	r0, r2
 80014a2:	40d9      	lsrs	r1, r3
 80014a4:	3808      	subs	r0, #8
 80014a6:	4084      	lsls	r4, r0
 80014a8:	000b      	movs	r3, r1
 80014aa:	464d      	mov	r5, r9
 80014ac:	4323      	orrs	r3, r4
 80014ae:	4698      	mov	r8, r3
 80014b0:	4085      	lsls	r5, r0
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <__aeabi_ddiv+0x38c>)
 80014b4:	1a9b      	subs	r3, r3, r2
 80014b6:	469b      	mov	fp, r3
 80014b8:	2300      	movs	r3, #0
 80014ba:	4699      	mov	r9, r3
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	e69e      	b.n	80011fe <__aeabi_ddiv+0x4a>
 80014c0:	0002      	movs	r2, r0
 80014c2:	4322      	orrs	r2, r4
 80014c4:	4690      	mov	r8, r2
 80014c6:	d11d      	bne.n	8001504 <__aeabi_ddiv+0x350>
 80014c8:	2208      	movs	r2, #8
 80014ca:	469b      	mov	fp, r3
 80014cc:	2302      	movs	r3, #2
 80014ce:	2500      	movs	r5, #0
 80014d0:	4691      	mov	r9, r2
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	e693      	b.n	80011fe <__aeabi_ddiv+0x4a>
 80014d6:	4651      	mov	r1, sl
 80014d8:	4321      	orrs	r1, r4
 80014da:	d109      	bne.n	80014f0 <__aeabi_ddiv+0x33c>
 80014dc:	2302      	movs	r3, #2
 80014de:	464a      	mov	r2, r9
 80014e0:	431a      	orrs	r2, r3
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <__aeabi_ddiv+0x390>)
 80014e4:	4691      	mov	r9, r2
 80014e6:	469c      	mov	ip, r3
 80014e8:	2400      	movs	r4, #0
 80014ea:	2002      	movs	r0, #2
 80014ec:	44e3      	add	fp, ip
 80014ee:	e6a1      	b.n	8001234 <__aeabi_ddiv+0x80>
 80014f0:	2303      	movs	r3, #3
 80014f2:	464a      	mov	r2, r9
 80014f4:	431a      	orrs	r2, r3
 80014f6:	4b13      	ldr	r3, [pc, #76]	; (8001544 <__aeabi_ddiv+0x390>)
 80014f8:	4691      	mov	r9, r2
 80014fa:	469c      	mov	ip, r3
 80014fc:	4651      	mov	r1, sl
 80014fe:	2003      	movs	r0, #3
 8001500:	44e3      	add	fp, ip
 8001502:	e697      	b.n	8001234 <__aeabi_ddiv+0x80>
 8001504:	220c      	movs	r2, #12
 8001506:	469b      	mov	fp, r3
 8001508:	2303      	movs	r3, #3
 800150a:	46a0      	mov	r8, r4
 800150c:	4691      	mov	r9, r2
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	e675      	b.n	80011fe <__aeabi_ddiv+0x4a>
 8001512:	2304      	movs	r3, #4
 8001514:	4699      	mov	r9, r3
 8001516:	2300      	movs	r3, #0
 8001518:	469b      	mov	fp, r3
 800151a:	3301      	adds	r3, #1
 800151c:	2500      	movs	r5, #0
 800151e:	9300      	str	r3, [sp, #0]
 8001520:	e66d      	b.n	80011fe <__aeabi_ddiv+0x4a>
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	000007ff 	.word	0x000007ff
 8001528:	fffffc01 	.word	0xfffffc01
 800152c:	0800d23c 	.word	0x0800d23c
 8001530:	000003ff 	.word	0x000003ff
 8001534:	feffffff 	.word	0xfeffffff
 8001538:	000007fe 	.word	0x000007fe
 800153c:	000003f3 	.word	0x000003f3
 8001540:	fffffc0d 	.word	0xfffffc0d
 8001544:	fffff801 	.word	0xfffff801
 8001548:	464a      	mov	r2, r9
 800154a:	2301      	movs	r3, #1
 800154c:	431a      	orrs	r2, r3
 800154e:	4691      	mov	r9, r2
 8001550:	2400      	movs	r4, #0
 8001552:	2001      	movs	r0, #1
 8001554:	e66e      	b.n	8001234 <__aeabi_ddiv+0x80>
 8001556:	2300      	movs	r3, #0
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	469a      	mov	sl, r3
 800155c:	2500      	movs	r5, #0
 800155e:	4b88      	ldr	r3, [pc, #544]	; (8001780 <__aeabi_ddiv+0x5cc>)
 8001560:	0312      	lsls	r2, r2, #12
 8001562:	e67e      	b.n	8001262 <__aeabi_ddiv+0xae>
 8001564:	2501      	movs	r5, #1
 8001566:	426d      	negs	r5, r5
 8001568:	2201      	movs	r2, #1
 800156a:	1ad2      	subs	r2, r2, r3
 800156c:	2a38      	cmp	r2, #56	; 0x38
 800156e:	dd00      	ble.n	8001572 <__aeabi_ddiv+0x3be>
 8001570:	e674      	b.n	800125c <__aeabi_ddiv+0xa8>
 8001572:	2a1f      	cmp	r2, #31
 8001574:	dc00      	bgt.n	8001578 <__aeabi_ddiv+0x3c4>
 8001576:	e0bd      	b.n	80016f4 <__aeabi_ddiv+0x540>
 8001578:	211f      	movs	r1, #31
 800157a:	4249      	negs	r1, r1
 800157c:	1acb      	subs	r3, r1, r3
 800157e:	4641      	mov	r1, r8
 8001580:	40d9      	lsrs	r1, r3
 8001582:	000b      	movs	r3, r1
 8001584:	2a20      	cmp	r2, #32
 8001586:	d004      	beq.n	8001592 <__aeabi_ddiv+0x3de>
 8001588:	4641      	mov	r1, r8
 800158a:	4a7e      	ldr	r2, [pc, #504]	; (8001784 <__aeabi_ddiv+0x5d0>)
 800158c:	445a      	add	r2, fp
 800158e:	4091      	lsls	r1, r2
 8001590:	430d      	orrs	r5, r1
 8001592:	0029      	movs	r1, r5
 8001594:	1e4a      	subs	r2, r1, #1
 8001596:	4191      	sbcs	r1, r2
 8001598:	4319      	orrs	r1, r3
 800159a:	2307      	movs	r3, #7
 800159c:	001d      	movs	r5, r3
 800159e:	2200      	movs	r2, #0
 80015a0:	400d      	ands	r5, r1
 80015a2:	420b      	tst	r3, r1
 80015a4:	d100      	bne.n	80015a8 <__aeabi_ddiv+0x3f4>
 80015a6:	e0d0      	b.n	800174a <__aeabi_ddiv+0x596>
 80015a8:	220f      	movs	r2, #15
 80015aa:	2300      	movs	r3, #0
 80015ac:	400a      	ands	r2, r1
 80015ae:	2a04      	cmp	r2, #4
 80015b0:	d100      	bne.n	80015b4 <__aeabi_ddiv+0x400>
 80015b2:	e0c7      	b.n	8001744 <__aeabi_ddiv+0x590>
 80015b4:	1d0a      	adds	r2, r1, #4
 80015b6:	428a      	cmp	r2, r1
 80015b8:	4189      	sbcs	r1, r1
 80015ba:	4249      	negs	r1, r1
 80015bc:	185b      	adds	r3, r3, r1
 80015be:	0011      	movs	r1, r2
 80015c0:	021a      	lsls	r2, r3, #8
 80015c2:	d400      	bmi.n	80015c6 <__aeabi_ddiv+0x412>
 80015c4:	e0be      	b.n	8001744 <__aeabi_ddiv+0x590>
 80015c6:	2301      	movs	r3, #1
 80015c8:	2200      	movs	r2, #0
 80015ca:	2500      	movs	r5, #0
 80015cc:	e649      	b.n	8001262 <__aeabi_ddiv+0xae>
 80015ce:	2280      	movs	r2, #128	; 0x80
 80015d0:	4643      	mov	r3, r8
 80015d2:	0312      	lsls	r2, r2, #12
 80015d4:	4213      	tst	r3, r2
 80015d6:	d008      	beq.n	80015ea <__aeabi_ddiv+0x436>
 80015d8:	4214      	tst	r4, r2
 80015da:	d106      	bne.n	80015ea <__aeabi_ddiv+0x436>
 80015dc:	4322      	orrs	r2, r4
 80015de:	0312      	lsls	r2, r2, #12
 80015e0:	46ba      	mov	sl, r7
 80015e2:	000d      	movs	r5, r1
 80015e4:	4b66      	ldr	r3, [pc, #408]	; (8001780 <__aeabi_ddiv+0x5cc>)
 80015e6:	0b12      	lsrs	r2, r2, #12
 80015e8:	e63b      	b.n	8001262 <__aeabi_ddiv+0xae>
 80015ea:	2280      	movs	r2, #128	; 0x80
 80015ec:	4643      	mov	r3, r8
 80015ee:	0312      	lsls	r2, r2, #12
 80015f0:	431a      	orrs	r2, r3
 80015f2:	0312      	lsls	r2, r2, #12
 80015f4:	46b2      	mov	sl, r6
 80015f6:	4b62      	ldr	r3, [pc, #392]	; (8001780 <__aeabi_ddiv+0x5cc>)
 80015f8:	0b12      	lsrs	r2, r2, #12
 80015fa:	e632      	b.n	8001262 <__aeabi_ddiv+0xae>
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d100      	bne.n	8001602 <__aeabi_ddiv+0x44e>
 8001600:	e702      	b.n	8001408 <__aeabi_ddiv+0x254>
 8001602:	19a6      	adds	r6, r4, r6
 8001604:	1e6a      	subs	r2, r5, #1
 8001606:	42a6      	cmp	r6, r4
 8001608:	d200      	bcs.n	800160c <__aeabi_ddiv+0x458>
 800160a:	e089      	b.n	8001720 <__aeabi_ddiv+0x56c>
 800160c:	4286      	cmp	r6, r0
 800160e:	d200      	bcs.n	8001612 <__aeabi_ddiv+0x45e>
 8001610:	e09f      	b.n	8001752 <__aeabi_ddiv+0x59e>
 8001612:	d100      	bne.n	8001616 <__aeabi_ddiv+0x462>
 8001614:	e0af      	b.n	8001776 <__aeabi_ddiv+0x5c2>
 8001616:	0015      	movs	r5, r2
 8001618:	e6f4      	b.n	8001404 <__aeabi_ddiv+0x250>
 800161a:	42a9      	cmp	r1, r5
 800161c:	d900      	bls.n	8001620 <__aeabi_ddiv+0x46c>
 800161e:	e63c      	b.n	800129a <__aeabi_ddiv+0xe6>
 8001620:	4643      	mov	r3, r8
 8001622:	07de      	lsls	r6, r3, #31
 8001624:	0858      	lsrs	r0, r3, #1
 8001626:	086b      	lsrs	r3, r5, #1
 8001628:	431e      	orrs	r6, r3
 800162a:	07ed      	lsls	r5, r5, #31
 800162c:	e63c      	b.n	80012a8 <__aeabi_ddiv+0xf4>
 800162e:	f001 f977 	bl	8002920 <__clzsi2>
 8001632:	0001      	movs	r1, r0
 8001634:	0002      	movs	r2, r0
 8001636:	3115      	adds	r1, #21
 8001638:	3220      	adds	r2, #32
 800163a:	291c      	cmp	r1, #28
 800163c:	dc00      	bgt.n	8001640 <__aeabi_ddiv+0x48c>
 800163e:	e72c      	b.n	800149a <__aeabi_ddiv+0x2e6>
 8001640:	464b      	mov	r3, r9
 8001642:	3808      	subs	r0, #8
 8001644:	4083      	lsls	r3, r0
 8001646:	2500      	movs	r5, #0
 8001648:	4698      	mov	r8, r3
 800164a:	e732      	b.n	80014b2 <__aeabi_ddiv+0x2fe>
 800164c:	f001 f968 	bl	8002920 <__clzsi2>
 8001650:	0003      	movs	r3, r0
 8001652:	001a      	movs	r2, r3
 8001654:	3215      	adds	r2, #21
 8001656:	3020      	adds	r0, #32
 8001658:	2a1c      	cmp	r2, #28
 800165a:	dc00      	bgt.n	800165e <__aeabi_ddiv+0x4aa>
 800165c:	e6ff      	b.n	800145e <__aeabi_ddiv+0x2aa>
 800165e:	4654      	mov	r4, sl
 8001660:	3b08      	subs	r3, #8
 8001662:	2100      	movs	r1, #0
 8001664:	409c      	lsls	r4, r3
 8001666:	e705      	b.n	8001474 <__aeabi_ddiv+0x2c0>
 8001668:	1936      	adds	r6, r6, r4
 800166a:	3b01      	subs	r3, #1
 800166c:	42b4      	cmp	r4, r6
 800166e:	d900      	bls.n	8001672 <__aeabi_ddiv+0x4be>
 8001670:	e6a6      	b.n	80013c0 <__aeabi_ddiv+0x20c>
 8001672:	42b2      	cmp	r2, r6
 8001674:	d800      	bhi.n	8001678 <__aeabi_ddiv+0x4c4>
 8001676:	e6a3      	b.n	80013c0 <__aeabi_ddiv+0x20c>
 8001678:	1e83      	subs	r3, r0, #2
 800167a:	1936      	adds	r6, r6, r4
 800167c:	e6a0      	b.n	80013c0 <__aeabi_ddiv+0x20c>
 800167e:	1909      	adds	r1, r1, r4
 8001680:	3d01      	subs	r5, #1
 8001682:	428c      	cmp	r4, r1
 8001684:	d900      	bls.n	8001688 <__aeabi_ddiv+0x4d4>
 8001686:	e68d      	b.n	80013a4 <__aeabi_ddiv+0x1f0>
 8001688:	428a      	cmp	r2, r1
 800168a:	d800      	bhi.n	800168e <__aeabi_ddiv+0x4da>
 800168c:	e68a      	b.n	80013a4 <__aeabi_ddiv+0x1f0>
 800168e:	1e85      	subs	r5, r0, #2
 8001690:	1909      	adds	r1, r1, r4
 8001692:	e687      	b.n	80013a4 <__aeabi_ddiv+0x1f0>
 8001694:	220f      	movs	r2, #15
 8001696:	402a      	ands	r2, r5
 8001698:	2a04      	cmp	r2, #4
 800169a:	d100      	bne.n	800169e <__aeabi_ddiv+0x4ea>
 800169c:	e6bc      	b.n	8001418 <__aeabi_ddiv+0x264>
 800169e:	1d29      	adds	r1, r5, #4
 80016a0:	42a9      	cmp	r1, r5
 80016a2:	41ad      	sbcs	r5, r5
 80016a4:	426d      	negs	r5, r5
 80016a6:	08c9      	lsrs	r1, r1, #3
 80016a8:	44a8      	add	r8, r5
 80016aa:	e6b6      	b.n	800141a <__aeabi_ddiv+0x266>
 80016ac:	42af      	cmp	r7, r5
 80016ae:	d900      	bls.n	80016b2 <__aeabi_ddiv+0x4fe>
 80016b0:	e662      	b.n	8001378 <__aeabi_ddiv+0x1c4>
 80016b2:	4281      	cmp	r1, r0
 80016b4:	d804      	bhi.n	80016c0 <__aeabi_ddiv+0x50c>
 80016b6:	d000      	beq.n	80016ba <__aeabi_ddiv+0x506>
 80016b8:	e65e      	b.n	8001378 <__aeabi_ddiv+0x1c4>
 80016ba:	42ae      	cmp	r6, r5
 80016bc:	d800      	bhi.n	80016c0 <__aeabi_ddiv+0x50c>
 80016be:	e65b      	b.n	8001378 <__aeabi_ddiv+0x1c4>
 80016c0:	2302      	movs	r3, #2
 80016c2:	425b      	negs	r3, r3
 80016c4:	469c      	mov	ip, r3
 80016c6:	9b00      	ldr	r3, [sp, #0]
 80016c8:	44e0      	add	r8, ip
 80016ca:	469c      	mov	ip, r3
 80016cc:	4465      	add	r5, ip
 80016ce:	429d      	cmp	r5, r3
 80016d0:	419b      	sbcs	r3, r3
 80016d2:	425b      	negs	r3, r3
 80016d4:	191b      	adds	r3, r3, r4
 80016d6:	18c0      	adds	r0, r0, r3
 80016d8:	e64f      	b.n	800137a <__aeabi_ddiv+0x1c6>
 80016da:	42b2      	cmp	r2, r6
 80016dc:	d800      	bhi.n	80016e0 <__aeabi_ddiv+0x52c>
 80016de:	e612      	b.n	8001306 <__aeabi_ddiv+0x152>
 80016e0:	1e83      	subs	r3, r0, #2
 80016e2:	1936      	adds	r6, r6, r4
 80016e4:	e60f      	b.n	8001306 <__aeabi_ddiv+0x152>
 80016e6:	428a      	cmp	r2, r1
 80016e8:	d800      	bhi.n	80016ec <__aeabi_ddiv+0x538>
 80016ea:	e5fa      	b.n	80012e2 <__aeabi_ddiv+0x12e>
 80016ec:	1e83      	subs	r3, r0, #2
 80016ee:	4698      	mov	r8, r3
 80016f0:	1909      	adds	r1, r1, r4
 80016f2:	e5f6      	b.n	80012e2 <__aeabi_ddiv+0x12e>
 80016f4:	4b24      	ldr	r3, [pc, #144]	; (8001788 <__aeabi_ddiv+0x5d4>)
 80016f6:	0028      	movs	r0, r5
 80016f8:	445b      	add	r3, fp
 80016fa:	4641      	mov	r1, r8
 80016fc:	409d      	lsls	r5, r3
 80016fe:	4099      	lsls	r1, r3
 8001700:	40d0      	lsrs	r0, r2
 8001702:	1e6b      	subs	r3, r5, #1
 8001704:	419d      	sbcs	r5, r3
 8001706:	4643      	mov	r3, r8
 8001708:	4301      	orrs	r1, r0
 800170a:	4329      	orrs	r1, r5
 800170c:	40d3      	lsrs	r3, r2
 800170e:	074a      	lsls	r2, r1, #29
 8001710:	d100      	bne.n	8001714 <__aeabi_ddiv+0x560>
 8001712:	e755      	b.n	80015c0 <__aeabi_ddiv+0x40c>
 8001714:	220f      	movs	r2, #15
 8001716:	400a      	ands	r2, r1
 8001718:	2a04      	cmp	r2, #4
 800171a:	d000      	beq.n	800171e <__aeabi_ddiv+0x56a>
 800171c:	e74a      	b.n	80015b4 <__aeabi_ddiv+0x400>
 800171e:	e74f      	b.n	80015c0 <__aeabi_ddiv+0x40c>
 8001720:	0015      	movs	r5, r2
 8001722:	4286      	cmp	r6, r0
 8001724:	d000      	beq.n	8001728 <__aeabi_ddiv+0x574>
 8001726:	e66d      	b.n	8001404 <__aeabi_ddiv+0x250>
 8001728:	9a00      	ldr	r2, [sp, #0]
 800172a:	429a      	cmp	r2, r3
 800172c:	d000      	beq.n	8001730 <__aeabi_ddiv+0x57c>
 800172e:	e669      	b.n	8001404 <__aeabi_ddiv+0x250>
 8001730:	e66a      	b.n	8001408 <__aeabi_ddiv+0x254>
 8001732:	4b16      	ldr	r3, [pc, #88]	; (800178c <__aeabi_ddiv+0x5d8>)
 8001734:	445b      	add	r3, fp
 8001736:	2b00      	cmp	r3, #0
 8001738:	dc00      	bgt.n	800173c <__aeabi_ddiv+0x588>
 800173a:	e713      	b.n	8001564 <__aeabi_ddiv+0x3b0>
 800173c:	2501      	movs	r5, #1
 800173e:	2100      	movs	r1, #0
 8001740:	44a8      	add	r8, r5
 8001742:	e66a      	b.n	800141a <__aeabi_ddiv+0x266>
 8001744:	075d      	lsls	r5, r3, #29
 8001746:	025b      	lsls	r3, r3, #9
 8001748:	0b1a      	lsrs	r2, r3, #12
 800174a:	08c9      	lsrs	r1, r1, #3
 800174c:	2300      	movs	r3, #0
 800174e:	430d      	orrs	r5, r1
 8001750:	e587      	b.n	8001262 <__aeabi_ddiv+0xae>
 8001752:	9900      	ldr	r1, [sp, #0]
 8001754:	3d02      	subs	r5, #2
 8001756:	004a      	lsls	r2, r1, #1
 8001758:	428a      	cmp	r2, r1
 800175a:	41bf      	sbcs	r7, r7
 800175c:	427f      	negs	r7, r7
 800175e:	193f      	adds	r7, r7, r4
 8001760:	19f6      	adds	r6, r6, r7
 8001762:	9200      	str	r2, [sp, #0]
 8001764:	e7dd      	b.n	8001722 <__aeabi_ddiv+0x56e>
 8001766:	2280      	movs	r2, #128	; 0x80
 8001768:	4643      	mov	r3, r8
 800176a:	0312      	lsls	r2, r2, #12
 800176c:	431a      	orrs	r2, r3
 800176e:	0312      	lsls	r2, r2, #12
 8001770:	4b03      	ldr	r3, [pc, #12]	; (8001780 <__aeabi_ddiv+0x5cc>)
 8001772:	0b12      	lsrs	r2, r2, #12
 8001774:	e575      	b.n	8001262 <__aeabi_ddiv+0xae>
 8001776:	9900      	ldr	r1, [sp, #0]
 8001778:	4299      	cmp	r1, r3
 800177a:	d3ea      	bcc.n	8001752 <__aeabi_ddiv+0x59e>
 800177c:	0015      	movs	r5, r2
 800177e:	e7d3      	b.n	8001728 <__aeabi_ddiv+0x574>
 8001780:	000007ff 	.word	0x000007ff
 8001784:	0000043e 	.word	0x0000043e
 8001788:	0000041e 	.word	0x0000041e
 800178c:	000003ff 	.word	0x000003ff

08001790 <__eqdf2>:
 8001790:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001792:	464e      	mov	r6, r9
 8001794:	4645      	mov	r5, r8
 8001796:	46de      	mov	lr, fp
 8001798:	4657      	mov	r7, sl
 800179a:	4690      	mov	r8, r2
 800179c:	b5e0      	push	{r5, r6, r7, lr}
 800179e:	0017      	movs	r7, r2
 80017a0:	031a      	lsls	r2, r3, #12
 80017a2:	0b12      	lsrs	r2, r2, #12
 80017a4:	0005      	movs	r5, r0
 80017a6:	4684      	mov	ip, r0
 80017a8:	4819      	ldr	r0, [pc, #100]	; (8001810 <__eqdf2+0x80>)
 80017aa:	030e      	lsls	r6, r1, #12
 80017ac:	004c      	lsls	r4, r1, #1
 80017ae:	4691      	mov	r9, r2
 80017b0:	005a      	lsls	r2, r3, #1
 80017b2:	0fdb      	lsrs	r3, r3, #31
 80017b4:	469b      	mov	fp, r3
 80017b6:	0b36      	lsrs	r6, r6, #12
 80017b8:	0d64      	lsrs	r4, r4, #21
 80017ba:	0fc9      	lsrs	r1, r1, #31
 80017bc:	0d52      	lsrs	r2, r2, #21
 80017be:	4284      	cmp	r4, r0
 80017c0:	d019      	beq.n	80017f6 <__eqdf2+0x66>
 80017c2:	4282      	cmp	r2, r0
 80017c4:	d010      	beq.n	80017e8 <__eqdf2+0x58>
 80017c6:	2001      	movs	r0, #1
 80017c8:	4294      	cmp	r4, r2
 80017ca:	d10e      	bne.n	80017ea <__eqdf2+0x5a>
 80017cc:	454e      	cmp	r6, r9
 80017ce:	d10c      	bne.n	80017ea <__eqdf2+0x5a>
 80017d0:	2001      	movs	r0, #1
 80017d2:	45c4      	cmp	ip, r8
 80017d4:	d109      	bne.n	80017ea <__eqdf2+0x5a>
 80017d6:	4559      	cmp	r1, fp
 80017d8:	d017      	beq.n	800180a <__eqdf2+0x7a>
 80017da:	2c00      	cmp	r4, #0
 80017dc:	d105      	bne.n	80017ea <__eqdf2+0x5a>
 80017de:	0030      	movs	r0, r6
 80017e0:	4328      	orrs	r0, r5
 80017e2:	1e43      	subs	r3, r0, #1
 80017e4:	4198      	sbcs	r0, r3
 80017e6:	e000      	b.n	80017ea <__eqdf2+0x5a>
 80017e8:	2001      	movs	r0, #1
 80017ea:	bcf0      	pop	{r4, r5, r6, r7}
 80017ec:	46bb      	mov	fp, r7
 80017ee:	46b2      	mov	sl, r6
 80017f0:	46a9      	mov	r9, r5
 80017f2:	46a0      	mov	r8, r4
 80017f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017f6:	0033      	movs	r3, r6
 80017f8:	2001      	movs	r0, #1
 80017fa:	432b      	orrs	r3, r5
 80017fc:	d1f5      	bne.n	80017ea <__eqdf2+0x5a>
 80017fe:	42a2      	cmp	r2, r4
 8001800:	d1f3      	bne.n	80017ea <__eqdf2+0x5a>
 8001802:	464b      	mov	r3, r9
 8001804:	433b      	orrs	r3, r7
 8001806:	d1f0      	bne.n	80017ea <__eqdf2+0x5a>
 8001808:	e7e2      	b.n	80017d0 <__eqdf2+0x40>
 800180a:	2000      	movs	r0, #0
 800180c:	e7ed      	b.n	80017ea <__eqdf2+0x5a>
 800180e:	46c0      	nop			; (mov r8, r8)
 8001810:	000007ff 	.word	0x000007ff

08001814 <__gedf2>:
 8001814:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001816:	4647      	mov	r7, r8
 8001818:	46ce      	mov	lr, r9
 800181a:	0004      	movs	r4, r0
 800181c:	0018      	movs	r0, r3
 800181e:	0016      	movs	r6, r2
 8001820:	031b      	lsls	r3, r3, #12
 8001822:	0b1b      	lsrs	r3, r3, #12
 8001824:	4d2d      	ldr	r5, [pc, #180]	; (80018dc <__gedf2+0xc8>)
 8001826:	004a      	lsls	r2, r1, #1
 8001828:	4699      	mov	r9, r3
 800182a:	b580      	push	{r7, lr}
 800182c:	0043      	lsls	r3, r0, #1
 800182e:	030f      	lsls	r7, r1, #12
 8001830:	46a4      	mov	ip, r4
 8001832:	46b0      	mov	r8, r6
 8001834:	0b3f      	lsrs	r7, r7, #12
 8001836:	0d52      	lsrs	r2, r2, #21
 8001838:	0fc9      	lsrs	r1, r1, #31
 800183a:	0d5b      	lsrs	r3, r3, #21
 800183c:	0fc0      	lsrs	r0, r0, #31
 800183e:	42aa      	cmp	r2, r5
 8001840:	d021      	beq.n	8001886 <__gedf2+0x72>
 8001842:	42ab      	cmp	r3, r5
 8001844:	d013      	beq.n	800186e <__gedf2+0x5a>
 8001846:	2a00      	cmp	r2, #0
 8001848:	d122      	bne.n	8001890 <__gedf2+0x7c>
 800184a:	433c      	orrs	r4, r7
 800184c:	2b00      	cmp	r3, #0
 800184e:	d102      	bne.n	8001856 <__gedf2+0x42>
 8001850:	464d      	mov	r5, r9
 8001852:	432e      	orrs	r6, r5
 8001854:	d022      	beq.n	800189c <__gedf2+0x88>
 8001856:	2c00      	cmp	r4, #0
 8001858:	d010      	beq.n	800187c <__gedf2+0x68>
 800185a:	4281      	cmp	r1, r0
 800185c:	d022      	beq.n	80018a4 <__gedf2+0x90>
 800185e:	2002      	movs	r0, #2
 8001860:	3901      	subs	r1, #1
 8001862:	4008      	ands	r0, r1
 8001864:	3801      	subs	r0, #1
 8001866:	bcc0      	pop	{r6, r7}
 8001868:	46b9      	mov	r9, r7
 800186a:	46b0      	mov	r8, r6
 800186c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800186e:	464d      	mov	r5, r9
 8001870:	432e      	orrs	r6, r5
 8001872:	d129      	bne.n	80018c8 <__gedf2+0xb4>
 8001874:	2a00      	cmp	r2, #0
 8001876:	d1f0      	bne.n	800185a <__gedf2+0x46>
 8001878:	433c      	orrs	r4, r7
 800187a:	d1ee      	bne.n	800185a <__gedf2+0x46>
 800187c:	2800      	cmp	r0, #0
 800187e:	d1f2      	bne.n	8001866 <__gedf2+0x52>
 8001880:	2001      	movs	r0, #1
 8001882:	4240      	negs	r0, r0
 8001884:	e7ef      	b.n	8001866 <__gedf2+0x52>
 8001886:	003d      	movs	r5, r7
 8001888:	4325      	orrs	r5, r4
 800188a:	d11d      	bne.n	80018c8 <__gedf2+0xb4>
 800188c:	4293      	cmp	r3, r2
 800188e:	d0ee      	beq.n	800186e <__gedf2+0x5a>
 8001890:	2b00      	cmp	r3, #0
 8001892:	d1e2      	bne.n	800185a <__gedf2+0x46>
 8001894:	464c      	mov	r4, r9
 8001896:	4326      	orrs	r6, r4
 8001898:	d1df      	bne.n	800185a <__gedf2+0x46>
 800189a:	e7e0      	b.n	800185e <__gedf2+0x4a>
 800189c:	2000      	movs	r0, #0
 800189e:	2c00      	cmp	r4, #0
 80018a0:	d0e1      	beq.n	8001866 <__gedf2+0x52>
 80018a2:	e7dc      	b.n	800185e <__gedf2+0x4a>
 80018a4:	429a      	cmp	r2, r3
 80018a6:	dc0a      	bgt.n	80018be <__gedf2+0xaa>
 80018a8:	dbe8      	blt.n	800187c <__gedf2+0x68>
 80018aa:	454f      	cmp	r7, r9
 80018ac:	d8d7      	bhi.n	800185e <__gedf2+0x4a>
 80018ae:	d00e      	beq.n	80018ce <__gedf2+0xba>
 80018b0:	2000      	movs	r0, #0
 80018b2:	454f      	cmp	r7, r9
 80018b4:	d2d7      	bcs.n	8001866 <__gedf2+0x52>
 80018b6:	2900      	cmp	r1, #0
 80018b8:	d0e2      	beq.n	8001880 <__gedf2+0x6c>
 80018ba:	0008      	movs	r0, r1
 80018bc:	e7d3      	b.n	8001866 <__gedf2+0x52>
 80018be:	4243      	negs	r3, r0
 80018c0:	4158      	adcs	r0, r3
 80018c2:	0040      	lsls	r0, r0, #1
 80018c4:	3801      	subs	r0, #1
 80018c6:	e7ce      	b.n	8001866 <__gedf2+0x52>
 80018c8:	2002      	movs	r0, #2
 80018ca:	4240      	negs	r0, r0
 80018cc:	e7cb      	b.n	8001866 <__gedf2+0x52>
 80018ce:	45c4      	cmp	ip, r8
 80018d0:	d8c5      	bhi.n	800185e <__gedf2+0x4a>
 80018d2:	2000      	movs	r0, #0
 80018d4:	45c4      	cmp	ip, r8
 80018d6:	d2c6      	bcs.n	8001866 <__gedf2+0x52>
 80018d8:	e7ed      	b.n	80018b6 <__gedf2+0xa2>
 80018da:	46c0      	nop			; (mov r8, r8)
 80018dc:	000007ff 	.word	0x000007ff

080018e0 <__ledf2>:
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	4647      	mov	r7, r8
 80018e4:	46ce      	mov	lr, r9
 80018e6:	0004      	movs	r4, r0
 80018e8:	0018      	movs	r0, r3
 80018ea:	0016      	movs	r6, r2
 80018ec:	031b      	lsls	r3, r3, #12
 80018ee:	0b1b      	lsrs	r3, r3, #12
 80018f0:	4d2c      	ldr	r5, [pc, #176]	; (80019a4 <__ledf2+0xc4>)
 80018f2:	004a      	lsls	r2, r1, #1
 80018f4:	4699      	mov	r9, r3
 80018f6:	b580      	push	{r7, lr}
 80018f8:	0043      	lsls	r3, r0, #1
 80018fa:	030f      	lsls	r7, r1, #12
 80018fc:	46a4      	mov	ip, r4
 80018fe:	46b0      	mov	r8, r6
 8001900:	0b3f      	lsrs	r7, r7, #12
 8001902:	0d52      	lsrs	r2, r2, #21
 8001904:	0fc9      	lsrs	r1, r1, #31
 8001906:	0d5b      	lsrs	r3, r3, #21
 8001908:	0fc0      	lsrs	r0, r0, #31
 800190a:	42aa      	cmp	r2, r5
 800190c:	d00d      	beq.n	800192a <__ledf2+0x4a>
 800190e:	42ab      	cmp	r3, r5
 8001910:	d010      	beq.n	8001934 <__ledf2+0x54>
 8001912:	2a00      	cmp	r2, #0
 8001914:	d127      	bne.n	8001966 <__ledf2+0x86>
 8001916:	433c      	orrs	r4, r7
 8001918:	2b00      	cmp	r3, #0
 800191a:	d111      	bne.n	8001940 <__ledf2+0x60>
 800191c:	464d      	mov	r5, r9
 800191e:	432e      	orrs	r6, r5
 8001920:	d10e      	bne.n	8001940 <__ledf2+0x60>
 8001922:	2000      	movs	r0, #0
 8001924:	2c00      	cmp	r4, #0
 8001926:	d015      	beq.n	8001954 <__ledf2+0x74>
 8001928:	e00e      	b.n	8001948 <__ledf2+0x68>
 800192a:	003d      	movs	r5, r7
 800192c:	4325      	orrs	r5, r4
 800192e:	d110      	bne.n	8001952 <__ledf2+0x72>
 8001930:	4293      	cmp	r3, r2
 8001932:	d118      	bne.n	8001966 <__ledf2+0x86>
 8001934:	464d      	mov	r5, r9
 8001936:	432e      	orrs	r6, r5
 8001938:	d10b      	bne.n	8001952 <__ledf2+0x72>
 800193a:	2a00      	cmp	r2, #0
 800193c:	d102      	bne.n	8001944 <__ledf2+0x64>
 800193e:	433c      	orrs	r4, r7
 8001940:	2c00      	cmp	r4, #0
 8001942:	d00b      	beq.n	800195c <__ledf2+0x7c>
 8001944:	4281      	cmp	r1, r0
 8001946:	d014      	beq.n	8001972 <__ledf2+0x92>
 8001948:	2002      	movs	r0, #2
 800194a:	3901      	subs	r1, #1
 800194c:	4008      	ands	r0, r1
 800194e:	3801      	subs	r0, #1
 8001950:	e000      	b.n	8001954 <__ledf2+0x74>
 8001952:	2002      	movs	r0, #2
 8001954:	bcc0      	pop	{r6, r7}
 8001956:	46b9      	mov	r9, r7
 8001958:	46b0      	mov	r8, r6
 800195a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800195c:	2800      	cmp	r0, #0
 800195e:	d1f9      	bne.n	8001954 <__ledf2+0x74>
 8001960:	2001      	movs	r0, #1
 8001962:	4240      	negs	r0, r0
 8001964:	e7f6      	b.n	8001954 <__ledf2+0x74>
 8001966:	2b00      	cmp	r3, #0
 8001968:	d1ec      	bne.n	8001944 <__ledf2+0x64>
 800196a:	464c      	mov	r4, r9
 800196c:	4326      	orrs	r6, r4
 800196e:	d1e9      	bne.n	8001944 <__ledf2+0x64>
 8001970:	e7ea      	b.n	8001948 <__ledf2+0x68>
 8001972:	429a      	cmp	r2, r3
 8001974:	dd04      	ble.n	8001980 <__ledf2+0xa0>
 8001976:	4243      	negs	r3, r0
 8001978:	4158      	adcs	r0, r3
 800197a:	0040      	lsls	r0, r0, #1
 800197c:	3801      	subs	r0, #1
 800197e:	e7e9      	b.n	8001954 <__ledf2+0x74>
 8001980:	429a      	cmp	r2, r3
 8001982:	dbeb      	blt.n	800195c <__ledf2+0x7c>
 8001984:	454f      	cmp	r7, r9
 8001986:	d8df      	bhi.n	8001948 <__ledf2+0x68>
 8001988:	d006      	beq.n	8001998 <__ledf2+0xb8>
 800198a:	2000      	movs	r0, #0
 800198c:	454f      	cmp	r7, r9
 800198e:	d2e1      	bcs.n	8001954 <__ledf2+0x74>
 8001990:	2900      	cmp	r1, #0
 8001992:	d0e5      	beq.n	8001960 <__ledf2+0x80>
 8001994:	0008      	movs	r0, r1
 8001996:	e7dd      	b.n	8001954 <__ledf2+0x74>
 8001998:	45c4      	cmp	ip, r8
 800199a:	d8d5      	bhi.n	8001948 <__ledf2+0x68>
 800199c:	2000      	movs	r0, #0
 800199e:	45c4      	cmp	ip, r8
 80019a0:	d2d8      	bcs.n	8001954 <__ledf2+0x74>
 80019a2:	e7f5      	b.n	8001990 <__ledf2+0xb0>
 80019a4:	000007ff 	.word	0x000007ff

080019a8 <__aeabi_dmul>:
 80019a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019aa:	4645      	mov	r5, r8
 80019ac:	46de      	mov	lr, fp
 80019ae:	4657      	mov	r7, sl
 80019b0:	464e      	mov	r6, r9
 80019b2:	b5e0      	push	{r5, r6, r7, lr}
 80019b4:	001f      	movs	r7, r3
 80019b6:	030b      	lsls	r3, r1, #12
 80019b8:	0b1b      	lsrs	r3, r3, #12
 80019ba:	469b      	mov	fp, r3
 80019bc:	004d      	lsls	r5, r1, #1
 80019be:	0fcb      	lsrs	r3, r1, #31
 80019c0:	0004      	movs	r4, r0
 80019c2:	4691      	mov	r9, r2
 80019c4:	4698      	mov	r8, r3
 80019c6:	b087      	sub	sp, #28
 80019c8:	0d6d      	lsrs	r5, r5, #21
 80019ca:	d100      	bne.n	80019ce <__aeabi_dmul+0x26>
 80019cc:	e1cd      	b.n	8001d6a <__aeabi_dmul+0x3c2>
 80019ce:	4bce      	ldr	r3, [pc, #824]	; (8001d08 <__aeabi_dmul+0x360>)
 80019d0:	429d      	cmp	r5, r3
 80019d2:	d100      	bne.n	80019d6 <__aeabi_dmul+0x2e>
 80019d4:	e1e9      	b.n	8001daa <__aeabi_dmul+0x402>
 80019d6:	465a      	mov	r2, fp
 80019d8:	0f43      	lsrs	r3, r0, #29
 80019da:	00d2      	lsls	r2, r2, #3
 80019dc:	4313      	orrs	r3, r2
 80019de:	2280      	movs	r2, #128	; 0x80
 80019e0:	0412      	lsls	r2, r2, #16
 80019e2:	431a      	orrs	r2, r3
 80019e4:	00c3      	lsls	r3, r0, #3
 80019e6:	469a      	mov	sl, r3
 80019e8:	4bc8      	ldr	r3, [pc, #800]	; (8001d0c <__aeabi_dmul+0x364>)
 80019ea:	4693      	mov	fp, r2
 80019ec:	469c      	mov	ip, r3
 80019ee:	2300      	movs	r3, #0
 80019f0:	2600      	movs	r6, #0
 80019f2:	4465      	add	r5, ip
 80019f4:	9300      	str	r3, [sp, #0]
 80019f6:	033c      	lsls	r4, r7, #12
 80019f8:	007b      	lsls	r3, r7, #1
 80019fa:	4648      	mov	r0, r9
 80019fc:	0b24      	lsrs	r4, r4, #12
 80019fe:	0d5b      	lsrs	r3, r3, #21
 8001a00:	0fff      	lsrs	r7, r7, #31
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d100      	bne.n	8001a08 <__aeabi_dmul+0x60>
 8001a06:	e189      	b.n	8001d1c <__aeabi_dmul+0x374>
 8001a08:	4abf      	ldr	r2, [pc, #764]	; (8001d08 <__aeabi_dmul+0x360>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d019      	beq.n	8001a42 <__aeabi_dmul+0x9a>
 8001a0e:	0f42      	lsrs	r2, r0, #29
 8001a10:	00e4      	lsls	r4, r4, #3
 8001a12:	4322      	orrs	r2, r4
 8001a14:	2480      	movs	r4, #128	; 0x80
 8001a16:	0424      	lsls	r4, r4, #16
 8001a18:	4314      	orrs	r4, r2
 8001a1a:	4abc      	ldr	r2, [pc, #752]	; (8001d0c <__aeabi_dmul+0x364>)
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4694      	mov	ip, r2
 8001a20:	4642      	mov	r2, r8
 8001a22:	4463      	add	r3, ip
 8001a24:	195b      	adds	r3, r3, r5
 8001a26:	9301      	str	r3, [sp, #4]
 8001a28:	9b01      	ldr	r3, [sp, #4]
 8001a2a:	407a      	eors	r2, r7
 8001a2c:	3301      	adds	r3, #1
 8001a2e:	00c0      	lsls	r0, r0, #3
 8001a30:	b2d2      	uxtb	r2, r2
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	2e0a      	cmp	r6, #10
 8001a36:	dd1c      	ble.n	8001a72 <__aeabi_dmul+0xca>
 8001a38:	003a      	movs	r2, r7
 8001a3a:	2e0b      	cmp	r6, #11
 8001a3c:	d05e      	beq.n	8001afc <__aeabi_dmul+0x154>
 8001a3e:	4647      	mov	r7, r8
 8001a40:	e056      	b.n	8001af0 <__aeabi_dmul+0x148>
 8001a42:	4649      	mov	r1, r9
 8001a44:	4bb0      	ldr	r3, [pc, #704]	; (8001d08 <__aeabi_dmul+0x360>)
 8001a46:	4321      	orrs	r1, r4
 8001a48:	18eb      	adds	r3, r5, r3
 8001a4a:	9301      	str	r3, [sp, #4]
 8001a4c:	2900      	cmp	r1, #0
 8001a4e:	d12a      	bne.n	8001aa6 <__aeabi_dmul+0xfe>
 8001a50:	2080      	movs	r0, #128	; 0x80
 8001a52:	2202      	movs	r2, #2
 8001a54:	0100      	lsls	r0, r0, #4
 8001a56:	002b      	movs	r3, r5
 8001a58:	4684      	mov	ip, r0
 8001a5a:	4316      	orrs	r6, r2
 8001a5c:	4642      	mov	r2, r8
 8001a5e:	4463      	add	r3, ip
 8001a60:	407a      	eors	r2, r7
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	9302      	str	r3, [sp, #8]
 8001a66:	2e0a      	cmp	r6, #10
 8001a68:	dd00      	ble.n	8001a6c <__aeabi_dmul+0xc4>
 8001a6a:	e231      	b.n	8001ed0 <__aeabi_dmul+0x528>
 8001a6c:	2000      	movs	r0, #0
 8001a6e:	2400      	movs	r4, #0
 8001a70:	2102      	movs	r1, #2
 8001a72:	2e02      	cmp	r6, #2
 8001a74:	dc26      	bgt.n	8001ac4 <__aeabi_dmul+0x11c>
 8001a76:	3e01      	subs	r6, #1
 8001a78:	2e01      	cmp	r6, #1
 8001a7a:	d852      	bhi.n	8001b22 <__aeabi_dmul+0x17a>
 8001a7c:	2902      	cmp	r1, #2
 8001a7e:	d04c      	beq.n	8001b1a <__aeabi_dmul+0x172>
 8001a80:	2901      	cmp	r1, #1
 8001a82:	d000      	beq.n	8001a86 <__aeabi_dmul+0xde>
 8001a84:	e118      	b.n	8001cb8 <__aeabi_dmul+0x310>
 8001a86:	2300      	movs	r3, #0
 8001a88:	2400      	movs	r4, #0
 8001a8a:	2500      	movs	r5, #0
 8001a8c:	051b      	lsls	r3, r3, #20
 8001a8e:	4323      	orrs	r3, r4
 8001a90:	07d2      	lsls	r2, r2, #31
 8001a92:	4313      	orrs	r3, r2
 8001a94:	0028      	movs	r0, r5
 8001a96:	0019      	movs	r1, r3
 8001a98:	b007      	add	sp, #28
 8001a9a:	bcf0      	pop	{r4, r5, r6, r7}
 8001a9c:	46bb      	mov	fp, r7
 8001a9e:	46b2      	mov	sl, r6
 8001aa0:	46a9      	mov	r9, r5
 8001aa2:	46a0      	mov	r8, r4
 8001aa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001aa6:	2180      	movs	r1, #128	; 0x80
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	0109      	lsls	r1, r1, #4
 8001aac:	002b      	movs	r3, r5
 8001aae:	468c      	mov	ip, r1
 8001ab0:	4316      	orrs	r6, r2
 8001ab2:	4642      	mov	r2, r8
 8001ab4:	4463      	add	r3, ip
 8001ab6:	407a      	eors	r2, r7
 8001ab8:	b2d2      	uxtb	r2, r2
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	2e0a      	cmp	r6, #10
 8001abe:	dd00      	ble.n	8001ac2 <__aeabi_dmul+0x11a>
 8001ac0:	e228      	b.n	8001f14 <__aeabi_dmul+0x56c>
 8001ac2:	2103      	movs	r1, #3
 8001ac4:	2501      	movs	r5, #1
 8001ac6:	40b5      	lsls	r5, r6
 8001ac8:	46ac      	mov	ip, r5
 8001aca:	26a6      	movs	r6, #166	; 0xa6
 8001acc:	4663      	mov	r3, ip
 8001ace:	00f6      	lsls	r6, r6, #3
 8001ad0:	4035      	ands	r5, r6
 8001ad2:	4233      	tst	r3, r6
 8001ad4:	d10b      	bne.n	8001aee <__aeabi_dmul+0x146>
 8001ad6:	2690      	movs	r6, #144	; 0x90
 8001ad8:	00b6      	lsls	r6, r6, #2
 8001ada:	4233      	tst	r3, r6
 8001adc:	d118      	bne.n	8001b10 <__aeabi_dmul+0x168>
 8001ade:	3eb9      	subs	r6, #185	; 0xb9
 8001ae0:	3eff      	subs	r6, #255	; 0xff
 8001ae2:	421e      	tst	r6, r3
 8001ae4:	d01d      	beq.n	8001b22 <__aeabi_dmul+0x17a>
 8001ae6:	46a3      	mov	fp, r4
 8001ae8:	4682      	mov	sl, r0
 8001aea:	9100      	str	r1, [sp, #0]
 8001aec:	e000      	b.n	8001af0 <__aeabi_dmul+0x148>
 8001aee:	0017      	movs	r7, r2
 8001af0:	9900      	ldr	r1, [sp, #0]
 8001af2:	003a      	movs	r2, r7
 8001af4:	2902      	cmp	r1, #2
 8001af6:	d010      	beq.n	8001b1a <__aeabi_dmul+0x172>
 8001af8:	465c      	mov	r4, fp
 8001afa:	4650      	mov	r0, sl
 8001afc:	2903      	cmp	r1, #3
 8001afe:	d1bf      	bne.n	8001a80 <__aeabi_dmul+0xd8>
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	031b      	lsls	r3, r3, #12
 8001b04:	431c      	orrs	r4, r3
 8001b06:	0324      	lsls	r4, r4, #12
 8001b08:	0005      	movs	r5, r0
 8001b0a:	4b7f      	ldr	r3, [pc, #508]	; (8001d08 <__aeabi_dmul+0x360>)
 8001b0c:	0b24      	lsrs	r4, r4, #12
 8001b0e:	e7bd      	b.n	8001a8c <__aeabi_dmul+0xe4>
 8001b10:	2480      	movs	r4, #128	; 0x80
 8001b12:	2200      	movs	r2, #0
 8001b14:	4b7c      	ldr	r3, [pc, #496]	; (8001d08 <__aeabi_dmul+0x360>)
 8001b16:	0324      	lsls	r4, r4, #12
 8001b18:	e7b8      	b.n	8001a8c <__aeabi_dmul+0xe4>
 8001b1a:	2400      	movs	r4, #0
 8001b1c:	2500      	movs	r5, #0
 8001b1e:	4b7a      	ldr	r3, [pc, #488]	; (8001d08 <__aeabi_dmul+0x360>)
 8001b20:	e7b4      	b.n	8001a8c <__aeabi_dmul+0xe4>
 8001b22:	4653      	mov	r3, sl
 8001b24:	041e      	lsls	r6, r3, #16
 8001b26:	0c36      	lsrs	r6, r6, #16
 8001b28:	0c1f      	lsrs	r7, r3, #16
 8001b2a:	0033      	movs	r3, r6
 8001b2c:	0c01      	lsrs	r1, r0, #16
 8001b2e:	0400      	lsls	r0, r0, #16
 8001b30:	0c00      	lsrs	r0, r0, #16
 8001b32:	4343      	muls	r3, r0
 8001b34:	4698      	mov	r8, r3
 8001b36:	0003      	movs	r3, r0
 8001b38:	437b      	muls	r3, r7
 8001b3a:	4699      	mov	r9, r3
 8001b3c:	0033      	movs	r3, r6
 8001b3e:	434b      	muls	r3, r1
 8001b40:	469c      	mov	ip, r3
 8001b42:	4643      	mov	r3, r8
 8001b44:	000d      	movs	r5, r1
 8001b46:	0c1b      	lsrs	r3, r3, #16
 8001b48:	469a      	mov	sl, r3
 8001b4a:	437d      	muls	r5, r7
 8001b4c:	44cc      	add	ip, r9
 8001b4e:	44d4      	add	ip, sl
 8001b50:	9500      	str	r5, [sp, #0]
 8001b52:	45e1      	cmp	r9, ip
 8001b54:	d904      	bls.n	8001b60 <__aeabi_dmul+0x1b8>
 8001b56:	2380      	movs	r3, #128	; 0x80
 8001b58:	025b      	lsls	r3, r3, #9
 8001b5a:	4699      	mov	r9, r3
 8001b5c:	444d      	add	r5, r9
 8001b5e:	9500      	str	r5, [sp, #0]
 8001b60:	4663      	mov	r3, ip
 8001b62:	0c1b      	lsrs	r3, r3, #16
 8001b64:	001d      	movs	r5, r3
 8001b66:	4663      	mov	r3, ip
 8001b68:	041b      	lsls	r3, r3, #16
 8001b6a:	469c      	mov	ip, r3
 8001b6c:	4643      	mov	r3, r8
 8001b6e:	041b      	lsls	r3, r3, #16
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	4698      	mov	r8, r3
 8001b74:	4663      	mov	r3, ip
 8001b76:	4443      	add	r3, r8
 8001b78:	9303      	str	r3, [sp, #12]
 8001b7a:	0c23      	lsrs	r3, r4, #16
 8001b7c:	4698      	mov	r8, r3
 8001b7e:	0033      	movs	r3, r6
 8001b80:	0424      	lsls	r4, r4, #16
 8001b82:	0c24      	lsrs	r4, r4, #16
 8001b84:	4363      	muls	r3, r4
 8001b86:	469c      	mov	ip, r3
 8001b88:	0023      	movs	r3, r4
 8001b8a:	437b      	muls	r3, r7
 8001b8c:	4699      	mov	r9, r3
 8001b8e:	4643      	mov	r3, r8
 8001b90:	435e      	muls	r6, r3
 8001b92:	435f      	muls	r7, r3
 8001b94:	444e      	add	r6, r9
 8001b96:	4663      	mov	r3, ip
 8001b98:	46b2      	mov	sl, r6
 8001b9a:	0c1e      	lsrs	r6, r3, #16
 8001b9c:	4456      	add	r6, sl
 8001b9e:	45b1      	cmp	r9, r6
 8001ba0:	d903      	bls.n	8001baa <__aeabi_dmul+0x202>
 8001ba2:	2380      	movs	r3, #128	; 0x80
 8001ba4:	025b      	lsls	r3, r3, #9
 8001ba6:	4699      	mov	r9, r3
 8001ba8:	444f      	add	r7, r9
 8001baa:	0c33      	lsrs	r3, r6, #16
 8001bac:	4699      	mov	r9, r3
 8001bae:	003b      	movs	r3, r7
 8001bb0:	444b      	add	r3, r9
 8001bb2:	9305      	str	r3, [sp, #20]
 8001bb4:	4663      	mov	r3, ip
 8001bb6:	46ac      	mov	ip, r5
 8001bb8:	041f      	lsls	r7, r3, #16
 8001bba:	0c3f      	lsrs	r7, r7, #16
 8001bbc:	0436      	lsls	r6, r6, #16
 8001bbe:	19f6      	adds	r6, r6, r7
 8001bc0:	44b4      	add	ip, r6
 8001bc2:	4663      	mov	r3, ip
 8001bc4:	9304      	str	r3, [sp, #16]
 8001bc6:	465b      	mov	r3, fp
 8001bc8:	0c1b      	lsrs	r3, r3, #16
 8001bca:	469c      	mov	ip, r3
 8001bcc:	465b      	mov	r3, fp
 8001bce:	041f      	lsls	r7, r3, #16
 8001bd0:	0c3f      	lsrs	r7, r7, #16
 8001bd2:	003b      	movs	r3, r7
 8001bd4:	4343      	muls	r3, r0
 8001bd6:	4699      	mov	r9, r3
 8001bd8:	4663      	mov	r3, ip
 8001bda:	4343      	muls	r3, r0
 8001bdc:	469a      	mov	sl, r3
 8001bde:	464b      	mov	r3, r9
 8001be0:	4660      	mov	r0, ip
 8001be2:	0c1b      	lsrs	r3, r3, #16
 8001be4:	469b      	mov	fp, r3
 8001be6:	4348      	muls	r0, r1
 8001be8:	4379      	muls	r1, r7
 8001bea:	4451      	add	r1, sl
 8001bec:	4459      	add	r1, fp
 8001bee:	458a      	cmp	sl, r1
 8001bf0:	d903      	bls.n	8001bfa <__aeabi_dmul+0x252>
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	025b      	lsls	r3, r3, #9
 8001bf6:	469a      	mov	sl, r3
 8001bf8:	4450      	add	r0, sl
 8001bfa:	0c0b      	lsrs	r3, r1, #16
 8001bfc:	469a      	mov	sl, r3
 8001bfe:	464b      	mov	r3, r9
 8001c00:	041b      	lsls	r3, r3, #16
 8001c02:	0c1b      	lsrs	r3, r3, #16
 8001c04:	4699      	mov	r9, r3
 8001c06:	003b      	movs	r3, r7
 8001c08:	4363      	muls	r3, r4
 8001c0a:	0409      	lsls	r1, r1, #16
 8001c0c:	4645      	mov	r5, r8
 8001c0e:	4449      	add	r1, r9
 8001c10:	4699      	mov	r9, r3
 8001c12:	4663      	mov	r3, ip
 8001c14:	435c      	muls	r4, r3
 8001c16:	436b      	muls	r3, r5
 8001c18:	469c      	mov	ip, r3
 8001c1a:	464b      	mov	r3, r9
 8001c1c:	0c1b      	lsrs	r3, r3, #16
 8001c1e:	4698      	mov	r8, r3
 8001c20:	436f      	muls	r7, r5
 8001c22:	193f      	adds	r7, r7, r4
 8001c24:	4447      	add	r7, r8
 8001c26:	4450      	add	r0, sl
 8001c28:	42bc      	cmp	r4, r7
 8001c2a:	d903      	bls.n	8001c34 <__aeabi_dmul+0x28c>
 8001c2c:	2380      	movs	r3, #128	; 0x80
 8001c2e:	025b      	lsls	r3, r3, #9
 8001c30:	4698      	mov	r8, r3
 8001c32:	44c4      	add	ip, r8
 8001c34:	9b04      	ldr	r3, [sp, #16]
 8001c36:	9d00      	ldr	r5, [sp, #0]
 8001c38:	4698      	mov	r8, r3
 8001c3a:	4445      	add	r5, r8
 8001c3c:	42b5      	cmp	r5, r6
 8001c3e:	41b6      	sbcs	r6, r6
 8001c40:	4273      	negs	r3, r6
 8001c42:	4698      	mov	r8, r3
 8001c44:	464b      	mov	r3, r9
 8001c46:	041e      	lsls	r6, r3, #16
 8001c48:	9b05      	ldr	r3, [sp, #20]
 8001c4a:	043c      	lsls	r4, r7, #16
 8001c4c:	4699      	mov	r9, r3
 8001c4e:	0c36      	lsrs	r6, r6, #16
 8001c50:	19a4      	adds	r4, r4, r6
 8001c52:	444c      	add	r4, r9
 8001c54:	46a1      	mov	r9, r4
 8001c56:	4683      	mov	fp, r0
 8001c58:	186e      	adds	r6, r5, r1
 8001c5a:	44c1      	add	r9, r8
 8001c5c:	428e      	cmp	r6, r1
 8001c5e:	4189      	sbcs	r1, r1
 8001c60:	44cb      	add	fp, r9
 8001c62:	465d      	mov	r5, fp
 8001c64:	4249      	negs	r1, r1
 8001c66:	186d      	adds	r5, r5, r1
 8001c68:	429c      	cmp	r4, r3
 8001c6a:	41a4      	sbcs	r4, r4
 8001c6c:	45c1      	cmp	r9, r8
 8001c6e:	419b      	sbcs	r3, r3
 8001c70:	4583      	cmp	fp, r0
 8001c72:	4180      	sbcs	r0, r0
 8001c74:	428d      	cmp	r5, r1
 8001c76:	4189      	sbcs	r1, r1
 8001c78:	425b      	negs	r3, r3
 8001c7a:	4264      	negs	r4, r4
 8001c7c:	431c      	orrs	r4, r3
 8001c7e:	4240      	negs	r0, r0
 8001c80:	9b03      	ldr	r3, [sp, #12]
 8001c82:	4249      	negs	r1, r1
 8001c84:	4301      	orrs	r1, r0
 8001c86:	0270      	lsls	r0, r6, #9
 8001c88:	0c3f      	lsrs	r7, r7, #16
 8001c8a:	4318      	orrs	r0, r3
 8001c8c:	19e4      	adds	r4, r4, r7
 8001c8e:	1e47      	subs	r7, r0, #1
 8001c90:	41b8      	sbcs	r0, r7
 8001c92:	1864      	adds	r4, r4, r1
 8001c94:	4464      	add	r4, ip
 8001c96:	0df6      	lsrs	r6, r6, #23
 8001c98:	0261      	lsls	r1, r4, #9
 8001c9a:	4330      	orrs	r0, r6
 8001c9c:	0dec      	lsrs	r4, r5, #23
 8001c9e:	026e      	lsls	r6, r5, #9
 8001ca0:	430c      	orrs	r4, r1
 8001ca2:	4330      	orrs	r0, r6
 8001ca4:	01c9      	lsls	r1, r1, #7
 8001ca6:	d400      	bmi.n	8001caa <__aeabi_dmul+0x302>
 8001ca8:	e0f1      	b.n	8001e8e <__aeabi_dmul+0x4e6>
 8001caa:	2101      	movs	r1, #1
 8001cac:	0843      	lsrs	r3, r0, #1
 8001cae:	4001      	ands	r1, r0
 8001cb0:	430b      	orrs	r3, r1
 8001cb2:	07e0      	lsls	r0, r4, #31
 8001cb4:	4318      	orrs	r0, r3
 8001cb6:	0864      	lsrs	r4, r4, #1
 8001cb8:	4915      	ldr	r1, [pc, #84]	; (8001d10 <__aeabi_dmul+0x368>)
 8001cba:	9b02      	ldr	r3, [sp, #8]
 8001cbc:	468c      	mov	ip, r1
 8001cbe:	4463      	add	r3, ip
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	dc00      	bgt.n	8001cc6 <__aeabi_dmul+0x31e>
 8001cc4:	e097      	b.n	8001df6 <__aeabi_dmul+0x44e>
 8001cc6:	0741      	lsls	r1, r0, #29
 8001cc8:	d009      	beq.n	8001cde <__aeabi_dmul+0x336>
 8001cca:	210f      	movs	r1, #15
 8001ccc:	4001      	ands	r1, r0
 8001cce:	2904      	cmp	r1, #4
 8001cd0:	d005      	beq.n	8001cde <__aeabi_dmul+0x336>
 8001cd2:	1d01      	adds	r1, r0, #4
 8001cd4:	4281      	cmp	r1, r0
 8001cd6:	4180      	sbcs	r0, r0
 8001cd8:	4240      	negs	r0, r0
 8001cda:	1824      	adds	r4, r4, r0
 8001cdc:	0008      	movs	r0, r1
 8001cde:	01e1      	lsls	r1, r4, #7
 8001ce0:	d506      	bpl.n	8001cf0 <__aeabi_dmul+0x348>
 8001ce2:	2180      	movs	r1, #128	; 0x80
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	468c      	mov	ip, r1
 8001ce8:	4b0a      	ldr	r3, [pc, #40]	; (8001d14 <__aeabi_dmul+0x36c>)
 8001cea:	401c      	ands	r4, r3
 8001cec:	9b02      	ldr	r3, [sp, #8]
 8001cee:	4463      	add	r3, ip
 8001cf0:	4909      	ldr	r1, [pc, #36]	; (8001d18 <__aeabi_dmul+0x370>)
 8001cf2:	428b      	cmp	r3, r1
 8001cf4:	dd00      	ble.n	8001cf8 <__aeabi_dmul+0x350>
 8001cf6:	e710      	b.n	8001b1a <__aeabi_dmul+0x172>
 8001cf8:	0761      	lsls	r1, r4, #29
 8001cfa:	08c5      	lsrs	r5, r0, #3
 8001cfc:	0264      	lsls	r4, r4, #9
 8001cfe:	055b      	lsls	r3, r3, #21
 8001d00:	430d      	orrs	r5, r1
 8001d02:	0b24      	lsrs	r4, r4, #12
 8001d04:	0d5b      	lsrs	r3, r3, #21
 8001d06:	e6c1      	b.n	8001a8c <__aeabi_dmul+0xe4>
 8001d08:	000007ff 	.word	0x000007ff
 8001d0c:	fffffc01 	.word	0xfffffc01
 8001d10:	000003ff 	.word	0x000003ff
 8001d14:	feffffff 	.word	0xfeffffff
 8001d18:	000007fe 	.word	0x000007fe
 8001d1c:	464b      	mov	r3, r9
 8001d1e:	4323      	orrs	r3, r4
 8001d20:	d059      	beq.n	8001dd6 <__aeabi_dmul+0x42e>
 8001d22:	2c00      	cmp	r4, #0
 8001d24:	d100      	bne.n	8001d28 <__aeabi_dmul+0x380>
 8001d26:	e0a3      	b.n	8001e70 <__aeabi_dmul+0x4c8>
 8001d28:	0020      	movs	r0, r4
 8001d2a:	f000 fdf9 	bl	8002920 <__clzsi2>
 8001d2e:	0001      	movs	r1, r0
 8001d30:	0003      	movs	r3, r0
 8001d32:	390b      	subs	r1, #11
 8001d34:	221d      	movs	r2, #29
 8001d36:	1a52      	subs	r2, r2, r1
 8001d38:	4649      	mov	r1, r9
 8001d3a:	0018      	movs	r0, r3
 8001d3c:	40d1      	lsrs	r1, r2
 8001d3e:	464a      	mov	r2, r9
 8001d40:	3808      	subs	r0, #8
 8001d42:	4082      	lsls	r2, r0
 8001d44:	4084      	lsls	r4, r0
 8001d46:	0010      	movs	r0, r2
 8001d48:	430c      	orrs	r4, r1
 8001d4a:	4a74      	ldr	r2, [pc, #464]	; (8001f1c <__aeabi_dmul+0x574>)
 8001d4c:	1aeb      	subs	r3, r5, r3
 8001d4e:	4694      	mov	ip, r2
 8001d50:	4642      	mov	r2, r8
 8001d52:	4463      	add	r3, ip
 8001d54:	9301      	str	r3, [sp, #4]
 8001d56:	9b01      	ldr	r3, [sp, #4]
 8001d58:	407a      	eors	r2, r7
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	b2d2      	uxtb	r2, r2
 8001d60:	9302      	str	r3, [sp, #8]
 8001d62:	2e0a      	cmp	r6, #10
 8001d64:	dd00      	ble.n	8001d68 <__aeabi_dmul+0x3c0>
 8001d66:	e667      	b.n	8001a38 <__aeabi_dmul+0x90>
 8001d68:	e683      	b.n	8001a72 <__aeabi_dmul+0xca>
 8001d6a:	465b      	mov	r3, fp
 8001d6c:	4303      	orrs	r3, r0
 8001d6e:	469a      	mov	sl, r3
 8001d70:	d02a      	beq.n	8001dc8 <__aeabi_dmul+0x420>
 8001d72:	465b      	mov	r3, fp
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d06d      	beq.n	8001e54 <__aeabi_dmul+0x4ac>
 8001d78:	4658      	mov	r0, fp
 8001d7a:	f000 fdd1 	bl	8002920 <__clzsi2>
 8001d7e:	0001      	movs	r1, r0
 8001d80:	0003      	movs	r3, r0
 8001d82:	390b      	subs	r1, #11
 8001d84:	221d      	movs	r2, #29
 8001d86:	1a52      	subs	r2, r2, r1
 8001d88:	0021      	movs	r1, r4
 8001d8a:	0018      	movs	r0, r3
 8001d8c:	465d      	mov	r5, fp
 8001d8e:	40d1      	lsrs	r1, r2
 8001d90:	3808      	subs	r0, #8
 8001d92:	4085      	lsls	r5, r0
 8001d94:	000a      	movs	r2, r1
 8001d96:	4084      	lsls	r4, r0
 8001d98:	432a      	orrs	r2, r5
 8001d9a:	4693      	mov	fp, r2
 8001d9c:	46a2      	mov	sl, r4
 8001d9e:	4d5f      	ldr	r5, [pc, #380]	; (8001f1c <__aeabi_dmul+0x574>)
 8001da0:	2600      	movs	r6, #0
 8001da2:	1aed      	subs	r5, r5, r3
 8001da4:	2300      	movs	r3, #0
 8001da6:	9300      	str	r3, [sp, #0]
 8001da8:	e625      	b.n	80019f6 <__aeabi_dmul+0x4e>
 8001daa:	465b      	mov	r3, fp
 8001dac:	4303      	orrs	r3, r0
 8001dae:	469a      	mov	sl, r3
 8001db0:	d105      	bne.n	8001dbe <__aeabi_dmul+0x416>
 8001db2:	2300      	movs	r3, #0
 8001db4:	469b      	mov	fp, r3
 8001db6:	3302      	adds	r3, #2
 8001db8:	2608      	movs	r6, #8
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	e61b      	b.n	80019f6 <__aeabi_dmul+0x4e>
 8001dbe:	2303      	movs	r3, #3
 8001dc0:	4682      	mov	sl, r0
 8001dc2:	260c      	movs	r6, #12
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	e616      	b.n	80019f6 <__aeabi_dmul+0x4e>
 8001dc8:	2300      	movs	r3, #0
 8001dca:	469b      	mov	fp, r3
 8001dcc:	3301      	adds	r3, #1
 8001dce:	2604      	movs	r6, #4
 8001dd0:	2500      	movs	r5, #0
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	e60f      	b.n	80019f6 <__aeabi_dmul+0x4e>
 8001dd6:	4642      	mov	r2, r8
 8001dd8:	3301      	adds	r3, #1
 8001dda:	9501      	str	r5, [sp, #4]
 8001ddc:	431e      	orrs	r6, r3
 8001dde:	9b01      	ldr	r3, [sp, #4]
 8001de0:	407a      	eors	r2, r7
 8001de2:	3301      	adds	r3, #1
 8001de4:	2400      	movs	r4, #0
 8001de6:	2000      	movs	r0, #0
 8001de8:	2101      	movs	r1, #1
 8001dea:	b2d2      	uxtb	r2, r2
 8001dec:	9302      	str	r3, [sp, #8]
 8001dee:	2e0a      	cmp	r6, #10
 8001df0:	dd00      	ble.n	8001df4 <__aeabi_dmul+0x44c>
 8001df2:	e621      	b.n	8001a38 <__aeabi_dmul+0x90>
 8001df4:	e63d      	b.n	8001a72 <__aeabi_dmul+0xca>
 8001df6:	2101      	movs	r1, #1
 8001df8:	1ac9      	subs	r1, r1, r3
 8001dfa:	2938      	cmp	r1, #56	; 0x38
 8001dfc:	dd00      	ble.n	8001e00 <__aeabi_dmul+0x458>
 8001dfe:	e642      	b.n	8001a86 <__aeabi_dmul+0xde>
 8001e00:	291f      	cmp	r1, #31
 8001e02:	dd47      	ble.n	8001e94 <__aeabi_dmul+0x4ec>
 8001e04:	261f      	movs	r6, #31
 8001e06:	0025      	movs	r5, r4
 8001e08:	4276      	negs	r6, r6
 8001e0a:	1af3      	subs	r3, r6, r3
 8001e0c:	40dd      	lsrs	r5, r3
 8001e0e:	002b      	movs	r3, r5
 8001e10:	2920      	cmp	r1, #32
 8001e12:	d005      	beq.n	8001e20 <__aeabi_dmul+0x478>
 8001e14:	4942      	ldr	r1, [pc, #264]	; (8001f20 <__aeabi_dmul+0x578>)
 8001e16:	9d02      	ldr	r5, [sp, #8]
 8001e18:	468c      	mov	ip, r1
 8001e1a:	4465      	add	r5, ip
 8001e1c:	40ac      	lsls	r4, r5
 8001e1e:	4320      	orrs	r0, r4
 8001e20:	1e41      	subs	r1, r0, #1
 8001e22:	4188      	sbcs	r0, r1
 8001e24:	4318      	orrs	r0, r3
 8001e26:	2307      	movs	r3, #7
 8001e28:	001d      	movs	r5, r3
 8001e2a:	2400      	movs	r4, #0
 8001e2c:	4005      	ands	r5, r0
 8001e2e:	4203      	tst	r3, r0
 8001e30:	d04a      	beq.n	8001ec8 <__aeabi_dmul+0x520>
 8001e32:	230f      	movs	r3, #15
 8001e34:	2400      	movs	r4, #0
 8001e36:	4003      	ands	r3, r0
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d042      	beq.n	8001ec2 <__aeabi_dmul+0x51a>
 8001e3c:	1d03      	adds	r3, r0, #4
 8001e3e:	4283      	cmp	r3, r0
 8001e40:	4180      	sbcs	r0, r0
 8001e42:	4240      	negs	r0, r0
 8001e44:	1824      	adds	r4, r4, r0
 8001e46:	0018      	movs	r0, r3
 8001e48:	0223      	lsls	r3, r4, #8
 8001e4a:	d53a      	bpl.n	8001ec2 <__aeabi_dmul+0x51a>
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	2400      	movs	r4, #0
 8001e50:	2500      	movs	r5, #0
 8001e52:	e61b      	b.n	8001a8c <__aeabi_dmul+0xe4>
 8001e54:	f000 fd64 	bl	8002920 <__clzsi2>
 8001e58:	0001      	movs	r1, r0
 8001e5a:	0003      	movs	r3, r0
 8001e5c:	3115      	adds	r1, #21
 8001e5e:	3320      	adds	r3, #32
 8001e60:	291c      	cmp	r1, #28
 8001e62:	dd8f      	ble.n	8001d84 <__aeabi_dmul+0x3dc>
 8001e64:	3808      	subs	r0, #8
 8001e66:	2200      	movs	r2, #0
 8001e68:	4084      	lsls	r4, r0
 8001e6a:	4692      	mov	sl, r2
 8001e6c:	46a3      	mov	fp, r4
 8001e6e:	e796      	b.n	8001d9e <__aeabi_dmul+0x3f6>
 8001e70:	f000 fd56 	bl	8002920 <__clzsi2>
 8001e74:	0001      	movs	r1, r0
 8001e76:	0003      	movs	r3, r0
 8001e78:	3115      	adds	r1, #21
 8001e7a:	3320      	adds	r3, #32
 8001e7c:	291c      	cmp	r1, #28
 8001e7e:	dc00      	bgt.n	8001e82 <__aeabi_dmul+0x4da>
 8001e80:	e758      	b.n	8001d34 <__aeabi_dmul+0x38c>
 8001e82:	0002      	movs	r2, r0
 8001e84:	464c      	mov	r4, r9
 8001e86:	3a08      	subs	r2, #8
 8001e88:	2000      	movs	r0, #0
 8001e8a:	4094      	lsls	r4, r2
 8001e8c:	e75d      	b.n	8001d4a <__aeabi_dmul+0x3a2>
 8001e8e:	9b01      	ldr	r3, [sp, #4]
 8001e90:	9302      	str	r3, [sp, #8]
 8001e92:	e711      	b.n	8001cb8 <__aeabi_dmul+0x310>
 8001e94:	4b23      	ldr	r3, [pc, #140]	; (8001f24 <__aeabi_dmul+0x57c>)
 8001e96:	0026      	movs	r6, r4
 8001e98:	469c      	mov	ip, r3
 8001e9a:	0003      	movs	r3, r0
 8001e9c:	9d02      	ldr	r5, [sp, #8]
 8001e9e:	40cb      	lsrs	r3, r1
 8001ea0:	4465      	add	r5, ip
 8001ea2:	40ae      	lsls	r6, r5
 8001ea4:	431e      	orrs	r6, r3
 8001ea6:	0003      	movs	r3, r0
 8001ea8:	40ab      	lsls	r3, r5
 8001eaa:	1e58      	subs	r0, r3, #1
 8001eac:	4183      	sbcs	r3, r0
 8001eae:	0030      	movs	r0, r6
 8001eb0:	4318      	orrs	r0, r3
 8001eb2:	40cc      	lsrs	r4, r1
 8001eb4:	0743      	lsls	r3, r0, #29
 8001eb6:	d0c7      	beq.n	8001e48 <__aeabi_dmul+0x4a0>
 8001eb8:	230f      	movs	r3, #15
 8001eba:	4003      	ands	r3, r0
 8001ebc:	2b04      	cmp	r3, #4
 8001ebe:	d1bd      	bne.n	8001e3c <__aeabi_dmul+0x494>
 8001ec0:	e7c2      	b.n	8001e48 <__aeabi_dmul+0x4a0>
 8001ec2:	0765      	lsls	r5, r4, #29
 8001ec4:	0264      	lsls	r4, r4, #9
 8001ec6:	0b24      	lsrs	r4, r4, #12
 8001ec8:	08c0      	lsrs	r0, r0, #3
 8001eca:	2300      	movs	r3, #0
 8001ecc:	4305      	orrs	r5, r0
 8001ece:	e5dd      	b.n	8001a8c <__aeabi_dmul+0xe4>
 8001ed0:	2500      	movs	r5, #0
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	2e0f      	cmp	r6, #15
 8001ed6:	d10c      	bne.n	8001ef2 <__aeabi_dmul+0x54a>
 8001ed8:	2480      	movs	r4, #128	; 0x80
 8001eda:	465b      	mov	r3, fp
 8001edc:	0324      	lsls	r4, r4, #12
 8001ede:	4223      	tst	r3, r4
 8001ee0:	d00e      	beq.n	8001f00 <__aeabi_dmul+0x558>
 8001ee2:	4221      	tst	r1, r4
 8001ee4:	d10c      	bne.n	8001f00 <__aeabi_dmul+0x558>
 8001ee6:	430c      	orrs	r4, r1
 8001ee8:	0324      	lsls	r4, r4, #12
 8001eea:	003a      	movs	r2, r7
 8001eec:	4b0e      	ldr	r3, [pc, #56]	; (8001f28 <__aeabi_dmul+0x580>)
 8001eee:	0b24      	lsrs	r4, r4, #12
 8001ef0:	e5cc      	b.n	8001a8c <__aeabi_dmul+0xe4>
 8001ef2:	2e0b      	cmp	r6, #11
 8001ef4:	d000      	beq.n	8001ef8 <__aeabi_dmul+0x550>
 8001ef6:	e5a2      	b.n	8001a3e <__aeabi_dmul+0x96>
 8001ef8:	468b      	mov	fp, r1
 8001efa:	46aa      	mov	sl, r5
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	e5f7      	b.n	8001af0 <__aeabi_dmul+0x148>
 8001f00:	2480      	movs	r4, #128	; 0x80
 8001f02:	465b      	mov	r3, fp
 8001f04:	0324      	lsls	r4, r4, #12
 8001f06:	431c      	orrs	r4, r3
 8001f08:	0324      	lsls	r4, r4, #12
 8001f0a:	4642      	mov	r2, r8
 8001f0c:	4655      	mov	r5, sl
 8001f0e:	4b06      	ldr	r3, [pc, #24]	; (8001f28 <__aeabi_dmul+0x580>)
 8001f10:	0b24      	lsrs	r4, r4, #12
 8001f12:	e5bb      	b.n	8001a8c <__aeabi_dmul+0xe4>
 8001f14:	464d      	mov	r5, r9
 8001f16:	0021      	movs	r1, r4
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e7db      	b.n	8001ed4 <__aeabi_dmul+0x52c>
 8001f1c:	fffffc0d 	.word	0xfffffc0d
 8001f20:	0000043e 	.word	0x0000043e
 8001f24:	0000041e 	.word	0x0000041e
 8001f28:	000007ff 	.word	0x000007ff

08001f2c <__aeabi_dsub>:
 8001f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f2e:	4657      	mov	r7, sl
 8001f30:	464e      	mov	r6, r9
 8001f32:	4645      	mov	r5, r8
 8001f34:	46de      	mov	lr, fp
 8001f36:	b5e0      	push	{r5, r6, r7, lr}
 8001f38:	000d      	movs	r5, r1
 8001f3a:	0004      	movs	r4, r0
 8001f3c:	0019      	movs	r1, r3
 8001f3e:	0010      	movs	r0, r2
 8001f40:	032b      	lsls	r3, r5, #12
 8001f42:	0a5b      	lsrs	r3, r3, #9
 8001f44:	0f62      	lsrs	r2, r4, #29
 8001f46:	431a      	orrs	r2, r3
 8001f48:	00e3      	lsls	r3, r4, #3
 8001f4a:	030c      	lsls	r4, r1, #12
 8001f4c:	0a64      	lsrs	r4, r4, #9
 8001f4e:	0f47      	lsrs	r7, r0, #29
 8001f50:	4327      	orrs	r7, r4
 8001f52:	4cd0      	ldr	r4, [pc, #832]	; (8002294 <__aeabi_dsub+0x368>)
 8001f54:	006e      	lsls	r6, r5, #1
 8001f56:	4691      	mov	r9, r2
 8001f58:	b083      	sub	sp, #12
 8001f5a:	004a      	lsls	r2, r1, #1
 8001f5c:	00c0      	lsls	r0, r0, #3
 8001f5e:	4698      	mov	r8, r3
 8001f60:	46a2      	mov	sl, r4
 8001f62:	0d76      	lsrs	r6, r6, #21
 8001f64:	0fed      	lsrs	r5, r5, #31
 8001f66:	0d52      	lsrs	r2, r2, #21
 8001f68:	0fc9      	lsrs	r1, r1, #31
 8001f6a:	9001      	str	r0, [sp, #4]
 8001f6c:	42a2      	cmp	r2, r4
 8001f6e:	d100      	bne.n	8001f72 <__aeabi_dsub+0x46>
 8001f70:	e0b9      	b.n	80020e6 <__aeabi_dsub+0x1ba>
 8001f72:	2401      	movs	r4, #1
 8001f74:	4061      	eors	r1, r4
 8001f76:	468b      	mov	fp, r1
 8001f78:	428d      	cmp	r5, r1
 8001f7a:	d100      	bne.n	8001f7e <__aeabi_dsub+0x52>
 8001f7c:	e08d      	b.n	800209a <__aeabi_dsub+0x16e>
 8001f7e:	1ab4      	subs	r4, r6, r2
 8001f80:	46a4      	mov	ip, r4
 8001f82:	2c00      	cmp	r4, #0
 8001f84:	dc00      	bgt.n	8001f88 <__aeabi_dsub+0x5c>
 8001f86:	e0b7      	b.n	80020f8 <__aeabi_dsub+0x1cc>
 8001f88:	2a00      	cmp	r2, #0
 8001f8a:	d100      	bne.n	8001f8e <__aeabi_dsub+0x62>
 8001f8c:	e0cb      	b.n	8002126 <__aeabi_dsub+0x1fa>
 8001f8e:	4ac1      	ldr	r2, [pc, #772]	; (8002294 <__aeabi_dsub+0x368>)
 8001f90:	4296      	cmp	r6, r2
 8001f92:	d100      	bne.n	8001f96 <__aeabi_dsub+0x6a>
 8001f94:	e186      	b.n	80022a4 <__aeabi_dsub+0x378>
 8001f96:	2280      	movs	r2, #128	; 0x80
 8001f98:	0412      	lsls	r2, r2, #16
 8001f9a:	4317      	orrs	r7, r2
 8001f9c:	4662      	mov	r2, ip
 8001f9e:	2a38      	cmp	r2, #56	; 0x38
 8001fa0:	dd00      	ble.n	8001fa4 <__aeabi_dsub+0x78>
 8001fa2:	e1a4      	b.n	80022ee <__aeabi_dsub+0x3c2>
 8001fa4:	2a1f      	cmp	r2, #31
 8001fa6:	dd00      	ble.n	8001faa <__aeabi_dsub+0x7e>
 8001fa8:	e21d      	b.n	80023e6 <__aeabi_dsub+0x4ba>
 8001faa:	4661      	mov	r1, ip
 8001fac:	2220      	movs	r2, #32
 8001fae:	003c      	movs	r4, r7
 8001fb0:	1a52      	subs	r2, r2, r1
 8001fb2:	0001      	movs	r1, r0
 8001fb4:	4090      	lsls	r0, r2
 8001fb6:	4094      	lsls	r4, r2
 8001fb8:	1e42      	subs	r2, r0, #1
 8001fba:	4190      	sbcs	r0, r2
 8001fbc:	4662      	mov	r2, ip
 8001fbe:	46a0      	mov	r8, r4
 8001fc0:	4664      	mov	r4, ip
 8001fc2:	40d7      	lsrs	r7, r2
 8001fc4:	464a      	mov	r2, r9
 8001fc6:	40e1      	lsrs	r1, r4
 8001fc8:	4644      	mov	r4, r8
 8001fca:	1bd2      	subs	r2, r2, r7
 8001fcc:	4691      	mov	r9, r2
 8001fce:	430c      	orrs	r4, r1
 8001fd0:	4304      	orrs	r4, r0
 8001fd2:	1b1c      	subs	r4, r3, r4
 8001fd4:	42a3      	cmp	r3, r4
 8001fd6:	4192      	sbcs	r2, r2
 8001fd8:	464b      	mov	r3, r9
 8001fda:	4252      	negs	r2, r2
 8001fdc:	1a9b      	subs	r3, r3, r2
 8001fde:	469a      	mov	sl, r3
 8001fe0:	4653      	mov	r3, sl
 8001fe2:	021b      	lsls	r3, r3, #8
 8001fe4:	d400      	bmi.n	8001fe8 <__aeabi_dsub+0xbc>
 8001fe6:	e12b      	b.n	8002240 <__aeabi_dsub+0x314>
 8001fe8:	4653      	mov	r3, sl
 8001fea:	025a      	lsls	r2, r3, #9
 8001fec:	0a53      	lsrs	r3, r2, #9
 8001fee:	469a      	mov	sl, r3
 8001ff0:	4653      	mov	r3, sl
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d100      	bne.n	8001ff8 <__aeabi_dsub+0xcc>
 8001ff6:	e166      	b.n	80022c6 <__aeabi_dsub+0x39a>
 8001ff8:	4650      	mov	r0, sl
 8001ffa:	f000 fc91 	bl	8002920 <__clzsi2>
 8001ffe:	0003      	movs	r3, r0
 8002000:	3b08      	subs	r3, #8
 8002002:	2220      	movs	r2, #32
 8002004:	0020      	movs	r0, r4
 8002006:	1ad2      	subs	r2, r2, r3
 8002008:	4651      	mov	r1, sl
 800200a:	40d0      	lsrs	r0, r2
 800200c:	4099      	lsls	r1, r3
 800200e:	0002      	movs	r2, r0
 8002010:	409c      	lsls	r4, r3
 8002012:	430a      	orrs	r2, r1
 8002014:	429e      	cmp	r6, r3
 8002016:	dd00      	ble.n	800201a <__aeabi_dsub+0xee>
 8002018:	e164      	b.n	80022e4 <__aeabi_dsub+0x3b8>
 800201a:	1b9b      	subs	r3, r3, r6
 800201c:	1c59      	adds	r1, r3, #1
 800201e:	291f      	cmp	r1, #31
 8002020:	dd00      	ble.n	8002024 <__aeabi_dsub+0xf8>
 8002022:	e0fe      	b.n	8002222 <__aeabi_dsub+0x2f6>
 8002024:	2320      	movs	r3, #32
 8002026:	0010      	movs	r0, r2
 8002028:	0026      	movs	r6, r4
 800202a:	1a5b      	subs	r3, r3, r1
 800202c:	409c      	lsls	r4, r3
 800202e:	4098      	lsls	r0, r3
 8002030:	40ce      	lsrs	r6, r1
 8002032:	40ca      	lsrs	r2, r1
 8002034:	1e63      	subs	r3, r4, #1
 8002036:	419c      	sbcs	r4, r3
 8002038:	4330      	orrs	r0, r6
 800203a:	4692      	mov	sl, r2
 800203c:	2600      	movs	r6, #0
 800203e:	4304      	orrs	r4, r0
 8002040:	0763      	lsls	r3, r4, #29
 8002042:	d009      	beq.n	8002058 <__aeabi_dsub+0x12c>
 8002044:	230f      	movs	r3, #15
 8002046:	4023      	ands	r3, r4
 8002048:	2b04      	cmp	r3, #4
 800204a:	d005      	beq.n	8002058 <__aeabi_dsub+0x12c>
 800204c:	1d23      	adds	r3, r4, #4
 800204e:	42a3      	cmp	r3, r4
 8002050:	41a4      	sbcs	r4, r4
 8002052:	4264      	negs	r4, r4
 8002054:	44a2      	add	sl, r4
 8002056:	001c      	movs	r4, r3
 8002058:	4653      	mov	r3, sl
 800205a:	021b      	lsls	r3, r3, #8
 800205c:	d400      	bmi.n	8002060 <__aeabi_dsub+0x134>
 800205e:	e0f2      	b.n	8002246 <__aeabi_dsub+0x31a>
 8002060:	4b8c      	ldr	r3, [pc, #560]	; (8002294 <__aeabi_dsub+0x368>)
 8002062:	3601      	adds	r6, #1
 8002064:	429e      	cmp	r6, r3
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x13e>
 8002068:	e10f      	b.n	800228a <__aeabi_dsub+0x35e>
 800206a:	4653      	mov	r3, sl
 800206c:	498a      	ldr	r1, [pc, #552]	; (8002298 <__aeabi_dsub+0x36c>)
 800206e:	08e4      	lsrs	r4, r4, #3
 8002070:	400b      	ands	r3, r1
 8002072:	0019      	movs	r1, r3
 8002074:	075b      	lsls	r3, r3, #29
 8002076:	4323      	orrs	r3, r4
 8002078:	0572      	lsls	r2, r6, #21
 800207a:	024c      	lsls	r4, r1, #9
 800207c:	0b24      	lsrs	r4, r4, #12
 800207e:	0d52      	lsrs	r2, r2, #21
 8002080:	0512      	lsls	r2, r2, #20
 8002082:	4322      	orrs	r2, r4
 8002084:	07ed      	lsls	r5, r5, #31
 8002086:	432a      	orrs	r2, r5
 8002088:	0018      	movs	r0, r3
 800208a:	0011      	movs	r1, r2
 800208c:	b003      	add	sp, #12
 800208e:	bcf0      	pop	{r4, r5, r6, r7}
 8002090:	46bb      	mov	fp, r7
 8002092:	46b2      	mov	sl, r6
 8002094:	46a9      	mov	r9, r5
 8002096:	46a0      	mov	r8, r4
 8002098:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800209a:	1ab4      	subs	r4, r6, r2
 800209c:	46a4      	mov	ip, r4
 800209e:	2c00      	cmp	r4, #0
 80020a0:	dd59      	ble.n	8002156 <__aeabi_dsub+0x22a>
 80020a2:	2a00      	cmp	r2, #0
 80020a4:	d100      	bne.n	80020a8 <__aeabi_dsub+0x17c>
 80020a6:	e0b0      	b.n	800220a <__aeabi_dsub+0x2de>
 80020a8:	4556      	cmp	r6, sl
 80020aa:	d100      	bne.n	80020ae <__aeabi_dsub+0x182>
 80020ac:	e0fa      	b.n	80022a4 <__aeabi_dsub+0x378>
 80020ae:	2280      	movs	r2, #128	; 0x80
 80020b0:	0412      	lsls	r2, r2, #16
 80020b2:	4317      	orrs	r7, r2
 80020b4:	4662      	mov	r2, ip
 80020b6:	2a38      	cmp	r2, #56	; 0x38
 80020b8:	dd00      	ble.n	80020bc <__aeabi_dsub+0x190>
 80020ba:	e0d4      	b.n	8002266 <__aeabi_dsub+0x33a>
 80020bc:	2a1f      	cmp	r2, #31
 80020be:	dc00      	bgt.n	80020c2 <__aeabi_dsub+0x196>
 80020c0:	e1c0      	b.n	8002444 <__aeabi_dsub+0x518>
 80020c2:	0039      	movs	r1, r7
 80020c4:	3a20      	subs	r2, #32
 80020c6:	40d1      	lsrs	r1, r2
 80020c8:	4662      	mov	r2, ip
 80020ca:	2a20      	cmp	r2, #32
 80020cc:	d006      	beq.n	80020dc <__aeabi_dsub+0x1b0>
 80020ce:	4664      	mov	r4, ip
 80020d0:	2240      	movs	r2, #64	; 0x40
 80020d2:	1b12      	subs	r2, r2, r4
 80020d4:	003c      	movs	r4, r7
 80020d6:	4094      	lsls	r4, r2
 80020d8:	4304      	orrs	r4, r0
 80020da:	9401      	str	r4, [sp, #4]
 80020dc:	9c01      	ldr	r4, [sp, #4]
 80020de:	1e62      	subs	r2, r4, #1
 80020e0:	4194      	sbcs	r4, r2
 80020e2:	430c      	orrs	r4, r1
 80020e4:	e0c3      	b.n	800226e <__aeabi_dsub+0x342>
 80020e6:	003c      	movs	r4, r7
 80020e8:	4304      	orrs	r4, r0
 80020ea:	d02b      	beq.n	8002144 <__aeabi_dsub+0x218>
 80020ec:	468b      	mov	fp, r1
 80020ee:	428d      	cmp	r5, r1
 80020f0:	d02e      	beq.n	8002150 <__aeabi_dsub+0x224>
 80020f2:	4c6a      	ldr	r4, [pc, #424]	; (800229c <__aeabi_dsub+0x370>)
 80020f4:	46a4      	mov	ip, r4
 80020f6:	44b4      	add	ip, r6
 80020f8:	4664      	mov	r4, ip
 80020fa:	2c00      	cmp	r4, #0
 80020fc:	d05f      	beq.n	80021be <__aeabi_dsub+0x292>
 80020fe:	1b94      	subs	r4, r2, r6
 8002100:	46a4      	mov	ip, r4
 8002102:	2e00      	cmp	r6, #0
 8002104:	d000      	beq.n	8002108 <__aeabi_dsub+0x1dc>
 8002106:	e120      	b.n	800234a <__aeabi_dsub+0x41e>
 8002108:	464c      	mov	r4, r9
 800210a:	431c      	orrs	r4, r3
 800210c:	d100      	bne.n	8002110 <__aeabi_dsub+0x1e4>
 800210e:	e1c7      	b.n	80024a0 <__aeabi_dsub+0x574>
 8002110:	4661      	mov	r1, ip
 8002112:	1e4c      	subs	r4, r1, #1
 8002114:	2901      	cmp	r1, #1
 8002116:	d100      	bne.n	800211a <__aeabi_dsub+0x1ee>
 8002118:	e223      	b.n	8002562 <__aeabi_dsub+0x636>
 800211a:	4d5e      	ldr	r5, [pc, #376]	; (8002294 <__aeabi_dsub+0x368>)
 800211c:	45ac      	cmp	ip, r5
 800211e:	d100      	bne.n	8002122 <__aeabi_dsub+0x1f6>
 8002120:	e1d8      	b.n	80024d4 <__aeabi_dsub+0x5a8>
 8002122:	46a4      	mov	ip, r4
 8002124:	e11a      	b.n	800235c <__aeabi_dsub+0x430>
 8002126:	003a      	movs	r2, r7
 8002128:	4302      	orrs	r2, r0
 800212a:	d100      	bne.n	800212e <__aeabi_dsub+0x202>
 800212c:	e0e4      	b.n	80022f8 <__aeabi_dsub+0x3cc>
 800212e:	0022      	movs	r2, r4
 8002130:	3a01      	subs	r2, #1
 8002132:	2c01      	cmp	r4, #1
 8002134:	d100      	bne.n	8002138 <__aeabi_dsub+0x20c>
 8002136:	e1c3      	b.n	80024c0 <__aeabi_dsub+0x594>
 8002138:	4956      	ldr	r1, [pc, #344]	; (8002294 <__aeabi_dsub+0x368>)
 800213a:	428c      	cmp	r4, r1
 800213c:	d100      	bne.n	8002140 <__aeabi_dsub+0x214>
 800213e:	e0b1      	b.n	80022a4 <__aeabi_dsub+0x378>
 8002140:	4694      	mov	ip, r2
 8002142:	e72b      	b.n	8001f9c <__aeabi_dsub+0x70>
 8002144:	2401      	movs	r4, #1
 8002146:	4061      	eors	r1, r4
 8002148:	468b      	mov	fp, r1
 800214a:	428d      	cmp	r5, r1
 800214c:	d000      	beq.n	8002150 <__aeabi_dsub+0x224>
 800214e:	e716      	b.n	8001f7e <__aeabi_dsub+0x52>
 8002150:	4952      	ldr	r1, [pc, #328]	; (800229c <__aeabi_dsub+0x370>)
 8002152:	468c      	mov	ip, r1
 8002154:	44b4      	add	ip, r6
 8002156:	4664      	mov	r4, ip
 8002158:	2c00      	cmp	r4, #0
 800215a:	d100      	bne.n	800215e <__aeabi_dsub+0x232>
 800215c:	e0d3      	b.n	8002306 <__aeabi_dsub+0x3da>
 800215e:	1b91      	subs	r1, r2, r6
 8002160:	468c      	mov	ip, r1
 8002162:	2e00      	cmp	r6, #0
 8002164:	d100      	bne.n	8002168 <__aeabi_dsub+0x23c>
 8002166:	e15e      	b.n	8002426 <__aeabi_dsub+0x4fa>
 8002168:	494a      	ldr	r1, [pc, #296]	; (8002294 <__aeabi_dsub+0x368>)
 800216a:	428a      	cmp	r2, r1
 800216c:	d100      	bne.n	8002170 <__aeabi_dsub+0x244>
 800216e:	e1be      	b.n	80024ee <__aeabi_dsub+0x5c2>
 8002170:	2180      	movs	r1, #128	; 0x80
 8002172:	464c      	mov	r4, r9
 8002174:	0409      	lsls	r1, r1, #16
 8002176:	430c      	orrs	r4, r1
 8002178:	46a1      	mov	r9, r4
 800217a:	4661      	mov	r1, ip
 800217c:	2938      	cmp	r1, #56	; 0x38
 800217e:	dd00      	ble.n	8002182 <__aeabi_dsub+0x256>
 8002180:	e1ba      	b.n	80024f8 <__aeabi_dsub+0x5cc>
 8002182:	291f      	cmp	r1, #31
 8002184:	dd00      	ble.n	8002188 <__aeabi_dsub+0x25c>
 8002186:	e227      	b.n	80025d8 <__aeabi_dsub+0x6ac>
 8002188:	2420      	movs	r4, #32
 800218a:	1a64      	subs	r4, r4, r1
 800218c:	4649      	mov	r1, r9
 800218e:	40a1      	lsls	r1, r4
 8002190:	001e      	movs	r6, r3
 8002192:	4688      	mov	r8, r1
 8002194:	4661      	mov	r1, ip
 8002196:	40a3      	lsls	r3, r4
 8002198:	40ce      	lsrs	r6, r1
 800219a:	4641      	mov	r1, r8
 800219c:	1e5c      	subs	r4, r3, #1
 800219e:	41a3      	sbcs	r3, r4
 80021a0:	4331      	orrs	r1, r6
 80021a2:	4319      	orrs	r1, r3
 80021a4:	000c      	movs	r4, r1
 80021a6:	4663      	mov	r3, ip
 80021a8:	4649      	mov	r1, r9
 80021aa:	40d9      	lsrs	r1, r3
 80021ac:	187f      	adds	r7, r7, r1
 80021ae:	1824      	adds	r4, r4, r0
 80021b0:	4284      	cmp	r4, r0
 80021b2:	419b      	sbcs	r3, r3
 80021b4:	425b      	negs	r3, r3
 80021b6:	469a      	mov	sl, r3
 80021b8:	0016      	movs	r6, r2
 80021ba:	44ba      	add	sl, r7
 80021bc:	e05d      	b.n	800227a <__aeabi_dsub+0x34e>
 80021be:	4c38      	ldr	r4, [pc, #224]	; (80022a0 <__aeabi_dsub+0x374>)
 80021c0:	1c72      	adds	r2, r6, #1
 80021c2:	4222      	tst	r2, r4
 80021c4:	d000      	beq.n	80021c8 <__aeabi_dsub+0x29c>
 80021c6:	e0df      	b.n	8002388 <__aeabi_dsub+0x45c>
 80021c8:	464a      	mov	r2, r9
 80021ca:	431a      	orrs	r2, r3
 80021cc:	2e00      	cmp	r6, #0
 80021ce:	d000      	beq.n	80021d2 <__aeabi_dsub+0x2a6>
 80021d0:	e15c      	b.n	800248c <__aeabi_dsub+0x560>
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d100      	bne.n	80021d8 <__aeabi_dsub+0x2ac>
 80021d6:	e1cf      	b.n	8002578 <__aeabi_dsub+0x64c>
 80021d8:	003a      	movs	r2, r7
 80021da:	4302      	orrs	r2, r0
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x2b4>
 80021de:	e17f      	b.n	80024e0 <__aeabi_dsub+0x5b4>
 80021e0:	1a1c      	subs	r4, r3, r0
 80021e2:	464a      	mov	r2, r9
 80021e4:	42a3      	cmp	r3, r4
 80021e6:	4189      	sbcs	r1, r1
 80021e8:	1bd2      	subs	r2, r2, r7
 80021ea:	4249      	negs	r1, r1
 80021ec:	1a52      	subs	r2, r2, r1
 80021ee:	4692      	mov	sl, r2
 80021f0:	0212      	lsls	r2, r2, #8
 80021f2:	d400      	bmi.n	80021f6 <__aeabi_dsub+0x2ca>
 80021f4:	e20a      	b.n	800260c <__aeabi_dsub+0x6e0>
 80021f6:	1ac4      	subs	r4, r0, r3
 80021f8:	42a0      	cmp	r0, r4
 80021fa:	4180      	sbcs	r0, r0
 80021fc:	464b      	mov	r3, r9
 80021fe:	4240      	negs	r0, r0
 8002200:	1aff      	subs	r7, r7, r3
 8002202:	1a3b      	subs	r3, r7, r0
 8002204:	469a      	mov	sl, r3
 8002206:	465d      	mov	r5, fp
 8002208:	e71a      	b.n	8002040 <__aeabi_dsub+0x114>
 800220a:	003a      	movs	r2, r7
 800220c:	4302      	orrs	r2, r0
 800220e:	d073      	beq.n	80022f8 <__aeabi_dsub+0x3cc>
 8002210:	0022      	movs	r2, r4
 8002212:	3a01      	subs	r2, #1
 8002214:	2c01      	cmp	r4, #1
 8002216:	d100      	bne.n	800221a <__aeabi_dsub+0x2ee>
 8002218:	e0cb      	b.n	80023b2 <__aeabi_dsub+0x486>
 800221a:	4554      	cmp	r4, sl
 800221c:	d042      	beq.n	80022a4 <__aeabi_dsub+0x378>
 800221e:	4694      	mov	ip, r2
 8002220:	e748      	b.n	80020b4 <__aeabi_dsub+0x188>
 8002222:	0010      	movs	r0, r2
 8002224:	3b1f      	subs	r3, #31
 8002226:	40d8      	lsrs	r0, r3
 8002228:	2920      	cmp	r1, #32
 800222a:	d003      	beq.n	8002234 <__aeabi_dsub+0x308>
 800222c:	2340      	movs	r3, #64	; 0x40
 800222e:	1a5b      	subs	r3, r3, r1
 8002230:	409a      	lsls	r2, r3
 8002232:	4314      	orrs	r4, r2
 8002234:	1e63      	subs	r3, r4, #1
 8002236:	419c      	sbcs	r4, r3
 8002238:	2300      	movs	r3, #0
 800223a:	2600      	movs	r6, #0
 800223c:	469a      	mov	sl, r3
 800223e:	4304      	orrs	r4, r0
 8002240:	0763      	lsls	r3, r4, #29
 8002242:	d000      	beq.n	8002246 <__aeabi_dsub+0x31a>
 8002244:	e6fe      	b.n	8002044 <__aeabi_dsub+0x118>
 8002246:	4652      	mov	r2, sl
 8002248:	08e3      	lsrs	r3, r4, #3
 800224a:	0752      	lsls	r2, r2, #29
 800224c:	4313      	orrs	r3, r2
 800224e:	4652      	mov	r2, sl
 8002250:	46b4      	mov	ip, r6
 8002252:	08d2      	lsrs	r2, r2, #3
 8002254:	490f      	ldr	r1, [pc, #60]	; (8002294 <__aeabi_dsub+0x368>)
 8002256:	458c      	cmp	ip, r1
 8002258:	d02a      	beq.n	80022b0 <__aeabi_dsub+0x384>
 800225a:	0312      	lsls	r2, r2, #12
 800225c:	0b14      	lsrs	r4, r2, #12
 800225e:	4662      	mov	r2, ip
 8002260:	0552      	lsls	r2, r2, #21
 8002262:	0d52      	lsrs	r2, r2, #21
 8002264:	e70c      	b.n	8002080 <__aeabi_dsub+0x154>
 8002266:	003c      	movs	r4, r7
 8002268:	4304      	orrs	r4, r0
 800226a:	1e62      	subs	r2, r4, #1
 800226c:	4194      	sbcs	r4, r2
 800226e:	18e4      	adds	r4, r4, r3
 8002270:	429c      	cmp	r4, r3
 8002272:	4192      	sbcs	r2, r2
 8002274:	4252      	negs	r2, r2
 8002276:	444a      	add	r2, r9
 8002278:	4692      	mov	sl, r2
 800227a:	4653      	mov	r3, sl
 800227c:	021b      	lsls	r3, r3, #8
 800227e:	d5df      	bpl.n	8002240 <__aeabi_dsub+0x314>
 8002280:	4b04      	ldr	r3, [pc, #16]	; (8002294 <__aeabi_dsub+0x368>)
 8002282:	3601      	adds	r6, #1
 8002284:	429e      	cmp	r6, r3
 8002286:	d000      	beq.n	800228a <__aeabi_dsub+0x35e>
 8002288:	e0a0      	b.n	80023cc <__aeabi_dsub+0x4a0>
 800228a:	0032      	movs	r2, r6
 800228c:	2400      	movs	r4, #0
 800228e:	2300      	movs	r3, #0
 8002290:	e6f6      	b.n	8002080 <__aeabi_dsub+0x154>
 8002292:	46c0      	nop			; (mov r8, r8)
 8002294:	000007ff 	.word	0x000007ff
 8002298:	ff7fffff 	.word	0xff7fffff
 800229c:	fffff801 	.word	0xfffff801
 80022a0:	000007fe 	.word	0x000007fe
 80022a4:	08db      	lsrs	r3, r3, #3
 80022a6:	464a      	mov	r2, r9
 80022a8:	0752      	lsls	r2, r2, #29
 80022aa:	4313      	orrs	r3, r2
 80022ac:	464a      	mov	r2, r9
 80022ae:	08d2      	lsrs	r2, r2, #3
 80022b0:	0019      	movs	r1, r3
 80022b2:	4311      	orrs	r1, r2
 80022b4:	d100      	bne.n	80022b8 <__aeabi_dsub+0x38c>
 80022b6:	e1b5      	b.n	8002624 <__aeabi_dsub+0x6f8>
 80022b8:	2480      	movs	r4, #128	; 0x80
 80022ba:	0324      	lsls	r4, r4, #12
 80022bc:	4314      	orrs	r4, r2
 80022be:	0324      	lsls	r4, r4, #12
 80022c0:	4ad5      	ldr	r2, [pc, #852]	; (8002618 <__aeabi_dsub+0x6ec>)
 80022c2:	0b24      	lsrs	r4, r4, #12
 80022c4:	e6dc      	b.n	8002080 <__aeabi_dsub+0x154>
 80022c6:	0020      	movs	r0, r4
 80022c8:	f000 fb2a 	bl	8002920 <__clzsi2>
 80022cc:	0003      	movs	r3, r0
 80022ce:	3318      	adds	r3, #24
 80022d0:	2b1f      	cmp	r3, #31
 80022d2:	dc00      	bgt.n	80022d6 <__aeabi_dsub+0x3aa>
 80022d4:	e695      	b.n	8002002 <__aeabi_dsub+0xd6>
 80022d6:	0022      	movs	r2, r4
 80022d8:	3808      	subs	r0, #8
 80022da:	4082      	lsls	r2, r0
 80022dc:	2400      	movs	r4, #0
 80022de:	429e      	cmp	r6, r3
 80022e0:	dc00      	bgt.n	80022e4 <__aeabi_dsub+0x3b8>
 80022e2:	e69a      	b.n	800201a <__aeabi_dsub+0xee>
 80022e4:	1af6      	subs	r6, r6, r3
 80022e6:	4bcd      	ldr	r3, [pc, #820]	; (800261c <__aeabi_dsub+0x6f0>)
 80022e8:	401a      	ands	r2, r3
 80022ea:	4692      	mov	sl, r2
 80022ec:	e6a8      	b.n	8002040 <__aeabi_dsub+0x114>
 80022ee:	003c      	movs	r4, r7
 80022f0:	4304      	orrs	r4, r0
 80022f2:	1e62      	subs	r2, r4, #1
 80022f4:	4194      	sbcs	r4, r2
 80022f6:	e66c      	b.n	8001fd2 <__aeabi_dsub+0xa6>
 80022f8:	464a      	mov	r2, r9
 80022fa:	08db      	lsrs	r3, r3, #3
 80022fc:	0752      	lsls	r2, r2, #29
 80022fe:	4313      	orrs	r3, r2
 8002300:	464a      	mov	r2, r9
 8002302:	08d2      	lsrs	r2, r2, #3
 8002304:	e7a6      	b.n	8002254 <__aeabi_dsub+0x328>
 8002306:	4cc6      	ldr	r4, [pc, #792]	; (8002620 <__aeabi_dsub+0x6f4>)
 8002308:	1c72      	adds	r2, r6, #1
 800230a:	4222      	tst	r2, r4
 800230c:	d000      	beq.n	8002310 <__aeabi_dsub+0x3e4>
 800230e:	e0ac      	b.n	800246a <__aeabi_dsub+0x53e>
 8002310:	464a      	mov	r2, r9
 8002312:	431a      	orrs	r2, r3
 8002314:	2e00      	cmp	r6, #0
 8002316:	d000      	beq.n	800231a <__aeabi_dsub+0x3ee>
 8002318:	e105      	b.n	8002526 <__aeabi_dsub+0x5fa>
 800231a:	2a00      	cmp	r2, #0
 800231c:	d100      	bne.n	8002320 <__aeabi_dsub+0x3f4>
 800231e:	e156      	b.n	80025ce <__aeabi_dsub+0x6a2>
 8002320:	003a      	movs	r2, r7
 8002322:	4302      	orrs	r2, r0
 8002324:	d100      	bne.n	8002328 <__aeabi_dsub+0x3fc>
 8002326:	e0db      	b.n	80024e0 <__aeabi_dsub+0x5b4>
 8002328:	181c      	adds	r4, r3, r0
 800232a:	429c      	cmp	r4, r3
 800232c:	419b      	sbcs	r3, r3
 800232e:	444f      	add	r7, r9
 8002330:	46ba      	mov	sl, r7
 8002332:	425b      	negs	r3, r3
 8002334:	449a      	add	sl, r3
 8002336:	4653      	mov	r3, sl
 8002338:	021b      	lsls	r3, r3, #8
 800233a:	d400      	bmi.n	800233e <__aeabi_dsub+0x412>
 800233c:	e780      	b.n	8002240 <__aeabi_dsub+0x314>
 800233e:	4652      	mov	r2, sl
 8002340:	4bb6      	ldr	r3, [pc, #728]	; (800261c <__aeabi_dsub+0x6f0>)
 8002342:	2601      	movs	r6, #1
 8002344:	401a      	ands	r2, r3
 8002346:	4692      	mov	sl, r2
 8002348:	e77a      	b.n	8002240 <__aeabi_dsub+0x314>
 800234a:	4cb3      	ldr	r4, [pc, #716]	; (8002618 <__aeabi_dsub+0x6ec>)
 800234c:	42a2      	cmp	r2, r4
 800234e:	d100      	bne.n	8002352 <__aeabi_dsub+0x426>
 8002350:	e0c0      	b.n	80024d4 <__aeabi_dsub+0x5a8>
 8002352:	2480      	movs	r4, #128	; 0x80
 8002354:	464d      	mov	r5, r9
 8002356:	0424      	lsls	r4, r4, #16
 8002358:	4325      	orrs	r5, r4
 800235a:	46a9      	mov	r9, r5
 800235c:	4664      	mov	r4, ip
 800235e:	2c38      	cmp	r4, #56	; 0x38
 8002360:	dc53      	bgt.n	800240a <__aeabi_dsub+0x4de>
 8002362:	4661      	mov	r1, ip
 8002364:	2c1f      	cmp	r4, #31
 8002366:	dd00      	ble.n	800236a <__aeabi_dsub+0x43e>
 8002368:	e0cd      	b.n	8002506 <__aeabi_dsub+0x5da>
 800236a:	2520      	movs	r5, #32
 800236c:	001e      	movs	r6, r3
 800236e:	1b2d      	subs	r5, r5, r4
 8002370:	464c      	mov	r4, r9
 8002372:	40ab      	lsls	r3, r5
 8002374:	40ac      	lsls	r4, r5
 8002376:	40ce      	lsrs	r6, r1
 8002378:	1e5d      	subs	r5, r3, #1
 800237a:	41ab      	sbcs	r3, r5
 800237c:	4334      	orrs	r4, r6
 800237e:	4323      	orrs	r3, r4
 8002380:	464c      	mov	r4, r9
 8002382:	40cc      	lsrs	r4, r1
 8002384:	1b3f      	subs	r7, r7, r4
 8002386:	e045      	b.n	8002414 <__aeabi_dsub+0x4e8>
 8002388:	464a      	mov	r2, r9
 800238a:	1a1c      	subs	r4, r3, r0
 800238c:	1bd1      	subs	r1, r2, r7
 800238e:	42a3      	cmp	r3, r4
 8002390:	4192      	sbcs	r2, r2
 8002392:	4252      	negs	r2, r2
 8002394:	4692      	mov	sl, r2
 8002396:	000a      	movs	r2, r1
 8002398:	4651      	mov	r1, sl
 800239a:	1a52      	subs	r2, r2, r1
 800239c:	4692      	mov	sl, r2
 800239e:	0212      	lsls	r2, r2, #8
 80023a0:	d500      	bpl.n	80023a4 <__aeabi_dsub+0x478>
 80023a2:	e083      	b.n	80024ac <__aeabi_dsub+0x580>
 80023a4:	4653      	mov	r3, sl
 80023a6:	4323      	orrs	r3, r4
 80023a8:	d000      	beq.n	80023ac <__aeabi_dsub+0x480>
 80023aa:	e621      	b.n	8001ff0 <__aeabi_dsub+0xc4>
 80023ac:	2200      	movs	r2, #0
 80023ae:	2500      	movs	r5, #0
 80023b0:	e753      	b.n	800225a <__aeabi_dsub+0x32e>
 80023b2:	181c      	adds	r4, r3, r0
 80023b4:	429c      	cmp	r4, r3
 80023b6:	419b      	sbcs	r3, r3
 80023b8:	444f      	add	r7, r9
 80023ba:	46ba      	mov	sl, r7
 80023bc:	425b      	negs	r3, r3
 80023be:	449a      	add	sl, r3
 80023c0:	4653      	mov	r3, sl
 80023c2:	2601      	movs	r6, #1
 80023c4:	021b      	lsls	r3, r3, #8
 80023c6:	d400      	bmi.n	80023ca <__aeabi_dsub+0x49e>
 80023c8:	e73a      	b.n	8002240 <__aeabi_dsub+0x314>
 80023ca:	2602      	movs	r6, #2
 80023cc:	4652      	mov	r2, sl
 80023ce:	4b93      	ldr	r3, [pc, #588]	; (800261c <__aeabi_dsub+0x6f0>)
 80023d0:	2101      	movs	r1, #1
 80023d2:	401a      	ands	r2, r3
 80023d4:	0013      	movs	r3, r2
 80023d6:	4021      	ands	r1, r4
 80023d8:	0862      	lsrs	r2, r4, #1
 80023da:	430a      	orrs	r2, r1
 80023dc:	07dc      	lsls	r4, r3, #31
 80023de:	085b      	lsrs	r3, r3, #1
 80023e0:	469a      	mov	sl, r3
 80023e2:	4314      	orrs	r4, r2
 80023e4:	e62c      	b.n	8002040 <__aeabi_dsub+0x114>
 80023e6:	0039      	movs	r1, r7
 80023e8:	3a20      	subs	r2, #32
 80023ea:	40d1      	lsrs	r1, r2
 80023ec:	4662      	mov	r2, ip
 80023ee:	2a20      	cmp	r2, #32
 80023f0:	d006      	beq.n	8002400 <__aeabi_dsub+0x4d4>
 80023f2:	4664      	mov	r4, ip
 80023f4:	2240      	movs	r2, #64	; 0x40
 80023f6:	1b12      	subs	r2, r2, r4
 80023f8:	003c      	movs	r4, r7
 80023fa:	4094      	lsls	r4, r2
 80023fc:	4304      	orrs	r4, r0
 80023fe:	9401      	str	r4, [sp, #4]
 8002400:	9c01      	ldr	r4, [sp, #4]
 8002402:	1e62      	subs	r2, r4, #1
 8002404:	4194      	sbcs	r4, r2
 8002406:	430c      	orrs	r4, r1
 8002408:	e5e3      	b.n	8001fd2 <__aeabi_dsub+0xa6>
 800240a:	4649      	mov	r1, r9
 800240c:	4319      	orrs	r1, r3
 800240e:	000b      	movs	r3, r1
 8002410:	1e5c      	subs	r4, r3, #1
 8002412:	41a3      	sbcs	r3, r4
 8002414:	1ac4      	subs	r4, r0, r3
 8002416:	42a0      	cmp	r0, r4
 8002418:	419b      	sbcs	r3, r3
 800241a:	425b      	negs	r3, r3
 800241c:	1afb      	subs	r3, r7, r3
 800241e:	469a      	mov	sl, r3
 8002420:	465d      	mov	r5, fp
 8002422:	0016      	movs	r6, r2
 8002424:	e5dc      	b.n	8001fe0 <__aeabi_dsub+0xb4>
 8002426:	4649      	mov	r1, r9
 8002428:	4319      	orrs	r1, r3
 800242a:	d100      	bne.n	800242e <__aeabi_dsub+0x502>
 800242c:	e0ae      	b.n	800258c <__aeabi_dsub+0x660>
 800242e:	4661      	mov	r1, ip
 8002430:	4664      	mov	r4, ip
 8002432:	3901      	subs	r1, #1
 8002434:	2c01      	cmp	r4, #1
 8002436:	d100      	bne.n	800243a <__aeabi_dsub+0x50e>
 8002438:	e0e0      	b.n	80025fc <__aeabi_dsub+0x6d0>
 800243a:	4c77      	ldr	r4, [pc, #476]	; (8002618 <__aeabi_dsub+0x6ec>)
 800243c:	45a4      	cmp	ip, r4
 800243e:	d056      	beq.n	80024ee <__aeabi_dsub+0x5c2>
 8002440:	468c      	mov	ip, r1
 8002442:	e69a      	b.n	800217a <__aeabi_dsub+0x24e>
 8002444:	4661      	mov	r1, ip
 8002446:	2220      	movs	r2, #32
 8002448:	003c      	movs	r4, r7
 800244a:	1a52      	subs	r2, r2, r1
 800244c:	4094      	lsls	r4, r2
 800244e:	0001      	movs	r1, r0
 8002450:	4090      	lsls	r0, r2
 8002452:	46a0      	mov	r8, r4
 8002454:	4664      	mov	r4, ip
 8002456:	1e42      	subs	r2, r0, #1
 8002458:	4190      	sbcs	r0, r2
 800245a:	4662      	mov	r2, ip
 800245c:	40e1      	lsrs	r1, r4
 800245e:	4644      	mov	r4, r8
 8002460:	40d7      	lsrs	r7, r2
 8002462:	430c      	orrs	r4, r1
 8002464:	4304      	orrs	r4, r0
 8002466:	44b9      	add	r9, r7
 8002468:	e701      	b.n	800226e <__aeabi_dsub+0x342>
 800246a:	496b      	ldr	r1, [pc, #428]	; (8002618 <__aeabi_dsub+0x6ec>)
 800246c:	428a      	cmp	r2, r1
 800246e:	d100      	bne.n	8002472 <__aeabi_dsub+0x546>
 8002470:	e70c      	b.n	800228c <__aeabi_dsub+0x360>
 8002472:	1818      	adds	r0, r3, r0
 8002474:	4298      	cmp	r0, r3
 8002476:	419b      	sbcs	r3, r3
 8002478:	444f      	add	r7, r9
 800247a:	425b      	negs	r3, r3
 800247c:	18fb      	adds	r3, r7, r3
 800247e:	07dc      	lsls	r4, r3, #31
 8002480:	0840      	lsrs	r0, r0, #1
 8002482:	085b      	lsrs	r3, r3, #1
 8002484:	469a      	mov	sl, r3
 8002486:	0016      	movs	r6, r2
 8002488:	4304      	orrs	r4, r0
 800248a:	e6d9      	b.n	8002240 <__aeabi_dsub+0x314>
 800248c:	2a00      	cmp	r2, #0
 800248e:	d000      	beq.n	8002492 <__aeabi_dsub+0x566>
 8002490:	e081      	b.n	8002596 <__aeabi_dsub+0x66a>
 8002492:	003b      	movs	r3, r7
 8002494:	4303      	orrs	r3, r0
 8002496:	d11d      	bne.n	80024d4 <__aeabi_dsub+0x5a8>
 8002498:	2280      	movs	r2, #128	; 0x80
 800249a:	2500      	movs	r5, #0
 800249c:	0312      	lsls	r2, r2, #12
 800249e:	e70b      	b.n	80022b8 <__aeabi_dsub+0x38c>
 80024a0:	08c0      	lsrs	r0, r0, #3
 80024a2:	077b      	lsls	r3, r7, #29
 80024a4:	465d      	mov	r5, fp
 80024a6:	4303      	orrs	r3, r0
 80024a8:	08fa      	lsrs	r2, r7, #3
 80024aa:	e6d3      	b.n	8002254 <__aeabi_dsub+0x328>
 80024ac:	1ac4      	subs	r4, r0, r3
 80024ae:	42a0      	cmp	r0, r4
 80024b0:	4180      	sbcs	r0, r0
 80024b2:	464b      	mov	r3, r9
 80024b4:	4240      	negs	r0, r0
 80024b6:	1aff      	subs	r7, r7, r3
 80024b8:	1a3b      	subs	r3, r7, r0
 80024ba:	469a      	mov	sl, r3
 80024bc:	465d      	mov	r5, fp
 80024be:	e597      	b.n	8001ff0 <__aeabi_dsub+0xc4>
 80024c0:	1a1c      	subs	r4, r3, r0
 80024c2:	464a      	mov	r2, r9
 80024c4:	42a3      	cmp	r3, r4
 80024c6:	419b      	sbcs	r3, r3
 80024c8:	1bd7      	subs	r7, r2, r7
 80024ca:	425b      	negs	r3, r3
 80024cc:	1afb      	subs	r3, r7, r3
 80024ce:	469a      	mov	sl, r3
 80024d0:	2601      	movs	r6, #1
 80024d2:	e585      	b.n	8001fe0 <__aeabi_dsub+0xb4>
 80024d4:	08c0      	lsrs	r0, r0, #3
 80024d6:	077b      	lsls	r3, r7, #29
 80024d8:	465d      	mov	r5, fp
 80024da:	4303      	orrs	r3, r0
 80024dc:	08fa      	lsrs	r2, r7, #3
 80024de:	e6e7      	b.n	80022b0 <__aeabi_dsub+0x384>
 80024e0:	464a      	mov	r2, r9
 80024e2:	08db      	lsrs	r3, r3, #3
 80024e4:	0752      	lsls	r2, r2, #29
 80024e6:	4313      	orrs	r3, r2
 80024e8:	464a      	mov	r2, r9
 80024ea:	08d2      	lsrs	r2, r2, #3
 80024ec:	e6b5      	b.n	800225a <__aeabi_dsub+0x32e>
 80024ee:	08c0      	lsrs	r0, r0, #3
 80024f0:	077b      	lsls	r3, r7, #29
 80024f2:	4303      	orrs	r3, r0
 80024f4:	08fa      	lsrs	r2, r7, #3
 80024f6:	e6db      	b.n	80022b0 <__aeabi_dsub+0x384>
 80024f8:	4649      	mov	r1, r9
 80024fa:	4319      	orrs	r1, r3
 80024fc:	000b      	movs	r3, r1
 80024fe:	1e59      	subs	r1, r3, #1
 8002500:	418b      	sbcs	r3, r1
 8002502:	001c      	movs	r4, r3
 8002504:	e653      	b.n	80021ae <__aeabi_dsub+0x282>
 8002506:	464d      	mov	r5, r9
 8002508:	3c20      	subs	r4, #32
 800250a:	40e5      	lsrs	r5, r4
 800250c:	2920      	cmp	r1, #32
 800250e:	d005      	beq.n	800251c <__aeabi_dsub+0x5f0>
 8002510:	2440      	movs	r4, #64	; 0x40
 8002512:	1a64      	subs	r4, r4, r1
 8002514:	4649      	mov	r1, r9
 8002516:	40a1      	lsls	r1, r4
 8002518:	430b      	orrs	r3, r1
 800251a:	4698      	mov	r8, r3
 800251c:	4643      	mov	r3, r8
 800251e:	1e5c      	subs	r4, r3, #1
 8002520:	41a3      	sbcs	r3, r4
 8002522:	432b      	orrs	r3, r5
 8002524:	e776      	b.n	8002414 <__aeabi_dsub+0x4e8>
 8002526:	2a00      	cmp	r2, #0
 8002528:	d0e1      	beq.n	80024ee <__aeabi_dsub+0x5c2>
 800252a:	003a      	movs	r2, r7
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	4302      	orrs	r2, r0
 8002530:	d100      	bne.n	8002534 <__aeabi_dsub+0x608>
 8002532:	e6b8      	b.n	80022a6 <__aeabi_dsub+0x37a>
 8002534:	464a      	mov	r2, r9
 8002536:	0752      	lsls	r2, r2, #29
 8002538:	2480      	movs	r4, #128	; 0x80
 800253a:	4313      	orrs	r3, r2
 800253c:	464a      	mov	r2, r9
 800253e:	0324      	lsls	r4, r4, #12
 8002540:	08d2      	lsrs	r2, r2, #3
 8002542:	4222      	tst	r2, r4
 8002544:	d007      	beq.n	8002556 <__aeabi_dsub+0x62a>
 8002546:	08fe      	lsrs	r6, r7, #3
 8002548:	4226      	tst	r6, r4
 800254a:	d104      	bne.n	8002556 <__aeabi_dsub+0x62a>
 800254c:	465d      	mov	r5, fp
 800254e:	0032      	movs	r2, r6
 8002550:	08c3      	lsrs	r3, r0, #3
 8002552:	077f      	lsls	r7, r7, #29
 8002554:	433b      	orrs	r3, r7
 8002556:	0f59      	lsrs	r1, r3, #29
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	0749      	lsls	r1, r1, #29
 800255c:	08db      	lsrs	r3, r3, #3
 800255e:	430b      	orrs	r3, r1
 8002560:	e6a6      	b.n	80022b0 <__aeabi_dsub+0x384>
 8002562:	1ac4      	subs	r4, r0, r3
 8002564:	42a0      	cmp	r0, r4
 8002566:	4180      	sbcs	r0, r0
 8002568:	464b      	mov	r3, r9
 800256a:	4240      	negs	r0, r0
 800256c:	1aff      	subs	r7, r7, r3
 800256e:	1a3b      	subs	r3, r7, r0
 8002570:	469a      	mov	sl, r3
 8002572:	465d      	mov	r5, fp
 8002574:	2601      	movs	r6, #1
 8002576:	e533      	b.n	8001fe0 <__aeabi_dsub+0xb4>
 8002578:	003b      	movs	r3, r7
 800257a:	4303      	orrs	r3, r0
 800257c:	d100      	bne.n	8002580 <__aeabi_dsub+0x654>
 800257e:	e715      	b.n	80023ac <__aeabi_dsub+0x480>
 8002580:	08c0      	lsrs	r0, r0, #3
 8002582:	077b      	lsls	r3, r7, #29
 8002584:	465d      	mov	r5, fp
 8002586:	4303      	orrs	r3, r0
 8002588:	08fa      	lsrs	r2, r7, #3
 800258a:	e666      	b.n	800225a <__aeabi_dsub+0x32e>
 800258c:	08c0      	lsrs	r0, r0, #3
 800258e:	077b      	lsls	r3, r7, #29
 8002590:	4303      	orrs	r3, r0
 8002592:	08fa      	lsrs	r2, r7, #3
 8002594:	e65e      	b.n	8002254 <__aeabi_dsub+0x328>
 8002596:	003a      	movs	r2, r7
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	4302      	orrs	r2, r0
 800259c:	d100      	bne.n	80025a0 <__aeabi_dsub+0x674>
 800259e:	e682      	b.n	80022a6 <__aeabi_dsub+0x37a>
 80025a0:	464a      	mov	r2, r9
 80025a2:	0752      	lsls	r2, r2, #29
 80025a4:	2480      	movs	r4, #128	; 0x80
 80025a6:	4313      	orrs	r3, r2
 80025a8:	464a      	mov	r2, r9
 80025aa:	0324      	lsls	r4, r4, #12
 80025ac:	08d2      	lsrs	r2, r2, #3
 80025ae:	4222      	tst	r2, r4
 80025b0:	d007      	beq.n	80025c2 <__aeabi_dsub+0x696>
 80025b2:	08fe      	lsrs	r6, r7, #3
 80025b4:	4226      	tst	r6, r4
 80025b6:	d104      	bne.n	80025c2 <__aeabi_dsub+0x696>
 80025b8:	465d      	mov	r5, fp
 80025ba:	0032      	movs	r2, r6
 80025bc:	08c3      	lsrs	r3, r0, #3
 80025be:	077f      	lsls	r7, r7, #29
 80025c0:	433b      	orrs	r3, r7
 80025c2:	0f59      	lsrs	r1, r3, #29
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	08db      	lsrs	r3, r3, #3
 80025c8:	0749      	lsls	r1, r1, #29
 80025ca:	430b      	orrs	r3, r1
 80025cc:	e670      	b.n	80022b0 <__aeabi_dsub+0x384>
 80025ce:	08c0      	lsrs	r0, r0, #3
 80025d0:	077b      	lsls	r3, r7, #29
 80025d2:	4303      	orrs	r3, r0
 80025d4:	08fa      	lsrs	r2, r7, #3
 80025d6:	e640      	b.n	800225a <__aeabi_dsub+0x32e>
 80025d8:	464c      	mov	r4, r9
 80025da:	3920      	subs	r1, #32
 80025dc:	40cc      	lsrs	r4, r1
 80025de:	4661      	mov	r1, ip
 80025e0:	2920      	cmp	r1, #32
 80025e2:	d006      	beq.n	80025f2 <__aeabi_dsub+0x6c6>
 80025e4:	4666      	mov	r6, ip
 80025e6:	2140      	movs	r1, #64	; 0x40
 80025e8:	1b89      	subs	r1, r1, r6
 80025ea:	464e      	mov	r6, r9
 80025ec:	408e      	lsls	r6, r1
 80025ee:	4333      	orrs	r3, r6
 80025f0:	4698      	mov	r8, r3
 80025f2:	4643      	mov	r3, r8
 80025f4:	1e59      	subs	r1, r3, #1
 80025f6:	418b      	sbcs	r3, r1
 80025f8:	431c      	orrs	r4, r3
 80025fa:	e5d8      	b.n	80021ae <__aeabi_dsub+0x282>
 80025fc:	181c      	adds	r4, r3, r0
 80025fe:	4284      	cmp	r4, r0
 8002600:	4180      	sbcs	r0, r0
 8002602:	444f      	add	r7, r9
 8002604:	46ba      	mov	sl, r7
 8002606:	4240      	negs	r0, r0
 8002608:	4482      	add	sl, r0
 800260a:	e6d9      	b.n	80023c0 <__aeabi_dsub+0x494>
 800260c:	4653      	mov	r3, sl
 800260e:	4323      	orrs	r3, r4
 8002610:	d100      	bne.n	8002614 <__aeabi_dsub+0x6e8>
 8002612:	e6cb      	b.n	80023ac <__aeabi_dsub+0x480>
 8002614:	e614      	b.n	8002240 <__aeabi_dsub+0x314>
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	000007ff 	.word	0x000007ff
 800261c:	ff7fffff 	.word	0xff7fffff
 8002620:	000007fe 	.word	0x000007fe
 8002624:	2300      	movs	r3, #0
 8002626:	4a01      	ldr	r2, [pc, #4]	; (800262c <__aeabi_dsub+0x700>)
 8002628:	001c      	movs	r4, r3
 800262a:	e529      	b.n	8002080 <__aeabi_dsub+0x154>
 800262c:	000007ff 	.word	0x000007ff

08002630 <__aeabi_dcmpun>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	0005      	movs	r5, r0
 8002634:	480c      	ldr	r0, [pc, #48]	; (8002668 <__aeabi_dcmpun+0x38>)
 8002636:	031c      	lsls	r4, r3, #12
 8002638:	0016      	movs	r6, r2
 800263a:	005b      	lsls	r3, r3, #1
 800263c:	030a      	lsls	r2, r1, #12
 800263e:	0049      	lsls	r1, r1, #1
 8002640:	0b12      	lsrs	r2, r2, #12
 8002642:	0d49      	lsrs	r1, r1, #21
 8002644:	0b24      	lsrs	r4, r4, #12
 8002646:	0d5b      	lsrs	r3, r3, #21
 8002648:	4281      	cmp	r1, r0
 800264a:	d008      	beq.n	800265e <__aeabi_dcmpun+0x2e>
 800264c:	4a06      	ldr	r2, [pc, #24]	; (8002668 <__aeabi_dcmpun+0x38>)
 800264e:	2000      	movs	r0, #0
 8002650:	4293      	cmp	r3, r2
 8002652:	d103      	bne.n	800265c <__aeabi_dcmpun+0x2c>
 8002654:	0020      	movs	r0, r4
 8002656:	4330      	orrs	r0, r6
 8002658:	1e43      	subs	r3, r0, #1
 800265a:	4198      	sbcs	r0, r3
 800265c:	bd70      	pop	{r4, r5, r6, pc}
 800265e:	2001      	movs	r0, #1
 8002660:	432a      	orrs	r2, r5
 8002662:	d1fb      	bne.n	800265c <__aeabi_dcmpun+0x2c>
 8002664:	e7f2      	b.n	800264c <__aeabi_dcmpun+0x1c>
 8002666:	46c0      	nop			; (mov r8, r8)
 8002668:	000007ff 	.word	0x000007ff

0800266c <__aeabi_d2iz>:
 800266c:	000a      	movs	r2, r1
 800266e:	b530      	push	{r4, r5, lr}
 8002670:	4c13      	ldr	r4, [pc, #76]	; (80026c0 <__aeabi_d2iz+0x54>)
 8002672:	0053      	lsls	r3, r2, #1
 8002674:	0309      	lsls	r1, r1, #12
 8002676:	0005      	movs	r5, r0
 8002678:	0b09      	lsrs	r1, r1, #12
 800267a:	2000      	movs	r0, #0
 800267c:	0d5b      	lsrs	r3, r3, #21
 800267e:	0fd2      	lsrs	r2, r2, #31
 8002680:	42a3      	cmp	r3, r4
 8002682:	dd04      	ble.n	800268e <__aeabi_d2iz+0x22>
 8002684:	480f      	ldr	r0, [pc, #60]	; (80026c4 <__aeabi_d2iz+0x58>)
 8002686:	4283      	cmp	r3, r0
 8002688:	dd02      	ble.n	8002690 <__aeabi_d2iz+0x24>
 800268a:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <__aeabi_d2iz+0x5c>)
 800268c:	18d0      	adds	r0, r2, r3
 800268e:	bd30      	pop	{r4, r5, pc}
 8002690:	2080      	movs	r0, #128	; 0x80
 8002692:	0340      	lsls	r0, r0, #13
 8002694:	4301      	orrs	r1, r0
 8002696:	480d      	ldr	r0, [pc, #52]	; (80026cc <__aeabi_d2iz+0x60>)
 8002698:	1ac0      	subs	r0, r0, r3
 800269a:	281f      	cmp	r0, #31
 800269c:	dd08      	ble.n	80026b0 <__aeabi_d2iz+0x44>
 800269e:	480c      	ldr	r0, [pc, #48]	; (80026d0 <__aeabi_d2iz+0x64>)
 80026a0:	1ac3      	subs	r3, r0, r3
 80026a2:	40d9      	lsrs	r1, r3
 80026a4:	000b      	movs	r3, r1
 80026a6:	4258      	negs	r0, r3
 80026a8:	2a00      	cmp	r2, #0
 80026aa:	d1f0      	bne.n	800268e <__aeabi_d2iz+0x22>
 80026ac:	0018      	movs	r0, r3
 80026ae:	e7ee      	b.n	800268e <__aeabi_d2iz+0x22>
 80026b0:	4c08      	ldr	r4, [pc, #32]	; (80026d4 <__aeabi_d2iz+0x68>)
 80026b2:	40c5      	lsrs	r5, r0
 80026b4:	46a4      	mov	ip, r4
 80026b6:	4463      	add	r3, ip
 80026b8:	4099      	lsls	r1, r3
 80026ba:	000b      	movs	r3, r1
 80026bc:	432b      	orrs	r3, r5
 80026be:	e7f2      	b.n	80026a6 <__aeabi_d2iz+0x3a>
 80026c0:	000003fe 	.word	0x000003fe
 80026c4:	0000041d 	.word	0x0000041d
 80026c8:	7fffffff 	.word	0x7fffffff
 80026cc:	00000433 	.word	0x00000433
 80026d0:	00000413 	.word	0x00000413
 80026d4:	fffffbed 	.word	0xfffffbed

080026d8 <__aeabi_i2d>:
 80026d8:	b570      	push	{r4, r5, r6, lr}
 80026da:	2800      	cmp	r0, #0
 80026dc:	d016      	beq.n	800270c <__aeabi_i2d+0x34>
 80026de:	17c3      	asrs	r3, r0, #31
 80026e0:	18c5      	adds	r5, r0, r3
 80026e2:	405d      	eors	r5, r3
 80026e4:	0fc4      	lsrs	r4, r0, #31
 80026e6:	0028      	movs	r0, r5
 80026e8:	f000 f91a 	bl	8002920 <__clzsi2>
 80026ec:	4b11      	ldr	r3, [pc, #68]	; (8002734 <__aeabi_i2d+0x5c>)
 80026ee:	1a1b      	subs	r3, r3, r0
 80026f0:	280a      	cmp	r0, #10
 80026f2:	dc16      	bgt.n	8002722 <__aeabi_i2d+0x4a>
 80026f4:	0002      	movs	r2, r0
 80026f6:	002e      	movs	r6, r5
 80026f8:	3215      	adds	r2, #21
 80026fa:	4096      	lsls	r6, r2
 80026fc:	220b      	movs	r2, #11
 80026fe:	1a12      	subs	r2, r2, r0
 8002700:	40d5      	lsrs	r5, r2
 8002702:	055b      	lsls	r3, r3, #21
 8002704:	032d      	lsls	r5, r5, #12
 8002706:	0b2d      	lsrs	r5, r5, #12
 8002708:	0d5b      	lsrs	r3, r3, #21
 800270a:	e003      	b.n	8002714 <__aeabi_i2d+0x3c>
 800270c:	2400      	movs	r4, #0
 800270e:	2300      	movs	r3, #0
 8002710:	2500      	movs	r5, #0
 8002712:	2600      	movs	r6, #0
 8002714:	051b      	lsls	r3, r3, #20
 8002716:	432b      	orrs	r3, r5
 8002718:	07e4      	lsls	r4, r4, #31
 800271a:	4323      	orrs	r3, r4
 800271c:	0030      	movs	r0, r6
 800271e:	0019      	movs	r1, r3
 8002720:	bd70      	pop	{r4, r5, r6, pc}
 8002722:	380b      	subs	r0, #11
 8002724:	4085      	lsls	r5, r0
 8002726:	055b      	lsls	r3, r3, #21
 8002728:	032d      	lsls	r5, r5, #12
 800272a:	2600      	movs	r6, #0
 800272c:	0b2d      	lsrs	r5, r5, #12
 800272e:	0d5b      	lsrs	r3, r3, #21
 8002730:	e7f0      	b.n	8002714 <__aeabi_i2d+0x3c>
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	0000041e 	.word	0x0000041e

08002738 <__aeabi_ui2d>:
 8002738:	b510      	push	{r4, lr}
 800273a:	1e04      	subs	r4, r0, #0
 800273c:	d010      	beq.n	8002760 <__aeabi_ui2d+0x28>
 800273e:	f000 f8ef 	bl	8002920 <__clzsi2>
 8002742:	4b0f      	ldr	r3, [pc, #60]	; (8002780 <__aeabi_ui2d+0x48>)
 8002744:	1a1b      	subs	r3, r3, r0
 8002746:	280a      	cmp	r0, #10
 8002748:	dc11      	bgt.n	800276e <__aeabi_ui2d+0x36>
 800274a:	220b      	movs	r2, #11
 800274c:	0021      	movs	r1, r4
 800274e:	1a12      	subs	r2, r2, r0
 8002750:	40d1      	lsrs	r1, r2
 8002752:	3015      	adds	r0, #21
 8002754:	030a      	lsls	r2, r1, #12
 8002756:	055b      	lsls	r3, r3, #21
 8002758:	4084      	lsls	r4, r0
 800275a:	0b12      	lsrs	r2, r2, #12
 800275c:	0d5b      	lsrs	r3, r3, #21
 800275e:	e001      	b.n	8002764 <__aeabi_ui2d+0x2c>
 8002760:	2300      	movs	r3, #0
 8002762:	2200      	movs	r2, #0
 8002764:	051b      	lsls	r3, r3, #20
 8002766:	4313      	orrs	r3, r2
 8002768:	0020      	movs	r0, r4
 800276a:	0019      	movs	r1, r3
 800276c:	bd10      	pop	{r4, pc}
 800276e:	0022      	movs	r2, r4
 8002770:	380b      	subs	r0, #11
 8002772:	4082      	lsls	r2, r0
 8002774:	055b      	lsls	r3, r3, #21
 8002776:	0312      	lsls	r2, r2, #12
 8002778:	2400      	movs	r4, #0
 800277a:	0b12      	lsrs	r2, r2, #12
 800277c:	0d5b      	lsrs	r3, r3, #21
 800277e:	e7f1      	b.n	8002764 <__aeabi_ui2d+0x2c>
 8002780:	0000041e 	.word	0x0000041e

08002784 <__aeabi_f2d>:
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	0242      	lsls	r2, r0, #9
 8002788:	0043      	lsls	r3, r0, #1
 800278a:	0fc4      	lsrs	r4, r0, #31
 800278c:	20fe      	movs	r0, #254	; 0xfe
 800278e:	0e1b      	lsrs	r3, r3, #24
 8002790:	1c59      	adds	r1, r3, #1
 8002792:	0a55      	lsrs	r5, r2, #9
 8002794:	4208      	tst	r0, r1
 8002796:	d00c      	beq.n	80027b2 <__aeabi_f2d+0x2e>
 8002798:	21e0      	movs	r1, #224	; 0xe0
 800279a:	0089      	lsls	r1, r1, #2
 800279c:	468c      	mov	ip, r1
 800279e:	076d      	lsls	r5, r5, #29
 80027a0:	0b12      	lsrs	r2, r2, #12
 80027a2:	4463      	add	r3, ip
 80027a4:	051b      	lsls	r3, r3, #20
 80027a6:	4313      	orrs	r3, r2
 80027a8:	07e4      	lsls	r4, r4, #31
 80027aa:	4323      	orrs	r3, r4
 80027ac:	0028      	movs	r0, r5
 80027ae:	0019      	movs	r1, r3
 80027b0:	bd70      	pop	{r4, r5, r6, pc}
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d114      	bne.n	80027e0 <__aeabi_f2d+0x5c>
 80027b6:	2d00      	cmp	r5, #0
 80027b8:	d01b      	beq.n	80027f2 <__aeabi_f2d+0x6e>
 80027ba:	0028      	movs	r0, r5
 80027bc:	f000 f8b0 	bl	8002920 <__clzsi2>
 80027c0:	280a      	cmp	r0, #10
 80027c2:	dc1c      	bgt.n	80027fe <__aeabi_f2d+0x7a>
 80027c4:	230b      	movs	r3, #11
 80027c6:	002a      	movs	r2, r5
 80027c8:	1a1b      	subs	r3, r3, r0
 80027ca:	40da      	lsrs	r2, r3
 80027cc:	0003      	movs	r3, r0
 80027ce:	3315      	adds	r3, #21
 80027d0:	409d      	lsls	r5, r3
 80027d2:	4b0e      	ldr	r3, [pc, #56]	; (800280c <__aeabi_f2d+0x88>)
 80027d4:	0312      	lsls	r2, r2, #12
 80027d6:	1a1b      	subs	r3, r3, r0
 80027d8:	055b      	lsls	r3, r3, #21
 80027da:	0b12      	lsrs	r2, r2, #12
 80027dc:	0d5b      	lsrs	r3, r3, #21
 80027de:	e7e1      	b.n	80027a4 <__aeabi_f2d+0x20>
 80027e0:	2d00      	cmp	r5, #0
 80027e2:	d009      	beq.n	80027f8 <__aeabi_f2d+0x74>
 80027e4:	0b13      	lsrs	r3, r2, #12
 80027e6:	2280      	movs	r2, #128	; 0x80
 80027e8:	0312      	lsls	r2, r2, #12
 80027ea:	431a      	orrs	r2, r3
 80027ec:	076d      	lsls	r5, r5, #29
 80027ee:	4b08      	ldr	r3, [pc, #32]	; (8002810 <__aeabi_f2d+0x8c>)
 80027f0:	e7d8      	b.n	80027a4 <__aeabi_f2d+0x20>
 80027f2:	2300      	movs	r3, #0
 80027f4:	2200      	movs	r2, #0
 80027f6:	e7d5      	b.n	80027a4 <__aeabi_f2d+0x20>
 80027f8:	2200      	movs	r2, #0
 80027fa:	4b05      	ldr	r3, [pc, #20]	; (8002810 <__aeabi_f2d+0x8c>)
 80027fc:	e7d2      	b.n	80027a4 <__aeabi_f2d+0x20>
 80027fe:	0003      	movs	r3, r0
 8002800:	002a      	movs	r2, r5
 8002802:	3b0b      	subs	r3, #11
 8002804:	409a      	lsls	r2, r3
 8002806:	2500      	movs	r5, #0
 8002808:	e7e3      	b.n	80027d2 <__aeabi_f2d+0x4e>
 800280a:	46c0      	nop			; (mov r8, r8)
 800280c:	00000389 	.word	0x00000389
 8002810:	000007ff 	.word	0x000007ff

08002814 <__aeabi_d2f>:
 8002814:	0002      	movs	r2, r0
 8002816:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002818:	004b      	lsls	r3, r1, #1
 800281a:	030d      	lsls	r5, r1, #12
 800281c:	0f40      	lsrs	r0, r0, #29
 800281e:	0d5b      	lsrs	r3, r3, #21
 8002820:	0fcc      	lsrs	r4, r1, #31
 8002822:	0a6d      	lsrs	r5, r5, #9
 8002824:	493a      	ldr	r1, [pc, #232]	; (8002910 <__aeabi_d2f+0xfc>)
 8002826:	4305      	orrs	r5, r0
 8002828:	1c58      	adds	r0, r3, #1
 800282a:	00d7      	lsls	r7, r2, #3
 800282c:	4208      	tst	r0, r1
 800282e:	d00a      	beq.n	8002846 <__aeabi_d2f+0x32>
 8002830:	4938      	ldr	r1, [pc, #224]	; (8002914 <__aeabi_d2f+0x100>)
 8002832:	1859      	adds	r1, r3, r1
 8002834:	29fe      	cmp	r1, #254	; 0xfe
 8002836:	dd16      	ble.n	8002866 <__aeabi_d2f+0x52>
 8002838:	20ff      	movs	r0, #255	; 0xff
 800283a:	2200      	movs	r2, #0
 800283c:	05c0      	lsls	r0, r0, #23
 800283e:	4310      	orrs	r0, r2
 8002840:	07e4      	lsls	r4, r4, #31
 8002842:	4320      	orrs	r0, r4
 8002844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002846:	2b00      	cmp	r3, #0
 8002848:	d106      	bne.n	8002858 <__aeabi_d2f+0x44>
 800284a:	433d      	orrs	r5, r7
 800284c:	d026      	beq.n	800289c <__aeabi_d2f+0x88>
 800284e:	2205      	movs	r2, #5
 8002850:	0192      	lsls	r2, r2, #6
 8002852:	0a52      	lsrs	r2, r2, #9
 8002854:	b2d8      	uxtb	r0, r3
 8002856:	e7f1      	b.n	800283c <__aeabi_d2f+0x28>
 8002858:	432f      	orrs	r7, r5
 800285a:	d0ed      	beq.n	8002838 <__aeabi_d2f+0x24>
 800285c:	2280      	movs	r2, #128	; 0x80
 800285e:	03d2      	lsls	r2, r2, #15
 8002860:	20ff      	movs	r0, #255	; 0xff
 8002862:	432a      	orrs	r2, r5
 8002864:	e7ea      	b.n	800283c <__aeabi_d2f+0x28>
 8002866:	2900      	cmp	r1, #0
 8002868:	dd1b      	ble.n	80028a2 <__aeabi_d2f+0x8e>
 800286a:	0192      	lsls	r2, r2, #6
 800286c:	1e50      	subs	r0, r2, #1
 800286e:	4182      	sbcs	r2, r0
 8002870:	00ed      	lsls	r5, r5, #3
 8002872:	0f7f      	lsrs	r7, r7, #29
 8002874:	432a      	orrs	r2, r5
 8002876:	433a      	orrs	r2, r7
 8002878:	0753      	lsls	r3, r2, #29
 800287a:	d047      	beq.n	800290c <__aeabi_d2f+0xf8>
 800287c:	230f      	movs	r3, #15
 800287e:	4013      	ands	r3, r2
 8002880:	2b04      	cmp	r3, #4
 8002882:	d000      	beq.n	8002886 <__aeabi_d2f+0x72>
 8002884:	3204      	adds	r2, #4
 8002886:	2380      	movs	r3, #128	; 0x80
 8002888:	04db      	lsls	r3, r3, #19
 800288a:	4013      	ands	r3, r2
 800288c:	d03e      	beq.n	800290c <__aeabi_d2f+0xf8>
 800288e:	1c48      	adds	r0, r1, #1
 8002890:	29fe      	cmp	r1, #254	; 0xfe
 8002892:	d0d1      	beq.n	8002838 <__aeabi_d2f+0x24>
 8002894:	0192      	lsls	r2, r2, #6
 8002896:	0a52      	lsrs	r2, r2, #9
 8002898:	b2c0      	uxtb	r0, r0
 800289a:	e7cf      	b.n	800283c <__aeabi_d2f+0x28>
 800289c:	2000      	movs	r0, #0
 800289e:	2200      	movs	r2, #0
 80028a0:	e7cc      	b.n	800283c <__aeabi_d2f+0x28>
 80028a2:	000a      	movs	r2, r1
 80028a4:	3217      	adds	r2, #23
 80028a6:	db2f      	blt.n	8002908 <__aeabi_d2f+0xf4>
 80028a8:	2680      	movs	r6, #128	; 0x80
 80028aa:	0436      	lsls	r6, r6, #16
 80028ac:	432e      	orrs	r6, r5
 80028ae:	251e      	movs	r5, #30
 80028b0:	1a6d      	subs	r5, r5, r1
 80028b2:	2d1f      	cmp	r5, #31
 80028b4:	dd11      	ble.n	80028da <__aeabi_d2f+0xc6>
 80028b6:	2202      	movs	r2, #2
 80028b8:	4252      	negs	r2, r2
 80028ba:	1a52      	subs	r2, r2, r1
 80028bc:	0031      	movs	r1, r6
 80028be:	40d1      	lsrs	r1, r2
 80028c0:	2d20      	cmp	r5, #32
 80028c2:	d004      	beq.n	80028ce <__aeabi_d2f+0xba>
 80028c4:	4a14      	ldr	r2, [pc, #80]	; (8002918 <__aeabi_d2f+0x104>)
 80028c6:	4694      	mov	ip, r2
 80028c8:	4463      	add	r3, ip
 80028ca:	409e      	lsls	r6, r3
 80028cc:	4337      	orrs	r7, r6
 80028ce:	003a      	movs	r2, r7
 80028d0:	1e53      	subs	r3, r2, #1
 80028d2:	419a      	sbcs	r2, r3
 80028d4:	430a      	orrs	r2, r1
 80028d6:	2100      	movs	r1, #0
 80028d8:	e7ce      	b.n	8002878 <__aeabi_d2f+0x64>
 80028da:	4a10      	ldr	r2, [pc, #64]	; (800291c <__aeabi_d2f+0x108>)
 80028dc:	0038      	movs	r0, r7
 80028de:	4694      	mov	ip, r2
 80028e0:	4463      	add	r3, ip
 80028e2:	4098      	lsls	r0, r3
 80028e4:	003a      	movs	r2, r7
 80028e6:	1e41      	subs	r1, r0, #1
 80028e8:	4188      	sbcs	r0, r1
 80028ea:	409e      	lsls	r6, r3
 80028ec:	40ea      	lsrs	r2, r5
 80028ee:	4330      	orrs	r0, r6
 80028f0:	4302      	orrs	r2, r0
 80028f2:	2100      	movs	r1, #0
 80028f4:	0753      	lsls	r3, r2, #29
 80028f6:	d1c1      	bne.n	800287c <__aeabi_d2f+0x68>
 80028f8:	2180      	movs	r1, #128	; 0x80
 80028fa:	0013      	movs	r3, r2
 80028fc:	04c9      	lsls	r1, r1, #19
 80028fe:	2001      	movs	r0, #1
 8002900:	400b      	ands	r3, r1
 8002902:	420a      	tst	r2, r1
 8002904:	d1c6      	bne.n	8002894 <__aeabi_d2f+0x80>
 8002906:	e7a3      	b.n	8002850 <__aeabi_d2f+0x3c>
 8002908:	2300      	movs	r3, #0
 800290a:	e7a0      	b.n	800284e <__aeabi_d2f+0x3a>
 800290c:	000b      	movs	r3, r1
 800290e:	e79f      	b.n	8002850 <__aeabi_d2f+0x3c>
 8002910:	000007fe 	.word	0x000007fe
 8002914:	fffffc80 	.word	0xfffffc80
 8002918:	fffffca2 	.word	0xfffffca2
 800291c:	fffffc82 	.word	0xfffffc82

08002920 <__clzsi2>:
 8002920:	211c      	movs	r1, #28
 8002922:	2301      	movs	r3, #1
 8002924:	041b      	lsls	r3, r3, #16
 8002926:	4298      	cmp	r0, r3
 8002928:	d301      	bcc.n	800292e <__clzsi2+0xe>
 800292a:	0c00      	lsrs	r0, r0, #16
 800292c:	3910      	subs	r1, #16
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	4298      	cmp	r0, r3
 8002932:	d301      	bcc.n	8002938 <__clzsi2+0x18>
 8002934:	0a00      	lsrs	r0, r0, #8
 8002936:	3908      	subs	r1, #8
 8002938:	091b      	lsrs	r3, r3, #4
 800293a:	4298      	cmp	r0, r3
 800293c:	d301      	bcc.n	8002942 <__clzsi2+0x22>
 800293e:	0900      	lsrs	r0, r0, #4
 8002940:	3904      	subs	r1, #4
 8002942:	a202      	add	r2, pc, #8	; (adr r2, 800294c <__clzsi2+0x2c>)
 8002944:	5c10      	ldrb	r0, [r2, r0]
 8002946:	1840      	adds	r0, r0, r1
 8002948:	4770      	bx	lr
 800294a:	46c0      	nop			; (mov r8, r8)
 800294c:	02020304 	.word	0x02020304
 8002950:	01010101 	.word	0x01010101
	...

0800295c <IIM2070_Read_Gyro>:
	printf("ID =0x%x\r\n",h_IIM2070->fixed_value);
	return 0;
}

int IIM2070_Read_Gyro(h_IIM2070_t *h_IIM2070)
{
 800295c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800295e:	b08d      	sub	sp, #52	; 0x34
 8002960:	af02      	add	r7, sp, #8
 8002962:	6078      	str	r0, [r7, #4]
	uint8_t g_x = IIM2070_gyro_x << 2;
 8002964:	2127      	movs	r1, #39	; 0x27
 8002966:	187b      	adds	r3, r7, r1
 8002968:	2200      	movs	r2, #0
 800296a:	701a      	strb	r2, [r3, #0]
//	uint8_t g_y = IIM2070_gyro_y << 2;
//	uint8_t g_z = IIM2070_gyro_z << 2;

	uint8_t bufferTX_x[4]={RW_READ_MSG|g_x,0x00,0x00,0xF1};
 800296c:	4b89      	ldr	r3, [pc, #548]	; (8002b94 <IIM2070_Read_Gyro+0x238>)
 800296e:	781a      	ldrb	r2, [r3, #0]
 8002970:	187b      	adds	r3, r7, r1
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	4313      	orrs	r3, r2
 8002976:	b2da      	uxtb	r2, r3
 8002978:	2420      	movs	r4, #32
 800297a:	193b      	adds	r3, r7, r4
 800297c:	701a      	strb	r2, [r3, #0]
 800297e:	193b      	adds	r3, r7, r4
 8002980:	2200      	movs	r2, #0
 8002982:	705a      	strb	r2, [r3, #1]
 8002984:	193b      	adds	r3, r7, r4
 8002986:	2200      	movs	r2, #0
 8002988:	709a      	strb	r2, [r3, #2]
 800298a:	193b      	adds	r3, r7, r4
 800298c:	22f1      	movs	r2, #241	; 0xf1
 800298e:	70da      	strb	r2, [r3, #3]
	uint8_t bufferTX_y[4]={0x04,0x00,0x00,0xDC};
 8002990:	251c      	movs	r5, #28
 8002992:	197b      	adds	r3, r7, r5
 8002994:	4a80      	ldr	r2, [pc, #512]	; (8002b98 <IIM2070_Read_Gyro+0x23c>)
 8002996:	601a      	str	r2, [r3, #0]
	uint8_t bufferTX_z[4]={0x08,0x00,0x00,0xAB};
 8002998:	2618      	movs	r6, #24
 800299a:	19bb      	adds	r3, r7, r6
 800299c:	4a7f      	ldr	r2, [pc, #508]	; (8002b9c <IIM2070_Read_Gyro+0x240>)
 800299e:	601a      	str	r2, [r3, #0]
	uint8_t bufferTX[4]={0x5C,0x00,0x00,0xD8}; //send nothing
 80029a0:	2314      	movs	r3, #20
 80029a2:	18fb      	adds	r3, r7, r3
 80029a4:	4a7e      	ldr	r2, [pc, #504]	; (8002ba0 <IIM2070_Read_Gyro+0x244>)
 80029a6:	601a      	str	r2, [r3, #0]
	uint8_t bufferRX_x[4];
	uint8_t bufferRX_y[4];
	uint8_t bufferRX_z[4];

	//Send commnand to G_x and receive nothing
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80029a8:	2380      	movs	r3, #128	; 0x80
 80029aa:	00d9      	lsls	r1, r3, #3
 80029ac:	23a0      	movs	r3, #160	; 0xa0
 80029ae:	05db      	lsls	r3, r3, #23
 80029b0:	2200      	movs	r2, #0
 80029b2:	0018      	movs	r0, r3
 80029b4:	f002 fcf0 	bl	8005398 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1,bufferTX_x,4, HAL_MAX_DELAY);
 80029b8:	2301      	movs	r3, #1
 80029ba:	425b      	negs	r3, r3
 80029bc:	1939      	adds	r1, r7, r4
 80029be:	4879      	ldr	r0, [pc, #484]	; (8002ba4 <IIM2070_Read_Gyro+0x248>)
 80029c0:	2204      	movs	r2, #4
 80029c2:	f003 fc35 	bl	8006230 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 80029c6:	2380      	movs	r3, #128	; 0x80
 80029c8:	00d9      	lsls	r1, r3, #3
 80029ca:	23a0      	movs	r3, #160	; 0xa0
 80029cc:	05db      	lsls	r3, r3, #23
 80029ce:	2201      	movs	r2, #1
 80029d0:	0018      	movs	r0, r3
 80029d2:	f002 fce1 	bl	8005398 <HAL_GPIO_WritePin>


	// Send command to G_y and read G_x
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	00d9      	lsls	r1, r3, #3
 80029da:	23a0      	movs	r3, #160	; 0xa0
 80029dc:	05db      	lsls	r3, r3, #23
 80029de:	2200      	movs	r2, #0
 80029e0:	0018      	movs	r0, r3
 80029e2:	f002 fcd9 	bl	8005398 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, bufferTX_y, bufferRX_x, 4, HAL_MAX_DELAY);
 80029e6:	2410      	movs	r4, #16
 80029e8:	193a      	adds	r2, r7, r4
 80029ea:	1979      	adds	r1, r7, r5
 80029ec:	486d      	ldr	r0, [pc, #436]	; (8002ba4 <IIM2070_Read_Gyro+0x248>)
 80029ee:	2301      	movs	r3, #1
 80029f0:	425b      	negs	r3, r3
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	2304      	movs	r3, #4
 80029f6:	f003 fd73 	bl	80064e0 <HAL_SPI_TransmitReceive>
	printf("calibX = 0x%x\r\n",bufferRX_x[0]);
 80029fa:	193b      	adds	r3, r7, r4
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	001a      	movs	r2, r3
 8002a00:	4b69      	ldr	r3, [pc, #420]	; (8002ba8 <IIM2070_Read_Gyro+0x24c>)
 8002a02:	0011      	movs	r1, r2
 8002a04:	0018      	movs	r0, r3
 8002a06:	f006 fd89 	bl	800951c <iprintf>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8002a0a:	2380      	movs	r3, #128	; 0x80
 8002a0c:	00d9      	lsls	r1, r3, #3
 8002a0e:	23a0      	movs	r3, #160	; 0xa0
 8002a10:	05db      	lsls	r3, r3, #23
 8002a12:	2201      	movs	r2, #1
 8002a14:	0018      	movs	r0, r3
 8002a16:	f002 fcbf 	bl	8005398 <HAL_GPIO_WritePin>
	h_IIM2070->gyro_x = ((bufferRX_x[1]<<8|bufferRX_x[2])*Fs)/(1<<15);
 8002a1a:	193b      	adds	r3, r7, r4
 8002a1c:	785b      	ldrb	r3, [r3, #1]
 8002a1e:	021b      	lsls	r3, r3, #8
 8002a20:	193a      	adds	r2, r7, r4
 8002a22:	7892      	ldrb	r2, [r2, #2]
 8002a24:	4313      	orrs	r3, r2
 8002a26:	0018      	movs	r0, r3
 8002a28:	f7fe f812 	bl	8000a50 <__aeabi_i2f>
 8002a2c:	1c02      	adds	r2, r0, #0
 8002a2e:	4b5f      	ldr	r3, [pc, #380]	; (8002bac <IIM2070_Read_Gyro+0x250>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	1c19      	adds	r1, r3, #0
 8002a34:	1c10      	adds	r0, r2, #0
 8002a36:	f7fd febd 	bl	80007b4 <__aeabi_fmul>
 8002a3a:	1c03      	adds	r3, r0, #0
 8002a3c:	218e      	movs	r1, #142	; 0x8e
 8002a3e:	05c9      	lsls	r1, r1, #23
 8002a40:	1c18      	adds	r0, r3, #0
 8002a42:	f7fd fd9d 	bl	8000580 <__aeabi_fdiv>
 8002a46:	1c03      	adds	r3, r0, #0
 8002a48:	1c1a      	adds	r2, r3, #0
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	619a      	str	r2, [r3, #24]
	printf("G_x = %f_dps\r\n",h_IIM2070->gyro_x);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	699b      	ldr	r3, [r3, #24]
 8002a52:	1c18      	adds	r0, r3, #0
 8002a54:	f7ff fe96 	bl	8002784 <__aeabi_f2d>
 8002a58:	0002      	movs	r2, r0
 8002a5a:	000b      	movs	r3, r1
 8002a5c:	4954      	ldr	r1, [pc, #336]	; (8002bb0 <IIM2070_Read_Gyro+0x254>)
 8002a5e:	0008      	movs	r0, r1
 8002a60:	f006 fd5c 	bl	800951c <iprintf>

	// Send command to G_z and read G_y
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8002a64:	2380      	movs	r3, #128	; 0x80
 8002a66:	00d9      	lsls	r1, r3, #3
 8002a68:	23a0      	movs	r3, #160	; 0xa0
 8002a6a:	05db      	lsls	r3, r3, #23
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f002 fc92 	bl	8005398 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1, bufferTX_z, bufferRX_y, 4, HAL_MAX_DELAY);
 8002a74:	240c      	movs	r4, #12
 8002a76:	193a      	adds	r2, r7, r4
 8002a78:	19b9      	adds	r1, r7, r6
 8002a7a:	484a      	ldr	r0, [pc, #296]	; (8002ba4 <IIM2070_Read_Gyro+0x248>)
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	425b      	negs	r3, r3
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2304      	movs	r3, #4
 8002a84:	f003 fd2c 	bl	80064e0 <HAL_SPI_TransmitReceive>
	printf("calibY = 0x%x\r\n",bufferRX_y[0]);
 8002a88:	193b      	adds	r3, r7, r4
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	001a      	movs	r2, r3
 8002a8e:	4b49      	ldr	r3, [pc, #292]	; (8002bb4 <IIM2070_Read_Gyro+0x258>)
 8002a90:	0011      	movs	r1, r2
 8002a92:	0018      	movs	r0, r3
 8002a94:	f006 fd42 	bl	800951c <iprintf>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8002a98:	2380      	movs	r3, #128	; 0x80
 8002a9a:	00d9      	lsls	r1, r3, #3
 8002a9c:	23a0      	movs	r3, #160	; 0xa0
 8002a9e:	05db      	lsls	r3, r3, #23
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f002 fc78 	bl	8005398 <HAL_GPIO_WritePin>
	h_IIM2070->gyro_y = ((bufferRX_y[1]<<8|bufferRX_y[2])*Fs)/(1<<15);
 8002aa8:	193b      	adds	r3, r7, r4
 8002aaa:	785b      	ldrb	r3, [r3, #1]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	193a      	adds	r2, r7, r4
 8002ab0:	7892      	ldrb	r2, [r2, #2]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	0018      	movs	r0, r3
 8002ab6:	f7fd ffcb 	bl	8000a50 <__aeabi_i2f>
 8002aba:	1c02      	adds	r2, r0, #0
 8002abc:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <IIM2070_Read_Gyro+0x250>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	1c19      	adds	r1, r3, #0
 8002ac2:	1c10      	adds	r0, r2, #0
 8002ac4:	f7fd fe76 	bl	80007b4 <__aeabi_fmul>
 8002ac8:	1c03      	adds	r3, r0, #0
 8002aca:	218e      	movs	r1, #142	; 0x8e
 8002acc:	05c9      	lsls	r1, r1, #23
 8002ace:	1c18      	adds	r0, r3, #0
 8002ad0:	f7fd fd56 	bl	8000580 <__aeabi_fdiv>
 8002ad4:	1c03      	adds	r3, r0, #0
 8002ad6:	1c1a      	adds	r2, r3, #0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	61da      	str	r2, [r3, #28]
	printf("G_y = %f_dps\r\n",h_IIM2070->gyro_y);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	69db      	ldr	r3, [r3, #28]
 8002ae0:	1c18      	adds	r0, r3, #0
 8002ae2:	f7ff fe4f 	bl	8002784 <__aeabi_f2d>
 8002ae6:	0002      	movs	r2, r0
 8002ae8:	000b      	movs	r3, r1
 8002aea:	4933      	ldr	r1, [pc, #204]	; (8002bb8 <IIM2070_Read_Gyro+0x25c>)
 8002aec:	0008      	movs	r0, r1
 8002aee:	f006 fd15 	bl	800951c <iprintf>

	//Read G_z
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 0);
 8002af2:	2380      	movs	r3, #128	; 0x80
 8002af4:	00d9      	lsls	r1, r3, #3
 8002af6:	23a0      	movs	r3, #160	; 0xa0
 8002af8:	05db      	lsls	r3, r3, #23
 8002afa:	2200      	movs	r2, #0
 8002afc:	0018      	movs	r0, r3
 8002afe:	f002 fc4b 	bl	8005398 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(&hspi1,bufferTX,bufferRX_z, 4, HAL_MAX_DELAY);
 8002b02:	2408      	movs	r4, #8
 8002b04:	193a      	adds	r2, r7, r4
 8002b06:	2314      	movs	r3, #20
 8002b08:	18f9      	adds	r1, r7, r3
 8002b0a:	4826      	ldr	r0, [pc, #152]	; (8002ba4 <IIM2070_Read_Gyro+0x248>)
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	425b      	negs	r3, r3
 8002b10:	9300      	str	r3, [sp, #0]
 8002b12:	2304      	movs	r3, #4
 8002b14:	f003 fce4 	bl	80064e0 <HAL_SPI_TransmitReceive>
	printf("calibZ = 0x%x\r\n",bufferRX_z[0]);
 8002b18:	193b      	adds	r3, r7, r4
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	001a      	movs	r2, r3
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <IIM2070_Read_Gyro+0x260>)
 8002b20:	0011      	movs	r1, r2
 8002b22:	0018      	movs	r0, r3
 8002b24:	f006 fcfa 	bl	800951c <iprintf>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_10, 1);
 8002b28:	2380      	movs	r3, #128	; 0x80
 8002b2a:	00d9      	lsls	r1, r3, #3
 8002b2c:	23a0      	movs	r3, #160	; 0xa0
 8002b2e:	05db      	lsls	r3, r3, #23
 8002b30:	2201      	movs	r2, #1
 8002b32:	0018      	movs	r0, r3
 8002b34:	f002 fc30 	bl	8005398 <HAL_GPIO_WritePin>
	h_IIM2070->gyro_z = ((bufferRX_z[1]<<8|bufferRX_z[2])*Fs)/(1<<15);
 8002b38:	193b      	adds	r3, r7, r4
 8002b3a:	785b      	ldrb	r3, [r3, #1]
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	193a      	adds	r2, r7, r4
 8002b40:	7892      	ldrb	r2, [r2, #2]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7fd ff83 	bl	8000a50 <__aeabi_i2f>
 8002b4a:	1c02      	adds	r2, r0, #0
 8002b4c:	4b17      	ldr	r3, [pc, #92]	; (8002bac <IIM2070_Read_Gyro+0x250>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	1c19      	adds	r1, r3, #0
 8002b52:	1c10      	adds	r0, r2, #0
 8002b54:	f7fd fe2e 	bl	80007b4 <__aeabi_fmul>
 8002b58:	1c03      	adds	r3, r0, #0
 8002b5a:	218e      	movs	r1, #142	; 0x8e
 8002b5c:	05c9      	lsls	r1, r1, #23
 8002b5e:	1c18      	adds	r0, r3, #0
 8002b60:	f7fd fd0e 	bl	8000580 <__aeabi_fdiv>
 8002b64:	1c03      	adds	r3, r0, #0
 8002b66:	1c1a      	adds	r2, r3, #0
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	621a      	str	r2, [r3, #32]
	printf("G_z = %f_dps\r\n",h_IIM2070->gyro_z);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a1b      	ldr	r3, [r3, #32]
 8002b70:	1c18      	adds	r0, r3, #0
 8002b72:	f7ff fe07 	bl	8002784 <__aeabi_f2d>
 8002b76:	0002      	movs	r2, r0
 8002b78:	000b      	movs	r3, r1
 8002b7a:	4911      	ldr	r1, [pc, #68]	; (8002bc0 <IIM2070_Read_Gyro+0x264>)
 8002b7c:	0008      	movs	r0, r1
 8002b7e:	f006 fccd 	bl	800951c <iprintf>
	HAL_Delay(20);
 8002b82:	2014      	movs	r0, #20
 8002b84:	f001 fb82 	bl	800428c <HAL_Delay>
	return 0;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	b00b      	add	sp, #44	; 0x2c
 8002b90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b92:	46c0      	nop			; (mov r8, r8)
 8002b94:	200001f4 	.word	0x200001f4
 8002b98:	dc000004 	.word	0xdc000004
 8002b9c:	ab000008 	.word	0xab000008
 8002ba0:	d800005c 	.word	0xd800005c
 8002ba4:	200002ec 	.word	0x200002ec
 8002ba8:	0800d108 	.word	0x0800d108
 8002bac:	20000000 	.word	0x20000000
 8002bb0:	0800d118 	.word	0x0800d118
 8002bb4:	0800d128 	.word	0x0800d128
 8002bb8:	0800d138 	.word	0x0800d138
 8002bbc:	0800d148 	.word	0x0800d148
 8002bc0:	0800d158 	.word	0x0800d158

08002bc4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002bca:	1d3b      	adds	r3, r7, #4
 8002bcc:	0018      	movs	r0, r3
 8002bce:	230c      	movs	r3, #12
 8002bd0:	001a      	movs	r2, r3
 8002bd2:	2100      	movs	r1, #0
 8002bd4:	f006 fe24 	bl	8009820 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002bd8:	4b34      	ldr	r3, [pc, #208]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002bda:	4a35      	ldr	r2, [pc, #212]	; (8002cb0 <MX_ADC1_Init+0xec>)
 8002bdc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8002bde:	4b33      	ldr	r3, [pc, #204]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002be0:	2280      	movs	r2, #128	; 0x80
 8002be2:	05d2      	lsls	r2, r2, #23
 8002be4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002be6:	4b31      	ldr	r3, [pc, #196]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bec:	4b2f      	ldr	r3, [pc, #188]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002bf2:	4b2e      	ldr	r3, [pc, #184]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002bf4:	2280      	movs	r2, #128	; 0x80
 8002bf6:	0392      	lsls	r2, r2, #14
 8002bf8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002bfa:	4b2c      	ldr	r3, [pc, #176]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002bfc:	2204      	movs	r2, #4
 8002bfe:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c00:	4b2a      	ldr	r3, [pc, #168]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8002c06:	4b29      	ldr	r3, [pc, #164]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c08:	2200      	movs	r2, #0
 8002c0a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002c0c:	4b27      	ldr	r3, [pc, #156]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c0e:	2201      	movs	r2, #1
 8002c10:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 8002c12:	4b26      	ldr	r3, [pc, #152]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c14:	2202      	movs	r2, #2
 8002c16:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c18:	4b24      	ldr	r3, [pc, #144]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c1e:	4b23      	ldr	r3, [pc, #140]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c24:	4b21      	ldr	r3, [pc, #132]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c26:	222c      	movs	r2, #44	; 0x2c
 8002c28:	2100      	movs	r1, #0
 8002c2a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8002c32:	4b1e      	ldr	r3, [pc, #120]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c34:	2206      	movs	r2, #6
 8002c36:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8002c38:	4b1c      	ldr	r3, [pc, #112]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c3a:	2206      	movs	r2, #6
 8002c3c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8002c3e:	4b1b      	ldr	r3, [pc, #108]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c40:	223c      	movs	r2, #60	; 0x3c
 8002c42:	2100      	movs	r1, #0
 8002c44:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c48:	2200      	movs	r2, #0
 8002c4a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002c4c:	4b17      	ldr	r3, [pc, #92]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f001 fc54 	bl	80044fc <HAL_ADC_Init>
 8002c54:	1e03      	subs	r3, r0, #0
 8002c56:	d001      	beq.n	8002c5c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8002c58:	f000 fa80 	bl	800315c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002c5c:	1d3b      	adds	r3, r7, #4
 8002c5e:	2201      	movs	r2, #1
 8002c60:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	2200      	movs	r2, #0
 8002c66:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8002c68:	1d3b      	adds	r3, r7, #4
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c6e:	1d3a      	adds	r2, r7, #4
 8002c70:	4b0e      	ldr	r3, [pc, #56]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c72:	0011      	movs	r1, r2
 8002c74:	0018      	movs	r0, r3
 8002c76:	f001 fde9 	bl	800484c <HAL_ADC_ConfigChannel>
 8002c7a:	1e03      	subs	r3, r0, #0
 8002c7c:	d001      	beq.n	8002c82 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8002c7e:	f000 fa6d 	bl	800315c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002c82:	1d3b      	adds	r3, r7, #4
 8002c84:	4a0b      	ldr	r2, [pc, #44]	; (8002cb4 <MX_ADC1_Init+0xf0>)
 8002c86:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c88:	1d3b      	adds	r3, r7, #4
 8002c8a:	2204      	movs	r2, #4
 8002c8c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c8e:	1d3a      	adds	r2, r7, #4
 8002c90:	4b06      	ldr	r3, [pc, #24]	; (8002cac <MX_ADC1_Init+0xe8>)
 8002c92:	0011      	movs	r1, r2
 8002c94:	0018      	movs	r0, r3
 8002c96:	f001 fdd9 	bl	800484c <HAL_ADC_ConfigChannel>
 8002c9a:	1e03      	subs	r3, r0, #0
 8002c9c:	d001      	beq.n	8002ca2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8002c9e:	f000 fa5d 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002ca2:	46c0      	nop			; (mov r8, r8)
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	b004      	add	sp, #16
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	46c0      	nop			; (mov r8, r8)
 8002cac:	200001f8 	.word	0x200001f8
 8002cb0:	40012400 	.word	0x40012400
 8002cb4:	04000002 	.word	0x04000002

08002cb8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8002cb8:	b590      	push	{r4, r7, lr}
 8002cba:	b08b      	sub	sp, #44	; 0x2c
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc0:	2414      	movs	r4, #20
 8002cc2:	193b      	adds	r3, r7, r4
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	2314      	movs	r3, #20
 8002cc8:	001a      	movs	r2, r3
 8002cca:	2100      	movs	r1, #0
 8002ccc:	f006 fda8 	bl	8009820 <memset>
  if(adcHandle->Instance==ADC1)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_ADC_MspInit+0xd4>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d154      	bne.n	8002d84 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002cda:	4b2d      	ldr	r3, [pc, #180]	; (8002d90 <HAL_ADC_MspInit+0xd8>)
 8002cdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cde:	4b2c      	ldr	r3, [pc, #176]	; (8002d90 <HAL_ADC_MspInit+0xd8>)
 8002ce0:	2180      	movs	r1, #128	; 0x80
 8002ce2:	0349      	lsls	r1, r1, #13
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	641a      	str	r2, [r3, #64]	; 0x40
 8002ce8:	4b29      	ldr	r3, [pc, #164]	; (8002d90 <HAL_ADC_MspInit+0xd8>)
 8002cea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cec:	2380      	movs	r3, #128	; 0x80
 8002cee:	035b      	lsls	r3, r3, #13
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
 8002cf4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cf6:	4b26      	ldr	r3, [pc, #152]	; (8002d90 <HAL_ADC_MspInit+0xd8>)
 8002cf8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cfa:	4b25      	ldr	r3, [pc, #148]	; (8002d90 <HAL_ADC_MspInit+0xd8>)
 8002cfc:	2101      	movs	r1, #1
 8002cfe:	430a      	orrs	r2, r1
 8002d00:	635a      	str	r2, [r3, #52]	; 0x34
 8002d02:	4b23      	ldr	r3, [pc, #140]	; (8002d90 <HAL_ADC_MspInit+0xd8>)
 8002d04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d06:	2201      	movs	r2, #1
 8002d08:	4013      	ands	r3, r2
 8002d0a:	60fb      	str	r3, [r7, #12]
 8002d0c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Shunt1_Pin|ADC_Shunt2_Pin;
 8002d0e:	193b      	adds	r3, r7, r4
 8002d10:	2203      	movs	r2, #3
 8002d12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002d14:	193b      	adds	r3, r7, r4
 8002d16:	2203      	movs	r2, #3
 8002d18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1a:	193b      	adds	r3, r7, r4
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d20:	193a      	adds	r2, r7, r4
 8002d22:	23a0      	movs	r3, #160	; 0xa0
 8002d24:	05db      	lsls	r3, r3, #23
 8002d26:	0011      	movs	r1, r2
 8002d28:	0018      	movs	r0, r3
 8002d2a:	f002 f9d1 	bl	80050d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002d2e:	4b19      	ldr	r3, [pc, #100]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d30:	4a19      	ldr	r2, [pc, #100]	; (8002d98 <HAL_ADC_MspInit+0xe0>)
 8002d32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8002d34:	4b17      	ldr	r3, [pc, #92]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d36:	2205      	movs	r2, #5
 8002d38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d3a:	4b16      	ldr	r3, [pc, #88]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d40:	4b14      	ldr	r3, [pc, #80]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002d46:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d48:	2280      	movs	r2, #128	; 0x80
 8002d4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002d4c:	4b11      	ldr	r3, [pc, #68]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d4e:	2280      	movs	r2, #128	; 0x80
 8002d50:	0052      	lsls	r2, r2, #1
 8002d52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002d54:	4b0f      	ldr	r3, [pc, #60]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d56:	2280      	movs	r2, #128	; 0x80
 8002d58:	00d2      	lsls	r2, r2, #3
 8002d5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8002d5c:	4b0d      	ldr	r3, [pc, #52]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002d62:	4b0c      	ldr	r3, [pc, #48]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002d68:	4b0a      	ldr	r3, [pc, #40]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	f002 f824 	bl	8004db8 <HAL_DMA_Init>
 8002d70:	1e03      	subs	r3, r0, #0
 8002d72:	d001      	beq.n	8002d78 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8002d74:	f000 f9f2 	bl	800315c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	4a06      	ldr	r2, [pc, #24]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d7c:	651a      	str	r2, [r3, #80]	; 0x50
 8002d7e:	4b05      	ldr	r3, [pc, #20]	; (8002d94 <HAL_ADC_MspInit+0xdc>)
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b00b      	add	sp, #44	; 0x2c
 8002d8a:	bd90      	pop	{r4, r7, pc}
 8002d8c:	40012400 	.word	0x40012400
 8002d90:	40021000 	.word	0x40021000
 8002d94:	2000025c 	.word	0x2000025c
 8002d98:	40020008 	.word	0x40020008

08002d9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002da2:	4b0c      	ldr	r3, [pc, #48]	; (8002dd4 <MX_DMA_Init+0x38>)
 8002da4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002da6:	4b0b      	ldr	r3, [pc, #44]	; (8002dd4 <MX_DMA_Init+0x38>)
 8002da8:	2101      	movs	r1, #1
 8002daa:	430a      	orrs	r2, r1
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38
 8002dae:	4b09      	ldr	r3, [pc, #36]	; (8002dd4 <MX_DMA_Init+0x38>)
 8002db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002db2:	2201      	movs	r2, #1
 8002db4:	4013      	ands	r3, r2
 8002db6:	607b      	str	r3, [r7, #4]
 8002db8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002dba:	2200      	movs	r2, #0
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	2009      	movs	r0, #9
 8002dc0:	f001 ffc8 	bl	8004d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002dc4:	2009      	movs	r0, #9
 8002dc6:	f001 ffda 	bl	8004d7e <HAL_NVIC_EnableIRQ>

}
 8002dca:	46c0      	nop			; (mov r8, r8)
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b002      	add	sp, #8
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	46c0      	nop			; (mov r8, r8)
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002dd8:	b590      	push	{r4, r7, lr}
 8002dda:	b08b      	sub	sp, #44	; 0x2c
 8002ddc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dde:	2414      	movs	r4, #20
 8002de0:	193b      	adds	r3, r7, r4
 8002de2:	0018      	movs	r0, r3
 8002de4:	2314      	movs	r3, #20
 8002de6:	001a      	movs	r2, r3
 8002de8:	2100      	movs	r1, #0
 8002dea:	f006 fd19 	bl	8009820 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dee:	4b75      	ldr	r3, [pc, #468]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002df0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002df2:	4b74      	ldr	r3, [pc, #464]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002df4:	2104      	movs	r1, #4
 8002df6:	430a      	orrs	r2, r1
 8002df8:	635a      	str	r2, [r3, #52]	; 0x34
 8002dfa:	4b72      	ldr	r3, [pc, #456]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002dfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dfe:	2204      	movs	r2, #4
 8002e00:	4013      	ands	r3, r2
 8002e02:	613b      	str	r3, [r7, #16]
 8002e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002e06:	4b6f      	ldr	r3, [pc, #444]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0a:	4b6e      	ldr	r3, [pc, #440]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e0c:	2120      	movs	r1, #32
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	635a      	str	r2, [r3, #52]	; 0x34
 8002e12:	4b6c      	ldr	r3, [pc, #432]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e16:	2220      	movs	r2, #32
 8002e18:	4013      	ands	r3, r2
 8002e1a:	60fb      	str	r3, [r7, #12]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e1e:	4b69      	ldr	r3, [pc, #420]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e22:	4b68      	ldr	r3, [pc, #416]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e24:	2101      	movs	r1, #1
 8002e26:	430a      	orrs	r2, r1
 8002e28:	635a      	str	r2, [r3, #52]	; 0x34
 8002e2a:	4b66      	ldr	r3, [pc, #408]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2e:	2201      	movs	r2, #1
 8002e30:	4013      	ands	r3, r2
 8002e32:	60bb      	str	r3, [r7, #8]
 8002e34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e36:	4b63      	ldr	r3, [pc, #396]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e3a:	4b62      	ldr	r3, [pc, #392]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e3c:	2102      	movs	r1, #2
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	635a      	str	r2, [r3, #52]	; 0x34
 8002e42:	4b60      	ldr	r3, [pc, #384]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e46:	2202      	movs	r2, #2
 8002e48:	4013      	ands	r3, r2
 8002e4a:	607b      	str	r3, [r7, #4]
 8002e4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e4e:	4b5d      	ldr	r3, [pc, #372]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e50:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e52:	4b5c      	ldr	r3, [pc, #368]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e54:	2108      	movs	r1, #8
 8002e56:	430a      	orrs	r2, r1
 8002e58:	635a      	str	r2, [r3, #52]	; 0x34
 8002e5a:	4b5a      	ldr	r3, [pc, #360]	; (8002fc4 <MX_GPIO_Init+0x1ec>)
 8002e5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e5e:	2208      	movs	r2, #8
 8002e60:	4013      	ands	r3, r2
 8002e62:	603b      	str	r3, [r7, #0]
 8002e64:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 8002e66:	2380      	movs	r3, #128	; 0x80
 8002e68:	00d9      	lsls	r1, r3, #3
 8002e6a:	23a0      	movs	r3, #160	; 0xa0
 8002e6c:	05db      	lsls	r3, r3, #23
 8002e6e:	2201      	movs	r2, #1
 8002e70:	0018      	movs	r0, r3
 8002e72:	f002 fa91 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8002e76:	4b54      	ldr	r3, [pc, #336]	; (8002fc8 <MX_GPIO_Init+0x1f0>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	213f      	movs	r1, #63	; 0x3f
 8002e7c:	0018      	movs	r0, r3
 8002e7e:	f002 fa8b 	bl	8005398 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 8002e82:	4b52      	ldr	r3, [pc, #328]	; (8002fcc <MX_GPIO_Init+0x1f4>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	2118      	movs	r1, #24
 8002e88:	0018      	movs	r0, r3
 8002e8a:	f002 fa85 	bl	8005398 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Bouton1_Pin|Bouton2_Pin;
 8002e8e:	193b      	adds	r3, r7, r4
 8002e90:	2209      	movs	r2, #9
 8002e92:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002e94:	193b      	adds	r3, r7, r4
 8002e96:	2288      	movs	r2, #136	; 0x88
 8002e98:	0352      	lsls	r2, r2, #13
 8002e9a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e9c:	193b      	adds	r3, r7, r4
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ea2:	193b      	adds	r3, r7, r4
 8002ea4:	4a4a      	ldr	r2, [pc, #296]	; (8002fd0 <MX_GPIO_Init+0x1f8>)
 8002ea6:	0019      	movs	r1, r3
 8002ea8:	0010      	movs	r0, r2
 8002eaa:	f002 f911 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton3_Pin;
 8002eae:	193b      	adds	r3, r7, r4
 8002eb0:	2210      	movs	r2, #16
 8002eb2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002eb4:	193b      	adds	r3, r7, r4
 8002eb6:	2288      	movs	r2, #136	; 0x88
 8002eb8:	0352      	lsls	r2, r2, #13
 8002eba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ebc:	193b      	adds	r3, r7, r4
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton3_GPIO_Port, &GPIO_InitStruct);
 8002ec2:	193a      	adds	r2, r7, r4
 8002ec4:	23a0      	movs	r3, #160	; 0xa0
 8002ec6:	05db      	lsls	r3, r3, #23
 8002ec8:	0011      	movs	r1, r2
 8002eca:	0018      	movs	r0, r3
 8002ecc:	f002 f900 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = Contact1_Pin|Contact2_Pin|Contact3_Pin|Contact4_Pin;
 8002ed0:	0021      	movs	r1, r4
 8002ed2:	187b      	adds	r3, r7, r1
 8002ed4:	4a3f      	ldr	r2, [pc, #252]	; (8002fd4 <MX_GPIO_Init+0x1fc>)
 8002ed6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002ed8:	187b      	adds	r3, r7, r1
 8002eda:	2288      	movs	r2, #136	; 0x88
 8002edc:	0352      	lsls	r2, r2, #13
 8002ede:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002ee0:	187b      	adds	r3, r7, r1
 8002ee2:	2202      	movs	r2, #2
 8002ee4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ee6:	000c      	movs	r4, r1
 8002ee8:	187b      	adds	r3, r7, r1
 8002eea:	4a38      	ldr	r2, [pc, #224]	; (8002fcc <MX_GPIO_Init+0x1f4>)
 8002eec:	0019      	movs	r1, r3
 8002eee:	0010      	movs	r0, r2
 8002ef0:	f002 f8ee 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8002ef4:	0021      	movs	r1, r4
 8002ef6:	187b      	adds	r3, r7, r1
 8002ef8:	2280      	movs	r2, #128	; 0x80
 8002efa:	00d2      	lsls	r2, r2, #3
 8002efc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002efe:	000c      	movs	r4, r1
 8002f00:	193b      	adds	r3, r7, r4
 8002f02:	2201      	movs	r2, #1
 8002f04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f06:	193b      	adds	r3, r7, r4
 8002f08:	2200      	movs	r2, #0
 8002f0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0c:	193b      	adds	r3, r7, r4
 8002f0e:	2200      	movs	r2, #0
 8002f10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8002f12:	193a      	adds	r2, r7, r4
 8002f14:	23a0      	movs	r3, #160	; 0xa0
 8002f16:	05db      	lsls	r3, r3, #23
 8002f18:	0011      	movs	r1, r2
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f002 f8d8 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8002f20:	193b      	adds	r3, r7, r4
 8002f22:	223f      	movs	r2, #63	; 0x3f
 8002f24:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f26:	193b      	adds	r3, r7, r4
 8002f28:	2201      	movs	r2, #1
 8002f2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f2c:	193b      	adds	r3, r7, r4
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f32:	193b      	adds	r3, r7, r4
 8002f34:	2200      	movs	r2, #0
 8002f36:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f38:	193b      	adds	r3, r7, r4
 8002f3a:	4a23      	ldr	r2, [pc, #140]	; (8002fc8 <MX_GPIO_Init+0x1f0>)
 8002f3c:	0019      	movs	r1, r3
 8002f3e:	0010      	movs	r0, r2
 8002f40:	f002 f8c6 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin;
 8002f44:	193b      	adds	r3, r7, r4
 8002f46:	2218      	movs	r2, #24
 8002f48:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f4a:	193b      	adds	r3, r7, r4
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f50:	193b      	adds	r3, r7, r4
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f56:	193b      	adds	r3, r7, r4
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f5c:	193b      	adds	r3, r7, r4
 8002f5e:	4a1b      	ldr	r2, [pc, #108]	; (8002fcc <MX_GPIO_Init+0x1f4>)
 8002f60:	0019      	movs	r1, r3
 8002f62:	0010      	movs	r0, r2
 8002f64:	f002 f8b4 	bl	80050d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = Bordure1_Pin|Bordure2_Pin;
 8002f68:	0021      	movs	r1, r4
 8002f6a:	187b      	adds	r3, r7, r1
 8002f6c:	22c0      	movs	r2, #192	; 0xc0
 8002f6e:	0092      	lsls	r2, r2, #2
 8002f70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002f72:	187b      	adds	r3, r7, r1
 8002f74:	2288      	movs	r2, #136	; 0x88
 8002f76:	0352      	lsls	r2, r2, #13
 8002f78:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f7a:	187b      	adds	r3, r7, r1
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f80:	187b      	adds	r3, r7, r1
 8002f82:	4a12      	ldr	r2, [pc, #72]	; (8002fcc <MX_GPIO_Init+0x1f4>)
 8002f84:	0019      	movs	r1, r3
 8002f86:	0010      	movs	r0, r2
 8002f88:	f002 f8a2 	bl	80050d0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 0, 0);
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2005      	movs	r0, #5
 8002f92:	f001 fedf 	bl	8004d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8002f96:	2005      	movs	r0, #5
 8002f98:	f001 fef1 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	2100      	movs	r1, #0
 8002fa0:	2006      	movs	r0, #6
 8002fa2:	f001 fed7 	bl	8004d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8002fa6:	2006      	movs	r0, #6
 8002fa8:	f001 fee9 	bl	8004d7e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8002fac:	2200      	movs	r2, #0
 8002fae:	2100      	movs	r1, #0
 8002fb0:	2007      	movs	r0, #7
 8002fb2:	f001 fecf 	bl	8004d54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8002fb6:	2007      	movs	r0, #7
 8002fb8:	f001 fee1 	bl	8004d7e <HAL_NVIC_EnableIRQ>

}
 8002fbc:	46c0      	nop			; (mov r8, r8)
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	b00b      	add	sp, #44	; 0x2c
 8002fc2:	bd90      	pop	{r4, r7, pc}
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	50000c00 	.word	0x50000c00
 8002fcc:	50000400 	.word	0x50000400
 8002fd0:	50000800 	.word	0x50000800
 8002fd4:	0000e020 	.word	0x0000e020

08002fd8 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) {                                           //redirige la fonction printf
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b082      	sub	sp, #8
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);	 //vers l'uart2 ( pour la connexion serial avec l'ordinateur)//uart4 pour le rasppberry Pi zero
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	425b      	negs	r3, r3
 8002fe4:	1d39      	adds	r1, r7, #4
 8002fe6:	4804      	ldr	r0, [pc, #16]	; (8002ff8 <__io_putchar+0x20>)
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f004 fe29 	bl	8007c40 <HAL_UART_Transmit>
	return ch;
 8002fee:	687b      	ldr	r3, [r7, #4]
}
 8002ff0:	0018      	movs	r0, r3
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	b002      	add	sp, #8
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	20000568 	.word	0x20000568

08002ffc <SPI_transmit_receive>:

int SPI_transmit_receive(uint8_t *p_data_TX, uint8_t *p_data_RX, uint16_t size)
{
 8002ffc:	b590      	push	{r4, r7, lr}
 8002ffe:	b087      	sub	sp, #28
 8003000:	af02      	add	r7, sp, #8
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	1dbb      	adds	r3, r7, #6
 8003008:	801a      	strh	r2, [r3, #0]
	if( HAL_SPI_TransmitReceive(&hspi1,p_data_TX,p_data_RX, size, HAL_MAX_DELAY) != HAL_OK)
 800300a:	1dbb      	adds	r3, r7, #6
 800300c:	881c      	ldrh	r4, [r3, #0]
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	68f9      	ldr	r1, [r7, #12]
 8003012:	4809      	ldr	r0, [pc, #36]	; (8003038 <SPI_transmit_receive+0x3c>)
 8003014:	2301      	movs	r3, #1
 8003016:	425b      	negs	r3, r3
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	0023      	movs	r3, r4
 800301c:	f003 fa60 	bl	80064e0 <HAL_SPI_TransmitReceive>
 8003020:	1e03      	subs	r3, r0, #0
 8003022:	d003      	beq.n	800302c <SPI_transmit_receive+0x30>
	{
		printf("Error SPI transmit\r\n");
 8003024:	4b05      	ldr	r3, [pc, #20]	; (800303c <SPI_transmit_receive+0x40>)
 8003026:	0018      	movs	r0, r3
 8003028:	f006 fade 	bl	80095e8 <puts>
	}
	return 0;
 800302c:	2300      	movs	r3, #0
}
 800302e:	0018      	movs	r0, r3
 8003030:	46bd      	mov	sp, r7
 8003032:	b005      	add	sp, #20
 8003034:	bd90      	pop	{r4, r7, pc}
 8003036:	46c0      	nop			; (mov r8, r8)
 8003038:	200002ec 	.word	0x200002ec
 800303c:	0800d1a8 	.word	0x0800d1a8

08003040 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8003040:	b580      	push	{r7, lr}
 8003042:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8003044:	f001 f89c 	bl	8004180 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8003048:	f000 f82e 	bl	80030a8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800304c:	f7ff fec4 	bl	8002dd8 <MX_GPIO_Init>
	MX_DMA_Init();
 8003050:	f7ff fea4 	bl	8002d9c <MX_DMA_Init>
	MX_ADC1_Init();
 8003054:	f7ff fdb6 	bl	8002bc4 <MX_ADC1_Init>
	MX_TIM1_Init();
 8003058:	f000 fa6c 	bl	8003534 <MX_TIM1_Init>
	MX_TIM3_Init();
 800305c:	f000 fad4 	bl	8003608 <MX_TIM3_Init>
	MX_TIM14_Init();
 8003060:	f000 fb72 	bl	8003748 <MX_TIM14_Init>
	MX_TIM15_Init();
 8003064:	f000 fbc0 	bl	80037e8 <MX_TIM15_Init>
	MX_TIM16_Init();
 8003068:	f000 fc62 	bl	8003930 <MX_TIM16_Init>
	MX_TIM17_Init();
 800306c:	f000 fce8 	bl	8003a40 <MX_TIM17_Init>
	MX_USART1_UART_Init();
 8003070:	f000 ff40 	bl	8003ef4 <MX_USART1_UART_Init>
	MX_USART4_UART_Init();
 8003074:	f000 ff8c 	bl	8003f90 <MX_USART4_UART_Init>
	MX_SPI1_Init();
 8003078:	f000 f876 	bl	8003168 <MX_SPI1_Init>
	MX_TIM6_Init();
 800307c:	f000 fb28 	bl	80036d0 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	h_IIM2070.SPI_drv.transmit_receive = SPI_transmit_receive; //Initialisation de la structure de la fonction de réception SPI
 8003080:	4b07      	ldr	r3, [pc, #28]	; (80030a0 <main+0x60>)
 8003082:	4a08      	ldr	r2, [pc, #32]	; (80030a4 <main+0x64>)
 8003084:	609a      	str	r2, [r3, #8]
	//IIM2070_init(&h_IIM2070);
	HAL_Delay(20);
 8003086:	2014      	movs	r0, #20
 8003088:	f001 f900 	bl	800428c <HAL_Delay>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		/* USER CODE END WHILE */
		IIM2070_Read_Gyro(&h_IIM2070);
 800308c:	4b04      	ldr	r3, [pc, #16]	; (80030a0 <main+0x60>)
 800308e:	0018      	movs	r0, r3
 8003090:	f7ff fc64 	bl	800295c <IIM2070_Read_Gyro>
		HAL_Delay(1000);
 8003094:	23fa      	movs	r3, #250	; 0xfa
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	0018      	movs	r0, r3
 800309a:	f001 f8f7 	bl	800428c <HAL_Delay>
		IIM2070_Read_Gyro(&h_IIM2070);
 800309e:	e7f5      	b.n	800308c <main+0x4c>
 80030a0:	200002b8 	.word	0x200002b8
 80030a4:	08002ffd 	.word	0x08002ffd

080030a8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80030a8:	b590      	push	{r4, r7, lr}
 80030aa:	b093      	sub	sp, #76	; 0x4c
 80030ac:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80030ae:	2414      	movs	r4, #20
 80030b0:	193b      	adds	r3, r7, r4
 80030b2:	0018      	movs	r0, r3
 80030b4:	2334      	movs	r3, #52	; 0x34
 80030b6:	001a      	movs	r2, r3
 80030b8:	2100      	movs	r1, #0
 80030ba:	f006 fbb1 	bl	8009820 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80030be:	1d3b      	adds	r3, r7, #4
 80030c0:	0018      	movs	r0, r3
 80030c2:	2310      	movs	r3, #16
 80030c4:	001a      	movs	r2, r3
 80030c6:	2100      	movs	r1, #0
 80030c8:	f006 fbaa 	bl	8009820 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80030cc:	2380      	movs	r3, #128	; 0x80
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	0018      	movs	r0, r3
 80030d2:	f002 f9bd 	bl	8005450 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80030d6:	193b      	adds	r3, r7, r4
 80030d8:	2202      	movs	r2, #2
 80030da:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80030dc:	193b      	adds	r3, r7, r4
 80030de:	2280      	movs	r2, #128	; 0x80
 80030e0:	0052      	lsls	r2, r2, #1
 80030e2:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80030e4:	0021      	movs	r1, r4
 80030e6:	187b      	adds	r3, r7, r1
 80030e8:	2200      	movs	r2, #0
 80030ea:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80030ec:	187b      	adds	r3, r7, r1
 80030ee:	2240      	movs	r2, #64	; 0x40
 80030f0:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030f2:	187b      	adds	r3, r7, r1
 80030f4:	2202      	movs	r2, #2
 80030f6:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80030f8:	187b      	adds	r3, r7, r1
 80030fa:	2202      	movs	r2, #2
 80030fc:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80030fe:	187b      	adds	r3, r7, r1
 8003100:	2200      	movs	r2, #0
 8003102:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 8003104:	187b      	adds	r3, r7, r1
 8003106:	2208      	movs	r2, #8
 8003108:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800310a:	187b      	adds	r3, r7, r1
 800310c:	2280      	movs	r2, #128	; 0x80
 800310e:	0292      	lsls	r2, r2, #10
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003112:	187b      	adds	r3, r7, r1
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	0592      	lsls	r2, r2, #22
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800311a:	187b      	adds	r3, r7, r1
 800311c:	0018      	movs	r0, r3
 800311e:	f002 f9e3 	bl	80054e8 <HAL_RCC_OscConfig>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <SystemClock_Config+0x82>
	{
		Error_Handler();
 8003126:	f000 f819 	bl	800315c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800312a:	1d3b      	adds	r3, r7, #4
 800312c:	2207      	movs	r2, #7
 800312e:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003130:	1d3b      	adds	r3, r7, #4
 8003132:	2202      	movs	r2, #2
 8003134:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	2200      	movs	r2, #0
 800313a:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800313c:	1d3b      	adds	r3, r7, #4
 800313e:	2200      	movs	r2, #0
 8003140:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8003142:	1d3b      	adds	r3, r7, #4
 8003144:	2102      	movs	r1, #2
 8003146:	0018      	movs	r0, r3
 8003148:	f002 fcde 	bl	8005b08 <HAL_RCC_ClockConfig>
 800314c:	1e03      	subs	r3, r0, #0
 800314e:	d001      	beq.n	8003154 <SystemClock_Config+0xac>
	{
		Error_Handler();
 8003150:	f000 f804 	bl	800315c <Error_Handler>
	}
}
 8003154:	46c0      	nop			; (mov r8, r8)
 8003156:	46bd      	mov	sp, r7
 8003158:	b013      	add	sp, #76	; 0x4c
 800315a:	bd90      	pop	{r4, r7, pc}

0800315c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800315c:	b580      	push	{r7, lr}
 800315e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003160:	b672      	cpsid	i
}
 8003162:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003164:	e7fe      	b.n	8003164 <Error_Handler+0x8>
	...

08003168 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <MX_SPI1_Init+0x74>)
 800316e:	4a1c      	ldr	r2, [pc, #112]	; (80031e0 <MX_SPI1_Init+0x78>)
 8003170:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003172:	4b1a      	ldr	r3, [pc, #104]	; (80031dc <MX_SPI1_Init+0x74>)
 8003174:	2282      	movs	r2, #130	; 0x82
 8003176:	0052      	lsls	r2, r2, #1
 8003178:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800317a:	4b18      	ldr	r3, [pc, #96]	; (80031dc <MX_SPI1_Init+0x74>)
 800317c:	2200      	movs	r2, #0
 800317e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003180:	4b16      	ldr	r3, [pc, #88]	; (80031dc <MX_SPI1_Init+0x74>)
 8003182:	22e0      	movs	r2, #224	; 0xe0
 8003184:	00d2      	lsls	r2, r2, #3
 8003186:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003188:	4b14      	ldr	r3, [pc, #80]	; (80031dc <MX_SPI1_Init+0x74>)
 800318a:	2200      	movs	r2, #0
 800318c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800318e:	4b13      	ldr	r3, [pc, #76]	; (80031dc <MX_SPI1_Init+0x74>)
 8003190:	2200      	movs	r2, #0
 8003192:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003194:	4b11      	ldr	r3, [pc, #68]	; (80031dc <MX_SPI1_Init+0x74>)
 8003196:	2280      	movs	r2, #128	; 0x80
 8003198:	0092      	lsls	r2, r2, #2
 800319a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800319c:	4b0f      	ldr	r3, [pc, #60]	; (80031dc <MX_SPI1_Init+0x74>)
 800319e:	2210      	movs	r2, #16
 80031a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80031a2:	4b0e      	ldr	r3, [pc, #56]	; (80031dc <MX_SPI1_Init+0x74>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80031a8:	4b0c      	ldr	r3, [pc, #48]	; (80031dc <MX_SPI1_Init+0x74>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <MX_SPI1_Init+0x74>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80031b4:	4b09      	ldr	r3, [pc, #36]	; (80031dc <MX_SPI1_Init+0x74>)
 80031b6:	2207      	movs	r2, #7
 80031b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80031ba:	4b08      	ldr	r3, [pc, #32]	; (80031dc <MX_SPI1_Init+0x74>)
 80031bc:	2200      	movs	r2, #0
 80031be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80031c0:	4b06      	ldr	r3, [pc, #24]	; (80031dc <MX_SPI1_Init+0x74>)
 80031c2:	2200      	movs	r2, #0
 80031c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80031c6:	4b05      	ldr	r3, [pc, #20]	; (80031dc <MX_SPI1_Init+0x74>)
 80031c8:	0018      	movs	r0, r3
 80031ca:	f002 ff79 	bl	80060c0 <HAL_SPI_Init>
 80031ce:	1e03      	subs	r3, r0, #0
 80031d0:	d001      	beq.n	80031d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80031d2:	f7ff ffc3 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80031d6:	46c0      	nop			; (mov r8, r8)
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200002ec 	.word	0x200002ec
 80031e0:	40013000 	.word	0x40013000

080031e4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80031e4:	b590      	push	{r4, r7, lr}
 80031e6:	b08b      	sub	sp, #44	; 0x2c
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	2414      	movs	r4, #20
 80031ee:	193b      	adds	r3, r7, r4
 80031f0:	0018      	movs	r0, r3
 80031f2:	2314      	movs	r3, #20
 80031f4:	001a      	movs	r2, r3
 80031f6:	2100      	movs	r1, #0
 80031f8:	f006 fb12 	bl	8009820 <memset>
  if(spiHandle->Instance==SPI1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a1b      	ldr	r2, [pc, #108]	; (8003270 <HAL_SPI_MspInit+0x8c>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d130      	bne.n	8003268 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003206:	4b1b      	ldr	r3, [pc, #108]	; (8003274 <HAL_SPI_MspInit+0x90>)
 8003208:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800320a:	4b1a      	ldr	r3, [pc, #104]	; (8003274 <HAL_SPI_MspInit+0x90>)
 800320c:	2180      	movs	r1, #128	; 0x80
 800320e:	0149      	lsls	r1, r1, #5
 8003210:	430a      	orrs	r2, r1
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
 8003214:	4b17      	ldr	r3, [pc, #92]	; (8003274 <HAL_SPI_MspInit+0x90>)
 8003216:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003218:	2380      	movs	r3, #128	; 0x80
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	4013      	ands	r3, r2
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_SPI_MspInit+0x90>)
 8003224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003226:	4b13      	ldr	r3, [pc, #76]	; (8003274 <HAL_SPI_MspInit+0x90>)
 8003228:	2101      	movs	r1, #1
 800322a:	430a      	orrs	r2, r1
 800322c:	635a      	str	r2, [r3, #52]	; 0x34
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_SPI_MspInit+0x90>)
 8003230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003232:	2201      	movs	r2, #1
 8003234:	4013      	ands	r3, r2
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_11;
 800323a:	0021      	movs	r1, r4
 800323c:	187b      	adds	r3, r7, r1
 800323e:	4a0e      	ldr	r2, [pc, #56]	; (8003278 <HAL_SPI_MspInit+0x94>)
 8003240:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	187b      	adds	r3, r7, r1
 8003244:	2202      	movs	r2, #2
 8003246:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	187b      	adds	r3, r7, r1
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324e:	187b      	adds	r3, r7, r1
 8003250:	2200      	movs	r2, #0
 8003252:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8003254:	187b      	adds	r3, r7, r1
 8003256:	2200      	movs	r2, #0
 8003258:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800325a:	187a      	adds	r2, r7, r1
 800325c:	23a0      	movs	r3, #160	; 0xa0
 800325e:	05db      	lsls	r3, r3, #23
 8003260:	0011      	movs	r1, r2
 8003262:	0018      	movs	r0, r3
 8003264:	f001 ff34 	bl	80050d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003268:	46c0      	nop			; (mov r8, r8)
 800326a:	46bd      	mov	sp, r7
 800326c:	b00b      	add	sp, #44	; 0x2c
 800326e:	bd90      	pop	{r4, r7, pc}
 8003270:	40013000 	.word	0x40013000
 8003274:	40021000 	.word	0x40021000
 8003278:	00000824 	.word	0x00000824

0800327c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003282:	4b11      	ldr	r3, [pc, #68]	; (80032c8 <HAL_MspInit+0x4c>)
 8003284:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003286:	4b10      	ldr	r3, [pc, #64]	; (80032c8 <HAL_MspInit+0x4c>)
 8003288:	2101      	movs	r1, #1
 800328a:	430a      	orrs	r2, r1
 800328c:	641a      	str	r2, [r3, #64]	; 0x40
 800328e:	4b0e      	ldr	r3, [pc, #56]	; (80032c8 <HAL_MspInit+0x4c>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	2201      	movs	r2, #1
 8003294:	4013      	ands	r3, r2
 8003296:	607b      	str	r3, [r7, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800329a:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <HAL_MspInit+0x4c>)
 800329c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800329e:	4b0a      	ldr	r3, [pc, #40]	; (80032c8 <HAL_MspInit+0x4c>)
 80032a0:	2180      	movs	r1, #128	; 0x80
 80032a2:	0549      	lsls	r1, r1, #21
 80032a4:	430a      	orrs	r2, r1
 80032a6:	63da      	str	r2, [r3, #60]	; 0x3c
 80032a8:	4b07      	ldr	r3, [pc, #28]	; (80032c8 <HAL_MspInit+0x4c>)
 80032aa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032ac:	2380      	movs	r3, #128	; 0x80
 80032ae:	055b      	lsls	r3, r3, #21
 80032b0:	4013      	ands	r3, r2
 80032b2:	603b      	str	r3, [r7, #0]
 80032b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80032b6:	23c0      	movs	r3, #192	; 0xc0
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	0018      	movs	r0, r3
 80032bc:	f001 f80a 	bl	80042d4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80032c0:	46c0      	nop			; (mov r8, r8)
 80032c2:	46bd      	mov	sp, r7
 80032c4:	b002      	add	sp, #8
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	40021000 	.word	0x40021000

080032cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80032d0:	e7fe      	b.n	80032d0 <NMI_Handler+0x4>

080032d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80032d6:	e7fe      	b.n	80032d6 <HardFault_Handler+0x4>

080032d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}

080032e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80032e2:	b580      	push	{r7, lr}
 80032e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032f0:	f000 ffb0 	bl	8004254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}

080032fa <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton1_Pin);
 80032fe:	2001      	movs	r0, #1
 8003300:	f002 f868 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8003304:	46c0      	nop			; (mov r8, r8)
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton2_Pin);
 800330e:	2008      	movs	r0, #8
 8003310:	f002 f860 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8003314:	46c0      	nop			; (mov r8, r8)
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 800331a:	b580      	push	{r7, lr}
 800331c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton3_Pin);
 800331e:	2010      	movs	r0, #16
 8003320:	f002 f858 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact4_Pin);
 8003324:	2020      	movs	r0, #32
 8003326:	f002 f855 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure1_Pin);
 800332a:	2380      	movs	r3, #128	; 0x80
 800332c:	005b      	lsls	r3, r3, #1
 800332e:	0018      	movs	r0, r3
 8003330:	f002 f850 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure2_Pin);
 8003334:	2380      	movs	r3, #128	; 0x80
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	0018      	movs	r0, r3
 800333a:	f002 f84b 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact1_Pin);
 800333e:	2380      	movs	r3, #128	; 0x80
 8003340:	019b      	lsls	r3, r3, #6
 8003342:	0018      	movs	r0, r3
 8003344:	f002 f846 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact2_Pin);
 8003348:	2380      	movs	r3, #128	; 0x80
 800334a:	01db      	lsls	r3, r3, #7
 800334c:	0018      	movs	r0, r3
 800334e:	f002 f841 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact3_Pin);
 8003352:	2380      	movs	r3, #128	; 0x80
 8003354:	021b      	lsls	r3, r3, #8
 8003356:	0018      	movs	r0, r3
 8003358:	f002 f83c 	bl	80053d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800335c:	46c0      	nop			; (mov r8, r8)
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003368:	4b03      	ldr	r3, [pc, #12]	; (8003378 <DMA1_Channel1_IRQHandler+0x14>)
 800336a:	0018      	movs	r0, r3
 800336c:	f001 fdae 	bl	8004ecc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8003370:	46c0      	nop			; (mov r8, r8)
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	46c0      	nop			; (mov r8, r8)
 8003378:	2000025c 	.word	0x2000025c

0800337c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003380:	4b03      	ldr	r3, [pc, #12]	; (8003390 <TIM1_CC_IRQHandler+0x14>)
 8003382:	0018      	movs	r0, r3
 8003384:	f003 fd4c 	bl	8006e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8003388:	46c0      	nop			; (mov r8, r8)
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	46c0      	nop			; (mov r8, r8)
 8003390:	20000354 	.word	0x20000354

08003394 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003398:	4b03      	ldr	r3, [pc, #12]	; (80033a8 <TIM3_IRQHandler+0x14>)
 800339a:	0018      	movs	r0, r3
 800339c:	f003 fd40 	bl	8006e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80033a0:	46c0      	nop			; (mov r8, r8)
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	46c0      	nop			; (mov r8, r8)
 80033a8:	200003a0 	.word	0x200003a0

080033ac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	af00      	add	r7, sp, #0
  return 1;
 80033b0:	2301      	movs	r3, #1
}
 80033b2:	0018      	movs	r0, r3
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}

080033b8 <_kill>:

int _kill(int pid, int sig)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80033c2:	f006 fa87 	bl	80098d4 <__errno>
 80033c6:	0003      	movs	r3, r0
 80033c8:	2216      	movs	r2, #22
 80033ca:	601a      	str	r2, [r3, #0]
  return -1;
 80033cc:	2301      	movs	r3, #1
 80033ce:	425b      	negs	r3, r3
}
 80033d0:	0018      	movs	r0, r3
 80033d2:	46bd      	mov	sp, r7
 80033d4:	b002      	add	sp, #8
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <_exit>:

void _exit (int status)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b082      	sub	sp, #8
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80033e0:	2301      	movs	r3, #1
 80033e2:	425a      	negs	r2, r3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	0011      	movs	r1, r2
 80033e8:	0018      	movs	r0, r3
 80033ea:	f7ff ffe5 	bl	80033b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80033ee:	e7fe      	b.n	80033ee <_exit+0x16>

080033f0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	60f8      	str	r0, [r7, #12]
 80033f8:	60b9      	str	r1, [r7, #8]
 80033fa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80033fc:	2300      	movs	r3, #0
 80033fe:	617b      	str	r3, [r7, #20]
 8003400:	e00a      	b.n	8003418 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003402:	e000      	b.n	8003406 <_read+0x16>
 8003404:	bf00      	nop
 8003406:	0001      	movs	r1, r0
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	1c5a      	adds	r2, r3, #1
 800340c:	60ba      	str	r2, [r7, #8]
 800340e:	b2ca      	uxtb	r2, r1
 8003410:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	3301      	adds	r3, #1
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697a      	ldr	r2, [r7, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	429a      	cmp	r2, r3
 800341e:	dbf0      	blt.n	8003402 <_read+0x12>
  }

  return len;
 8003420:	687b      	ldr	r3, [r7, #4]
}
 8003422:	0018      	movs	r0, r3
 8003424:	46bd      	mov	sp, r7
 8003426:	b006      	add	sp, #24
 8003428:	bd80      	pop	{r7, pc}

0800342a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800342a:	b580      	push	{r7, lr}
 800342c:	b086      	sub	sp, #24
 800342e:	af00      	add	r7, sp, #0
 8003430:	60f8      	str	r0, [r7, #12]
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	e009      	b.n	8003450 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	1c5a      	adds	r2, r3, #1
 8003440:	60ba      	str	r2, [r7, #8]
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	0018      	movs	r0, r3
 8003446:	f7ff fdc7 	bl	8002fd8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800344a:	697b      	ldr	r3, [r7, #20]
 800344c:	3301      	adds	r3, #1
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	697a      	ldr	r2, [r7, #20]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	429a      	cmp	r2, r3
 8003456:	dbf1      	blt.n	800343c <_write+0x12>
  }
  return len;
 8003458:	687b      	ldr	r3, [r7, #4]
}
 800345a:	0018      	movs	r0, r3
 800345c:	46bd      	mov	sp, r7
 800345e:	b006      	add	sp, #24
 8003460:	bd80      	pop	{r7, pc}

08003462 <_close>:

int _close(int file)
{
 8003462:	b580      	push	{r7, lr}
 8003464:	b082      	sub	sp, #8
 8003466:	af00      	add	r7, sp, #0
 8003468:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800346a:	2301      	movs	r3, #1
 800346c:	425b      	negs	r3, r3
}
 800346e:	0018      	movs	r0, r3
 8003470:	46bd      	mov	sp, r7
 8003472:	b002      	add	sp, #8
 8003474:	bd80      	pop	{r7, pc}

08003476 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003476:	b580      	push	{r7, lr}
 8003478:	b082      	sub	sp, #8
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	2280      	movs	r2, #128	; 0x80
 8003484:	0192      	lsls	r2, r2, #6
 8003486:	605a      	str	r2, [r3, #4]
  return 0;
 8003488:	2300      	movs	r3, #0
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}

08003492 <_isatty>:

int _isatty(int file)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b082      	sub	sp, #8
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800349a:	2301      	movs	r3, #1
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b002      	add	sp, #8
 80034a2:	bd80      	pop	{r7, pc}

080034a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80034a4:	b580      	push	{r7, lr}
 80034a6:	b084      	sub	sp, #16
 80034a8:	af00      	add	r7, sp, #0
 80034aa:	60f8      	str	r0, [r7, #12]
 80034ac:	60b9      	str	r1, [r7, #8]
 80034ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	b004      	add	sp, #16
 80034b8:	bd80      	pop	{r7, pc}
	...

080034bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80034c4:	4a14      	ldr	r2, [pc, #80]	; (8003518 <_sbrk+0x5c>)
 80034c6:	4b15      	ldr	r3, [pc, #84]	; (800351c <_sbrk+0x60>)
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80034d0:	4b13      	ldr	r3, [pc, #76]	; (8003520 <_sbrk+0x64>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d102      	bne.n	80034de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80034d8:	4b11      	ldr	r3, [pc, #68]	; (8003520 <_sbrk+0x64>)
 80034da:	4a12      	ldr	r2, [pc, #72]	; (8003524 <_sbrk+0x68>)
 80034dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80034de:	4b10      	ldr	r3, [pc, #64]	; (8003520 <_sbrk+0x64>)
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	18d3      	adds	r3, r2, r3
 80034e6:	693a      	ldr	r2, [r7, #16]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	d207      	bcs.n	80034fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80034ec:	f006 f9f2 	bl	80098d4 <__errno>
 80034f0:	0003      	movs	r3, r0
 80034f2:	220c      	movs	r2, #12
 80034f4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80034f6:	2301      	movs	r3, #1
 80034f8:	425b      	negs	r3, r3
 80034fa:	e009      	b.n	8003510 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80034fc:	4b08      	ldr	r3, [pc, #32]	; (8003520 <_sbrk+0x64>)
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003502:	4b07      	ldr	r3, [pc, #28]	; (8003520 <_sbrk+0x64>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	18d2      	adds	r2, r2, r3
 800350a:	4b05      	ldr	r3, [pc, #20]	; (8003520 <_sbrk+0x64>)
 800350c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800350e:	68fb      	ldr	r3, [r7, #12]
}
 8003510:	0018      	movs	r0, r3
 8003512:	46bd      	mov	sp, r7
 8003514:	b006      	add	sp, #24
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20009000 	.word	0x20009000
 800351c:	00000400 	.word	0x00000400
 8003520:	20000350 	.word	0x20000350
 8003524:	200007e0 	.word	0x200007e0

08003528 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800352c:	46c0      	nop			; (mov r8, r8)
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
	...

08003534 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003534:	b590      	push	{r4, r7, lr}
 8003536:	b08d      	sub	sp, #52	; 0x34
 8003538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800353a:	240c      	movs	r4, #12
 800353c:	193b      	adds	r3, r7, r4
 800353e:	0018      	movs	r0, r3
 8003540:	2324      	movs	r3, #36	; 0x24
 8003542:	001a      	movs	r2, r3
 8003544:	2100      	movs	r1, #0
 8003546:	f006 f96b 	bl	8009820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800354a:	003b      	movs	r3, r7
 800354c:	0018      	movs	r0, r3
 800354e:	230c      	movs	r3, #12
 8003550:	001a      	movs	r2, r3
 8003552:	2100      	movs	r1, #0
 8003554:	f006 f964 	bl	8009820 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8003558:	4b28      	ldr	r3, [pc, #160]	; (80035fc <MX_TIM1_Init+0xc8>)
 800355a:	4a29      	ldr	r2, [pc, #164]	; (8003600 <MX_TIM1_Init+0xcc>)
 800355c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800355e:	4b27      	ldr	r3, [pc, #156]	; (80035fc <MX_TIM1_Init+0xc8>)
 8003560:	2200      	movs	r2, #0
 8003562:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003564:	4b25      	ldr	r3, [pc, #148]	; (80035fc <MX_TIM1_Init+0xc8>)
 8003566:	2200      	movs	r2, #0
 8003568:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800356a:	4b24      	ldr	r3, [pc, #144]	; (80035fc <MX_TIM1_Init+0xc8>)
 800356c:	4a25      	ldr	r2, [pc, #148]	; (8003604 <MX_TIM1_Init+0xd0>)
 800356e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003570:	4b22      	ldr	r3, [pc, #136]	; (80035fc <MX_TIM1_Init+0xc8>)
 8003572:	2200      	movs	r2, #0
 8003574:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8003576:	4b21      	ldr	r3, [pc, #132]	; (80035fc <MX_TIM1_Init+0xc8>)
 8003578:	2200      	movs	r2, #0
 800357a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800357c:	4b1f      	ldr	r3, [pc, #124]	; (80035fc <MX_TIM1_Init+0xc8>)
 800357e:	2200      	movs	r2, #0
 8003580:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003582:	0021      	movs	r1, r4
 8003584:	187b      	adds	r3, r7, r1
 8003586:	2203      	movs	r2, #3
 8003588:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800358a:	187b      	adds	r3, r7, r1
 800358c:	2202      	movs	r2, #2
 800358e:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8003590:	187b      	adds	r3, r7, r1
 8003592:	2201      	movs	r2, #1
 8003594:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003596:	187b      	adds	r3, r7, r1
 8003598:	2200      	movs	r2, #0
 800359a:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800359c:	187b      	adds	r3, r7, r1
 800359e:	2200      	movs	r2, #0
 80035a0:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80035a2:	187b      	adds	r3, r7, r1
 80035a4:	2202      	movs	r2, #2
 80035a6:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80035a8:	187b      	adds	r3, r7, r1
 80035aa:	2201      	movs	r2, #1
 80035ac:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80035ae:	187b      	adds	r3, r7, r1
 80035b0:	2200      	movs	r2, #0
 80035b2:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80035b4:	187b      	adds	r3, r7, r1
 80035b6:	2200      	movs	r2, #0
 80035b8:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80035ba:	187a      	adds	r2, r7, r1
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <MX_TIM1_Init+0xc8>)
 80035be:	0011      	movs	r1, r2
 80035c0:	0018      	movs	r0, r3
 80035c2:	f003 fb85 	bl	8006cd0 <HAL_TIM_Encoder_Init>
 80035c6:	1e03      	subs	r3, r0, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 80035ca:	f7ff fdc7 	bl	800315c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035ce:	003b      	movs	r3, r7
 80035d0:	2200      	movs	r2, #0
 80035d2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80035d4:	003b      	movs	r3, r7
 80035d6:	2200      	movs	r2, #0
 80035d8:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035da:	003b      	movs	r3, r7
 80035dc:	2200      	movs	r2, #0
 80035de:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80035e0:	003a      	movs	r2, r7
 80035e2:	4b06      	ldr	r3, [pc, #24]	; (80035fc <MX_TIM1_Init+0xc8>)
 80035e4:	0011      	movs	r1, r2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f004 f9ae 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 80035ec:	1e03      	subs	r3, r0, #0
 80035ee:	d001      	beq.n	80035f4 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 80035f0:	f7ff fdb4 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80035f4:	46c0      	nop			; (mov r8, r8)
 80035f6:	46bd      	mov	sp, r7
 80035f8:	b00d      	add	sp, #52	; 0x34
 80035fa:	bd90      	pop	{r4, r7, pc}
 80035fc:	20000354 	.word	0x20000354
 8003600:	40012c00 	.word	0x40012c00
 8003604:	0000ffff 	.word	0x0000ffff

08003608 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b08d      	sub	sp, #52	; 0x34
 800360c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800360e:	240c      	movs	r4, #12
 8003610:	193b      	adds	r3, r7, r4
 8003612:	0018      	movs	r0, r3
 8003614:	2324      	movs	r3, #36	; 0x24
 8003616:	001a      	movs	r2, r3
 8003618:	2100      	movs	r1, #0
 800361a:	f006 f901 	bl	8009820 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800361e:	003b      	movs	r3, r7
 8003620:	0018      	movs	r0, r3
 8003622:	230c      	movs	r3, #12
 8003624:	001a      	movs	r2, r3
 8003626:	2100      	movs	r1, #0
 8003628:	f006 f8fa 	bl	8009820 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800362c:	4b25      	ldr	r3, [pc, #148]	; (80036c4 <MX_TIM3_Init+0xbc>)
 800362e:	4a26      	ldr	r2, [pc, #152]	; (80036c8 <MX_TIM3_Init+0xc0>)
 8003630:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8003632:	4b24      	ldr	r3, [pc, #144]	; (80036c4 <MX_TIM3_Init+0xbc>)
 8003634:	2200      	movs	r2, #0
 8003636:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003638:	4b22      	ldr	r3, [pc, #136]	; (80036c4 <MX_TIM3_Init+0xbc>)
 800363a:	2200      	movs	r2, #0
 800363c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800363e:	4b21      	ldr	r3, [pc, #132]	; (80036c4 <MX_TIM3_Init+0xbc>)
 8003640:	4a22      	ldr	r2, [pc, #136]	; (80036cc <MX_TIM3_Init+0xc4>)
 8003642:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003644:	4b1f      	ldr	r3, [pc, #124]	; (80036c4 <MX_TIM3_Init+0xbc>)
 8003646:	2200      	movs	r2, #0
 8003648:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800364a:	4b1e      	ldr	r3, [pc, #120]	; (80036c4 <MX_TIM3_Init+0xbc>)
 800364c:	2200      	movs	r2, #0
 800364e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8003650:	0021      	movs	r1, r4
 8003652:	187b      	adds	r3, r7, r1
 8003654:	2203      	movs	r2, #3
 8003656:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8003658:	187b      	adds	r3, r7, r1
 800365a:	2202      	movs	r2, #2
 800365c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800365e:	187b      	adds	r3, r7, r1
 8003660:	2201      	movs	r2, #1
 8003662:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8003664:	187b      	adds	r3, r7, r1
 8003666:	2200      	movs	r2, #0
 8003668:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 800366a:	187b      	adds	r3, r7, r1
 800366c:	2200      	movs	r2, #0
 800366e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8003670:	187b      	adds	r3, r7, r1
 8003672:	2202      	movs	r2, #2
 8003674:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8003676:	187b      	adds	r3, r7, r1
 8003678:	2201      	movs	r2, #1
 800367a:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800367c:	187b      	adds	r3, r7, r1
 800367e:	2200      	movs	r2, #0
 8003680:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8003682:	187b      	adds	r3, r7, r1
 8003684:	2200      	movs	r2, #0
 8003686:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8003688:	187a      	adds	r2, r7, r1
 800368a:	4b0e      	ldr	r3, [pc, #56]	; (80036c4 <MX_TIM3_Init+0xbc>)
 800368c:	0011      	movs	r1, r2
 800368e:	0018      	movs	r0, r3
 8003690:	f003 fb1e 	bl	8006cd0 <HAL_TIM_Encoder_Init>
 8003694:	1e03      	subs	r3, r0, #0
 8003696:	d001      	beq.n	800369c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8003698:	f7ff fd60 	bl	800315c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800369c:	003b      	movs	r3, r7
 800369e:	2200      	movs	r2, #0
 80036a0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036a2:	003b      	movs	r3, r7
 80036a4:	2200      	movs	r2, #0
 80036a6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80036a8:	003a      	movs	r2, r7
 80036aa:	4b06      	ldr	r3, [pc, #24]	; (80036c4 <MX_TIM3_Init+0xbc>)
 80036ac:	0011      	movs	r1, r2
 80036ae:	0018      	movs	r0, r3
 80036b0:	f004 f94a 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 80036b4:	1e03      	subs	r3, r0, #0
 80036b6:	d001      	beq.n	80036bc <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 80036b8:	f7ff fd50 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80036bc:	46c0      	nop			; (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	b00d      	add	sp, #52	; 0x34
 80036c2:	bd90      	pop	{r4, r7, pc}
 80036c4:	200003a0 	.word	0x200003a0
 80036c8:	40000400 	.word	0x40000400
 80036cc:	0000ffff 	.word	0x0000ffff

080036d0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036d6:	1d3b      	adds	r3, r7, #4
 80036d8:	0018      	movs	r0, r3
 80036da:	230c      	movs	r3, #12
 80036dc:	001a      	movs	r2, r3
 80036de:	2100      	movs	r1, #0
 80036e0:	f006 f89e 	bl	8009820 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80036e4:	4b15      	ldr	r3, [pc, #84]	; (800373c <MX_TIM6_Init+0x6c>)
 80036e6:	4a16      	ldr	r2, [pc, #88]	; (8003740 <MX_TIM6_Init+0x70>)
 80036e8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 80036ea:	4b14      	ldr	r3, [pc, #80]	; (800373c <MX_TIM6_Init+0x6c>)
 80036ec:	4a15      	ldr	r2, [pc, #84]	; (8003744 <MX_TIM6_Init+0x74>)
 80036ee:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80036f0:	4b12      	ldr	r3, [pc, #72]	; (800373c <MX_TIM6_Init+0x6c>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80036f6:	4b11      	ldr	r3, [pc, #68]	; (800373c <MX_TIM6_Init+0x6c>)
 80036f8:	2263      	movs	r2, #99	; 0x63
 80036fa:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80036fc:	4b0f      	ldr	r3, [pc, #60]	; (800373c <MX_TIM6_Init+0x6c>)
 80036fe:	2200      	movs	r2, #0
 8003700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003702:	4b0e      	ldr	r3, [pc, #56]	; (800373c <MX_TIM6_Init+0x6c>)
 8003704:	0018      	movs	r0, r3
 8003706:	f003 fa33 	bl	8006b70 <HAL_TIM_Base_Init>
 800370a:	1e03      	subs	r3, r0, #0
 800370c:	d001      	beq.n	8003712 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800370e:	f7ff fd25 	bl	800315c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003712:	1d3b      	adds	r3, r7, #4
 8003714:	2220      	movs	r2, #32
 8003716:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003718:	1d3b      	adds	r3, r7, #4
 800371a:	2200      	movs	r2, #0
 800371c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800371e:	1d3a      	adds	r2, r7, #4
 8003720:	4b06      	ldr	r3, [pc, #24]	; (800373c <MX_TIM6_Init+0x6c>)
 8003722:	0011      	movs	r1, r2
 8003724:	0018      	movs	r0, r3
 8003726:	f004 f90f 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 800372a:	1e03      	subs	r3, r0, #0
 800372c:	d001      	beq.n	8003732 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800372e:	f7ff fd15 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003732:	46c0      	nop			; (mov r8, r8)
 8003734:	46bd      	mov	sp, r7
 8003736:	b004      	add	sp, #16
 8003738:	bd80      	pop	{r7, pc}
 800373a:	46c0      	nop			; (mov r8, r8)
 800373c:	200003ec 	.word	0x200003ec
 8003740:	40001000 	.word	0x40001000
 8003744:	0000f9ff 	.word	0x0000f9ff

08003748 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b088      	sub	sp, #32
 800374c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800374e:	1d3b      	adds	r3, r7, #4
 8003750:	0018      	movs	r0, r3
 8003752:	231c      	movs	r3, #28
 8003754:	001a      	movs	r2, r3
 8003756:	2100      	movs	r1, #0
 8003758:	f006 f862 	bl	8009820 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800375c:	4b1f      	ldr	r3, [pc, #124]	; (80037dc <MX_TIM14_Init+0x94>)
 800375e:	4a20      	ldr	r2, [pc, #128]	; (80037e0 <MX_TIM14_Init+0x98>)
 8003760:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8003762:	4b1e      	ldr	r3, [pc, #120]	; (80037dc <MX_TIM14_Init+0x94>)
 8003764:	2200      	movs	r2, #0
 8003766:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003768:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <MX_TIM14_Init+0x94>)
 800376a:	2200      	movs	r2, #0
 800376c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 800376e:	4b1b      	ldr	r3, [pc, #108]	; (80037dc <MX_TIM14_Init+0x94>)
 8003770:	4a1c      	ldr	r2, [pc, #112]	; (80037e4 <MX_TIM14_Init+0x9c>)
 8003772:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <MX_TIM14_Init+0x94>)
 8003776:	2200      	movs	r2, #0
 8003778:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800377a:	4b18      	ldr	r3, [pc, #96]	; (80037dc <MX_TIM14_Init+0x94>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8003780:	4b16      	ldr	r3, [pc, #88]	; (80037dc <MX_TIM14_Init+0x94>)
 8003782:	0018      	movs	r0, r3
 8003784:	f003 f9f4 	bl	8006b70 <HAL_TIM_Base_Init>
 8003788:	1e03      	subs	r3, r0, #0
 800378a:	d001      	beq.n	8003790 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 800378c:	f7ff fce6 	bl	800315c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8003790:	4b12      	ldr	r3, [pc, #72]	; (80037dc <MX_TIM14_Init+0x94>)
 8003792:	0018      	movs	r0, r3
 8003794:	f003 fa44 	bl	8006c20 <HAL_TIM_PWM_Init>
 8003798:	1e03      	subs	r3, r0, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 800379c:	f7ff fcde 	bl	800315c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80037a0:	1d3b      	adds	r3, r7, #4
 80037a2:	2260      	movs	r2, #96	; 0x60
 80037a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80037a6:	1d3b      	adds	r3, r7, #4
 80037a8:	2200      	movs	r2, #0
 80037aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80037ac:	1d3b      	adds	r3, r7, #4
 80037ae:	2200      	movs	r2, #0
 80037b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80037b2:	1d3b      	adds	r3, r7, #4
 80037b4:	2200      	movs	r2, #0
 80037b6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80037b8:	1d39      	adds	r1, r7, #4
 80037ba:	4b08      	ldr	r3, [pc, #32]	; (80037dc <MX_TIM14_Init+0x94>)
 80037bc:	2200      	movs	r2, #0
 80037be:	0018      	movs	r0, r3
 80037c0:	f003 fc60 	bl	8007084 <HAL_TIM_PWM_ConfigChannel>
 80037c4:	1e03      	subs	r3, r0, #0
 80037c6:	d001      	beq.n	80037cc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 80037c8:	f7ff fcc8 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <MX_TIM14_Init+0x94>)
 80037ce:	0018      	movs	r0, r3
 80037d0:	f000 fad2 	bl	8003d78 <HAL_TIM_MspPostInit>

}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	46bd      	mov	sp, r7
 80037d8:	b008      	add	sp, #32
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	20000438 	.word	0x20000438
 80037e0:	40002000 	.word	0x40002000
 80037e4:	0000ffff 	.word	0x0000ffff

080037e8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b098      	sub	sp, #96	; 0x60
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ee:	2354      	movs	r3, #84	; 0x54
 80037f0:	18fb      	adds	r3, r7, r3
 80037f2:	0018      	movs	r0, r3
 80037f4:	230c      	movs	r3, #12
 80037f6:	001a      	movs	r2, r3
 80037f8:	2100      	movs	r1, #0
 80037fa:	f006 f811 	bl	8009820 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80037fe:	2338      	movs	r3, #56	; 0x38
 8003800:	18fb      	adds	r3, r7, r3
 8003802:	0018      	movs	r0, r3
 8003804:	231c      	movs	r3, #28
 8003806:	001a      	movs	r2, r3
 8003808:	2100      	movs	r1, #0
 800380a:	f006 f809 	bl	8009820 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800380e:	1d3b      	adds	r3, r7, #4
 8003810:	0018      	movs	r0, r3
 8003812:	2334      	movs	r3, #52	; 0x34
 8003814:	001a      	movs	r2, r3
 8003816:	2100      	movs	r1, #0
 8003818:	f006 f802 	bl	8009820 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 800381c:	4b41      	ldr	r3, [pc, #260]	; (8003924 <MX_TIM15_Init+0x13c>)
 800381e:	4a42      	ldr	r2, [pc, #264]	; (8003928 <MX_TIM15_Init+0x140>)
 8003820:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 8003822:	4b40      	ldr	r3, [pc, #256]	; (8003924 <MX_TIM15_Init+0x13c>)
 8003824:	2213      	movs	r2, #19
 8003826:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003828:	4b3e      	ldr	r3, [pc, #248]	; (8003924 <MX_TIM15_Init+0x13c>)
 800382a:	2200      	movs	r2, #0
 800382c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 800382e:	4b3d      	ldr	r3, [pc, #244]	; (8003924 <MX_TIM15_Init+0x13c>)
 8003830:	4a3e      	ldr	r2, [pc, #248]	; (800392c <MX_TIM15_Init+0x144>)
 8003832:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003834:	4b3b      	ldr	r3, [pc, #236]	; (8003924 <MX_TIM15_Init+0x13c>)
 8003836:	2200      	movs	r2, #0
 8003838:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 800383a:	4b3a      	ldr	r3, [pc, #232]	; (8003924 <MX_TIM15_Init+0x13c>)
 800383c:	2200      	movs	r2, #0
 800383e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003840:	4b38      	ldr	r3, [pc, #224]	; (8003924 <MX_TIM15_Init+0x13c>)
 8003842:	2200      	movs	r2, #0
 8003844:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8003846:	4b37      	ldr	r3, [pc, #220]	; (8003924 <MX_TIM15_Init+0x13c>)
 8003848:	0018      	movs	r0, r3
 800384a:	f003 f9e9 	bl	8006c20 <HAL_TIM_PWM_Init>
 800384e:	1e03      	subs	r3, r0, #0
 8003850:	d001      	beq.n	8003856 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8003852:	f7ff fc83 	bl	800315c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003856:	2154      	movs	r1, #84	; 0x54
 8003858:	187b      	adds	r3, r7, r1
 800385a:	2200      	movs	r2, #0
 800385c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800385e:	187b      	adds	r3, r7, r1
 8003860:	2200      	movs	r2, #0
 8003862:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003864:	187a      	adds	r2, r7, r1
 8003866:	4b2f      	ldr	r3, [pc, #188]	; (8003924 <MX_TIM15_Init+0x13c>)
 8003868:	0011      	movs	r1, r2
 800386a:	0018      	movs	r0, r3
 800386c:	f004 f86c 	bl	8007948 <HAL_TIMEx_MasterConfigSynchronization>
 8003870:	1e03      	subs	r3, r0, #0
 8003872:	d001      	beq.n	8003878 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8003874:	f7ff fc72 	bl	800315c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003878:	2138      	movs	r1, #56	; 0x38
 800387a:	187b      	adds	r3, r7, r1
 800387c:	2260      	movs	r2, #96	; 0x60
 800387e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003880:	187b      	adds	r3, r7, r1
 8003882:	2200      	movs	r2, #0
 8003884:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003886:	187b      	adds	r3, r7, r1
 8003888:	2200      	movs	r2, #0
 800388a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800388c:	187b      	adds	r3, r7, r1
 800388e:	2200      	movs	r2, #0
 8003890:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003892:	187b      	adds	r3, r7, r1
 8003894:	2200      	movs	r2, #0
 8003896:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003898:	187b      	adds	r3, r7, r1
 800389a:	2200      	movs	r2, #0
 800389c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800389e:	187b      	adds	r3, r7, r1
 80038a0:	2200      	movs	r2, #0
 80038a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80038a4:	1879      	adds	r1, r7, r1
 80038a6:	4b1f      	ldr	r3, [pc, #124]	; (8003924 <MX_TIM15_Init+0x13c>)
 80038a8:	2200      	movs	r2, #0
 80038aa:	0018      	movs	r0, r3
 80038ac:	f003 fbea 	bl	8007084 <HAL_TIM_PWM_ConfigChannel>
 80038b0:	1e03      	subs	r3, r0, #0
 80038b2:	d001      	beq.n	80038b8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 80038b4:	f7ff fc52 	bl	800315c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80038b8:	2338      	movs	r3, #56	; 0x38
 80038ba:	18f9      	adds	r1, r7, r3
 80038bc:	4b19      	ldr	r3, [pc, #100]	; (8003924 <MX_TIM15_Init+0x13c>)
 80038be:	2204      	movs	r2, #4
 80038c0:	0018      	movs	r0, r3
 80038c2:	f003 fbdf 	bl	8007084 <HAL_TIM_PWM_ConfigChannel>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d001      	beq.n	80038ce <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 80038ca:	f7ff fc47 	bl	800315c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80038ce:	1d3b      	adds	r3, r7, #4
 80038d0:	2200      	movs	r2, #0
 80038d2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80038d4:	1d3b      	adds	r3, r7, #4
 80038d6:	2200      	movs	r2, #0
 80038d8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80038da:	1d3b      	adds	r3, r7, #4
 80038dc:	2200      	movs	r2, #0
 80038de:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80038e0:	1d3b      	adds	r3, r7, #4
 80038e2:	2200      	movs	r2, #0
 80038e4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80038e6:	1d3b      	adds	r3, r7, #4
 80038e8:	2200      	movs	r2, #0
 80038ea:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80038ec:	1d3b      	adds	r3, r7, #4
 80038ee:	2280      	movs	r2, #128	; 0x80
 80038f0:	0192      	lsls	r2, r2, #6
 80038f2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80038f4:	1d3b      	adds	r3, r7, #4
 80038f6:	2200      	movs	r2, #0
 80038f8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80038fa:	1d3b      	adds	r3, r7, #4
 80038fc:	2200      	movs	r2, #0
 80038fe:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8003900:	1d3a      	adds	r2, r7, #4
 8003902:	4b08      	ldr	r3, [pc, #32]	; (8003924 <MX_TIM15_Init+0x13c>)
 8003904:	0011      	movs	r1, r2
 8003906:	0018      	movs	r0, r3
 8003908:	f004 f886 	bl	8007a18 <HAL_TIMEx_ConfigBreakDeadTime>
 800390c:	1e03      	subs	r3, r0, #0
 800390e:	d001      	beq.n	8003914 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8003910:	f7ff fc24 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8003914:	4b03      	ldr	r3, [pc, #12]	; (8003924 <MX_TIM15_Init+0x13c>)
 8003916:	0018      	movs	r0, r3
 8003918:	f000 fa2e 	bl	8003d78 <HAL_TIM_MspPostInit>

}
 800391c:	46c0      	nop			; (mov r8, r8)
 800391e:	46bd      	mov	sp, r7
 8003920:	b018      	add	sp, #96	; 0x60
 8003922:	bd80      	pop	{r7, pc}
 8003924:	20000484 	.word	0x20000484
 8003928:	40014000 	.word	0x40014000
 800392c:	000003e7 	.word	0x000003e7

08003930 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b094      	sub	sp, #80	; 0x50
 8003934:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003936:	2334      	movs	r3, #52	; 0x34
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	0018      	movs	r0, r3
 800393c:	231c      	movs	r3, #28
 800393e:	001a      	movs	r2, r3
 8003940:	2100      	movs	r1, #0
 8003942:	f005 ff6d 	bl	8009820 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003946:	003b      	movs	r3, r7
 8003948:	0018      	movs	r0, r3
 800394a:	2334      	movs	r3, #52	; 0x34
 800394c:	001a      	movs	r2, r3
 800394e:	2100      	movs	r1, #0
 8003950:	f005 ff66 	bl	8009820 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8003954:	4b37      	ldr	r3, [pc, #220]	; (8003a34 <MX_TIM16_Init+0x104>)
 8003956:	4a38      	ldr	r2, [pc, #224]	; (8003a38 <MX_TIM16_Init+0x108>)
 8003958:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 800395a:	4b36      	ldr	r3, [pc, #216]	; (8003a34 <MX_TIM16_Init+0x104>)
 800395c:	2213      	movs	r2, #19
 800395e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003960:	4b34      	ldr	r3, [pc, #208]	; (8003a34 <MX_TIM16_Init+0x104>)
 8003962:	2200      	movs	r2, #0
 8003964:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8003966:	4b33      	ldr	r3, [pc, #204]	; (8003a34 <MX_TIM16_Init+0x104>)
 8003968:	4a34      	ldr	r2, [pc, #208]	; (8003a3c <MX_TIM16_Init+0x10c>)
 800396a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800396c:	4b31      	ldr	r3, [pc, #196]	; (8003a34 <MX_TIM16_Init+0x104>)
 800396e:	2200      	movs	r2, #0
 8003970:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8003972:	4b30      	ldr	r3, [pc, #192]	; (8003a34 <MX_TIM16_Init+0x104>)
 8003974:	2200      	movs	r2, #0
 8003976:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003978:	4b2e      	ldr	r3, [pc, #184]	; (8003a34 <MX_TIM16_Init+0x104>)
 800397a:	2200      	movs	r2, #0
 800397c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800397e:	4b2d      	ldr	r3, [pc, #180]	; (8003a34 <MX_TIM16_Init+0x104>)
 8003980:	0018      	movs	r0, r3
 8003982:	f003 f8f5 	bl	8006b70 <HAL_TIM_Base_Init>
 8003986:	1e03      	subs	r3, r0, #0
 8003988:	d001      	beq.n	800398e <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 800398a:	f7ff fbe7 	bl	800315c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800398e:	4b29      	ldr	r3, [pc, #164]	; (8003a34 <MX_TIM16_Init+0x104>)
 8003990:	0018      	movs	r0, r3
 8003992:	f003 f945 	bl	8006c20 <HAL_TIM_PWM_Init>
 8003996:	1e03      	subs	r3, r0, #0
 8003998:	d001      	beq.n	800399e <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 800399a:	f7ff fbdf 	bl	800315c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800399e:	2134      	movs	r1, #52	; 0x34
 80039a0:	187b      	adds	r3, r7, r1
 80039a2:	2260      	movs	r2, #96	; 0x60
 80039a4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80039a6:	187b      	adds	r3, r7, r1
 80039a8:	2200      	movs	r2, #0
 80039aa:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039ac:	187b      	adds	r3, r7, r1
 80039ae:	2200      	movs	r2, #0
 80039b0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80039b2:	187b      	adds	r3, r7, r1
 80039b4:	2200      	movs	r2, #0
 80039b6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039b8:	187b      	adds	r3, r7, r1
 80039ba:	2200      	movs	r2, #0
 80039bc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80039be:	187b      	adds	r3, r7, r1
 80039c0:	2200      	movs	r2, #0
 80039c2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80039c4:	187b      	adds	r3, r7, r1
 80039c6:	2200      	movs	r2, #0
 80039c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80039ca:	1879      	adds	r1, r7, r1
 80039cc:	4b19      	ldr	r3, [pc, #100]	; (8003a34 <MX_TIM16_Init+0x104>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	0018      	movs	r0, r3
 80039d2:	f003 fb57 	bl	8007084 <HAL_TIM_PWM_ConfigChannel>
 80039d6:	1e03      	subs	r3, r0, #0
 80039d8:	d001      	beq.n	80039de <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 80039da:	f7ff fbbf 	bl	800315c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80039de:	003b      	movs	r3, r7
 80039e0:	2200      	movs	r2, #0
 80039e2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80039e4:	003b      	movs	r3, r7
 80039e6:	2200      	movs	r2, #0
 80039e8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80039ea:	003b      	movs	r3, r7
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80039f0:	003b      	movs	r3, r7
 80039f2:	2200      	movs	r2, #0
 80039f4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80039f6:	003b      	movs	r3, r7
 80039f8:	2200      	movs	r2, #0
 80039fa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80039fc:	003b      	movs	r3, r7
 80039fe:	2280      	movs	r2, #128	; 0x80
 8003a00:	0192      	lsls	r2, r2, #6
 8003a02:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003a04:	003b      	movs	r3, r7
 8003a06:	2200      	movs	r2, #0
 8003a08:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003a0a:	003b      	movs	r3, r7
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8003a10:	003a      	movs	r2, r7
 8003a12:	4b08      	ldr	r3, [pc, #32]	; (8003a34 <MX_TIM16_Init+0x104>)
 8003a14:	0011      	movs	r1, r2
 8003a16:	0018      	movs	r0, r3
 8003a18:	f003 fffe 	bl	8007a18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003a1c:	1e03      	subs	r3, r0, #0
 8003a1e:	d001      	beq.n	8003a24 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8003a20:	f7ff fb9c 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8003a24:	4b03      	ldr	r3, [pc, #12]	; (8003a34 <MX_TIM16_Init+0x104>)
 8003a26:	0018      	movs	r0, r3
 8003a28:	f000 f9a6 	bl	8003d78 <HAL_TIM_MspPostInit>

}
 8003a2c:	46c0      	nop			; (mov r8, r8)
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	b014      	add	sp, #80	; 0x50
 8003a32:	bd80      	pop	{r7, pc}
 8003a34:	200004d0 	.word	0x200004d0
 8003a38:	40014400 	.word	0x40014400
 8003a3c:	000003e7 	.word	0x000003e7

08003a40 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b094      	sub	sp, #80	; 0x50
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8003a46:	2334      	movs	r3, #52	; 0x34
 8003a48:	18fb      	adds	r3, r7, r3
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	231c      	movs	r3, #28
 8003a4e:	001a      	movs	r2, r3
 8003a50:	2100      	movs	r1, #0
 8003a52:	f005 fee5 	bl	8009820 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003a56:	003b      	movs	r3, r7
 8003a58:	0018      	movs	r0, r3
 8003a5a:	2334      	movs	r3, #52	; 0x34
 8003a5c:	001a      	movs	r2, r3
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f005 fede 	bl	8009820 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8003a64:	4b37      	ldr	r3, [pc, #220]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003a66:	4a38      	ldr	r2, [pc, #224]	; (8003b48 <MX_TIM17_Init+0x108>)
 8003a68:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 8003a6a:	4b36      	ldr	r3, [pc, #216]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003a6c:	2213      	movs	r2, #19
 8003a6e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a70:	4b34      	ldr	r3, [pc, #208]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003a72:	2200      	movs	r2, #0
 8003a74:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8003a76:	4b33      	ldr	r3, [pc, #204]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003a78:	4a34      	ldr	r2, [pc, #208]	; (8003b4c <MX_TIM17_Init+0x10c>)
 8003a7a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a7c:	4b31      	ldr	r3, [pc, #196]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003a7e:	2200      	movs	r2, #0
 8003a80:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8003a82:	4b30      	ldr	r3, [pc, #192]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003a84:	2200      	movs	r2, #0
 8003a86:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a88:	4b2e      	ldr	r3, [pc, #184]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8003a8e:	4b2d      	ldr	r3, [pc, #180]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003a90:	0018      	movs	r0, r3
 8003a92:	f003 f86d 	bl	8006b70 <HAL_TIM_Base_Init>
 8003a96:	1e03      	subs	r3, r0, #0
 8003a98:	d001      	beq.n	8003a9e <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8003a9a:	f7ff fb5f 	bl	800315c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8003a9e:	4b29      	ldr	r3, [pc, #164]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003aa0:	0018      	movs	r0, r3
 8003aa2:	f003 f8bd 	bl	8006c20 <HAL_TIM_PWM_Init>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d001      	beq.n	8003aae <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8003aaa:	f7ff fb57 	bl	800315c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003aae:	2134      	movs	r1, #52	; 0x34
 8003ab0:	187b      	adds	r3, r7, r1
 8003ab2:	2260      	movs	r2, #96	; 0x60
 8003ab4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8003ab6:	187b      	adds	r3, r7, r1
 8003ab8:	2200      	movs	r2, #0
 8003aba:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003abc:	187b      	adds	r3, r7, r1
 8003abe:	2200      	movs	r2, #0
 8003ac0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003ac2:	187b      	adds	r3, r7, r1
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003ac8:	187b      	adds	r3, r7, r1
 8003aca:	2200      	movs	r2, #0
 8003acc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003ace:	187b      	adds	r3, r7, r1
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003ad4:	187b      	adds	r3, r7, r1
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003ada:	1879      	adds	r1, r7, r1
 8003adc:	4b19      	ldr	r3, [pc, #100]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f003 facf 	bl	8007084 <HAL_TIM_PWM_ConfigChannel>
 8003ae6:	1e03      	subs	r3, r0, #0
 8003ae8:	d001      	beq.n	8003aee <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8003aea:	f7ff fb37 	bl	800315c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003aee:	003b      	movs	r3, r7
 8003af0:	2200      	movs	r2, #0
 8003af2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003af4:	003b      	movs	r3, r7
 8003af6:	2200      	movs	r2, #0
 8003af8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003afa:	003b      	movs	r3, r7
 8003afc:	2200      	movs	r2, #0
 8003afe:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003b00:	003b      	movs	r3, r7
 8003b02:	2200      	movs	r2, #0
 8003b04:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003b06:	003b      	movs	r3, r7
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003b0c:	003b      	movs	r3, r7
 8003b0e:	2280      	movs	r2, #128	; 0x80
 8003b10:	0192      	lsls	r2, r2, #6
 8003b12:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8003b14:	003b      	movs	r3, r7
 8003b16:	2200      	movs	r2, #0
 8003b18:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003b1a:	003b      	movs	r3, r7
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8003b20:	003a      	movs	r2, r7
 8003b22:	4b08      	ldr	r3, [pc, #32]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003b24:	0011      	movs	r1, r2
 8003b26:	0018      	movs	r0, r3
 8003b28:	f003 ff76 	bl	8007a18 <HAL_TIMEx_ConfigBreakDeadTime>
 8003b2c:	1e03      	subs	r3, r0, #0
 8003b2e:	d001      	beq.n	8003b34 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8003b30:	f7ff fb14 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8003b34:	4b03      	ldr	r3, [pc, #12]	; (8003b44 <MX_TIM17_Init+0x104>)
 8003b36:	0018      	movs	r0, r3
 8003b38:	f000 f91e 	bl	8003d78 <HAL_TIM_MspPostInit>

}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b014      	add	sp, #80	; 0x50
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	2000051c 	.word	0x2000051c
 8003b48:	40014800 	.word	0x40014800
 8003b4c:	000003e7 	.word	0x000003e7

08003b50 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8003b50:	b590      	push	{r4, r7, lr}
 8003b52:	b08d      	sub	sp, #52	; 0x34
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b58:	241c      	movs	r4, #28
 8003b5a:	193b      	adds	r3, r7, r4
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	2314      	movs	r3, #20
 8003b60:	001a      	movs	r2, r3
 8003b62:	2100      	movs	r1, #0
 8003b64:	f005 fe5c 	bl	8009820 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a3e      	ldr	r2, [pc, #248]	; (8003c68 <HAL_TIM_Encoder_MspInit+0x118>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d13a      	bne.n	8003be8 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003b72:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b76:	4b3d      	ldr	r3, [pc, #244]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b78:	2180      	movs	r1, #128	; 0x80
 8003b7a:	0109      	lsls	r1, r1, #4
 8003b7c:	430a      	orrs	r2, r1
 8003b7e:	641a      	str	r2, [r3, #64]	; 0x40
 8003b80:	4b3a      	ldr	r3, [pc, #232]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b84:	2380      	movs	r3, #128	; 0x80
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	4013      	ands	r3, r2
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b8e:	4b37      	ldr	r3, [pc, #220]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b92:	4b36      	ldr	r3, [pc, #216]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b94:	2101      	movs	r1, #1
 8003b96:	430a      	orrs	r2, r1
 8003b98:	635a      	str	r2, [r3, #52]	; 0x34
 8003b9a:	4b34      	ldr	r3, [pc, #208]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CODEUR1_PH1_Pin|CODEUR1_PH2_Pin;
 8003ba6:	193b      	adds	r3, r7, r4
 8003ba8:	22c0      	movs	r2, #192	; 0xc0
 8003baa:	0092      	lsls	r2, r2, #2
 8003bac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bae:	0021      	movs	r1, r4
 8003bb0:	187b      	adds	r3, r7, r1
 8003bb2:	2202      	movs	r2, #2
 8003bb4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bb6:	187b      	adds	r3, r7, r1
 8003bb8:	2200      	movs	r2, #0
 8003bba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bbc:	187b      	adds	r3, r7, r1
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8003bc2:	187b      	adds	r3, r7, r1
 8003bc4:	2202      	movs	r2, #2
 8003bc6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bc8:	187a      	adds	r2, r7, r1
 8003bca:	23a0      	movs	r3, #160	; 0xa0
 8003bcc:	05db      	lsls	r3, r3, #23
 8003bce:	0011      	movs	r1, r2
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	f001 fa7d 	bl	80050d0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	2100      	movs	r1, #0
 8003bda:	200e      	movs	r0, #14
 8003bdc:	f001 f8ba 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8003be0:	200e      	movs	r0, #14
 8003be2:	f001 f8cc 	bl	8004d7e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8003be6:	e03a      	b.n	8003c5e <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a20      	ldr	r2, [pc, #128]	; (8003c70 <HAL_TIM_Encoder_MspInit+0x120>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d135      	bne.n	8003c5e <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf6:	4b1d      	ldr	r3, [pc, #116]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003bf8:	2102      	movs	r1, #2
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	63da      	str	r2, [r3, #60]	; 0x3c
 8003bfe:	4b1b      	ldr	r3, [pc, #108]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c02:	2202      	movs	r2, #2
 8003c04:	4013      	ands	r3, r2
 8003c06:	613b      	str	r3, [r7, #16]
 8003c08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c0a:	4b18      	ldr	r3, [pc, #96]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c10:	2104      	movs	r1, #4
 8003c12:	430a      	orrs	r2, r1
 8003c14:	635a      	str	r2, [r3, #52]	; 0x34
 8003c16:	4b15      	ldr	r3, [pc, #84]	; (8003c6c <HAL_TIM_Encoder_MspInit+0x11c>)
 8003c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	60fb      	str	r3, [r7, #12]
 8003c20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CODEUR2_PH1_Pin|CODEUR2_PH2_Pin;
 8003c22:	211c      	movs	r1, #28
 8003c24:	187b      	adds	r3, r7, r1
 8003c26:	22c0      	movs	r2, #192	; 0xc0
 8003c28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2a:	187b      	adds	r3, r7, r1
 8003c2c:	2202      	movs	r2, #2
 8003c2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c30:	187b      	adds	r3, r7, r1
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c36:	187b      	adds	r3, r7, r1
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8003c3c:	187b      	adds	r3, r7, r1
 8003c3e:	2201      	movs	r2, #1
 8003c40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c42:	187b      	adds	r3, r7, r1
 8003c44:	4a0b      	ldr	r2, [pc, #44]	; (8003c74 <HAL_TIM_Encoder_MspInit+0x124>)
 8003c46:	0019      	movs	r1, r3
 8003c48:	0010      	movs	r0, r2
 8003c4a:	f001 fa41 	bl	80050d0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003c4e:	2200      	movs	r2, #0
 8003c50:	2100      	movs	r1, #0
 8003c52:	2010      	movs	r0, #16
 8003c54:	f001 f87e 	bl	8004d54 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003c58:	2010      	movs	r0, #16
 8003c5a:	f001 f890 	bl	8004d7e <HAL_NVIC_EnableIRQ>
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b00d      	add	sp, #52	; 0x34
 8003c64:	bd90      	pop	{r4, r7, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40021000 	.word	0x40021000
 8003c70:	40000400 	.word	0x40000400
 8003c74:	50000800 	.word	0x50000800

08003c78 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b086      	sub	sp, #24
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a27      	ldr	r2, [pc, #156]	; (8003d24 <HAL_TIM_Base_MspInit+0xac>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c8e:	4b26      	ldr	r3, [pc, #152]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003c90:	2110      	movs	r1, #16
 8003c92:	430a      	orrs	r2, r1
 8003c94:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003c98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	617b      	str	r3, [r7, #20]
 8003ca0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8003ca2:	e03a      	b.n	8003d1a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a20      	ldr	r2, [pc, #128]	; (8003d2c <HAL_TIM_Base_MspInit+0xb4>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8003cae:	4b1e      	ldr	r3, [pc, #120]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003cb4:	2180      	movs	r1, #128	; 0x80
 8003cb6:	0209      	lsls	r1, r1, #8
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	641a      	str	r2, [r3, #64]	; 0x40
 8003cbc:	4b1a      	ldr	r3, [pc, #104]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cc0:	2380      	movs	r3, #128	; 0x80
 8003cc2:	021b      	lsls	r3, r3, #8
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	613b      	str	r3, [r7, #16]
 8003cc8:	693b      	ldr	r3, [r7, #16]
}
 8003cca:	e026      	b.n	8003d1a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a17      	ldr	r2, [pc, #92]	; (8003d30 <HAL_TIM_Base_MspInit+0xb8>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8003cd6:	4b14      	ldr	r3, [pc, #80]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003cd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cda:	4b13      	ldr	r3, [pc, #76]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003cdc:	2180      	movs	r1, #128	; 0x80
 8003cde:	0289      	lsls	r1, r1, #10
 8003ce0:	430a      	orrs	r2, r1
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8003ce4:	4b10      	ldr	r3, [pc, #64]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003ce6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	029b      	lsls	r3, r3, #10
 8003cec:	4013      	ands	r3, r2
 8003cee:	60fb      	str	r3, [r7, #12]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
}
 8003cf2:	e012      	b.n	8003d1a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM17)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a0e      	ldr	r2, [pc, #56]	; (8003d34 <HAL_TIM_Base_MspInit+0xbc>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10d      	bne.n	8003d1a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8003cfe:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003d00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d02:	4b09      	ldr	r3, [pc, #36]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003d04:	2180      	movs	r1, #128	; 0x80
 8003d06:	02c9      	lsls	r1, r1, #11
 8003d08:	430a      	orrs	r2, r1
 8003d0a:	641a      	str	r2, [r3, #64]	; 0x40
 8003d0c:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_TIM_Base_MspInit+0xb0>)
 8003d0e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d10:	2380      	movs	r3, #128	; 0x80
 8003d12:	02db      	lsls	r3, r3, #11
 8003d14:	4013      	ands	r3, r2
 8003d16:	60bb      	str	r3, [r7, #8]
 8003d18:	68bb      	ldr	r3, [r7, #8]
}
 8003d1a:	46c0      	nop			; (mov r8, r8)
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	b006      	add	sp, #24
 8003d20:	bd80      	pop	{r7, pc}
 8003d22:	46c0      	nop			; (mov r8, r8)
 8003d24:	40001000 	.word	0x40001000
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	40002000 	.word	0x40002000
 8003d30:	40014400 	.word	0x40014400
 8003d34:	40014800 	.word	0x40014800

08003d38 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <HAL_TIM_PWM_MspInit+0x38>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d10d      	bne.n	8003d66 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003d4a:	4b0a      	ldr	r3, [pc, #40]	; (8003d74 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d4e:	4b09      	ldr	r3, [pc, #36]	; (8003d74 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d50:	2180      	movs	r1, #128	; 0x80
 8003d52:	0249      	lsls	r1, r1, #9
 8003d54:	430a      	orrs	r2, r1
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
 8003d58:	4b06      	ldr	r3, [pc, #24]	; (8003d74 <HAL_TIM_PWM_MspInit+0x3c>)
 8003d5a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d5c:	2380      	movs	r3, #128	; 0x80
 8003d5e:	025b      	lsls	r3, r3, #9
 8003d60:	4013      	ands	r3, r2
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}
 8003d6e:	46c0      	nop			; (mov r8, r8)
 8003d70:	40014000 	.word	0x40014000
 8003d74:	40021000 	.word	0x40021000

08003d78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8003d78:	b590      	push	{r4, r7, lr}
 8003d7a:	b08d      	sub	sp, #52	; 0x34
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d80:	241c      	movs	r4, #28
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	0018      	movs	r0, r3
 8003d86:	2314      	movs	r3, #20
 8003d88:	001a      	movs	r2, r3
 8003d8a:	2100      	movs	r1, #0
 8003d8c:	f005 fd48 	bl	8009820 <memset>
  if(timHandle->Instance==TIM14)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a51      	ldr	r2, [pc, #324]	; (8003edc <HAL_TIM_MspPostInit+0x164>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d123      	bne.n	8003de2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d9a:	4b51      	ldr	r3, [pc, #324]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003d9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d9e:	4b50      	ldr	r3, [pc, #320]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003da0:	2104      	movs	r1, #4
 8003da2:	430a      	orrs	r2, r1
 8003da4:	635a      	str	r2, [r3, #52]	; 0x34
 8003da6:	4b4e      	ldr	r3, [pc, #312]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003daa:	2204      	movs	r2, #4
 8003dac:	4013      	ands	r3, r2
 8003dae:	61bb      	str	r3, [r7, #24]
 8003db0:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOT_LIDAR_Pin;
 8003db2:	193b      	adds	r3, r7, r4
 8003db4:	2280      	movs	r2, #128	; 0x80
 8003db6:	0152      	lsls	r2, r2, #5
 8003db8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dba:	0021      	movs	r1, r4
 8003dbc:	187b      	adds	r3, r7, r1
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc2:	187b      	adds	r3, r7, r1
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	2200      	movs	r2, #0
 8003dcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	4a43      	ldr	r2, [pc, #268]	; (8003ee4 <HAL_TIM_MspPostInit+0x16c>)
 8003dd8:	0019      	movs	r1, r3
 8003dda:	0010      	movs	r0, r2
 8003ddc:	f001 f978 	bl	80050d0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8003de0:	e078      	b.n	8003ed4 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a40      	ldr	r2, [pc, #256]	; (8003ee8 <HAL_TIM_MspPostInit+0x170>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d122      	bne.n	8003e32 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dec:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df0:	4b3b      	ldr	r3, [pc, #236]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003df2:	2104      	movs	r1, #4
 8003df4:	430a      	orrs	r2, r1
 8003df6:	635a      	str	r2, [r3, #52]	; 0x34
 8003df8:	4b39      	ldr	r3, [pc, #228]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003dfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dfc:	2204      	movs	r2, #4
 8003dfe:	4013      	ands	r3, r2
 8003e00:	617b      	str	r3, [r7, #20]
 8003e02:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_MOT2_PH1_Pin|PWM_MOT2_PH2_Pin;
 8003e04:	211c      	movs	r1, #28
 8003e06:	187b      	adds	r3, r7, r1
 8003e08:	2206      	movs	r2, #6
 8003e0a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e0c:	187b      	adds	r3, r7, r1
 8003e0e:	2202      	movs	r2, #2
 8003e10:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	187b      	adds	r3, r7, r1
 8003e14:	2200      	movs	r2, #0
 8003e16:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e18:	187b      	adds	r3, r7, r1
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8003e1e:	187b      	adds	r3, r7, r1
 8003e20:	2202      	movs	r2, #2
 8003e22:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003e24:	187b      	adds	r3, r7, r1
 8003e26:	4a2f      	ldr	r2, [pc, #188]	; (8003ee4 <HAL_TIM_MspPostInit+0x16c>)
 8003e28:	0019      	movs	r1, r3
 8003e2a:	0010      	movs	r0, r2
 8003e2c:	f001 f950 	bl	80050d0 <HAL_GPIO_Init>
}
 8003e30:	e050      	b.n	8003ed4 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a2d      	ldr	r2, [pc, #180]	; (8003eec <HAL_TIM_MspPostInit+0x174>)
 8003e38:	4293      	cmp	r3, r2
 8003e3a:	d123      	bne.n	8003e84 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e3c:	4b28      	ldr	r3, [pc, #160]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003e3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e40:	4b27      	ldr	r3, [pc, #156]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003e42:	2101      	movs	r1, #1
 8003e44:	430a      	orrs	r2, r1
 8003e46:	635a      	str	r2, [r3, #52]	; 0x34
 8003e48:	4b25      	ldr	r3, [pc, #148]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003e4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	4013      	ands	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]
 8003e52:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_MOT1_PH1_Pin;
 8003e54:	211c      	movs	r1, #28
 8003e56:	187b      	adds	r3, r7, r1
 8003e58:	2240      	movs	r2, #64	; 0x40
 8003e5a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	187b      	adds	r3, r7, r1
 8003e5e:	2202      	movs	r2, #2
 8003e60:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	2200      	movs	r2, #0
 8003e66:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2205      	movs	r2, #5
 8003e72:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH1_GPIO_Port, &GPIO_InitStruct);
 8003e74:	187a      	adds	r2, r7, r1
 8003e76:	23a0      	movs	r3, #160	; 0xa0
 8003e78:	05db      	lsls	r3, r3, #23
 8003e7a:	0011      	movs	r1, r2
 8003e7c:	0018      	movs	r0, r3
 8003e7e:	f001 f927 	bl	80050d0 <HAL_GPIO_Init>
}
 8003e82:	e027      	b.n	8003ed4 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	4a19      	ldr	r2, [pc, #100]	; (8003ef0 <HAL_TIM_MspPostInit+0x178>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d122      	bne.n	8003ed4 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e8e:	4b14      	ldr	r3, [pc, #80]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003e90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e92:	4b13      	ldr	r3, [pc, #76]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003e94:	2101      	movs	r1, #1
 8003e96:	430a      	orrs	r2, r1
 8003e98:	635a      	str	r2, [r3, #52]	; 0x34
 8003e9a:	4b11      	ldr	r3, [pc, #68]	; (8003ee0 <HAL_TIM_MspPostInit+0x168>)
 8003e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	4013      	ands	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOT1_PH2_Pin;
 8003ea6:	211c      	movs	r1, #28
 8003ea8:	187b      	adds	r3, r7, r1
 8003eaa:	2280      	movs	r2, #128	; 0x80
 8003eac:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eae:	187b      	adds	r3, r7, r1
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eb4:	187b      	adds	r3, r7, r1
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003eba:	187b      	adds	r3, r7, r1
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8003ec0:	187b      	adds	r3, r7, r1
 8003ec2:	2205      	movs	r2, #5
 8003ec4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH2_GPIO_Port, &GPIO_InitStruct);
 8003ec6:	187a      	adds	r2, r7, r1
 8003ec8:	23a0      	movs	r3, #160	; 0xa0
 8003eca:	05db      	lsls	r3, r3, #23
 8003ecc:	0011      	movs	r1, r2
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f001 f8fe 	bl	80050d0 <HAL_GPIO_Init>
}
 8003ed4:	46c0      	nop			; (mov r8, r8)
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	b00d      	add	sp, #52	; 0x34
 8003eda:	bd90      	pop	{r4, r7, pc}
 8003edc:	40002000 	.word	0x40002000
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	50000800 	.word	0x50000800
 8003ee8:	40014000 	.word	0x40014000
 8003eec:	40014400 	.word	0x40014400
 8003ef0:	40014800 	.word	0x40014800

08003ef4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart4;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003ef8:	4b23      	ldr	r3, [pc, #140]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003efa:	4a24      	ldr	r2, [pc, #144]	; (8003f8c <MX_USART1_UART_Init+0x98>)
 8003efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003efe:	4b22      	ldr	r3, [pc, #136]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f00:	22e1      	movs	r2, #225	; 0xe1
 8003f02:	0252      	lsls	r2, r2, #9
 8003f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003f06:	4b20      	ldr	r3, [pc, #128]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f08:	2200      	movs	r2, #0
 8003f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003f0c:	4b1e      	ldr	r3, [pc, #120]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f0e:	2200      	movs	r2, #0
 8003f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003f12:	4b1d      	ldr	r3, [pc, #116]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003f18:	4b1b      	ldr	r3, [pc, #108]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f1a:	220c      	movs	r2, #12
 8003f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003f1e:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f20:	2200      	movs	r2, #0
 8003f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003f24:	4b18      	ldr	r3, [pc, #96]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003f2a:	4b17      	ldr	r3, [pc, #92]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003f30:	4b15      	ldr	r3, [pc, #84]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003f36:	4b14      	ldr	r3, [pc, #80]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003f3c:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f003 fe28 	bl	8007b94 <HAL_UART_Init>
 8003f44:	1e03      	subs	r3, r0, #0
 8003f46:	d001      	beq.n	8003f4c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003f48:	f7ff f908 	bl	800315c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f4c:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f4e:	2100      	movs	r1, #0
 8003f50:	0018      	movs	r0, r3
 8003f52:	f004 fab9 	bl	80084c8 <HAL_UARTEx_SetTxFifoThreshold>
 8003f56:	1e03      	subs	r3, r0, #0
 8003f58:	d001      	beq.n	8003f5e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003f5a:	f7ff f8ff 	bl	800315c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003f5e:	4b0a      	ldr	r3, [pc, #40]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f60:	2100      	movs	r1, #0
 8003f62:	0018      	movs	r0, r3
 8003f64:	f004 faf0 	bl	8008548 <HAL_UARTEx_SetRxFifoThreshold>
 8003f68:	1e03      	subs	r3, r0, #0
 8003f6a:	d001      	beq.n	8003f70 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003f6c:	f7ff f8f6 	bl	800315c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003f70:	4b05      	ldr	r3, [pc, #20]	; (8003f88 <MX_USART1_UART_Init+0x94>)
 8003f72:	0018      	movs	r0, r3
 8003f74:	f004 fa6e 	bl	8008454 <HAL_UARTEx_DisableFifoMode>
 8003f78:	1e03      	subs	r3, r0, #0
 8003f7a:	d001      	beq.n	8003f80 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003f7c:	f7ff f8ee 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003f80:	46c0      	nop			; (mov r8, r8)
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	46c0      	nop			; (mov r8, r8)
 8003f88:	20000568 	.word	0x20000568
 8003f8c:	40013800 	.word	0x40013800

08003f90 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8003f94:	4b16      	ldr	r3, [pc, #88]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003f96:	4a17      	ldr	r2, [pc, #92]	; (8003ff4 <MX_USART4_UART_Init+0x64>)
 8003f98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 8003f9a:	4b15      	ldr	r3, [pc, #84]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003f9c:	22fa      	movs	r2, #250	; 0xfa
 8003f9e:	0252      	lsls	r2, r2, #9
 8003fa0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8003fa8:	4b11      	ldr	r3, [pc, #68]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003fae:	4b10      	ldr	r3, [pc, #64]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003fb4:	4b0e      	ldr	r3, [pc, #56]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fb6:	220c      	movs	r2, #12
 8003fb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003fba:	4b0d      	ldr	r3, [pc, #52]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003fc0:	4b0b      	ldr	r3, [pc, #44]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003fcc:	4b08      	ldr	r3, [pc, #32]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003fd2:	4b07      	ldr	r3, [pc, #28]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8003fd8:	4b05      	ldr	r3, [pc, #20]	; (8003ff0 <MX_USART4_UART_Init+0x60>)
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f003 fdda 	bl	8007b94 <HAL_UART_Init>
 8003fe0:	1e03      	subs	r3, r0, #0
 8003fe2:	d001      	beq.n	8003fe8 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8003fe4:	f7ff f8ba 	bl	800315c <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8003fe8:	46c0      	nop			; (mov r8, r8)
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	200005fc 	.word	0x200005fc
 8003ff4:	40004c00 	.word	0x40004c00

08003ff8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003ff8:	b590      	push	{r4, r7, lr}
 8003ffa:	b093      	sub	sp, #76	; 0x4c
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004000:	2334      	movs	r3, #52	; 0x34
 8004002:	18fb      	adds	r3, r7, r3
 8004004:	0018      	movs	r0, r3
 8004006:	2314      	movs	r3, #20
 8004008:	001a      	movs	r2, r3
 800400a:	2100      	movs	r1, #0
 800400c:	f005 fc08 	bl	8009820 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004010:	2418      	movs	r4, #24
 8004012:	193b      	adds	r3, r7, r4
 8004014:	0018      	movs	r0, r3
 8004016:	231c      	movs	r3, #28
 8004018:	001a      	movs	r2, r3
 800401a:	2100      	movs	r1, #0
 800401c:	f005 fc00 	bl	8009820 <memset>
  if(uartHandle->Instance==USART1)
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a3d      	ldr	r2, [pc, #244]	; (800411c <HAL_UART_MspInit+0x124>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d13e      	bne.n	80040a8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800402a:	193b      	adds	r3, r7, r4
 800402c:	2201      	movs	r2, #1
 800402e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004030:	193b      	adds	r3, r7, r4
 8004032:	2200      	movs	r2, #0
 8004034:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004036:	193b      	adds	r3, r7, r4
 8004038:	0018      	movs	r0, r3
 800403a:	f001 ff0d 	bl	8005e58 <HAL_RCCEx_PeriphCLKConfig>
 800403e:	1e03      	subs	r3, r0, #0
 8004040:	d001      	beq.n	8004046 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004042:	f7ff f88b 	bl	800315c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004046:	4b36      	ldr	r3, [pc, #216]	; (8004120 <HAL_UART_MspInit+0x128>)
 8004048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800404a:	4b35      	ldr	r3, [pc, #212]	; (8004120 <HAL_UART_MspInit+0x128>)
 800404c:	2180      	movs	r1, #128	; 0x80
 800404e:	01c9      	lsls	r1, r1, #7
 8004050:	430a      	orrs	r2, r1
 8004052:	641a      	str	r2, [r3, #64]	; 0x40
 8004054:	4b32      	ldr	r3, [pc, #200]	; (8004120 <HAL_UART_MspInit+0x128>)
 8004056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004058:	2380      	movs	r3, #128	; 0x80
 800405a:	01db      	lsls	r3, r3, #7
 800405c:	4013      	ands	r3, r2
 800405e:	617b      	str	r3, [r7, #20]
 8004060:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004062:	4b2f      	ldr	r3, [pc, #188]	; (8004120 <HAL_UART_MspInit+0x128>)
 8004064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004066:	4b2e      	ldr	r3, [pc, #184]	; (8004120 <HAL_UART_MspInit+0x128>)
 8004068:	2104      	movs	r1, #4
 800406a:	430a      	orrs	r2, r1
 800406c:	635a      	str	r2, [r3, #52]	; 0x34
 800406e:	4b2c      	ldr	r3, [pc, #176]	; (8004120 <HAL_UART_MspInit+0x128>)
 8004070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004072:	2204      	movs	r2, #4
 8004074:	4013      	ands	r3, r2
 8004076:	613b      	str	r3, [r7, #16]
 8004078:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Debug_Pin|USART1_RX_Debug_Pin;
 800407a:	2134      	movs	r1, #52	; 0x34
 800407c:	187b      	adds	r3, r7, r1
 800407e:	2230      	movs	r2, #48	; 0x30
 8004080:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004082:	187b      	adds	r3, r7, r1
 8004084:	2202      	movs	r2, #2
 8004086:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004088:	187b      	adds	r3, r7, r1
 800408a:	2200      	movs	r2, #0
 800408c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800408e:	187b      	adds	r3, r7, r1
 8004090:	2200      	movs	r2, #0
 8004092:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004094:	187b      	adds	r3, r7, r1
 8004096:	2201      	movs	r2, #1
 8004098:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800409a:	187b      	adds	r3, r7, r1
 800409c:	4a21      	ldr	r2, [pc, #132]	; (8004124 <HAL_UART_MspInit+0x12c>)
 800409e:	0019      	movs	r1, r3
 80040a0:	0010      	movs	r0, r2
 80040a2:	f001 f815 	bl	80050d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80040a6:	e035      	b.n	8004114 <HAL_UART_MspInit+0x11c>
  else if(uartHandle->Instance==USART4)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a1e      	ldr	r2, [pc, #120]	; (8004128 <HAL_UART_MspInit+0x130>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d130      	bne.n	8004114 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART4_CLK_ENABLE();
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <HAL_UART_MspInit+0x128>)
 80040b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040b6:	4b1a      	ldr	r3, [pc, #104]	; (8004120 <HAL_UART_MspInit+0x128>)
 80040b8:	2180      	movs	r1, #128	; 0x80
 80040ba:	0309      	lsls	r1, r1, #12
 80040bc:	430a      	orrs	r2, r1
 80040be:	63da      	str	r2, [r3, #60]	; 0x3c
 80040c0:	4b17      	ldr	r3, [pc, #92]	; (8004120 <HAL_UART_MspInit+0x128>)
 80040c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c4:	2380      	movs	r3, #128	; 0x80
 80040c6:	031b      	lsls	r3, r3, #12
 80040c8:	4013      	ands	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040ce:	4b14      	ldr	r3, [pc, #80]	; (8004120 <HAL_UART_MspInit+0x128>)
 80040d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040d2:	4b13      	ldr	r3, [pc, #76]	; (8004120 <HAL_UART_MspInit+0x128>)
 80040d4:	2104      	movs	r1, #4
 80040d6:	430a      	orrs	r2, r1
 80040d8:	635a      	str	r2, [r3, #52]	; 0x34
 80040da:	4b11      	ldr	r3, [pc, #68]	; (8004120 <HAL_UART_MspInit+0x128>)
 80040dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040de:	2204      	movs	r2, #4
 80040e0:	4013      	ands	r3, r2
 80040e2:	60bb      	str	r3, [r7, #8]
 80040e4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_RX_LIDAR_Pin|USART4_TX_LIDAR_Pin;
 80040e6:	2134      	movs	r1, #52	; 0x34
 80040e8:	187b      	adds	r3, r7, r1
 80040ea:	22c0      	movs	r2, #192	; 0xc0
 80040ec:	0112      	lsls	r2, r2, #4
 80040ee:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f0:	187b      	adds	r3, r7, r1
 80040f2:	2202      	movs	r2, #2
 80040f4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040f6:	187b      	adds	r3, r7, r1
 80040f8:	2200      	movs	r2, #0
 80040fa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040fc:	187b      	adds	r3, r7, r1
 80040fe:	2200      	movs	r2, #0
 8004100:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 8004102:	187b      	adds	r3, r7, r1
 8004104:	2201      	movs	r2, #1
 8004106:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004108:	187b      	adds	r3, r7, r1
 800410a:	4a06      	ldr	r2, [pc, #24]	; (8004124 <HAL_UART_MspInit+0x12c>)
 800410c:	0019      	movs	r1, r3
 800410e:	0010      	movs	r0, r2
 8004110:	f000 ffde 	bl	80050d0 <HAL_GPIO_Init>
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	46bd      	mov	sp, r7
 8004118:	b013      	add	sp, #76	; 0x4c
 800411a:	bd90      	pop	{r4, r7, pc}
 800411c:	40013800 	.word	0x40013800
 8004120:	40021000 	.word	0x40021000
 8004124:	50000800 	.word	0x50000800
 8004128:	40004c00 	.word	0x40004c00

0800412c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800412c:	480d      	ldr	r0, [pc, #52]	; (8004164 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800412e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004130:	f7ff f9fa 	bl	8003528 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004134:	480c      	ldr	r0, [pc, #48]	; (8004168 <LoopForever+0x6>)
  ldr r1, =_edata
 8004136:	490d      	ldr	r1, [pc, #52]	; (800416c <LoopForever+0xa>)
  ldr r2, =_sidata
 8004138:	4a0d      	ldr	r2, [pc, #52]	; (8004170 <LoopForever+0xe>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800413c:	e002      	b.n	8004144 <LoopCopyDataInit>

0800413e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800413e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004140:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004142:	3304      	adds	r3, #4

08004144 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004144:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004146:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004148:	d3f9      	bcc.n	800413e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800414a:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <LoopForever+0x12>)
  ldr r4, =_ebss
 800414c:	4c0a      	ldr	r4, [pc, #40]	; (8004178 <LoopForever+0x16>)
  movs r3, #0
 800414e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004150:	e001      	b.n	8004156 <LoopFillZerobss>

08004152 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004152:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004154:	3204      	adds	r2, #4

08004156 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004156:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004158:	d3fb      	bcc.n	8004152 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800415a:	f005 fbc1 	bl	80098e0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 800415e:	f7fe ff6f 	bl	8003040 <main>

08004162 <LoopForever>:

LoopForever:
  b LoopForever
 8004162:	e7fe      	b.n	8004162 <LoopForever>
  ldr   r0, =_estack
 8004164:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004168:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800416c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004170:	0800d788 	.word	0x0800d788
  ldr r2, =_sbss
 8004174:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004178:	200007e0 	.word	0x200007e0

0800417c <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800417c:	e7fe      	b.n	800417c <ADC1_IRQHandler>
	...

08004180 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004186:	1dfb      	adds	r3, r7, #7
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800418c:	4b0b      	ldr	r3, [pc, #44]	; (80041bc <HAL_Init+0x3c>)
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_Init+0x3c>)
 8004192:	2180      	movs	r1, #128	; 0x80
 8004194:	0049      	lsls	r1, r1, #1
 8004196:	430a      	orrs	r2, r1
 8004198:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800419a:	2003      	movs	r0, #3
 800419c:	f000 f810 	bl	80041c0 <HAL_InitTick>
 80041a0:	1e03      	subs	r3, r0, #0
 80041a2:	d003      	beq.n	80041ac <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80041a4:	1dfb      	adds	r3, r7, #7
 80041a6:	2201      	movs	r2, #1
 80041a8:	701a      	strb	r2, [r3, #0]
 80041aa:	e001      	b.n	80041b0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80041ac:	f7ff f866 	bl	800327c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041b0:	1dfb      	adds	r3, r7, #7
 80041b2:	781b      	ldrb	r3, [r3, #0]
}
 80041b4:	0018      	movs	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	b002      	add	sp, #8
 80041ba:	bd80      	pop	{r7, pc}
 80041bc:	40022000 	.word	0x40022000

080041c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041c0:	b590      	push	{r4, r7, lr}
 80041c2:	b085      	sub	sp, #20
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041c8:	230f      	movs	r3, #15
 80041ca:	18fb      	adds	r3, r7, r3
 80041cc:	2200      	movs	r2, #0
 80041ce:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 80041d0:	4b1d      	ldr	r3, [pc, #116]	; (8004248 <HAL_InitTick+0x88>)
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d02b      	beq.n	8004230 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 80041d8:	4b1c      	ldr	r3, [pc, #112]	; (800424c <HAL_InitTick+0x8c>)
 80041da:	681c      	ldr	r4, [r3, #0]
 80041dc:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <HAL_InitTick+0x88>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	0019      	movs	r1, r3
 80041e2:	23fa      	movs	r3, #250	; 0xfa
 80041e4:	0098      	lsls	r0, r3, #2
 80041e6:	f7fb ffa7 	bl	8000138 <__udivsi3>
 80041ea:	0003      	movs	r3, r0
 80041ec:	0019      	movs	r1, r3
 80041ee:	0020      	movs	r0, r4
 80041f0:	f7fb ffa2 	bl	8000138 <__udivsi3>
 80041f4:	0003      	movs	r3, r0
 80041f6:	0018      	movs	r0, r3
 80041f8:	f000 fdd1 	bl	8004d9e <HAL_SYSTICK_Config>
 80041fc:	1e03      	subs	r3, r0, #0
 80041fe:	d112      	bne.n	8004226 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2b03      	cmp	r3, #3
 8004204:	d80a      	bhi.n	800421c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	2301      	movs	r3, #1
 800420a:	425b      	negs	r3, r3
 800420c:	2200      	movs	r2, #0
 800420e:	0018      	movs	r0, r3
 8004210:	f000 fda0 	bl	8004d54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004214:	4b0e      	ldr	r3, [pc, #56]	; (8004250 <HAL_InitTick+0x90>)
 8004216:	687a      	ldr	r2, [r7, #4]
 8004218:	601a      	str	r2, [r3, #0]
 800421a:	e00d      	b.n	8004238 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800421c:	230f      	movs	r3, #15
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	2201      	movs	r2, #1
 8004222:	701a      	strb	r2, [r3, #0]
 8004224:	e008      	b.n	8004238 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004226:	230f      	movs	r3, #15
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	2201      	movs	r2, #1
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	e003      	b.n	8004238 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004230:	230f      	movs	r3, #15
 8004232:	18fb      	adds	r3, r7, r3
 8004234:	2201      	movs	r2, #1
 8004236:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8004238:	230f      	movs	r3, #15
 800423a:	18fb      	adds	r3, r7, r3
 800423c:	781b      	ldrb	r3, [r3, #0]
}
 800423e:	0018      	movs	r0, r3
 8004240:	46bd      	mov	sp, r7
 8004242:	b005      	add	sp, #20
 8004244:	bd90      	pop	{r4, r7, pc}
 8004246:	46c0      	nop			; (mov r8, r8)
 8004248:	2000000c 	.word	0x2000000c
 800424c:	20000004 	.word	0x20000004
 8004250:	20000008 	.word	0x20000008

08004254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004258:	4b05      	ldr	r3, [pc, #20]	; (8004270 <HAL_IncTick+0x1c>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	001a      	movs	r2, r3
 800425e:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_IncTick+0x20>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	18d2      	adds	r2, r2, r3
 8004264:	4b03      	ldr	r3, [pc, #12]	; (8004274 <HAL_IncTick+0x20>)
 8004266:	601a      	str	r2, [r3, #0]
}
 8004268:	46c0      	nop			; (mov r8, r8)
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	2000000c 	.word	0x2000000c
 8004274:	20000690 	.word	0x20000690

08004278 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
  return uwTick;
 800427c:	4b02      	ldr	r3, [pc, #8]	; (8004288 <HAL_GetTick+0x10>)
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	0018      	movs	r0, r3
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	46c0      	nop			; (mov r8, r8)
 8004288:	20000690 	.word	0x20000690

0800428c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004294:	f7ff fff0 	bl	8004278 <HAL_GetTick>
 8004298:	0003      	movs	r3, r0
 800429a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	d005      	beq.n	80042b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042a6:	4b0a      	ldr	r3, [pc, #40]	; (80042d0 <HAL_Delay+0x44>)
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	001a      	movs	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	f7ff ffe0 	bl	8004278 <HAL_GetTick>
 80042b8:	0002      	movs	r2, r0
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	68fa      	ldr	r2, [r7, #12]
 80042c0:	429a      	cmp	r2, r3
 80042c2:	d8f7      	bhi.n	80042b4 <HAL_Delay+0x28>
  {
  }
}
 80042c4:	46c0      	nop			; (mov r8, r8)
 80042c6:	46c0      	nop			; (mov r8, r8)
 80042c8:	46bd      	mov	sp, r7
 80042ca:	b004      	add	sp, #16
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	46c0      	nop			; (mov r8, r8)
 80042d0:	2000000c 	.word	0x2000000c

080042d4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80042dc:	4b06      	ldr	r3, [pc, #24]	; (80042f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a06      	ldr	r2, [pc, #24]	; (80042fc <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80042e2:	4013      	ands	r3, r2
 80042e4:	0019      	movs	r1, r3
 80042e6:	4b04      	ldr	r3, [pc, #16]	; (80042f8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	430a      	orrs	r2, r1
 80042ec:	601a      	str	r2, [r3, #0]
}
 80042ee:	46c0      	nop			; (mov r8, r8)
 80042f0:	46bd      	mov	sp, r7
 80042f2:	b002      	add	sp, #8
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	46c0      	nop			; (mov r8, r8)
 80042f8:	40010000 	.word	0x40010000
 80042fc:	fffff9ff 	.word	0xfffff9ff

08004300 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	b082      	sub	sp, #8
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a05      	ldr	r2, [pc, #20]	; (8004324 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8004310:	401a      	ands	r2, r3
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	431a      	orrs	r2, r3
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	601a      	str	r2, [r3, #0]
}
 800431a:	46c0      	nop			; (mov r8, r8)
 800431c:	46bd      	mov	sp, r7
 800431e:	b002      	add	sp, #8
 8004320:	bd80      	pop	{r7, pc}
 8004322:	46c0      	nop			; (mov r8, r8)
 8004324:	fe3fffff 	.word	0xfe3fffff

08004328 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b082      	sub	sp, #8
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	23e0      	movs	r3, #224	; 0xe0
 8004336:	045b      	lsls	r3, r3, #17
 8004338:	4013      	ands	r3, r2
}
 800433a:	0018      	movs	r0, r3
 800433c:	46bd      	mov	sp, r7
 800433e:	b002      	add	sp, #8
 8004340:	bd80      	pop	{r7, pc}

08004342 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8004342:	b580      	push	{r7, lr}
 8004344:	b084      	sub	sp, #16
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	68ba      	ldr	r2, [r7, #8]
 8004354:	2104      	movs	r1, #4
 8004356:	400a      	ands	r2, r1
 8004358:	2107      	movs	r1, #7
 800435a:	4091      	lsls	r1, r2
 800435c:	000a      	movs	r2, r1
 800435e:	43d2      	mvns	r2, r2
 8004360:	401a      	ands	r2, r3
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	2104      	movs	r1, #4
 8004366:	400b      	ands	r3, r1
 8004368:	6879      	ldr	r1, [r7, #4]
 800436a:	4099      	lsls	r1, r3
 800436c:	000b      	movs	r3, r1
 800436e:	431a      	orrs	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8004374:	46c0      	nop			; (mov r8, r8)
 8004376:	46bd      	mov	sp, r7
 8004378:	b004      	add	sp, #16
 800437a:	bd80      	pop	{r7, pc}

0800437c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	683a      	ldr	r2, [r7, #0]
 800438c:	2104      	movs	r1, #4
 800438e:	400a      	ands	r2, r1
 8004390:	2107      	movs	r1, #7
 8004392:	4091      	lsls	r1, r2
 8004394:	000a      	movs	r2, r1
 8004396:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2104      	movs	r1, #4
 800439c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800439e:	40da      	lsrs	r2, r3
 80043a0:	0013      	movs	r3, r2
}
 80043a2:	0018      	movs	r0, r3
 80043a4:	46bd      	mov	sp, r7
 80043a6:	b002      	add	sp, #8
 80043a8:	bd80      	pop	{r7, pc}

080043aa <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043aa:	b580      	push	{r7, lr}
 80043ac:	b084      	sub	sp, #16
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	60f8      	str	r0, [r7, #12]
 80043b2:	60b9      	str	r1, [r7, #8]
 80043b4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	211f      	movs	r1, #31
 80043be:	400a      	ands	r2, r1
 80043c0:	210f      	movs	r1, #15
 80043c2:	4091      	lsls	r1, r2
 80043c4:	000a      	movs	r2, r1
 80043c6:	43d2      	mvns	r2, r2
 80043c8:	401a      	ands	r2, r3
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0e9b      	lsrs	r3, r3, #26
 80043ce:	210f      	movs	r1, #15
 80043d0:	4019      	ands	r1, r3
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	201f      	movs	r0, #31
 80043d6:	4003      	ands	r3, r0
 80043d8:	4099      	lsls	r1, r3
 80043da:	000b      	movs	r3, r1
 80043dc:	431a      	orrs	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043e2:	46c0      	nop			; (mov r8, r8)
 80043e4:	46bd      	mov	sp, r7
 80043e6:	b004      	add	sp, #16
 80043e8:	bd80      	pop	{r7, pc}

080043ea <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b082      	sub	sp, #8
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	035b      	lsls	r3, r3, #13
 80043fc:	0b5b      	lsrs	r3, r3, #13
 80043fe:	431a      	orrs	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	46bd      	mov	sp, r7
 8004408:	b002      	add	sp, #8
 800440a:	bd80      	pop	{r7, pc}

0800440c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	683a      	ldr	r2, [r7, #0]
 800441c:	0352      	lsls	r2, r2, #13
 800441e:	0b52      	lsrs	r2, r2, #13
 8004420:	43d2      	mvns	r2, r2
 8004422:	401a      	ands	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004428:	46c0      	nop			; (mov r8, r8)
 800442a:	46bd      	mov	sp, r7
 800442c:	b002      	add	sp, #8
 800442e:	bd80      	pop	{r7, pc}

08004430 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	60f8      	str	r0, [r7, #12]
 8004438:	60b9      	str	r1, [r7, #8]
 800443a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	0212      	lsls	r2, r2, #8
 8004444:	43d2      	mvns	r2, r2
 8004446:	401a      	ands	r2, r3
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	021b      	lsls	r3, r3, #8
 800444c:	6879      	ldr	r1, [r7, #4]
 800444e:	400b      	ands	r3, r1
 8004450:	4904      	ldr	r1, [pc, #16]	; (8004464 <LL_ADC_SetChannelSamplingTime+0x34>)
 8004452:	400b      	ands	r3, r1
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800445a:	46c0      	nop			; (mov r8, r8)
 800445c:	46bd      	mov	sp, r7
 800445e:	b004      	add	sp, #16
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			; (mov r8, r8)
 8004464:	07ffff00 	.word	0x07ffff00

08004468 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	4a05      	ldr	r2, [pc, #20]	; (800448c <LL_ADC_EnableInternalRegulator+0x24>)
 8004476:	4013      	ands	r3, r2
 8004478:	2280      	movs	r2, #128	; 0x80
 800447a:	0552      	lsls	r2, r2, #21
 800447c:	431a      	orrs	r2, r3
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	46bd      	mov	sp, r7
 8004486:	b002      	add	sp, #8
 8004488:	bd80      	pop	{r7, pc}
 800448a:	46c0      	nop			; (mov r8, r8)
 800448c:	6fffffe8 	.word	0x6fffffe8

08004490 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	2380      	movs	r3, #128	; 0x80
 800449e:	055b      	lsls	r3, r3, #21
 80044a0:	401a      	ands	r2, r3
 80044a2:	2380      	movs	r3, #128	; 0x80
 80044a4:	055b      	lsls	r3, r3, #21
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d101      	bne.n	80044ae <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80044aa:	2301      	movs	r3, #1
 80044ac:	e000      	b.n	80044b0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80044ae:	2300      	movs	r3, #0
}
 80044b0:	0018      	movs	r0, r3
 80044b2:	46bd      	mov	sp, r7
 80044b4:	b002      	add	sp, #8
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b082      	sub	sp, #8
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2201      	movs	r2, #1
 80044c6:	4013      	ands	r3, r2
 80044c8:	2b01      	cmp	r3, #1
 80044ca:	d101      	bne.n	80044d0 <LL_ADC_IsEnabled+0x18>
 80044cc:	2301      	movs	r3, #1
 80044ce:	e000      	b.n	80044d2 <LL_ADC_IsEnabled+0x1a>
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	0018      	movs	r0, r3
 80044d4:	46bd      	mov	sp, r7
 80044d6:	b002      	add	sp, #8
 80044d8:	bd80      	pop	{r7, pc}

080044da <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80044da:	b580      	push	{r7, lr}
 80044dc:	b082      	sub	sp, #8
 80044de:	af00      	add	r7, sp, #0
 80044e0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	2204      	movs	r2, #4
 80044e8:	4013      	ands	r3, r2
 80044ea:	2b04      	cmp	r3, #4
 80044ec:	d101      	bne.n	80044f2 <LL_ADC_REG_IsConversionOngoing+0x18>
 80044ee:	2301      	movs	r3, #1
 80044f0:	e000      	b.n	80044f4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	0018      	movs	r0, r3
 80044f6:	46bd      	mov	sp, r7
 80044f8:	b002      	add	sp, #8
 80044fa:	bd80      	pop	{r7, pc}

080044fc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b088      	sub	sp, #32
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004504:	231f      	movs	r3, #31
 8004506:	18fb      	adds	r3, r7, r3
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800450c:	2300      	movs	r3, #0
 800450e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004514:	2300      	movs	r3, #0
 8004516:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e17f      	b.n	8004822 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004526:	2b00      	cmp	r3, #0
 8004528:	d10a      	bne.n	8004540 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	0018      	movs	r0, r3
 800452e:	f7fe fbc3 	bl	8002cb8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2254      	movs	r2, #84	; 0x54
 800453c:	2100      	movs	r1, #0
 800453e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff ffa3 	bl	8004490 <LL_ADC_IsInternalRegulatorEnabled>
 800454a:	1e03      	subs	r3, r0, #0
 800454c:	d115      	bne.n	800457a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff ff88 	bl	8004468 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004558:	4bb4      	ldr	r3, [pc, #720]	; (800482c <HAL_ADC_Init+0x330>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	49b4      	ldr	r1, [pc, #720]	; (8004830 <HAL_ADC_Init+0x334>)
 800455e:	0018      	movs	r0, r3
 8004560:	f7fb fdea 	bl	8000138 <__udivsi3>
 8004564:	0003      	movs	r3, r0
 8004566:	3301      	adds	r3, #1
 8004568:	005b      	lsls	r3, r3, #1
 800456a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800456c:	e002      	b.n	8004574 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	3b01      	subs	r3, #1
 8004572:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d1f9      	bne.n	800456e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	0018      	movs	r0, r3
 8004580:	f7ff ff86 	bl	8004490 <LL_ADC_IsInternalRegulatorEnabled>
 8004584:	1e03      	subs	r3, r0, #0
 8004586:	d10f      	bne.n	80045a8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458c:	2210      	movs	r2, #16
 800458e:	431a      	orrs	r2, r3
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004598:	2201      	movs	r2, #1
 800459a:	431a      	orrs	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80045a0:	231f      	movs	r3, #31
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	0018      	movs	r0, r3
 80045ae:	f7ff ff94 	bl	80044da <LL_ADC_REG_IsConversionOngoing>
 80045b2:	0003      	movs	r3, r0
 80045b4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ba:	2210      	movs	r2, #16
 80045bc:	4013      	ands	r3, r2
 80045be:	d000      	beq.n	80045c2 <HAL_ADC_Init+0xc6>
 80045c0:	e122      	b.n	8004808 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d000      	beq.n	80045ca <HAL_ADC_Init+0xce>
 80045c8:	e11e      	b.n	8004808 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045ce:	4a99      	ldr	r2, [pc, #612]	; (8004834 <HAL_ADC_Init+0x338>)
 80045d0:	4013      	ands	r3, r2
 80045d2:	2202      	movs	r2, #2
 80045d4:	431a      	orrs	r2, r3
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	0018      	movs	r0, r3
 80045e0:	f7ff ff6a 	bl	80044b8 <LL_ADC_IsEnabled>
 80045e4:	1e03      	subs	r3, r0, #0
 80045e6:	d000      	beq.n	80045ea <HAL_ADC_Init+0xee>
 80045e8:	e0ad      	b.n	8004746 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	7e1b      	ldrb	r3, [r3, #24]
 80045f2:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80045f4:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	7e5b      	ldrb	r3, [r3, #25]
 80045fa:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80045fc:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	7e9b      	ldrb	r3, [r3, #26]
 8004602:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8004604:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460a:	2b00      	cmp	r3, #0
 800460c:	d002      	beq.n	8004614 <HAL_ADC_Init+0x118>
 800460e:	2380      	movs	r3, #128	; 0x80
 8004610:	015b      	lsls	r3, r3, #5
 8004612:	e000      	b.n	8004616 <HAL_ADC_Init+0x11a>
 8004614:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8004616:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800461c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	691b      	ldr	r3, [r3, #16]
 8004622:	2b00      	cmp	r3, #0
 8004624:	da04      	bge.n	8004630 <HAL_ADC_Init+0x134>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	005b      	lsls	r3, r3, #1
 800462c:	085b      	lsrs	r3, r3, #1
 800462e:	e001      	b.n	8004634 <HAL_ADC_Init+0x138>
 8004630:	2380      	movs	r3, #128	; 0x80
 8004632:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8004634:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	212c      	movs	r1, #44	; 0x2c
 800463a:	5c5b      	ldrb	r3, [r3, r1]
 800463c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800463e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	4313      	orrs	r3, r2
 8004644:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2220      	movs	r2, #32
 800464a:	5c9b      	ldrb	r3, [r3, r2]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d115      	bne.n	800467c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	7e9b      	ldrb	r3, [r3, #26]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d105      	bne.n	8004664 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	2280      	movs	r2, #128	; 0x80
 800465c:	0252      	lsls	r2, r2, #9
 800465e:	4313      	orrs	r3, r2
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e00b      	b.n	800467c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004668:	2220      	movs	r2, #32
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004674:	2201      	movs	r2, #1
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b00      	cmp	r3, #0
 8004682:	d00a      	beq.n	800469a <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004688:	23e0      	movs	r3, #224	; 0xe0
 800468a:	005b      	lsls	r3, r3, #1
 800468c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8004692:	4313      	orrs	r3, r2
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	4313      	orrs	r3, r2
 8004698:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	4a65      	ldr	r2, [pc, #404]	; (8004838 <HAL_ADC_Init+0x33c>)
 80046a2:	4013      	ands	r3, r2
 80046a4:	0019      	movs	r1, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	430a      	orrs	r2, r1
 80046ae:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	0f9b      	lsrs	r3, r3, #30
 80046b6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046bc:	4313      	orrs	r3, r2
 80046be:	697a      	ldr	r2, [r7, #20]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	223c      	movs	r2, #60	; 0x3c
 80046c8:	5c9b      	ldrb	r3, [r3, r2]
 80046ca:	2b01      	cmp	r3, #1
 80046cc:	d111      	bne.n	80046f2 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	685b      	ldr	r3, [r3, #4]
 80046d2:	0f9b      	lsrs	r3, r3, #30
 80046d4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80046da:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80046e0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80046e6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	2201      	movs	r2, #1
 80046ee:	4313      	orrs	r3, r2
 80046f0:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	4a50      	ldr	r2, [pc, #320]	; (800483c <HAL_ADC_Init+0x340>)
 80046fa:	4013      	ands	r3, r2
 80046fc:	0019      	movs	r1, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	697a      	ldr	r2, [r7, #20]
 8004704:	430a      	orrs	r2, r1
 8004706:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685a      	ldr	r2, [r3, #4]
 800470c:	23c0      	movs	r3, #192	; 0xc0
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	429a      	cmp	r2, r3
 8004712:	d018      	beq.n	8004746 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8004718:	2380      	movs	r3, #128	; 0x80
 800471a:	05db      	lsls	r3, r3, #23
 800471c:	429a      	cmp	r2, r3
 800471e:	d012      	beq.n	8004746 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8004724:	2380      	movs	r3, #128	; 0x80
 8004726:	061b      	lsls	r3, r3, #24
 8004728:	429a      	cmp	r2, r3
 800472a:	d00c      	beq.n	8004746 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800472c:	4b44      	ldr	r3, [pc, #272]	; (8004840 <HAL_ADC_Init+0x344>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a44      	ldr	r2, [pc, #272]	; (8004844 <HAL_ADC_Init+0x348>)
 8004732:	4013      	ands	r3, r2
 8004734:	0019      	movs	r1, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	685a      	ldr	r2, [r3, #4]
 800473a:	23f0      	movs	r3, #240	; 0xf0
 800473c:	039b      	lsls	r3, r3, #14
 800473e:	401a      	ands	r2, r3
 8004740:	4b3f      	ldr	r3, [pc, #252]	; (8004840 <HAL_ADC_Init+0x344>)
 8004742:	430a      	orrs	r2, r1
 8004744:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6818      	ldr	r0, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474e:	001a      	movs	r2, r3
 8004750:	2100      	movs	r1, #0
 8004752:	f7ff fdf6 	bl	8004342 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6818      	ldr	r0, [r3, #0]
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475e:	493a      	ldr	r1, [pc, #232]	; (8004848 <HAL_ADC_Init+0x34c>)
 8004760:	001a      	movs	r2, r3
 8004762:	f7ff fdee 	bl	8004342 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	691b      	ldr	r3, [r3, #16]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d109      	bne.n	8004782 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	2110      	movs	r1, #16
 800477a:	4249      	negs	r1, r1
 800477c:	430a      	orrs	r2, r1
 800477e:	629a      	str	r2, [r3, #40]	; 0x28
 8004780:	e018      	b.n	80047b4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	691a      	ldr	r2, [r3, #16]
 8004786:	2380      	movs	r3, #128	; 0x80
 8004788:	039b      	lsls	r3, r3, #14
 800478a:	429a      	cmp	r2, r3
 800478c:	d112      	bne.n	80047b4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	69db      	ldr	r3, [r3, #28]
 8004798:	3b01      	subs	r3, #1
 800479a:	009b      	lsls	r3, r3, #2
 800479c:	221c      	movs	r2, #28
 800479e:	4013      	ands	r3, r2
 80047a0:	2210      	movs	r2, #16
 80047a2:	4252      	negs	r2, r2
 80047a4:	409a      	lsls	r2, r3
 80047a6:	0011      	movs	r1, r2
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	430a      	orrs	r2, r1
 80047b2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2100      	movs	r1, #0
 80047ba:	0018      	movs	r0, r3
 80047bc:	f7ff fdde 	bl	800437c <LL_ADC_GetSamplingTimeCommonChannels>
 80047c0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d10b      	bne.n	80047e2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047d4:	2203      	movs	r2, #3
 80047d6:	4393      	bics	r3, r2
 80047d8:	2201      	movs	r2, #1
 80047da:	431a      	orrs	r2, r3
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80047e0:	e01c      	b.n	800481c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e6:	2212      	movs	r2, #18
 80047e8:	4393      	bics	r3, r2
 80047ea:	2210      	movs	r2, #16
 80047ec:	431a      	orrs	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	2201      	movs	r2, #1
 80047f8:	431a      	orrs	r2, r3
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80047fe:	231f      	movs	r3, #31
 8004800:	18fb      	adds	r3, r7, r3
 8004802:	2201      	movs	r2, #1
 8004804:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8004806:	e009      	b.n	800481c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800480c:	2210      	movs	r2, #16
 800480e:	431a      	orrs	r2, r3
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004814:	231f      	movs	r3, #31
 8004816:	18fb      	adds	r3, r7, r3
 8004818:	2201      	movs	r2, #1
 800481a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 800481c:	231f      	movs	r3, #31
 800481e:	18fb      	adds	r3, r7, r3
 8004820:	781b      	ldrb	r3, [r3, #0]
}
 8004822:	0018      	movs	r0, r3
 8004824:	46bd      	mov	sp, r7
 8004826:	b008      	add	sp, #32
 8004828:	bd80      	pop	{r7, pc}
 800482a:	46c0      	nop			; (mov r8, r8)
 800482c:	20000004 	.word	0x20000004
 8004830:	00030d40 	.word	0x00030d40
 8004834:	fffffefd 	.word	0xfffffefd
 8004838:	fffe0201 	.word	0xfffe0201
 800483c:	1ffffc02 	.word	0x1ffffc02
 8004840:	40012708 	.word	0x40012708
 8004844:	ffc3ffff 	.word	0xffc3ffff
 8004848:	07ffff04 	.word	0x07ffff04

0800484c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004856:	2317      	movs	r3, #23
 8004858:	18fb      	adds	r3, r7, r3
 800485a:	2200      	movs	r2, #0
 800485c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800485e:	2300      	movs	r3, #0
 8004860:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2254      	movs	r2, #84	; 0x54
 8004866:	5c9b      	ldrb	r3, [r3, r2]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d101      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x24>
 800486c:	2302      	movs	r3, #2
 800486e:	e1c0      	b.n	8004bf2 <HAL_ADC_ConfigChannel+0x3a6>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2254      	movs	r2, #84	; 0x54
 8004874:	2101      	movs	r1, #1
 8004876:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	0018      	movs	r0, r3
 800487e:	f7ff fe2c 	bl	80044da <LL_ADC_REG_IsConversionOngoing>
 8004882:	1e03      	subs	r3, r0, #0
 8004884:	d000      	beq.n	8004888 <HAL_ADC_ConfigChannel+0x3c>
 8004886:	e1a3      	b.n	8004bd0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	685b      	ldr	r3, [r3, #4]
 800488c:	2b02      	cmp	r3, #2
 800488e:	d100      	bne.n	8004892 <HAL_ADC_ConfigChannel+0x46>
 8004890:	e143      	b.n	8004b1a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	691a      	ldr	r2, [r3, #16]
 8004896:	2380      	movs	r3, #128	; 0x80
 8004898:	061b      	lsls	r3, r3, #24
 800489a:	429a      	cmp	r2, r3
 800489c:	d004      	beq.n	80048a8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80048a2:	4ac1      	ldr	r2, [pc, #772]	; (8004ba8 <HAL_ADC_ConfigChannel+0x35c>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d108      	bne.n	80048ba <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	0019      	movs	r1, r3
 80048b2:	0010      	movs	r0, r2
 80048b4:	f7ff fd99 	bl	80043ea <LL_ADC_REG_SetSequencerChAdd>
 80048b8:	e0c9      	b.n	8004a4e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	211f      	movs	r1, #31
 80048c4:	400b      	ands	r3, r1
 80048c6:	210f      	movs	r1, #15
 80048c8:	4099      	lsls	r1, r3
 80048ca:	000b      	movs	r3, r1
 80048cc:	43db      	mvns	r3, r3
 80048ce:	4013      	ands	r3, r2
 80048d0:	0019      	movs	r1, r3
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	035b      	lsls	r3, r3, #13
 80048d8:	0b5b      	lsrs	r3, r3, #13
 80048da:	d105      	bne.n	80048e8 <HAL_ADC_ConfigChannel+0x9c>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	0e9b      	lsrs	r3, r3, #26
 80048e2:	221f      	movs	r2, #31
 80048e4:	4013      	ands	r3, r2
 80048e6:	e098      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	2201      	movs	r2, #1
 80048ee:	4013      	ands	r3, r2
 80048f0:	d000      	beq.n	80048f4 <HAL_ADC_ConfigChannel+0xa8>
 80048f2:	e091      	b.n	8004a18 <HAL_ADC_ConfigChannel+0x1cc>
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2202      	movs	r2, #2
 80048fa:	4013      	ands	r3, r2
 80048fc:	d000      	beq.n	8004900 <HAL_ADC_ConfigChannel+0xb4>
 80048fe:	e089      	b.n	8004a14 <HAL_ADC_ConfigChannel+0x1c8>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2204      	movs	r2, #4
 8004906:	4013      	ands	r3, r2
 8004908:	d000      	beq.n	800490c <HAL_ADC_ConfigChannel+0xc0>
 800490a:	e081      	b.n	8004a10 <HAL_ADC_ConfigChannel+0x1c4>
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	2208      	movs	r2, #8
 8004912:	4013      	ands	r3, r2
 8004914:	d000      	beq.n	8004918 <HAL_ADC_ConfigChannel+0xcc>
 8004916:	e079      	b.n	8004a0c <HAL_ADC_ConfigChannel+0x1c0>
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2210      	movs	r2, #16
 800491e:	4013      	ands	r3, r2
 8004920:	d000      	beq.n	8004924 <HAL_ADC_ConfigChannel+0xd8>
 8004922:	e071      	b.n	8004a08 <HAL_ADC_ConfigChannel+0x1bc>
 8004924:	683b      	ldr	r3, [r7, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	2220      	movs	r2, #32
 800492a:	4013      	ands	r3, r2
 800492c:	d000      	beq.n	8004930 <HAL_ADC_ConfigChannel+0xe4>
 800492e:	e069      	b.n	8004a04 <HAL_ADC_ConfigChannel+0x1b8>
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2240      	movs	r2, #64	; 0x40
 8004936:	4013      	ands	r3, r2
 8004938:	d000      	beq.n	800493c <HAL_ADC_ConfigChannel+0xf0>
 800493a:	e061      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x1b4>
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2280      	movs	r2, #128	; 0x80
 8004942:	4013      	ands	r3, r2
 8004944:	d000      	beq.n	8004948 <HAL_ADC_ConfigChannel+0xfc>
 8004946:	e059      	b.n	80049fc <HAL_ADC_ConfigChannel+0x1b0>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	2380      	movs	r3, #128	; 0x80
 800494e:	005b      	lsls	r3, r3, #1
 8004950:	4013      	ands	r3, r2
 8004952:	d151      	bne.n	80049f8 <HAL_ADC_ConfigChannel+0x1ac>
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	2380      	movs	r3, #128	; 0x80
 800495a:	009b      	lsls	r3, r3, #2
 800495c:	4013      	ands	r3, r2
 800495e:	d149      	bne.n	80049f4 <HAL_ADC_ConfigChannel+0x1a8>
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	2380      	movs	r3, #128	; 0x80
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	4013      	ands	r3, r2
 800496a:	d141      	bne.n	80049f0 <HAL_ADC_ConfigChannel+0x1a4>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	2380      	movs	r3, #128	; 0x80
 8004972:	011b      	lsls	r3, r3, #4
 8004974:	4013      	ands	r3, r2
 8004976:	d139      	bne.n	80049ec <HAL_ADC_ConfigChannel+0x1a0>
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	2380      	movs	r3, #128	; 0x80
 800497e:	015b      	lsls	r3, r3, #5
 8004980:	4013      	ands	r3, r2
 8004982:	d131      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x19c>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	2380      	movs	r3, #128	; 0x80
 800498a:	019b      	lsls	r3, r3, #6
 800498c:	4013      	ands	r3, r2
 800498e:	d129      	bne.n	80049e4 <HAL_ADC_ConfigChannel+0x198>
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	2380      	movs	r3, #128	; 0x80
 8004996:	01db      	lsls	r3, r3, #7
 8004998:	4013      	ands	r3, r2
 800499a:	d121      	bne.n	80049e0 <HAL_ADC_ConfigChannel+0x194>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	2380      	movs	r3, #128	; 0x80
 80049a2:	021b      	lsls	r3, r3, #8
 80049a4:	4013      	ands	r3, r2
 80049a6:	d119      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x190>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	2380      	movs	r3, #128	; 0x80
 80049ae:	025b      	lsls	r3, r3, #9
 80049b0:	4013      	ands	r3, r2
 80049b2:	d111      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x18c>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	2380      	movs	r3, #128	; 0x80
 80049ba:	029b      	lsls	r3, r3, #10
 80049bc:	4013      	ands	r3, r2
 80049be:	d109      	bne.n	80049d4 <HAL_ADC_ConfigChannel+0x188>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681a      	ldr	r2, [r3, #0]
 80049c4:	2380      	movs	r3, #128	; 0x80
 80049c6:	02db      	lsls	r3, r3, #11
 80049c8:	4013      	ands	r3, r2
 80049ca:	d001      	beq.n	80049d0 <HAL_ADC_ConfigChannel+0x184>
 80049cc:	2312      	movs	r3, #18
 80049ce:	e024      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049d0:	2300      	movs	r3, #0
 80049d2:	e022      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049d4:	2311      	movs	r3, #17
 80049d6:	e020      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049d8:	2310      	movs	r3, #16
 80049da:	e01e      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049dc:	230f      	movs	r3, #15
 80049de:	e01c      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049e0:	230e      	movs	r3, #14
 80049e2:	e01a      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049e4:	230d      	movs	r3, #13
 80049e6:	e018      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049e8:	230c      	movs	r3, #12
 80049ea:	e016      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049ec:	230b      	movs	r3, #11
 80049ee:	e014      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049f0:	230a      	movs	r3, #10
 80049f2:	e012      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049f4:	2309      	movs	r3, #9
 80049f6:	e010      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049f8:	2308      	movs	r3, #8
 80049fa:	e00e      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 80049fc:	2307      	movs	r3, #7
 80049fe:	e00c      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 8004a00:	2306      	movs	r3, #6
 8004a02:	e00a      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 8004a04:	2305      	movs	r3, #5
 8004a06:	e008      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 8004a08:	2304      	movs	r3, #4
 8004a0a:	e006      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e004      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 8004a10:	2302      	movs	r3, #2
 8004a12:	e002      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_ADC_ConfigChannel+0x1ce>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	6852      	ldr	r2, [r2, #4]
 8004a1e:	201f      	movs	r0, #31
 8004a20:	4002      	ands	r2, r0
 8004a22:	4093      	lsls	r3, r2
 8004a24:	000a      	movs	r2, r1
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	089b      	lsrs	r3, r3, #2
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	69db      	ldr	r3, [r3, #28]
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d808      	bhi.n	8004a4e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6818      	ldr	r0, [r3, #0]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	6859      	ldr	r1, [r3, #4]
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	001a      	movs	r2, r3
 8004a4a:	f7ff fcae 	bl	80043aa <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6818      	ldr	r0, [r3, #0]
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	6819      	ldr	r1, [r3, #0]
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	001a      	movs	r2, r3
 8004a5c:	f7ff fce8 	bl	8004430 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	db00      	blt.n	8004a6a <HAL_ADC_ConfigChannel+0x21e>
 8004a68:	e0bc      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a6a:	4b50      	ldr	r3, [pc, #320]	; (8004bac <HAL_ADC_ConfigChannel+0x360>)
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f7ff fc5b 	bl	8004328 <LL_ADC_GetCommonPathInternalCh>
 8004a72:	0003      	movs	r3, r0
 8004a74:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a4d      	ldr	r2, [pc, #308]	; (8004bb0 <HAL_ADC_ConfigChannel+0x364>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d122      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	2380      	movs	r3, #128	; 0x80
 8004a84:	041b      	lsls	r3, r3, #16
 8004a86:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004a88:	d11d      	bne.n	8004ac6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	2280      	movs	r2, #128	; 0x80
 8004a8e:	0412      	lsls	r2, r2, #16
 8004a90:	4313      	orrs	r3, r2
 8004a92:	4a46      	ldr	r2, [pc, #280]	; (8004bac <HAL_ADC_ConfigChannel+0x360>)
 8004a94:	0019      	movs	r1, r3
 8004a96:	0010      	movs	r0, r2
 8004a98:	f7ff fc32 	bl	8004300 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a9c:	4b45      	ldr	r3, [pc, #276]	; (8004bb4 <HAL_ADC_ConfigChannel+0x368>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4945      	ldr	r1, [pc, #276]	; (8004bb8 <HAL_ADC_ConfigChannel+0x36c>)
 8004aa2:	0018      	movs	r0, r3
 8004aa4:	f7fb fb48 	bl	8000138 <__udivsi3>
 8004aa8:	0003      	movs	r3, r0
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	0013      	movs	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	189b      	adds	r3, r3, r2
 8004ab2:	009b      	lsls	r3, r3, #2
 8004ab4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004ab6:	e002      	b.n	8004abe <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	3b01      	subs	r3, #1
 8004abc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1f9      	bne.n	8004ab8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8004ac4:	e08e      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	4a3c      	ldr	r2, [pc, #240]	; (8004bbc <HAL_ADC_ConfigChannel+0x370>)
 8004acc:	4293      	cmp	r3, r2
 8004ace:	d10e      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	2380      	movs	r3, #128	; 0x80
 8004ad4:	045b      	lsls	r3, r3, #17
 8004ad6:	4013      	ands	r3, r2
 8004ad8:	d109      	bne.n	8004aee <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	2280      	movs	r2, #128	; 0x80
 8004ade:	0452      	lsls	r2, r2, #17
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	4a32      	ldr	r2, [pc, #200]	; (8004bac <HAL_ADC_ConfigChannel+0x360>)
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	0010      	movs	r0, r2
 8004ae8:	f7ff fc0a 	bl	8004300 <LL_ADC_SetCommonPathInternalCh>
 8004aec:	e07a      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a33      	ldr	r2, [pc, #204]	; (8004bc0 <HAL_ADC_ConfigChannel+0x374>)
 8004af4:	4293      	cmp	r3, r2
 8004af6:	d000      	beq.n	8004afa <HAL_ADC_ConfigChannel+0x2ae>
 8004af8:	e074      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004afa:	693a      	ldr	r2, [r7, #16]
 8004afc:	2380      	movs	r3, #128	; 0x80
 8004afe:	03db      	lsls	r3, r3, #15
 8004b00:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8004b02:	d000      	beq.n	8004b06 <HAL_ADC_ConfigChannel+0x2ba>
 8004b04:	e06e      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b06:	693b      	ldr	r3, [r7, #16]
 8004b08:	2280      	movs	r2, #128	; 0x80
 8004b0a:	03d2      	lsls	r2, r2, #15
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	4a27      	ldr	r2, [pc, #156]	; (8004bac <HAL_ADC_ConfigChannel+0x360>)
 8004b10:	0019      	movs	r1, r3
 8004b12:	0010      	movs	r0, r2
 8004b14:	f7ff fbf4 	bl	8004300 <LL_ADC_SetCommonPathInternalCh>
 8004b18:	e064      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	2380      	movs	r3, #128	; 0x80
 8004b20:	061b      	lsls	r3, r3, #24
 8004b22:	429a      	cmp	r2, r3
 8004b24:	d004      	beq.n	8004b30 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8004b2a:	4a1f      	ldr	r2, [pc, #124]	; (8004ba8 <HAL_ADC_ConfigChannel+0x35c>)
 8004b2c:	4293      	cmp	r3, r2
 8004b2e:	d107      	bne.n	8004b40 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0019      	movs	r1, r3
 8004b3a:	0010      	movs	r0, r2
 8004b3c:	f7ff fc66 	bl	800440c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	da4d      	bge.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b48:	4b18      	ldr	r3, [pc, #96]	; (8004bac <HAL_ADC_ConfigChannel+0x360>)
 8004b4a:	0018      	movs	r0, r3
 8004b4c:	f7ff fbec 	bl	8004328 <LL_ADC_GetCommonPathInternalCh>
 8004b50:	0003      	movs	r3, r0
 8004b52:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a15      	ldr	r2, [pc, #84]	; (8004bb0 <HAL_ADC_ConfigChannel+0x364>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d108      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	4a18      	ldr	r2, [pc, #96]	; (8004bc4 <HAL_ADC_ConfigChannel+0x378>)
 8004b62:	4013      	ands	r3, r2
 8004b64:	4a11      	ldr	r2, [pc, #68]	; (8004bac <HAL_ADC_ConfigChannel+0x360>)
 8004b66:	0019      	movs	r1, r3
 8004b68:	0010      	movs	r0, r2
 8004b6a:	f7ff fbc9 	bl	8004300 <LL_ADC_SetCommonPathInternalCh>
 8004b6e:	e039      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a11      	ldr	r2, [pc, #68]	; (8004bbc <HAL_ADC_ConfigChannel+0x370>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d108      	bne.n	8004b8c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	4a12      	ldr	r2, [pc, #72]	; (8004bc8 <HAL_ADC_ConfigChannel+0x37c>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <HAL_ADC_ConfigChannel+0x360>)
 8004b82:	0019      	movs	r1, r3
 8004b84:	0010      	movs	r0, r2
 8004b86:	f7ff fbbb 	bl	8004300 <LL_ADC_SetCommonPathInternalCh>
 8004b8a:	e02b      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0b      	ldr	r2, [pc, #44]	; (8004bc0 <HAL_ADC_ConfigChannel+0x374>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d126      	bne.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	4a0c      	ldr	r2, [pc, #48]	; (8004bcc <HAL_ADC_ConfigChannel+0x380>)
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	4a03      	ldr	r2, [pc, #12]	; (8004bac <HAL_ADC_ConfigChannel+0x360>)
 8004b9e:	0019      	movs	r1, r3
 8004ba0:	0010      	movs	r0, r2
 8004ba2:	f7ff fbad 	bl	8004300 <LL_ADC_SetCommonPathInternalCh>
 8004ba6:	e01d      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x398>
 8004ba8:	80000004 	.word	0x80000004
 8004bac:	40012708 	.word	0x40012708
 8004bb0:	b0001000 	.word	0xb0001000
 8004bb4:	20000004 	.word	0x20000004
 8004bb8:	00030d40 	.word	0x00030d40
 8004bbc:	b8004000 	.word	0xb8004000
 8004bc0:	b4002000 	.word	0xb4002000
 8004bc4:	ff7fffff 	.word	0xff7fffff
 8004bc8:	feffffff 	.word	0xfeffffff
 8004bcc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	431a      	orrs	r2, r3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004bdc:	2317      	movs	r3, #23
 8004bde:	18fb      	adds	r3, r7, r3
 8004be0:	2201      	movs	r2, #1
 8004be2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2254      	movs	r2, #84	; 0x54
 8004be8:	2100      	movs	r1, #0
 8004bea:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8004bec:	2317      	movs	r3, #23
 8004bee:	18fb      	adds	r3, r7, r3
 8004bf0:	781b      	ldrb	r3, [r3, #0]
}
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b006      	add	sp, #24
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)

08004bfc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b082      	sub	sp, #8
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	0002      	movs	r2, r0
 8004c04:	1dfb      	adds	r3, r7, #7
 8004c06:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c08:	1dfb      	adds	r3, r7, #7
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b7f      	cmp	r3, #127	; 0x7f
 8004c0e:	d809      	bhi.n	8004c24 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c10:	1dfb      	adds	r3, r7, #7
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	001a      	movs	r2, r3
 8004c16:	231f      	movs	r3, #31
 8004c18:	401a      	ands	r2, r3
 8004c1a:	4b04      	ldr	r3, [pc, #16]	; (8004c2c <__NVIC_EnableIRQ+0x30>)
 8004c1c:	2101      	movs	r1, #1
 8004c1e:	4091      	lsls	r1, r2
 8004c20:	000a      	movs	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004c24:	46c0      	nop			; (mov r8, r8)
 8004c26:	46bd      	mov	sp, r7
 8004c28:	b002      	add	sp, #8
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	e000e100 	.word	0xe000e100

08004c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	0002      	movs	r2, r0
 8004c38:	6039      	str	r1, [r7, #0]
 8004c3a:	1dfb      	adds	r3, r7, #7
 8004c3c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004c3e:	1dfb      	adds	r3, r7, #7
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	2b7f      	cmp	r3, #127	; 0x7f
 8004c44:	d828      	bhi.n	8004c98 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c46:	4a2f      	ldr	r2, [pc, #188]	; (8004d04 <__NVIC_SetPriority+0xd4>)
 8004c48:	1dfb      	adds	r3, r7, #7
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	b25b      	sxtb	r3, r3
 8004c4e:	089b      	lsrs	r3, r3, #2
 8004c50:	33c0      	adds	r3, #192	; 0xc0
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	589b      	ldr	r3, [r3, r2]
 8004c56:	1dfa      	adds	r2, r7, #7
 8004c58:	7812      	ldrb	r2, [r2, #0]
 8004c5a:	0011      	movs	r1, r2
 8004c5c:	2203      	movs	r2, #3
 8004c5e:	400a      	ands	r2, r1
 8004c60:	00d2      	lsls	r2, r2, #3
 8004c62:	21ff      	movs	r1, #255	; 0xff
 8004c64:	4091      	lsls	r1, r2
 8004c66:	000a      	movs	r2, r1
 8004c68:	43d2      	mvns	r2, r2
 8004c6a:	401a      	ands	r2, r3
 8004c6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	019b      	lsls	r3, r3, #6
 8004c72:	22ff      	movs	r2, #255	; 0xff
 8004c74:	401a      	ands	r2, r3
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781b      	ldrb	r3, [r3, #0]
 8004c7a:	0018      	movs	r0, r3
 8004c7c:	2303      	movs	r3, #3
 8004c7e:	4003      	ands	r3, r0
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c84:	481f      	ldr	r0, [pc, #124]	; (8004d04 <__NVIC_SetPriority+0xd4>)
 8004c86:	1dfb      	adds	r3, r7, #7
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	b25b      	sxtb	r3, r3
 8004c8c:	089b      	lsrs	r3, r3, #2
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	33c0      	adds	r3, #192	; 0xc0
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004c96:	e031      	b.n	8004cfc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <__NVIC_SetPriority+0xd8>)
 8004c9a:	1dfb      	adds	r3, r7, #7
 8004c9c:	781b      	ldrb	r3, [r3, #0]
 8004c9e:	0019      	movs	r1, r3
 8004ca0:	230f      	movs	r3, #15
 8004ca2:	400b      	ands	r3, r1
 8004ca4:	3b08      	subs	r3, #8
 8004ca6:	089b      	lsrs	r3, r3, #2
 8004ca8:	3306      	adds	r3, #6
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	18d3      	adds	r3, r2, r3
 8004cae:	3304      	adds	r3, #4
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	1dfa      	adds	r2, r7, #7
 8004cb4:	7812      	ldrb	r2, [r2, #0]
 8004cb6:	0011      	movs	r1, r2
 8004cb8:	2203      	movs	r2, #3
 8004cba:	400a      	ands	r2, r1
 8004cbc:	00d2      	lsls	r2, r2, #3
 8004cbe:	21ff      	movs	r1, #255	; 0xff
 8004cc0:	4091      	lsls	r1, r2
 8004cc2:	000a      	movs	r2, r1
 8004cc4:	43d2      	mvns	r2, r2
 8004cc6:	401a      	ands	r2, r3
 8004cc8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	019b      	lsls	r3, r3, #6
 8004cce:	22ff      	movs	r2, #255	; 0xff
 8004cd0:	401a      	ands	r2, r3
 8004cd2:	1dfb      	adds	r3, r7, #7
 8004cd4:	781b      	ldrb	r3, [r3, #0]
 8004cd6:	0018      	movs	r0, r3
 8004cd8:	2303      	movs	r3, #3
 8004cda:	4003      	ands	r3, r0
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ce0:	4809      	ldr	r0, [pc, #36]	; (8004d08 <__NVIC_SetPriority+0xd8>)
 8004ce2:	1dfb      	adds	r3, r7, #7
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	001c      	movs	r4, r3
 8004ce8:	230f      	movs	r3, #15
 8004cea:	4023      	ands	r3, r4
 8004cec:	3b08      	subs	r3, #8
 8004cee:	089b      	lsrs	r3, r3, #2
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	3306      	adds	r3, #6
 8004cf4:	009b      	lsls	r3, r3, #2
 8004cf6:	18c3      	adds	r3, r0, r3
 8004cf8:	3304      	adds	r3, #4
 8004cfa:	601a      	str	r2, [r3, #0]
}
 8004cfc:	46c0      	nop			; (mov r8, r8)
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	b003      	add	sp, #12
 8004d02:	bd90      	pop	{r4, r7, pc}
 8004d04:	e000e100 	.word	0xe000e100
 8004d08:	e000ed00 	.word	0xe000ed00

08004d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	1e5a      	subs	r2, r3, #1
 8004d18:	2380      	movs	r3, #128	; 0x80
 8004d1a:	045b      	lsls	r3, r3, #17
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d301      	bcc.n	8004d24 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d20:	2301      	movs	r3, #1
 8004d22:	e010      	b.n	8004d46 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d24:	4b0a      	ldr	r3, [pc, #40]	; (8004d50 <SysTick_Config+0x44>)
 8004d26:	687a      	ldr	r2, [r7, #4]
 8004d28:	3a01      	subs	r2, #1
 8004d2a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	425b      	negs	r3, r3
 8004d30:	2103      	movs	r1, #3
 8004d32:	0018      	movs	r0, r3
 8004d34:	f7ff ff7c 	bl	8004c30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d38:	4b05      	ldr	r3, [pc, #20]	; (8004d50 <SysTick_Config+0x44>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d3e:	4b04      	ldr	r3, [pc, #16]	; (8004d50 <SysTick_Config+0x44>)
 8004d40:	2207      	movs	r2, #7
 8004d42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	0018      	movs	r0, r3
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	b002      	add	sp, #8
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	46c0      	nop			; (mov r8, r8)
 8004d50:	e000e010 	.word	0xe000e010

08004d54 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60b9      	str	r1, [r7, #8]
 8004d5c:	607a      	str	r2, [r7, #4]
 8004d5e:	210f      	movs	r1, #15
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	1c02      	adds	r2, r0, #0
 8004d64:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	187b      	adds	r3, r7, r1
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b25b      	sxtb	r3, r3
 8004d6e:	0011      	movs	r1, r2
 8004d70:	0018      	movs	r0, r3
 8004d72:	f7ff ff5d 	bl	8004c30 <__NVIC_SetPriority>
}
 8004d76:	46c0      	nop			; (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b004      	add	sp, #16
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b082      	sub	sp, #8
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	0002      	movs	r2, r0
 8004d86:	1dfb      	adds	r3, r7, #7
 8004d88:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d8a:	1dfb      	adds	r3, r7, #7
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	b25b      	sxtb	r3, r3
 8004d90:	0018      	movs	r0, r3
 8004d92:	f7ff ff33 	bl	8004bfc <__NVIC_EnableIRQ>
}
 8004d96:	46c0      	nop			; (mov r8, r8)
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	b002      	add	sp, #8
 8004d9c:	bd80      	pop	{r7, pc}

08004d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004d9e:	b580      	push	{r7, lr}
 8004da0:	b082      	sub	sp, #8
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7ff ffaf 	bl	8004d0c <SysTick_Config>
 8004dae:	0003      	movs	r3, r0
}
 8004db0:	0018      	movs	r0, r3
 8004db2:	46bd      	mov	sp, r7
 8004db4:	b002      	add	sp, #8
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e077      	b.n	8004eba <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a3d      	ldr	r2, [pc, #244]	; (8004ec4 <HAL_DMA_Init+0x10c>)
 8004dd0:	4694      	mov	ip, r2
 8004dd2:	4463      	add	r3, ip
 8004dd4:	2114      	movs	r1, #20
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f7fb f9ae 	bl	8000138 <__udivsi3>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	009a      	lsls	r2, r3, #2
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2225      	movs	r2, #37	; 0x25
 8004de8:	2102      	movs	r1, #2
 8004dea:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4934      	ldr	r1, [pc, #208]	; (8004ec8 <HAL_DMA_Init+0x110>)
 8004df8:	400a      	ands	r2, r1
 8004dfa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6819      	ldr	r1, [r3, #0]
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	689a      	ldr	r2, [r3, #8]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	68db      	ldr	r3, [r3, #12]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	691b      	ldr	r3, [r3, #16]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	695b      	ldr	r3, [r3, #20]
 8004e16:	431a      	orrs	r2, r3
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	699b      	ldr	r3, [r3, #24]
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	431a      	orrs	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a1b      	ldr	r3, [r3, #32]
 8004e28:	431a      	orrs	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	0018      	movs	r0, r3
 8004e36:	f000 f8fb 	bl	8005030 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689a      	ldr	r2, [r3, #8]
 8004e3e:	2380      	movs	r3, #128	; 0x80
 8004e40:	01db      	lsls	r3, r3, #7
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d102      	bne.n	8004e4c <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e54:	213f      	movs	r1, #63	; 0x3f
 8004e56:	400a      	ands	r2, r1
 8004e58:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004e62:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d011      	beq.n	8004e90 <HAL_DMA_Init+0xd8>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d80d      	bhi.n	8004e90 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	0018      	movs	r0, r3
 8004e78:	f000 f906 	bl	8005088 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e80:	2200      	movs	r2, #0
 8004e82:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	e008      	b.n	8004ea2 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2225      	movs	r2, #37	; 0x25
 8004eac:	2101      	movs	r1, #1
 8004eae:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2224      	movs	r2, #36	; 0x24
 8004eb4:	2100      	movs	r1, #0
 8004eb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	0018      	movs	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	b002      	add	sp, #8
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	46c0      	nop			; (mov r8, r8)
 8004ec4:	bffdfff8 	.word	0xbffdfff8
 8004ec8:	ffff800f 	.word	0xffff800f

08004ecc <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8004ed4:	4b55      	ldr	r3, [pc, #340]	; (800502c <HAL_DMA_IRQHandler+0x160>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ee6:	221c      	movs	r2, #28
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2204      	movs	r2, #4
 8004eec:	409a      	lsls	r2, r3
 8004eee:	0013      	movs	r3, r2
 8004ef0:	68fa      	ldr	r2, [r7, #12]
 8004ef2:	4013      	ands	r3, r2
 8004ef4:	d027      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x7a>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2204      	movs	r2, #4
 8004efa:	4013      	ands	r3, r2
 8004efc:	d023      	beq.n	8004f46 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	2220      	movs	r2, #32
 8004f06:	4013      	ands	r3, r2
 8004f08:	d107      	bne.n	8004f1a <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2104      	movs	r1, #4
 8004f16:	438a      	bics	r2, r1
 8004f18:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 8004f1a:	4b44      	ldr	r3, [pc, #272]	; (800502c <HAL_DMA_IRQHandler+0x160>)
 8004f1c:	6859      	ldr	r1, [r3, #4]
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f22:	221c      	movs	r2, #28
 8004f24:	4013      	ands	r3, r2
 8004f26:	2204      	movs	r2, #4
 8004f28:	409a      	lsls	r2, r3
 8004f2a:	4b40      	ldr	r3, [pc, #256]	; (800502c <HAL_DMA_IRQHandler+0x160>)
 8004f2c:	430a      	orrs	r2, r1
 8004f2e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d100      	bne.n	8004f3a <HAL_DMA_IRQHandler+0x6e>
 8004f38:	e073      	b.n	8005022 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	0010      	movs	r0, r2
 8004f42:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8004f44:	e06d      	b.n	8005022 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f4a:	221c      	movs	r2, #28
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	2202      	movs	r2, #2
 8004f50:	409a      	lsls	r2, r3
 8004f52:	0013      	movs	r3, r2
 8004f54:	68fa      	ldr	r2, [r7, #12]
 8004f56:	4013      	ands	r3, r2
 8004f58:	d02e      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0xec>
 8004f5a:	68bb      	ldr	r3, [r7, #8]
 8004f5c:	2202      	movs	r2, #2
 8004f5e:	4013      	ands	r3, r2
 8004f60:	d02a      	beq.n	8004fb8 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	4013      	ands	r3, r2
 8004f6c:	d10b      	bne.n	8004f86 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	210a      	movs	r1, #10
 8004f7a:	438a      	bics	r2, r1
 8004f7c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2225      	movs	r2, #37	; 0x25
 8004f82:	2101      	movs	r1, #1
 8004f84:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8004f86:	4b29      	ldr	r3, [pc, #164]	; (800502c <HAL_DMA_IRQHandler+0x160>)
 8004f88:	6859      	ldr	r1, [r3, #4]
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	221c      	movs	r2, #28
 8004f90:	4013      	ands	r3, r2
 8004f92:	2202      	movs	r2, #2
 8004f94:	409a      	lsls	r2, r3
 8004f96:	4b25      	ldr	r3, [pc, #148]	; (800502c <HAL_DMA_IRQHandler+0x160>)
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2224      	movs	r2, #36	; 0x24
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d03a      	beq.n	8005022 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	0010      	movs	r0, r2
 8004fb4:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8004fb6:	e034      	b.n	8005022 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	221c      	movs	r2, #28
 8004fbe:	4013      	ands	r3, r2
 8004fc0:	2208      	movs	r2, #8
 8004fc2:	409a      	lsls	r2, r3
 8004fc4:	0013      	movs	r3, r2
 8004fc6:	68fa      	ldr	r2, [r7, #12]
 8004fc8:	4013      	ands	r3, r2
 8004fca:	d02b      	beq.n	8005024 <HAL_DMA_IRQHandler+0x158>
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	2208      	movs	r2, #8
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	d027      	beq.n	8005024 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	210e      	movs	r1, #14
 8004fe0:	438a      	bics	r2, r1
 8004fe2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_DMA_IRQHandler+0x160>)
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fec:	221c      	movs	r2, #28
 8004fee:	4013      	ands	r3, r2
 8004ff0:	2201      	movs	r2, #1
 8004ff2:	409a      	lsls	r2, r3
 8004ff4:	4b0d      	ldr	r3, [pc, #52]	; (800502c <HAL_DMA_IRQHandler+0x160>)
 8004ff6:	430a      	orrs	r2, r1
 8004ff8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2225      	movs	r2, #37	; 0x25
 8005004:	2101      	movs	r1, #1
 8005006:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2224      	movs	r2, #36	; 0x24
 800500c:	2100      	movs	r1, #0
 800500e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	0010      	movs	r0, r2
 8005020:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005022:	46c0      	nop			; (mov r8, r8)
 8005024:	46c0      	nop			; (mov r8, r8)
}
 8005026:	46bd      	mov	sp, r7
 8005028:	b004      	add	sp, #16
 800502a:	bd80      	pop	{r7, pc}
 800502c:	40020000 	.word	0x40020000

08005030 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b084      	sub	sp, #16
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	089b      	lsrs	r3, r3, #2
 800503e:	4a10      	ldr	r2, [pc, #64]	; (8005080 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8005040:	4694      	mov	ip, r2
 8005042:	4463      	add	r3, ip
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	001a      	movs	r2, r3
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	001a      	movs	r2, r3
 8005052:	23ff      	movs	r3, #255	; 0xff
 8005054:	4013      	ands	r3, r2
 8005056:	3b08      	subs	r3, #8
 8005058:	2114      	movs	r1, #20
 800505a:	0018      	movs	r0, r3
 800505c:	f7fb f86c 	bl	8000138 <__udivsi3>
 8005060:	0003      	movs	r3, r0
 8005062:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a07      	ldr	r2, [pc, #28]	; (8005084 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8005068:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	221f      	movs	r2, #31
 800506e:	4013      	ands	r3, r2
 8005070:	2201      	movs	r2, #1
 8005072:	409a      	lsls	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8005078:	46c0      	nop			; (mov r8, r8)
 800507a:	46bd      	mov	sp, r7
 800507c:	b004      	add	sp, #16
 800507e:	bd80      	pop	{r7, pc}
 8005080:	10008200 	.word	0x10008200
 8005084:	40020880 	.word	0x40020880

08005088 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005088:	b580      	push	{r7, lr}
 800508a:	b084      	sub	sp, #16
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	223f      	movs	r2, #63	; 0x3f
 8005096:	4013      	ands	r3, r2
 8005098:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	4a0a      	ldr	r2, [pc, #40]	; (80050c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800509e:	4694      	mov	ip, r2
 80050a0:	4463      	add	r3, ip
 80050a2:	009b      	lsls	r3, r3, #2
 80050a4:	001a      	movs	r2, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	4a07      	ldr	r2, [pc, #28]	; (80050cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3b01      	subs	r3, #1
 80050b4:	2203      	movs	r2, #3
 80050b6:	4013      	ands	r3, r2
 80050b8:	2201      	movs	r2, #1
 80050ba:	409a      	lsls	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	659a      	str	r2, [r3, #88]	; 0x58
}
 80050c0:	46c0      	nop			; (mov r8, r8)
 80050c2:	46bd      	mov	sp, r7
 80050c4:	b004      	add	sp, #16
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	1000823f 	.word	0x1000823f
 80050cc:	40020940 	.word	0x40020940

080050d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
 80050d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80050da:	2300      	movs	r3, #0
 80050dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80050de:	e147      	b.n	8005370 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	2101      	movs	r1, #1
 80050e6:	697a      	ldr	r2, [r7, #20]
 80050e8:	4091      	lsls	r1, r2
 80050ea:	000a      	movs	r2, r1
 80050ec:	4013      	ands	r3, r2
 80050ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d100      	bne.n	80050f8 <HAL_GPIO_Init+0x28>
 80050f6:	e138      	b.n	800536a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	685b      	ldr	r3, [r3, #4]
 80050fc:	2203      	movs	r2, #3
 80050fe:	4013      	ands	r3, r2
 8005100:	2b01      	cmp	r3, #1
 8005102:	d005      	beq.n	8005110 <HAL_GPIO_Init+0x40>
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2203      	movs	r2, #3
 800510a:	4013      	ands	r3, r2
 800510c:	2b02      	cmp	r3, #2
 800510e:	d130      	bne.n	8005172 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	689b      	ldr	r3, [r3, #8]
 8005114:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	2203      	movs	r2, #3
 800511c:	409a      	lsls	r2, r3
 800511e:	0013      	movs	r3, r2
 8005120:	43da      	mvns	r2, r3
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	4013      	ands	r3, r2
 8005126:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68da      	ldr	r2, [r3, #12]
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	005b      	lsls	r3, r3, #1
 8005130:	409a      	lsls	r2, r3
 8005132:	0013      	movs	r3, r2
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	4313      	orrs	r3, r2
 8005138:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	693a      	ldr	r2, [r7, #16]
 800513e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	685b      	ldr	r3, [r3, #4]
 8005144:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005146:	2201      	movs	r2, #1
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	409a      	lsls	r2, r3
 800514c:	0013      	movs	r3, r2
 800514e:	43da      	mvns	r2, r3
 8005150:	693b      	ldr	r3, [r7, #16]
 8005152:	4013      	ands	r3, r2
 8005154:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	091b      	lsrs	r3, r3, #4
 800515c:	2201      	movs	r2, #1
 800515e:	401a      	ands	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	409a      	lsls	r2, r3
 8005164:	0013      	movs	r3, r2
 8005166:	693a      	ldr	r2, [r7, #16]
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	2203      	movs	r2, #3
 8005178:	4013      	ands	r3, r2
 800517a:	2b03      	cmp	r3, #3
 800517c:	d017      	beq.n	80051ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68db      	ldr	r3, [r3, #12]
 8005182:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	005b      	lsls	r3, r3, #1
 8005188:	2203      	movs	r2, #3
 800518a:	409a      	lsls	r2, r3
 800518c:	0013      	movs	r3, r2
 800518e:	43da      	mvns	r2, r3
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	4013      	ands	r3, r2
 8005194:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	689a      	ldr	r2, [r3, #8]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	005b      	lsls	r3, r3, #1
 800519e:	409a      	lsls	r2, r3
 80051a0:	0013      	movs	r3, r2
 80051a2:	693a      	ldr	r2, [r7, #16]
 80051a4:	4313      	orrs	r3, r2
 80051a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2203      	movs	r2, #3
 80051b4:	4013      	ands	r3, r2
 80051b6:	2b02      	cmp	r3, #2
 80051b8:	d123      	bne.n	8005202 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	08da      	lsrs	r2, r3, #3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	3208      	adds	r2, #8
 80051c2:	0092      	lsls	r2, r2, #2
 80051c4:	58d3      	ldr	r3, [r2, r3]
 80051c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	2207      	movs	r2, #7
 80051cc:	4013      	ands	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	220f      	movs	r2, #15
 80051d2:	409a      	lsls	r2, r3
 80051d4:	0013      	movs	r3, r2
 80051d6:	43da      	mvns	r2, r3
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	4013      	ands	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2107      	movs	r1, #7
 80051e6:	400b      	ands	r3, r1
 80051e8:	009b      	lsls	r3, r3, #2
 80051ea:	409a      	lsls	r2, r3
 80051ec:	0013      	movs	r3, r2
 80051ee:	693a      	ldr	r2, [r7, #16]
 80051f0:	4313      	orrs	r3, r2
 80051f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80051f4:	697b      	ldr	r3, [r7, #20]
 80051f6:	08da      	lsrs	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	3208      	adds	r2, #8
 80051fc:	0092      	lsls	r2, r2, #2
 80051fe:	6939      	ldr	r1, [r7, #16]
 8005200:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005208:	697b      	ldr	r3, [r7, #20]
 800520a:	005b      	lsls	r3, r3, #1
 800520c:	2203      	movs	r2, #3
 800520e:	409a      	lsls	r2, r3
 8005210:	0013      	movs	r3, r2
 8005212:	43da      	mvns	r2, r3
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4013      	ands	r3, r2
 8005218:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	2203      	movs	r2, #3
 8005220:	401a      	ands	r2, r3
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	005b      	lsls	r3, r3, #1
 8005226:	409a      	lsls	r2, r3
 8005228:	0013      	movs	r3, r2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	693a      	ldr	r2, [r7, #16]
 8005234:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	685a      	ldr	r2, [r3, #4]
 800523a:	23c0      	movs	r3, #192	; 0xc0
 800523c:	029b      	lsls	r3, r3, #10
 800523e:	4013      	ands	r3, r2
 8005240:	d100      	bne.n	8005244 <HAL_GPIO_Init+0x174>
 8005242:	e092      	b.n	800536a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005244:	4a50      	ldr	r2, [pc, #320]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 8005246:	697b      	ldr	r3, [r7, #20]
 8005248:	089b      	lsrs	r3, r3, #2
 800524a:	3318      	adds	r3, #24
 800524c:	009b      	lsls	r3, r3, #2
 800524e:	589b      	ldr	r3, [r3, r2]
 8005250:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	2203      	movs	r2, #3
 8005256:	4013      	ands	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	220f      	movs	r2, #15
 800525c:	409a      	lsls	r2, r3
 800525e:	0013      	movs	r3, r2
 8005260:	43da      	mvns	r2, r3
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4013      	ands	r3, r2
 8005266:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	23a0      	movs	r3, #160	; 0xa0
 800526c:	05db      	lsls	r3, r3, #23
 800526e:	429a      	cmp	r2, r3
 8005270:	d013      	beq.n	800529a <HAL_GPIO_Init+0x1ca>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a45      	ldr	r2, [pc, #276]	; (800538c <HAL_GPIO_Init+0x2bc>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d00d      	beq.n	8005296 <HAL_GPIO_Init+0x1c6>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a44      	ldr	r2, [pc, #272]	; (8005390 <HAL_GPIO_Init+0x2c0>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d007      	beq.n	8005292 <HAL_GPIO_Init+0x1c2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a43      	ldr	r2, [pc, #268]	; (8005394 <HAL_GPIO_Init+0x2c4>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d101      	bne.n	800528e <HAL_GPIO_Init+0x1be>
 800528a:	2303      	movs	r3, #3
 800528c:	e006      	b.n	800529c <HAL_GPIO_Init+0x1cc>
 800528e:	2305      	movs	r3, #5
 8005290:	e004      	b.n	800529c <HAL_GPIO_Init+0x1cc>
 8005292:	2302      	movs	r3, #2
 8005294:	e002      	b.n	800529c <HAL_GPIO_Init+0x1cc>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <HAL_GPIO_Init+0x1cc>
 800529a:	2300      	movs	r3, #0
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	2103      	movs	r1, #3
 80052a0:	400a      	ands	r2, r1
 80052a2:	00d2      	lsls	r2, r2, #3
 80052a4:	4093      	lsls	r3, r2
 80052a6:	693a      	ldr	r2, [r7, #16]
 80052a8:	4313      	orrs	r3, r2
 80052aa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80052ac:	4936      	ldr	r1, [pc, #216]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	089b      	lsrs	r3, r3, #2
 80052b2:	3318      	adds	r3, #24
 80052b4:	009b      	lsls	r3, r3, #2
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80052ba:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	43da      	mvns	r2, r3
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	4013      	ands	r3, r2
 80052c8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	2380      	movs	r3, #128	; 0x80
 80052d0:	035b      	lsls	r3, r3, #13
 80052d2:	4013      	ands	r3, r2
 80052d4:	d003      	beq.n	80052de <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	4313      	orrs	r3, r2
 80052dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80052de:	4b2a      	ldr	r3, [pc, #168]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80052e4:	4b28      	ldr	r3, [pc, #160]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 80052e6:	685b      	ldr	r3, [r3, #4]
 80052e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	43da      	mvns	r2, r3
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	4013      	ands	r3, r2
 80052f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	685a      	ldr	r2, [r3, #4]
 80052f8:	2380      	movs	r3, #128	; 0x80
 80052fa:	039b      	lsls	r3, r3, #14
 80052fc:	4013      	ands	r3, r2
 80052fe:	d003      	beq.n	8005308 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4313      	orrs	r3, r2
 8005306:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005308:	4b1f      	ldr	r3, [pc, #124]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800530e:	4a1e      	ldr	r2, [pc, #120]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 8005310:	2384      	movs	r3, #132	; 0x84
 8005312:	58d3      	ldr	r3, [r2, r3]
 8005314:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	43da      	mvns	r2, r3
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	4013      	ands	r3, r2
 800531e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	685a      	ldr	r2, [r3, #4]
 8005324:	2380      	movs	r3, #128	; 0x80
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	4013      	ands	r3, r2
 800532a:	d003      	beq.n	8005334 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	4313      	orrs	r3, r2
 8005332:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005334:	4914      	ldr	r1, [pc, #80]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 8005336:	2284      	movs	r2, #132	; 0x84
 8005338:	693b      	ldr	r3, [r7, #16]
 800533a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800533c:	4a12      	ldr	r2, [pc, #72]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 800533e:	2380      	movs	r3, #128	; 0x80
 8005340:	58d3      	ldr	r3, [r2, r3]
 8005342:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	43da      	mvns	r2, r3
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4013      	ands	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	685a      	ldr	r2, [r3, #4]
 8005352:	2380      	movs	r3, #128	; 0x80
 8005354:	025b      	lsls	r3, r3, #9
 8005356:	4013      	ands	r3, r2
 8005358:	d003      	beq.n	8005362 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	4313      	orrs	r3, r2
 8005360:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005362:	4909      	ldr	r1, [pc, #36]	; (8005388 <HAL_GPIO_Init+0x2b8>)
 8005364:	2280      	movs	r2, #128	; 0x80
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800536a:	697b      	ldr	r3, [r7, #20]
 800536c:	3301      	adds	r3, #1
 800536e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	681a      	ldr	r2, [r3, #0]
 8005374:	697b      	ldr	r3, [r7, #20]
 8005376:	40da      	lsrs	r2, r3
 8005378:	1e13      	subs	r3, r2, #0
 800537a:	d000      	beq.n	800537e <HAL_GPIO_Init+0x2ae>
 800537c:	e6b0      	b.n	80050e0 <HAL_GPIO_Init+0x10>
  }
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46c0      	nop			; (mov r8, r8)
 8005382:	46bd      	mov	sp, r7
 8005384:	b006      	add	sp, #24
 8005386:	bd80      	pop	{r7, pc}
 8005388:	40021800 	.word	0x40021800
 800538c:	50000400 	.word	0x50000400
 8005390:	50000800 	.word	0x50000800
 8005394:	50000c00 	.word	0x50000c00

08005398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	0008      	movs	r0, r1
 80053a2:	0011      	movs	r1, r2
 80053a4:	1cbb      	adds	r3, r7, #2
 80053a6:	1c02      	adds	r2, r0, #0
 80053a8:	801a      	strh	r2, [r3, #0]
 80053aa:	1c7b      	adds	r3, r7, #1
 80053ac:	1c0a      	adds	r2, r1, #0
 80053ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80053b0:	1c7b      	adds	r3, r7, #1
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d004      	beq.n	80053c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80053b8:	1cbb      	adds	r3, r7, #2
 80053ba:	881a      	ldrh	r2, [r3, #0]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80053c0:	e003      	b.n	80053ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80053c2:	1cbb      	adds	r3, r7, #2
 80053c4:	881a      	ldrh	r2, [r3, #0]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80053ca:	46c0      	nop			; (mov r8, r8)
 80053cc:	46bd      	mov	sp, r7
 80053ce:	b002      	add	sp, #8
 80053d0:	bd80      	pop	{r7, pc}
	...

080053d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b082      	sub	sp, #8
 80053d8:	af00      	add	r7, sp, #0
 80053da:	0002      	movs	r2, r0
 80053dc:	1dbb      	adds	r3, r7, #6
 80053de:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80053e0:	4b10      	ldr	r3, [pc, #64]	; (8005424 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	1dba      	adds	r2, r7, #6
 80053e6:	8812      	ldrh	r2, [r2, #0]
 80053e8:	4013      	ands	r3, r2
 80053ea:	d008      	beq.n	80053fe <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80053ec:	4b0d      	ldr	r3, [pc, #52]	; (8005424 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80053ee:	1dba      	adds	r2, r7, #6
 80053f0:	8812      	ldrh	r2, [r2, #0]
 80053f2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80053f4:	1dbb      	adds	r3, r7, #6
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	0018      	movs	r0, r3
 80053fa:	f000 f815 	bl	8005428 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80053fe:	4b09      	ldr	r3, [pc, #36]	; (8005424 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	1dba      	adds	r2, r7, #6
 8005404:	8812      	ldrh	r2, [r2, #0]
 8005406:	4013      	ands	r3, r2
 8005408:	d008      	beq.n	800541c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800540a:	4b06      	ldr	r3, [pc, #24]	; (8005424 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800540c:	1dba      	adds	r2, r7, #6
 800540e:	8812      	ldrh	r2, [r2, #0]
 8005410:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8005412:	1dbb      	adds	r3, r7, #6
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	0018      	movs	r0, r3
 8005418:	f000 f810 	bl	800543c <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800541c:	46c0      	nop			; (mov r8, r8)
 800541e:	46bd      	mov	sp, r7
 8005420:	b002      	add	sp, #8
 8005422:	bd80      	pop	{r7, pc}
 8005424:	40021800 	.word	0x40021800

08005428 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	0002      	movs	r2, r0
 8005430:	1dbb      	adds	r3, r7, #6
 8005432:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005434:	46c0      	nop			; (mov r8, r8)
 8005436:	46bd      	mov	sp, r7
 8005438:	b002      	add	sp, #8
 800543a:	bd80      	pop	{r7, pc}

0800543c <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b082      	sub	sp, #8
 8005440:	af00      	add	r7, sp, #0
 8005442:	0002      	movs	r2, r0
 8005444:	1dbb      	adds	r3, r7, #6
 8005446:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	b002      	add	sp, #8
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8005458:	4b19      	ldr	r3, [pc, #100]	; (80054c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a19      	ldr	r2, [pc, #100]	; (80054c4 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800545e:	4013      	ands	r3, r2
 8005460:	0019      	movs	r1, r3
 8005462:	4b17      	ldr	r3, [pc, #92]	; (80054c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005464:	687a      	ldr	r2, [r7, #4]
 8005466:	430a      	orrs	r2, r1
 8005468:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	2380      	movs	r3, #128	; 0x80
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	429a      	cmp	r2, r3
 8005472:	d11f      	bne.n	80054b4 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005474:	4b14      	ldr	r3, [pc, #80]	; (80054c8 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	0013      	movs	r3, r2
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	189b      	adds	r3, r3, r2
 800547e:	005b      	lsls	r3, r3, #1
 8005480:	4912      	ldr	r1, [pc, #72]	; (80054cc <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005482:	0018      	movs	r0, r3
 8005484:	f7fa fe58 	bl	8000138 <__udivsi3>
 8005488:	0003      	movs	r3, r0
 800548a:	3301      	adds	r3, #1
 800548c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800548e:	e008      	b.n	80054a2 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	2b00      	cmp	r3, #0
 8005494:	d003      	beq.n	800549e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	3b01      	subs	r3, #1
 800549a:	60fb      	str	r3, [r7, #12]
 800549c:	e001      	b.n	80054a2 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e009      	b.n	80054b6 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054a2:	4b07      	ldr	r3, [pc, #28]	; (80054c0 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80054a4:	695a      	ldr	r2, [r3, #20]
 80054a6:	2380      	movs	r3, #128	; 0x80
 80054a8:	00db      	lsls	r3, r3, #3
 80054aa:	401a      	ands	r2, r3
 80054ac:	2380      	movs	r3, #128	; 0x80
 80054ae:	00db      	lsls	r3, r3, #3
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d0ed      	beq.n	8005490 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80054b4:	2300      	movs	r3, #0
}
 80054b6:	0018      	movs	r0, r3
 80054b8:	46bd      	mov	sp, r7
 80054ba:	b004      	add	sp, #16
 80054bc:	bd80      	pop	{r7, pc}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	40007000 	.word	0x40007000
 80054c4:	fffff9ff 	.word	0xfffff9ff
 80054c8:	20000004 	.word	0x20000004
 80054cc:	000f4240 	.word	0x000f4240

080054d0 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <LL_RCC_GetAPB1Prescaler+0x14>)
 80054d6:	689a      	ldr	r2, [r3, #8]
 80054d8:	23e0      	movs	r3, #224	; 0xe0
 80054da:	01db      	lsls	r3, r3, #7
 80054dc:	4013      	ands	r3, r2
}
 80054de:	0018      	movs	r0, r3
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40021000 	.word	0x40021000

080054e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f6:	2301      	movs	r3, #1
 80054f8:	e2f3      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2201      	movs	r2, #1
 8005500:	4013      	ands	r3, r2
 8005502:	d100      	bne.n	8005506 <HAL_RCC_OscConfig+0x1e>
 8005504:	e07c      	b.n	8005600 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005506:	4bc3      	ldr	r3, [pc, #780]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	2238      	movs	r2, #56	; 0x38
 800550c:	4013      	ands	r3, r2
 800550e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005510:	4bc0      	ldr	r3, [pc, #768]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005512:	68db      	ldr	r3, [r3, #12]
 8005514:	2203      	movs	r2, #3
 8005516:	4013      	ands	r3, r2
 8005518:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	2b10      	cmp	r3, #16
 800551e:	d102      	bne.n	8005526 <HAL_RCC_OscConfig+0x3e>
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	2b03      	cmp	r3, #3
 8005524:	d002      	beq.n	800552c <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8005526:	69bb      	ldr	r3, [r7, #24]
 8005528:	2b08      	cmp	r3, #8
 800552a:	d10b      	bne.n	8005544 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800552c:	4bb9      	ldr	r3, [pc, #740]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	2380      	movs	r3, #128	; 0x80
 8005532:	029b      	lsls	r3, r3, #10
 8005534:	4013      	ands	r3, r2
 8005536:	d062      	beq.n	80055fe <HAL_RCC_OscConfig+0x116>
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	685b      	ldr	r3, [r3, #4]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d15e      	bne.n	80055fe <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	e2ce      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	2380      	movs	r3, #128	; 0x80
 800554a:	025b      	lsls	r3, r3, #9
 800554c:	429a      	cmp	r2, r3
 800554e:	d107      	bne.n	8005560 <HAL_RCC_OscConfig+0x78>
 8005550:	4bb0      	ldr	r3, [pc, #704]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	4baf      	ldr	r3, [pc, #700]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005556:	2180      	movs	r1, #128	; 0x80
 8005558:	0249      	lsls	r1, r1, #9
 800555a:	430a      	orrs	r2, r1
 800555c:	601a      	str	r2, [r3, #0]
 800555e:	e020      	b.n	80055a2 <HAL_RCC_OscConfig+0xba>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685a      	ldr	r2, [r3, #4]
 8005564:	23a0      	movs	r3, #160	; 0xa0
 8005566:	02db      	lsls	r3, r3, #11
 8005568:	429a      	cmp	r2, r3
 800556a:	d10e      	bne.n	800558a <HAL_RCC_OscConfig+0xa2>
 800556c:	4ba9      	ldr	r3, [pc, #676]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	4ba8      	ldr	r3, [pc, #672]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005572:	2180      	movs	r1, #128	; 0x80
 8005574:	02c9      	lsls	r1, r1, #11
 8005576:	430a      	orrs	r2, r1
 8005578:	601a      	str	r2, [r3, #0]
 800557a:	4ba6      	ldr	r3, [pc, #664]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4ba5      	ldr	r3, [pc, #660]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005580:	2180      	movs	r1, #128	; 0x80
 8005582:	0249      	lsls	r1, r1, #9
 8005584:	430a      	orrs	r2, r1
 8005586:	601a      	str	r2, [r3, #0]
 8005588:	e00b      	b.n	80055a2 <HAL_RCC_OscConfig+0xba>
 800558a:	4ba2      	ldr	r3, [pc, #648]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	4ba1      	ldr	r3, [pc, #644]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005590:	49a1      	ldr	r1, [pc, #644]	; (8005818 <HAL_RCC_OscConfig+0x330>)
 8005592:	400a      	ands	r2, r1
 8005594:	601a      	str	r2, [r3, #0]
 8005596:	4b9f      	ldr	r3, [pc, #636]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005598:	681a      	ldr	r2, [r3, #0]
 800559a:	4b9e      	ldr	r3, [pc, #632]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800559c:	499f      	ldr	r1, [pc, #636]	; (800581c <HAL_RCC_OscConfig+0x334>)
 800559e:	400a      	ands	r2, r1
 80055a0:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d014      	beq.n	80055d4 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055aa:	f7fe fe65 	bl	8004278 <HAL_GetTick>
 80055ae:	0003      	movs	r3, r0
 80055b0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b2:	e008      	b.n	80055c6 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055b4:	f7fe fe60 	bl	8004278 <HAL_GetTick>
 80055b8:	0002      	movs	r2, r0
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	1ad3      	subs	r3, r2, r3
 80055be:	2b64      	cmp	r3, #100	; 0x64
 80055c0:	d901      	bls.n	80055c6 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80055c2:	2303      	movs	r3, #3
 80055c4:	e28d      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055c6:	4b93      	ldr	r3, [pc, #588]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80055c8:	681a      	ldr	r2, [r3, #0]
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	029b      	lsls	r3, r3, #10
 80055ce:	4013      	ands	r3, r2
 80055d0:	d0f0      	beq.n	80055b4 <HAL_RCC_OscConfig+0xcc>
 80055d2:	e015      	b.n	8005600 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055d4:	f7fe fe50 	bl	8004278 <HAL_GetTick>
 80055d8:	0003      	movs	r3, r0
 80055da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055dc:	e008      	b.n	80055f0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055de:	f7fe fe4b 	bl	8004278 <HAL_GetTick>
 80055e2:	0002      	movs	r2, r0
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	1ad3      	subs	r3, r2, r3
 80055e8:	2b64      	cmp	r3, #100	; 0x64
 80055ea:	d901      	bls.n	80055f0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e278      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055f0:	4b88      	ldr	r3, [pc, #544]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	2380      	movs	r3, #128	; 0x80
 80055f6:	029b      	lsls	r3, r3, #10
 80055f8:	4013      	ands	r3, r2
 80055fa:	d1f0      	bne.n	80055de <HAL_RCC_OscConfig+0xf6>
 80055fc:	e000      	b.n	8005600 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055fe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2202      	movs	r2, #2
 8005606:	4013      	ands	r3, r2
 8005608:	d100      	bne.n	800560c <HAL_RCC_OscConfig+0x124>
 800560a:	e099      	b.n	8005740 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800560c:	4b81      	ldr	r3, [pc, #516]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2238      	movs	r2, #56	; 0x38
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005616:	4b7f      	ldr	r3, [pc, #508]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005618:	68db      	ldr	r3, [r3, #12]
 800561a:	2203      	movs	r2, #3
 800561c:	4013      	ands	r3, r2
 800561e:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	2b10      	cmp	r3, #16
 8005624:	d102      	bne.n	800562c <HAL_RCC_OscConfig+0x144>
 8005626:	697b      	ldr	r3, [r7, #20]
 8005628:	2b02      	cmp	r3, #2
 800562a:	d002      	beq.n	8005632 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d135      	bne.n	800569e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005632:	4b78      	ldr	r3, [pc, #480]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005634:	681a      	ldr	r2, [r3, #0]
 8005636:	2380      	movs	r3, #128	; 0x80
 8005638:	00db      	lsls	r3, r3, #3
 800563a:	4013      	ands	r3, r2
 800563c:	d005      	beq.n	800564a <HAL_RCC_OscConfig+0x162>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	68db      	ldr	r3, [r3, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e24b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564a:	4b72      	ldr	r3, [pc, #456]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4a74      	ldr	r2, [pc, #464]	; (8005820 <HAL_RCC_OscConfig+0x338>)
 8005650:	4013      	ands	r3, r2
 8005652:	0019      	movs	r1, r3
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	021a      	lsls	r2, r3, #8
 800565a:	4b6e      	ldr	r3, [pc, #440]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800565c:	430a      	orrs	r2, r1
 800565e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005660:	69bb      	ldr	r3, [r7, #24]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d112      	bne.n	800568c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8005666:	4b6b      	ldr	r3, [pc, #428]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	4a6e      	ldr	r2, [pc, #440]	; (8005824 <HAL_RCC_OscConfig+0x33c>)
 800566c:	4013      	ands	r3, r2
 800566e:	0019      	movs	r1, r3
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	691a      	ldr	r2, [r3, #16]
 8005674:	4b67      	ldr	r3, [pc, #412]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005676:	430a      	orrs	r2, r1
 8005678:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800567a:	4b66      	ldr	r3, [pc, #408]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	0adb      	lsrs	r3, r3, #11
 8005680:	2207      	movs	r2, #7
 8005682:	4013      	ands	r3, r2
 8005684:	4a68      	ldr	r2, [pc, #416]	; (8005828 <HAL_RCC_OscConfig+0x340>)
 8005686:	40da      	lsrs	r2, r3
 8005688:	4b68      	ldr	r3, [pc, #416]	; (800582c <HAL_RCC_OscConfig+0x344>)
 800568a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800568c:	4b68      	ldr	r3, [pc, #416]	; (8005830 <HAL_RCC_OscConfig+0x348>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	0018      	movs	r0, r3
 8005692:	f7fe fd95 	bl	80041c0 <HAL_InitTick>
 8005696:	1e03      	subs	r3, r0, #0
 8005698:	d051      	beq.n	800573e <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800569a:	2301      	movs	r3, #1
 800569c:	e221      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	68db      	ldr	r3, [r3, #12]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d030      	beq.n	8005708 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80056a6:	4b5b      	ldr	r3, [pc, #364]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	4a5e      	ldr	r2, [pc, #376]	; (8005824 <HAL_RCC_OscConfig+0x33c>)
 80056ac:	4013      	ands	r3, r2
 80056ae:	0019      	movs	r1, r3
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	4b57      	ldr	r3, [pc, #348]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80056b6:	430a      	orrs	r2, r1
 80056b8:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80056ba:	4b56      	ldr	r3, [pc, #344]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	4b55      	ldr	r3, [pc, #340]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80056c0:	2180      	movs	r1, #128	; 0x80
 80056c2:	0049      	lsls	r1, r1, #1
 80056c4:	430a      	orrs	r2, r1
 80056c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056c8:	f7fe fdd6 	bl	8004278 <HAL_GetTick>
 80056cc:	0003      	movs	r3, r0
 80056ce:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056d0:	e008      	b.n	80056e4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056d2:	f7fe fdd1 	bl	8004278 <HAL_GetTick>
 80056d6:	0002      	movs	r2, r0
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d901      	bls.n	80056e4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80056e0:	2303      	movs	r3, #3
 80056e2:	e1fe      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80056e4:	4b4b      	ldr	r3, [pc, #300]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80056e6:	681a      	ldr	r2, [r3, #0]
 80056e8:	2380      	movs	r3, #128	; 0x80
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	4013      	ands	r3, r2
 80056ee:	d0f0      	beq.n	80056d2 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056f0:	4b48      	ldr	r3, [pc, #288]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	4a4a      	ldr	r2, [pc, #296]	; (8005820 <HAL_RCC_OscConfig+0x338>)
 80056f6:	4013      	ands	r3, r2
 80056f8:	0019      	movs	r1, r3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	695b      	ldr	r3, [r3, #20]
 80056fe:	021a      	lsls	r2, r3, #8
 8005700:	4b44      	ldr	r3, [pc, #272]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005702:	430a      	orrs	r2, r1
 8005704:	605a      	str	r2, [r3, #4]
 8005706:	e01b      	b.n	8005740 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8005708:	4b42      	ldr	r3, [pc, #264]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	4b41      	ldr	r3, [pc, #260]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800570e:	4949      	ldr	r1, [pc, #292]	; (8005834 <HAL_RCC_OscConfig+0x34c>)
 8005710:	400a      	ands	r2, r1
 8005712:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005714:	f7fe fdb0 	bl	8004278 <HAL_GetTick>
 8005718:	0003      	movs	r3, r0
 800571a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800571c:	e008      	b.n	8005730 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800571e:	f7fe fdab 	bl	8004278 <HAL_GetTick>
 8005722:	0002      	movs	r2, r0
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	1ad3      	subs	r3, r2, r3
 8005728:	2b02      	cmp	r3, #2
 800572a:	d901      	bls.n	8005730 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800572c:	2303      	movs	r3, #3
 800572e:	e1d8      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005730:	4b38      	ldr	r3, [pc, #224]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	2380      	movs	r3, #128	; 0x80
 8005736:	00db      	lsls	r3, r3, #3
 8005738:	4013      	ands	r3, r2
 800573a:	d1f0      	bne.n	800571e <HAL_RCC_OscConfig+0x236>
 800573c:	e000      	b.n	8005740 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800573e:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2208      	movs	r2, #8
 8005746:	4013      	ands	r3, r2
 8005748:	d047      	beq.n	80057da <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800574a:	4b32      	ldr	r3, [pc, #200]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	2238      	movs	r2, #56	; 0x38
 8005750:	4013      	ands	r3, r2
 8005752:	2b18      	cmp	r3, #24
 8005754:	d10a      	bne.n	800576c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8005756:	4b2f      	ldr	r3, [pc, #188]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800575a:	2202      	movs	r2, #2
 800575c:	4013      	ands	r3, r2
 800575e:	d03c      	beq.n	80057da <HAL_RCC_OscConfig+0x2f2>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d138      	bne.n	80057da <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8005768:	2301      	movs	r3, #1
 800576a:	e1ba      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d019      	beq.n	80057a8 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005774:	4b27      	ldr	r3, [pc, #156]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 8005776:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005778:	4b26      	ldr	r3, [pc, #152]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800577a:	2101      	movs	r1, #1
 800577c:	430a      	orrs	r2, r1
 800577e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005780:	f7fe fd7a 	bl	8004278 <HAL_GetTick>
 8005784:	0003      	movs	r3, r0
 8005786:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005788:	e008      	b.n	800579c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800578a:	f7fe fd75 	bl	8004278 <HAL_GetTick>
 800578e:	0002      	movs	r2, r0
 8005790:	693b      	ldr	r3, [r7, #16]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e1a2      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800579c:	4b1d      	ldr	r3, [pc, #116]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 800579e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a0:	2202      	movs	r2, #2
 80057a2:	4013      	ands	r3, r2
 80057a4:	d0f1      	beq.n	800578a <HAL_RCC_OscConfig+0x2a2>
 80057a6:	e018      	b.n	80057da <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80057a8:	4b1a      	ldr	r3, [pc, #104]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80057aa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80057ac:	4b19      	ldr	r3, [pc, #100]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80057ae:	2101      	movs	r1, #1
 80057b0:	438a      	bics	r2, r1
 80057b2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057b4:	f7fe fd60 	bl	8004278 <HAL_GetTick>
 80057b8:	0003      	movs	r3, r0
 80057ba:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057bc:	e008      	b.n	80057d0 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057be:	f7fe fd5b 	bl	8004278 <HAL_GetTick>
 80057c2:	0002      	movs	r2, r0
 80057c4:	693b      	ldr	r3, [r7, #16]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	2b02      	cmp	r3, #2
 80057ca:	d901      	bls.n	80057d0 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80057cc:	2303      	movs	r3, #3
 80057ce:	e188      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057d0:	4b10      	ldr	r3, [pc, #64]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80057d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057d4:	2202      	movs	r2, #2
 80057d6:	4013      	ands	r3, r2
 80057d8:	d1f1      	bne.n	80057be <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	2204      	movs	r2, #4
 80057e0:	4013      	ands	r3, r2
 80057e2:	d100      	bne.n	80057e6 <HAL_RCC_OscConfig+0x2fe>
 80057e4:	e0c6      	b.n	8005974 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057e6:	231f      	movs	r3, #31
 80057e8:	18fb      	adds	r3, r7, r3
 80057ea:	2200      	movs	r2, #0
 80057ec:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80057ee:	4b09      	ldr	r3, [pc, #36]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2238      	movs	r2, #56	; 0x38
 80057f4:	4013      	ands	r3, r2
 80057f6:	2b20      	cmp	r3, #32
 80057f8:	d11e      	bne.n	8005838 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80057fa:	4b06      	ldr	r3, [pc, #24]	; (8005814 <HAL_RCC_OscConfig+0x32c>)
 80057fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057fe:	2202      	movs	r2, #2
 8005800:	4013      	ands	r3, r2
 8005802:	d100      	bne.n	8005806 <HAL_RCC_OscConfig+0x31e>
 8005804:	e0b6      	b.n	8005974 <HAL_RCC_OscConfig+0x48c>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d000      	beq.n	8005810 <HAL_RCC_OscConfig+0x328>
 800580e:	e0b1      	b.n	8005974 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8005810:	2301      	movs	r3, #1
 8005812:	e166      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
 8005814:	40021000 	.word	0x40021000
 8005818:	fffeffff 	.word	0xfffeffff
 800581c:	fffbffff 	.word	0xfffbffff
 8005820:	ffff80ff 	.word	0xffff80ff
 8005824:	ffffc7ff 	.word	0xffffc7ff
 8005828:	00f42400 	.word	0x00f42400
 800582c:	20000004 	.word	0x20000004
 8005830:	20000008 	.word	0x20000008
 8005834:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005838:	4bac      	ldr	r3, [pc, #688]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 800583a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800583c:	2380      	movs	r3, #128	; 0x80
 800583e:	055b      	lsls	r3, r3, #21
 8005840:	4013      	ands	r3, r2
 8005842:	d101      	bne.n	8005848 <HAL_RCC_OscConfig+0x360>
 8005844:	2301      	movs	r3, #1
 8005846:	e000      	b.n	800584a <HAL_RCC_OscConfig+0x362>
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d011      	beq.n	8005872 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	4ba7      	ldr	r3, [pc, #668]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005850:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005852:	4ba6      	ldr	r3, [pc, #664]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005854:	2180      	movs	r1, #128	; 0x80
 8005856:	0549      	lsls	r1, r1, #21
 8005858:	430a      	orrs	r2, r1
 800585a:	63da      	str	r2, [r3, #60]	; 0x3c
 800585c:	4ba3      	ldr	r3, [pc, #652]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 800585e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005860:	2380      	movs	r3, #128	; 0x80
 8005862:	055b      	lsls	r3, r3, #21
 8005864:	4013      	ands	r3, r2
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800586a:	231f      	movs	r3, #31
 800586c:	18fb      	adds	r3, r7, r3
 800586e:	2201      	movs	r2, #1
 8005870:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005872:	4b9f      	ldr	r3, [pc, #636]	; (8005af0 <HAL_RCC_OscConfig+0x608>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	2380      	movs	r3, #128	; 0x80
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	4013      	ands	r3, r2
 800587c:	d11a      	bne.n	80058b4 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800587e:	4b9c      	ldr	r3, [pc, #624]	; (8005af0 <HAL_RCC_OscConfig+0x608>)
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	4b9b      	ldr	r3, [pc, #620]	; (8005af0 <HAL_RCC_OscConfig+0x608>)
 8005884:	2180      	movs	r1, #128	; 0x80
 8005886:	0049      	lsls	r1, r1, #1
 8005888:	430a      	orrs	r2, r1
 800588a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800588c:	f7fe fcf4 	bl	8004278 <HAL_GetTick>
 8005890:	0003      	movs	r3, r0
 8005892:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005894:	e008      	b.n	80058a8 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005896:	f7fe fcef 	bl	8004278 <HAL_GetTick>
 800589a:	0002      	movs	r2, r0
 800589c:	693b      	ldr	r3, [r7, #16]
 800589e:	1ad3      	subs	r3, r2, r3
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d901      	bls.n	80058a8 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80058a4:	2303      	movs	r3, #3
 80058a6:	e11c      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80058a8:	4b91      	ldr	r3, [pc, #580]	; (8005af0 <HAL_RCC_OscConfig+0x608>)
 80058aa:	681a      	ldr	r2, [r3, #0]
 80058ac:	2380      	movs	r3, #128	; 0x80
 80058ae:	005b      	lsls	r3, r3, #1
 80058b0:	4013      	ands	r3, r2
 80058b2:	d0f0      	beq.n	8005896 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	2b01      	cmp	r3, #1
 80058ba:	d106      	bne.n	80058ca <HAL_RCC_OscConfig+0x3e2>
 80058bc:	4b8b      	ldr	r3, [pc, #556]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058be:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058c0:	4b8a      	ldr	r3, [pc, #552]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058c2:	2101      	movs	r1, #1
 80058c4:	430a      	orrs	r2, r1
 80058c6:	65da      	str	r2, [r3, #92]	; 0x5c
 80058c8:	e01c      	b.n	8005904 <HAL_RCC_OscConfig+0x41c>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	689b      	ldr	r3, [r3, #8]
 80058ce:	2b05      	cmp	r3, #5
 80058d0:	d10c      	bne.n	80058ec <HAL_RCC_OscConfig+0x404>
 80058d2:	4b86      	ldr	r3, [pc, #536]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058d4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058d6:	4b85      	ldr	r3, [pc, #532]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058d8:	2104      	movs	r1, #4
 80058da:	430a      	orrs	r2, r1
 80058dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80058de:	4b83      	ldr	r3, [pc, #524]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058e0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058e2:	4b82      	ldr	r3, [pc, #520]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058e4:	2101      	movs	r1, #1
 80058e6:	430a      	orrs	r2, r1
 80058e8:	65da      	str	r2, [r3, #92]	; 0x5c
 80058ea:	e00b      	b.n	8005904 <HAL_RCC_OscConfig+0x41c>
 80058ec:	4b7f      	ldr	r3, [pc, #508]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058ee:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058f0:	4b7e      	ldr	r3, [pc, #504]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058f2:	2101      	movs	r1, #1
 80058f4:	438a      	bics	r2, r1
 80058f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80058f8:	4b7c      	ldr	r3, [pc, #496]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80058fc:	4b7b      	ldr	r3, [pc, #492]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80058fe:	2104      	movs	r1, #4
 8005900:	438a      	bics	r2, r1
 8005902:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	689b      	ldr	r3, [r3, #8]
 8005908:	2b00      	cmp	r3, #0
 800590a:	d014      	beq.n	8005936 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800590c:	f7fe fcb4 	bl	8004278 <HAL_GetTick>
 8005910:	0003      	movs	r3, r0
 8005912:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005914:	e009      	b.n	800592a <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005916:	f7fe fcaf 	bl	8004278 <HAL_GetTick>
 800591a:	0002      	movs	r2, r0
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	4a74      	ldr	r2, [pc, #464]	; (8005af4 <HAL_RCC_OscConfig+0x60c>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e0db      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800592a:	4b70      	ldr	r3, [pc, #448]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 800592c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800592e:	2202      	movs	r2, #2
 8005930:	4013      	ands	r3, r2
 8005932:	d0f0      	beq.n	8005916 <HAL_RCC_OscConfig+0x42e>
 8005934:	e013      	b.n	800595e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005936:	f7fe fc9f 	bl	8004278 <HAL_GetTick>
 800593a:	0003      	movs	r3, r0
 800593c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800593e:	e009      	b.n	8005954 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005940:	f7fe fc9a 	bl	8004278 <HAL_GetTick>
 8005944:	0002      	movs	r2, r0
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	4a6a      	ldr	r2, [pc, #424]	; (8005af4 <HAL_RCC_OscConfig+0x60c>)
 800594c:	4293      	cmp	r3, r2
 800594e:	d901      	bls.n	8005954 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005950:	2303      	movs	r3, #3
 8005952:	e0c6      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005954:	4b65      	ldr	r3, [pc, #404]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005956:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005958:	2202      	movs	r2, #2
 800595a:	4013      	ands	r3, r2
 800595c:	d1f0      	bne.n	8005940 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800595e:	231f      	movs	r3, #31
 8005960:	18fb      	adds	r3, r7, r3
 8005962:	781b      	ldrb	r3, [r3, #0]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d105      	bne.n	8005974 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005968:	4b60      	ldr	r3, [pc, #384]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 800596a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800596c:	4b5f      	ldr	r3, [pc, #380]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 800596e:	4962      	ldr	r1, [pc, #392]	; (8005af8 <HAL_RCC_OscConfig+0x610>)
 8005970:	400a      	ands	r2, r1
 8005972:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d100      	bne.n	800597e <HAL_RCC_OscConfig+0x496>
 800597c:	e0b0      	b.n	8005ae0 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800597e:	4b5b      	ldr	r3, [pc, #364]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	2238      	movs	r2, #56	; 0x38
 8005984:	4013      	ands	r3, r2
 8005986:	2b10      	cmp	r3, #16
 8005988:	d100      	bne.n	800598c <HAL_RCC_OscConfig+0x4a4>
 800598a:	e078      	b.n	8005a7e <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	69db      	ldr	r3, [r3, #28]
 8005990:	2b02      	cmp	r3, #2
 8005992:	d153      	bne.n	8005a3c <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005994:	4b55      	ldr	r3, [pc, #340]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005996:	681a      	ldr	r2, [r3, #0]
 8005998:	4b54      	ldr	r3, [pc, #336]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 800599a:	4958      	ldr	r1, [pc, #352]	; (8005afc <HAL_RCC_OscConfig+0x614>)
 800599c:	400a      	ands	r2, r1
 800599e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a0:	f7fe fc6a 	bl	8004278 <HAL_GetTick>
 80059a4:	0003      	movs	r3, r0
 80059a6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059a8:	e008      	b.n	80059bc <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80059aa:	f7fe fc65 	bl	8004278 <HAL_GetTick>
 80059ae:	0002      	movs	r2, r0
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	1ad3      	subs	r3, r2, r3
 80059b4:	2b02      	cmp	r3, #2
 80059b6:	d901      	bls.n	80059bc <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80059b8:	2303      	movs	r3, #3
 80059ba:	e092      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80059bc:	4b4b      	ldr	r3, [pc, #300]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80059be:	681a      	ldr	r2, [r3, #0]
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	049b      	lsls	r3, r3, #18
 80059c4:	4013      	ands	r3, r2
 80059c6:	d1f0      	bne.n	80059aa <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059c8:	4b48      	ldr	r3, [pc, #288]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80059ca:	68db      	ldr	r3, [r3, #12]
 80059cc:	4a4c      	ldr	r2, [pc, #304]	; (8005b00 <HAL_RCC_OscConfig+0x618>)
 80059ce:	4013      	ands	r3, r2
 80059d0:	0019      	movs	r1, r3
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6a1a      	ldr	r2, [r3, #32]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	431a      	orrs	r2, r3
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059e8:	431a      	orrs	r2, r3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059ee:	431a      	orrs	r2, r3
 80059f0:	4b3e      	ldr	r3, [pc, #248]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80059f2:	430a      	orrs	r2, r1
 80059f4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059f6:	4b3d      	ldr	r3, [pc, #244]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	4b3c      	ldr	r3, [pc, #240]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 80059fc:	2180      	movs	r1, #128	; 0x80
 80059fe:	0449      	lsls	r1, r1, #17
 8005a00:	430a      	orrs	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005a04:	4b39      	ldr	r3, [pc, #228]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	4b38      	ldr	r3, [pc, #224]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	0549      	lsls	r1, r1, #21
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a12:	f7fe fc31 	bl	8004278 <HAL_GetTick>
 8005a16:	0003      	movs	r3, r0
 8005a18:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1a:	e008      	b.n	8005a2e <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a1c:	f7fe fc2c 	bl	8004278 <HAL_GetTick>
 8005a20:	0002      	movs	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e059      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a2e:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	2380      	movs	r3, #128	; 0x80
 8005a34:	049b      	lsls	r3, r3, #18
 8005a36:	4013      	ands	r3, r2
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x534>
 8005a3a:	e051      	b.n	8005ae0 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a3c:	4b2b      	ldr	r3, [pc, #172]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	4b2a      	ldr	r3, [pc, #168]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a42:	492e      	ldr	r1, [pc, #184]	; (8005afc <HAL_RCC_OscConfig+0x614>)
 8005a44:	400a      	ands	r2, r1
 8005a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a48:	f7fe fc16 	bl	8004278 <HAL_GetTick>
 8005a4c:	0003      	movs	r3, r0
 8005a4e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a50:	e008      	b.n	8005a64 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a52:	f7fe fc11 	bl	8004278 <HAL_GetTick>
 8005a56:	0002      	movs	r2, r0
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	2b02      	cmp	r3, #2
 8005a5e:	d901      	bls.n	8005a64 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8005a60:	2303      	movs	r3, #3
 8005a62:	e03e      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a64:	4b21      	ldr	r3, [pc, #132]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a66:	681a      	ldr	r2, [r3, #0]
 8005a68:	2380      	movs	r3, #128	; 0x80
 8005a6a:	049b      	lsls	r3, r3, #18
 8005a6c:	4013      	ands	r3, r2
 8005a6e:	d1f0      	bne.n	8005a52 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8005a70:	4b1e      	ldr	r3, [pc, #120]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a72:	68da      	ldr	r2, [r3, #12]
 8005a74:	4b1d      	ldr	r3, [pc, #116]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a76:	4923      	ldr	r1, [pc, #140]	; (8005b04 <HAL_RCC_OscConfig+0x61c>)
 8005a78:	400a      	ands	r2, r1
 8005a7a:	60da      	str	r2, [r3, #12]
 8005a7c:	e030      	b.n	8005ae0 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	69db      	ldr	r3, [r3, #28]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d101      	bne.n	8005a8a <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e02b      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005a8a:	4b18      	ldr	r3, [pc, #96]	; (8005aec <HAL_RCC_OscConfig+0x604>)
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	2203      	movs	r2, #3
 8005a94:	401a      	ands	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a1b      	ldr	r3, [r3, #32]
 8005a9a:	429a      	cmp	r2, r3
 8005a9c:	d11e      	bne.n	8005adc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2270      	movs	r2, #112	; 0x70
 8005aa2:	401a      	ands	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d117      	bne.n	8005adc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aac:	697a      	ldr	r2, [r7, #20]
 8005aae:	23fe      	movs	r3, #254	; 0xfe
 8005ab0:	01db      	lsls	r3, r3, #7
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab8:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d10e      	bne.n	8005adc <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	23f8      	movs	r3, #248	; 0xf8
 8005ac2:	039b      	lsls	r3, r3, #14
 8005ac4:	401a      	ands	r2, r3
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d106      	bne.n	8005adc <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	0f5b      	lsrs	r3, r3, #29
 8005ad2:	075a      	lsls	r2, r3, #29
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005ad8:	429a      	cmp	r2, r3
 8005ada:	d001      	beq.n	8005ae0 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8005adc:	2301      	movs	r3, #1
 8005ade:	e000      	b.n	8005ae2 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	0018      	movs	r0, r3
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	b008      	add	sp, #32
 8005ae8:	bd80      	pop	{r7, pc}
 8005aea:	46c0      	nop			; (mov r8, r8)
 8005aec:	40021000 	.word	0x40021000
 8005af0:	40007000 	.word	0x40007000
 8005af4:	00001388 	.word	0x00001388
 8005af8:	efffffff 	.word	0xefffffff
 8005afc:	feffffff 	.word	0xfeffffff
 8005b00:	1fc1808c 	.word	0x1fc1808c
 8005b04:	effefffc 	.word	0xeffefffc

08005b08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b084      	sub	sp, #16
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d101      	bne.n	8005b1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005b18:	2301      	movs	r3, #1
 8005b1a:	e0e9      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b1c:	4b76      	ldr	r3, [pc, #472]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2207      	movs	r2, #7
 8005b22:	4013      	ands	r3, r2
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	429a      	cmp	r2, r3
 8005b28:	d91e      	bls.n	8005b68 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b2a:	4b73      	ldr	r3, [pc, #460]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	2207      	movs	r2, #7
 8005b30:	4393      	bics	r3, r2
 8005b32:	0019      	movs	r1, r3
 8005b34:	4b70      	ldr	r3, [pc, #448]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b36:	683a      	ldr	r2, [r7, #0]
 8005b38:	430a      	orrs	r2, r1
 8005b3a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b3c:	f7fe fb9c 	bl	8004278 <HAL_GetTick>
 8005b40:	0003      	movs	r3, r0
 8005b42:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b44:	e009      	b.n	8005b5a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b46:	f7fe fb97 	bl	8004278 <HAL_GetTick>
 8005b4a:	0002      	movs	r2, r0
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	4a6a      	ldr	r2, [pc, #424]	; (8005cfc <HAL_RCC_ClockConfig+0x1f4>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d901      	bls.n	8005b5a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005b56:	2303      	movs	r3, #3
 8005b58:	e0ca      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005b5a:	4b67      	ldr	r3, [pc, #412]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2207      	movs	r2, #7
 8005b60:	4013      	ands	r3, r2
 8005b62:	683a      	ldr	r2, [r7, #0]
 8005b64:	429a      	cmp	r2, r3
 8005b66:	d1ee      	bne.n	8005b46 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2202      	movs	r2, #2
 8005b6e:	4013      	ands	r3, r2
 8005b70:	d015      	beq.n	8005b9e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	2204      	movs	r2, #4
 8005b78:	4013      	ands	r3, r2
 8005b7a:	d006      	beq.n	8005b8a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005b7c:	4b60      	ldr	r3, [pc, #384]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005b7e:	689a      	ldr	r2, [r3, #8]
 8005b80:	4b5f      	ldr	r3, [pc, #380]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005b82:	21e0      	movs	r1, #224	; 0xe0
 8005b84:	01c9      	lsls	r1, r1, #7
 8005b86:	430a      	orrs	r2, r1
 8005b88:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b8a:	4b5d      	ldr	r3, [pc, #372]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	4a5d      	ldr	r2, [pc, #372]	; (8005d04 <HAL_RCC_ClockConfig+0x1fc>)
 8005b90:	4013      	ands	r3, r2
 8005b92:	0019      	movs	r1, r3
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	689a      	ldr	r2, [r3, #8]
 8005b98:	4b59      	ldr	r3, [pc, #356]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	4013      	ands	r3, r2
 8005ba6:	d057      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	685b      	ldr	r3, [r3, #4]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d107      	bne.n	8005bc0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bb0:	4b53      	ldr	r3, [pc, #332]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	029b      	lsls	r3, r3, #10
 8005bb8:	4013      	ands	r3, r2
 8005bba:	d12b      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e097      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	2b02      	cmp	r3, #2
 8005bc6:	d107      	bne.n	8005bd8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bc8:	4b4d      	ldr	r3, [pc, #308]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	2380      	movs	r3, #128	; 0x80
 8005bce:	049b      	lsls	r3, r3, #18
 8005bd0:	4013      	ands	r3, r2
 8005bd2:	d11f      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	e08b      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	685b      	ldr	r3, [r3, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d107      	bne.n	8005bf0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005be0:	4b47      	ldr	r3, [pc, #284]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	2380      	movs	r3, #128	; 0x80
 8005be6:	00db      	lsls	r3, r3, #3
 8005be8:	4013      	ands	r3, r2
 8005bea:	d113      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e07f      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b03      	cmp	r3, #3
 8005bf6:	d106      	bne.n	8005c06 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005bf8:	4b41      	ldr	r3, [pc, #260]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005bfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bfc:	2202      	movs	r2, #2
 8005bfe:	4013      	ands	r3, r2
 8005c00:	d108      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e074      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c06:	4b3e      	ldr	r3, [pc, #248]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	4013      	ands	r3, r2
 8005c0e:	d101      	bne.n	8005c14 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e06d      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c14:	4b3a      	ldr	r3, [pc, #232]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	2207      	movs	r2, #7
 8005c1a:	4393      	bics	r3, r2
 8005c1c:	0019      	movs	r1, r3
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	685a      	ldr	r2, [r3, #4]
 8005c22:	4b37      	ldr	r3, [pc, #220]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005c24:	430a      	orrs	r2, r1
 8005c26:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c28:	f7fe fb26 	bl	8004278 <HAL_GetTick>
 8005c2c:	0003      	movs	r3, r0
 8005c2e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c30:	e009      	b.n	8005c46 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c32:	f7fe fb21 	bl	8004278 <HAL_GetTick>
 8005c36:	0002      	movs	r2, r0
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	1ad3      	subs	r3, r2, r3
 8005c3c:	4a2f      	ldr	r2, [pc, #188]	; (8005cfc <HAL_RCC_ClockConfig+0x1f4>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d901      	bls.n	8005c46 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005c42:	2303      	movs	r3, #3
 8005c44:	e054      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c46:	4b2e      	ldr	r3, [pc, #184]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2238      	movs	r2, #56	; 0x38
 8005c4c:	401a      	ands	r2, r3
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	00db      	lsls	r3, r3, #3
 8005c54:	429a      	cmp	r2, r3
 8005c56:	d1ec      	bne.n	8005c32 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c58:	4b27      	ldr	r3, [pc, #156]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2207      	movs	r2, #7
 8005c5e:	4013      	ands	r3, r2
 8005c60:	683a      	ldr	r2, [r7, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d21e      	bcs.n	8005ca4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c66:	4b24      	ldr	r3, [pc, #144]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2207      	movs	r2, #7
 8005c6c:	4393      	bics	r3, r2
 8005c6e:	0019      	movs	r1, r3
 8005c70:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	430a      	orrs	r2, r1
 8005c76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c78:	f7fe fafe 	bl	8004278 <HAL_GetTick>
 8005c7c:	0003      	movs	r3, r0
 8005c7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c80:	e009      	b.n	8005c96 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c82:	f7fe faf9 	bl	8004278 <HAL_GetTick>
 8005c86:	0002      	movs	r2, r0
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	4a1b      	ldr	r2, [pc, #108]	; (8005cfc <HAL_RCC_ClockConfig+0x1f4>)
 8005c8e:	4293      	cmp	r3, r2
 8005c90:	d901      	bls.n	8005c96 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005c92:	2303      	movs	r3, #3
 8005c94:	e02c      	b.n	8005cf0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005c96:	4b18      	ldr	r3, [pc, #96]	; (8005cf8 <HAL_RCC_ClockConfig+0x1f0>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	2207      	movs	r2, #7
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d1ee      	bne.n	8005c82 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2204      	movs	r2, #4
 8005caa:	4013      	ands	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005cae:	4b14      	ldr	r3, [pc, #80]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005cb0:	689b      	ldr	r3, [r3, #8]
 8005cb2:	4a15      	ldr	r2, [pc, #84]	; (8005d08 <HAL_RCC_ClockConfig+0x200>)
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	0019      	movs	r1, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68da      	ldr	r2, [r3, #12]
 8005cbc:	4b10      	ldr	r3, [pc, #64]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005cc2:	f000 f829 	bl	8005d18 <HAL_RCC_GetSysClockFreq>
 8005cc6:	0001      	movs	r1, r0
 8005cc8:	4b0d      	ldr	r3, [pc, #52]	; (8005d00 <HAL_RCC_ClockConfig+0x1f8>)
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	0a1b      	lsrs	r3, r3, #8
 8005cce:	220f      	movs	r2, #15
 8005cd0:	401a      	ands	r2, r3
 8005cd2:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <HAL_RCC_ClockConfig+0x204>)
 8005cd4:	0092      	lsls	r2, r2, #2
 8005cd6:	58d3      	ldr	r3, [r2, r3]
 8005cd8:	221f      	movs	r2, #31
 8005cda:	4013      	ands	r3, r2
 8005cdc:	000a      	movs	r2, r1
 8005cde:	40da      	lsrs	r2, r3
 8005ce0:	4b0b      	ldr	r3, [pc, #44]	; (8005d10 <HAL_RCC_ClockConfig+0x208>)
 8005ce2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ce4:	4b0b      	ldr	r3, [pc, #44]	; (8005d14 <HAL_RCC_ClockConfig+0x20c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	0018      	movs	r0, r3
 8005cea:	f7fe fa69 	bl	80041c0 <HAL_InitTick>
 8005cee:	0003      	movs	r3, r0
}
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	b004      	add	sp, #16
 8005cf6:	bd80      	pop	{r7, pc}
 8005cf8:	40022000 	.word	0x40022000
 8005cfc:	00001388 	.word	0x00001388
 8005d00:	40021000 	.word	0x40021000
 8005d04:	fffff0ff 	.word	0xfffff0ff
 8005d08:	ffff8fff 	.word	0xffff8fff
 8005d0c:	0800d27c 	.word	0x0800d27c
 8005d10:	20000004 	.word	0x20000004
 8005d14:	20000008 	.word	0x20000008

08005d18 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005d1e:	4b3c      	ldr	r3, [pc, #240]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	2238      	movs	r2, #56	; 0x38
 8005d24:	4013      	ands	r3, r2
 8005d26:	d10f      	bne.n	8005d48 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005d28:	4b39      	ldr	r3, [pc, #228]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	0adb      	lsrs	r3, r3, #11
 8005d2e:	2207      	movs	r2, #7
 8005d30:	4013      	ands	r3, r2
 8005d32:	2201      	movs	r2, #1
 8005d34:	409a      	lsls	r2, r3
 8005d36:	0013      	movs	r3, r2
 8005d38:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005d3a:	6839      	ldr	r1, [r7, #0]
 8005d3c:	4835      	ldr	r0, [pc, #212]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d3e:	f7fa f9fb 	bl	8000138 <__udivsi3>
 8005d42:	0003      	movs	r3, r0
 8005d44:	613b      	str	r3, [r7, #16]
 8005d46:	e05d      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005d48:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	2238      	movs	r2, #56	; 0x38
 8005d4e:	4013      	ands	r3, r2
 8005d50:	2b08      	cmp	r3, #8
 8005d52:	d102      	bne.n	8005d5a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005d54:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d56:	613b      	str	r3, [r7, #16]
 8005d58:	e054      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005d5a:	4b2d      	ldr	r3, [pc, #180]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	2238      	movs	r2, #56	; 0x38
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b10      	cmp	r3, #16
 8005d64:	d138      	bne.n	8005dd8 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005d66:	4b2a      	ldr	r3, [pc, #168]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2203      	movs	r2, #3
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d70:	4b27      	ldr	r3, [pc, #156]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	091b      	lsrs	r3, r3, #4
 8005d76:	2207      	movs	r2, #7
 8005d78:	4013      	ands	r3, r2
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	d10d      	bne.n	8005da0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d84:	68b9      	ldr	r1, [r7, #8]
 8005d86:	4823      	ldr	r0, [pc, #140]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005d88:	f7fa f9d6 	bl	8000138 <__udivsi3>
 8005d8c:	0003      	movs	r3, r0
 8005d8e:	0019      	movs	r1, r3
 8005d90:	4b1f      	ldr	r3, [pc, #124]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	0a1b      	lsrs	r3, r3, #8
 8005d96:	227f      	movs	r2, #127	; 0x7f
 8005d98:	4013      	ands	r3, r2
 8005d9a:	434b      	muls	r3, r1
 8005d9c:	617b      	str	r3, [r7, #20]
        break;
 8005d9e:	e00d      	b.n	8005dbc <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005da0:	68b9      	ldr	r1, [r7, #8]
 8005da2:	481c      	ldr	r0, [pc, #112]	; (8005e14 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005da4:	f7fa f9c8 	bl	8000138 <__udivsi3>
 8005da8:	0003      	movs	r3, r0
 8005daa:	0019      	movs	r1, r3
 8005dac:	4b18      	ldr	r3, [pc, #96]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	0a1b      	lsrs	r3, r3, #8
 8005db2:	227f      	movs	r2, #127	; 0x7f
 8005db4:	4013      	ands	r3, r2
 8005db6:	434b      	muls	r3, r1
 8005db8:	617b      	str	r3, [r7, #20]
        break;
 8005dba:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005dbc:	4b14      	ldr	r3, [pc, #80]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dbe:	68db      	ldr	r3, [r3, #12]
 8005dc0:	0f5b      	lsrs	r3, r3, #29
 8005dc2:	2207      	movs	r2, #7
 8005dc4:	4013      	ands	r3, r2
 8005dc6:	3301      	adds	r3, #1
 8005dc8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	6978      	ldr	r0, [r7, #20]
 8005dce:	f7fa f9b3 	bl	8000138 <__udivsi3>
 8005dd2:	0003      	movs	r3, r0
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	e015      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005dd8:	4b0d      	ldr	r3, [pc, #52]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	2238      	movs	r2, #56	; 0x38
 8005dde:	4013      	ands	r3, r2
 8005de0:	2b20      	cmp	r3, #32
 8005de2:	d103      	bne.n	8005dec <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005de4:	2380      	movs	r3, #128	; 0x80
 8005de6:	021b      	lsls	r3, r3, #8
 8005de8:	613b      	str	r3, [r7, #16]
 8005dea:	e00b      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005dec:	4b08      	ldr	r3, [pc, #32]	; (8005e10 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	2238      	movs	r2, #56	; 0x38
 8005df2:	4013      	ands	r3, r2
 8005df4:	2b18      	cmp	r3, #24
 8005df6:	d103      	bne.n	8005e00 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005df8:	23fa      	movs	r3, #250	; 0xfa
 8005dfa:	01db      	lsls	r3, r3, #7
 8005dfc:	613b      	str	r3, [r7, #16]
 8005dfe:	e001      	b.n	8005e04 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005e00:	2300      	movs	r3, #0
 8005e02:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e04:	693b      	ldr	r3, [r7, #16]
}
 8005e06:	0018      	movs	r0, r3
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	b006      	add	sp, #24
 8005e0c:	bd80      	pop	{r7, pc}
 8005e0e:	46c0      	nop			; (mov r8, r8)
 8005e10:	40021000 	.word	0x40021000
 8005e14:	00f42400 	.word	0x00f42400

08005e18 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e1c:	4b02      	ldr	r3, [pc, #8]	; (8005e28 <HAL_RCC_GetHCLKFreq+0x10>)
 8005e1e:	681b      	ldr	r3, [r3, #0]
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	bd80      	pop	{r7, pc}
 8005e26:	46c0      	nop			; (mov r8, r8)
 8005e28:	20000004 	.word	0x20000004

08005e2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005e2c:	b5b0      	push	{r4, r5, r7, lr}
 8005e2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005e30:	f7ff fff2 	bl	8005e18 <HAL_RCC_GetHCLKFreq>
 8005e34:	0004      	movs	r4, r0
 8005e36:	f7ff fb4b 	bl	80054d0 <LL_RCC_GetAPB1Prescaler>
 8005e3a:	0003      	movs	r3, r0
 8005e3c:	0b1a      	lsrs	r2, r3, #12
 8005e3e:	4b05      	ldr	r3, [pc, #20]	; (8005e54 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005e40:	0092      	lsls	r2, r2, #2
 8005e42:	58d3      	ldr	r3, [r2, r3]
 8005e44:	221f      	movs	r2, #31
 8005e46:	4013      	ands	r3, r2
 8005e48:	40dc      	lsrs	r4, r3
 8005e4a:	0023      	movs	r3, r4
}
 8005e4c:	0018      	movs	r0, r3
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bdb0      	pop	{r4, r5, r7, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	0800d2bc 	.word	0x0800d2bc

08005e58 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005e58:	b580      	push	{r7, lr}
 8005e5a:	b086      	sub	sp, #24
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8005e60:	2313      	movs	r3, #19
 8005e62:	18fb      	adds	r3, r7, r3
 8005e64:	2200      	movs	r2, #0
 8005e66:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005e68:	2312      	movs	r3, #18
 8005e6a:	18fb      	adds	r3, r7, r3
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681a      	ldr	r2, [r3, #0]
 8005e74:	2380      	movs	r3, #128	; 0x80
 8005e76:	029b      	lsls	r3, r3, #10
 8005e78:	4013      	ands	r3, r2
 8005e7a:	d100      	bne.n	8005e7e <HAL_RCCEx_PeriphCLKConfig+0x26>
 8005e7c:	e0a3      	b.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e7e:	2011      	movs	r0, #17
 8005e80:	183b      	adds	r3, r7, r0
 8005e82:	2200      	movs	r2, #0
 8005e84:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005e86:	4b86      	ldr	r3, [pc, #536]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e8a:	2380      	movs	r3, #128	; 0x80
 8005e8c:	055b      	lsls	r3, r3, #21
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d110      	bne.n	8005eb4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e92:	4b83      	ldr	r3, [pc, #524]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e94:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e96:	4b82      	ldr	r3, [pc, #520]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	0549      	lsls	r1, r1, #21
 8005e9c:	430a      	orrs	r2, r1
 8005e9e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005ea0:	4b7f      	ldr	r3, [pc, #508]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ea2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ea4:	2380      	movs	r3, #128	; 0x80
 8005ea6:	055b      	lsls	r3, r3, #21
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	60bb      	str	r3, [r7, #8]
 8005eac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005eae:	183b      	adds	r3, r7, r0
 8005eb0:	2201      	movs	r2, #1
 8005eb2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005eb4:	4b7b      	ldr	r3, [pc, #492]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	4b7a      	ldr	r3, [pc, #488]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	0049      	lsls	r1, r1, #1
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ec2:	f7fe f9d9 	bl	8004278 <HAL_GetTick>
 8005ec6:	0003      	movs	r3, r0
 8005ec8:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005eca:	e00b      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ecc:	f7fe f9d4 	bl	8004278 <HAL_GetTick>
 8005ed0:	0002      	movs	r2, r0
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1ad3      	subs	r3, r2, r3
 8005ed6:	2b02      	cmp	r3, #2
 8005ed8:	d904      	bls.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005eda:	2313      	movs	r3, #19
 8005edc:	18fb      	adds	r3, r7, r3
 8005ede:	2203      	movs	r2, #3
 8005ee0:	701a      	strb	r2, [r3, #0]
        break;
 8005ee2:	e005      	b.n	8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005ee4:	4b6f      	ldr	r3, [pc, #444]	; (80060a4 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8005ee6:	681a      	ldr	r2, [r3, #0]
 8005ee8:	2380      	movs	r3, #128	; 0x80
 8005eea:	005b      	lsls	r3, r3, #1
 8005eec:	4013      	ands	r3, r2
 8005eee:	d0ed      	beq.n	8005ecc <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8005ef0:	2313      	movs	r3, #19
 8005ef2:	18fb      	adds	r3, r7, r3
 8005ef4:	781b      	ldrb	r3, [r3, #0]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d154      	bne.n	8005fa4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005efa:	4b69      	ldr	r3, [pc, #420]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005efc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005efe:	23c0      	movs	r3, #192	; 0xc0
 8005f00:	009b      	lsls	r3, r3, #2
 8005f02:	4013      	ands	r3, r2
 8005f04:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d019      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	699b      	ldr	r3, [r3, #24]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	429a      	cmp	r2, r3
 8005f14:	d014      	beq.n	8005f40 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f16:	4b62      	ldr	r3, [pc, #392]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f1a:	4a63      	ldr	r2, [pc, #396]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005f1c:	4013      	ands	r3, r2
 8005f1e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f20:	4b5f      	ldr	r3, [pc, #380]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f24:	4b5e      	ldr	r3, [pc, #376]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f26:	2180      	movs	r1, #128	; 0x80
 8005f28:	0249      	lsls	r1, r1, #9
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f2e:	4b5c      	ldr	r3, [pc, #368]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f30:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005f32:	4b5b      	ldr	r3, [pc, #364]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f34:	495d      	ldr	r1, [pc, #372]	; (80060ac <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8005f36:	400a      	ands	r2, r1
 8005f38:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005f3a:	4b59      	ldr	r3, [pc, #356]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005f40:	697b      	ldr	r3, [r7, #20]
 8005f42:	2201      	movs	r2, #1
 8005f44:	4013      	ands	r3, r2
 8005f46:	d016      	beq.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f48:	f7fe f996 	bl	8004278 <HAL_GetTick>
 8005f4c:	0003      	movs	r3, r0
 8005f4e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f50:	e00c      	b.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f52:	f7fe f991 	bl	8004278 <HAL_GetTick>
 8005f56:	0002      	movs	r2, r0
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	1ad3      	subs	r3, r2, r3
 8005f5c:	4a54      	ldr	r2, [pc, #336]	; (80060b0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d904      	bls.n	8005f6c <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8005f62:	2313      	movs	r3, #19
 8005f64:	18fb      	adds	r3, r7, r3
 8005f66:	2203      	movs	r2, #3
 8005f68:	701a      	strb	r2, [r3, #0]
            break;
 8005f6a:	e004      	b.n	8005f76 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f6c:	4b4c      	ldr	r3, [pc, #304]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f70:	2202      	movs	r2, #2
 8005f72:	4013      	ands	r3, r2
 8005f74:	d0ed      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8005f76:	2313      	movs	r3, #19
 8005f78:	18fb      	adds	r3, r7, r3
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d10a      	bne.n	8005f96 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f80:	4b47      	ldr	r3, [pc, #284]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f84:	4a48      	ldr	r2, [pc, #288]	; (80060a8 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	699a      	ldr	r2, [r3, #24]
 8005f8e:	4b44      	ldr	r3, [pc, #272]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005f90:	430a      	orrs	r2, r1
 8005f92:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f94:	e00c      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005f96:	2312      	movs	r3, #18
 8005f98:	18fb      	adds	r3, r7, r3
 8005f9a:	2213      	movs	r2, #19
 8005f9c:	18ba      	adds	r2, r7, r2
 8005f9e:	7812      	ldrb	r2, [r2, #0]
 8005fa0:	701a      	strb	r2, [r3, #0]
 8005fa2:	e005      	b.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005fa4:	2312      	movs	r3, #18
 8005fa6:	18fb      	adds	r3, r7, r3
 8005fa8:	2213      	movs	r2, #19
 8005faa:	18ba      	adds	r2, r7, r2
 8005fac:	7812      	ldrb	r2, [r2, #0]
 8005fae:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005fb0:	2311      	movs	r3, #17
 8005fb2:	18fb      	adds	r3, r7, r3
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	2b01      	cmp	r3, #1
 8005fb8:	d105      	bne.n	8005fc6 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005fba:	4b39      	ldr	r3, [pc, #228]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fbc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005fbe:	4b38      	ldr	r3, [pc, #224]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fc0:	493c      	ldr	r1, [pc, #240]	; (80060b4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8005fc2:	400a      	ands	r2, r1
 8005fc4:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	4013      	ands	r3, r2
 8005fce:	d009      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005fd0:	4b33      	ldr	r3, [pc, #204]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	4393      	bics	r3, r2
 8005fd8:	0019      	movs	r1, r3
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685a      	ldr	r2, [r3, #4]
 8005fde:	4b30      	ldr	r3, [pc, #192]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005fe0:	430a      	orrs	r2, r1
 8005fe2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	2202      	movs	r2, #2
 8005fea:	4013      	ands	r3, r2
 8005fec:	d009      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005fee:	4b2c      	ldr	r3, [pc, #176]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ff0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ff2:	220c      	movs	r2, #12
 8005ff4:	4393      	bics	r3, r2
 8005ff6:	0019      	movs	r1, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689a      	ldr	r2, [r3, #8]
 8005ffc:	4b28      	ldr	r3, [pc, #160]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8005ffe:	430a      	orrs	r2, r1
 8006000:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2220      	movs	r2, #32
 8006008:	4013      	ands	r3, r2
 800600a:	d009      	beq.n	8006020 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800600c:	4b24      	ldr	r3, [pc, #144]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800600e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006010:	4a29      	ldr	r2, [pc, #164]	; (80060b8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8006012:	4013      	ands	r3, r2
 8006014:	0019      	movs	r1, r3
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	4b21      	ldr	r3, [pc, #132]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800601c:	430a      	orrs	r2, r1
 800601e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	01db      	lsls	r3, r3, #7
 8006028:	4013      	ands	r3, r2
 800602a:	d015      	beq.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800602c:	4b1c      	ldr	r3, [pc, #112]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800602e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	0899      	lsrs	r1, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695a      	ldr	r2, [r3, #20]
 8006038:	4b19      	ldr	r3, [pc, #100]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800603a:	430a      	orrs	r2, r1
 800603c:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	695a      	ldr	r2, [r3, #20]
 8006042:	2380      	movs	r3, #128	; 0x80
 8006044:	05db      	lsls	r3, r3, #23
 8006046:	429a      	cmp	r2, r3
 8006048:	d106      	bne.n	8006058 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800604a:	4b15      	ldr	r3, [pc, #84]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800604c:	68da      	ldr	r2, [r3, #12]
 800604e:	4b14      	ldr	r3, [pc, #80]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006050:	2180      	movs	r1, #128	; 0x80
 8006052:	0249      	lsls	r1, r1, #9
 8006054:	430a      	orrs	r2, r1
 8006056:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	2380      	movs	r3, #128	; 0x80
 800605e:	011b      	lsls	r3, r3, #4
 8006060:	4013      	ands	r3, r2
 8006062:	d016      	beq.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006064:	4b0e      	ldr	r3, [pc, #56]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006066:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006068:	4a14      	ldr	r2, [pc, #80]	; (80060bc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800606a:	4013      	ands	r3, r2
 800606c:	0019      	movs	r1, r3
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	691a      	ldr	r2, [r3, #16]
 8006072:	4b0b      	ldr	r3, [pc, #44]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006074:	430a      	orrs	r2, r1
 8006076:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	691a      	ldr	r2, [r3, #16]
 800607c:	2380      	movs	r3, #128	; 0x80
 800607e:	01db      	lsls	r3, r3, #7
 8006080:	429a      	cmp	r2, r3
 8006082:	d106      	bne.n	8006092 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8006084:	4b06      	ldr	r3, [pc, #24]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8006086:	68da      	ldr	r2, [r3, #12]
 8006088:	4b05      	ldr	r3, [pc, #20]	; (80060a0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800608a:	2180      	movs	r1, #128	; 0x80
 800608c:	0249      	lsls	r1, r1, #9
 800608e:	430a      	orrs	r2, r1
 8006090:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8006092:	2312      	movs	r3, #18
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	781b      	ldrb	r3, [r3, #0]
}
 8006098:	0018      	movs	r0, r3
 800609a:	46bd      	mov	sp, r7
 800609c:	b006      	add	sp, #24
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40021000 	.word	0x40021000
 80060a4:	40007000 	.word	0x40007000
 80060a8:	fffffcff 	.word	0xfffffcff
 80060ac:	fffeffff 	.word	0xfffeffff
 80060b0:	00001388 	.word	0x00001388
 80060b4:	efffffff 	.word	0xefffffff
 80060b8:	ffffcfff 	.word	0xffffcfff
 80060bc:	ffff3fff 	.word	0xffff3fff

080060c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b084      	sub	sp, #16
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d101      	bne.n	80060d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80060ce:	2301      	movs	r3, #1
 80060d0:	e0a8      	b.n	8006224 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d109      	bne.n	80060ee <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	2382      	movs	r3, #130	; 0x82
 80060e0:	005b      	lsls	r3, r3, #1
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d009      	beq.n	80060fa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2200      	movs	r2, #0
 80060ea:	61da      	str	r2, [r3, #28]
 80060ec:	e005      	b.n	80060fa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2200      	movs	r2, #0
 80060f2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2200      	movs	r2, #0
 80060f8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2200      	movs	r2, #0
 80060fe:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	225d      	movs	r2, #93	; 0x5d
 8006104:	5c9b      	ldrb	r3, [r3, r2]
 8006106:	b2db      	uxtb	r3, r3
 8006108:	2b00      	cmp	r3, #0
 800610a:	d107      	bne.n	800611c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	225c      	movs	r2, #92	; 0x5c
 8006110:	2100      	movs	r1, #0
 8006112:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	0018      	movs	r0, r3
 8006118:	f7fd f864 	bl	80031e4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	225d      	movs	r2, #93	; 0x5d
 8006120:	2102      	movs	r1, #2
 8006122:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2140      	movs	r1, #64	; 0x40
 8006130:	438a      	bics	r2, r1
 8006132:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	68da      	ldr	r2, [r3, #12]
 8006138:	23e0      	movs	r3, #224	; 0xe0
 800613a:	00db      	lsls	r3, r3, #3
 800613c:	429a      	cmp	r2, r3
 800613e:	d902      	bls.n	8006146 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006140:	2300      	movs	r3, #0
 8006142:	60fb      	str	r3, [r7, #12]
 8006144:	e002      	b.n	800614c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006146:	2380      	movs	r3, #128	; 0x80
 8006148:	015b      	lsls	r3, r3, #5
 800614a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68da      	ldr	r2, [r3, #12]
 8006150:	23f0      	movs	r3, #240	; 0xf0
 8006152:	011b      	lsls	r3, r3, #4
 8006154:	429a      	cmp	r2, r3
 8006156:	d008      	beq.n	800616a <HAL_SPI_Init+0xaa>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	23e0      	movs	r3, #224	; 0xe0
 800615e:	00db      	lsls	r3, r3, #3
 8006160:	429a      	cmp	r2, r3
 8006162:	d002      	beq.n	800616a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	2382      	movs	r3, #130	; 0x82
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	401a      	ands	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6899      	ldr	r1, [r3, #8]
 8006178:	2384      	movs	r3, #132	; 0x84
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	400b      	ands	r3, r1
 800617e:	431a      	orrs	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	691b      	ldr	r3, [r3, #16]
 8006184:	2102      	movs	r1, #2
 8006186:	400b      	ands	r3, r1
 8006188:	431a      	orrs	r2, r3
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	2101      	movs	r1, #1
 8006190:	400b      	ands	r3, r1
 8006192:	431a      	orrs	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6999      	ldr	r1, [r3, #24]
 8006198:	2380      	movs	r3, #128	; 0x80
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	400b      	ands	r3, r1
 800619e:	431a      	orrs	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	69db      	ldr	r3, [r3, #28]
 80061a4:	2138      	movs	r1, #56	; 0x38
 80061a6:	400b      	ands	r3, r1
 80061a8:	431a      	orrs	r2, r3
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6a1b      	ldr	r3, [r3, #32]
 80061ae:	2180      	movs	r1, #128	; 0x80
 80061b0:	400b      	ands	r3, r1
 80061b2:	431a      	orrs	r2, r3
 80061b4:	0011      	movs	r1, r2
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80061ba:	2380      	movs	r3, #128	; 0x80
 80061bc:	019b      	lsls	r3, r3, #6
 80061be:	401a      	ands	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	0c1b      	lsrs	r3, r3, #16
 80061ce:	2204      	movs	r2, #4
 80061d0:	401a      	ands	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	2110      	movs	r1, #16
 80061d8:	400b      	ands	r3, r1
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061e0:	2108      	movs	r1, #8
 80061e2:	400b      	ands	r3, r1
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	68d9      	ldr	r1, [r3, #12]
 80061ea:	23f0      	movs	r3, #240	; 0xf0
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	400b      	ands	r3, r1
 80061f0:	431a      	orrs	r2, r3
 80061f2:	0011      	movs	r1, r2
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	2380      	movs	r3, #128	; 0x80
 80061f8:	015b      	lsls	r3, r3, #5
 80061fa:	401a      	ands	r2, r3
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	430a      	orrs	r2, r1
 8006202:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69da      	ldr	r2, [r3, #28]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4907      	ldr	r1, [pc, #28]	; (800622c <HAL_SPI_Init+0x16c>)
 8006210:	400a      	ands	r2, r1
 8006212:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	225d      	movs	r2, #93	; 0x5d
 800621e:	2101      	movs	r1, #1
 8006220:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	0018      	movs	r0, r3
 8006226:	46bd      	mov	sp, r7
 8006228:	b004      	add	sp, #16
 800622a:	bd80      	pop	{r7, pc}
 800622c:	fffff7ff 	.word	0xfffff7ff

08006230 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b088      	sub	sp, #32
 8006234:	af00      	add	r7, sp, #0
 8006236:	60f8      	str	r0, [r7, #12]
 8006238:	60b9      	str	r1, [r7, #8]
 800623a:	603b      	str	r3, [r7, #0]
 800623c:	1dbb      	adds	r3, r7, #6
 800623e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006240:	231f      	movs	r3, #31
 8006242:	18fb      	adds	r3, r7, r3
 8006244:	2200      	movs	r2, #0
 8006246:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	225c      	movs	r2, #92	; 0x5c
 800624c:	5c9b      	ldrb	r3, [r3, r2]
 800624e:	2b01      	cmp	r3, #1
 8006250:	d101      	bne.n	8006256 <HAL_SPI_Transmit+0x26>
 8006252:	2302      	movs	r3, #2
 8006254:	e140      	b.n	80064d8 <HAL_SPI_Transmit+0x2a8>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	225c      	movs	r2, #92	; 0x5c
 800625a:	2101      	movs	r1, #1
 800625c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800625e:	f7fe f80b 	bl	8004278 <HAL_GetTick>
 8006262:	0003      	movs	r3, r0
 8006264:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006266:	2316      	movs	r3, #22
 8006268:	18fb      	adds	r3, r7, r3
 800626a:	1dba      	adds	r2, r7, #6
 800626c:	8812      	ldrh	r2, [r2, #0]
 800626e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	225d      	movs	r2, #93	; 0x5d
 8006274:	5c9b      	ldrb	r3, [r3, r2]
 8006276:	b2db      	uxtb	r3, r3
 8006278:	2b01      	cmp	r3, #1
 800627a:	d004      	beq.n	8006286 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800627c:	231f      	movs	r3, #31
 800627e:	18fb      	adds	r3, r7, r3
 8006280:	2202      	movs	r2, #2
 8006282:	701a      	strb	r2, [r3, #0]
    goto error;
 8006284:	e11d      	b.n	80064c2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d003      	beq.n	8006294 <HAL_SPI_Transmit+0x64>
 800628c:	1dbb      	adds	r3, r7, #6
 800628e:	881b      	ldrh	r3, [r3, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d104      	bne.n	800629e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8006294:	231f      	movs	r3, #31
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	2201      	movs	r2, #1
 800629a:	701a      	strb	r2, [r3, #0]
    goto error;
 800629c:	e111      	b.n	80064c2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	225d      	movs	r2, #93	; 0x5d
 80062a2:	2103      	movs	r1, #3
 80062a4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	68ba      	ldr	r2, [r7, #8]
 80062b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	1dba      	adds	r2, r7, #6
 80062b6:	8812      	ldrh	r2, [r2, #0]
 80062b8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	1dba      	adds	r2, r7, #6
 80062be:	8812      	ldrh	r2, [r2, #0]
 80062c0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	2200      	movs	r2, #0
 80062c6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2244      	movs	r2, #68	; 0x44
 80062cc:	2100      	movs	r1, #0
 80062ce:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2246      	movs	r2, #70	; 0x46
 80062d4:	2100      	movs	r1, #0
 80062d6:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	689a      	ldr	r2, [r3, #8]
 80062e8:	2380      	movs	r3, #128	; 0x80
 80062ea:	021b      	lsls	r3, r3, #8
 80062ec:	429a      	cmp	r2, r3
 80062ee:	d110      	bne.n	8006312 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	2140      	movs	r1, #64	; 0x40
 80062fc:	438a      	bics	r2, r1
 80062fe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2180      	movs	r1, #128	; 0x80
 800630c:	01c9      	lsls	r1, r1, #7
 800630e:	430a      	orrs	r2, r1
 8006310:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2240      	movs	r2, #64	; 0x40
 800631a:	4013      	ands	r3, r2
 800631c:	2b40      	cmp	r3, #64	; 0x40
 800631e:	d007      	beq.n	8006330 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2140      	movs	r1, #64	; 0x40
 800632c:	430a      	orrs	r2, r1
 800632e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	68da      	ldr	r2, [r3, #12]
 8006334:	23e0      	movs	r3, #224	; 0xe0
 8006336:	00db      	lsls	r3, r3, #3
 8006338:	429a      	cmp	r2, r3
 800633a:	d94e      	bls.n	80063da <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	685b      	ldr	r3, [r3, #4]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d004      	beq.n	800634e <HAL_SPI_Transmit+0x11e>
 8006344:	2316      	movs	r3, #22
 8006346:	18fb      	adds	r3, r7, r3
 8006348:	881b      	ldrh	r3, [r3, #0]
 800634a:	2b01      	cmp	r3, #1
 800634c:	d13f      	bne.n	80063ce <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006352:	881a      	ldrh	r2, [r3, #0]
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	1c9a      	adds	r2, r3, #2
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006368:	b29b      	uxth	r3, r3
 800636a:	3b01      	subs	r3, #1
 800636c:	b29a      	uxth	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006372:	e02c      	b.n	80063ce <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	2202      	movs	r2, #2
 800637c:	4013      	ands	r3, r2
 800637e:	2b02      	cmp	r3, #2
 8006380:	d112      	bne.n	80063a8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006386:	881a      	ldrh	r2, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	1c9a      	adds	r2, r3, #2
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800639c:	b29b      	uxth	r3, r3
 800639e:	3b01      	subs	r3, #1
 80063a0:	b29a      	uxth	r2, r3
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80063a6:	e012      	b.n	80063ce <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80063a8:	f7fd ff66 	bl	8004278 <HAL_GetTick>
 80063ac:	0002      	movs	r2, r0
 80063ae:	69bb      	ldr	r3, [r7, #24]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	683a      	ldr	r2, [r7, #0]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d802      	bhi.n	80063be <HAL_SPI_Transmit+0x18e>
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	3301      	adds	r3, #1
 80063bc:	d102      	bne.n	80063c4 <HAL_SPI_Transmit+0x194>
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d104      	bne.n	80063ce <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80063c4:	231f      	movs	r3, #31
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	2203      	movs	r2, #3
 80063ca:	701a      	strb	r2, [r3, #0]
          goto error;
 80063cc:	e079      	b.n	80064c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063d2:	b29b      	uxth	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d1cd      	bne.n	8006374 <HAL_SPI_Transmit+0x144>
 80063d8:	e04f      	b.n	800647a <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	685b      	ldr	r3, [r3, #4]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <HAL_SPI_Transmit+0x1bc>
 80063e2:	2316      	movs	r3, #22
 80063e4:	18fb      	adds	r3, r7, r3
 80063e6:	881b      	ldrh	r3, [r3, #0]
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d141      	bne.n	8006470 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	330c      	adds	r3, #12
 80063f6:	7812      	ldrb	r2, [r2, #0]
 80063f8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063fe:	1c5a      	adds	r2, r3, #1
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006408:	b29b      	uxth	r3, r3
 800640a:	3b01      	subs	r3, #1
 800640c:	b29a      	uxth	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8006412:	e02d      	b.n	8006470 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	689b      	ldr	r3, [r3, #8]
 800641a:	2202      	movs	r2, #2
 800641c:	4013      	ands	r3, r2
 800641e:	2b02      	cmp	r3, #2
 8006420:	d113      	bne.n	800644a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	330c      	adds	r3, #12
 800642c:	7812      	ldrb	r2, [r2, #0]
 800642e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	1c5a      	adds	r2, r3, #1
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800643e:	b29b      	uxth	r3, r3
 8006440:	3b01      	subs	r3, #1
 8006442:	b29a      	uxth	r2, r3
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006448:	e012      	b.n	8006470 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800644a:	f7fd ff15 	bl	8004278 <HAL_GetTick>
 800644e:	0002      	movs	r2, r0
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	683a      	ldr	r2, [r7, #0]
 8006456:	429a      	cmp	r2, r3
 8006458:	d802      	bhi.n	8006460 <HAL_SPI_Transmit+0x230>
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	3301      	adds	r3, #1
 800645e:	d102      	bne.n	8006466 <HAL_SPI_Transmit+0x236>
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d104      	bne.n	8006470 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8006466:	231f      	movs	r3, #31
 8006468:	18fb      	adds	r3, r7, r3
 800646a:	2203      	movs	r2, #3
 800646c:	701a      	strb	r2, [r3, #0]
          goto error;
 800646e:	e028      	b.n	80064c2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006474:	b29b      	uxth	r3, r3
 8006476:	2b00      	cmp	r3, #0
 8006478:	d1cc      	bne.n	8006414 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	0018      	movs	r0, r3
 8006482:	f000 fb2f 	bl	8006ae4 <SPI_EndRxTxTransaction>
 8006486:	1e03      	subs	r3, r0, #0
 8006488:	d002      	beq.n	8006490 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2220      	movs	r2, #32
 800648e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10a      	bne.n	80064ae <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006498:	2300      	movs	r3, #0
 800649a:	613b      	str	r3, [r7, #16]
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	68db      	ldr	r3, [r3, #12]
 80064a2:	613b      	str	r3, [r7, #16]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	689b      	ldr	r3, [r3, #8]
 80064aa:	613b      	str	r3, [r7, #16]
 80064ac:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d004      	beq.n	80064c0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80064b6:	231f      	movs	r3, #31
 80064b8:	18fb      	adds	r3, r7, r3
 80064ba:	2201      	movs	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e000      	b.n	80064c2 <HAL_SPI_Transmit+0x292>
  }

error:
 80064c0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	225d      	movs	r2, #93	; 0x5d
 80064c6:	2101      	movs	r1, #1
 80064c8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	225c      	movs	r2, #92	; 0x5c
 80064ce:	2100      	movs	r1, #0
 80064d0:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80064d2:	231f      	movs	r3, #31
 80064d4:	18fb      	adds	r3, r7, r3
 80064d6:	781b      	ldrb	r3, [r3, #0]
}
 80064d8:	0018      	movs	r0, r3
 80064da:	46bd      	mov	sp, r7
 80064dc:	b008      	add	sp, #32
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08a      	sub	sp, #40	; 0x28
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	60f8      	str	r0, [r7, #12]
 80064e8:	60b9      	str	r1, [r7, #8]
 80064ea:	607a      	str	r2, [r7, #4]
 80064ec:	001a      	movs	r2, r3
 80064ee:	1cbb      	adds	r3, r7, #2
 80064f0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80064f2:	2301      	movs	r3, #1
 80064f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80064f6:	2323      	movs	r3, #35	; 0x23
 80064f8:	18fb      	adds	r3, r7, r3
 80064fa:	2200      	movs	r2, #0
 80064fc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	225c      	movs	r2, #92	; 0x5c
 8006502:	5c9b      	ldrb	r3, [r3, r2]
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_SPI_TransmitReceive+0x2c>
 8006508:	2302      	movs	r3, #2
 800650a:	e1b5      	b.n	8006878 <HAL_SPI_TransmitReceive+0x398>
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	225c      	movs	r2, #92	; 0x5c
 8006510:	2101      	movs	r1, #1
 8006512:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006514:	f7fd feb0 	bl	8004278 <HAL_GetTick>
 8006518:	0003      	movs	r3, r0
 800651a:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800651c:	201b      	movs	r0, #27
 800651e:	183b      	adds	r3, r7, r0
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	215d      	movs	r1, #93	; 0x5d
 8006524:	5c52      	ldrb	r2, [r2, r1]
 8006526:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800652e:	2312      	movs	r3, #18
 8006530:	18fb      	adds	r3, r7, r3
 8006532:	1cba      	adds	r2, r7, #2
 8006534:	8812      	ldrh	r2, [r2, #0]
 8006536:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006538:	183b      	adds	r3, r7, r0
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d011      	beq.n	8006564 <HAL_SPI_TransmitReceive+0x84>
 8006540:	697a      	ldr	r2, [r7, #20]
 8006542:	2382      	movs	r3, #130	; 0x82
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	429a      	cmp	r2, r3
 8006548:	d107      	bne.n	800655a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d103      	bne.n	800655a <HAL_SPI_TransmitReceive+0x7a>
 8006552:	183b      	adds	r3, r7, r0
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	2b04      	cmp	r3, #4
 8006558:	d004      	beq.n	8006564 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800655a:	2323      	movs	r3, #35	; 0x23
 800655c:	18fb      	adds	r3, r7, r3
 800655e:	2202      	movs	r2, #2
 8006560:	701a      	strb	r2, [r3, #0]
    goto error;
 8006562:	e17e      	b.n	8006862 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006564:	68bb      	ldr	r3, [r7, #8]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d006      	beq.n	8006578 <HAL_SPI_TransmitReceive+0x98>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d003      	beq.n	8006578 <HAL_SPI_TransmitReceive+0x98>
 8006570:	1cbb      	adds	r3, r7, #2
 8006572:	881b      	ldrh	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d104      	bne.n	8006582 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8006578:	2323      	movs	r3, #35	; 0x23
 800657a:	18fb      	adds	r3, r7, r3
 800657c:	2201      	movs	r2, #1
 800657e:	701a      	strb	r2, [r3, #0]
    goto error;
 8006580:	e16f      	b.n	8006862 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	225d      	movs	r2, #93	; 0x5d
 8006586:	5c9b      	ldrb	r3, [r3, r2]
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b04      	cmp	r3, #4
 800658c:	d003      	beq.n	8006596 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	225d      	movs	r2, #93	; 0x5d
 8006592:	2105      	movs	r1, #5
 8006594:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1cba      	adds	r2, r7, #2
 80065a6:	2146      	movs	r1, #70	; 0x46
 80065a8:	8812      	ldrh	r2, [r2, #0]
 80065aa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	1cba      	adds	r2, r7, #2
 80065b0:	2144      	movs	r1, #68	; 0x44
 80065b2:	8812      	ldrh	r2, [r2, #0]
 80065b4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	68ba      	ldr	r2, [r7, #8]
 80065ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	1cba      	adds	r2, r7, #2
 80065c0:	8812      	ldrh	r2, [r2, #0]
 80065c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	1cba      	adds	r2, r7, #2
 80065c8:	8812      	ldrh	r2, [r2, #0]
 80065ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	2200      	movs	r2, #0
 80065d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	68da      	ldr	r2, [r3, #12]
 80065dc:	23e0      	movs	r3, #224	; 0xe0
 80065de:	00db      	lsls	r3, r3, #3
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d908      	bls.n	80065f6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	685a      	ldr	r2, [r3, #4]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	49a4      	ldr	r1, [pc, #656]	; (8006880 <HAL_SPI_TransmitReceive+0x3a0>)
 80065f0:	400a      	ands	r2, r1
 80065f2:	605a      	str	r2, [r3, #4]
 80065f4:	e008      	b.n	8006608 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	685a      	ldr	r2, [r3, #4]
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2180      	movs	r1, #128	; 0x80
 8006602:	0149      	lsls	r1, r1, #5
 8006604:	430a      	orrs	r2, r1
 8006606:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	2240      	movs	r2, #64	; 0x40
 8006610:	4013      	ands	r3, r2
 8006612:	2b40      	cmp	r3, #64	; 0x40
 8006614:	d007      	beq.n	8006626 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2140      	movs	r1, #64	; 0x40
 8006622:	430a      	orrs	r2, r1
 8006624:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	23e0      	movs	r3, #224	; 0xe0
 800662c:	00db      	lsls	r3, r3, #3
 800662e:	429a      	cmp	r2, r3
 8006630:	d800      	bhi.n	8006634 <HAL_SPI_TransmitReceive+0x154>
 8006632:	e07f      	b.n	8006734 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d005      	beq.n	8006648 <HAL_SPI_TransmitReceive+0x168>
 800663c:	2312      	movs	r3, #18
 800663e:	18fb      	adds	r3, r7, r3
 8006640:	881b      	ldrh	r3, [r3, #0]
 8006642:	2b01      	cmp	r3, #1
 8006644:	d000      	beq.n	8006648 <HAL_SPI_TransmitReceive+0x168>
 8006646:	e069      	b.n	800671c <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	881a      	ldrh	r2, [r3, #0]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	1c9a      	adds	r2, r3, #2
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800666c:	e056      	b.n	800671c <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	2202      	movs	r2, #2
 8006676:	4013      	ands	r3, r2
 8006678:	2b02      	cmp	r3, #2
 800667a:	d11b      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x1d4>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d016      	beq.n	80066b4 <HAL_SPI_TransmitReceive+0x1d4>
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	2b01      	cmp	r3, #1
 800668a:	d113      	bne.n	80066b4 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006690:	881a      	ldrh	r2, [r3, #0]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669c:	1c9a      	adds	r2, r3, #2
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b01      	subs	r3, #1
 80066aa:	b29a      	uxth	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80066b0:	2300      	movs	r3, #0
 80066b2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	2201      	movs	r2, #1
 80066bc:	4013      	ands	r3, r2
 80066be:	2b01      	cmp	r3, #1
 80066c0:	d11c      	bne.n	80066fc <HAL_SPI_TransmitReceive+0x21c>
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2246      	movs	r2, #70	; 0x46
 80066c6:	5a9b      	ldrh	r3, [r3, r2]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d016      	beq.n	80066fc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	68da      	ldr	r2, [r3, #12]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d8:	b292      	uxth	r2, r2
 80066da:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	1c9a      	adds	r2, r3, #2
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2246      	movs	r2, #70	; 0x46
 80066ea:	5a9b      	ldrh	r3, [r3, r2]
 80066ec:	b29b      	uxth	r3, r3
 80066ee:	3b01      	subs	r3, #1
 80066f0:	b299      	uxth	r1, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2246      	movs	r2, #70	; 0x46
 80066f6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80066f8:	2301      	movs	r3, #1
 80066fa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80066fc:	f7fd fdbc 	bl	8004278 <HAL_GetTick>
 8006700:	0002      	movs	r2, r0
 8006702:	69fb      	ldr	r3, [r7, #28]
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006708:	429a      	cmp	r2, r3
 800670a:	d807      	bhi.n	800671c <HAL_SPI_TransmitReceive+0x23c>
 800670c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800670e:	3301      	adds	r3, #1
 8006710:	d004      	beq.n	800671c <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 8006712:	2323      	movs	r3, #35	; 0x23
 8006714:	18fb      	adds	r3, r7, r3
 8006716:	2203      	movs	r2, #3
 8006718:	701a      	strb	r2, [r3, #0]
        goto error;
 800671a:	e0a2      	b.n	8006862 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006720:	b29b      	uxth	r3, r3
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1a3      	bne.n	800666e <HAL_SPI_TransmitReceive+0x18e>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	2246      	movs	r2, #70	; 0x46
 800672a:	5a9b      	ldrh	r3, [r3, r2]
 800672c:	b29b      	uxth	r3, r3
 800672e:	2b00      	cmp	r3, #0
 8006730:	d19d      	bne.n	800666e <HAL_SPI_TransmitReceive+0x18e>
 8006732:	e085      	b.n	8006840 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	685b      	ldr	r3, [r3, #4]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d005      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x268>
 800673c:	2312      	movs	r3, #18
 800673e:	18fb      	adds	r3, r7, r3
 8006740:	881b      	ldrh	r3, [r3, #0]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d000      	beq.n	8006748 <HAL_SPI_TransmitReceive+0x268>
 8006746:	e070      	b.n	800682a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	330c      	adds	r3, #12
 8006752:	7812      	ldrb	r2, [r2, #0]
 8006754:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006764:	b29b      	uxth	r3, r3
 8006766:	3b01      	subs	r3, #1
 8006768:	b29a      	uxth	r2, r3
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800676e:	e05c      	b.n	800682a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	689b      	ldr	r3, [r3, #8]
 8006776:	2202      	movs	r2, #2
 8006778:	4013      	ands	r3, r2
 800677a:	2b02      	cmp	r3, #2
 800677c:	d11c      	bne.n	80067b8 <HAL_SPI_TransmitReceive+0x2d8>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006782:	b29b      	uxth	r3, r3
 8006784:	2b00      	cmp	r3, #0
 8006786:	d017      	beq.n	80067b8 <HAL_SPI_TransmitReceive+0x2d8>
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	2b01      	cmp	r3, #1
 800678c:	d114      	bne.n	80067b8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	330c      	adds	r3, #12
 8006798:	7812      	ldrb	r2, [r2, #0]
 800679a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	1c5a      	adds	r2, r3, #1
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067aa:	b29b      	uxth	r3, r3
 80067ac:	3b01      	subs	r3, #1
 80067ae:	b29a      	uxth	r2, r3
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	689b      	ldr	r3, [r3, #8]
 80067be:	2201      	movs	r2, #1
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d11e      	bne.n	8006804 <HAL_SPI_TransmitReceive+0x324>
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	2246      	movs	r2, #70	; 0x46
 80067ca:	5a9b      	ldrh	r3, [r3, r2]
 80067cc:	b29b      	uxth	r3, r3
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d018      	beq.n	8006804 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	330c      	adds	r3, #12
 80067d8:	001a      	movs	r2, r3
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067de:	7812      	ldrb	r2, [r2, #0]
 80067e0:	b2d2      	uxtb	r2, r2
 80067e2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e8:	1c5a      	adds	r2, r3, #1
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	2246      	movs	r2, #70	; 0x46
 80067f2:	5a9b      	ldrh	r3, [r3, r2]
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	3b01      	subs	r3, #1
 80067f8:	b299      	uxth	r1, r3
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2246      	movs	r2, #70	; 0x46
 80067fe:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006800:	2301      	movs	r3, #1
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006804:	f7fd fd38 	bl	8004278 <HAL_GetTick>
 8006808:	0002      	movs	r2, r0
 800680a:	69fb      	ldr	r3, [r7, #28]
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006810:	429a      	cmp	r2, r3
 8006812:	d802      	bhi.n	800681a <HAL_SPI_TransmitReceive+0x33a>
 8006814:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006816:	3301      	adds	r3, #1
 8006818:	d102      	bne.n	8006820 <HAL_SPI_TransmitReceive+0x340>
 800681a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800681c:	2b00      	cmp	r3, #0
 800681e:	d104      	bne.n	800682a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8006820:	2323      	movs	r3, #35	; 0x23
 8006822:	18fb      	adds	r3, r7, r3
 8006824:	2203      	movs	r2, #3
 8006826:	701a      	strb	r2, [r3, #0]
        goto error;
 8006828:	e01b      	b.n	8006862 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800682e:	b29b      	uxth	r3, r3
 8006830:	2b00      	cmp	r3, #0
 8006832:	d19d      	bne.n	8006770 <HAL_SPI_TransmitReceive+0x290>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2246      	movs	r2, #70	; 0x46
 8006838:	5a9b      	ldrh	r3, [r3, r2]
 800683a:	b29b      	uxth	r3, r3
 800683c:	2b00      	cmp	r3, #0
 800683e:	d197      	bne.n	8006770 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006840:	69fa      	ldr	r2, [r7, #28]
 8006842:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	0018      	movs	r0, r3
 8006848:	f000 f94c 	bl	8006ae4 <SPI_EndRxTxTransaction>
 800684c:	1e03      	subs	r3, r0, #0
 800684e:	d007      	beq.n	8006860 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8006850:	2323      	movs	r3, #35	; 0x23
 8006852:	18fb      	adds	r3, r7, r3
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2220      	movs	r2, #32
 800685c:	661a      	str	r2, [r3, #96]	; 0x60
 800685e:	e000      	b.n	8006862 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8006860:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	225d      	movs	r2, #93	; 0x5d
 8006866:	2101      	movs	r1, #1
 8006868:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	225c      	movs	r2, #92	; 0x5c
 800686e:	2100      	movs	r1, #0
 8006870:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8006872:	2323      	movs	r3, #35	; 0x23
 8006874:	18fb      	adds	r3, r7, r3
 8006876:	781b      	ldrb	r3, [r3, #0]
}
 8006878:	0018      	movs	r0, r3
 800687a:	46bd      	mov	sp, r7
 800687c:	b00a      	add	sp, #40	; 0x28
 800687e:	bd80      	pop	{r7, pc}
 8006880:	ffffefff 	.word	0xffffefff

08006884 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b088      	sub	sp, #32
 8006888:	af00      	add	r7, sp, #0
 800688a:	60f8      	str	r0, [r7, #12]
 800688c:	60b9      	str	r1, [r7, #8]
 800688e:	603b      	str	r3, [r7, #0]
 8006890:	1dfb      	adds	r3, r7, #7
 8006892:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006894:	f7fd fcf0 	bl	8004278 <HAL_GetTick>
 8006898:	0002      	movs	r2, r0
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	1a9b      	subs	r3, r3, r2
 800689e:	683a      	ldr	r2, [r7, #0]
 80068a0:	18d3      	adds	r3, r2, r3
 80068a2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80068a4:	f7fd fce8 	bl	8004278 <HAL_GetTick>
 80068a8:	0003      	movs	r3, r0
 80068aa:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80068ac:	4b3a      	ldr	r3, [pc, #232]	; (8006998 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	015b      	lsls	r3, r3, #5
 80068b2:	0d1b      	lsrs	r3, r3, #20
 80068b4:	69fa      	ldr	r2, [r7, #28]
 80068b6:	4353      	muls	r3, r2
 80068b8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068ba:	e058      	b.n	800696e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	3301      	adds	r3, #1
 80068c0:	d055      	beq.n	800696e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068c2:	f7fd fcd9 	bl	8004278 <HAL_GetTick>
 80068c6:	0002      	movs	r2, r0
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	1ad3      	subs	r3, r2, r3
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d902      	bls.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80068d2:	69fb      	ldr	r3, [r7, #28]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d142      	bne.n	800695e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	685a      	ldr	r2, [r3, #4]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	21e0      	movs	r1, #224	; 0xe0
 80068e4:	438a      	bics	r2, r1
 80068e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	685a      	ldr	r2, [r3, #4]
 80068ec:	2382      	movs	r3, #130	; 0x82
 80068ee:	005b      	lsls	r3, r3, #1
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d113      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x98>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	2380      	movs	r3, #128	; 0x80
 80068fa:	021b      	lsls	r3, r3, #8
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d005      	beq.n	800690c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	689a      	ldr	r2, [r3, #8]
 8006904:	2380      	movs	r3, #128	; 0x80
 8006906:	00db      	lsls	r3, r3, #3
 8006908:	429a      	cmp	r2, r3
 800690a:	d107      	bne.n	800691c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	2140      	movs	r1, #64	; 0x40
 8006918:	438a      	bics	r2, r1
 800691a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006920:	2380      	movs	r3, #128	; 0x80
 8006922:	019b      	lsls	r3, r3, #6
 8006924:	429a      	cmp	r2, r3
 8006926:	d110      	bne.n	800694a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	491a      	ldr	r1, [pc, #104]	; (800699c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8006934:	400a      	ands	r2, r1
 8006936:	601a      	str	r2, [r3, #0]
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2180      	movs	r1, #128	; 0x80
 8006944:	0189      	lsls	r1, r1, #6
 8006946:	430a      	orrs	r2, r1
 8006948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	225d      	movs	r2, #93	; 0x5d
 800694e:	2101      	movs	r1, #1
 8006950:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	225c      	movs	r2, #92	; 0x5c
 8006956:	2100      	movs	r1, #0
 8006958:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e017      	b.n	800698e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800695e:	697b      	ldr	r3, [r7, #20]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d101      	bne.n	8006968 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006968:	697b      	ldr	r3, [r7, #20]
 800696a:	3b01      	subs	r3, #1
 800696c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	68ba      	ldr	r2, [r7, #8]
 8006976:	4013      	ands	r3, r2
 8006978:	68ba      	ldr	r2, [r7, #8]
 800697a:	1ad3      	subs	r3, r2, r3
 800697c:	425a      	negs	r2, r3
 800697e:	4153      	adcs	r3, r2
 8006980:	b2db      	uxtb	r3, r3
 8006982:	001a      	movs	r2, r3
 8006984:	1dfb      	adds	r3, r7, #7
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	429a      	cmp	r2, r3
 800698a:	d197      	bne.n	80068bc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	0018      	movs	r0, r3
 8006990:	46bd      	mov	sp, r7
 8006992:	b008      	add	sp, #32
 8006994:	bd80      	pop	{r7, pc}
 8006996:	46c0      	nop			; (mov r8, r8)
 8006998:	20000004 	.word	0x20000004
 800699c:	ffffdfff 	.word	0xffffdfff

080069a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b08a      	sub	sp, #40	; 0x28
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	60f8      	str	r0, [r7, #12]
 80069a8:	60b9      	str	r1, [r7, #8]
 80069aa:	607a      	str	r2, [r7, #4]
 80069ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80069ae:	2317      	movs	r3, #23
 80069b0:	18fb      	adds	r3, r7, r3
 80069b2:	2200      	movs	r2, #0
 80069b4:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80069b6:	f7fd fc5f 	bl	8004278 <HAL_GetTick>
 80069ba:	0002      	movs	r2, r0
 80069bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069be:	1a9b      	subs	r3, r3, r2
 80069c0:	683a      	ldr	r2, [r7, #0]
 80069c2:	18d3      	adds	r3, r2, r3
 80069c4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80069c6:	f7fd fc57 	bl	8004278 <HAL_GetTick>
 80069ca:	0003      	movs	r3, r0
 80069cc:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	330c      	adds	r3, #12
 80069d4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80069d6:	4b41      	ldr	r3, [pc, #260]	; (8006adc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	0013      	movs	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	189b      	adds	r3, r3, r2
 80069e0:	00da      	lsls	r2, r3, #3
 80069e2:	1ad3      	subs	r3, r2, r3
 80069e4:	0d1b      	lsrs	r3, r3, #20
 80069e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069e8:	4353      	muls	r3, r2
 80069ea:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80069ec:	e068      	b.n	8006ac0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	23c0      	movs	r3, #192	; 0xc0
 80069f2:	00db      	lsls	r3, r3, #3
 80069f4:	429a      	cmp	r2, r3
 80069f6:	d10a      	bne.n	8006a0e <SPI_WaitFifoStateUntilTimeout+0x6e>
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d107      	bne.n	8006a0e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	b2da      	uxtb	r2, r3
 8006a04:	2117      	movs	r1, #23
 8006a06:	187b      	adds	r3, r7, r1
 8006a08:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006a0a:	187b      	adds	r3, r7, r1
 8006a0c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	d055      	beq.n	8006ac0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006a14:	f7fd fc30 	bl	8004278 <HAL_GetTick>
 8006a18:	0002      	movs	r2, r0
 8006a1a:	6a3b      	ldr	r3, [r7, #32]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d902      	bls.n	8006a2a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8006a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d142      	bne.n	8006ab0 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	685a      	ldr	r2, [r3, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	21e0      	movs	r1, #224	; 0xe0
 8006a36:	438a      	bics	r2, r1
 8006a38:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685a      	ldr	r2, [r3, #4]
 8006a3e:	2382      	movs	r3, #130	; 0x82
 8006a40:	005b      	lsls	r3, r3, #1
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d113      	bne.n	8006a6e <SPI_WaitFifoStateUntilTimeout+0xce>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	689a      	ldr	r2, [r3, #8]
 8006a4a:	2380      	movs	r3, #128	; 0x80
 8006a4c:	021b      	lsls	r3, r3, #8
 8006a4e:	429a      	cmp	r2, r3
 8006a50:	d005      	beq.n	8006a5e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	689a      	ldr	r2, [r3, #8]
 8006a56:	2380      	movs	r3, #128	; 0x80
 8006a58:	00db      	lsls	r3, r3, #3
 8006a5a:	429a      	cmp	r2, r3
 8006a5c:	d107      	bne.n	8006a6e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	2140      	movs	r1, #64	; 0x40
 8006a6a:	438a      	bics	r2, r1
 8006a6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a72:	2380      	movs	r3, #128	; 0x80
 8006a74:	019b      	lsls	r3, r3, #6
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d110      	bne.n	8006a9c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	681a      	ldr	r2, [r3, #0]
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	4916      	ldr	r1, [pc, #88]	; (8006ae0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8006a86:	400a      	ands	r2, r1
 8006a88:	601a      	str	r2, [r3, #0]
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	681b      	ldr	r3, [r3, #0]
 8006a8e:	681a      	ldr	r2, [r3, #0]
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2180      	movs	r1, #128	; 0x80
 8006a96:	0189      	lsls	r1, r1, #6
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	225d      	movs	r2, #93	; 0x5d
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	225c      	movs	r2, #92	; 0x5c
 8006aa8:	2100      	movs	r1, #0
 8006aaa:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e010      	b.n	8006ad2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	3b01      	subs	r3, #1
 8006abe:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	68ba      	ldr	r2, [r7, #8]
 8006ac8:	4013      	ands	r3, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d18e      	bne.n	80069ee <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8006ad0:	2300      	movs	r3, #0
}
 8006ad2:	0018      	movs	r0, r3
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	b00a      	add	sp, #40	; 0x28
 8006ad8:	bd80      	pop	{r7, pc}
 8006ada:	46c0      	nop			; (mov r8, r8)
 8006adc:	20000004 	.word	0x20000004
 8006ae0:	ffffdfff 	.word	0xffffdfff

08006ae4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af02      	add	r7, sp, #8
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006af0:	68ba      	ldr	r2, [r7, #8]
 8006af2:	23c0      	movs	r3, #192	; 0xc0
 8006af4:	0159      	lsls	r1, r3, #5
 8006af6:	68f8      	ldr	r0, [r7, #12]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	9300      	str	r3, [sp, #0]
 8006afc:	0013      	movs	r3, r2
 8006afe:	2200      	movs	r2, #0
 8006b00:	f7ff ff4e 	bl	80069a0 <SPI_WaitFifoStateUntilTimeout>
 8006b04:	1e03      	subs	r3, r0, #0
 8006b06:	d007      	beq.n	8006b18 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b0c:	2220      	movs	r2, #32
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e027      	b.n	8006b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	68f8      	ldr	r0, [r7, #12]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	0013      	movs	r3, r2
 8006b22:	2200      	movs	r2, #0
 8006b24:	2180      	movs	r1, #128	; 0x80
 8006b26:	f7ff fead 	bl	8006884 <SPI_WaitFlagStateUntilTimeout>
 8006b2a:	1e03      	subs	r3, r0, #0
 8006b2c:	d007      	beq.n	8006b3e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b32:	2220      	movs	r2, #32
 8006b34:	431a      	orrs	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	e014      	b.n	8006b68 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	23c0      	movs	r3, #192	; 0xc0
 8006b42:	00d9      	lsls	r1, r3, #3
 8006b44:	68f8      	ldr	r0, [r7, #12]
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	9300      	str	r3, [sp, #0]
 8006b4a:	0013      	movs	r3, r2
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	f7ff ff27 	bl	80069a0 <SPI_WaitFifoStateUntilTimeout>
 8006b52:	1e03      	subs	r3, r0, #0
 8006b54:	d007      	beq.n	8006b66 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b5a:	2220      	movs	r2, #32
 8006b5c:	431a      	orrs	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e000      	b.n	8006b68 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006b66:	2300      	movs	r3, #0
}
 8006b68:	0018      	movs	r0, r3
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	b004      	add	sp, #16
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b082      	sub	sp, #8
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e04a      	b.n	8006c18 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	223d      	movs	r2, #61	; 0x3d
 8006b86:	5c9b      	ldrb	r3, [r3, r2]
 8006b88:	b2db      	uxtb	r3, r3
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d107      	bne.n	8006b9e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	223c      	movs	r2, #60	; 0x3c
 8006b92:	2100      	movs	r1, #0
 8006b94:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	0018      	movs	r0, r3
 8006b9a:	f7fd f86d 	bl	8003c78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	223d      	movs	r2, #61	; 0x3d
 8006ba2:	2102      	movs	r1, #2
 8006ba4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	3304      	adds	r3, #4
 8006bae:	0019      	movs	r1, r3
 8006bb0:	0010      	movs	r0, r2
 8006bb2:	f000 fb8f 	bl	80072d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2248      	movs	r2, #72	; 0x48
 8006bba:	2101      	movs	r1, #1
 8006bbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	223e      	movs	r2, #62	; 0x3e
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	5499      	strb	r1, [r3, r2]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	223f      	movs	r2, #63	; 0x3f
 8006bca:	2101      	movs	r1, #1
 8006bcc:	5499      	strb	r1, [r3, r2]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2240      	movs	r2, #64	; 0x40
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	5499      	strb	r1, [r3, r2]
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	2241      	movs	r2, #65	; 0x41
 8006bda:	2101      	movs	r1, #1
 8006bdc:	5499      	strb	r1, [r3, r2]
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2242      	movs	r2, #66	; 0x42
 8006be2:	2101      	movs	r1, #1
 8006be4:	5499      	strb	r1, [r3, r2]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2243      	movs	r2, #67	; 0x43
 8006bea:	2101      	movs	r1, #1
 8006bec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2244      	movs	r2, #68	; 0x44
 8006bf2:	2101      	movs	r1, #1
 8006bf4:	5499      	strb	r1, [r3, r2]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2245      	movs	r2, #69	; 0x45
 8006bfa:	2101      	movs	r1, #1
 8006bfc:	5499      	strb	r1, [r3, r2]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2246      	movs	r2, #70	; 0x46
 8006c02:	2101      	movs	r1, #1
 8006c04:	5499      	strb	r1, [r3, r2]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2247      	movs	r2, #71	; 0x47
 8006c0a:	2101      	movs	r1, #1
 8006c0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	223d      	movs	r2, #61	; 0x3d
 8006c12:	2101      	movs	r1, #1
 8006c14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006c16:	2300      	movs	r3, #0
}
 8006c18:	0018      	movs	r0, r3
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	b002      	add	sp, #8
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b082      	sub	sp, #8
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e04a      	b.n	8006cc8 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	223d      	movs	r2, #61	; 0x3d
 8006c36:	5c9b      	ldrb	r3, [r3, r2]
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d107      	bne.n	8006c4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	223c      	movs	r2, #60	; 0x3c
 8006c42:	2100      	movs	r1, #0
 8006c44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	0018      	movs	r0, r3
 8006c4a:	f7fd f875 	bl	8003d38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	223d      	movs	r2, #61	; 0x3d
 8006c52:	2102      	movs	r1, #2
 8006c54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	3304      	adds	r3, #4
 8006c5e:	0019      	movs	r1, r3
 8006c60:	0010      	movs	r0, r2
 8006c62:	f000 fb37 	bl	80072d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2248      	movs	r2, #72	; 0x48
 8006c6a:	2101      	movs	r1, #1
 8006c6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	223e      	movs	r2, #62	; 0x3e
 8006c72:	2101      	movs	r1, #1
 8006c74:	5499      	strb	r1, [r3, r2]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	223f      	movs	r2, #63	; 0x3f
 8006c7a:	2101      	movs	r1, #1
 8006c7c:	5499      	strb	r1, [r3, r2]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2240      	movs	r2, #64	; 0x40
 8006c82:	2101      	movs	r1, #1
 8006c84:	5499      	strb	r1, [r3, r2]
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2241      	movs	r2, #65	; 0x41
 8006c8a:	2101      	movs	r1, #1
 8006c8c:	5499      	strb	r1, [r3, r2]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2242      	movs	r2, #66	; 0x42
 8006c92:	2101      	movs	r1, #1
 8006c94:	5499      	strb	r1, [r3, r2]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	2243      	movs	r2, #67	; 0x43
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2244      	movs	r2, #68	; 0x44
 8006ca2:	2101      	movs	r1, #1
 8006ca4:	5499      	strb	r1, [r3, r2]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2245      	movs	r2, #69	; 0x45
 8006caa:	2101      	movs	r1, #1
 8006cac:	5499      	strb	r1, [r3, r2]
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2246      	movs	r2, #70	; 0x46
 8006cb2:	2101      	movs	r1, #1
 8006cb4:	5499      	strb	r1, [r3, r2]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2247      	movs	r2, #71	; 0x47
 8006cba:	2101      	movs	r1, #1
 8006cbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	223d      	movs	r2, #61	; 0x3d
 8006cc2:	2101      	movs	r1, #1
 8006cc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	0018      	movs	r0, r3
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	b002      	add	sp, #8
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b086      	sub	sp, #24
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e090      	b.n	8006e06 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	223d      	movs	r2, #61	; 0x3d
 8006ce8:	5c9b      	ldrb	r3, [r3, r2]
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d107      	bne.n	8006d00 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	223c      	movs	r2, #60	; 0x3c
 8006cf4:	2100      	movs	r1, #0
 8006cf6:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	0018      	movs	r0, r3
 8006cfc:	f7fc ff28 	bl	8003b50 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	223d      	movs	r2, #61	; 0x3d
 8006d04:	2102      	movs	r1, #2
 8006d06:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	689a      	ldr	r2, [r3, #8]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	493f      	ldr	r1, [pc, #252]	; (8006e10 <HAL_TIM_Encoder_Init+0x140>)
 8006d14:	400a      	ands	r2, r1
 8006d16:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	3304      	adds	r3, #4
 8006d20:	0019      	movs	r1, r3
 8006d22:	0010      	movs	r0, r2
 8006d24:	f000 fad6 	bl	80072d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	699b      	ldr	r3, [r3, #24]
 8006d36:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	697a      	ldr	r2, [r7, #20]
 8006d46:	4313      	orrs	r3, r2
 8006d48:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	4a31      	ldr	r2, [pc, #196]	; (8006e14 <HAL_TIM_Encoder_Init+0x144>)
 8006d4e:	4013      	ands	r3, r2
 8006d50:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	689a      	ldr	r2, [r3, #8]
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	699b      	ldr	r3, [r3, #24]
 8006d5a:	021b      	lsls	r3, r3, #8
 8006d5c:	4313      	orrs	r3, r2
 8006d5e:	693a      	ldr	r2, [r7, #16]
 8006d60:	4313      	orrs	r3, r2
 8006d62:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006d64:	693b      	ldr	r3, [r7, #16]
 8006d66:	4a2c      	ldr	r2, [pc, #176]	; (8006e18 <HAL_TIM_Encoder_Init+0x148>)
 8006d68:	4013      	ands	r3, r2
 8006d6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006d6c:	693b      	ldr	r3, [r7, #16]
 8006d6e:	4a2b      	ldr	r2, [pc, #172]	; (8006e1c <HAL_TIM_Encoder_Init+0x14c>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	68da      	ldr	r2, [r3, #12]
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	69db      	ldr	r3, [r3, #28]
 8006d7c:	021b      	lsls	r3, r3, #8
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	693a      	ldr	r2, [r7, #16]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	011a      	lsls	r2, r3, #4
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	6a1b      	ldr	r3, [r3, #32]
 8006d90:	031b      	lsls	r3, r3, #12
 8006d92:	4313      	orrs	r3, r2
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	2222      	movs	r2, #34	; 0x22
 8006d9e:	4393      	bics	r3, r2
 8006da0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2288      	movs	r2, #136	; 0x88
 8006da6:	4393      	bics	r3, r2
 8006da8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006daa:	683b      	ldr	r3, [r7, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	4313      	orrs	r3, r2
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	4313      	orrs	r3, r2
 8006dba:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	697a      	ldr	r2, [r7, #20]
 8006dc2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	68fa      	ldr	r2, [r7, #12]
 8006dd2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2248      	movs	r2, #72	; 0x48
 8006dd8:	2101      	movs	r1, #1
 8006dda:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	223e      	movs	r2, #62	; 0x3e
 8006de0:	2101      	movs	r1, #1
 8006de2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	223f      	movs	r2, #63	; 0x3f
 8006de8:	2101      	movs	r1, #1
 8006dea:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	2244      	movs	r2, #68	; 0x44
 8006df0:	2101      	movs	r1, #1
 8006df2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2245      	movs	r2, #69	; 0x45
 8006df8:	2101      	movs	r1, #1
 8006dfa:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	223d      	movs	r2, #61	; 0x3d
 8006e00:	2101      	movs	r1, #1
 8006e02:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006e04:	2300      	movs	r3, #0
}
 8006e06:	0018      	movs	r0, r3
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	b006      	add	sp, #24
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	46c0      	nop			; (mov r8, r8)
 8006e10:	fffebff8 	.word	0xfffebff8
 8006e14:	fffffcfc 	.word	0xfffffcfc
 8006e18:	fffff3f3 	.word	0xfffff3f3
 8006e1c:	ffff0f0f 	.word	0xffff0f0f

08006e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	2202      	movs	r2, #2
 8006e30:	4013      	ands	r3, r2
 8006e32:	2b02      	cmp	r3, #2
 8006e34:	d124      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	68db      	ldr	r3, [r3, #12]
 8006e3c:	2202      	movs	r2, #2
 8006e3e:	4013      	ands	r3, r2
 8006e40:	2b02      	cmp	r3, #2
 8006e42:	d11d      	bne.n	8006e80 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2203      	movs	r2, #3
 8006e4a:	4252      	negs	r2, r2
 8006e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2201      	movs	r2, #1
 8006e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699b      	ldr	r3, [r3, #24]
 8006e5a:	2203      	movs	r2, #3
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	d004      	beq.n	8006e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	0018      	movs	r0, r3
 8006e64:	f000 fa1e 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8006e68:	e007      	b.n	8006e7a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	0018      	movs	r0, r3
 8006e6e:	f000 fa11 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	0018      	movs	r0, r3
 8006e76:	f000 fa1d 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	691b      	ldr	r3, [r3, #16]
 8006e86:	2204      	movs	r2, #4
 8006e88:	4013      	ands	r3, r2
 8006e8a:	2b04      	cmp	r3, #4
 8006e8c:	d125      	bne.n	8006eda <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	2204      	movs	r2, #4
 8006e96:	4013      	ands	r3, r2
 8006e98:	2b04      	cmp	r3, #4
 8006e9a:	d11e      	bne.n	8006eda <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	2205      	movs	r2, #5
 8006ea2:	4252      	negs	r2, r2
 8006ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2202      	movs	r2, #2
 8006eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	23c0      	movs	r3, #192	; 0xc0
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	d004      	beq.n	8006ec4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	0018      	movs	r0, r3
 8006ebe:	f000 f9f1 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8006ec2:	e007      	b.n	8006ed4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	0018      	movs	r0, r3
 8006ec8:	f000 f9e4 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	0018      	movs	r0, r3
 8006ed0:	f000 f9f0 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	691b      	ldr	r3, [r3, #16]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	4013      	ands	r3, r2
 8006ee4:	2b08      	cmp	r3, #8
 8006ee6:	d124      	bne.n	8006f32 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	68db      	ldr	r3, [r3, #12]
 8006eee:	2208      	movs	r2, #8
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	2b08      	cmp	r3, #8
 8006ef4:	d11d      	bne.n	8006f32 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	2209      	movs	r2, #9
 8006efc:	4252      	negs	r2, r2
 8006efe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2204      	movs	r2, #4
 8006f04:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	69db      	ldr	r3, [r3, #28]
 8006f0c:	2203      	movs	r2, #3
 8006f0e:	4013      	ands	r3, r2
 8006f10:	d004      	beq.n	8006f1c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	0018      	movs	r0, r3
 8006f16:	f000 f9c5 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8006f1a:	e007      	b.n	8006f2c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	0018      	movs	r0, r3
 8006f20:	f000 f9b8 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	0018      	movs	r0, r3
 8006f28:	f000 f9c4 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	691b      	ldr	r3, [r3, #16]
 8006f38:	2210      	movs	r2, #16
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b10      	cmp	r3, #16
 8006f3e:	d125      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	2210      	movs	r2, #16
 8006f48:	4013      	ands	r3, r2
 8006f4a:	2b10      	cmp	r3, #16
 8006f4c:	d11e      	bne.n	8006f8c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	2211      	movs	r2, #17
 8006f54:	4252      	negs	r2, r2
 8006f56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2208      	movs	r2, #8
 8006f5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	69da      	ldr	r2, [r3, #28]
 8006f64:	23c0      	movs	r3, #192	; 0xc0
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4013      	ands	r3, r2
 8006f6a:	d004      	beq.n	8006f76 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	0018      	movs	r0, r3
 8006f70:	f000 f998 	bl	80072a4 <HAL_TIM_IC_CaptureCallback>
 8006f74:	e007      	b.n	8006f86 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	0018      	movs	r0, r3
 8006f7a:	f000 f98b 	bl	8007294 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	0018      	movs	r0, r3
 8006f82:	f000 f997 	bl	80072b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2200      	movs	r2, #0
 8006f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	691b      	ldr	r3, [r3, #16]
 8006f92:	2201      	movs	r2, #1
 8006f94:	4013      	ands	r3, r2
 8006f96:	2b01      	cmp	r3, #1
 8006f98:	d10f      	bne.n	8006fba <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	2b01      	cmp	r3, #1
 8006fa6:	d108      	bne.n	8006fba <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	2202      	movs	r2, #2
 8006fae:	4252      	negs	r2, r2
 8006fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	0018      	movs	r0, r3
 8006fb6:	f000 f965 	bl	8007284 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	691b      	ldr	r3, [r3, #16]
 8006fc0:	2280      	movs	r2, #128	; 0x80
 8006fc2:	4013      	ands	r3, r2
 8006fc4:	2b80      	cmp	r3, #128	; 0x80
 8006fc6:	d10f      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	68db      	ldr	r3, [r3, #12]
 8006fce:	2280      	movs	r2, #128	; 0x80
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	2b80      	cmp	r3, #128	; 0x80
 8006fd4:	d108      	bne.n	8006fe8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	2281      	movs	r2, #129	; 0x81
 8006fdc:	4252      	negs	r2, r2
 8006fde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	0018      	movs	r0, r3
 8006fe4:	f000 fdc6 	bl	8007b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	691a      	ldr	r2, [r3, #16]
 8006fee:	2380      	movs	r3, #128	; 0x80
 8006ff0:	005b      	lsls	r3, r3, #1
 8006ff2:	401a      	ands	r2, r3
 8006ff4:	2380      	movs	r3, #128	; 0x80
 8006ff6:	005b      	lsls	r3, r3, #1
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d10e      	bne.n	800701a <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	2280      	movs	r2, #128	; 0x80
 8007004:	4013      	ands	r3, r2
 8007006:	2b80      	cmp	r3, #128	; 0x80
 8007008:	d107      	bne.n	800701a <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1c      	ldr	r2, [pc, #112]	; (8007080 <HAL_TIM_IRQHandler+0x260>)
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	0018      	movs	r0, r3
 8007016:	f000 fdb5 	bl	8007b84 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	691b      	ldr	r3, [r3, #16]
 8007020:	2240      	movs	r2, #64	; 0x40
 8007022:	4013      	ands	r3, r2
 8007024:	2b40      	cmp	r3, #64	; 0x40
 8007026:	d10f      	bne.n	8007048 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	2240      	movs	r2, #64	; 0x40
 8007030:	4013      	ands	r3, r2
 8007032:	2b40      	cmp	r3, #64	; 0x40
 8007034:	d108      	bne.n	8007048 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2241      	movs	r2, #65	; 0x41
 800703c:	4252      	negs	r2, r2
 800703e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	0018      	movs	r0, r3
 8007044:	f000 f93e 	bl	80072c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	2220      	movs	r2, #32
 8007050:	4013      	ands	r3, r2
 8007052:	2b20      	cmp	r3, #32
 8007054:	d10f      	bne.n	8007076 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2220      	movs	r2, #32
 800705e:	4013      	ands	r3, r2
 8007060:	2b20      	cmp	r3, #32
 8007062:	d108      	bne.n	8007076 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2221      	movs	r2, #33	; 0x21
 800706a:	4252      	negs	r2, r2
 800706c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	0018      	movs	r0, r3
 8007072:	f000 fd77 	bl	8007b64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007076:	46c0      	nop			; (mov r8, r8)
 8007078:	46bd      	mov	sp, r7
 800707a:	b002      	add	sp, #8
 800707c:	bd80      	pop	{r7, pc}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	fffffeff 	.word	0xfffffeff

08007084 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007090:	2317      	movs	r3, #23
 8007092:	18fb      	adds	r3, r7, r3
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	223c      	movs	r2, #60	; 0x3c
 800709c:	5c9b      	ldrb	r3, [r3, r2]
 800709e:	2b01      	cmp	r3, #1
 80070a0:	d101      	bne.n	80070a6 <HAL_TIM_PWM_ConfigChannel+0x22>
 80070a2:	2302      	movs	r3, #2
 80070a4:	e0e5      	b.n	8007272 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	223c      	movs	r2, #60	; 0x3c
 80070aa:	2101      	movs	r1, #1
 80070ac:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2b14      	cmp	r3, #20
 80070b2:	d900      	bls.n	80070b6 <HAL_TIM_PWM_ConfigChannel+0x32>
 80070b4:	e0d1      	b.n	800725a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	009a      	lsls	r2, r3, #2
 80070ba:	4b70      	ldr	r3, [pc, #448]	; (800727c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80070bc:	18d3      	adds	r3, r2, r3
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	68ba      	ldr	r2, [r7, #8]
 80070c8:	0011      	movs	r1, r2
 80070ca:	0018      	movs	r0, r3
 80070cc:	f000 f978 	bl	80073c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	699a      	ldr	r2, [r3, #24]
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	2108      	movs	r1, #8
 80070dc:	430a      	orrs	r2, r1
 80070de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	699a      	ldr	r2, [r3, #24]
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	2104      	movs	r1, #4
 80070ec:	438a      	bics	r2, r1
 80070ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6999      	ldr	r1, [r3, #24]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	691a      	ldr	r2, [r3, #16]
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	619a      	str	r2, [r3, #24]
      break;
 8007102:	e0af      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	0011      	movs	r1, r2
 800710c:	0018      	movs	r0, r3
 800710e:	f000 f9e1 	bl	80074d4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	699a      	ldr	r2, [r3, #24]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2180      	movs	r1, #128	; 0x80
 800711e:	0109      	lsls	r1, r1, #4
 8007120:	430a      	orrs	r2, r1
 8007122:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	699a      	ldr	r2, [r3, #24]
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	4954      	ldr	r1, [pc, #336]	; (8007280 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007130:	400a      	ands	r2, r1
 8007132:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	6999      	ldr	r1, [r3, #24]
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	691b      	ldr	r3, [r3, #16]
 800713e:	021a      	lsls	r2, r3, #8
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	430a      	orrs	r2, r1
 8007146:	619a      	str	r2, [r3, #24]
      break;
 8007148:	e08c      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	68ba      	ldr	r2, [r7, #8]
 8007150:	0011      	movs	r1, r2
 8007152:	0018      	movs	r0, r3
 8007154:	f000 fa42 	bl	80075dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	69da      	ldr	r2, [r3, #28]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	2108      	movs	r1, #8
 8007164:	430a      	orrs	r2, r1
 8007166:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	69da      	ldr	r2, [r3, #28]
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	2104      	movs	r1, #4
 8007174:	438a      	bics	r2, r1
 8007176:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	69d9      	ldr	r1, [r3, #28]
 800717e:	68bb      	ldr	r3, [r7, #8]
 8007180:	691a      	ldr	r2, [r3, #16]
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	430a      	orrs	r2, r1
 8007188:	61da      	str	r2, [r3, #28]
      break;
 800718a:	e06b      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68ba      	ldr	r2, [r7, #8]
 8007192:	0011      	movs	r1, r2
 8007194:	0018      	movs	r0, r3
 8007196:	f000 faa9 	bl	80076ec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	69da      	ldr	r2, [r3, #28]
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	2180      	movs	r1, #128	; 0x80
 80071a6:	0109      	lsls	r1, r1, #4
 80071a8:	430a      	orrs	r2, r1
 80071aa:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	69da      	ldr	r2, [r3, #28]
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	4932      	ldr	r1, [pc, #200]	; (8007280 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80071b8:	400a      	ands	r2, r1
 80071ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	69d9      	ldr	r1, [r3, #28]
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	021a      	lsls	r2, r3, #8
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	430a      	orrs	r2, r1
 80071ce:	61da      	str	r2, [r3, #28]
      break;
 80071d0:	e048      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	68ba      	ldr	r2, [r7, #8]
 80071d8:	0011      	movs	r1, r2
 80071da:	0018      	movs	r0, r3
 80071dc:	f000 faf0 	bl	80077c0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2108      	movs	r1, #8
 80071ec:	430a      	orrs	r2, r1
 80071ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2104      	movs	r1, #4
 80071fc:	438a      	bics	r2, r1
 80071fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8007206:	68bb      	ldr	r3, [r7, #8]
 8007208:	691a      	ldr	r2, [r3, #16]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	430a      	orrs	r2, r1
 8007210:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007212:	e027      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	68ba      	ldr	r2, [r7, #8]
 800721a:	0011      	movs	r1, r2
 800721c:	0018      	movs	r0, r3
 800721e:	f000 fb2f 	bl	8007880 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2180      	movs	r1, #128	; 0x80
 800722e:	0109      	lsls	r1, r1, #4
 8007230:	430a      	orrs	r2, r1
 8007232:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4910      	ldr	r1, [pc, #64]	; (8007280 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8007240:	400a      	ands	r2, r1
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	021a      	lsls	r2, r3, #8
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	430a      	orrs	r2, r1
 8007256:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8007258:	e004      	b.n	8007264 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800725a:	2317      	movs	r3, #23
 800725c:	18fb      	adds	r3, r7, r3
 800725e:	2201      	movs	r2, #1
 8007260:	701a      	strb	r2, [r3, #0]
      break;
 8007262:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	223c      	movs	r2, #60	; 0x3c
 8007268:	2100      	movs	r1, #0
 800726a:	5499      	strb	r1, [r3, r2]

  return status;
 800726c:	2317      	movs	r3, #23
 800726e:	18fb      	adds	r3, r7, r3
 8007270:	781b      	ldrb	r3, [r3, #0]
}
 8007272:	0018      	movs	r0, r3
 8007274:	46bd      	mov	sp, r7
 8007276:	b006      	add	sp, #24
 8007278:	bd80      	pop	{r7, pc}
 800727a:	46c0      	nop			; (mov r8, r8)
 800727c:	0800d2dc 	.word	0x0800d2dc
 8007280:	fffffbff 	.word	0xfffffbff

08007284 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b082      	sub	sp, #8
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800728c:	46c0      	nop			; (mov r8, r8)
 800728e:	46bd      	mov	sp, r7
 8007290:	b002      	add	sp, #8
 8007292:	bd80      	pop	{r7, pc}

08007294 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b082      	sub	sp, #8
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800729c:	46c0      	nop			; (mov r8, r8)
 800729e:	46bd      	mov	sp, r7
 80072a0:	b002      	add	sp, #8
 80072a2:	bd80      	pop	{r7, pc}

080072a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80072ac:	46c0      	nop			; (mov r8, r8)
 80072ae:	46bd      	mov	sp, r7
 80072b0:	b002      	add	sp, #8
 80072b2:	bd80      	pop	{r7, pc}

080072b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b082      	sub	sp, #8
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80072bc:	46c0      	nop			; (mov r8, r8)
 80072be:	46bd      	mov	sp, r7
 80072c0:	b002      	add	sp, #8
 80072c2:	bd80      	pop	{r7, pc}

080072c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80072cc:	46c0      	nop			; (mov r8, r8)
 80072ce:	46bd      	mov	sp, r7
 80072d0:	b002      	add	sp, #8
 80072d2:	bd80      	pop	{r7, pc}

080072d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a2f      	ldr	r2, [pc, #188]	; (80073a4 <TIM_Base_SetConfig+0xd0>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d003      	beq.n	80072f4 <TIM_Base_SetConfig+0x20>
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	4a2e      	ldr	r2, [pc, #184]	; (80073a8 <TIM_Base_SetConfig+0xd4>)
 80072f0:	4293      	cmp	r3, r2
 80072f2:	d108      	bne.n	8007306 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2270      	movs	r2, #112	; 0x70
 80072f8:	4393      	bics	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80072fc:	683b      	ldr	r3, [r7, #0]
 80072fe:	685b      	ldr	r3, [r3, #4]
 8007300:	68fa      	ldr	r2, [r7, #12]
 8007302:	4313      	orrs	r3, r2
 8007304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a26      	ldr	r2, [pc, #152]	; (80073a4 <TIM_Base_SetConfig+0xd0>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d013      	beq.n	8007336 <TIM_Base_SetConfig+0x62>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	4a25      	ldr	r2, [pc, #148]	; (80073a8 <TIM_Base_SetConfig+0xd4>)
 8007312:	4293      	cmp	r3, r2
 8007314:	d00f      	beq.n	8007336 <TIM_Base_SetConfig+0x62>
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	4a24      	ldr	r2, [pc, #144]	; (80073ac <TIM_Base_SetConfig+0xd8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d00b      	beq.n	8007336 <TIM_Base_SetConfig+0x62>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	4a23      	ldr	r2, [pc, #140]	; (80073b0 <TIM_Base_SetConfig+0xdc>)
 8007322:	4293      	cmp	r3, r2
 8007324:	d007      	beq.n	8007336 <TIM_Base_SetConfig+0x62>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	4a22      	ldr	r2, [pc, #136]	; (80073b4 <TIM_Base_SetConfig+0xe0>)
 800732a:	4293      	cmp	r3, r2
 800732c:	d003      	beq.n	8007336 <TIM_Base_SetConfig+0x62>
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	4a21      	ldr	r2, [pc, #132]	; (80073b8 <TIM_Base_SetConfig+0xe4>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d108      	bne.n	8007348 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	4a20      	ldr	r2, [pc, #128]	; (80073bc <TIM_Base_SetConfig+0xe8>)
 800733a:	4013      	ands	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	68db      	ldr	r3, [r3, #12]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	4313      	orrs	r3, r2
 8007346:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	2280      	movs	r2, #128	; 0x80
 800734c:	4393      	bics	r3, r2
 800734e:	001a      	movs	r2, r3
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	4313      	orrs	r3, r2
 8007356:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	689a      	ldr	r2, [r3, #8]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a0c      	ldr	r2, [pc, #48]	; (80073a4 <TIM_Base_SetConfig+0xd0>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d00b      	beq.n	800738e <TIM_Base_SetConfig+0xba>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a0d      	ldr	r2, [pc, #52]	; (80073b0 <TIM_Base_SetConfig+0xdc>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d007      	beq.n	800738e <TIM_Base_SetConfig+0xba>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a0c      	ldr	r2, [pc, #48]	; (80073b4 <TIM_Base_SetConfig+0xe0>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d003      	beq.n	800738e <TIM_Base_SetConfig+0xba>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a0b      	ldr	r2, [pc, #44]	; (80073b8 <TIM_Base_SetConfig+0xe4>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d103      	bne.n	8007396 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	691a      	ldr	r2, [r3, #16]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	2201      	movs	r2, #1
 800739a:	615a      	str	r2, [r3, #20]
}
 800739c:	46c0      	nop			; (mov r8, r8)
 800739e:	46bd      	mov	sp, r7
 80073a0:	b004      	add	sp, #16
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40000400 	.word	0x40000400
 80073ac:	40002000 	.word	0x40002000
 80073b0:	40014000 	.word	0x40014000
 80073b4:	40014400 	.word	0x40014400
 80073b8:	40014800 	.word	0x40014800
 80073bc:	fffffcff 	.word	0xfffffcff

080073c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b086      	sub	sp, #24
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
 80073c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	2201      	movs	r2, #1
 80073d0:	4393      	bics	r3, r2
 80073d2:	001a      	movs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a1b      	ldr	r3, [r3, #32]
 80073dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	685b      	ldr	r3, [r3, #4]
 80073e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	699b      	ldr	r3, [r3, #24]
 80073e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	4a32      	ldr	r2, [pc, #200]	; (80074b8 <TIM_OC1_SetConfig+0xf8>)
 80073ee:	4013      	ands	r3, r2
 80073f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2203      	movs	r2, #3
 80073f6:	4393      	bics	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	4313      	orrs	r3, r2
 8007402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007404:	697b      	ldr	r3, [r7, #20]
 8007406:	2202      	movs	r2, #2
 8007408:	4393      	bics	r3, r2
 800740a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	689b      	ldr	r3, [r3, #8]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a28      	ldr	r2, [pc, #160]	; (80074bc <TIM_OC1_SetConfig+0xfc>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00b      	beq.n	8007436 <TIM_OC1_SetConfig+0x76>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a27      	ldr	r2, [pc, #156]	; (80074c0 <TIM_OC1_SetConfig+0x100>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d007      	beq.n	8007436 <TIM_OC1_SetConfig+0x76>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a26      	ldr	r2, [pc, #152]	; (80074c4 <TIM_OC1_SetConfig+0x104>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d003      	beq.n	8007436 <TIM_OC1_SetConfig+0x76>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a25      	ldr	r2, [pc, #148]	; (80074c8 <TIM_OC1_SetConfig+0x108>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d10c      	bne.n	8007450 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007436:	697b      	ldr	r3, [r7, #20]
 8007438:	2208      	movs	r2, #8
 800743a:	4393      	bics	r3, r2
 800743c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	697a      	ldr	r2, [r7, #20]
 8007444:	4313      	orrs	r3, r2
 8007446:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	2204      	movs	r2, #4
 800744c:	4393      	bics	r3, r2
 800744e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	4a1a      	ldr	r2, [pc, #104]	; (80074bc <TIM_OC1_SetConfig+0xfc>)
 8007454:	4293      	cmp	r3, r2
 8007456:	d00b      	beq.n	8007470 <TIM_OC1_SetConfig+0xb0>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	4a19      	ldr	r2, [pc, #100]	; (80074c0 <TIM_OC1_SetConfig+0x100>)
 800745c:	4293      	cmp	r3, r2
 800745e:	d007      	beq.n	8007470 <TIM_OC1_SetConfig+0xb0>
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	4a18      	ldr	r2, [pc, #96]	; (80074c4 <TIM_OC1_SetConfig+0x104>)
 8007464:	4293      	cmp	r3, r2
 8007466:	d003      	beq.n	8007470 <TIM_OC1_SetConfig+0xb0>
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	4a17      	ldr	r2, [pc, #92]	; (80074c8 <TIM_OC1_SetConfig+0x108>)
 800746c:	4293      	cmp	r3, r2
 800746e:	d111      	bne.n	8007494 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	4a16      	ldr	r2, [pc, #88]	; (80074cc <TIM_OC1_SetConfig+0x10c>)
 8007474:	4013      	ands	r3, r2
 8007476:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007478:	693b      	ldr	r3, [r7, #16]
 800747a:	4a15      	ldr	r2, [pc, #84]	; (80074d0 <TIM_OC1_SetConfig+0x110>)
 800747c:	4013      	ands	r3, r2
 800747e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007480:	683b      	ldr	r3, [r7, #0]
 8007482:	695b      	ldr	r3, [r3, #20]
 8007484:	693a      	ldr	r2, [r7, #16]
 8007486:	4313      	orrs	r3, r2
 8007488:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	699b      	ldr	r3, [r3, #24]
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	693a      	ldr	r2, [r7, #16]
 8007498:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	68fa      	ldr	r2, [r7, #12]
 800749e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80074a0:	683b      	ldr	r3, [r7, #0]
 80074a2:	685a      	ldr	r2, [r3, #4]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	697a      	ldr	r2, [r7, #20]
 80074ac:	621a      	str	r2, [r3, #32]
}
 80074ae:	46c0      	nop			; (mov r8, r8)
 80074b0:	46bd      	mov	sp, r7
 80074b2:	b006      	add	sp, #24
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	46c0      	nop			; (mov r8, r8)
 80074b8:	fffeff8f 	.word	0xfffeff8f
 80074bc:	40012c00 	.word	0x40012c00
 80074c0:	40014000 	.word	0x40014000
 80074c4:	40014400 	.word	0x40014400
 80074c8:	40014800 	.word	0x40014800
 80074cc:	fffffeff 	.word	0xfffffeff
 80074d0:	fffffdff 	.word	0xfffffdff

080074d4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b086      	sub	sp, #24
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	2210      	movs	r2, #16
 80074e4:	4393      	bics	r3, r2
 80074e6:	001a      	movs	r2, r3
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6a1b      	ldr	r3, [r3, #32]
 80074f0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	699b      	ldr	r3, [r3, #24]
 80074fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	4a2e      	ldr	r2, [pc, #184]	; (80075bc <TIM_OC2_SetConfig+0xe8>)
 8007502:	4013      	ands	r3, r2
 8007504:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	4a2d      	ldr	r2, [pc, #180]	; (80075c0 <TIM_OC2_SetConfig+0xec>)
 800750a:	4013      	ands	r3, r2
 800750c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	68fa      	ldr	r2, [r7, #12]
 8007516:	4313      	orrs	r3, r2
 8007518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	2220      	movs	r2, #32
 800751e:	4393      	bics	r3, r2
 8007520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	689b      	ldr	r3, [r3, #8]
 8007526:	011b      	lsls	r3, r3, #4
 8007528:	697a      	ldr	r2, [r7, #20]
 800752a:	4313      	orrs	r3, r2
 800752c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	4a24      	ldr	r2, [pc, #144]	; (80075c4 <TIM_OC2_SetConfig+0xf0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d10d      	bne.n	8007552 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	2280      	movs	r2, #128	; 0x80
 800753a:	4393      	bics	r3, r2
 800753c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800753e:	683b      	ldr	r3, [r7, #0]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	011b      	lsls	r3, r3, #4
 8007544:	697a      	ldr	r2, [r7, #20]
 8007546:	4313      	orrs	r3, r2
 8007548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800754a:	697b      	ldr	r3, [r7, #20]
 800754c:	2240      	movs	r2, #64	; 0x40
 800754e:	4393      	bics	r3, r2
 8007550:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	4a1b      	ldr	r2, [pc, #108]	; (80075c4 <TIM_OC2_SetConfig+0xf0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d00b      	beq.n	8007572 <TIM_OC2_SetConfig+0x9e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	4a1a      	ldr	r2, [pc, #104]	; (80075c8 <TIM_OC2_SetConfig+0xf4>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d007      	beq.n	8007572 <TIM_OC2_SetConfig+0x9e>
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	4a19      	ldr	r2, [pc, #100]	; (80075cc <TIM_OC2_SetConfig+0xf8>)
 8007566:	4293      	cmp	r3, r2
 8007568:	d003      	beq.n	8007572 <TIM_OC2_SetConfig+0x9e>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	4a18      	ldr	r2, [pc, #96]	; (80075d0 <TIM_OC2_SetConfig+0xfc>)
 800756e:	4293      	cmp	r3, r2
 8007570:	d113      	bne.n	800759a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	4a17      	ldr	r2, [pc, #92]	; (80075d4 <TIM_OC2_SetConfig+0x100>)
 8007576:	4013      	ands	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	4a16      	ldr	r2, [pc, #88]	; (80075d8 <TIM_OC2_SetConfig+0x104>)
 800757e:	4013      	ands	r3, r2
 8007580:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	009b      	lsls	r3, r3, #2
 8007594:	693a      	ldr	r2, [r7, #16]
 8007596:	4313      	orrs	r3, r2
 8007598:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	693a      	ldr	r2, [r7, #16]
 800759e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	68fa      	ldr	r2, [r7, #12]
 80075a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	685a      	ldr	r2, [r3, #4]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	697a      	ldr	r2, [r7, #20]
 80075b2:	621a      	str	r2, [r3, #32]
}
 80075b4:	46c0      	nop			; (mov r8, r8)
 80075b6:	46bd      	mov	sp, r7
 80075b8:	b006      	add	sp, #24
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	feff8fff 	.word	0xfeff8fff
 80075c0:	fffffcff 	.word	0xfffffcff
 80075c4:	40012c00 	.word	0x40012c00
 80075c8:	40014000 	.word	0x40014000
 80075cc:	40014400 	.word	0x40014400
 80075d0:	40014800 	.word	0x40014800
 80075d4:	fffffbff 	.word	0xfffffbff
 80075d8:	fffff7ff 	.word	0xfffff7ff

080075dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075dc:	b580      	push	{r7, lr}
 80075de:	b086      	sub	sp, #24
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
 80075e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	4a35      	ldr	r2, [pc, #212]	; (80076c0 <TIM_OC3_SetConfig+0xe4>)
 80075ec:	401a      	ands	r2, r3
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	6a1b      	ldr	r3, [r3, #32]
 80075f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	69db      	ldr	r3, [r3, #28]
 8007602:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	4a2f      	ldr	r2, [pc, #188]	; (80076c4 <TIM_OC3_SetConfig+0xe8>)
 8007608:	4013      	ands	r3, r2
 800760a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	2203      	movs	r2, #3
 8007610:	4393      	bics	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	4313      	orrs	r3, r2
 800761c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800761e:	697b      	ldr	r3, [r7, #20]
 8007620:	4a29      	ldr	r2, [pc, #164]	; (80076c8 <TIM_OC3_SetConfig+0xec>)
 8007622:	4013      	ands	r3, r2
 8007624:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007626:	683b      	ldr	r3, [r7, #0]
 8007628:	689b      	ldr	r3, [r3, #8]
 800762a:	021b      	lsls	r3, r3, #8
 800762c:	697a      	ldr	r2, [r7, #20]
 800762e:	4313      	orrs	r3, r2
 8007630:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	4a25      	ldr	r2, [pc, #148]	; (80076cc <TIM_OC3_SetConfig+0xf0>)
 8007636:	4293      	cmp	r3, r2
 8007638:	d10d      	bne.n	8007656 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800763a:	697b      	ldr	r3, [r7, #20]
 800763c:	4a24      	ldr	r2, [pc, #144]	; (80076d0 <TIM_OC3_SetConfig+0xf4>)
 800763e:	4013      	ands	r3, r2
 8007640:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	68db      	ldr	r3, [r3, #12]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	697a      	ldr	r2, [r7, #20]
 800764a:	4313      	orrs	r3, r2
 800764c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	4a20      	ldr	r2, [pc, #128]	; (80076d4 <TIM_OC3_SetConfig+0xf8>)
 8007652:	4013      	ands	r3, r2
 8007654:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	4a1c      	ldr	r2, [pc, #112]	; (80076cc <TIM_OC3_SetConfig+0xf0>)
 800765a:	4293      	cmp	r3, r2
 800765c:	d00b      	beq.n	8007676 <TIM_OC3_SetConfig+0x9a>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	4a1d      	ldr	r2, [pc, #116]	; (80076d8 <TIM_OC3_SetConfig+0xfc>)
 8007662:	4293      	cmp	r3, r2
 8007664:	d007      	beq.n	8007676 <TIM_OC3_SetConfig+0x9a>
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4a1c      	ldr	r2, [pc, #112]	; (80076dc <TIM_OC3_SetConfig+0x100>)
 800766a:	4293      	cmp	r3, r2
 800766c:	d003      	beq.n	8007676 <TIM_OC3_SetConfig+0x9a>
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	4a1b      	ldr	r2, [pc, #108]	; (80076e0 <TIM_OC3_SetConfig+0x104>)
 8007672:	4293      	cmp	r3, r2
 8007674:	d113      	bne.n	800769e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4a1a      	ldr	r2, [pc, #104]	; (80076e4 <TIM_OC3_SetConfig+0x108>)
 800767a:	4013      	ands	r3, r2
 800767c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	4a19      	ldr	r2, [pc, #100]	; (80076e8 <TIM_OC3_SetConfig+0x10c>)
 8007682:	4013      	ands	r3, r2
 8007684:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	695b      	ldr	r3, [r3, #20]
 800768a:	011b      	lsls	r3, r3, #4
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4313      	orrs	r3, r2
 8007690:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007692:	683b      	ldr	r3, [r7, #0]
 8007694:	699b      	ldr	r3, [r3, #24]
 8007696:	011b      	lsls	r3, r3, #4
 8007698:	693a      	ldr	r2, [r7, #16]
 800769a:	4313      	orrs	r3, r2
 800769c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	693a      	ldr	r2, [r7, #16]
 80076a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68fa      	ldr	r2, [r7, #12]
 80076a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685a      	ldr	r2, [r3, #4]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	697a      	ldr	r2, [r7, #20]
 80076b6:	621a      	str	r2, [r3, #32]
}
 80076b8:	46c0      	nop			; (mov r8, r8)
 80076ba:	46bd      	mov	sp, r7
 80076bc:	b006      	add	sp, #24
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	fffffeff 	.word	0xfffffeff
 80076c4:	fffeff8f 	.word	0xfffeff8f
 80076c8:	fffffdff 	.word	0xfffffdff
 80076cc:	40012c00 	.word	0x40012c00
 80076d0:	fffff7ff 	.word	0xfffff7ff
 80076d4:	fffffbff 	.word	0xfffffbff
 80076d8:	40014000 	.word	0x40014000
 80076dc:	40014400 	.word	0x40014400
 80076e0:	40014800 	.word	0x40014800
 80076e4:	ffffefff 	.word	0xffffefff
 80076e8:	ffffdfff 	.word	0xffffdfff

080076ec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b086      	sub	sp, #24
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a1b      	ldr	r3, [r3, #32]
 80076fa:	4a28      	ldr	r2, [pc, #160]	; (800779c <TIM_OC4_SetConfig+0xb0>)
 80076fc:	401a      	ands	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	685b      	ldr	r3, [r3, #4]
 800770c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	69db      	ldr	r3, [r3, #28]
 8007712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	4a22      	ldr	r2, [pc, #136]	; (80077a0 <TIM_OC4_SetConfig+0xb4>)
 8007718:	4013      	ands	r3, r2
 800771a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	4a21      	ldr	r2, [pc, #132]	; (80077a4 <TIM_OC4_SetConfig+0xb8>)
 8007720:	4013      	ands	r3, r2
 8007722:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007724:	683b      	ldr	r3, [r7, #0]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	021b      	lsls	r3, r3, #8
 800772a:	68fa      	ldr	r2, [r7, #12]
 800772c:	4313      	orrs	r3, r2
 800772e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007730:	693b      	ldr	r3, [r7, #16]
 8007732:	4a1d      	ldr	r2, [pc, #116]	; (80077a8 <TIM_OC4_SetConfig+0xbc>)
 8007734:	4013      	ands	r3, r2
 8007736:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007738:	683b      	ldr	r3, [r7, #0]
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	031b      	lsls	r3, r3, #12
 800773e:	693a      	ldr	r2, [r7, #16]
 8007740:	4313      	orrs	r3, r2
 8007742:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	4a19      	ldr	r2, [pc, #100]	; (80077ac <TIM_OC4_SetConfig+0xc0>)
 8007748:	4293      	cmp	r3, r2
 800774a:	d00b      	beq.n	8007764 <TIM_OC4_SetConfig+0x78>
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a18      	ldr	r2, [pc, #96]	; (80077b0 <TIM_OC4_SetConfig+0xc4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d007      	beq.n	8007764 <TIM_OC4_SetConfig+0x78>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a17      	ldr	r2, [pc, #92]	; (80077b4 <TIM_OC4_SetConfig+0xc8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d003      	beq.n	8007764 <TIM_OC4_SetConfig+0x78>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	4a16      	ldr	r2, [pc, #88]	; (80077b8 <TIM_OC4_SetConfig+0xcc>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d109      	bne.n	8007778 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007764:	697b      	ldr	r3, [r7, #20]
 8007766:	4a15      	ldr	r2, [pc, #84]	; (80077bc <TIM_OC4_SetConfig+0xd0>)
 8007768:	4013      	ands	r3, r2
 800776a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	695b      	ldr	r3, [r3, #20]
 8007770:	019b      	lsls	r3, r3, #6
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	4313      	orrs	r3, r2
 8007776:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	697a      	ldr	r2, [r7, #20]
 800777c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	68fa      	ldr	r2, [r7, #12]
 8007782:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	685a      	ldr	r2, [r3, #4]
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	693a      	ldr	r2, [r7, #16]
 8007790:	621a      	str	r2, [r3, #32]
}
 8007792:	46c0      	nop			; (mov r8, r8)
 8007794:	46bd      	mov	sp, r7
 8007796:	b006      	add	sp, #24
 8007798:	bd80      	pop	{r7, pc}
 800779a:	46c0      	nop			; (mov r8, r8)
 800779c:	ffffefff 	.word	0xffffefff
 80077a0:	feff8fff 	.word	0xfeff8fff
 80077a4:	fffffcff 	.word	0xfffffcff
 80077a8:	ffffdfff 	.word	0xffffdfff
 80077ac:	40012c00 	.word	0x40012c00
 80077b0:	40014000 	.word	0x40014000
 80077b4:	40014400 	.word	0x40014400
 80077b8:	40014800 	.word	0x40014800
 80077bc:	ffffbfff 	.word	0xffffbfff

080077c0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	b086      	sub	sp, #24
 80077c4:	af00      	add	r7, sp, #0
 80077c6:	6078      	str	r0, [r7, #4]
 80077c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6a1b      	ldr	r3, [r3, #32]
 80077ce:	4a25      	ldr	r2, [pc, #148]	; (8007864 <TIM_OC5_SetConfig+0xa4>)
 80077d0:	401a      	ands	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a1b      	ldr	r3, [r3, #32]
 80077da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <TIM_OC5_SetConfig+0xa8>)
 80077ec:	4013      	ands	r3, r2
 80077ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80077f0:	683b      	ldr	r3, [r7, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	68fa      	ldr	r2, [r7, #12]
 80077f6:	4313      	orrs	r3, r2
 80077f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	4a1b      	ldr	r2, [pc, #108]	; (800786c <TIM_OC5_SetConfig+0xac>)
 80077fe:	4013      	ands	r3, r2
 8007800:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007802:	683b      	ldr	r3, [r7, #0]
 8007804:	689b      	ldr	r3, [r3, #8]
 8007806:	041b      	lsls	r3, r3, #16
 8007808:	693a      	ldr	r2, [r7, #16]
 800780a:	4313      	orrs	r3, r2
 800780c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	4a17      	ldr	r2, [pc, #92]	; (8007870 <TIM_OC5_SetConfig+0xb0>)
 8007812:	4293      	cmp	r3, r2
 8007814:	d00b      	beq.n	800782e <TIM_OC5_SetConfig+0x6e>
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	4a16      	ldr	r2, [pc, #88]	; (8007874 <TIM_OC5_SetConfig+0xb4>)
 800781a:	4293      	cmp	r3, r2
 800781c:	d007      	beq.n	800782e <TIM_OC5_SetConfig+0x6e>
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	4a15      	ldr	r2, [pc, #84]	; (8007878 <TIM_OC5_SetConfig+0xb8>)
 8007822:	4293      	cmp	r3, r2
 8007824:	d003      	beq.n	800782e <TIM_OC5_SetConfig+0x6e>
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	4a14      	ldr	r2, [pc, #80]	; (800787c <TIM_OC5_SetConfig+0xbc>)
 800782a:	4293      	cmp	r3, r2
 800782c:	d109      	bne.n	8007842 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	4a0c      	ldr	r2, [pc, #48]	; (8007864 <TIM_OC5_SetConfig+0xa4>)
 8007832:	4013      	ands	r3, r2
 8007834:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007836:	683b      	ldr	r3, [r7, #0]
 8007838:	695b      	ldr	r3, [r3, #20]
 800783a:	021b      	lsls	r3, r3, #8
 800783c:	697a      	ldr	r2, [r7, #20]
 800783e:	4313      	orrs	r3, r2
 8007840:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68fa      	ldr	r2, [r7, #12]
 800784c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	685a      	ldr	r2, [r3, #4]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	693a      	ldr	r2, [r7, #16]
 800785a:	621a      	str	r2, [r3, #32]
}
 800785c:	46c0      	nop			; (mov r8, r8)
 800785e:	46bd      	mov	sp, r7
 8007860:	b006      	add	sp, #24
 8007862:	bd80      	pop	{r7, pc}
 8007864:	fffeffff 	.word	0xfffeffff
 8007868:	fffeff8f 	.word	0xfffeff8f
 800786c:	fffdffff 	.word	0xfffdffff
 8007870:	40012c00 	.word	0x40012c00
 8007874:	40014000 	.word	0x40014000
 8007878:	40014400 	.word	0x40014400
 800787c:	40014800 	.word	0x40014800

08007880 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b086      	sub	sp, #24
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6a1b      	ldr	r3, [r3, #32]
 800788e:	4a26      	ldr	r2, [pc, #152]	; (8007928 <TIM_OC6_SetConfig+0xa8>)
 8007890:	401a      	ands	r2, r3
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6a1b      	ldr	r3, [r3, #32]
 800789a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	685b      	ldr	r3, [r3, #4]
 80078a0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80078a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	4a20      	ldr	r2, [pc, #128]	; (800792c <TIM_OC6_SetConfig+0xac>)
 80078ac:	4013      	ands	r3, r2
 80078ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	021b      	lsls	r3, r3, #8
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	4313      	orrs	r3, r2
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	4a1c      	ldr	r2, [pc, #112]	; (8007930 <TIM_OC6_SetConfig+0xb0>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	051b      	lsls	r3, r3, #20
 80078ca:	693a      	ldr	r2, [r7, #16]
 80078cc:	4313      	orrs	r3, r2
 80078ce:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	4a18      	ldr	r2, [pc, #96]	; (8007934 <TIM_OC6_SetConfig+0xb4>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d00b      	beq.n	80078f0 <TIM_OC6_SetConfig+0x70>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	4a17      	ldr	r2, [pc, #92]	; (8007938 <TIM_OC6_SetConfig+0xb8>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d007      	beq.n	80078f0 <TIM_OC6_SetConfig+0x70>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	4a16      	ldr	r2, [pc, #88]	; (800793c <TIM_OC6_SetConfig+0xbc>)
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d003      	beq.n	80078f0 <TIM_OC6_SetConfig+0x70>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	4a15      	ldr	r2, [pc, #84]	; (8007940 <TIM_OC6_SetConfig+0xc0>)
 80078ec:	4293      	cmp	r3, r2
 80078ee:	d109      	bne.n	8007904 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	4a14      	ldr	r2, [pc, #80]	; (8007944 <TIM_OC6_SetConfig+0xc4>)
 80078f4:	4013      	ands	r3, r2
 80078f6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	029b      	lsls	r3, r3, #10
 80078fe:	697a      	ldr	r2, [r7, #20]
 8007900:	4313      	orrs	r3, r2
 8007902:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	68fa      	ldr	r2, [r7, #12]
 800790e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	621a      	str	r2, [r3, #32]
}
 800791e:	46c0      	nop			; (mov r8, r8)
 8007920:	46bd      	mov	sp, r7
 8007922:	b006      	add	sp, #24
 8007924:	bd80      	pop	{r7, pc}
 8007926:	46c0      	nop			; (mov r8, r8)
 8007928:	ffefffff 	.word	0xffefffff
 800792c:	feff8fff 	.word	0xfeff8fff
 8007930:	ffdfffff 	.word	0xffdfffff
 8007934:	40012c00 	.word	0x40012c00
 8007938:	40014000 	.word	0x40014000
 800793c:	40014400 	.word	0x40014400
 8007940:	40014800 	.word	0x40014800
 8007944:	fffbffff 	.word	0xfffbffff

08007948 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
 8007950:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	223c      	movs	r2, #60	; 0x3c
 8007956:	5c9b      	ldrb	r3, [r3, r2]
 8007958:	2b01      	cmp	r3, #1
 800795a:	d101      	bne.n	8007960 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800795c:	2302      	movs	r3, #2
 800795e:	e04f      	b.n	8007a00 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	223c      	movs	r2, #60	; 0x3c
 8007964:	2101      	movs	r1, #1
 8007966:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	223d      	movs	r2, #61	; 0x3d
 800796c:	2102      	movs	r1, #2
 800796e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	689b      	ldr	r3, [r3, #8]
 800797e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4a20      	ldr	r2, [pc, #128]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8007986:	4293      	cmp	r3, r2
 8007988:	d108      	bne.n	800799c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	4a1f      	ldr	r2, [pc, #124]	; (8007a0c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800798e:	4013      	ands	r3, r2
 8007990:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	68fa      	ldr	r2, [r7, #12]
 8007998:	4313      	orrs	r3, r2
 800799a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2270      	movs	r2, #112	; 0x70
 80079a0:	4393      	bics	r3, r2
 80079a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	68fa      	ldr	r2, [r7, #12]
 80079b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	4a13      	ldr	r2, [pc, #76]	; (8007a08 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80079bc:	4293      	cmp	r3, r2
 80079be:	d009      	beq.n	80079d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	4a12      	ldr	r2, [pc, #72]	; (8007a10 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d004      	beq.n	80079d4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	4a11      	ldr	r2, [pc, #68]	; (8007a14 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80079d0:	4293      	cmp	r3, r2
 80079d2:	d10c      	bne.n	80079ee <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2280      	movs	r2, #128	; 0x80
 80079d8:	4393      	bics	r3, r2
 80079da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80079dc:	683b      	ldr	r3, [r7, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	68ba      	ldr	r2, [r7, #8]
 80079e2:	4313      	orrs	r3, r2
 80079e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	223d      	movs	r2, #61	; 0x3d
 80079f2:	2101      	movs	r1, #1
 80079f4:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	223c      	movs	r2, #60	; 0x3c
 80079fa:	2100      	movs	r1, #0
 80079fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079fe:	2300      	movs	r3, #0
}
 8007a00:	0018      	movs	r0, r3
 8007a02:	46bd      	mov	sp, r7
 8007a04:	b004      	add	sp, #16
 8007a06:	bd80      	pop	{r7, pc}
 8007a08:	40012c00 	.word	0x40012c00
 8007a0c:	ff0fffff 	.word	0xff0fffff
 8007a10:	40000400 	.word	0x40000400
 8007a14:	40014000 	.word	0x40014000

08007a18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b084      	sub	sp, #16
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
 8007a20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a22:	2300      	movs	r3, #0
 8007a24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	223c      	movs	r2, #60	; 0x3c
 8007a2a:	5c9b      	ldrb	r3, [r3, r2]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d101      	bne.n	8007a34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a30:	2302      	movs	r3, #2
 8007a32:	e079      	b.n	8007b28 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	223c      	movs	r2, #60	; 0x3c
 8007a38:	2101      	movs	r1, #1
 8007a3a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	22ff      	movs	r2, #255	; 0xff
 8007a40:	4393      	bics	r3, r2
 8007a42:	001a      	movs	r2, r3
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	4a38      	ldr	r2, [pc, #224]	; (8007b30 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8007a50:	401a      	ands	r2, r3
 8007a52:	683b      	ldr	r3, [r7, #0]
 8007a54:	689b      	ldr	r3, [r3, #8]
 8007a56:	4313      	orrs	r3, r2
 8007a58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	4a35      	ldr	r2, [pc, #212]	; (8007b34 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007a5e:	401a      	ands	r2, r3
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4313      	orrs	r3, r2
 8007a66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	4a33      	ldr	r2, [pc, #204]	; (8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007a6c:	401a      	ands	r2, r3
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	4a30      	ldr	r2, [pc, #192]	; (8007b3c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007a7a:	401a      	ands	r2, r3
 8007a7c:	683b      	ldr	r3, [r7, #0]
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	4a2e      	ldr	r2, [pc, #184]	; (8007b40 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8007a88:	401a      	ands	r2, r3
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	695b      	ldr	r3, [r3, #20]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	4a2b      	ldr	r2, [pc, #172]	; (8007b44 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8007a96:	401a      	ands	r2, r3
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	4a29      	ldr	r2, [pc, #164]	; (8007b48 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8007aa4:	401a      	ands	r2, r3
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	699b      	ldr	r3, [r3, #24]
 8007aaa:	041b      	lsls	r3, r3, #16
 8007aac:	4313      	orrs	r3, r2
 8007aae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a25      	ldr	r2, [pc, #148]	; (8007b4c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d106      	bne.n	8007ac8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	4a24      	ldr	r2, [pc, #144]	; (8007b50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8007abe:	401a      	ands	r2, r3
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	4313      	orrs	r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a1f      	ldr	r2, [pc, #124]	; (8007b4c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d121      	bne.n	8007b16 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4a1f      	ldr	r2, [pc, #124]	; (8007b54 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8007ad6:	401a      	ands	r2, r3
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007adc:	051b      	lsls	r3, r3, #20
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	4a1c      	ldr	r2, [pc, #112]	; (8007b58 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8007ae6:	401a      	ands	r2, r3
 8007ae8:	683b      	ldr	r3, [r7, #0]
 8007aea:	6a1b      	ldr	r3, [r3, #32]
 8007aec:	4313      	orrs	r3, r2
 8007aee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a1a      	ldr	r2, [pc, #104]	; (8007b5c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8007af4:	401a      	ands	r2, r3
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afa:	4313      	orrs	r3, r2
 8007afc:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	4a12      	ldr	r2, [pc, #72]	; (8007b4c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d106      	bne.n	8007b16 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	4a15      	ldr	r2, [pc, #84]	; (8007b60 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8007b0c:	401a      	ands	r2, r3
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b12:	4313      	orrs	r3, r2
 8007b14:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	68fa      	ldr	r2, [r7, #12]
 8007b1c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	223c      	movs	r2, #60	; 0x3c
 8007b22:	2100      	movs	r1, #0
 8007b24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	0018      	movs	r0, r3
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	b004      	add	sp, #16
 8007b2e:	bd80      	pop	{r7, pc}
 8007b30:	fffffcff 	.word	0xfffffcff
 8007b34:	fffffbff 	.word	0xfffffbff
 8007b38:	fffff7ff 	.word	0xfffff7ff
 8007b3c:	ffffefff 	.word	0xffffefff
 8007b40:	ffffdfff 	.word	0xffffdfff
 8007b44:	ffffbfff 	.word	0xffffbfff
 8007b48:	fff0ffff 	.word	0xfff0ffff
 8007b4c:	40012c00 	.word	0x40012c00
 8007b50:	efffffff 	.word	0xefffffff
 8007b54:	ff0fffff 	.word	0xff0fffff
 8007b58:	feffffff 	.word	0xfeffffff
 8007b5c:	fdffffff 	.word	0xfdffffff
 8007b60:	dfffffff 	.word	0xdfffffff

08007b64 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	b082      	sub	sp, #8
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007b6c:	46c0      	nop			; (mov r8, r8)
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	b002      	add	sp, #8
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b082      	sub	sp, #8
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007b7c:	46c0      	nop			; (mov r8, r8)
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	b002      	add	sp, #8
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007b84:	b580      	push	{r7, lr}
 8007b86:	b082      	sub	sp, #8
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007b8c:	46c0      	nop			; (mov r8, r8)
 8007b8e:	46bd      	mov	sp, r7
 8007b90:	b002      	add	sp, #8
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007b94:	b580      	push	{r7, lr}
 8007b96:	b082      	sub	sp, #8
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d101      	bne.n	8007ba6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e046      	b.n	8007c34 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	2288      	movs	r2, #136	; 0x88
 8007baa:	589b      	ldr	r3, [r3, r2]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d107      	bne.n	8007bc0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2284      	movs	r2, #132	; 0x84
 8007bb4:	2100      	movs	r1, #0
 8007bb6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	0018      	movs	r0, r3
 8007bbc:	f7fc fa1c 	bl	8003ff8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2288      	movs	r2, #136	; 0x88
 8007bc4:	2124      	movs	r1, #36	; 0x24
 8007bc6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	681a      	ldr	r2, [r3, #0]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2101      	movs	r1, #1
 8007bd4:	438a      	bics	r2, r1
 8007bd6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	0018      	movs	r0, r3
 8007bdc:	f000 f8cc 	bl	8007d78 <UART_SetConfig>
 8007be0:	0003      	movs	r3, r0
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8007be6:	2301      	movs	r3, #1
 8007be8:	e024      	b.n	8007c34 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d003      	beq.n	8007bfa <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	0018      	movs	r0, r3
 8007bf6:	f000 fa63 	bl	80080c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	685a      	ldr	r2, [r3, #4]
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	490d      	ldr	r1, [pc, #52]	; (8007c3c <HAL_UART_Init+0xa8>)
 8007c06:	400a      	ands	r2, r1
 8007c08:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	689a      	ldr	r2, [r3, #8]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	212a      	movs	r1, #42	; 0x2a
 8007c16:	438a      	bics	r2, r1
 8007c18:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	2101      	movs	r1, #1
 8007c26:	430a      	orrs	r2, r1
 8007c28:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	0018      	movs	r0, r3
 8007c2e:	f000 fafb 	bl	8008228 <UART_CheckIdleState>
 8007c32:	0003      	movs	r3, r0
}
 8007c34:	0018      	movs	r0, r3
 8007c36:	46bd      	mov	sp, r7
 8007c38:	b002      	add	sp, #8
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	ffffb7ff 	.word	0xffffb7ff

08007c40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b08a      	sub	sp, #40	; 0x28
 8007c44:	af02      	add	r7, sp, #8
 8007c46:	60f8      	str	r0, [r7, #12]
 8007c48:	60b9      	str	r1, [r7, #8]
 8007c4a:	603b      	str	r3, [r7, #0]
 8007c4c:	1dbb      	adds	r3, r7, #6
 8007c4e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	2288      	movs	r2, #136	; 0x88
 8007c54:	589b      	ldr	r3, [r3, r2]
 8007c56:	2b20      	cmp	r3, #32
 8007c58:	d000      	beq.n	8007c5c <HAL_UART_Transmit+0x1c>
 8007c5a:	e088      	b.n	8007d6e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d003      	beq.n	8007c6a <HAL_UART_Transmit+0x2a>
 8007c62:	1dbb      	adds	r3, r7, #6
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e080      	b.n	8007d70 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	689a      	ldr	r2, [r3, #8]
 8007c72:	2380      	movs	r3, #128	; 0x80
 8007c74:	015b      	lsls	r3, r3, #5
 8007c76:	429a      	cmp	r2, r3
 8007c78:	d109      	bne.n	8007c8e <HAL_UART_Transmit+0x4e>
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d105      	bne.n	8007c8e <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007c82:	68bb      	ldr	r3, [r7, #8]
 8007c84:	2201      	movs	r2, #1
 8007c86:	4013      	ands	r3, r2
 8007c88:	d001      	beq.n	8007c8e <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	e070      	b.n	8007d70 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2290      	movs	r2, #144	; 0x90
 8007c92:	2100      	movs	r1, #0
 8007c94:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	2288      	movs	r2, #136	; 0x88
 8007c9a:	2121      	movs	r1, #33	; 0x21
 8007c9c:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007c9e:	f7fc faeb 	bl	8004278 <HAL_GetTick>
 8007ca2:	0003      	movs	r3, r0
 8007ca4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	1dba      	adds	r2, r7, #6
 8007caa:	2154      	movs	r1, #84	; 0x54
 8007cac:	8812      	ldrh	r2, [r2, #0]
 8007cae:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	1dba      	adds	r2, r7, #6
 8007cb4:	2156      	movs	r1, #86	; 0x56
 8007cb6:	8812      	ldrh	r2, [r2, #0]
 8007cb8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	689a      	ldr	r2, [r3, #8]
 8007cbe:	2380      	movs	r3, #128	; 0x80
 8007cc0:	015b      	lsls	r3, r3, #5
 8007cc2:	429a      	cmp	r2, r3
 8007cc4:	d108      	bne.n	8007cd8 <HAL_UART_Transmit+0x98>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	691b      	ldr	r3, [r3, #16]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d104      	bne.n	8007cd8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	61bb      	str	r3, [r7, #24]
 8007cd6:	e003      	b.n	8007ce0 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007ce0:	e02c      	b.n	8007d3c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007ce2:	697a      	ldr	r2, [r7, #20]
 8007ce4:	68f8      	ldr	r0, [r7, #12]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	9300      	str	r3, [sp, #0]
 8007cea:	0013      	movs	r3, r2
 8007cec:	2200      	movs	r2, #0
 8007cee:	2180      	movs	r1, #128	; 0x80
 8007cf0:	f000 fae8 	bl	80082c4 <UART_WaitOnFlagUntilTimeout>
 8007cf4:	1e03      	subs	r3, r0, #0
 8007cf6:	d001      	beq.n	8007cfc <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8007cf8:	2303      	movs	r3, #3
 8007cfa:	e039      	b.n	8007d70 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 8007cfc:	69fb      	ldr	r3, [r7, #28]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d10b      	bne.n	8007d1a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007d02:	69bb      	ldr	r3, [r7, #24]
 8007d04:	881b      	ldrh	r3, [r3, #0]
 8007d06:	001a      	movs	r2, r3
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	05d2      	lsls	r2, r2, #23
 8007d0e:	0dd2      	lsrs	r2, r2, #23
 8007d10:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	3302      	adds	r3, #2
 8007d16:	61bb      	str	r3, [r7, #24]
 8007d18:	e007      	b.n	8007d2a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007d1a:	69fb      	ldr	r3, [r7, #28]
 8007d1c:	781a      	ldrb	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007d24:	69fb      	ldr	r3, [r7, #28]
 8007d26:	3301      	adds	r3, #1
 8007d28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	2256      	movs	r2, #86	; 0x56
 8007d2e:	5a9b      	ldrh	r3, [r3, r2]
 8007d30:	b29b      	uxth	r3, r3
 8007d32:	3b01      	subs	r3, #1
 8007d34:	b299      	uxth	r1, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	2256      	movs	r2, #86	; 0x56
 8007d3a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2256      	movs	r2, #86	; 0x56
 8007d40:	5a9b      	ldrh	r3, [r3, r2]
 8007d42:	b29b      	uxth	r3, r3
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d1cc      	bne.n	8007ce2 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007d48:	697a      	ldr	r2, [r7, #20]
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	683b      	ldr	r3, [r7, #0]
 8007d4e:	9300      	str	r3, [sp, #0]
 8007d50:	0013      	movs	r3, r2
 8007d52:	2200      	movs	r2, #0
 8007d54:	2140      	movs	r1, #64	; 0x40
 8007d56:	f000 fab5 	bl	80082c4 <UART_WaitOnFlagUntilTimeout>
 8007d5a:	1e03      	subs	r3, r0, #0
 8007d5c:	d001      	beq.n	8007d62 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 8007d5e:	2303      	movs	r3, #3
 8007d60:	e006      	b.n	8007d70 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2288      	movs	r2, #136	; 0x88
 8007d66:	2120      	movs	r1, #32
 8007d68:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	e000      	b.n	8007d70 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 8007d6e:	2302      	movs	r3, #2
  }
}
 8007d70:	0018      	movs	r0, r3
 8007d72:	46bd      	mov	sp, r7
 8007d74:	b008      	add	sp, #32
 8007d76:	bd80      	pop	{r7, pc}

08007d78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d78:	b580      	push	{r7, lr}
 8007d7a:	b088      	sub	sp, #32
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d80:	231a      	movs	r3, #26
 8007d82:	18fb      	adds	r3, r7, r3
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	689a      	ldr	r2, [r3, #8]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	691b      	ldr	r3, [r3, #16]
 8007d90:	431a      	orrs	r2, r3
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	695b      	ldr	r3, [r3, #20]
 8007d96:	431a      	orrs	r2, r3
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	4313      	orrs	r3, r2
 8007d9e:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	4abc      	ldr	r2, [pc, #752]	; (8008098 <UART_SetConfig+0x320>)
 8007da8:	4013      	ands	r3, r2
 8007daa:	0019      	movs	r1, r3
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	69fa      	ldr	r2, [r7, #28]
 8007db2:	430a      	orrs	r2, r1
 8007db4:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	4ab7      	ldr	r2, [pc, #732]	; (800809c <UART_SetConfig+0x324>)
 8007dbe:	4013      	ands	r3, r2
 8007dc0:	0019      	movs	r1, r3
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	68da      	ldr	r2, [r3, #12]
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	430a      	orrs	r2, r1
 8007dcc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	699b      	ldr	r3, [r3, #24]
 8007dd2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6a1b      	ldr	r3, [r3, #32]
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	4aae      	ldr	r2, [pc, #696]	; (80080a0 <UART_SetConfig+0x328>)
 8007de6:	4013      	ands	r3, r2
 8007de8:	0019      	movs	r1, r3
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	430a      	orrs	r2, r1
 8007df2:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dfa:	220f      	movs	r2, #15
 8007dfc:	4393      	bics	r3, r2
 8007dfe:	0019      	movs	r1, r3
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	430a      	orrs	r2, r1
 8007e0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4aa4      	ldr	r2, [pc, #656]	; (80080a4 <UART_SetConfig+0x32c>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d127      	bne.n	8007e66 <UART_SetConfig+0xee>
 8007e16:	4ba4      	ldr	r3, [pc, #656]	; (80080a8 <UART_SetConfig+0x330>)
 8007e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e1a:	2203      	movs	r2, #3
 8007e1c:	4013      	ands	r3, r2
 8007e1e:	2b03      	cmp	r3, #3
 8007e20:	d017      	beq.n	8007e52 <UART_SetConfig+0xda>
 8007e22:	d81b      	bhi.n	8007e5c <UART_SetConfig+0xe4>
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d00a      	beq.n	8007e3e <UART_SetConfig+0xc6>
 8007e28:	d818      	bhi.n	8007e5c <UART_SetConfig+0xe4>
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d002      	beq.n	8007e34 <UART_SetConfig+0xbc>
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d00a      	beq.n	8007e48 <UART_SetConfig+0xd0>
 8007e32:	e013      	b.n	8007e5c <UART_SetConfig+0xe4>
 8007e34:	231b      	movs	r3, #27
 8007e36:	18fb      	adds	r3, r7, r3
 8007e38:	2200      	movs	r2, #0
 8007e3a:	701a      	strb	r2, [r3, #0]
 8007e3c:	e058      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007e3e:	231b      	movs	r3, #27
 8007e40:	18fb      	adds	r3, r7, r3
 8007e42:	2202      	movs	r2, #2
 8007e44:	701a      	strb	r2, [r3, #0]
 8007e46:	e053      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007e48:	231b      	movs	r3, #27
 8007e4a:	18fb      	adds	r3, r7, r3
 8007e4c:	2204      	movs	r2, #4
 8007e4e:	701a      	strb	r2, [r3, #0]
 8007e50:	e04e      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007e52:	231b      	movs	r3, #27
 8007e54:	18fb      	adds	r3, r7, r3
 8007e56:	2208      	movs	r2, #8
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	e049      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007e5c:	231b      	movs	r3, #27
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	2210      	movs	r2, #16
 8007e62:	701a      	strb	r2, [r3, #0]
 8007e64:	e044      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a90      	ldr	r2, [pc, #576]	; (80080ac <UART_SetConfig+0x334>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d127      	bne.n	8007ec0 <UART_SetConfig+0x148>
 8007e70:	4b8d      	ldr	r3, [pc, #564]	; (80080a8 <UART_SetConfig+0x330>)
 8007e72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007e74:	220c      	movs	r2, #12
 8007e76:	4013      	ands	r3, r2
 8007e78:	2b0c      	cmp	r3, #12
 8007e7a:	d017      	beq.n	8007eac <UART_SetConfig+0x134>
 8007e7c:	d81b      	bhi.n	8007eb6 <UART_SetConfig+0x13e>
 8007e7e:	2b08      	cmp	r3, #8
 8007e80:	d00a      	beq.n	8007e98 <UART_SetConfig+0x120>
 8007e82:	d818      	bhi.n	8007eb6 <UART_SetConfig+0x13e>
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <UART_SetConfig+0x116>
 8007e88:	2b04      	cmp	r3, #4
 8007e8a:	d00a      	beq.n	8007ea2 <UART_SetConfig+0x12a>
 8007e8c:	e013      	b.n	8007eb6 <UART_SetConfig+0x13e>
 8007e8e:	231b      	movs	r3, #27
 8007e90:	18fb      	adds	r3, r7, r3
 8007e92:	2200      	movs	r2, #0
 8007e94:	701a      	strb	r2, [r3, #0]
 8007e96:	e02b      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007e98:	231b      	movs	r3, #27
 8007e9a:	18fb      	adds	r3, r7, r3
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	701a      	strb	r2, [r3, #0]
 8007ea0:	e026      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007ea2:	231b      	movs	r3, #27
 8007ea4:	18fb      	adds	r3, r7, r3
 8007ea6:	2204      	movs	r2, #4
 8007ea8:	701a      	strb	r2, [r3, #0]
 8007eaa:	e021      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007eac:	231b      	movs	r3, #27
 8007eae:	18fb      	adds	r3, r7, r3
 8007eb0:	2208      	movs	r2, #8
 8007eb2:	701a      	strb	r2, [r3, #0]
 8007eb4:	e01c      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007eb6:	231b      	movs	r3, #27
 8007eb8:	18fb      	adds	r3, r7, r3
 8007eba:	2210      	movs	r2, #16
 8007ebc:	701a      	strb	r2, [r3, #0]
 8007ebe:	e017      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	4a7a      	ldr	r2, [pc, #488]	; (80080b0 <UART_SetConfig+0x338>)
 8007ec6:	4293      	cmp	r3, r2
 8007ec8:	d104      	bne.n	8007ed4 <UART_SetConfig+0x15c>
 8007eca:	231b      	movs	r3, #27
 8007ecc:	18fb      	adds	r3, r7, r3
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	e00d      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a76      	ldr	r2, [pc, #472]	; (80080b4 <UART_SetConfig+0x33c>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d104      	bne.n	8007ee8 <UART_SetConfig+0x170>
 8007ede:	231b      	movs	r3, #27
 8007ee0:	18fb      	adds	r3, r7, r3
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	701a      	strb	r2, [r3, #0]
 8007ee6:	e003      	b.n	8007ef0 <UART_SetConfig+0x178>
 8007ee8:	231b      	movs	r3, #27
 8007eea:	18fb      	adds	r3, r7, r3
 8007eec:	2210      	movs	r2, #16
 8007eee:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	69da      	ldr	r2, [r3, #28]
 8007ef4:	2380      	movs	r3, #128	; 0x80
 8007ef6:	021b      	lsls	r3, r3, #8
 8007ef8:	429a      	cmp	r2, r3
 8007efa:	d000      	beq.n	8007efe <UART_SetConfig+0x186>
 8007efc:	e065      	b.n	8007fca <UART_SetConfig+0x252>
  {
    switch (clocksource)
 8007efe:	231b      	movs	r3, #27
 8007f00:	18fb      	adds	r3, r7, r3
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b08      	cmp	r3, #8
 8007f06:	d015      	beq.n	8007f34 <UART_SetConfig+0x1bc>
 8007f08:	dc18      	bgt.n	8007f3c <UART_SetConfig+0x1c4>
 8007f0a:	2b04      	cmp	r3, #4
 8007f0c:	d00d      	beq.n	8007f2a <UART_SetConfig+0x1b2>
 8007f0e:	dc15      	bgt.n	8007f3c <UART_SetConfig+0x1c4>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d002      	beq.n	8007f1a <UART_SetConfig+0x1a2>
 8007f14:	2b02      	cmp	r3, #2
 8007f16:	d005      	beq.n	8007f24 <UART_SetConfig+0x1ac>
 8007f18:	e010      	b.n	8007f3c <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007f1a:	f7fd ff87 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 8007f1e:	0003      	movs	r3, r0
 8007f20:	617b      	str	r3, [r7, #20]
        break;
 8007f22:	e012      	b.n	8007f4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007f24:	4b64      	ldr	r3, [pc, #400]	; (80080b8 <UART_SetConfig+0x340>)
 8007f26:	617b      	str	r3, [r7, #20]
        break;
 8007f28:	e00f      	b.n	8007f4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007f2a:	f7fd fef5 	bl	8005d18 <HAL_RCC_GetSysClockFreq>
 8007f2e:	0003      	movs	r3, r0
 8007f30:	617b      	str	r3, [r7, #20]
        break;
 8007f32:	e00a      	b.n	8007f4a <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007f34:	2380      	movs	r3, #128	; 0x80
 8007f36:	021b      	lsls	r3, r3, #8
 8007f38:	617b      	str	r3, [r7, #20]
        break;
 8007f3a:	e006      	b.n	8007f4a <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007f40:	231a      	movs	r3, #26
 8007f42:	18fb      	adds	r3, r7, r3
 8007f44:	2201      	movs	r2, #1
 8007f46:	701a      	strb	r2, [r3, #0]
        break;
 8007f48:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d100      	bne.n	8007f52 <UART_SetConfig+0x1da>
 8007f50:	e08d      	b.n	800806e <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f56:	4b59      	ldr	r3, [pc, #356]	; (80080bc <UART_SetConfig+0x344>)
 8007f58:	0052      	lsls	r2, r2, #1
 8007f5a:	5ad3      	ldrh	r3, [r2, r3]
 8007f5c:	0019      	movs	r1, r3
 8007f5e:	6978      	ldr	r0, [r7, #20]
 8007f60:	f7f8 f8ea 	bl	8000138 <__udivsi3>
 8007f64:	0003      	movs	r3, r0
 8007f66:	005a      	lsls	r2, r3, #1
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	085b      	lsrs	r3, r3, #1
 8007f6e:	18d2      	adds	r2, r2, r3
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	685b      	ldr	r3, [r3, #4]
 8007f74:	0019      	movs	r1, r3
 8007f76:	0010      	movs	r0, r2
 8007f78:	f7f8 f8de 	bl	8000138 <__udivsi3>
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007f80:	693b      	ldr	r3, [r7, #16]
 8007f82:	2b0f      	cmp	r3, #15
 8007f84:	d91c      	bls.n	8007fc0 <UART_SetConfig+0x248>
 8007f86:	693a      	ldr	r2, [r7, #16]
 8007f88:	2380      	movs	r3, #128	; 0x80
 8007f8a:	025b      	lsls	r3, r3, #9
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d217      	bcs.n	8007fc0 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007f90:	693b      	ldr	r3, [r7, #16]
 8007f92:	b29a      	uxth	r2, r3
 8007f94:	200e      	movs	r0, #14
 8007f96:	183b      	adds	r3, r7, r0
 8007f98:	210f      	movs	r1, #15
 8007f9a:	438a      	bics	r2, r1
 8007f9c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	085b      	lsrs	r3, r3, #1
 8007fa2:	b29b      	uxth	r3, r3
 8007fa4:	2207      	movs	r2, #7
 8007fa6:	4013      	ands	r3, r2
 8007fa8:	b299      	uxth	r1, r3
 8007faa:	183b      	adds	r3, r7, r0
 8007fac:	183a      	adds	r2, r7, r0
 8007fae:	8812      	ldrh	r2, [r2, #0]
 8007fb0:	430a      	orrs	r2, r1
 8007fb2:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	183a      	adds	r2, r7, r0
 8007fba:	8812      	ldrh	r2, [r2, #0]
 8007fbc:	60da      	str	r2, [r3, #12]
 8007fbe:	e056      	b.n	800806e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8007fc0:	231a      	movs	r3, #26
 8007fc2:	18fb      	adds	r3, r7, r3
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e051      	b.n	800806e <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007fca:	231b      	movs	r3, #27
 8007fcc:	18fb      	adds	r3, r7, r3
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	2b08      	cmp	r3, #8
 8007fd2:	d015      	beq.n	8008000 <UART_SetConfig+0x288>
 8007fd4:	dc18      	bgt.n	8008008 <UART_SetConfig+0x290>
 8007fd6:	2b04      	cmp	r3, #4
 8007fd8:	d00d      	beq.n	8007ff6 <UART_SetConfig+0x27e>
 8007fda:	dc15      	bgt.n	8008008 <UART_SetConfig+0x290>
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d002      	beq.n	8007fe6 <UART_SetConfig+0x26e>
 8007fe0:	2b02      	cmp	r3, #2
 8007fe2:	d005      	beq.n	8007ff0 <UART_SetConfig+0x278>
 8007fe4:	e010      	b.n	8008008 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007fe6:	f7fd ff21 	bl	8005e2c <HAL_RCC_GetPCLK1Freq>
 8007fea:	0003      	movs	r3, r0
 8007fec:	617b      	str	r3, [r7, #20]
        break;
 8007fee:	e012      	b.n	8008016 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ff0:	4b31      	ldr	r3, [pc, #196]	; (80080b8 <UART_SetConfig+0x340>)
 8007ff2:	617b      	str	r3, [r7, #20]
        break;
 8007ff4:	e00f      	b.n	8008016 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ff6:	f7fd fe8f 	bl	8005d18 <HAL_RCC_GetSysClockFreq>
 8007ffa:	0003      	movs	r3, r0
 8007ffc:	617b      	str	r3, [r7, #20]
        break;
 8007ffe:	e00a      	b.n	8008016 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008000:	2380      	movs	r3, #128	; 0x80
 8008002:	021b      	lsls	r3, r3, #8
 8008004:	617b      	str	r3, [r7, #20]
        break;
 8008006:	e006      	b.n	8008016 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8008008:	2300      	movs	r3, #0
 800800a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800800c:	231a      	movs	r3, #26
 800800e:	18fb      	adds	r3, r7, r3
 8008010:	2201      	movs	r2, #1
 8008012:	701a      	strb	r2, [r3, #0]
        break;
 8008014:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8008016:	697b      	ldr	r3, [r7, #20]
 8008018:	2b00      	cmp	r3, #0
 800801a:	d028      	beq.n	800806e <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008020:	4b26      	ldr	r3, [pc, #152]	; (80080bc <UART_SetConfig+0x344>)
 8008022:	0052      	lsls	r2, r2, #1
 8008024:	5ad3      	ldrh	r3, [r2, r3]
 8008026:	0019      	movs	r1, r3
 8008028:	6978      	ldr	r0, [r7, #20]
 800802a:	f7f8 f885 	bl	8000138 <__udivsi3>
 800802e:	0003      	movs	r3, r0
 8008030:	001a      	movs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	085b      	lsrs	r3, r3, #1
 8008038:	18d2      	adds	r2, r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	0019      	movs	r1, r3
 8008040:	0010      	movs	r0, r2
 8008042:	f7f8 f879 	bl	8000138 <__udivsi3>
 8008046:	0003      	movs	r3, r0
 8008048:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800804a:	693b      	ldr	r3, [r7, #16]
 800804c:	2b0f      	cmp	r3, #15
 800804e:	d90a      	bls.n	8008066 <UART_SetConfig+0x2ee>
 8008050:	693a      	ldr	r2, [r7, #16]
 8008052:	2380      	movs	r3, #128	; 0x80
 8008054:	025b      	lsls	r3, r3, #9
 8008056:	429a      	cmp	r2, r3
 8008058:	d205      	bcs.n	8008066 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800805a:	693b      	ldr	r3, [r7, #16]
 800805c:	b29a      	uxth	r2, r3
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60da      	str	r2, [r3, #12]
 8008064:	e003      	b.n	800806e <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8008066:	231a      	movs	r3, #26
 8008068:	18fb      	adds	r3, r7, r3
 800806a:	2201      	movs	r2, #1
 800806c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	226a      	movs	r2, #106	; 0x6a
 8008072:	2101      	movs	r1, #1
 8008074:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2268      	movs	r2, #104	; 0x68
 800807a:	2101      	movs	r1, #1
 800807c:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2200      	movs	r2, #0
 8008082:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2200      	movs	r2, #0
 8008088:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800808a:	231a      	movs	r3, #26
 800808c:	18fb      	adds	r3, r7, r3
 800808e:	781b      	ldrb	r3, [r3, #0]
}
 8008090:	0018      	movs	r0, r3
 8008092:	46bd      	mov	sp, r7
 8008094:	b008      	add	sp, #32
 8008096:	bd80      	pop	{r7, pc}
 8008098:	cfff69f3 	.word	0xcfff69f3
 800809c:	ffffcfff 	.word	0xffffcfff
 80080a0:	11fff4ff 	.word	0x11fff4ff
 80080a4:	40013800 	.word	0x40013800
 80080a8:	40021000 	.word	0x40021000
 80080ac:	40004400 	.word	0x40004400
 80080b0:	40004800 	.word	0x40004800
 80080b4:	40004c00 	.word	0x40004c00
 80080b8:	00f42400 	.word	0x00f42400
 80080bc:	0800d330 	.word	0x0800d330

080080c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b082      	sub	sp, #8
 80080c4:	af00      	add	r7, sp, #0
 80080c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080cc:	2201      	movs	r2, #1
 80080ce:	4013      	ands	r3, r2
 80080d0:	d00b      	beq.n	80080ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	4a4a      	ldr	r2, [pc, #296]	; (8008204 <UART_AdvFeatureConfig+0x144>)
 80080da:	4013      	ands	r3, r2
 80080dc:	0019      	movs	r1, r3
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	430a      	orrs	r2, r1
 80080e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	2202      	movs	r2, #2
 80080f0:	4013      	ands	r3, r2
 80080f2:	d00b      	beq.n	800810c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	4a43      	ldr	r2, [pc, #268]	; (8008208 <UART_AdvFeatureConfig+0x148>)
 80080fc:	4013      	ands	r3, r2
 80080fe:	0019      	movs	r1, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008110:	2204      	movs	r2, #4
 8008112:	4013      	ands	r3, r2
 8008114:	d00b      	beq.n	800812e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	685b      	ldr	r3, [r3, #4]
 800811c:	4a3b      	ldr	r2, [pc, #236]	; (800820c <UART_AdvFeatureConfig+0x14c>)
 800811e:	4013      	ands	r3, r2
 8008120:	0019      	movs	r1, r3
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	430a      	orrs	r2, r1
 800812c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008132:	2208      	movs	r2, #8
 8008134:	4013      	ands	r3, r2
 8008136:	d00b      	beq.n	8008150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	4a34      	ldr	r2, [pc, #208]	; (8008210 <UART_AdvFeatureConfig+0x150>)
 8008140:	4013      	ands	r3, r2
 8008142:	0019      	movs	r1, r3
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	430a      	orrs	r2, r1
 800814e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008154:	2210      	movs	r2, #16
 8008156:	4013      	ands	r3, r2
 8008158:	d00b      	beq.n	8008172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	4a2c      	ldr	r2, [pc, #176]	; (8008214 <UART_AdvFeatureConfig+0x154>)
 8008162:	4013      	ands	r3, r2
 8008164:	0019      	movs	r1, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	430a      	orrs	r2, r1
 8008170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008176:	2220      	movs	r2, #32
 8008178:	4013      	ands	r3, r2
 800817a:	d00b      	beq.n	8008194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	689b      	ldr	r3, [r3, #8]
 8008182:	4a25      	ldr	r2, [pc, #148]	; (8008218 <UART_AdvFeatureConfig+0x158>)
 8008184:	4013      	ands	r3, r2
 8008186:	0019      	movs	r1, r3
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008198:	2240      	movs	r2, #64	; 0x40
 800819a:	4013      	ands	r3, r2
 800819c:	d01d      	beq.n	80081da <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	685b      	ldr	r3, [r3, #4]
 80081a4:	4a1d      	ldr	r2, [pc, #116]	; (800821c <UART_AdvFeatureConfig+0x15c>)
 80081a6:	4013      	ands	r3, r2
 80081a8:	0019      	movs	r1, r3
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	430a      	orrs	r2, r1
 80081b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80081ba:	2380      	movs	r3, #128	; 0x80
 80081bc:	035b      	lsls	r3, r3, #13
 80081be:	429a      	cmp	r2, r3
 80081c0:	d10b      	bne.n	80081da <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	685b      	ldr	r3, [r3, #4]
 80081c8:	4a15      	ldr	r2, [pc, #84]	; (8008220 <UART_AdvFeatureConfig+0x160>)
 80081ca:	4013      	ands	r3, r2
 80081cc:	0019      	movs	r1, r3
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	430a      	orrs	r2, r1
 80081d8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081de:	2280      	movs	r2, #128	; 0x80
 80081e0:	4013      	ands	r3, r2
 80081e2:	d00b      	beq.n	80081fc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	4a0e      	ldr	r2, [pc, #56]	; (8008224 <UART_AdvFeatureConfig+0x164>)
 80081ec:	4013      	ands	r3, r2
 80081ee:	0019      	movs	r1, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	430a      	orrs	r2, r1
 80081fa:	605a      	str	r2, [r3, #4]
  }
}
 80081fc:	46c0      	nop			; (mov r8, r8)
 80081fe:	46bd      	mov	sp, r7
 8008200:	b002      	add	sp, #8
 8008202:	bd80      	pop	{r7, pc}
 8008204:	fffdffff 	.word	0xfffdffff
 8008208:	fffeffff 	.word	0xfffeffff
 800820c:	fffbffff 	.word	0xfffbffff
 8008210:	ffff7fff 	.word	0xffff7fff
 8008214:	ffffefff 	.word	0xffffefff
 8008218:	ffffdfff 	.word	0xffffdfff
 800821c:	ffefffff 	.word	0xffefffff
 8008220:	ff9fffff 	.word	0xff9fffff
 8008224:	fff7ffff 	.word	0xfff7ffff

08008228 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b086      	sub	sp, #24
 800822c:	af02      	add	r7, sp, #8
 800822e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	2290      	movs	r2, #144	; 0x90
 8008234:	2100      	movs	r1, #0
 8008236:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008238:	f7fc f81e 	bl	8004278 <HAL_GetTick>
 800823c:	0003      	movs	r3, r0
 800823e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	2208      	movs	r2, #8
 8008248:	4013      	ands	r3, r2
 800824a:	2b08      	cmp	r3, #8
 800824c:	d10c      	bne.n	8008268 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2280      	movs	r2, #128	; 0x80
 8008252:	0391      	lsls	r1, r2, #14
 8008254:	6878      	ldr	r0, [r7, #4]
 8008256:	4a1a      	ldr	r2, [pc, #104]	; (80082c0 <UART_CheckIdleState+0x98>)
 8008258:	9200      	str	r2, [sp, #0]
 800825a:	2200      	movs	r2, #0
 800825c:	f000 f832 	bl	80082c4 <UART_WaitOnFlagUntilTimeout>
 8008260:	1e03      	subs	r3, r0, #0
 8008262:	d001      	beq.n	8008268 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008264:	2303      	movs	r3, #3
 8008266:	e026      	b.n	80082b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2204      	movs	r2, #4
 8008270:	4013      	ands	r3, r2
 8008272:	2b04      	cmp	r3, #4
 8008274:	d10c      	bne.n	8008290 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	2280      	movs	r2, #128	; 0x80
 800827a:	03d1      	lsls	r1, r2, #15
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	4a10      	ldr	r2, [pc, #64]	; (80082c0 <UART_CheckIdleState+0x98>)
 8008280:	9200      	str	r2, [sp, #0]
 8008282:	2200      	movs	r2, #0
 8008284:	f000 f81e 	bl	80082c4 <UART_WaitOnFlagUntilTimeout>
 8008288:	1e03      	subs	r3, r0, #0
 800828a:	d001      	beq.n	8008290 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800828c:	2303      	movs	r3, #3
 800828e:	e012      	b.n	80082b6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2288      	movs	r2, #136	; 0x88
 8008294:	2120      	movs	r1, #32
 8008296:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	228c      	movs	r2, #140	; 0x8c
 800829c:	2120      	movs	r1, #32
 800829e:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2284      	movs	r2, #132	; 0x84
 80082b0:	2100      	movs	r1, #0
 80082b2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082b4:	2300      	movs	r3, #0
}
 80082b6:	0018      	movs	r0, r3
 80082b8:	46bd      	mov	sp, r7
 80082ba:	b004      	add	sp, #16
 80082bc:	bd80      	pop	{r7, pc}
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	01ffffff 	.word	0x01ffffff

080082c4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80082c4:	b580      	push	{r7, lr}
 80082c6:	b094      	sub	sp, #80	; 0x50
 80082c8:	af00      	add	r7, sp, #0
 80082ca:	60f8      	str	r0, [r7, #12]
 80082cc:	60b9      	str	r1, [r7, #8]
 80082ce:	603b      	str	r3, [r7, #0]
 80082d0:	1dfb      	adds	r3, r7, #7
 80082d2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80082d4:	e0a7      	b.n	8008426 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082d8:	3301      	adds	r3, #1
 80082da:	d100      	bne.n	80082de <UART_WaitOnFlagUntilTimeout+0x1a>
 80082dc:	e0a3      	b.n	8008426 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082de:	f7fb ffcb 	bl	8004278 <HAL_GetTick>
 80082e2:	0002      	movs	r2, r0
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	1ad3      	subs	r3, r2, r3
 80082e8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d302      	bcc.n	80082f4 <UART_WaitOnFlagUntilTimeout+0x30>
 80082ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d13f      	bne.n	8008374 <UART_WaitOnFlagUntilTimeout+0xb0>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80082f4:	f3ef 8310 	mrs	r3, PRIMASK
 80082f8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80082fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80082fc:	647b      	str	r3, [r7, #68]	; 0x44
 80082fe:	2301      	movs	r3, #1
 8008300:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008304:	f383 8810 	msr	PRIMASK, r3
}
 8008308:	46c0      	nop			; (mov r8, r8)
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	494e      	ldr	r1, [pc, #312]	; (8008450 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8008316:	400a      	ands	r2, r1
 8008318:	601a      	str	r2, [r3, #0]
 800831a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800831c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800831e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008320:	f383 8810 	msr	PRIMASK, r3
}
 8008324:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008326:	f3ef 8310 	mrs	r3, PRIMASK
 800832a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800832c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800832e:	643b      	str	r3, [r7, #64]	; 0x40
 8008330:	2301      	movs	r3, #1
 8008332:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008336:	f383 8810 	msr	PRIMASK, r3
}
 800833a:	46c0      	nop			; (mov r8, r8)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	689a      	ldr	r2, [r3, #8]
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2101      	movs	r1, #1
 8008348:	438a      	bics	r2, r1
 800834a:	609a      	str	r2, [r3, #8]
 800834c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800834e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008352:	f383 8810 	msr	PRIMASK, r3
}
 8008356:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2288      	movs	r2, #136	; 0x88
 800835c:	2120      	movs	r1, #32
 800835e:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	228c      	movs	r2, #140	; 0x8c
 8008364:	2120      	movs	r1, #32
 8008366:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2284      	movs	r2, #132	; 0x84
 800836c:	2100      	movs	r1, #0
 800836e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8008370:	2303      	movs	r3, #3
 8008372:	e069      	b.n	8008448 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2204      	movs	r2, #4
 800837c:	4013      	ands	r3, r2
 800837e:	d052      	beq.n	8008426 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	69da      	ldr	r2, [r3, #28]
 8008386:	2380      	movs	r3, #128	; 0x80
 8008388:	011b      	lsls	r3, r3, #4
 800838a:	401a      	ands	r2, r3
 800838c:	2380      	movs	r3, #128	; 0x80
 800838e:	011b      	lsls	r3, r3, #4
 8008390:	429a      	cmp	r2, r3
 8008392:	d148      	bne.n	8008426 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2280      	movs	r2, #128	; 0x80
 800839a:	0112      	lsls	r2, r2, #4
 800839c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800839e:	f3ef 8310 	mrs	r3, PRIMASK
 80083a2:	613b      	str	r3, [r7, #16]
  return(result);
 80083a4:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80083a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083a8:	2301      	movs	r3, #1
 80083aa:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	f383 8810 	msr	PRIMASK, r3
}
 80083b2:	46c0      	nop			; (mov r8, r8)
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	681a      	ldr	r2, [r3, #0]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4924      	ldr	r1, [pc, #144]	; (8008450 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80083c0:	400a      	ands	r2, r1
 80083c2:	601a      	str	r2, [r3, #0]
 80083c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80083c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083c8:	69bb      	ldr	r3, [r7, #24]
 80083ca:	f383 8810 	msr	PRIMASK, r3
}
 80083ce:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d0:	f3ef 8310 	mrs	r3, PRIMASK
 80083d4:	61fb      	str	r3, [r7, #28]
  return(result);
 80083d6:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80083da:	2301      	movs	r3, #1
 80083dc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083de:	6a3b      	ldr	r3, [r7, #32]
 80083e0:	f383 8810 	msr	PRIMASK, r3
}
 80083e4:	46c0      	nop			; (mov r8, r8)
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	689a      	ldr	r2, [r3, #8]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	2101      	movs	r1, #1
 80083f2:	438a      	bics	r2, r1
 80083f4:	609a      	str	r2, [r3, #8]
 80083f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80083f8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083fc:	f383 8810 	msr	PRIMASK, r3
}
 8008400:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2288      	movs	r2, #136	; 0x88
 8008406:	2120      	movs	r1, #32
 8008408:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	228c      	movs	r2, #140	; 0x8c
 800840e:	2120      	movs	r1, #32
 8008410:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	2290      	movs	r2, #144	; 0x90
 8008416:	2120      	movs	r1, #32
 8008418:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	2284      	movs	r2, #132	; 0x84
 800841e:	2100      	movs	r1, #0
 8008420:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008422:	2303      	movs	r3, #3
 8008424:	e010      	b.n	8008448 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	69db      	ldr	r3, [r3, #28]
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	4013      	ands	r3, r2
 8008430:	68ba      	ldr	r2, [r7, #8]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	425a      	negs	r2, r3
 8008436:	4153      	adcs	r3, r2
 8008438:	b2db      	uxtb	r3, r3
 800843a:	001a      	movs	r2, r3
 800843c:	1dfb      	adds	r3, r7, #7
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	429a      	cmp	r2, r3
 8008442:	d100      	bne.n	8008446 <UART_WaitOnFlagUntilTimeout+0x182>
 8008444:	e747      	b.n	80082d6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008446:	2300      	movs	r3, #0
}
 8008448:	0018      	movs	r0, r3
 800844a:	46bd      	mov	sp, r7
 800844c:	b014      	add	sp, #80	; 0x50
 800844e:	bd80      	pop	{r7, pc}
 8008450:	fffffe5f 	.word	0xfffffe5f

08008454 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b084      	sub	sp, #16
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2284      	movs	r2, #132	; 0x84
 8008460:	5c9b      	ldrb	r3, [r3, r2]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d101      	bne.n	800846a <HAL_UARTEx_DisableFifoMode+0x16>
 8008466:	2302      	movs	r3, #2
 8008468:	e027      	b.n	80084ba <HAL_UARTEx_DisableFifoMode+0x66>
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2284      	movs	r2, #132	; 0x84
 800846e:	2101      	movs	r1, #1
 8008470:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2288      	movs	r2, #136	; 0x88
 8008476:	2124      	movs	r1, #36	; 0x24
 8008478:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	681a      	ldr	r2, [r3, #0]
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	2101      	movs	r1, #1
 800848e:	438a      	bics	r2, r1
 8008490:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	4a0b      	ldr	r2, [pc, #44]	; (80084c4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008496:	4013      	ands	r3, r2
 8008498:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2200      	movs	r2, #0
 800849e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	68fa      	ldr	r2, [r7, #12]
 80084a6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2288      	movs	r2, #136	; 0x88
 80084ac:	2120      	movs	r1, #32
 80084ae:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	2284      	movs	r2, #132	; 0x84
 80084b4:	2100      	movs	r1, #0
 80084b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80084b8:	2300      	movs	r3, #0
}
 80084ba:	0018      	movs	r0, r3
 80084bc:	46bd      	mov	sp, r7
 80084be:	b004      	add	sp, #16
 80084c0:	bd80      	pop	{r7, pc}
 80084c2:	46c0      	nop			; (mov r8, r8)
 80084c4:	dfffffff 	.word	0xdfffffff

080084c8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2284      	movs	r2, #132	; 0x84
 80084d6:	5c9b      	ldrb	r3, [r3, r2]
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d101      	bne.n	80084e0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80084dc:	2302      	movs	r3, #2
 80084de:	e02e      	b.n	800853e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2284      	movs	r2, #132	; 0x84
 80084e4:	2101      	movs	r1, #1
 80084e6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2288      	movs	r2, #136	; 0x88
 80084ec:	2124      	movs	r1, #36	; 0x24
 80084ee:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	2101      	movs	r1, #1
 8008504:	438a      	bics	r2, r1
 8008506:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	00db      	lsls	r3, r3, #3
 8008510:	08d9      	lsrs	r1, r3, #3
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	683a      	ldr	r2, [r7, #0]
 8008518:	430a      	orrs	r2, r1
 800851a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	0018      	movs	r0, r3
 8008520:	f000 f854 	bl	80085cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2288      	movs	r2, #136	; 0x88
 8008530:	2120      	movs	r1, #32
 8008532:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2284      	movs	r2, #132	; 0x84
 8008538:	2100      	movs	r1, #0
 800853a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800853c:	2300      	movs	r3, #0
}
 800853e:	0018      	movs	r0, r3
 8008540:	46bd      	mov	sp, r7
 8008542:	b004      	add	sp, #16
 8008544:	bd80      	pop	{r7, pc}
	...

08008548 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b084      	sub	sp, #16
 800854c:	af00      	add	r7, sp, #0
 800854e:	6078      	str	r0, [r7, #4]
 8008550:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	2284      	movs	r2, #132	; 0x84
 8008556:	5c9b      	ldrb	r3, [r3, r2]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d101      	bne.n	8008560 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800855c:	2302      	movs	r3, #2
 800855e:	e02f      	b.n	80085c0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2284      	movs	r2, #132	; 0x84
 8008564:	2101      	movs	r1, #1
 8008566:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2288      	movs	r2, #136	; 0x88
 800856c:	2124      	movs	r1, #36	; 0x24
 800856e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	681a      	ldr	r2, [r3, #0]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2101      	movs	r1, #1
 8008584:	438a      	bics	r2, r1
 8008586:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	4a0e      	ldr	r2, [pc, #56]	; (80085c8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008590:	4013      	ands	r3, r2
 8008592:	0019      	movs	r1, r3
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	683a      	ldr	r2, [r7, #0]
 800859a:	430a      	orrs	r2, r1
 800859c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	0018      	movs	r0, r3
 80085a2:	f000 f813 	bl	80085cc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	2288      	movs	r2, #136	; 0x88
 80085b2:	2120      	movs	r1, #32
 80085b4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2284      	movs	r2, #132	; 0x84
 80085ba:	2100      	movs	r1, #0
 80085bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	0018      	movs	r0, r3
 80085c2:	46bd      	mov	sp, r7
 80085c4:	b004      	add	sp, #16
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	f1ffffff 	.word	0xf1ffffff

080085cc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80085cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80085ce:	b085      	sub	sp, #20
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d108      	bne.n	80085ee <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	226a      	movs	r2, #106	; 0x6a
 80085e0:	2101      	movs	r1, #1
 80085e2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2268      	movs	r2, #104	; 0x68
 80085e8:	2101      	movs	r1, #1
 80085ea:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80085ec:	e043      	b.n	8008676 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80085ee:	260f      	movs	r6, #15
 80085f0:	19bb      	adds	r3, r7, r6
 80085f2:	2208      	movs	r2, #8
 80085f4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80085f6:	200e      	movs	r0, #14
 80085f8:	183b      	adds	r3, r7, r0
 80085fa:	2208      	movs	r2, #8
 80085fc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	689b      	ldr	r3, [r3, #8]
 8008604:	0e5b      	lsrs	r3, r3, #25
 8008606:	b2da      	uxtb	r2, r3
 8008608:	240d      	movs	r4, #13
 800860a:	193b      	adds	r3, r7, r4
 800860c:	2107      	movs	r1, #7
 800860e:	400a      	ands	r2, r1
 8008610:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	689b      	ldr	r3, [r3, #8]
 8008618:	0f5b      	lsrs	r3, r3, #29
 800861a:	b2da      	uxtb	r2, r3
 800861c:	250c      	movs	r5, #12
 800861e:	197b      	adds	r3, r7, r5
 8008620:	2107      	movs	r1, #7
 8008622:	400a      	ands	r2, r1
 8008624:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008626:	183b      	adds	r3, r7, r0
 8008628:	781b      	ldrb	r3, [r3, #0]
 800862a:	197a      	adds	r2, r7, r5
 800862c:	7812      	ldrb	r2, [r2, #0]
 800862e:	4914      	ldr	r1, [pc, #80]	; (8008680 <UARTEx_SetNbDataToProcess+0xb4>)
 8008630:	5c8a      	ldrb	r2, [r1, r2]
 8008632:	435a      	muls	r2, r3
 8008634:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008636:	197b      	adds	r3, r7, r5
 8008638:	781b      	ldrb	r3, [r3, #0]
 800863a:	4a12      	ldr	r2, [pc, #72]	; (8008684 <UARTEx_SetNbDataToProcess+0xb8>)
 800863c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800863e:	0019      	movs	r1, r3
 8008640:	f7f7 fe04 	bl	800024c <__divsi3>
 8008644:	0003      	movs	r3, r0
 8008646:	b299      	uxth	r1, r3
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	226a      	movs	r2, #106	; 0x6a
 800864c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800864e:	19bb      	adds	r3, r7, r6
 8008650:	781b      	ldrb	r3, [r3, #0]
 8008652:	193a      	adds	r2, r7, r4
 8008654:	7812      	ldrb	r2, [r2, #0]
 8008656:	490a      	ldr	r1, [pc, #40]	; (8008680 <UARTEx_SetNbDataToProcess+0xb4>)
 8008658:	5c8a      	ldrb	r2, [r1, r2]
 800865a:	435a      	muls	r2, r3
 800865c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800865e:	193b      	adds	r3, r7, r4
 8008660:	781b      	ldrb	r3, [r3, #0]
 8008662:	4a08      	ldr	r2, [pc, #32]	; (8008684 <UARTEx_SetNbDataToProcess+0xb8>)
 8008664:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008666:	0019      	movs	r1, r3
 8008668:	f7f7 fdf0 	bl	800024c <__divsi3>
 800866c:	0003      	movs	r3, r0
 800866e:	b299      	uxth	r1, r3
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2268      	movs	r2, #104	; 0x68
 8008674:	5299      	strh	r1, [r3, r2]
}
 8008676:	46c0      	nop			; (mov r8, r8)
 8008678:	46bd      	mov	sp, r7
 800867a:	b005      	add	sp, #20
 800867c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800867e:	46c0      	nop			; (mov r8, r8)
 8008680:	0800d348 	.word	0x0800d348
 8008684:	0800d350 	.word	0x0800d350

08008688 <__cvt>:
 8008688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800868a:	001e      	movs	r6, r3
 800868c:	2300      	movs	r3, #0
 800868e:	0014      	movs	r4, r2
 8008690:	b08b      	sub	sp, #44	; 0x2c
 8008692:	429e      	cmp	r6, r3
 8008694:	da04      	bge.n	80086a0 <__cvt+0x18>
 8008696:	2180      	movs	r1, #128	; 0x80
 8008698:	0609      	lsls	r1, r1, #24
 800869a:	1873      	adds	r3, r6, r1
 800869c:	001e      	movs	r6, r3
 800869e:	232d      	movs	r3, #45	; 0x2d
 80086a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80086a2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80086a4:	7013      	strb	r3, [r2, #0]
 80086a6:	2320      	movs	r3, #32
 80086a8:	2203      	movs	r2, #3
 80086aa:	439f      	bics	r7, r3
 80086ac:	2f46      	cmp	r7, #70	; 0x46
 80086ae:	d007      	beq.n	80086c0 <__cvt+0x38>
 80086b0:	003b      	movs	r3, r7
 80086b2:	3b45      	subs	r3, #69	; 0x45
 80086b4:	4259      	negs	r1, r3
 80086b6:	414b      	adcs	r3, r1
 80086b8:	9910      	ldr	r1, [sp, #64]	; 0x40
 80086ba:	3a01      	subs	r2, #1
 80086bc:	18cb      	adds	r3, r1, r3
 80086be:	9310      	str	r3, [sp, #64]	; 0x40
 80086c0:	ab09      	add	r3, sp, #36	; 0x24
 80086c2:	9304      	str	r3, [sp, #16]
 80086c4:	ab08      	add	r3, sp, #32
 80086c6:	9303      	str	r3, [sp, #12]
 80086c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80086ca:	9200      	str	r2, [sp, #0]
 80086cc:	9302      	str	r3, [sp, #8]
 80086ce:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086d0:	0022      	movs	r2, r4
 80086d2:	9301      	str	r3, [sp, #4]
 80086d4:	0033      	movs	r3, r6
 80086d6:	f001 f9c9 	bl	8009a6c <_dtoa_r>
 80086da:	0005      	movs	r5, r0
 80086dc:	2f47      	cmp	r7, #71	; 0x47
 80086de:	d102      	bne.n	80086e6 <__cvt+0x5e>
 80086e0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086e2:	07db      	lsls	r3, r3, #31
 80086e4:	d528      	bpl.n	8008738 <__cvt+0xb0>
 80086e6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80086e8:	18eb      	adds	r3, r5, r3
 80086ea:	9307      	str	r3, [sp, #28]
 80086ec:	2f46      	cmp	r7, #70	; 0x46
 80086ee:	d114      	bne.n	800871a <__cvt+0x92>
 80086f0:	782b      	ldrb	r3, [r5, #0]
 80086f2:	2b30      	cmp	r3, #48	; 0x30
 80086f4:	d10c      	bne.n	8008710 <__cvt+0x88>
 80086f6:	2200      	movs	r2, #0
 80086f8:	2300      	movs	r3, #0
 80086fa:	0020      	movs	r0, r4
 80086fc:	0031      	movs	r1, r6
 80086fe:	f7f7 fea1 	bl	8000444 <__aeabi_dcmpeq>
 8008702:	2800      	cmp	r0, #0
 8008704:	d104      	bne.n	8008710 <__cvt+0x88>
 8008706:	2301      	movs	r3, #1
 8008708:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800870a:	1a9b      	subs	r3, r3, r2
 800870c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800870e:	6013      	str	r3, [r2, #0]
 8008710:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008712:	9a07      	ldr	r2, [sp, #28]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	18d3      	adds	r3, r2, r3
 8008718:	9307      	str	r3, [sp, #28]
 800871a:	2200      	movs	r2, #0
 800871c:	2300      	movs	r3, #0
 800871e:	0020      	movs	r0, r4
 8008720:	0031      	movs	r1, r6
 8008722:	f7f7 fe8f 	bl	8000444 <__aeabi_dcmpeq>
 8008726:	2800      	cmp	r0, #0
 8008728:	d001      	beq.n	800872e <__cvt+0xa6>
 800872a:	9b07      	ldr	r3, [sp, #28]
 800872c:	9309      	str	r3, [sp, #36]	; 0x24
 800872e:	2230      	movs	r2, #48	; 0x30
 8008730:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008732:	9907      	ldr	r1, [sp, #28]
 8008734:	428b      	cmp	r3, r1
 8008736:	d306      	bcc.n	8008746 <__cvt+0xbe>
 8008738:	0028      	movs	r0, r5
 800873a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800873c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800873e:	1b5b      	subs	r3, r3, r5
 8008740:	6013      	str	r3, [r2, #0]
 8008742:	b00b      	add	sp, #44	; 0x2c
 8008744:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008746:	1c59      	adds	r1, r3, #1
 8008748:	9109      	str	r1, [sp, #36]	; 0x24
 800874a:	701a      	strb	r2, [r3, #0]
 800874c:	e7f0      	b.n	8008730 <__cvt+0xa8>

0800874e <__exponent>:
 800874e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008750:	1c83      	adds	r3, r0, #2
 8008752:	b087      	sub	sp, #28
 8008754:	9303      	str	r3, [sp, #12]
 8008756:	0005      	movs	r5, r0
 8008758:	000c      	movs	r4, r1
 800875a:	232b      	movs	r3, #43	; 0x2b
 800875c:	7002      	strb	r2, [r0, #0]
 800875e:	2900      	cmp	r1, #0
 8008760:	da01      	bge.n	8008766 <__exponent+0x18>
 8008762:	424c      	negs	r4, r1
 8008764:	3302      	adds	r3, #2
 8008766:	706b      	strb	r3, [r5, #1]
 8008768:	2c09      	cmp	r4, #9
 800876a:	dd2f      	ble.n	80087cc <__exponent+0x7e>
 800876c:	270a      	movs	r7, #10
 800876e:	ab04      	add	r3, sp, #16
 8008770:	1dde      	adds	r6, r3, #7
 8008772:	0020      	movs	r0, r4
 8008774:	0039      	movs	r1, r7
 8008776:	9601      	str	r6, [sp, #4]
 8008778:	f7f7 fe4e 	bl	8000418 <__aeabi_idivmod>
 800877c:	3e01      	subs	r6, #1
 800877e:	3130      	adds	r1, #48	; 0x30
 8008780:	0020      	movs	r0, r4
 8008782:	7031      	strb	r1, [r6, #0]
 8008784:	0039      	movs	r1, r7
 8008786:	9402      	str	r4, [sp, #8]
 8008788:	f7f7 fd60 	bl	800024c <__divsi3>
 800878c:	9b02      	ldr	r3, [sp, #8]
 800878e:	0004      	movs	r4, r0
 8008790:	2b63      	cmp	r3, #99	; 0x63
 8008792:	dcee      	bgt.n	8008772 <__exponent+0x24>
 8008794:	9b01      	ldr	r3, [sp, #4]
 8008796:	3430      	adds	r4, #48	; 0x30
 8008798:	1e9a      	subs	r2, r3, #2
 800879a:	0013      	movs	r3, r2
 800879c:	9903      	ldr	r1, [sp, #12]
 800879e:	7014      	strb	r4, [r2, #0]
 80087a0:	a804      	add	r0, sp, #16
 80087a2:	3007      	adds	r0, #7
 80087a4:	4298      	cmp	r0, r3
 80087a6:	d80c      	bhi.n	80087c2 <__exponent+0x74>
 80087a8:	2300      	movs	r3, #0
 80087aa:	4282      	cmp	r2, r0
 80087ac:	d804      	bhi.n	80087b8 <__exponent+0x6a>
 80087ae:	aa04      	add	r2, sp, #16
 80087b0:	3309      	adds	r3, #9
 80087b2:	189b      	adds	r3, r3, r2
 80087b4:	9a01      	ldr	r2, [sp, #4]
 80087b6:	1a9b      	subs	r3, r3, r2
 80087b8:	9a03      	ldr	r2, [sp, #12]
 80087ba:	18d3      	adds	r3, r2, r3
 80087bc:	1b58      	subs	r0, r3, r5
 80087be:	b007      	add	sp, #28
 80087c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087c2:	7818      	ldrb	r0, [r3, #0]
 80087c4:	3301      	adds	r3, #1
 80087c6:	7008      	strb	r0, [r1, #0]
 80087c8:	3101      	adds	r1, #1
 80087ca:	e7e9      	b.n	80087a0 <__exponent+0x52>
 80087cc:	2330      	movs	r3, #48	; 0x30
 80087ce:	3430      	adds	r4, #48	; 0x30
 80087d0:	70ab      	strb	r3, [r5, #2]
 80087d2:	70ec      	strb	r4, [r5, #3]
 80087d4:	1d2b      	adds	r3, r5, #4
 80087d6:	e7f1      	b.n	80087bc <__exponent+0x6e>

080087d8 <_printf_float>:
 80087d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087da:	b095      	sub	sp, #84	; 0x54
 80087dc:	000c      	movs	r4, r1
 80087de:	9208      	str	r2, [sp, #32]
 80087e0:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80087e2:	9309      	str	r3, [sp, #36]	; 0x24
 80087e4:	0007      	movs	r7, r0
 80087e6:	f001 f823 	bl	8009830 <_localeconv_r>
 80087ea:	6803      	ldr	r3, [r0, #0]
 80087ec:	0018      	movs	r0, r3
 80087ee:	930c      	str	r3, [sp, #48]	; 0x30
 80087f0:	f7f7 fc86 	bl	8000100 <strlen>
 80087f4:	2300      	movs	r3, #0
 80087f6:	9312      	str	r3, [sp, #72]	; 0x48
 80087f8:	7e23      	ldrb	r3, [r4, #24]
 80087fa:	2207      	movs	r2, #7
 80087fc:	930a      	str	r3, [sp, #40]	; 0x28
 80087fe:	6823      	ldr	r3, [r4, #0]
 8008800:	900d      	str	r0, [sp, #52]	; 0x34
 8008802:	930b      	str	r3, [sp, #44]	; 0x2c
 8008804:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008806:	682b      	ldr	r3, [r5, #0]
 8008808:	05c9      	lsls	r1, r1, #23
 800880a:	d547      	bpl.n	800889c <_printf_float+0xc4>
 800880c:	189b      	adds	r3, r3, r2
 800880e:	4393      	bics	r3, r2
 8008810:	001a      	movs	r2, r3
 8008812:	3208      	adds	r2, #8
 8008814:	602a      	str	r2, [r5, #0]
 8008816:	681e      	ldr	r6, [r3, #0]
 8008818:	685d      	ldr	r5, [r3, #4]
 800881a:	0032      	movs	r2, r6
 800881c:	002b      	movs	r3, r5
 800881e:	64a2      	str	r2, [r4, #72]	; 0x48
 8008820:	64e3      	str	r3, [r4, #76]	; 0x4c
 8008822:	2201      	movs	r2, #1
 8008824:	006b      	lsls	r3, r5, #1
 8008826:	085b      	lsrs	r3, r3, #1
 8008828:	930e      	str	r3, [sp, #56]	; 0x38
 800882a:	0030      	movs	r0, r6
 800882c:	4bab      	ldr	r3, [pc, #684]	; (8008adc <_printf_float+0x304>)
 800882e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008830:	4252      	negs	r2, r2
 8008832:	f7f9 fefd 	bl	8002630 <__aeabi_dcmpun>
 8008836:	2800      	cmp	r0, #0
 8008838:	d132      	bne.n	80088a0 <_printf_float+0xc8>
 800883a:	2201      	movs	r2, #1
 800883c:	0030      	movs	r0, r6
 800883e:	4ba7      	ldr	r3, [pc, #668]	; (8008adc <_printf_float+0x304>)
 8008840:	990e      	ldr	r1, [sp, #56]	; 0x38
 8008842:	4252      	negs	r2, r2
 8008844:	f7f7 fe0e 	bl	8000464 <__aeabi_dcmple>
 8008848:	2800      	cmp	r0, #0
 800884a:	d129      	bne.n	80088a0 <_printf_float+0xc8>
 800884c:	2200      	movs	r2, #0
 800884e:	2300      	movs	r3, #0
 8008850:	0030      	movs	r0, r6
 8008852:	0029      	movs	r1, r5
 8008854:	f7f7 fdfc 	bl	8000450 <__aeabi_dcmplt>
 8008858:	2800      	cmp	r0, #0
 800885a:	d003      	beq.n	8008864 <_printf_float+0x8c>
 800885c:	0023      	movs	r3, r4
 800885e:	222d      	movs	r2, #45	; 0x2d
 8008860:	3343      	adds	r3, #67	; 0x43
 8008862:	701a      	strb	r2, [r3, #0]
 8008864:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008866:	4d9e      	ldr	r5, [pc, #632]	; (8008ae0 <_printf_float+0x308>)
 8008868:	2b47      	cmp	r3, #71	; 0x47
 800886a:	d900      	bls.n	800886e <_printf_float+0x96>
 800886c:	4d9d      	ldr	r5, [pc, #628]	; (8008ae4 <_printf_float+0x30c>)
 800886e:	2303      	movs	r3, #3
 8008870:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008872:	6123      	str	r3, [r4, #16]
 8008874:	3301      	adds	r3, #1
 8008876:	439a      	bics	r2, r3
 8008878:	2300      	movs	r3, #0
 800887a:	6022      	str	r2, [r4, #0]
 800887c:	930b      	str	r3, [sp, #44]	; 0x2c
 800887e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008880:	0021      	movs	r1, r4
 8008882:	9300      	str	r3, [sp, #0]
 8008884:	0038      	movs	r0, r7
 8008886:	9b08      	ldr	r3, [sp, #32]
 8008888:	aa13      	add	r2, sp, #76	; 0x4c
 800888a:	f000 f9fb 	bl	8008c84 <_printf_common>
 800888e:	3001      	adds	r0, #1
 8008890:	d000      	beq.n	8008894 <_printf_float+0xbc>
 8008892:	e0a3      	b.n	80089dc <_printf_float+0x204>
 8008894:	2001      	movs	r0, #1
 8008896:	4240      	negs	r0, r0
 8008898:	b015      	add	sp, #84	; 0x54
 800889a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800889c:	3307      	adds	r3, #7
 800889e:	e7b6      	b.n	800880e <_printf_float+0x36>
 80088a0:	0032      	movs	r2, r6
 80088a2:	002b      	movs	r3, r5
 80088a4:	0030      	movs	r0, r6
 80088a6:	0029      	movs	r1, r5
 80088a8:	f7f9 fec2 	bl	8002630 <__aeabi_dcmpun>
 80088ac:	2800      	cmp	r0, #0
 80088ae:	d00b      	beq.n	80088c8 <_printf_float+0xf0>
 80088b0:	2d00      	cmp	r5, #0
 80088b2:	da03      	bge.n	80088bc <_printf_float+0xe4>
 80088b4:	0023      	movs	r3, r4
 80088b6:	222d      	movs	r2, #45	; 0x2d
 80088b8:	3343      	adds	r3, #67	; 0x43
 80088ba:	701a      	strb	r2, [r3, #0]
 80088bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088be:	4d8a      	ldr	r5, [pc, #552]	; (8008ae8 <_printf_float+0x310>)
 80088c0:	2b47      	cmp	r3, #71	; 0x47
 80088c2:	d9d4      	bls.n	800886e <_printf_float+0x96>
 80088c4:	4d89      	ldr	r5, [pc, #548]	; (8008aec <_printf_float+0x314>)
 80088c6:	e7d2      	b.n	800886e <_printf_float+0x96>
 80088c8:	2220      	movs	r2, #32
 80088ca:	990a      	ldr	r1, [sp, #40]	; 0x28
 80088cc:	6863      	ldr	r3, [r4, #4]
 80088ce:	4391      	bics	r1, r2
 80088d0:	910e      	str	r1, [sp, #56]	; 0x38
 80088d2:	1c5a      	adds	r2, r3, #1
 80088d4:	d14a      	bne.n	800896c <_printf_float+0x194>
 80088d6:	3307      	adds	r3, #7
 80088d8:	6063      	str	r3, [r4, #4]
 80088da:	2380      	movs	r3, #128	; 0x80
 80088dc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80088de:	00db      	lsls	r3, r3, #3
 80088e0:	4313      	orrs	r3, r2
 80088e2:	2200      	movs	r2, #0
 80088e4:	9206      	str	r2, [sp, #24]
 80088e6:	aa12      	add	r2, sp, #72	; 0x48
 80088e8:	9205      	str	r2, [sp, #20]
 80088ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80088ec:	6023      	str	r3, [r4, #0]
 80088ee:	9204      	str	r2, [sp, #16]
 80088f0:	aa11      	add	r2, sp, #68	; 0x44
 80088f2:	9203      	str	r2, [sp, #12]
 80088f4:	2223      	movs	r2, #35	; 0x23
 80088f6:	a908      	add	r1, sp, #32
 80088f8:	9301      	str	r3, [sp, #4]
 80088fa:	6863      	ldr	r3, [r4, #4]
 80088fc:	1852      	adds	r2, r2, r1
 80088fe:	9202      	str	r2, [sp, #8]
 8008900:	9300      	str	r3, [sp, #0]
 8008902:	0032      	movs	r2, r6
 8008904:	002b      	movs	r3, r5
 8008906:	0038      	movs	r0, r7
 8008908:	f7ff febe 	bl	8008688 <__cvt>
 800890c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800890e:	0005      	movs	r5, r0
 8008910:	2b47      	cmp	r3, #71	; 0x47
 8008912:	d109      	bne.n	8008928 <_printf_float+0x150>
 8008914:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008916:	1cda      	adds	r2, r3, #3
 8008918:	db02      	blt.n	8008920 <_printf_float+0x148>
 800891a:	6862      	ldr	r2, [r4, #4]
 800891c:	4293      	cmp	r3, r2
 800891e:	dd49      	ble.n	80089b4 <_printf_float+0x1dc>
 8008920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008922:	3b02      	subs	r3, #2
 8008924:	b2db      	uxtb	r3, r3
 8008926:	930a      	str	r3, [sp, #40]	; 0x28
 8008928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800892a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800892c:	2b65      	cmp	r3, #101	; 0x65
 800892e:	d824      	bhi.n	800897a <_printf_float+0x1a2>
 8008930:	0020      	movs	r0, r4
 8008932:	001a      	movs	r2, r3
 8008934:	3901      	subs	r1, #1
 8008936:	3050      	adds	r0, #80	; 0x50
 8008938:	9111      	str	r1, [sp, #68]	; 0x44
 800893a:	f7ff ff08 	bl	800874e <__exponent>
 800893e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008940:	900b      	str	r0, [sp, #44]	; 0x2c
 8008942:	1813      	adds	r3, r2, r0
 8008944:	6123      	str	r3, [r4, #16]
 8008946:	2a01      	cmp	r2, #1
 8008948:	dc02      	bgt.n	8008950 <_printf_float+0x178>
 800894a:	6822      	ldr	r2, [r4, #0]
 800894c:	07d2      	lsls	r2, r2, #31
 800894e:	d501      	bpl.n	8008954 <_printf_float+0x17c>
 8008950:	3301      	adds	r3, #1
 8008952:	6123      	str	r3, [r4, #16]
 8008954:	2323      	movs	r3, #35	; 0x23
 8008956:	aa08      	add	r2, sp, #32
 8008958:	189b      	adds	r3, r3, r2
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d100      	bne.n	8008962 <_printf_float+0x18a>
 8008960:	e78d      	b.n	800887e <_printf_float+0xa6>
 8008962:	0023      	movs	r3, r4
 8008964:	222d      	movs	r2, #45	; 0x2d
 8008966:	3343      	adds	r3, #67	; 0x43
 8008968:	701a      	strb	r2, [r3, #0]
 800896a:	e788      	b.n	800887e <_printf_float+0xa6>
 800896c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800896e:	2a47      	cmp	r2, #71	; 0x47
 8008970:	d1b3      	bne.n	80088da <_printf_float+0x102>
 8008972:	2b00      	cmp	r3, #0
 8008974:	d1b1      	bne.n	80088da <_printf_float+0x102>
 8008976:	3301      	adds	r3, #1
 8008978:	e7ae      	b.n	80088d8 <_printf_float+0x100>
 800897a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800897c:	2b66      	cmp	r3, #102	; 0x66
 800897e:	d11b      	bne.n	80089b8 <_printf_float+0x1e0>
 8008980:	6863      	ldr	r3, [r4, #4]
 8008982:	2900      	cmp	r1, #0
 8008984:	dd09      	ble.n	800899a <_printf_float+0x1c2>
 8008986:	6121      	str	r1, [r4, #16]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d102      	bne.n	8008992 <_printf_float+0x1ba>
 800898c:	6822      	ldr	r2, [r4, #0]
 800898e:	07d2      	lsls	r2, r2, #31
 8008990:	d50b      	bpl.n	80089aa <_printf_float+0x1d2>
 8008992:	3301      	adds	r3, #1
 8008994:	185b      	adds	r3, r3, r1
 8008996:	6123      	str	r3, [r4, #16]
 8008998:	e007      	b.n	80089aa <_printf_float+0x1d2>
 800899a:	2b00      	cmp	r3, #0
 800899c:	d103      	bne.n	80089a6 <_printf_float+0x1ce>
 800899e:	2201      	movs	r2, #1
 80089a0:	6821      	ldr	r1, [r4, #0]
 80089a2:	4211      	tst	r1, r2
 80089a4:	d000      	beq.n	80089a8 <_printf_float+0x1d0>
 80089a6:	1c9a      	adds	r2, r3, #2
 80089a8:	6122      	str	r2, [r4, #16]
 80089aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80089ac:	65a3      	str	r3, [r4, #88]	; 0x58
 80089ae:	2300      	movs	r3, #0
 80089b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80089b2:	e7cf      	b.n	8008954 <_printf_float+0x17c>
 80089b4:	2367      	movs	r3, #103	; 0x67
 80089b6:	930a      	str	r3, [sp, #40]	; 0x28
 80089b8:	9911      	ldr	r1, [sp, #68]	; 0x44
 80089ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80089bc:	4299      	cmp	r1, r3
 80089be:	db06      	blt.n	80089ce <_printf_float+0x1f6>
 80089c0:	6823      	ldr	r3, [r4, #0]
 80089c2:	6121      	str	r1, [r4, #16]
 80089c4:	07db      	lsls	r3, r3, #31
 80089c6:	d5f0      	bpl.n	80089aa <_printf_float+0x1d2>
 80089c8:	3101      	adds	r1, #1
 80089ca:	6121      	str	r1, [r4, #16]
 80089cc:	e7ed      	b.n	80089aa <_printf_float+0x1d2>
 80089ce:	2201      	movs	r2, #1
 80089d0:	2900      	cmp	r1, #0
 80089d2:	dc01      	bgt.n	80089d8 <_printf_float+0x200>
 80089d4:	1892      	adds	r2, r2, r2
 80089d6:	1a52      	subs	r2, r2, r1
 80089d8:	189b      	adds	r3, r3, r2
 80089da:	e7dc      	b.n	8008996 <_printf_float+0x1be>
 80089dc:	6822      	ldr	r2, [r4, #0]
 80089de:	0553      	lsls	r3, r2, #21
 80089e0:	d408      	bmi.n	80089f4 <_printf_float+0x21c>
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	002a      	movs	r2, r5
 80089e6:	0038      	movs	r0, r7
 80089e8:	9908      	ldr	r1, [sp, #32]
 80089ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80089ec:	47a8      	blx	r5
 80089ee:	3001      	adds	r0, #1
 80089f0:	d12a      	bne.n	8008a48 <_printf_float+0x270>
 80089f2:	e74f      	b.n	8008894 <_printf_float+0xbc>
 80089f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f6:	2b65      	cmp	r3, #101	; 0x65
 80089f8:	d800      	bhi.n	80089fc <_printf_float+0x224>
 80089fa:	e0ec      	b.n	8008bd6 <_printf_float+0x3fe>
 80089fc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80089fe:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008a00:	2200      	movs	r2, #0
 8008a02:	2300      	movs	r3, #0
 8008a04:	f7f7 fd1e 	bl	8000444 <__aeabi_dcmpeq>
 8008a08:	2800      	cmp	r0, #0
 8008a0a:	d034      	beq.n	8008a76 <_printf_float+0x29e>
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	0038      	movs	r0, r7
 8008a10:	4a37      	ldr	r2, [pc, #220]	; (8008af0 <_printf_float+0x318>)
 8008a12:	9908      	ldr	r1, [sp, #32]
 8008a14:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a16:	47a8      	blx	r5
 8008a18:	3001      	adds	r0, #1
 8008a1a:	d100      	bne.n	8008a1e <_printf_float+0x246>
 8008a1c:	e73a      	b.n	8008894 <_printf_float+0xbc>
 8008a1e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008a20:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a22:	429a      	cmp	r2, r3
 8008a24:	db02      	blt.n	8008a2c <_printf_float+0x254>
 8008a26:	6823      	ldr	r3, [r4, #0]
 8008a28:	07db      	lsls	r3, r3, #31
 8008a2a:	d50d      	bpl.n	8008a48 <_printf_float+0x270>
 8008a2c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008a2e:	0038      	movs	r0, r7
 8008a30:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a32:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008a34:	9908      	ldr	r1, [sp, #32]
 8008a36:	47a8      	blx	r5
 8008a38:	2500      	movs	r5, #0
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	d100      	bne.n	8008a40 <_printf_float+0x268>
 8008a3e:	e729      	b.n	8008894 <_printf_float+0xbc>
 8008a40:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008a42:	3b01      	subs	r3, #1
 8008a44:	42ab      	cmp	r3, r5
 8008a46:	dc0a      	bgt.n	8008a5e <_printf_float+0x286>
 8008a48:	6823      	ldr	r3, [r4, #0]
 8008a4a:	079b      	lsls	r3, r3, #30
 8008a4c:	d500      	bpl.n	8008a50 <_printf_float+0x278>
 8008a4e:	e116      	b.n	8008c7e <_printf_float+0x4a6>
 8008a50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008a52:	68e0      	ldr	r0, [r4, #12]
 8008a54:	4298      	cmp	r0, r3
 8008a56:	db00      	blt.n	8008a5a <_printf_float+0x282>
 8008a58:	e71e      	b.n	8008898 <_printf_float+0xc0>
 8008a5a:	0018      	movs	r0, r3
 8008a5c:	e71c      	b.n	8008898 <_printf_float+0xc0>
 8008a5e:	0022      	movs	r2, r4
 8008a60:	2301      	movs	r3, #1
 8008a62:	0038      	movs	r0, r7
 8008a64:	9908      	ldr	r1, [sp, #32]
 8008a66:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a68:	321a      	adds	r2, #26
 8008a6a:	47b0      	blx	r6
 8008a6c:	3001      	adds	r0, #1
 8008a6e:	d100      	bne.n	8008a72 <_printf_float+0x29a>
 8008a70:	e710      	b.n	8008894 <_printf_float+0xbc>
 8008a72:	3501      	adds	r5, #1
 8008a74:	e7e4      	b.n	8008a40 <_printf_float+0x268>
 8008a76:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dc3b      	bgt.n	8008af4 <_printf_float+0x31c>
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	0038      	movs	r0, r7
 8008a80:	4a1b      	ldr	r2, [pc, #108]	; (8008af0 <_printf_float+0x318>)
 8008a82:	9908      	ldr	r1, [sp, #32]
 8008a84:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a86:	47b0      	blx	r6
 8008a88:	3001      	adds	r0, #1
 8008a8a:	d100      	bne.n	8008a8e <_printf_float+0x2b6>
 8008a8c:	e702      	b.n	8008894 <_printf_float+0xbc>
 8008a8e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008a90:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008a92:	4313      	orrs	r3, r2
 8008a94:	d102      	bne.n	8008a9c <_printf_float+0x2c4>
 8008a96:	6823      	ldr	r3, [r4, #0]
 8008a98:	07db      	lsls	r3, r3, #31
 8008a9a:	d5d5      	bpl.n	8008a48 <_printf_float+0x270>
 8008a9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a9e:	0038      	movs	r0, r7
 8008aa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008aa2:	9908      	ldr	r1, [sp, #32]
 8008aa4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008aa6:	47b0      	blx	r6
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	3001      	adds	r0, #1
 8008aac:	d100      	bne.n	8008ab0 <_printf_float+0x2d8>
 8008aae:	e6f1      	b.n	8008894 <_printf_float+0xbc>
 8008ab0:	930a      	str	r3, [sp, #40]	; 0x28
 8008ab2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8008ab4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ab6:	425b      	negs	r3, r3
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	dc01      	bgt.n	8008ac0 <_printf_float+0x2e8>
 8008abc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008abe:	e791      	b.n	80089e4 <_printf_float+0x20c>
 8008ac0:	0022      	movs	r2, r4
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	0038      	movs	r0, r7
 8008ac6:	9908      	ldr	r1, [sp, #32]
 8008ac8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008aca:	321a      	adds	r2, #26
 8008acc:	47b0      	blx	r6
 8008ace:	3001      	adds	r0, #1
 8008ad0:	d100      	bne.n	8008ad4 <_printf_float+0x2fc>
 8008ad2:	e6df      	b.n	8008894 <_printf_float+0xbc>
 8008ad4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	e7ea      	b.n	8008ab0 <_printf_float+0x2d8>
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	7fefffff 	.word	0x7fefffff
 8008ae0:	0800d358 	.word	0x0800d358
 8008ae4:	0800d35c 	.word	0x0800d35c
 8008ae8:	0800d360 	.word	0x0800d360
 8008aec:	0800d364 	.word	0x0800d364
 8008af0:	0800d368 	.word	0x0800d368
 8008af4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008af6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008af8:	920a      	str	r2, [sp, #40]	; 0x28
 8008afa:	429a      	cmp	r2, r3
 8008afc:	dd00      	ble.n	8008b00 <_printf_float+0x328>
 8008afe:	930a      	str	r3, [sp, #40]	; 0x28
 8008b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	dc3d      	bgt.n	8008b82 <_printf_float+0x3aa>
 8008b06:	2300      	movs	r3, #0
 8008b08:	930e      	str	r3, [sp, #56]	; 0x38
 8008b0a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b0c:	43db      	mvns	r3, r3
 8008b0e:	17db      	asrs	r3, r3, #31
 8008b10:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b12:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b14:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b16:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b18:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b1a:	4013      	ands	r3, r2
 8008b1c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008b22:	4293      	cmp	r3, r2
 8008b24:	dc36      	bgt.n	8008b94 <_printf_float+0x3bc>
 8008b26:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b28:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	db40      	blt.n	8008bb0 <_printf_float+0x3d8>
 8008b2e:	6823      	ldr	r3, [r4, #0]
 8008b30:	07db      	lsls	r3, r3, #31
 8008b32:	d43d      	bmi.n	8008bb0 <_printf_float+0x3d8>
 8008b34:	9e12      	ldr	r6, [sp, #72]	; 0x48
 8008b36:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b38:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b3a:	1af3      	subs	r3, r6, r3
 8008b3c:	1ab6      	subs	r6, r6, r2
 8008b3e:	429e      	cmp	r6, r3
 8008b40:	dd00      	ble.n	8008b44 <_printf_float+0x36c>
 8008b42:	001e      	movs	r6, r3
 8008b44:	2e00      	cmp	r6, #0
 8008b46:	dc3c      	bgt.n	8008bc2 <_printf_float+0x3ea>
 8008b48:	2300      	movs	r3, #0
 8008b4a:	930a      	str	r3, [sp, #40]	; 0x28
 8008b4c:	43f3      	mvns	r3, r6
 8008b4e:	17db      	asrs	r3, r3, #31
 8008b50:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b52:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8008b54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008b56:	1a9b      	subs	r3, r3, r2
 8008b58:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008b5a:	4032      	ands	r2, r6
 8008b5c:	1a9b      	subs	r3, r3, r2
 8008b5e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b60:	4293      	cmp	r3, r2
 8008b62:	dc00      	bgt.n	8008b66 <_printf_float+0x38e>
 8008b64:	e770      	b.n	8008a48 <_printf_float+0x270>
 8008b66:	0022      	movs	r2, r4
 8008b68:	2301      	movs	r3, #1
 8008b6a:	0038      	movs	r0, r7
 8008b6c:	9908      	ldr	r1, [sp, #32]
 8008b6e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008b70:	321a      	adds	r2, #26
 8008b72:	47a8      	blx	r5
 8008b74:	3001      	adds	r0, #1
 8008b76:	d100      	bne.n	8008b7a <_printf_float+0x3a2>
 8008b78:	e68c      	b.n	8008894 <_printf_float+0xbc>
 8008b7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b7c:	3301      	adds	r3, #1
 8008b7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008b80:	e7e7      	b.n	8008b52 <_printf_float+0x37a>
 8008b82:	002a      	movs	r2, r5
 8008b84:	0038      	movs	r0, r7
 8008b86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b88:	9908      	ldr	r1, [sp, #32]
 8008b8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b8c:	47b0      	blx	r6
 8008b8e:	3001      	adds	r0, #1
 8008b90:	d1b9      	bne.n	8008b06 <_printf_float+0x32e>
 8008b92:	e67f      	b.n	8008894 <_printf_float+0xbc>
 8008b94:	0022      	movs	r2, r4
 8008b96:	2301      	movs	r3, #1
 8008b98:	0038      	movs	r0, r7
 8008b9a:	9908      	ldr	r1, [sp, #32]
 8008b9c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008b9e:	321a      	adds	r2, #26
 8008ba0:	47b0      	blx	r6
 8008ba2:	3001      	adds	r0, #1
 8008ba4:	d100      	bne.n	8008ba8 <_printf_float+0x3d0>
 8008ba6:	e675      	b.n	8008894 <_printf_float+0xbc>
 8008ba8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008baa:	3301      	adds	r3, #1
 8008bac:	930e      	str	r3, [sp, #56]	; 0x38
 8008bae:	e7b0      	b.n	8008b12 <_printf_float+0x33a>
 8008bb0:	0038      	movs	r0, r7
 8008bb2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bb6:	9908      	ldr	r1, [sp, #32]
 8008bb8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bba:	47b0      	blx	r6
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d1b9      	bne.n	8008b34 <_printf_float+0x35c>
 8008bc0:	e668      	b.n	8008894 <_printf_float+0xbc>
 8008bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008bc4:	0038      	movs	r0, r7
 8008bc6:	18ea      	adds	r2, r5, r3
 8008bc8:	9908      	ldr	r1, [sp, #32]
 8008bca:	0033      	movs	r3, r6
 8008bcc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008bce:	47a8      	blx	r5
 8008bd0:	3001      	adds	r0, #1
 8008bd2:	d1b9      	bne.n	8008b48 <_printf_float+0x370>
 8008bd4:	e65e      	b.n	8008894 <_printf_float+0xbc>
 8008bd6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008bd8:	2b01      	cmp	r3, #1
 8008bda:	dc02      	bgt.n	8008be2 <_printf_float+0x40a>
 8008bdc:	2301      	movs	r3, #1
 8008bde:	421a      	tst	r2, r3
 8008be0:	d03a      	beq.n	8008c58 <_printf_float+0x480>
 8008be2:	2301      	movs	r3, #1
 8008be4:	002a      	movs	r2, r5
 8008be6:	0038      	movs	r0, r7
 8008be8:	9908      	ldr	r1, [sp, #32]
 8008bea:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bec:	47b0      	blx	r6
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d100      	bne.n	8008bf4 <_printf_float+0x41c>
 8008bf2:	e64f      	b.n	8008894 <_printf_float+0xbc>
 8008bf4:	0038      	movs	r0, r7
 8008bf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008bf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008bfa:	9908      	ldr	r1, [sp, #32]
 8008bfc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008bfe:	47b0      	blx	r6
 8008c00:	3001      	adds	r0, #1
 8008c02:	d100      	bne.n	8008c06 <_printf_float+0x42e>
 8008c04:	e646      	b.n	8008894 <_printf_float+0xbc>
 8008c06:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8008c08:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8008c0a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c0c:	2200      	movs	r2, #0
 8008c0e:	001e      	movs	r6, r3
 8008c10:	2300      	movs	r3, #0
 8008c12:	f7f7 fc17 	bl	8000444 <__aeabi_dcmpeq>
 8008c16:	2800      	cmp	r0, #0
 8008c18:	d11c      	bne.n	8008c54 <_printf_float+0x47c>
 8008c1a:	0033      	movs	r3, r6
 8008c1c:	1c6a      	adds	r2, r5, #1
 8008c1e:	3b01      	subs	r3, #1
 8008c20:	0038      	movs	r0, r7
 8008c22:	9908      	ldr	r1, [sp, #32]
 8008c24:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8008c26:	47a8      	blx	r5
 8008c28:	3001      	adds	r0, #1
 8008c2a:	d10f      	bne.n	8008c4c <_printf_float+0x474>
 8008c2c:	e632      	b.n	8008894 <_printf_float+0xbc>
 8008c2e:	0022      	movs	r2, r4
 8008c30:	2301      	movs	r3, #1
 8008c32:	0038      	movs	r0, r7
 8008c34:	9908      	ldr	r1, [sp, #32]
 8008c36:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c38:	321a      	adds	r2, #26
 8008c3a:	47b0      	blx	r6
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d100      	bne.n	8008c42 <_printf_float+0x46a>
 8008c40:	e628      	b.n	8008894 <_printf_float+0xbc>
 8008c42:	3501      	adds	r5, #1
 8008c44:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8008c46:	3b01      	subs	r3, #1
 8008c48:	42ab      	cmp	r3, r5
 8008c4a:	dcf0      	bgt.n	8008c2e <_printf_float+0x456>
 8008c4c:	0022      	movs	r2, r4
 8008c4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008c50:	3250      	adds	r2, #80	; 0x50
 8008c52:	e6c8      	b.n	80089e6 <_printf_float+0x20e>
 8008c54:	2500      	movs	r5, #0
 8008c56:	e7f5      	b.n	8008c44 <_printf_float+0x46c>
 8008c58:	002a      	movs	r2, r5
 8008c5a:	e7e1      	b.n	8008c20 <_printf_float+0x448>
 8008c5c:	0022      	movs	r2, r4
 8008c5e:	2301      	movs	r3, #1
 8008c60:	0038      	movs	r0, r7
 8008c62:	9908      	ldr	r1, [sp, #32]
 8008c64:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008c66:	3219      	adds	r2, #25
 8008c68:	47b0      	blx	r6
 8008c6a:	3001      	adds	r0, #1
 8008c6c:	d100      	bne.n	8008c70 <_printf_float+0x498>
 8008c6e:	e611      	b.n	8008894 <_printf_float+0xbc>
 8008c70:	3501      	adds	r5, #1
 8008c72:	68e3      	ldr	r3, [r4, #12]
 8008c74:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008c76:	1a9b      	subs	r3, r3, r2
 8008c78:	42ab      	cmp	r3, r5
 8008c7a:	dcef      	bgt.n	8008c5c <_printf_float+0x484>
 8008c7c:	e6e8      	b.n	8008a50 <_printf_float+0x278>
 8008c7e:	2500      	movs	r5, #0
 8008c80:	e7f7      	b.n	8008c72 <_printf_float+0x49a>
 8008c82:	46c0      	nop			; (mov r8, r8)

08008c84 <_printf_common>:
 8008c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008c86:	0016      	movs	r6, r2
 8008c88:	9301      	str	r3, [sp, #4]
 8008c8a:	688a      	ldr	r2, [r1, #8]
 8008c8c:	690b      	ldr	r3, [r1, #16]
 8008c8e:	000c      	movs	r4, r1
 8008c90:	9000      	str	r0, [sp, #0]
 8008c92:	4293      	cmp	r3, r2
 8008c94:	da00      	bge.n	8008c98 <_printf_common+0x14>
 8008c96:	0013      	movs	r3, r2
 8008c98:	0022      	movs	r2, r4
 8008c9a:	6033      	str	r3, [r6, #0]
 8008c9c:	3243      	adds	r2, #67	; 0x43
 8008c9e:	7812      	ldrb	r2, [r2, #0]
 8008ca0:	2a00      	cmp	r2, #0
 8008ca2:	d001      	beq.n	8008ca8 <_printf_common+0x24>
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	6033      	str	r3, [r6, #0]
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	069b      	lsls	r3, r3, #26
 8008cac:	d502      	bpl.n	8008cb4 <_printf_common+0x30>
 8008cae:	6833      	ldr	r3, [r6, #0]
 8008cb0:	3302      	adds	r3, #2
 8008cb2:	6033      	str	r3, [r6, #0]
 8008cb4:	6822      	ldr	r2, [r4, #0]
 8008cb6:	2306      	movs	r3, #6
 8008cb8:	0015      	movs	r5, r2
 8008cba:	401d      	ands	r5, r3
 8008cbc:	421a      	tst	r2, r3
 8008cbe:	d027      	beq.n	8008d10 <_printf_common+0x8c>
 8008cc0:	0023      	movs	r3, r4
 8008cc2:	3343      	adds	r3, #67	; 0x43
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	1e5a      	subs	r2, r3, #1
 8008cc8:	4193      	sbcs	r3, r2
 8008cca:	6822      	ldr	r2, [r4, #0]
 8008ccc:	0692      	lsls	r2, r2, #26
 8008cce:	d430      	bmi.n	8008d32 <_printf_common+0xae>
 8008cd0:	0022      	movs	r2, r4
 8008cd2:	9901      	ldr	r1, [sp, #4]
 8008cd4:	9800      	ldr	r0, [sp, #0]
 8008cd6:	9d08      	ldr	r5, [sp, #32]
 8008cd8:	3243      	adds	r2, #67	; 0x43
 8008cda:	47a8      	blx	r5
 8008cdc:	3001      	adds	r0, #1
 8008cde:	d025      	beq.n	8008d2c <_printf_common+0xa8>
 8008ce0:	2206      	movs	r2, #6
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	2500      	movs	r5, #0
 8008ce6:	4013      	ands	r3, r2
 8008ce8:	2b04      	cmp	r3, #4
 8008cea:	d105      	bne.n	8008cf8 <_printf_common+0x74>
 8008cec:	6833      	ldr	r3, [r6, #0]
 8008cee:	68e5      	ldr	r5, [r4, #12]
 8008cf0:	1aed      	subs	r5, r5, r3
 8008cf2:	43eb      	mvns	r3, r5
 8008cf4:	17db      	asrs	r3, r3, #31
 8008cf6:	401d      	ands	r5, r3
 8008cf8:	68a3      	ldr	r3, [r4, #8]
 8008cfa:	6922      	ldr	r2, [r4, #16]
 8008cfc:	4293      	cmp	r3, r2
 8008cfe:	dd01      	ble.n	8008d04 <_printf_common+0x80>
 8008d00:	1a9b      	subs	r3, r3, r2
 8008d02:	18ed      	adds	r5, r5, r3
 8008d04:	2600      	movs	r6, #0
 8008d06:	42b5      	cmp	r5, r6
 8008d08:	d120      	bne.n	8008d4c <_printf_common+0xc8>
 8008d0a:	2000      	movs	r0, #0
 8008d0c:	e010      	b.n	8008d30 <_printf_common+0xac>
 8008d0e:	3501      	adds	r5, #1
 8008d10:	68e3      	ldr	r3, [r4, #12]
 8008d12:	6832      	ldr	r2, [r6, #0]
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	42ab      	cmp	r3, r5
 8008d18:	ddd2      	ble.n	8008cc0 <_printf_common+0x3c>
 8008d1a:	0022      	movs	r2, r4
 8008d1c:	2301      	movs	r3, #1
 8008d1e:	9901      	ldr	r1, [sp, #4]
 8008d20:	9800      	ldr	r0, [sp, #0]
 8008d22:	9f08      	ldr	r7, [sp, #32]
 8008d24:	3219      	adds	r2, #25
 8008d26:	47b8      	blx	r7
 8008d28:	3001      	adds	r0, #1
 8008d2a:	d1f0      	bne.n	8008d0e <_printf_common+0x8a>
 8008d2c:	2001      	movs	r0, #1
 8008d2e:	4240      	negs	r0, r0
 8008d30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008d32:	2030      	movs	r0, #48	; 0x30
 8008d34:	18e1      	adds	r1, r4, r3
 8008d36:	3143      	adds	r1, #67	; 0x43
 8008d38:	7008      	strb	r0, [r1, #0]
 8008d3a:	0021      	movs	r1, r4
 8008d3c:	1c5a      	adds	r2, r3, #1
 8008d3e:	3145      	adds	r1, #69	; 0x45
 8008d40:	7809      	ldrb	r1, [r1, #0]
 8008d42:	18a2      	adds	r2, r4, r2
 8008d44:	3243      	adds	r2, #67	; 0x43
 8008d46:	3302      	adds	r3, #2
 8008d48:	7011      	strb	r1, [r2, #0]
 8008d4a:	e7c1      	b.n	8008cd0 <_printf_common+0x4c>
 8008d4c:	0022      	movs	r2, r4
 8008d4e:	2301      	movs	r3, #1
 8008d50:	9901      	ldr	r1, [sp, #4]
 8008d52:	9800      	ldr	r0, [sp, #0]
 8008d54:	9f08      	ldr	r7, [sp, #32]
 8008d56:	321a      	adds	r2, #26
 8008d58:	47b8      	blx	r7
 8008d5a:	3001      	adds	r0, #1
 8008d5c:	d0e6      	beq.n	8008d2c <_printf_common+0xa8>
 8008d5e:	3601      	adds	r6, #1
 8008d60:	e7d1      	b.n	8008d06 <_printf_common+0x82>
	...

08008d64 <_printf_i>:
 8008d64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008d66:	b08b      	sub	sp, #44	; 0x2c
 8008d68:	9206      	str	r2, [sp, #24]
 8008d6a:	000a      	movs	r2, r1
 8008d6c:	3243      	adds	r2, #67	; 0x43
 8008d6e:	9307      	str	r3, [sp, #28]
 8008d70:	9005      	str	r0, [sp, #20]
 8008d72:	9204      	str	r2, [sp, #16]
 8008d74:	7e0a      	ldrb	r2, [r1, #24]
 8008d76:	000c      	movs	r4, r1
 8008d78:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008d7a:	2a78      	cmp	r2, #120	; 0x78
 8008d7c:	d809      	bhi.n	8008d92 <_printf_i+0x2e>
 8008d7e:	2a62      	cmp	r2, #98	; 0x62
 8008d80:	d80b      	bhi.n	8008d9a <_printf_i+0x36>
 8008d82:	2a00      	cmp	r2, #0
 8008d84:	d100      	bne.n	8008d88 <_printf_i+0x24>
 8008d86:	e0be      	b.n	8008f06 <_printf_i+0x1a2>
 8008d88:	497c      	ldr	r1, [pc, #496]	; (8008f7c <_printf_i+0x218>)
 8008d8a:	9103      	str	r1, [sp, #12]
 8008d8c:	2a58      	cmp	r2, #88	; 0x58
 8008d8e:	d100      	bne.n	8008d92 <_printf_i+0x2e>
 8008d90:	e093      	b.n	8008eba <_printf_i+0x156>
 8008d92:	0026      	movs	r6, r4
 8008d94:	3642      	adds	r6, #66	; 0x42
 8008d96:	7032      	strb	r2, [r6, #0]
 8008d98:	e022      	b.n	8008de0 <_printf_i+0x7c>
 8008d9a:	0010      	movs	r0, r2
 8008d9c:	3863      	subs	r0, #99	; 0x63
 8008d9e:	2815      	cmp	r0, #21
 8008da0:	d8f7      	bhi.n	8008d92 <_printf_i+0x2e>
 8008da2:	f7f7 f9bf 	bl	8000124 <__gnu_thumb1_case_shi>
 8008da6:	0016      	.short	0x0016
 8008da8:	fff6001f 	.word	0xfff6001f
 8008dac:	fff6fff6 	.word	0xfff6fff6
 8008db0:	001ffff6 	.word	0x001ffff6
 8008db4:	fff6fff6 	.word	0xfff6fff6
 8008db8:	fff6fff6 	.word	0xfff6fff6
 8008dbc:	003600a3 	.word	0x003600a3
 8008dc0:	fff60083 	.word	0xfff60083
 8008dc4:	00b4fff6 	.word	0x00b4fff6
 8008dc8:	0036fff6 	.word	0x0036fff6
 8008dcc:	fff6fff6 	.word	0xfff6fff6
 8008dd0:	0087      	.short	0x0087
 8008dd2:	0026      	movs	r6, r4
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	3642      	adds	r6, #66	; 0x42
 8008dd8:	1d11      	adds	r1, r2, #4
 8008dda:	6019      	str	r1, [r3, #0]
 8008ddc:	6813      	ldr	r3, [r2, #0]
 8008dde:	7033      	strb	r3, [r6, #0]
 8008de0:	2301      	movs	r3, #1
 8008de2:	e0a2      	b.n	8008f2a <_printf_i+0x1c6>
 8008de4:	6818      	ldr	r0, [r3, #0]
 8008de6:	6809      	ldr	r1, [r1, #0]
 8008de8:	1d02      	adds	r2, r0, #4
 8008dea:	060d      	lsls	r5, r1, #24
 8008dec:	d50b      	bpl.n	8008e06 <_printf_i+0xa2>
 8008dee:	6805      	ldr	r5, [r0, #0]
 8008df0:	601a      	str	r2, [r3, #0]
 8008df2:	2d00      	cmp	r5, #0
 8008df4:	da03      	bge.n	8008dfe <_printf_i+0x9a>
 8008df6:	232d      	movs	r3, #45	; 0x2d
 8008df8:	9a04      	ldr	r2, [sp, #16]
 8008dfa:	426d      	negs	r5, r5
 8008dfc:	7013      	strb	r3, [r2, #0]
 8008dfe:	4b5f      	ldr	r3, [pc, #380]	; (8008f7c <_printf_i+0x218>)
 8008e00:	270a      	movs	r7, #10
 8008e02:	9303      	str	r3, [sp, #12]
 8008e04:	e01b      	b.n	8008e3e <_printf_i+0xda>
 8008e06:	6805      	ldr	r5, [r0, #0]
 8008e08:	601a      	str	r2, [r3, #0]
 8008e0a:	0649      	lsls	r1, r1, #25
 8008e0c:	d5f1      	bpl.n	8008df2 <_printf_i+0x8e>
 8008e0e:	b22d      	sxth	r5, r5
 8008e10:	e7ef      	b.n	8008df2 <_printf_i+0x8e>
 8008e12:	680d      	ldr	r5, [r1, #0]
 8008e14:	6819      	ldr	r1, [r3, #0]
 8008e16:	1d08      	adds	r0, r1, #4
 8008e18:	6018      	str	r0, [r3, #0]
 8008e1a:	062e      	lsls	r6, r5, #24
 8008e1c:	d501      	bpl.n	8008e22 <_printf_i+0xbe>
 8008e1e:	680d      	ldr	r5, [r1, #0]
 8008e20:	e003      	b.n	8008e2a <_printf_i+0xc6>
 8008e22:	066d      	lsls	r5, r5, #25
 8008e24:	d5fb      	bpl.n	8008e1e <_printf_i+0xba>
 8008e26:	680d      	ldr	r5, [r1, #0]
 8008e28:	b2ad      	uxth	r5, r5
 8008e2a:	4b54      	ldr	r3, [pc, #336]	; (8008f7c <_printf_i+0x218>)
 8008e2c:	2708      	movs	r7, #8
 8008e2e:	9303      	str	r3, [sp, #12]
 8008e30:	2a6f      	cmp	r2, #111	; 0x6f
 8008e32:	d000      	beq.n	8008e36 <_printf_i+0xd2>
 8008e34:	3702      	adds	r7, #2
 8008e36:	0023      	movs	r3, r4
 8008e38:	2200      	movs	r2, #0
 8008e3a:	3343      	adds	r3, #67	; 0x43
 8008e3c:	701a      	strb	r2, [r3, #0]
 8008e3e:	6863      	ldr	r3, [r4, #4]
 8008e40:	60a3      	str	r3, [r4, #8]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	db03      	blt.n	8008e4e <_printf_i+0xea>
 8008e46:	2104      	movs	r1, #4
 8008e48:	6822      	ldr	r2, [r4, #0]
 8008e4a:	438a      	bics	r2, r1
 8008e4c:	6022      	str	r2, [r4, #0]
 8008e4e:	2d00      	cmp	r5, #0
 8008e50:	d102      	bne.n	8008e58 <_printf_i+0xf4>
 8008e52:	9e04      	ldr	r6, [sp, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d00c      	beq.n	8008e72 <_printf_i+0x10e>
 8008e58:	9e04      	ldr	r6, [sp, #16]
 8008e5a:	0028      	movs	r0, r5
 8008e5c:	0039      	movs	r1, r7
 8008e5e:	f7f7 f9f1 	bl	8000244 <__aeabi_uidivmod>
 8008e62:	9b03      	ldr	r3, [sp, #12]
 8008e64:	3e01      	subs	r6, #1
 8008e66:	5c5b      	ldrb	r3, [r3, r1]
 8008e68:	7033      	strb	r3, [r6, #0]
 8008e6a:	002b      	movs	r3, r5
 8008e6c:	0005      	movs	r5, r0
 8008e6e:	429f      	cmp	r7, r3
 8008e70:	d9f3      	bls.n	8008e5a <_printf_i+0xf6>
 8008e72:	2f08      	cmp	r7, #8
 8008e74:	d109      	bne.n	8008e8a <_printf_i+0x126>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	07db      	lsls	r3, r3, #31
 8008e7a:	d506      	bpl.n	8008e8a <_printf_i+0x126>
 8008e7c:	6862      	ldr	r2, [r4, #4]
 8008e7e:	6923      	ldr	r3, [r4, #16]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	dc02      	bgt.n	8008e8a <_printf_i+0x126>
 8008e84:	2330      	movs	r3, #48	; 0x30
 8008e86:	3e01      	subs	r6, #1
 8008e88:	7033      	strb	r3, [r6, #0]
 8008e8a:	9b04      	ldr	r3, [sp, #16]
 8008e8c:	1b9b      	subs	r3, r3, r6
 8008e8e:	6123      	str	r3, [r4, #16]
 8008e90:	9b07      	ldr	r3, [sp, #28]
 8008e92:	0021      	movs	r1, r4
 8008e94:	9300      	str	r3, [sp, #0]
 8008e96:	9805      	ldr	r0, [sp, #20]
 8008e98:	9b06      	ldr	r3, [sp, #24]
 8008e9a:	aa09      	add	r2, sp, #36	; 0x24
 8008e9c:	f7ff fef2 	bl	8008c84 <_printf_common>
 8008ea0:	3001      	adds	r0, #1
 8008ea2:	d147      	bne.n	8008f34 <_printf_i+0x1d0>
 8008ea4:	2001      	movs	r0, #1
 8008ea6:	4240      	negs	r0, r0
 8008ea8:	b00b      	add	sp, #44	; 0x2c
 8008eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008eac:	2220      	movs	r2, #32
 8008eae:	6809      	ldr	r1, [r1, #0]
 8008eb0:	430a      	orrs	r2, r1
 8008eb2:	6022      	str	r2, [r4, #0]
 8008eb4:	2278      	movs	r2, #120	; 0x78
 8008eb6:	4932      	ldr	r1, [pc, #200]	; (8008f80 <_printf_i+0x21c>)
 8008eb8:	9103      	str	r1, [sp, #12]
 8008eba:	0021      	movs	r1, r4
 8008ebc:	3145      	adds	r1, #69	; 0x45
 8008ebe:	700a      	strb	r2, [r1, #0]
 8008ec0:	6819      	ldr	r1, [r3, #0]
 8008ec2:	6822      	ldr	r2, [r4, #0]
 8008ec4:	c920      	ldmia	r1!, {r5}
 8008ec6:	0610      	lsls	r0, r2, #24
 8008ec8:	d402      	bmi.n	8008ed0 <_printf_i+0x16c>
 8008eca:	0650      	lsls	r0, r2, #25
 8008ecc:	d500      	bpl.n	8008ed0 <_printf_i+0x16c>
 8008ece:	b2ad      	uxth	r5, r5
 8008ed0:	6019      	str	r1, [r3, #0]
 8008ed2:	07d3      	lsls	r3, r2, #31
 8008ed4:	d502      	bpl.n	8008edc <_printf_i+0x178>
 8008ed6:	2320      	movs	r3, #32
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	6023      	str	r3, [r4, #0]
 8008edc:	2710      	movs	r7, #16
 8008ede:	2d00      	cmp	r5, #0
 8008ee0:	d1a9      	bne.n	8008e36 <_printf_i+0xd2>
 8008ee2:	2220      	movs	r2, #32
 8008ee4:	6823      	ldr	r3, [r4, #0]
 8008ee6:	4393      	bics	r3, r2
 8008ee8:	6023      	str	r3, [r4, #0]
 8008eea:	e7a4      	b.n	8008e36 <_printf_i+0xd2>
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	680d      	ldr	r5, [r1, #0]
 8008ef0:	1d10      	adds	r0, r2, #4
 8008ef2:	6949      	ldr	r1, [r1, #20]
 8008ef4:	6018      	str	r0, [r3, #0]
 8008ef6:	6813      	ldr	r3, [r2, #0]
 8008ef8:	062e      	lsls	r6, r5, #24
 8008efa:	d501      	bpl.n	8008f00 <_printf_i+0x19c>
 8008efc:	6019      	str	r1, [r3, #0]
 8008efe:	e002      	b.n	8008f06 <_printf_i+0x1a2>
 8008f00:	066d      	lsls	r5, r5, #25
 8008f02:	d5fb      	bpl.n	8008efc <_printf_i+0x198>
 8008f04:	8019      	strh	r1, [r3, #0]
 8008f06:	2300      	movs	r3, #0
 8008f08:	9e04      	ldr	r6, [sp, #16]
 8008f0a:	6123      	str	r3, [r4, #16]
 8008f0c:	e7c0      	b.n	8008e90 <_printf_i+0x12c>
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	1d11      	adds	r1, r2, #4
 8008f12:	6019      	str	r1, [r3, #0]
 8008f14:	6816      	ldr	r6, [r2, #0]
 8008f16:	2100      	movs	r1, #0
 8008f18:	0030      	movs	r0, r6
 8008f1a:	6862      	ldr	r2, [r4, #4]
 8008f1c:	f000 fd07 	bl	800992e <memchr>
 8008f20:	2800      	cmp	r0, #0
 8008f22:	d001      	beq.n	8008f28 <_printf_i+0x1c4>
 8008f24:	1b80      	subs	r0, r0, r6
 8008f26:	6060      	str	r0, [r4, #4]
 8008f28:	6863      	ldr	r3, [r4, #4]
 8008f2a:	6123      	str	r3, [r4, #16]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	9a04      	ldr	r2, [sp, #16]
 8008f30:	7013      	strb	r3, [r2, #0]
 8008f32:	e7ad      	b.n	8008e90 <_printf_i+0x12c>
 8008f34:	0032      	movs	r2, r6
 8008f36:	6923      	ldr	r3, [r4, #16]
 8008f38:	9906      	ldr	r1, [sp, #24]
 8008f3a:	9805      	ldr	r0, [sp, #20]
 8008f3c:	9d07      	ldr	r5, [sp, #28]
 8008f3e:	47a8      	blx	r5
 8008f40:	3001      	adds	r0, #1
 8008f42:	d0af      	beq.n	8008ea4 <_printf_i+0x140>
 8008f44:	6823      	ldr	r3, [r4, #0]
 8008f46:	079b      	lsls	r3, r3, #30
 8008f48:	d415      	bmi.n	8008f76 <_printf_i+0x212>
 8008f4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f4c:	68e0      	ldr	r0, [r4, #12]
 8008f4e:	4298      	cmp	r0, r3
 8008f50:	daaa      	bge.n	8008ea8 <_printf_i+0x144>
 8008f52:	0018      	movs	r0, r3
 8008f54:	e7a8      	b.n	8008ea8 <_printf_i+0x144>
 8008f56:	0022      	movs	r2, r4
 8008f58:	2301      	movs	r3, #1
 8008f5a:	9906      	ldr	r1, [sp, #24]
 8008f5c:	9805      	ldr	r0, [sp, #20]
 8008f5e:	9e07      	ldr	r6, [sp, #28]
 8008f60:	3219      	adds	r2, #25
 8008f62:	47b0      	blx	r6
 8008f64:	3001      	adds	r0, #1
 8008f66:	d09d      	beq.n	8008ea4 <_printf_i+0x140>
 8008f68:	3501      	adds	r5, #1
 8008f6a:	68e3      	ldr	r3, [r4, #12]
 8008f6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f6e:	1a9b      	subs	r3, r3, r2
 8008f70:	42ab      	cmp	r3, r5
 8008f72:	dcf0      	bgt.n	8008f56 <_printf_i+0x1f2>
 8008f74:	e7e9      	b.n	8008f4a <_printf_i+0x1e6>
 8008f76:	2500      	movs	r5, #0
 8008f78:	e7f7      	b.n	8008f6a <_printf_i+0x206>
 8008f7a:	46c0      	nop			; (mov r8, r8)
 8008f7c:	0800d36a 	.word	0x0800d36a
 8008f80:	0800d37b 	.word	0x0800d37b

08008f84 <_scanf_float>:
 8008f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008f86:	b08b      	sub	sp, #44	; 0x2c
 8008f88:	0016      	movs	r6, r2
 8008f8a:	9002      	str	r0, [sp, #8]
 8008f8c:	22ae      	movs	r2, #174	; 0xae
 8008f8e:	2000      	movs	r0, #0
 8008f90:	9307      	str	r3, [sp, #28]
 8008f92:	688b      	ldr	r3, [r1, #8]
 8008f94:	000f      	movs	r7, r1
 8008f96:	1e59      	subs	r1, r3, #1
 8008f98:	0052      	lsls	r2, r2, #1
 8008f9a:	9006      	str	r0, [sp, #24]
 8008f9c:	4291      	cmp	r1, r2
 8008f9e:	d905      	bls.n	8008fac <_scanf_float+0x28>
 8008fa0:	3b5e      	subs	r3, #94	; 0x5e
 8008fa2:	3bff      	subs	r3, #255	; 0xff
 8008fa4:	9306      	str	r3, [sp, #24]
 8008fa6:	235e      	movs	r3, #94	; 0x5e
 8008fa8:	33ff      	adds	r3, #255	; 0xff
 8008faa:	60bb      	str	r3, [r7, #8]
 8008fac:	23f0      	movs	r3, #240	; 0xf0
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	00db      	lsls	r3, r3, #3
 8008fb2:	4313      	orrs	r3, r2
 8008fb4:	603b      	str	r3, [r7, #0]
 8008fb6:	003b      	movs	r3, r7
 8008fb8:	2400      	movs	r4, #0
 8008fba:	331c      	adds	r3, #28
 8008fbc:	001d      	movs	r5, r3
 8008fbe:	9304      	str	r3, [sp, #16]
 8008fc0:	9403      	str	r4, [sp, #12]
 8008fc2:	9409      	str	r4, [sp, #36]	; 0x24
 8008fc4:	9408      	str	r4, [sp, #32]
 8008fc6:	9401      	str	r4, [sp, #4]
 8008fc8:	9405      	str	r4, [sp, #20]
 8008fca:	68ba      	ldr	r2, [r7, #8]
 8008fcc:	2a00      	cmp	r2, #0
 8008fce:	d00a      	beq.n	8008fe6 <_scanf_float+0x62>
 8008fd0:	6833      	ldr	r3, [r6, #0]
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b4e      	cmp	r3, #78	; 0x4e
 8008fd6:	d844      	bhi.n	8009062 <_scanf_float+0xde>
 8008fd8:	0018      	movs	r0, r3
 8008fda:	2b40      	cmp	r3, #64	; 0x40
 8008fdc:	d82c      	bhi.n	8009038 <_scanf_float+0xb4>
 8008fde:	382b      	subs	r0, #43	; 0x2b
 8008fe0:	b2c1      	uxtb	r1, r0
 8008fe2:	290e      	cmp	r1, #14
 8008fe4:	d92a      	bls.n	800903c <_scanf_float+0xb8>
 8008fe6:	9b01      	ldr	r3, [sp, #4]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d003      	beq.n	8008ff4 <_scanf_float+0x70>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	4aa3      	ldr	r2, [pc, #652]	; (800927c <_scanf_float+0x2f8>)
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	603b      	str	r3, [r7, #0]
 8008ff4:	9b03      	ldr	r3, [sp, #12]
 8008ff6:	3b01      	subs	r3, #1
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d900      	bls.n	8008ffe <_scanf_float+0x7a>
 8008ffc:	e0f9      	b.n	80091f2 <_scanf_float+0x26e>
 8008ffe:	24be      	movs	r4, #190	; 0xbe
 8009000:	0064      	lsls	r4, r4, #1
 8009002:	9b04      	ldr	r3, [sp, #16]
 8009004:	429d      	cmp	r5, r3
 8009006:	d900      	bls.n	800900a <_scanf_float+0x86>
 8009008:	e0e9      	b.n	80091de <_scanf_float+0x25a>
 800900a:	2301      	movs	r3, #1
 800900c:	9303      	str	r3, [sp, #12]
 800900e:	e183      	b.n	8009318 <_scanf_float+0x394>
 8009010:	0018      	movs	r0, r3
 8009012:	3861      	subs	r0, #97	; 0x61
 8009014:	280d      	cmp	r0, #13
 8009016:	d8e6      	bhi.n	8008fe6 <_scanf_float+0x62>
 8009018:	f7f7 f884 	bl	8000124 <__gnu_thumb1_case_shi>
 800901c:	ffe50083 	.word	0xffe50083
 8009020:	ffe5ffe5 	.word	0xffe5ffe5
 8009024:	00a200b6 	.word	0x00a200b6
 8009028:	ffe5ffe5 	.word	0xffe5ffe5
 800902c:	ffe50089 	.word	0xffe50089
 8009030:	ffe5ffe5 	.word	0xffe5ffe5
 8009034:	0065ffe5 	.word	0x0065ffe5
 8009038:	3841      	subs	r0, #65	; 0x41
 800903a:	e7eb      	b.n	8009014 <_scanf_float+0x90>
 800903c:	280e      	cmp	r0, #14
 800903e:	d8d2      	bhi.n	8008fe6 <_scanf_float+0x62>
 8009040:	f7f7 f870 	bl	8000124 <__gnu_thumb1_case_shi>
 8009044:	ffd1004b 	.word	0xffd1004b
 8009048:	0098004b 	.word	0x0098004b
 800904c:	0020ffd1 	.word	0x0020ffd1
 8009050:	00400040 	.word	0x00400040
 8009054:	00400040 	.word	0x00400040
 8009058:	00400040 	.word	0x00400040
 800905c:	00400040 	.word	0x00400040
 8009060:	0040      	.short	0x0040
 8009062:	2b6e      	cmp	r3, #110	; 0x6e
 8009064:	d809      	bhi.n	800907a <_scanf_float+0xf6>
 8009066:	2b60      	cmp	r3, #96	; 0x60
 8009068:	d8d2      	bhi.n	8009010 <_scanf_float+0x8c>
 800906a:	2b54      	cmp	r3, #84	; 0x54
 800906c:	d07d      	beq.n	800916a <_scanf_float+0x1e6>
 800906e:	2b59      	cmp	r3, #89	; 0x59
 8009070:	d1b9      	bne.n	8008fe6 <_scanf_float+0x62>
 8009072:	2c07      	cmp	r4, #7
 8009074:	d1b7      	bne.n	8008fe6 <_scanf_float+0x62>
 8009076:	2408      	movs	r4, #8
 8009078:	e02c      	b.n	80090d4 <_scanf_float+0x150>
 800907a:	2b74      	cmp	r3, #116	; 0x74
 800907c:	d075      	beq.n	800916a <_scanf_float+0x1e6>
 800907e:	2b79      	cmp	r3, #121	; 0x79
 8009080:	d0f7      	beq.n	8009072 <_scanf_float+0xee>
 8009082:	e7b0      	b.n	8008fe6 <_scanf_float+0x62>
 8009084:	6839      	ldr	r1, [r7, #0]
 8009086:	05c8      	lsls	r0, r1, #23
 8009088:	d51c      	bpl.n	80090c4 <_scanf_float+0x140>
 800908a:	2380      	movs	r3, #128	; 0x80
 800908c:	4399      	bics	r1, r3
 800908e:	9b01      	ldr	r3, [sp, #4]
 8009090:	6039      	str	r1, [r7, #0]
 8009092:	3301      	adds	r3, #1
 8009094:	9301      	str	r3, [sp, #4]
 8009096:	9b06      	ldr	r3, [sp, #24]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d003      	beq.n	80090a4 <_scanf_float+0x120>
 800909c:	3b01      	subs	r3, #1
 800909e:	3201      	adds	r2, #1
 80090a0:	9306      	str	r3, [sp, #24]
 80090a2:	60ba      	str	r2, [r7, #8]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	3b01      	subs	r3, #1
 80090a8:	60bb      	str	r3, [r7, #8]
 80090aa:	693b      	ldr	r3, [r7, #16]
 80090ac:	3301      	adds	r3, #1
 80090ae:	613b      	str	r3, [r7, #16]
 80090b0:	6873      	ldr	r3, [r6, #4]
 80090b2:	3b01      	subs	r3, #1
 80090b4:	6073      	str	r3, [r6, #4]
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	dc00      	bgt.n	80090bc <_scanf_float+0x138>
 80090ba:	e086      	b.n	80091ca <_scanf_float+0x246>
 80090bc:	6833      	ldr	r3, [r6, #0]
 80090be:	3301      	adds	r3, #1
 80090c0:	6033      	str	r3, [r6, #0]
 80090c2:	e782      	b.n	8008fca <_scanf_float+0x46>
 80090c4:	9a03      	ldr	r2, [sp, #12]
 80090c6:	1912      	adds	r2, r2, r4
 80090c8:	2a00      	cmp	r2, #0
 80090ca:	d18c      	bne.n	8008fe6 <_scanf_float+0x62>
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	496c      	ldr	r1, [pc, #432]	; (8009280 <_scanf_float+0x2fc>)
 80090d0:	400a      	ands	r2, r1
 80090d2:	603a      	str	r2, [r7, #0]
 80090d4:	702b      	strb	r3, [r5, #0]
 80090d6:	3501      	adds	r5, #1
 80090d8:	e7e4      	b.n	80090a4 <_scanf_float+0x120>
 80090da:	2180      	movs	r1, #128	; 0x80
 80090dc:	683a      	ldr	r2, [r7, #0]
 80090de:	420a      	tst	r2, r1
 80090e0:	d081      	beq.n	8008fe6 <_scanf_float+0x62>
 80090e2:	438a      	bics	r2, r1
 80090e4:	e7f5      	b.n	80090d2 <_scanf_float+0x14e>
 80090e6:	9a03      	ldr	r2, [sp, #12]
 80090e8:	2a00      	cmp	r2, #0
 80090ea:	d10f      	bne.n	800910c <_scanf_float+0x188>
 80090ec:	9a01      	ldr	r2, [sp, #4]
 80090ee:	2a00      	cmp	r2, #0
 80090f0:	d10f      	bne.n	8009112 <_scanf_float+0x18e>
 80090f2:	683a      	ldr	r2, [r7, #0]
 80090f4:	21e0      	movs	r1, #224	; 0xe0
 80090f6:	0010      	movs	r0, r2
 80090f8:	00c9      	lsls	r1, r1, #3
 80090fa:	4008      	ands	r0, r1
 80090fc:	4288      	cmp	r0, r1
 80090fe:	d108      	bne.n	8009112 <_scanf_float+0x18e>
 8009100:	4960      	ldr	r1, [pc, #384]	; (8009284 <_scanf_float+0x300>)
 8009102:	400a      	ands	r2, r1
 8009104:	603a      	str	r2, [r7, #0]
 8009106:	2201      	movs	r2, #1
 8009108:	9203      	str	r2, [sp, #12]
 800910a:	e7e3      	b.n	80090d4 <_scanf_float+0x150>
 800910c:	9a03      	ldr	r2, [sp, #12]
 800910e:	2a02      	cmp	r2, #2
 8009110:	d059      	beq.n	80091c6 <_scanf_float+0x242>
 8009112:	2c01      	cmp	r4, #1
 8009114:	d002      	beq.n	800911c <_scanf_float+0x198>
 8009116:	2c04      	cmp	r4, #4
 8009118:	d000      	beq.n	800911c <_scanf_float+0x198>
 800911a:	e764      	b.n	8008fe6 <_scanf_float+0x62>
 800911c:	3401      	adds	r4, #1
 800911e:	b2e4      	uxtb	r4, r4
 8009120:	e7d8      	b.n	80090d4 <_scanf_float+0x150>
 8009122:	9a03      	ldr	r2, [sp, #12]
 8009124:	2a01      	cmp	r2, #1
 8009126:	d000      	beq.n	800912a <_scanf_float+0x1a6>
 8009128:	e75d      	b.n	8008fe6 <_scanf_float+0x62>
 800912a:	2202      	movs	r2, #2
 800912c:	e7ec      	b.n	8009108 <_scanf_float+0x184>
 800912e:	2c00      	cmp	r4, #0
 8009130:	d110      	bne.n	8009154 <_scanf_float+0x1d0>
 8009132:	9a01      	ldr	r2, [sp, #4]
 8009134:	2a00      	cmp	r2, #0
 8009136:	d000      	beq.n	800913a <_scanf_float+0x1b6>
 8009138:	e758      	b.n	8008fec <_scanf_float+0x68>
 800913a:	683a      	ldr	r2, [r7, #0]
 800913c:	21e0      	movs	r1, #224	; 0xe0
 800913e:	0010      	movs	r0, r2
 8009140:	00c9      	lsls	r1, r1, #3
 8009142:	4008      	ands	r0, r1
 8009144:	4288      	cmp	r0, r1
 8009146:	d000      	beq.n	800914a <_scanf_float+0x1c6>
 8009148:	e754      	b.n	8008ff4 <_scanf_float+0x70>
 800914a:	494e      	ldr	r1, [pc, #312]	; (8009284 <_scanf_float+0x300>)
 800914c:	3401      	adds	r4, #1
 800914e:	400a      	ands	r2, r1
 8009150:	603a      	str	r2, [r7, #0]
 8009152:	e7bf      	b.n	80090d4 <_scanf_float+0x150>
 8009154:	21fd      	movs	r1, #253	; 0xfd
 8009156:	1ee2      	subs	r2, r4, #3
 8009158:	420a      	tst	r2, r1
 800915a:	d000      	beq.n	800915e <_scanf_float+0x1da>
 800915c:	e743      	b.n	8008fe6 <_scanf_float+0x62>
 800915e:	e7dd      	b.n	800911c <_scanf_float+0x198>
 8009160:	2c02      	cmp	r4, #2
 8009162:	d000      	beq.n	8009166 <_scanf_float+0x1e2>
 8009164:	e73f      	b.n	8008fe6 <_scanf_float+0x62>
 8009166:	2403      	movs	r4, #3
 8009168:	e7b4      	b.n	80090d4 <_scanf_float+0x150>
 800916a:	2c06      	cmp	r4, #6
 800916c:	d000      	beq.n	8009170 <_scanf_float+0x1ec>
 800916e:	e73a      	b.n	8008fe6 <_scanf_float+0x62>
 8009170:	2407      	movs	r4, #7
 8009172:	e7af      	b.n	80090d4 <_scanf_float+0x150>
 8009174:	683a      	ldr	r2, [r7, #0]
 8009176:	0591      	lsls	r1, r2, #22
 8009178:	d400      	bmi.n	800917c <_scanf_float+0x1f8>
 800917a:	e734      	b.n	8008fe6 <_scanf_float+0x62>
 800917c:	4942      	ldr	r1, [pc, #264]	; (8009288 <_scanf_float+0x304>)
 800917e:	400a      	ands	r2, r1
 8009180:	603a      	str	r2, [r7, #0]
 8009182:	9a01      	ldr	r2, [sp, #4]
 8009184:	9205      	str	r2, [sp, #20]
 8009186:	e7a5      	b.n	80090d4 <_scanf_float+0x150>
 8009188:	21a0      	movs	r1, #160	; 0xa0
 800918a:	2080      	movs	r0, #128	; 0x80
 800918c:	683a      	ldr	r2, [r7, #0]
 800918e:	00c9      	lsls	r1, r1, #3
 8009190:	4011      	ands	r1, r2
 8009192:	00c0      	lsls	r0, r0, #3
 8009194:	4281      	cmp	r1, r0
 8009196:	d006      	beq.n	80091a6 <_scanf_float+0x222>
 8009198:	4202      	tst	r2, r0
 800919a:	d100      	bne.n	800919e <_scanf_float+0x21a>
 800919c:	e723      	b.n	8008fe6 <_scanf_float+0x62>
 800919e:	9901      	ldr	r1, [sp, #4]
 80091a0:	2900      	cmp	r1, #0
 80091a2:	d100      	bne.n	80091a6 <_scanf_float+0x222>
 80091a4:	e726      	b.n	8008ff4 <_scanf_float+0x70>
 80091a6:	0591      	lsls	r1, r2, #22
 80091a8:	d404      	bmi.n	80091b4 <_scanf_float+0x230>
 80091aa:	9901      	ldr	r1, [sp, #4]
 80091ac:	9805      	ldr	r0, [sp, #20]
 80091ae:	9509      	str	r5, [sp, #36]	; 0x24
 80091b0:	1a09      	subs	r1, r1, r0
 80091b2:	9108      	str	r1, [sp, #32]
 80091b4:	4933      	ldr	r1, [pc, #204]	; (8009284 <_scanf_float+0x300>)
 80091b6:	400a      	ands	r2, r1
 80091b8:	21c0      	movs	r1, #192	; 0xc0
 80091ba:	0049      	lsls	r1, r1, #1
 80091bc:	430a      	orrs	r2, r1
 80091be:	603a      	str	r2, [r7, #0]
 80091c0:	2200      	movs	r2, #0
 80091c2:	9201      	str	r2, [sp, #4]
 80091c4:	e786      	b.n	80090d4 <_scanf_float+0x150>
 80091c6:	2203      	movs	r2, #3
 80091c8:	e79e      	b.n	8009108 <_scanf_float+0x184>
 80091ca:	23c0      	movs	r3, #192	; 0xc0
 80091cc:	005b      	lsls	r3, r3, #1
 80091ce:	0031      	movs	r1, r6
 80091d0:	58fb      	ldr	r3, [r7, r3]
 80091d2:	9802      	ldr	r0, [sp, #8]
 80091d4:	4798      	blx	r3
 80091d6:	2800      	cmp	r0, #0
 80091d8:	d100      	bne.n	80091dc <_scanf_float+0x258>
 80091da:	e6f6      	b.n	8008fca <_scanf_float+0x46>
 80091dc:	e703      	b.n	8008fe6 <_scanf_float+0x62>
 80091de:	3d01      	subs	r5, #1
 80091e0:	593b      	ldr	r3, [r7, r4]
 80091e2:	0032      	movs	r2, r6
 80091e4:	7829      	ldrb	r1, [r5, #0]
 80091e6:	9802      	ldr	r0, [sp, #8]
 80091e8:	4798      	blx	r3
 80091ea:	693b      	ldr	r3, [r7, #16]
 80091ec:	3b01      	subs	r3, #1
 80091ee:	613b      	str	r3, [r7, #16]
 80091f0:	e707      	b.n	8009002 <_scanf_float+0x7e>
 80091f2:	1e63      	subs	r3, r4, #1
 80091f4:	2b06      	cmp	r3, #6
 80091f6:	d80e      	bhi.n	8009216 <_scanf_float+0x292>
 80091f8:	9503      	str	r5, [sp, #12]
 80091fa:	2c02      	cmp	r4, #2
 80091fc:	d920      	bls.n	8009240 <_scanf_float+0x2bc>
 80091fe:	1b63      	subs	r3, r4, r5
 8009200:	b2db      	uxtb	r3, r3
 8009202:	9306      	str	r3, [sp, #24]
 8009204:	9b03      	ldr	r3, [sp, #12]
 8009206:	9a06      	ldr	r2, [sp, #24]
 8009208:	189b      	adds	r3, r3, r2
 800920a:	b2db      	uxtb	r3, r3
 800920c:	2b03      	cmp	r3, #3
 800920e:	d827      	bhi.n	8009260 <_scanf_float+0x2dc>
 8009210:	3c03      	subs	r4, #3
 8009212:	b2e4      	uxtb	r4, r4
 8009214:	1b2d      	subs	r5, r5, r4
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	05da      	lsls	r2, r3, #23
 800921a:	d552      	bpl.n	80092c2 <_scanf_float+0x33e>
 800921c:	055b      	lsls	r3, r3, #21
 800921e:	d535      	bpl.n	800928c <_scanf_float+0x308>
 8009220:	24be      	movs	r4, #190	; 0xbe
 8009222:	0064      	lsls	r4, r4, #1
 8009224:	9b04      	ldr	r3, [sp, #16]
 8009226:	429d      	cmp	r5, r3
 8009228:	d800      	bhi.n	800922c <_scanf_float+0x2a8>
 800922a:	e6ee      	b.n	800900a <_scanf_float+0x86>
 800922c:	3d01      	subs	r5, #1
 800922e:	593b      	ldr	r3, [r7, r4]
 8009230:	0032      	movs	r2, r6
 8009232:	7829      	ldrb	r1, [r5, #0]
 8009234:	9802      	ldr	r0, [sp, #8]
 8009236:	4798      	blx	r3
 8009238:	693b      	ldr	r3, [r7, #16]
 800923a:	3b01      	subs	r3, #1
 800923c:	613b      	str	r3, [r7, #16]
 800923e:	e7f1      	b.n	8009224 <_scanf_float+0x2a0>
 8009240:	24be      	movs	r4, #190	; 0xbe
 8009242:	0064      	lsls	r4, r4, #1
 8009244:	9b04      	ldr	r3, [sp, #16]
 8009246:	429d      	cmp	r5, r3
 8009248:	d800      	bhi.n	800924c <_scanf_float+0x2c8>
 800924a:	e6de      	b.n	800900a <_scanf_float+0x86>
 800924c:	3d01      	subs	r5, #1
 800924e:	593b      	ldr	r3, [r7, r4]
 8009250:	0032      	movs	r2, r6
 8009252:	7829      	ldrb	r1, [r5, #0]
 8009254:	9802      	ldr	r0, [sp, #8]
 8009256:	4798      	blx	r3
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	3b01      	subs	r3, #1
 800925c:	613b      	str	r3, [r7, #16]
 800925e:	e7f1      	b.n	8009244 <_scanf_float+0x2c0>
 8009260:	9b03      	ldr	r3, [sp, #12]
 8009262:	0032      	movs	r2, r6
 8009264:	3b01      	subs	r3, #1
 8009266:	7819      	ldrb	r1, [r3, #0]
 8009268:	9303      	str	r3, [sp, #12]
 800926a:	23be      	movs	r3, #190	; 0xbe
 800926c:	005b      	lsls	r3, r3, #1
 800926e:	58fb      	ldr	r3, [r7, r3]
 8009270:	9802      	ldr	r0, [sp, #8]
 8009272:	4798      	blx	r3
 8009274:	693b      	ldr	r3, [r7, #16]
 8009276:	3b01      	subs	r3, #1
 8009278:	613b      	str	r3, [r7, #16]
 800927a:	e7c3      	b.n	8009204 <_scanf_float+0x280>
 800927c:	fffffeff 	.word	0xfffffeff
 8009280:	fffffe7f 	.word	0xfffffe7f
 8009284:	fffff87f 	.word	0xfffff87f
 8009288:	fffffd7f 	.word	0xfffffd7f
 800928c:	693b      	ldr	r3, [r7, #16]
 800928e:	1e6c      	subs	r4, r5, #1
 8009290:	7821      	ldrb	r1, [r4, #0]
 8009292:	3b01      	subs	r3, #1
 8009294:	613b      	str	r3, [r7, #16]
 8009296:	2965      	cmp	r1, #101	; 0x65
 8009298:	d00c      	beq.n	80092b4 <_scanf_float+0x330>
 800929a:	2945      	cmp	r1, #69	; 0x45
 800929c:	d00a      	beq.n	80092b4 <_scanf_float+0x330>
 800929e:	23be      	movs	r3, #190	; 0xbe
 80092a0:	005b      	lsls	r3, r3, #1
 80092a2:	58fb      	ldr	r3, [r7, r3]
 80092a4:	0032      	movs	r2, r6
 80092a6:	9802      	ldr	r0, [sp, #8]
 80092a8:	4798      	blx	r3
 80092aa:	693b      	ldr	r3, [r7, #16]
 80092ac:	1eac      	subs	r4, r5, #2
 80092ae:	3b01      	subs	r3, #1
 80092b0:	7821      	ldrb	r1, [r4, #0]
 80092b2:	613b      	str	r3, [r7, #16]
 80092b4:	23be      	movs	r3, #190	; 0xbe
 80092b6:	005b      	lsls	r3, r3, #1
 80092b8:	0032      	movs	r2, r6
 80092ba:	58fb      	ldr	r3, [r7, r3]
 80092bc:	9802      	ldr	r0, [sp, #8]
 80092be:	4798      	blx	r3
 80092c0:	0025      	movs	r5, r4
 80092c2:	683a      	ldr	r2, [r7, #0]
 80092c4:	2310      	movs	r3, #16
 80092c6:	0011      	movs	r1, r2
 80092c8:	4019      	ands	r1, r3
 80092ca:	9103      	str	r1, [sp, #12]
 80092cc:	421a      	tst	r2, r3
 80092ce:	d15b      	bne.n	8009388 <_scanf_float+0x404>
 80092d0:	22c0      	movs	r2, #192	; 0xc0
 80092d2:	7029      	strb	r1, [r5, #0]
 80092d4:	683b      	ldr	r3, [r7, #0]
 80092d6:	00d2      	lsls	r2, r2, #3
 80092d8:	4013      	ands	r3, r2
 80092da:	2280      	movs	r2, #128	; 0x80
 80092dc:	00d2      	lsls	r2, r2, #3
 80092de:	4293      	cmp	r3, r2
 80092e0:	d11d      	bne.n	800931e <_scanf_float+0x39a>
 80092e2:	9b05      	ldr	r3, [sp, #20]
 80092e4:	9a01      	ldr	r2, [sp, #4]
 80092e6:	9901      	ldr	r1, [sp, #4]
 80092e8:	1a9a      	subs	r2, r3, r2
 80092ea:	428b      	cmp	r3, r1
 80092ec:	d124      	bne.n	8009338 <_scanf_float+0x3b4>
 80092ee:	2200      	movs	r2, #0
 80092f0:	9904      	ldr	r1, [sp, #16]
 80092f2:	9802      	ldr	r0, [sp, #8]
 80092f4:	f002 fdae 	bl	800be54 <_strtod_r>
 80092f8:	9b07      	ldr	r3, [sp, #28]
 80092fa:	683a      	ldr	r2, [r7, #0]
 80092fc:	0004      	movs	r4, r0
 80092fe:	000d      	movs	r5, r1
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	0791      	lsls	r1, r2, #30
 8009304:	d525      	bpl.n	8009352 <_scanf_float+0x3ce>
 8009306:	9907      	ldr	r1, [sp, #28]
 8009308:	1d1a      	adds	r2, r3, #4
 800930a:	600a      	str	r2, [r1, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	601c      	str	r4, [r3, #0]
 8009310:	605d      	str	r5, [r3, #4]
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	3301      	adds	r3, #1
 8009316:	60fb      	str	r3, [r7, #12]
 8009318:	9803      	ldr	r0, [sp, #12]
 800931a:	b00b      	add	sp, #44	; 0x2c
 800931c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800931e:	9b08      	ldr	r3, [sp, #32]
 8009320:	2b00      	cmp	r3, #0
 8009322:	d0e4      	beq.n	80092ee <_scanf_float+0x36a>
 8009324:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009326:	9a03      	ldr	r2, [sp, #12]
 8009328:	1c59      	adds	r1, r3, #1
 800932a:	9802      	ldr	r0, [sp, #8]
 800932c:	230a      	movs	r3, #10
 800932e:	f002 fe1f 	bl	800bf70 <_strtol_r>
 8009332:	9b08      	ldr	r3, [sp, #32]
 8009334:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009336:	1ac2      	subs	r2, r0, r3
 8009338:	003b      	movs	r3, r7
 800933a:	3370      	adds	r3, #112	; 0x70
 800933c:	33ff      	adds	r3, #255	; 0xff
 800933e:	429d      	cmp	r5, r3
 8009340:	d302      	bcc.n	8009348 <_scanf_float+0x3c4>
 8009342:	003d      	movs	r5, r7
 8009344:	356f      	adds	r5, #111	; 0x6f
 8009346:	35ff      	adds	r5, #255	; 0xff
 8009348:	0028      	movs	r0, r5
 800934a:	4910      	ldr	r1, [pc, #64]	; (800938c <_scanf_float+0x408>)
 800934c:	f000 f956 	bl	80095fc <siprintf>
 8009350:	e7cd      	b.n	80092ee <_scanf_float+0x36a>
 8009352:	1d19      	adds	r1, r3, #4
 8009354:	0752      	lsls	r2, r2, #29
 8009356:	d502      	bpl.n	800935e <_scanf_float+0x3da>
 8009358:	9a07      	ldr	r2, [sp, #28]
 800935a:	6011      	str	r1, [r2, #0]
 800935c:	e7d6      	b.n	800930c <_scanf_float+0x388>
 800935e:	9a07      	ldr	r2, [sp, #28]
 8009360:	0020      	movs	r0, r4
 8009362:	6011      	str	r1, [r2, #0]
 8009364:	681e      	ldr	r6, [r3, #0]
 8009366:	0022      	movs	r2, r4
 8009368:	002b      	movs	r3, r5
 800936a:	0029      	movs	r1, r5
 800936c:	f7f9 f960 	bl	8002630 <__aeabi_dcmpun>
 8009370:	2800      	cmp	r0, #0
 8009372:	d004      	beq.n	800937e <_scanf_float+0x3fa>
 8009374:	4806      	ldr	r0, [pc, #24]	; (8009390 <_scanf_float+0x40c>)
 8009376:	f000 fae5 	bl	8009944 <nanf>
 800937a:	6030      	str	r0, [r6, #0]
 800937c:	e7c9      	b.n	8009312 <_scanf_float+0x38e>
 800937e:	0020      	movs	r0, r4
 8009380:	0029      	movs	r1, r5
 8009382:	f7f9 fa47 	bl	8002814 <__aeabi_d2f>
 8009386:	e7f8      	b.n	800937a <_scanf_float+0x3f6>
 8009388:	2300      	movs	r3, #0
 800938a:	e63f      	b.n	800900c <_scanf_float+0x88>
 800938c:	0800d38c 	.word	0x0800d38c
 8009390:	0800d71d 	.word	0x0800d71d

08009394 <std>:
 8009394:	2300      	movs	r3, #0
 8009396:	b510      	push	{r4, lr}
 8009398:	0004      	movs	r4, r0
 800939a:	6003      	str	r3, [r0, #0]
 800939c:	6043      	str	r3, [r0, #4]
 800939e:	6083      	str	r3, [r0, #8]
 80093a0:	8181      	strh	r1, [r0, #12]
 80093a2:	6643      	str	r3, [r0, #100]	; 0x64
 80093a4:	81c2      	strh	r2, [r0, #14]
 80093a6:	6103      	str	r3, [r0, #16]
 80093a8:	6143      	str	r3, [r0, #20]
 80093aa:	6183      	str	r3, [r0, #24]
 80093ac:	0019      	movs	r1, r3
 80093ae:	2208      	movs	r2, #8
 80093b0:	305c      	adds	r0, #92	; 0x5c
 80093b2:	f000 fa35 	bl	8009820 <memset>
 80093b6:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <std+0x50>)
 80093b8:	6224      	str	r4, [r4, #32]
 80093ba:	6263      	str	r3, [r4, #36]	; 0x24
 80093bc:	4b0a      	ldr	r3, [pc, #40]	; (80093e8 <std+0x54>)
 80093be:	62a3      	str	r3, [r4, #40]	; 0x28
 80093c0:	4b0a      	ldr	r3, [pc, #40]	; (80093ec <std+0x58>)
 80093c2:	62e3      	str	r3, [r4, #44]	; 0x2c
 80093c4:	4b0a      	ldr	r3, [pc, #40]	; (80093f0 <std+0x5c>)
 80093c6:	6323      	str	r3, [r4, #48]	; 0x30
 80093c8:	4b0a      	ldr	r3, [pc, #40]	; (80093f4 <std+0x60>)
 80093ca:	429c      	cmp	r4, r3
 80093cc:	d005      	beq.n	80093da <std+0x46>
 80093ce:	4b0a      	ldr	r3, [pc, #40]	; (80093f8 <std+0x64>)
 80093d0:	429c      	cmp	r4, r3
 80093d2:	d002      	beq.n	80093da <std+0x46>
 80093d4:	4b09      	ldr	r3, [pc, #36]	; (80093fc <std+0x68>)
 80093d6:	429c      	cmp	r4, r3
 80093d8:	d103      	bne.n	80093e2 <std+0x4e>
 80093da:	0020      	movs	r0, r4
 80093dc:	3058      	adds	r0, #88	; 0x58
 80093de:	f000 faa3 	bl	8009928 <__retarget_lock_init_recursive>
 80093e2:	bd10      	pop	{r4, pc}
 80093e4:	0800963d 	.word	0x0800963d
 80093e8:	08009665 	.word	0x08009665
 80093ec:	0800969d 	.word	0x0800969d
 80093f0:	080096c9 	.word	0x080096c9
 80093f4:	20000694 	.word	0x20000694
 80093f8:	200006fc 	.word	0x200006fc
 80093fc:	20000764 	.word	0x20000764

08009400 <stdio_exit_handler>:
 8009400:	b510      	push	{r4, lr}
 8009402:	4a03      	ldr	r2, [pc, #12]	; (8009410 <stdio_exit_handler+0x10>)
 8009404:	4903      	ldr	r1, [pc, #12]	; (8009414 <stdio_exit_handler+0x14>)
 8009406:	4804      	ldr	r0, [pc, #16]	; (8009418 <stdio_exit_handler+0x18>)
 8009408:	f000 f86c 	bl	80094e4 <_fwalk_sglue>
 800940c:	bd10      	pop	{r4, pc}
 800940e:	46c0      	nop			; (mov r8, r8)
 8009410:	20000010 	.word	0x20000010
 8009414:	0800c5d9 	.word	0x0800c5d9
 8009418:	2000001c 	.word	0x2000001c

0800941c <cleanup_stdio>:
 800941c:	6841      	ldr	r1, [r0, #4]
 800941e:	4b0b      	ldr	r3, [pc, #44]	; (800944c <cleanup_stdio+0x30>)
 8009420:	b510      	push	{r4, lr}
 8009422:	0004      	movs	r4, r0
 8009424:	4299      	cmp	r1, r3
 8009426:	d001      	beq.n	800942c <cleanup_stdio+0x10>
 8009428:	f003 f8d6 	bl	800c5d8 <_fflush_r>
 800942c:	68a1      	ldr	r1, [r4, #8]
 800942e:	4b08      	ldr	r3, [pc, #32]	; (8009450 <cleanup_stdio+0x34>)
 8009430:	4299      	cmp	r1, r3
 8009432:	d002      	beq.n	800943a <cleanup_stdio+0x1e>
 8009434:	0020      	movs	r0, r4
 8009436:	f003 f8cf 	bl	800c5d8 <_fflush_r>
 800943a:	68e1      	ldr	r1, [r4, #12]
 800943c:	4b05      	ldr	r3, [pc, #20]	; (8009454 <cleanup_stdio+0x38>)
 800943e:	4299      	cmp	r1, r3
 8009440:	d002      	beq.n	8009448 <cleanup_stdio+0x2c>
 8009442:	0020      	movs	r0, r4
 8009444:	f003 f8c8 	bl	800c5d8 <_fflush_r>
 8009448:	bd10      	pop	{r4, pc}
 800944a:	46c0      	nop			; (mov r8, r8)
 800944c:	20000694 	.word	0x20000694
 8009450:	200006fc 	.word	0x200006fc
 8009454:	20000764 	.word	0x20000764

08009458 <global_stdio_init.part.0>:
 8009458:	b510      	push	{r4, lr}
 800945a:	4b09      	ldr	r3, [pc, #36]	; (8009480 <global_stdio_init.part.0+0x28>)
 800945c:	4a09      	ldr	r2, [pc, #36]	; (8009484 <global_stdio_init.part.0+0x2c>)
 800945e:	2104      	movs	r1, #4
 8009460:	601a      	str	r2, [r3, #0]
 8009462:	4809      	ldr	r0, [pc, #36]	; (8009488 <global_stdio_init.part.0+0x30>)
 8009464:	2200      	movs	r2, #0
 8009466:	f7ff ff95 	bl	8009394 <std>
 800946a:	2201      	movs	r2, #1
 800946c:	2109      	movs	r1, #9
 800946e:	4807      	ldr	r0, [pc, #28]	; (800948c <global_stdio_init.part.0+0x34>)
 8009470:	f7ff ff90 	bl	8009394 <std>
 8009474:	2202      	movs	r2, #2
 8009476:	2112      	movs	r1, #18
 8009478:	4805      	ldr	r0, [pc, #20]	; (8009490 <global_stdio_init.part.0+0x38>)
 800947a:	f7ff ff8b 	bl	8009394 <std>
 800947e:	bd10      	pop	{r4, pc}
 8009480:	200007cc 	.word	0x200007cc
 8009484:	08009401 	.word	0x08009401
 8009488:	20000694 	.word	0x20000694
 800948c:	200006fc 	.word	0x200006fc
 8009490:	20000764 	.word	0x20000764

08009494 <__sfp_lock_acquire>:
 8009494:	b510      	push	{r4, lr}
 8009496:	4802      	ldr	r0, [pc, #8]	; (80094a0 <__sfp_lock_acquire+0xc>)
 8009498:	f000 fa47 	bl	800992a <__retarget_lock_acquire_recursive>
 800949c:	bd10      	pop	{r4, pc}
 800949e:	46c0      	nop			; (mov r8, r8)
 80094a0:	200007d5 	.word	0x200007d5

080094a4 <__sfp_lock_release>:
 80094a4:	b510      	push	{r4, lr}
 80094a6:	4802      	ldr	r0, [pc, #8]	; (80094b0 <__sfp_lock_release+0xc>)
 80094a8:	f000 fa40 	bl	800992c <__retarget_lock_release_recursive>
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	200007d5 	.word	0x200007d5

080094b4 <__sinit>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	0004      	movs	r4, r0
 80094b8:	f7ff ffec 	bl	8009494 <__sfp_lock_acquire>
 80094bc:	6a23      	ldr	r3, [r4, #32]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d002      	beq.n	80094c8 <__sinit+0x14>
 80094c2:	f7ff ffef 	bl	80094a4 <__sfp_lock_release>
 80094c6:	bd10      	pop	{r4, pc}
 80094c8:	4b04      	ldr	r3, [pc, #16]	; (80094dc <__sinit+0x28>)
 80094ca:	6223      	str	r3, [r4, #32]
 80094cc:	4b04      	ldr	r3, [pc, #16]	; (80094e0 <__sinit+0x2c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1f6      	bne.n	80094c2 <__sinit+0xe>
 80094d4:	f7ff ffc0 	bl	8009458 <global_stdio_init.part.0>
 80094d8:	e7f3      	b.n	80094c2 <__sinit+0xe>
 80094da:	46c0      	nop			; (mov r8, r8)
 80094dc:	0800941d 	.word	0x0800941d
 80094e0:	200007cc 	.word	0x200007cc

080094e4 <_fwalk_sglue>:
 80094e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80094e6:	0014      	movs	r4, r2
 80094e8:	2600      	movs	r6, #0
 80094ea:	9000      	str	r0, [sp, #0]
 80094ec:	9101      	str	r1, [sp, #4]
 80094ee:	68a5      	ldr	r5, [r4, #8]
 80094f0:	6867      	ldr	r7, [r4, #4]
 80094f2:	3f01      	subs	r7, #1
 80094f4:	d504      	bpl.n	8009500 <_fwalk_sglue+0x1c>
 80094f6:	6824      	ldr	r4, [r4, #0]
 80094f8:	2c00      	cmp	r4, #0
 80094fa:	d1f8      	bne.n	80094ee <_fwalk_sglue+0xa>
 80094fc:	0030      	movs	r0, r6
 80094fe:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009500:	89ab      	ldrh	r3, [r5, #12]
 8009502:	2b01      	cmp	r3, #1
 8009504:	d908      	bls.n	8009518 <_fwalk_sglue+0x34>
 8009506:	220e      	movs	r2, #14
 8009508:	5eab      	ldrsh	r3, [r5, r2]
 800950a:	3301      	adds	r3, #1
 800950c:	d004      	beq.n	8009518 <_fwalk_sglue+0x34>
 800950e:	0029      	movs	r1, r5
 8009510:	9800      	ldr	r0, [sp, #0]
 8009512:	9b01      	ldr	r3, [sp, #4]
 8009514:	4798      	blx	r3
 8009516:	4306      	orrs	r6, r0
 8009518:	3568      	adds	r5, #104	; 0x68
 800951a:	e7ea      	b.n	80094f2 <_fwalk_sglue+0xe>

0800951c <iprintf>:
 800951c:	b40f      	push	{r0, r1, r2, r3}
 800951e:	b507      	push	{r0, r1, r2, lr}
 8009520:	4905      	ldr	r1, [pc, #20]	; (8009538 <iprintf+0x1c>)
 8009522:	ab04      	add	r3, sp, #16
 8009524:	6808      	ldr	r0, [r1, #0]
 8009526:	cb04      	ldmia	r3!, {r2}
 8009528:	6881      	ldr	r1, [r0, #8]
 800952a:	9301      	str	r3, [sp, #4]
 800952c:	f002 feae 	bl	800c28c <_vfiprintf_r>
 8009530:	b003      	add	sp, #12
 8009532:	bc08      	pop	{r3}
 8009534:	b004      	add	sp, #16
 8009536:	4718      	bx	r3
 8009538:	20000068 	.word	0x20000068

0800953c <_puts_r>:
 800953c:	6a03      	ldr	r3, [r0, #32]
 800953e:	b570      	push	{r4, r5, r6, lr}
 8009540:	0005      	movs	r5, r0
 8009542:	000e      	movs	r6, r1
 8009544:	6884      	ldr	r4, [r0, #8]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d101      	bne.n	800954e <_puts_r+0x12>
 800954a:	f7ff ffb3 	bl	80094b4 <__sinit>
 800954e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009550:	07db      	lsls	r3, r3, #31
 8009552:	d405      	bmi.n	8009560 <_puts_r+0x24>
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	059b      	lsls	r3, r3, #22
 8009558:	d402      	bmi.n	8009560 <_puts_r+0x24>
 800955a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800955c:	f000 f9e5 	bl	800992a <__retarget_lock_acquire_recursive>
 8009560:	89a3      	ldrh	r3, [r4, #12]
 8009562:	071b      	lsls	r3, r3, #28
 8009564:	d502      	bpl.n	800956c <_puts_r+0x30>
 8009566:	6923      	ldr	r3, [r4, #16]
 8009568:	2b00      	cmp	r3, #0
 800956a:	d11f      	bne.n	80095ac <_puts_r+0x70>
 800956c:	0021      	movs	r1, r4
 800956e:	0028      	movs	r0, r5
 8009570:	f000 f8f2 	bl	8009758 <__swsetup_r>
 8009574:	2800      	cmp	r0, #0
 8009576:	d019      	beq.n	80095ac <_puts_r+0x70>
 8009578:	2501      	movs	r5, #1
 800957a:	426d      	negs	r5, r5
 800957c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800957e:	07db      	lsls	r3, r3, #31
 8009580:	d405      	bmi.n	800958e <_puts_r+0x52>
 8009582:	89a3      	ldrh	r3, [r4, #12]
 8009584:	059b      	lsls	r3, r3, #22
 8009586:	d402      	bmi.n	800958e <_puts_r+0x52>
 8009588:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800958a:	f000 f9cf 	bl	800992c <__retarget_lock_release_recursive>
 800958e:	0028      	movs	r0, r5
 8009590:	bd70      	pop	{r4, r5, r6, pc}
 8009592:	3601      	adds	r6, #1
 8009594:	60a3      	str	r3, [r4, #8]
 8009596:	2b00      	cmp	r3, #0
 8009598:	da04      	bge.n	80095a4 <_puts_r+0x68>
 800959a:	69a2      	ldr	r2, [r4, #24]
 800959c:	429a      	cmp	r2, r3
 800959e:	dc16      	bgt.n	80095ce <_puts_r+0x92>
 80095a0:	290a      	cmp	r1, #10
 80095a2:	d014      	beq.n	80095ce <_puts_r+0x92>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	6022      	str	r2, [r4, #0]
 80095aa:	7019      	strb	r1, [r3, #0]
 80095ac:	68a3      	ldr	r3, [r4, #8]
 80095ae:	7831      	ldrb	r1, [r6, #0]
 80095b0:	3b01      	subs	r3, #1
 80095b2:	2900      	cmp	r1, #0
 80095b4:	d1ed      	bne.n	8009592 <_puts_r+0x56>
 80095b6:	60a3      	str	r3, [r4, #8]
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	da0f      	bge.n	80095dc <_puts_r+0xa0>
 80095bc:	0028      	movs	r0, r5
 80095be:	0022      	movs	r2, r4
 80095c0:	310a      	adds	r1, #10
 80095c2:	f000 f887 	bl	80096d4 <__swbuf_r>
 80095c6:	250a      	movs	r5, #10
 80095c8:	3001      	adds	r0, #1
 80095ca:	d1d7      	bne.n	800957c <_puts_r+0x40>
 80095cc:	e7d4      	b.n	8009578 <_puts_r+0x3c>
 80095ce:	0022      	movs	r2, r4
 80095d0:	0028      	movs	r0, r5
 80095d2:	f000 f87f 	bl	80096d4 <__swbuf_r>
 80095d6:	3001      	adds	r0, #1
 80095d8:	d1e8      	bne.n	80095ac <_puts_r+0x70>
 80095da:	e7cd      	b.n	8009578 <_puts_r+0x3c>
 80095dc:	250a      	movs	r5, #10
 80095de:	6823      	ldr	r3, [r4, #0]
 80095e0:	1c5a      	adds	r2, r3, #1
 80095e2:	6022      	str	r2, [r4, #0]
 80095e4:	701d      	strb	r5, [r3, #0]
 80095e6:	e7c9      	b.n	800957c <_puts_r+0x40>

080095e8 <puts>:
 80095e8:	b510      	push	{r4, lr}
 80095ea:	4b03      	ldr	r3, [pc, #12]	; (80095f8 <puts+0x10>)
 80095ec:	0001      	movs	r1, r0
 80095ee:	6818      	ldr	r0, [r3, #0]
 80095f0:	f7ff ffa4 	bl	800953c <_puts_r>
 80095f4:	bd10      	pop	{r4, pc}
 80095f6:	46c0      	nop			; (mov r8, r8)
 80095f8:	20000068 	.word	0x20000068

080095fc <siprintf>:
 80095fc:	b40e      	push	{r1, r2, r3}
 80095fe:	b500      	push	{lr}
 8009600:	490b      	ldr	r1, [pc, #44]	; (8009630 <siprintf+0x34>)
 8009602:	b09c      	sub	sp, #112	; 0x70
 8009604:	ab1d      	add	r3, sp, #116	; 0x74
 8009606:	9002      	str	r0, [sp, #8]
 8009608:	9006      	str	r0, [sp, #24]
 800960a:	9107      	str	r1, [sp, #28]
 800960c:	9104      	str	r1, [sp, #16]
 800960e:	4809      	ldr	r0, [pc, #36]	; (8009634 <siprintf+0x38>)
 8009610:	4909      	ldr	r1, [pc, #36]	; (8009638 <siprintf+0x3c>)
 8009612:	cb04      	ldmia	r3!, {r2}
 8009614:	9105      	str	r1, [sp, #20]
 8009616:	6800      	ldr	r0, [r0, #0]
 8009618:	a902      	add	r1, sp, #8
 800961a:	9301      	str	r3, [sp, #4]
 800961c:	f002 fd0e 	bl	800c03c <_svfiprintf_r>
 8009620:	2200      	movs	r2, #0
 8009622:	9b02      	ldr	r3, [sp, #8]
 8009624:	701a      	strb	r2, [r3, #0]
 8009626:	b01c      	add	sp, #112	; 0x70
 8009628:	bc08      	pop	{r3}
 800962a:	b003      	add	sp, #12
 800962c:	4718      	bx	r3
 800962e:	46c0      	nop			; (mov r8, r8)
 8009630:	7fffffff 	.word	0x7fffffff
 8009634:	20000068 	.word	0x20000068
 8009638:	ffff0208 	.word	0xffff0208

0800963c <__sread>:
 800963c:	b570      	push	{r4, r5, r6, lr}
 800963e:	000c      	movs	r4, r1
 8009640:	250e      	movs	r5, #14
 8009642:	5f49      	ldrsh	r1, [r1, r5]
 8009644:	f000 f91e 	bl	8009884 <_read_r>
 8009648:	2800      	cmp	r0, #0
 800964a:	db03      	blt.n	8009654 <__sread+0x18>
 800964c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800964e:	181b      	adds	r3, r3, r0
 8009650:	6563      	str	r3, [r4, #84]	; 0x54
 8009652:	bd70      	pop	{r4, r5, r6, pc}
 8009654:	89a3      	ldrh	r3, [r4, #12]
 8009656:	4a02      	ldr	r2, [pc, #8]	; (8009660 <__sread+0x24>)
 8009658:	4013      	ands	r3, r2
 800965a:	81a3      	strh	r3, [r4, #12]
 800965c:	e7f9      	b.n	8009652 <__sread+0x16>
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	ffffefff 	.word	0xffffefff

08009664 <__swrite>:
 8009664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009666:	001f      	movs	r7, r3
 8009668:	898b      	ldrh	r3, [r1, #12]
 800966a:	0005      	movs	r5, r0
 800966c:	000c      	movs	r4, r1
 800966e:	0016      	movs	r6, r2
 8009670:	05db      	lsls	r3, r3, #23
 8009672:	d505      	bpl.n	8009680 <__swrite+0x1c>
 8009674:	230e      	movs	r3, #14
 8009676:	5ec9      	ldrsh	r1, [r1, r3]
 8009678:	2200      	movs	r2, #0
 800967a:	2302      	movs	r3, #2
 800967c:	f000 f8ee 	bl	800985c <_lseek_r>
 8009680:	89a3      	ldrh	r3, [r4, #12]
 8009682:	4a05      	ldr	r2, [pc, #20]	; (8009698 <__swrite+0x34>)
 8009684:	0028      	movs	r0, r5
 8009686:	4013      	ands	r3, r2
 8009688:	81a3      	strh	r3, [r4, #12]
 800968a:	0032      	movs	r2, r6
 800968c:	230e      	movs	r3, #14
 800968e:	5ee1      	ldrsh	r1, [r4, r3]
 8009690:	003b      	movs	r3, r7
 8009692:	f000 f90b 	bl	80098ac <_write_r>
 8009696:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009698:	ffffefff 	.word	0xffffefff

0800969c <__sseek>:
 800969c:	b570      	push	{r4, r5, r6, lr}
 800969e:	000c      	movs	r4, r1
 80096a0:	250e      	movs	r5, #14
 80096a2:	5f49      	ldrsh	r1, [r1, r5]
 80096a4:	f000 f8da 	bl	800985c <_lseek_r>
 80096a8:	89a3      	ldrh	r3, [r4, #12]
 80096aa:	1c42      	adds	r2, r0, #1
 80096ac:	d103      	bne.n	80096b6 <__sseek+0x1a>
 80096ae:	4a05      	ldr	r2, [pc, #20]	; (80096c4 <__sseek+0x28>)
 80096b0:	4013      	ands	r3, r2
 80096b2:	81a3      	strh	r3, [r4, #12]
 80096b4:	bd70      	pop	{r4, r5, r6, pc}
 80096b6:	2280      	movs	r2, #128	; 0x80
 80096b8:	0152      	lsls	r2, r2, #5
 80096ba:	4313      	orrs	r3, r2
 80096bc:	81a3      	strh	r3, [r4, #12]
 80096be:	6560      	str	r0, [r4, #84]	; 0x54
 80096c0:	e7f8      	b.n	80096b4 <__sseek+0x18>
 80096c2:	46c0      	nop			; (mov r8, r8)
 80096c4:	ffffefff 	.word	0xffffefff

080096c8 <__sclose>:
 80096c8:	b510      	push	{r4, lr}
 80096ca:	230e      	movs	r3, #14
 80096cc:	5ec9      	ldrsh	r1, [r1, r3]
 80096ce:	f000 f8b3 	bl	8009838 <_close_r>
 80096d2:	bd10      	pop	{r4, pc}

080096d4 <__swbuf_r>:
 80096d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096d6:	0006      	movs	r6, r0
 80096d8:	000d      	movs	r5, r1
 80096da:	0014      	movs	r4, r2
 80096dc:	2800      	cmp	r0, #0
 80096de:	d004      	beq.n	80096ea <__swbuf_r+0x16>
 80096e0:	6a03      	ldr	r3, [r0, #32]
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d101      	bne.n	80096ea <__swbuf_r+0x16>
 80096e6:	f7ff fee5 	bl	80094b4 <__sinit>
 80096ea:	69a3      	ldr	r3, [r4, #24]
 80096ec:	60a3      	str	r3, [r4, #8]
 80096ee:	89a3      	ldrh	r3, [r4, #12]
 80096f0:	071b      	lsls	r3, r3, #28
 80096f2:	d528      	bpl.n	8009746 <__swbuf_r+0x72>
 80096f4:	6923      	ldr	r3, [r4, #16]
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d025      	beq.n	8009746 <__swbuf_r+0x72>
 80096fa:	6923      	ldr	r3, [r4, #16]
 80096fc:	6820      	ldr	r0, [r4, #0]
 80096fe:	b2ef      	uxtb	r7, r5
 8009700:	1ac0      	subs	r0, r0, r3
 8009702:	6963      	ldr	r3, [r4, #20]
 8009704:	b2ed      	uxtb	r5, r5
 8009706:	4283      	cmp	r3, r0
 8009708:	dc05      	bgt.n	8009716 <__swbuf_r+0x42>
 800970a:	0021      	movs	r1, r4
 800970c:	0030      	movs	r0, r6
 800970e:	f002 ff63 	bl	800c5d8 <_fflush_r>
 8009712:	2800      	cmp	r0, #0
 8009714:	d11d      	bne.n	8009752 <__swbuf_r+0x7e>
 8009716:	68a3      	ldr	r3, [r4, #8]
 8009718:	3001      	adds	r0, #1
 800971a:	3b01      	subs	r3, #1
 800971c:	60a3      	str	r3, [r4, #8]
 800971e:	6823      	ldr	r3, [r4, #0]
 8009720:	1c5a      	adds	r2, r3, #1
 8009722:	6022      	str	r2, [r4, #0]
 8009724:	701f      	strb	r7, [r3, #0]
 8009726:	6963      	ldr	r3, [r4, #20]
 8009728:	4283      	cmp	r3, r0
 800972a:	d004      	beq.n	8009736 <__swbuf_r+0x62>
 800972c:	89a3      	ldrh	r3, [r4, #12]
 800972e:	07db      	lsls	r3, r3, #31
 8009730:	d507      	bpl.n	8009742 <__swbuf_r+0x6e>
 8009732:	2d0a      	cmp	r5, #10
 8009734:	d105      	bne.n	8009742 <__swbuf_r+0x6e>
 8009736:	0021      	movs	r1, r4
 8009738:	0030      	movs	r0, r6
 800973a:	f002 ff4d 	bl	800c5d8 <_fflush_r>
 800973e:	2800      	cmp	r0, #0
 8009740:	d107      	bne.n	8009752 <__swbuf_r+0x7e>
 8009742:	0028      	movs	r0, r5
 8009744:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009746:	0021      	movs	r1, r4
 8009748:	0030      	movs	r0, r6
 800974a:	f000 f805 	bl	8009758 <__swsetup_r>
 800974e:	2800      	cmp	r0, #0
 8009750:	d0d3      	beq.n	80096fa <__swbuf_r+0x26>
 8009752:	2501      	movs	r5, #1
 8009754:	426d      	negs	r5, r5
 8009756:	e7f4      	b.n	8009742 <__swbuf_r+0x6e>

08009758 <__swsetup_r>:
 8009758:	4b30      	ldr	r3, [pc, #192]	; (800981c <__swsetup_r+0xc4>)
 800975a:	b570      	push	{r4, r5, r6, lr}
 800975c:	0005      	movs	r5, r0
 800975e:	6818      	ldr	r0, [r3, #0]
 8009760:	000c      	movs	r4, r1
 8009762:	2800      	cmp	r0, #0
 8009764:	d004      	beq.n	8009770 <__swsetup_r+0x18>
 8009766:	6a03      	ldr	r3, [r0, #32]
 8009768:	2b00      	cmp	r3, #0
 800976a:	d101      	bne.n	8009770 <__swsetup_r+0x18>
 800976c:	f7ff fea2 	bl	80094b4 <__sinit>
 8009770:	230c      	movs	r3, #12
 8009772:	5ee2      	ldrsh	r2, [r4, r3]
 8009774:	b293      	uxth	r3, r2
 8009776:	0711      	lsls	r1, r2, #28
 8009778:	d423      	bmi.n	80097c2 <__swsetup_r+0x6a>
 800977a:	06d9      	lsls	r1, r3, #27
 800977c:	d407      	bmi.n	800978e <__swsetup_r+0x36>
 800977e:	2309      	movs	r3, #9
 8009780:	2001      	movs	r0, #1
 8009782:	602b      	str	r3, [r5, #0]
 8009784:	3337      	adds	r3, #55	; 0x37
 8009786:	4313      	orrs	r3, r2
 8009788:	81a3      	strh	r3, [r4, #12]
 800978a:	4240      	negs	r0, r0
 800978c:	bd70      	pop	{r4, r5, r6, pc}
 800978e:	075b      	lsls	r3, r3, #29
 8009790:	d513      	bpl.n	80097ba <__swsetup_r+0x62>
 8009792:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009794:	2900      	cmp	r1, #0
 8009796:	d008      	beq.n	80097aa <__swsetup_r+0x52>
 8009798:	0023      	movs	r3, r4
 800979a:	3344      	adds	r3, #68	; 0x44
 800979c:	4299      	cmp	r1, r3
 800979e:	d002      	beq.n	80097a6 <__swsetup_r+0x4e>
 80097a0:	0028      	movs	r0, r5
 80097a2:	f000 ff71 	bl	800a688 <_free_r>
 80097a6:	2300      	movs	r3, #0
 80097a8:	6363      	str	r3, [r4, #52]	; 0x34
 80097aa:	2224      	movs	r2, #36	; 0x24
 80097ac:	89a3      	ldrh	r3, [r4, #12]
 80097ae:	4393      	bics	r3, r2
 80097b0:	81a3      	strh	r3, [r4, #12]
 80097b2:	2300      	movs	r3, #0
 80097b4:	6063      	str	r3, [r4, #4]
 80097b6:	6923      	ldr	r3, [r4, #16]
 80097b8:	6023      	str	r3, [r4, #0]
 80097ba:	2308      	movs	r3, #8
 80097bc:	89a2      	ldrh	r2, [r4, #12]
 80097be:	4313      	orrs	r3, r2
 80097c0:	81a3      	strh	r3, [r4, #12]
 80097c2:	6923      	ldr	r3, [r4, #16]
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10b      	bne.n	80097e0 <__swsetup_r+0x88>
 80097c8:	21a0      	movs	r1, #160	; 0xa0
 80097ca:	2280      	movs	r2, #128	; 0x80
 80097cc:	89a3      	ldrh	r3, [r4, #12]
 80097ce:	0089      	lsls	r1, r1, #2
 80097d0:	0092      	lsls	r2, r2, #2
 80097d2:	400b      	ands	r3, r1
 80097d4:	4293      	cmp	r3, r2
 80097d6:	d003      	beq.n	80097e0 <__swsetup_r+0x88>
 80097d8:	0021      	movs	r1, r4
 80097da:	0028      	movs	r0, r5
 80097dc:	f002 ff50 	bl	800c680 <__smakebuf_r>
 80097e0:	220c      	movs	r2, #12
 80097e2:	5ea3      	ldrsh	r3, [r4, r2]
 80097e4:	2001      	movs	r0, #1
 80097e6:	001a      	movs	r2, r3
 80097e8:	b299      	uxth	r1, r3
 80097ea:	4002      	ands	r2, r0
 80097ec:	4203      	tst	r3, r0
 80097ee:	d00f      	beq.n	8009810 <__swsetup_r+0xb8>
 80097f0:	2200      	movs	r2, #0
 80097f2:	60a2      	str	r2, [r4, #8]
 80097f4:	6962      	ldr	r2, [r4, #20]
 80097f6:	4252      	negs	r2, r2
 80097f8:	61a2      	str	r2, [r4, #24]
 80097fa:	2000      	movs	r0, #0
 80097fc:	6922      	ldr	r2, [r4, #16]
 80097fe:	4282      	cmp	r2, r0
 8009800:	d1c4      	bne.n	800978c <__swsetup_r+0x34>
 8009802:	0609      	lsls	r1, r1, #24
 8009804:	d5c2      	bpl.n	800978c <__swsetup_r+0x34>
 8009806:	2240      	movs	r2, #64	; 0x40
 8009808:	4313      	orrs	r3, r2
 800980a:	81a3      	strh	r3, [r4, #12]
 800980c:	3801      	subs	r0, #1
 800980e:	e7bd      	b.n	800978c <__swsetup_r+0x34>
 8009810:	0788      	lsls	r0, r1, #30
 8009812:	d400      	bmi.n	8009816 <__swsetup_r+0xbe>
 8009814:	6962      	ldr	r2, [r4, #20]
 8009816:	60a2      	str	r2, [r4, #8]
 8009818:	e7ef      	b.n	80097fa <__swsetup_r+0xa2>
 800981a:	46c0      	nop			; (mov r8, r8)
 800981c:	20000068 	.word	0x20000068

08009820 <memset>:
 8009820:	0003      	movs	r3, r0
 8009822:	1882      	adds	r2, r0, r2
 8009824:	4293      	cmp	r3, r2
 8009826:	d100      	bne.n	800982a <memset+0xa>
 8009828:	4770      	bx	lr
 800982a:	7019      	strb	r1, [r3, #0]
 800982c:	3301      	adds	r3, #1
 800982e:	e7f9      	b.n	8009824 <memset+0x4>

08009830 <_localeconv_r>:
 8009830:	4800      	ldr	r0, [pc, #0]	; (8009834 <_localeconv_r+0x4>)
 8009832:	4770      	bx	lr
 8009834:	2000015c 	.word	0x2000015c

08009838 <_close_r>:
 8009838:	2300      	movs	r3, #0
 800983a:	b570      	push	{r4, r5, r6, lr}
 800983c:	4d06      	ldr	r5, [pc, #24]	; (8009858 <_close_r+0x20>)
 800983e:	0004      	movs	r4, r0
 8009840:	0008      	movs	r0, r1
 8009842:	602b      	str	r3, [r5, #0]
 8009844:	f7f9 fe0d 	bl	8003462 <_close>
 8009848:	1c43      	adds	r3, r0, #1
 800984a:	d103      	bne.n	8009854 <_close_r+0x1c>
 800984c:	682b      	ldr	r3, [r5, #0]
 800984e:	2b00      	cmp	r3, #0
 8009850:	d000      	beq.n	8009854 <_close_r+0x1c>
 8009852:	6023      	str	r3, [r4, #0]
 8009854:	bd70      	pop	{r4, r5, r6, pc}
 8009856:	46c0      	nop			; (mov r8, r8)
 8009858:	200007d0 	.word	0x200007d0

0800985c <_lseek_r>:
 800985c:	b570      	push	{r4, r5, r6, lr}
 800985e:	0004      	movs	r4, r0
 8009860:	0008      	movs	r0, r1
 8009862:	0011      	movs	r1, r2
 8009864:	001a      	movs	r2, r3
 8009866:	2300      	movs	r3, #0
 8009868:	4d05      	ldr	r5, [pc, #20]	; (8009880 <_lseek_r+0x24>)
 800986a:	602b      	str	r3, [r5, #0]
 800986c:	f7f9 fe1a 	bl	80034a4 <_lseek>
 8009870:	1c43      	adds	r3, r0, #1
 8009872:	d103      	bne.n	800987c <_lseek_r+0x20>
 8009874:	682b      	ldr	r3, [r5, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d000      	beq.n	800987c <_lseek_r+0x20>
 800987a:	6023      	str	r3, [r4, #0]
 800987c:	bd70      	pop	{r4, r5, r6, pc}
 800987e:	46c0      	nop			; (mov r8, r8)
 8009880:	200007d0 	.word	0x200007d0

08009884 <_read_r>:
 8009884:	b570      	push	{r4, r5, r6, lr}
 8009886:	0004      	movs	r4, r0
 8009888:	0008      	movs	r0, r1
 800988a:	0011      	movs	r1, r2
 800988c:	001a      	movs	r2, r3
 800988e:	2300      	movs	r3, #0
 8009890:	4d05      	ldr	r5, [pc, #20]	; (80098a8 <_read_r+0x24>)
 8009892:	602b      	str	r3, [r5, #0]
 8009894:	f7f9 fdac 	bl	80033f0 <_read>
 8009898:	1c43      	adds	r3, r0, #1
 800989a:	d103      	bne.n	80098a4 <_read_r+0x20>
 800989c:	682b      	ldr	r3, [r5, #0]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d000      	beq.n	80098a4 <_read_r+0x20>
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	bd70      	pop	{r4, r5, r6, pc}
 80098a6:	46c0      	nop			; (mov r8, r8)
 80098a8:	200007d0 	.word	0x200007d0

080098ac <_write_r>:
 80098ac:	b570      	push	{r4, r5, r6, lr}
 80098ae:	0004      	movs	r4, r0
 80098b0:	0008      	movs	r0, r1
 80098b2:	0011      	movs	r1, r2
 80098b4:	001a      	movs	r2, r3
 80098b6:	2300      	movs	r3, #0
 80098b8:	4d05      	ldr	r5, [pc, #20]	; (80098d0 <_write_r+0x24>)
 80098ba:	602b      	str	r3, [r5, #0]
 80098bc:	f7f9 fdb5 	bl	800342a <_write>
 80098c0:	1c43      	adds	r3, r0, #1
 80098c2:	d103      	bne.n	80098cc <_write_r+0x20>
 80098c4:	682b      	ldr	r3, [r5, #0]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d000      	beq.n	80098cc <_write_r+0x20>
 80098ca:	6023      	str	r3, [r4, #0]
 80098cc:	bd70      	pop	{r4, r5, r6, pc}
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	200007d0 	.word	0x200007d0

080098d4 <__errno>:
 80098d4:	4b01      	ldr	r3, [pc, #4]	; (80098dc <__errno+0x8>)
 80098d6:	6818      	ldr	r0, [r3, #0]
 80098d8:	4770      	bx	lr
 80098da:	46c0      	nop			; (mov r8, r8)
 80098dc:	20000068 	.word	0x20000068

080098e0 <__libc_init_array>:
 80098e0:	b570      	push	{r4, r5, r6, lr}
 80098e2:	2600      	movs	r6, #0
 80098e4:	4c0c      	ldr	r4, [pc, #48]	; (8009918 <__libc_init_array+0x38>)
 80098e6:	4d0d      	ldr	r5, [pc, #52]	; (800991c <__libc_init_array+0x3c>)
 80098e8:	1b64      	subs	r4, r4, r5
 80098ea:	10a4      	asrs	r4, r4, #2
 80098ec:	42a6      	cmp	r6, r4
 80098ee:	d109      	bne.n	8009904 <__libc_init_array+0x24>
 80098f0:	2600      	movs	r6, #0
 80098f2:	f003 fbcd 	bl	800d090 <_init>
 80098f6:	4c0a      	ldr	r4, [pc, #40]	; (8009920 <__libc_init_array+0x40>)
 80098f8:	4d0a      	ldr	r5, [pc, #40]	; (8009924 <__libc_init_array+0x44>)
 80098fa:	1b64      	subs	r4, r4, r5
 80098fc:	10a4      	asrs	r4, r4, #2
 80098fe:	42a6      	cmp	r6, r4
 8009900:	d105      	bne.n	800990e <__libc_init_array+0x2e>
 8009902:	bd70      	pop	{r4, r5, r6, pc}
 8009904:	00b3      	lsls	r3, r6, #2
 8009906:	58eb      	ldr	r3, [r5, r3]
 8009908:	4798      	blx	r3
 800990a:	3601      	adds	r6, #1
 800990c:	e7ee      	b.n	80098ec <__libc_init_array+0xc>
 800990e:	00b3      	lsls	r3, r6, #2
 8009910:	58eb      	ldr	r3, [r5, r3]
 8009912:	4798      	blx	r3
 8009914:	3601      	adds	r6, #1
 8009916:	e7f2      	b.n	80098fe <__libc_init_array+0x1e>
 8009918:	0800d780 	.word	0x0800d780
 800991c:	0800d780 	.word	0x0800d780
 8009920:	0800d784 	.word	0x0800d784
 8009924:	0800d780 	.word	0x0800d780

08009928 <__retarget_lock_init_recursive>:
 8009928:	4770      	bx	lr

0800992a <__retarget_lock_acquire_recursive>:
 800992a:	4770      	bx	lr

0800992c <__retarget_lock_release_recursive>:
 800992c:	4770      	bx	lr

0800992e <memchr>:
 800992e:	b2c9      	uxtb	r1, r1
 8009930:	1882      	adds	r2, r0, r2
 8009932:	4290      	cmp	r0, r2
 8009934:	d101      	bne.n	800993a <memchr+0xc>
 8009936:	2000      	movs	r0, #0
 8009938:	4770      	bx	lr
 800993a:	7803      	ldrb	r3, [r0, #0]
 800993c:	428b      	cmp	r3, r1
 800993e:	d0fb      	beq.n	8009938 <memchr+0xa>
 8009940:	3001      	adds	r0, #1
 8009942:	e7f6      	b.n	8009932 <memchr+0x4>

08009944 <nanf>:
 8009944:	4800      	ldr	r0, [pc, #0]	; (8009948 <nanf+0x4>)
 8009946:	4770      	bx	lr
 8009948:	7fc00000 	.word	0x7fc00000

0800994c <quorem>:
 800994c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800994e:	6902      	ldr	r2, [r0, #16]
 8009950:	690b      	ldr	r3, [r1, #16]
 8009952:	b089      	sub	sp, #36	; 0x24
 8009954:	0007      	movs	r7, r0
 8009956:	9104      	str	r1, [sp, #16]
 8009958:	2000      	movs	r0, #0
 800995a:	429a      	cmp	r2, r3
 800995c:	db69      	blt.n	8009a32 <quorem+0xe6>
 800995e:	3b01      	subs	r3, #1
 8009960:	009c      	lsls	r4, r3, #2
 8009962:	9301      	str	r3, [sp, #4]
 8009964:	000b      	movs	r3, r1
 8009966:	3314      	adds	r3, #20
 8009968:	9306      	str	r3, [sp, #24]
 800996a:	191b      	adds	r3, r3, r4
 800996c:	9305      	str	r3, [sp, #20]
 800996e:	003b      	movs	r3, r7
 8009970:	3314      	adds	r3, #20
 8009972:	9303      	str	r3, [sp, #12]
 8009974:	191c      	adds	r4, r3, r4
 8009976:	9b05      	ldr	r3, [sp, #20]
 8009978:	6826      	ldr	r6, [r4, #0]
 800997a:	681d      	ldr	r5, [r3, #0]
 800997c:	0030      	movs	r0, r6
 800997e:	3501      	adds	r5, #1
 8009980:	0029      	movs	r1, r5
 8009982:	f7f6 fbd9 	bl	8000138 <__udivsi3>
 8009986:	9002      	str	r0, [sp, #8]
 8009988:	42ae      	cmp	r6, r5
 800998a:	d329      	bcc.n	80099e0 <quorem+0x94>
 800998c:	9b06      	ldr	r3, [sp, #24]
 800998e:	2600      	movs	r6, #0
 8009990:	469c      	mov	ip, r3
 8009992:	9d03      	ldr	r5, [sp, #12]
 8009994:	9606      	str	r6, [sp, #24]
 8009996:	4662      	mov	r2, ip
 8009998:	ca08      	ldmia	r2!, {r3}
 800999a:	6828      	ldr	r0, [r5, #0]
 800999c:	4694      	mov	ip, r2
 800999e:	9a02      	ldr	r2, [sp, #8]
 80099a0:	b299      	uxth	r1, r3
 80099a2:	4351      	muls	r1, r2
 80099a4:	0c1b      	lsrs	r3, r3, #16
 80099a6:	4353      	muls	r3, r2
 80099a8:	1989      	adds	r1, r1, r6
 80099aa:	0c0a      	lsrs	r2, r1, #16
 80099ac:	189b      	adds	r3, r3, r2
 80099ae:	9307      	str	r3, [sp, #28]
 80099b0:	0c1e      	lsrs	r6, r3, #16
 80099b2:	9b06      	ldr	r3, [sp, #24]
 80099b4:	b282      	uxth	r2, r0
 80099b6:	18d2      	adds	r2, r2, r3
 80099b8:	466b      	mov	r3, sp
 80099ba:	b289      	uxth	r1, r1
 80099bc:	8b9b      	ldrh	r3, [r3, #28]
 80099be:	1a52      	subs	r2, r2, r1
 80099c0:	0c01      	lsrs	r1, r0, #16
 80099c2:	1ac9      	subs	r1, r1, r3
 80099c4:	1413      	asrs	r3, r2, #16
 80099c6:	18cb      	adds	r3, r1, r3
 80099c8:	1419      	asrs	r1, r3, #16
 80099ca:	b292      	uxth	r2, r2
 80099cc:	041b      	lsls	r3, r3, #16
 80099ce:	4313      	orrs	r3, r2
 80099d0:	c508      	stmia	r5!, {r3}
 80099d2:	9b05      	ldr	r3, [sp, #20]
 80099d4:	9106      	str	r1, [sp, #24]
 80099d6:	4563      	cmp	r3, ip
 80099d8:	d2dd      	bcs.n	8009996 <quorem+0x4a>
 80099da:	6823      	ldr	r3, [r4, #0]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d030      	beq.n	8009a42 <quorem+0xf6>
 80099e0:	0038      	movs	r0, r7
 80099e2:	9904      	ldr	r1, [sp, #16]
 80099e4:	f001 fa2a 	bl	800ae3c <__mcmp>
 80099e8:	2800      	cmp	r0, #0
 80099ea:	db21      	blt.n	8009a30 <quorem+0xe4>
 80099ec:	0038      	movs	r0, r7
 80099ee:	2600      	movs	r6, #0
 80099f0:	9b02      	ldr	r3, [sp, #8]
 80099f2:	9c04      	ldr	r4, [sp, #16]
 80099f4:	3301      	adds	r3, #1
 80099f6:	9302      	str	r3, [sp, #8]
 80099f8:	3014      	adds	r0, #20
 80099fa:	3414      	adds	r4, #20
 80099fc:	6803      	ldr	r3, [r0, #0]
 80099fe:	cc02      	ldmia	r4!, {r1}
 8009a00:	b29d      	uxth	r5, r3
 8009a02:	19ad      	adds	r5, r5, r6
 8009a04:	b28a      	uxth	r2, r1
 8009a06:	1aaa      	subs	r2, r5, r2
 8009a08:	0c09      	lsrs	r1, r1, #16
 8009a0a:	0c1b      	lsrs	r3, r3, #16
 8009a0c:	1a5b      	subs	r3, r3, r1
 8009a0e:	1411      	asrs	r1, r2, #16
 8009a10:	185b      	adds	r3, r3, r1
 8009a12:	141e      	asrs	r6, r3, #16
 8009a14:	b292      	uxth	r2, r2
 8009a16:	041b      	lsls	r3, r3, #16
 8009a18:	4313      	orrs	r3, r2
 8009a1a:	c008      	stmia	r0!, {r3}
 8009a1c:	9b05      	ldr	r3, [sp, #20]
 8009a1e:	42a3      	cmp	r3, r4
 8009a20:	d2ec      	bcs.n	80099fc <quorem+0xb0>
 8009a22:	9b01      	ldr	r3, [sp, #4]
 8009a24:	9a03      	ldr	r2, [sp, #12]
 8009a26:	009b      	lsls	r3, r3, #2
 8009a28:	18d3      	adds	r3, r2, r3
 8009a2a:	681a      	ldr	r2, [r3, #0]
 8009a2c:	2a00      	cmp	r2, #0
 8009a2e:	d015      	beq.n	8009a5c <quorem+0x110>
 8009a30:	9802      	ldr	r0, [sp, #8]
 8009a32:	b009      	add	sp, #36	; 0x24
 8009a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a36:	6823      	ldr	r3, [r4, #0]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d106      	bne.n	8009a4a <quorem+0xfe>
 8009a3c:	9b01      	ldr	r3, [sp, #4]
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	9301      	str	r3, [sp, #4]
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	3c04      	subs	r4, #4
 8009a46:	42a3      	cmp	r3, r4
 8009a48:	d3f5      	bcc.n	8009a36 <quorem+0xea>
 8009a4a:	9b01      	ldr	r3, [sp, #4]
 8009a4c:	613b      	str	r3, [r7, #16]
 8009a4e:	e7c7      	b.n	80099e0 <quorem+0x94>
 8009a50:	681a      	ldr	r2, [r3, #0]
 8009a52:	2a00      	cmp	r2, #0
 8009a54:	d106      	bne.n	8009a64 <quorem+0x118>
 8009a56:	9a01      	ldr	r2, [sp, #4]
 8009a58:	3a01      	subs	r2, #1
 8009a5a:	9201      	str	r2, [sp, #4]
 8009a5c:	9a03      	ldr	r2, [sp, #12]
 8009a5e:	3b04      	subs	r3, #4
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d3f5      	bcc.n	8009a50 <quorem+0x104>
 8009a64:	9b01      	ldr	r3, [sp, #4]
 8009a66:	613b      	str	r3, [r7, #16]
 8009a68:	e7e2      	b.n	8009a30 <quorem+0xe4>
	...

08009a6c <_dtoa_r>:
 8009a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a6e:	0014      	movs	r4, r2
 8009a70:	001d      	movs	r5, r3
 8009a72:	69c6      	ldr	r6, [r0, #28]
 8009a74:	b09d      	sub	sp, #116	; 0x74
 8009a76:	9408      	str	r4, [sp, #32]
 8009a78:	9509      	str	r5, [sp, #36]	; 0x24
 8009a7a:	9f25      	ldr	r7, [sp, #148]	; 0x94
 8009a7c:	9004      	str	r0, [sp, #16]
 8009a7e:	2e00      	cmp	r6, #0
 8009a80:	d10f      	bne.n	8009aa2 <_dtoa_r+0x36>
 8009a82:	2010      	movs	r0, #16
 8009a84:	f000 fe4a 	bl	800a71c <malloc>
 8009a88:	9b04      	ldr	r3, [sp, #16]
 8009a8a:	1e02      	subs	r2, r0, #0
 8009a8c:	61d8      	str	r0, [r3, #28]
 8009a8e:	d104      	bne.n	8009a9a <_dtoa_r+0x2e>
 8009a90:	21ef      	movs	r1, #239	; 0xef
 8009a92:	4bc6      	ldr	r3, [pc, #792]	; (8009dac <_dtoa_r+0x340>)
 8009a94:	48c6      	ldr	r0, [pc, #792]	; (8009db0 <_dtoa_r+0x344>)
 8009a96:	f002 fe9b 	bl	800c7d0 <__assert_func>
 8009a9a:	6046      	str	r6, [r0, #4]
 8009a9c:	6086      	str	r6, [r0, #8]
 8009a9e:	6006      	str	r6, [r0, #0]
 8009aa0:	60c6      	str	r6, [r0, #12]
 8009aa2:	9b04      	ldr	r3, [sp, #16]
 8009aa4:	69db      	ldr	r3, [r3, #28]
 8009aa6:	6819      	ldr	r1, [r3, #0]
 8009aa8:	2900      	cmp	r1, #0
 8009aaa:	d00b      	beq.n	8009ac4 <_dtoa_r+0x58>
 8009aac:	685a      	ldr	r2, [r3, #4]
 8009aae:	2301      	movs	r3, #1
 8009ab0:	4093      	lsls	r3, r2
 8009ab2:	604a      	str	r2, [r1, #4]
 8009ab4:	608b      	str	r3, [r1, #8]
 8009ab6:	9804      	ldr	r0, [sp, #16]
 8009ab8:	f000 ff32 	bl	800a920 <_Bfree>
 8009abc:	2200      	movs	r2, #0
 8009abe:	9b04      	ldr	r3, [sp, #16]
 8009ac0:	69db      	ldr	r3, [r3, #28]
 8009ac2:	601a      	str	r2, [r3, #0]
 8009ac4:	2d00      	cmp	r5, #0
 8009ac6:	da1e      	bge.n	8009b06 <_dtoa_r+0x9a>
 8009ac8:	2301      	movs	r3, #1
 8009aca:	603b      	str	r3, [r7, #0]
 8009acc:	006b      	lsls	r3, r5, #1
 8009ace:	085b      	lsrs	r3, r3, #1
 8009ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8009ad2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009ad4:	4bb7      	ldr	r3, [pc, #732]	; (8009db4 <_dtoa_r+0x348>)
 8009ad6:	4ab7      	ldr	r2, [pc, #732]	; (8009db4 <_dtoa_r+0x348>)
 8009ad8:	403b      	ands	r3, r7
 8009ada:	4293      	cmp	r3, r2
 8009adc:	d116      	bne.n	8009b0c <_dtoa_r+0xa0>
 8009ade:	4bb6      	ldr	r3, [pc, #728]	; (8009db8 <_dtoa_r+0x34c>)
 8009ae0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	033b      	lsls	r3, r7, #12
 8009ae6:	0b1b      	lsrs	r3, r3, #12
 8009ae8:	4323      	orrs	r3, r4
 8009aea:	d101      	bne.n	8009af0 <_dtoa_r+0x84>
 8009aec:	f000 fdb5 	bl	800a65a <_dtoa_r+0xbee>
 8009af0:	4bb2      	ldr	r3, [pc, #712]	; (8009dbc <_dtoa_r+0x350>)
 8009af2:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009af4:	9306      	str	r3, [sp, #24]
 8009af6:	2a00      	cmp	r2, #0
 8009af8:	d002      	beq.n	8009b00 <_dtoa_r+0x94>
 8009afa:	4bb1      	ldr	r3, [pc, #708]	; (8009dc0 <_dtoa_r+0x354>)
 8009afc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8009afe:	6013      	str	r3, [r2, #0]
 8009b00:	9806      	ldr	r0, [sp, #24]
 8009b02:	b01d      	add	sp, #116	; 0x74
 8009b04:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b06:	2300      	movs	r3, #0
 8009b08:	603b      	str	r3, [r7, #0]
 8009b0a:	e7e2      	b.n	8009ad2 <_dtoa_r+0x66>
 8009b0c:	9a08      	ldr	r2, [sp, #32]
 8009b0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b10:	9210      	str	r2, [sp, #64]	; 0x40
 8009b12:	9311      	str	r3, [sp, #68]	; 0x44
 8009b14:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b18:	2200      	movs	r2, #0
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	f7f6 fc92 	bl	8000444 <__aeabi_dcmpeq>
 8009b20:	1e06      	subs	r6, r0, #0
 8009b22:	d009      	beq.n	8009b38 <_dtoa_r+0xcc>
 8009b24:	2301      	movs	r3, #1
 8009b26:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8009b28:	6013      	str	r3, [r2, #0]
 8009b2a:	4ba6      	ldr	r3, [pc, #664]	; (8009dc4 <_dtoa_r+0x358>)
 8009b2c:	9306      	str	r3, [sp, #24]
 8009b2e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d0e5      	beq.n	8009b00 <_dtoa_r+0x94>
 8009b34:	4ba4      	ldr	r3, [pc, #656]	; (8009dc8 <_dtoa_r+0x35c>)
 8009b36:	e7e1      	b.n	8009afc <_dtoa_r+0x90>
 8009b38:	ab1a      	add	r3, sp, #104	; 0x68
 8009b3a:	9301      	str	r3, [sp, #4]
 8009b3c:	ab1b      	add	r3, sp, #108	; 0x6c
 8009b3e:	9300      	str	r3, [sp, #0]
 8009b40:	9804      	ldr	r0, [sp, #16]
 8009b42:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8009b44:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b46:	f001 fa95 	bl	800b074 <__d2b>
 8009b4a:	007a      	lsls	r2, r7, #1
 8009b4c:	9005      	str	r0, [sp, #20]
 8009b4e:	0d52      	lsrs	r2, r2, #21
 8009b50:	d100      	bne.n	8009b54 <_dtoa_r+0xe8>
 8009b52:	e07b      	b.n	8009c4c <_dtoa_r+0x1e0>
 8009b54:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009b56:	9617      	str	r6, [sp, #92]	; 0x5c
 8009b58:	0319      	lsls	r1, r3, #12
 8009b5a:	4b9c      	ldr	r3, [pc, #624]	; (8009dcc <_dtoa_r+0x360>)
 8009b5c:	0b09      	lsrs	r1, r1, #12
 8009b5e:	430b      	orrs	r3, r1
 8009b60:	499b      	ldr	r1, [pc, #620]	; (8009dd0 <_dtoa_r+0x364>)
 8009b62:	1857      	adds	r7, r2, r1
 8009b64:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009b66:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009b68:	0019      	movs	r1, r3
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	4b99      	ldr	r3, [pc, #612]	; (8009dd4 <_dtoa_r+0x368>)
 8009b6e:	f7f8 f9dd 	bl	8001f2c <__aeabi_dsub>
 8009b72:	4a99      	ldr	r2, [pc, #612]	; (8009dd8 <_dtoa_r+0x36c>)
 8009b74:	4b99      	ldr	r3, [pc, #612]	; (8009ddc <_dtoa_r+0x370>)
 8009b76:	f7f7 ff17 	bl	80019a8 <__aeabi_dmul>
 8009b7a:	4a99      	ldr	r2, [pc, #612]	; (8009de0 <_dtoa_r+0x374>)
 8009b7c:	4b99      	ldr	r3, [pc, #612]	; (8009de4 <_dtoa_r+0x378>)
 8009b7e:	f7f6 ffb9 	bl	8000af4 <__aeabi_dadd>
 8009b82:	0004      	movs	r4, r0
 8009b84:	0038      	movs	r0, r7
 8009b86:	000d      	movs	r5, r1
 8009b88:	f7f8 fda6 	bl	80026d8 <__aeabi_i2d>
 8009b8c:	4a96      	ldr	r2, [pc, #600]	; (8009de8 <_dtoa_r+0x37c>)
 8009b8e:	4b97      	ldr	r3, [pc, #604]	; (8009dec <_dtoa_r+0x380>)
 8009b90:	f7f7 ff0a 	bl	80019a8 <__aeabi_dmul>
 8009b94:	0002      	movs	r2, r0
 8009b96:	000b      	movs	r3, r1
 8009b98:	0020      	movs	r0, r4
 8009b9a:	0029      	movs	r1, r5
 8009b9c:	f7f6 ffaa 	bl	8000af4 <__aeabi_dadd>
 8009ba0:	0004      	movs	r4, r0
 8009ba2:	000d      	movs	r5, r1
 8009ba4:	f7f8 fd62 	bl	800266c <__aeabi_d2iz>
 8009ba8:	2200      	movs	r2, #0
 8009baa:	9003      	str	r0, [sp, #12]
 8009bac:	2300      	movs	r3, #0
 8009bae:	0020      	movs	r0, r4
 8009bb0:	0029      	movs	r1, r5
 8009bb2:	f7f6 fc4d 	bl	8000450 <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d00b      	beq.n	8009bd2 <_dtoa_r+0x166>
 8009bba:	9803      	ldr	r0, [sp, #12]
 8009bbc:	f7f8 fd8c 	bl	80026d8 <__aeabi_i2d>
 8009bc0:	002b      	movs	r3, r5
 8009bc2:	0022      	movs	r2, r4
 8009bc4:	f7f6 fc3e 	bl	8000444 <__aeabi_dcmpeq>
 8009bc8:	4243      	negs	r3, r0
 8009bca:	4158      	adcs	r0, r3
 8009bcc:	9b03      	ldr	r3, [sp, #12]
 8009bce:	1a1b      	subs	r3, r3, r0
 8009bd0:	9303      	str	r3, [sp, #12]
 8009bd2:	2301      	movs	r3, #1
 8009bd4:	9316      	str	r3, [sp, #88]	; 0x58
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	2b16      	cmp	r3, #22
 8009bda:	d810      	bhi.n	8009bfe <_dtoa_r+0x192>
 8009bdc:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009bde:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009be0:	9a03      	ldr	r2, [sp, #12]
 8009be2:	4b83      	ldr	r3, [pc, #524]	; (8009df0 <_dtoa_r+0x384>)
 8009be4:	00d2      	lsls	r2, r2, #3
 8009be6:	189b      	adds	r3, r3, r2
 8009be8:	681a      	ldr	r2, [r3, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f7f6 fc30 	bl	8000450 <__aeabi_dcmplt>
 8009bf0:	2800      	cmp	r0, #0
 8009bf2:	d047      	beq.n	8009c84 <_dtoa_r+0x218>
 8009bf4:	9b03      	ldr	r3, [sp, #12]
 8009bf6:	3b01      	subs	r3, #1
 8009bf8:	9303      	str	r3, [sp, #12]
 8009bfa:	2300      	movs	r3, #0
 8009bfc:	9316      	str	r3, [sp, #88]	; 0x58
 8009bfe:	2200      	movs	r2, #0
 8009c00:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8009c02:	920a      	str	r2, [sp, #40]	; 0x28
 8009c04:	1bdb      	subs	r3, r3, r7
 8009c06:	1e5a      	subs	r2, r3, #1
 8009c08:	d53e      	bpl.n	8009c88 <_dtoa_r+0x21c>
 8009c0a:	2201      	movs	r2, #1
 8009c0c:	1ad3      	subs	r3, r2, r3
 8009c0e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c10:	2300      	movs	r3, #0
 8009c12:	930c      	str	r3, [sp, #48]	; 0x30
 8009c14:	9b03      	ldr	r3, [sp, #12]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	db38      	blt.n	8009c8c <_dtoa_r+0x220>
 8009c1a:	9a03      	ldr	r2, [sp, #12]
 8009c1c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009c1e:	4694      	mov	ip, r2
 8009c20:	4463      	add	r3, ip
 8009c22:	930c      	str	r3, [sp, #48]	; 0x30
 8009c24:	2300      	movs	r3, #0
 8009c26:	9213      	str	r2, [sp, #76]	; 0x4c
 8009c28:	930d      	str	r3, [sp, #52]	; 0x34
 8009c2a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c2c:	2401      	movs	r4, #1
 8009c2e:	2b09      	cmp	r3, #9
 8009c30:	d867      	bhi.n	8009d02 <_dtoa_r+0x296>
 8009c32:	2b05      	cmp	r3, #5
 8009c34:	dd02      	ble.n	8009c3c <_dtoa_r+0x1d0>
 8009c36:	2400      	movs	r4, #0
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	9322      	str	r3, [sp, #136]	; 0x88
 8009c3c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8009c3e:	1e98      	subs	r0, r3, #2
 8009c40:	2803      	cmp	r0, #3
 8009c42:	d867      	bhi.n	8009d14 <_dtoa_r+0x2a8>
 8009c44:	f7f6 fa64 	bl	8000110 <__gnu_thumb1_case_uqi>
 8009c48:	5b383a2b 	.word	0x5b383a2b
 8009c4c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009c4e:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 8009c50:	18f6      	adds	r6, r6, r3
 8009c52:	4b68      	ldr	r3, [pc, #416]	; (8009df4 <_dtoa_r+0x388>)
 8009c54:	18f2      	adds	r2, r6, r3
 8009c56:	2a20      	cmp	r2, #32
 8009c58:	dd0f      	ble.n	8009c7a <_dtoa_r+0x20e>
 8009c5a:	2340      	movs	r3, #64	; 0x40
 8009c5c:	1a9b      	subs	r3, r3, r2
 8009c5e:	409f      	lsls	r7, r3
 8009c60:	4b65      	ldr	r3, [pc, #404]	; (8009df8 <_dtoa_r+0x38c>)
 8009c62:	0038      	movs	r0, r7
 8009c64:	18f3      	adds	r3, r6, r3
 8009c66:	40dc      	lsrs	r4, r3
 8009c68:	4320      	orrs	r0, r4
 8009c6a:	f7f8 fd65 	bl	8002738 <__aeabi_ui2d>
 8009c6e:	2201      	movs	r2, #1
 8009c70:	4b62      	ldr	r3, [pc, #392]	; (8009dfc <_dtoa_r+0x390>)
 8009c72:	1e77      	subs	r7, r6, #1
 8009c74:	18cb      	adds	r3, r1, r3
 8009c76:	9217      	str	r2, [sp, #92]	; 0x5c
 8009c78:	e776      	b.n	8009b68 <_dtoa_r+0xfc>
 8009c7a:	2320      	movs	r3, #32
 8009c7c:	0020      	movs	r0, r4
 8009c7e:	1a9b      	subs	r3, r3, r2
 8009c80:	4098      	lsls	r0, r3
 8009c82:	e7f2      	b.n	8009c6a <_dtoa_r+0x1fe>
 8009c84:	9016      	str	r0, [sp, #88]	; 0x58
 8009c86:	e7ba      	b.n	8009bfe <_dtoa_r+0x192>
 8009c88:	920c      	str	r2, [sp, #48]	; 0x30
 8009c8a:	e7c3      	b.n	8009c14 <_dtoa_r+0x1a8>
 8009c8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c8e:	9a03      	ldr	r2, [sp, #12]
 8009c90:	1a9b      	subs	r3, r3, r2
 8009c92:	930a      	str	r3, [sp, #40]	; 0x28
 8009c94:	4253      	negs	r3, r2
 8009c96:	930d      	str	r3, [sp, #52]	; 0x34
 8009c98:	2300      	movs	r3, #0
 8009c9a:	9313      	str	r3, [sp, #76]	; 0x4c
 8009c9c:	e7c5      	b.n	8009c2a <_dtoa_r+0x1be>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ca2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009ca4:	930b      	str	r3, [sp, #44]	; 0x2c
 8009ca6:	9307      	str	r3, [sp, #28]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	dc13      	bgt.n	8009cd4 <_dtoa_r+0x268>
 8009cac:	2301      	movs	r3, #1
 8009cae:	001a      	movs	r2, r3
 8009cb0:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cb2:	9307      	str	r3, [sp, #28]
 8009cb4:	9223      	str	r2, [sp, #140]	; 0x8c
 8009cb6:	e00d      	b.n	8009cd4 <_dtoa_r+0x268>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	e7f1      	b.n	8009ca0 <_dtoa_r+0x234>
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8009cc0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009cc2:	4694      	mov	ip, r2
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	4463      	add	r3, ip
 8009cc8:	930b      	str	r3, [sp, #44]	; 0x2c
 8009cca:	3301      	adds	r3, #1
 8009ccc:	9307      	str	r3, [sp, #28]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	dc00      	bgt.n	8009cd4 <_dtoa_r+0x268>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	9a04      	ldr	r2, [sp, #16]
 8009cd6:	2100      	movs	r1, #0
 8009cd8:	69d0      	ldr	r0, [r2, #28]
 8009cda:	2204      	movs	r2, #4
 8009cdc:	0015      	movs	r5, r2
 8009cde:	3514      	adds	r5, #20
 8009ce0:	429d      	cmp	r5, r3
 8009ce2:	d91b      	bls.n	8009d1c <_dtoa_r+0x2b0>
 8009ce4:	6041      	str	r1, [r0, #4]
 8009ce6:	9804      	ldr	r0, [sp, #16]
 8009ce8:	f000 fdd6 	bl	800a898 <_Balloc>
 8009cec:	9006      	str	r0, [sp, #24]
 8009cee:	2800      	cmp	r0, #0
 8009cf0:	d117      	bne.n	8009d22 <_dtoa_r+0x2b6>
 8009cf2:	21b0      	movs	r1, #176	; 0xb0
 8009cf4:	4b42      	ldr	r3, [pc, #264]	; (8009e00 <_dtoa_r+0x394>)
 8009cf6:	482e      	ldr	r0, [pc, #184]	; (8009db0 <_dtoa_r+0x344>)
 8009cf8:	9a06      	ldr	r2, [sp, #24]
 8009cfa:	31ff      	adds	r1, #255	; 0xff
 8009cfc:	e6cb      	b.n	8009a96 <_dtoa_r+0x2a>
 8009cfe:	2301      	movs	r3, #1
 8009d00:	e7dd      	b.n	8009cbe <_dtoa_r+0x252>
 8009d02:	2300      	movs	r3, #0
 8009d04:	940f      	str	r4, [sp, #60]	; 0x3c
 8009d06:	9322      	str	r3, [sp, #136]	; 0x88
 8009d08:	3b01      	subs	r3, #1
 8009d0a:	930b      	str	r3, [sp, #44]	; 0x2c
 8009d0c:	9307      	str	r3, [sp, #28]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	3313      	adds	r3, #19
 8009d12:	e7cf      	b.n	8009cb4 <_dtoa_r+0x248>
 8009d14:	2301      	movs	r3, #1
 8009d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8009d18:	3b02      	subs	r3, #2
 8009d1a:	e7f6      	b.n	8009d0a <_dtoa_r+0x29e>
 8009d1c:	3101      	adds	r1, #1
 8009d1e:	0052      	lsls	r2, r2, #1
 8009d20:	e7dc      	b.n	8009cdc <_dtoa_r+0x270>
 8009d22:	9b04      	ldr	r3, [sp, #16]
 8009d24:	9a06      	ldr	r2, [sp, #24]
 8009d26:	69db      	ldr	r3, [r3, #28]
 8009d28:	601a      	str	r2, [r3, #0]
 8009d2a:	9b07      	ldr	r3, [sp, #28]
 8009d2c:	2b0e      	cmp	r3, #14
 8009d2e:	d900      	bls.n	8009d32 <_dtoa_r+0x2c6>
 8009d30:	e0e5      	b.n	8009efe <_dtoa_r+0x492>
 8009d32:	2c00      	cmp	r4, #0
 8009d34:	d100      	bne.n	8009d38 <_dtoa_r+0x2cc>
 8009d36:	e0e2      	b.n	8009efe <_dtoa_r+0x492>
 8009d38:	9b03      	ldr	r3, [sp, #12]
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	dd64      	ble.n	8009e08 <_dtoa_r+0x39c>
 8009d3e:	210f      	movs	r1, #15
 8009d40:	9a03      	ldr	r2, [sp, #12]
 8009d42:	4b2b      	ldr	r3, [pc, #172]	; (8009df0 <_dtoa_r+0x384>)
 8009d44:	400a      	ands	r2, r1
 8009d46:	00d2      	lsls	r2, r2, #3
 8009d48:	189b      	adds	r3, r3, r2
 8009d4a:	681e      	ldr	r6, [r3, #0]
 8009d4c:	685f      	ldr	r7, [r3, #4]
 8009d4e:	9b03      	ldr	r3, [sp, #12]
 8009d50:	2402      	movs	r4, #2
 8009d52:	111d      	asrs	r5, r3, #4
 8009d54:	05db      	lsls	r3, r3, #23
 8009d56:	d50a      	bpl.n	8009d6e <_dtoa_r+0x302>
 8009d58:	4b2a      	ldr	r3, [pc, #168]	; (8009e04 <_dtoa_r+0x398>)
 8009d5a:	400d      	ands	r5, r1
 8009d5c:	6a1a      	ldr	r2, [r3, #32]
 8009d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d60:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009d62:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009d64:	f7f7 fa26 	bl	80011b4 <__aeabi_ddiv>
 8009d68:	9008      	str	r0, [sp, #32]
 8009d6a:	9109      	str	r1, [sp, #36]	; 0x24
 8009d6c:	3401      	adds	r4, #1
 8009d6e:	4b25      	ldr	r3, [pc, #148]	; (8009e04 <_dtoa_r+0x398>)
 8009d70:	930e      	str	r3, [sp, #56]	; 0x38
 8009d72:	2d00      	cmp	r5, #0
 8009d74:	d108      	bne.n	8009d88 <_dtoa_r+0x31c>
 8009d76:	9808      	ldr	r0, [sp, #32]
 8009d78:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009d7a:	0032      	movs	r2, r6
 8009d7c:	003b      	movs	r3, r7
 8009d7e:	f7f7 fa19 	bl	80011b4 <__aeabi_ddiv>
 8009d82:	9008      	str	r0, [sp, #32]
 8009d84:	9109      	str	r1, [sp, #36]	; 0x24
 8009d86:	e05a      	b.n	8009e3e <_dtoa_r+0x3d2>
 8009d88:	2301      	movs	r3, #1
 8009d8a:	421d      	tst	r5, r3
 8009d8c:	d009      	beq.n	8009da2 <_dtoa_r+0x336>
 8009d8e:	18e4      	adds	r4, r4, r3
 8009d90:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009d92:	0030      	movs	r0, r6
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	685b      	ldr	r3, [r3, #4]
 8009d98:	0039      	movs	r1, r7
 8009d9a:	f7f7 fe05 	bl	80019a8 <__aeabi_dmul>
 8009d9e:	0006      	movs	r6, r0
 8009da0:	000f      	movs	r7, r1
 8009da2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009da4:	106d      	asrs	r5, r5, #1
 8009da6:	3308      	adds	r3, #8
 8009da8:	e7e2      	b.n	8009d70 <_dtoa_r+0x304>
 8009daa:	46c0      	nop			; (mov r8, r8)
 8009dac:	0800d39e 	.word	0x0800d39e
 8009db0:	0800d3b5 	.word	0x0800d3b5
 8009db4:	7ff00000 	.word	0x7ff00000
 8009db8:	0000270f 	.word	0x0000270f
 8009dbc:	0800d39a 	.word	0x0800d39a
 8009dc0:	0800d39d 	.word	0x0800d39d
 8009dc4:	0800d368 	.word	0x0800d368
 8009dc8:	0800d369 	.word	0x0800d369
 8009dcc:	3ff00000 	.word	0x3ff00000
 8009dd0:	fffffc01 	.word	0xfffffc01
 8009dd4:	3ff80000 	.word	0x3ff80000
 8009dd8:	636f4361 	.word	0x636f4361
 8009ddc:	3fd287a7 	.word	0x3fd287a7
 8009de0:	8b60c8b3 	.word	0x8b60c8b3
 8009de4:	3fc68a28 	.word	0x3fc68a28
 8009de8:	509f79fb 	.word	0x509f79fb
 8009dec:	3fd34413 	.word	0x3fd34413
 8009df0:	0800d4a0 	.word	0x0800d4a0
 8009df4:	00000432 	.word	0x00000432
 8009df8:	00000412 	.word	0x00000412
 8009dfc:	fe100000 	.word	0xfe100000
 8009e00:	0800d40d 	.word	0x0800d40d
 8009e04:	0800d478 	.word	0x0800d478
 8009e08:	9b03      	ldr	r3, [sp, #12]
 8009e0a:	2402      	movs	r4, #2
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d016      	beq.n	8009e3e <_dtoa_r+0x3d2>
 8009e10:	9810      	ldr	r0, [sp, #64]	; 0x40
 8009e12:	9911      	ldr	r1, [sp, #68]	; 0x44
 8009e14:	220f      	movs	r2, #15
 8009e16:	425d      	negs	r5, r3
 8009e18:	402a      	ands	r2, r5
 8009e1a:	4bdd      	ldr	r3, [pc, #884]	; (800a190 <_dtoa_r+0x724>)
 8009e1c:	00d2      	lsls	r2, r2, #3
 8009e1e:	189b      	adds	r3, r3, r2
 8009e20:	681a      	ldr	r2, [r3, #0]
 8009e22:	685b      	ldr	r3, [r3, #4]
 8009e24:	f7f7 fdc0 	bl	80019a8 <__aeabi_dmul>
 8009e28:	2701      	movs	r7, #1
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	9008      	str	r0, [sp, #32]
 8009e2e:	9109      	str	r1, [sp, #36]	; 0x24
 8009e30:	4ed8      	ldr	r6, [pc, #864]	; (800a194 <_dtoa_r+0x728>)
 8009e32:	112d      	asrs	r5, r5, #4
 8009e34:	2d00      	cmp	r5, #0
 8009e36:	d000      	beq.n	8009e3a <_dtoa_r+0x3ce>
 8009e38:	e091      	b.n	8009f5e <_dtoa_r+0x4f2>
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d1a1      	bne.n	8009d82 <_dtoa_r+0x316>
 8009e3e:	9e08      	ldr	r6, [sp, #32]
 8009e40:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d100      	bne.n	8009e4a <_dtoa_r+0x3de>
 8009e48:	e094      	b.n	8009f74 <_dtoa_r+0x508>
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	0030      	movs	r0, r6
 8009e4e:	0039      	movs	r1, r7
 8009e50:	4bd1      	ldr	r3, [pc, #836]	; (800a198 <_dtoa_r+0x72c>)
 8009e52:	f7f6 fafd 	bl	8000450 <__aeabi_dcmplt>
 8009e56:	2800      	cmp	r0, #0
 8009e58:	d100      	bne.n	8009e5c <_dtoa_r+0x3f0>
 8009e5a:	e08b      	b.n	8009f74 <_dtoa_r+0x508>
 8009e5c:	9b07      	ldr	r3, [sp, #28]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d100      	bne.n	8009e64 <_dtoa_r+0x3f8>
 8009e62:	e087      	b.n	8009f74 <_dtoa_r+0x508>
 8009e64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	dd45      	ble.n	8009ef6 <_dtoa_r+0x48a>
 8009e6a:	9b03      	ldr	r3, [sp, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	3b01      	subs	r3, #1
 8009e70:	930e      	str	r3, [sp, #56]	; 0x38
 8009e72:	0030      	movs	r0, r6
 8009e74:	4bc9      	ldr	r3, [pc, #804]	; (800a19c <_dtoa_r+0x730>)
 8009e76:	0039      	movs	r1, r7
 8009e78:	f7f7 fd96 	bl	80019a8 <__aeabi_dmul>
 8009e7c:	9008      	str	r0, [sp, #32]
 8009e7e:	9109      	str	r1, [sp, #36]	; 0x24
 8009e80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e82:	3401      	adds	r4, #1
 8009e84:	0020      	movs	r0, r4
 8009e86:	9e08      	ldr	r6, [sp, #32]
 8009e88:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009e8a:	9312      	str	r3, [sp, #72]	; 0x48
 8009e8c:	f7f8 fc24 	bl	80026d8 <__aeabi_i2d>
 8009e90:	0032      	movs	r2, r6
 8009e92:	003b      	movs	r3, r7
 8009e94:	f7f7 fd88 	bl	80019a8 <__aeabi_dmul>
 8009e98:	2200      	movs	r2, #0
 8009e9a:	4bc1      	ldr	r3, [pc, #772]	; (800a1a0 <_dtoa_r+0x734>)
 8009e9c:	f7f6 fe2a 	bl	8000af4 <__aeabi_dadd>
 8009ea0:	4ac0      	ldr	r2, [pc, #768]	; (800a1a4 <_dtoa_r+0x738>)
 8009ea2:	9014      	str	r0, [sp, #80]	; 0x50
 8009ea4:	9115      	str	r1, [sp, #84]	; 0x54
 8009ea6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ea8:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8009eaa:	4694      	mov	ip, r2
 8009eac:	9308      	str	r3, [sp, #32]
 8009eae:	9409      	str	r4, [sp, #36]	; 0x24
 8009eb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009eb2:	4463      	add	r3, ip
 8009eb4:	9318      	str	r3, [sp, #96]	; 0x60
 8009eb6:	9309      	str	r3, [sp, #36]	; 0x24
 8009eb8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d15e      	bne.n	8009f7c <_dtoa_r+0x510>
 8009ebe:	2200      	movs	r2, #0
 8009ec0:	4bb9      	ldr	r3, [pc, #740]	; (800a1a8 <_dtoa_r+0x73c>)
 8009ec2:	0030      	movs	r0, r6
 8009ec4:	0039      	movs	r1, r7
 8009ec6:	f7f8 f831 	bl	8001f2c <__aeabi_dsub>
 8009eca:	9a08      	ldr	r2, [sp, #32]
 8009ecc:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8009ece:	0004      	movs	r4, r0
 8009ed0:	000d      	movs	r5, r1
 8009ed2:	f7f6 fad1 	bl	8000478 <__aeabi_dcmpgt>
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	d000      	beq.n	8009edc <_dtoa_r+0x470>
 8009eda:	e2b3      	b.n	800a444 <_dtoa_r+0x9d8>
 8009edc:	48b3      	ldr	r0, [pc, #716]	; (800a1ac <_dtoa_r+0x740>)
 8009ede:	9915      	ldr	r1, [sp, #84]	; 0x54
 8009ee0:	4684      	mov	ip, r0
 8009ee2:	4461      	add	r1, ip
 8009ee4:	000b      	movs	r3, r1
 8009ee6:	0020      	movs	r0, r4
 8009ee8:	0029      	movs	r1, r5
 8009eea:	9a08      	ldr	r2, [sp, #32]
 8009eec:	f7f6 fab0 	bl	8000450 <__aeabi_dcmplt>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d000      	beq.n	8009ef6 <_dtoa_r+0x48a>
 8009ef4:	e2a3      	b.n	800a43e <_dtoa_r+0x9d2>
 8009ef6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009ef8:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8009efa:	9308      	str	r3, [sp, #32]
 8009efc:	9409      	str	r4, [sp, #36]	; 0x24
 8009efe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	da00      	bge.n	8009f06 <_dtoa_r+0x49a>
 8009f04:	e179      	b.n	800a1fa <_dtoa_r+0x78e>
 8009f06:	9a03      	ldr	r2, [sp, #12]
 8009f08:	2a0e      	cmp	r2, #14
 8009f0a:	dd00      	ble.n	8009f0e <_dtoa_r+0x4a2>
 8009f0c:	e175      	b.n	800a1fa <_dtoa_r+0x78e>
 8009f0e:	4ba0      	ldr	r3, [pc, #640]	; (800a190 <_dtoa_r+0x724>)
 8009f10:	00d2      	lsls	r2, r2, #3
 8009f12:	189b      	adds	r3, r3, r2
 8009f14:	681e      	ldr	r6, [r3, #0]
 8009f16:	685f      	ldr	r7, [r3, #4]
 8009f18:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	db00      	blt.n	8009f20 <_dtoa_r+0x4b4>
 8009f1e:	e0e5      	b.n	800a0ec <_dtoa_r+0x680>
 8009f20:	9b07      	ldr	r3, [sp, #28]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	dd00      	ble.n	8009f28 <_dtoa_r+0x4bc>
 8009f26:	e0e1      	b.n	800a0ec <_dtoa_r+0x680>
 8009f28:	d000      	beq.n	8009f2c <_dtoa_r+0x4c0>
 8009f2a:	e288      	b.n	800a43e <_dtoa_r+0x9d2>
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	0030      	movs	r0, r6
 8009f30:	0039      	movs	r1, r7
 8009f32:	4b9d      	ldr	r3, [pc, #628]	; (800a1a8 <_dtoa_r+0x73c>)
 8009f34:	f7f7 fd38 	bl	80019a8 <__aeabi_dmul>
 8009f38:	9a08      	ldr	r2, [sp, #32]
 8009f3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f3c:	f7f6 faa6 	bl	800048c <__aeabi_dcmpge>
 8009f40:	9e07      	ldr	r6, [sp, #28]
 8009f42:	0037      	movs	r7, r6
 8009f44:	2800      	cmp	r0, #0
 8009f46:	d000      	beq.n	8009f4a <_dtoa_r+0x4de>
 8009f48:	e25f      	b.n	800a40a <_dtoa_r+0x99e>
 8009f4a:	9b06      	ldr	r3, [sp, #24]
 8009f4c:	9a06      	ldr	r2, [sp, #24]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	9308      	str	r3, [sp, #32]
 8009f52:	2331      	movs	r3, #49	; 0x31
 8009f54:	7013      	strb	r3, [r2, #0]
 8009f56:	9b03      	ldr	r3, [sp, #12]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	9303      	str	r3, [sp, #12]
 8009f5c:	e25a      	b.n	800a414 <_dtoa_r+0x9a8>
 8009f5e:	423d      	tst	r5, r7
 8009f60:	d005      	beq.n	8009f6e <_dtoa_r+0x502>
 8009f62:	6832      	ldr	r2, [r6, #0]
 8009f64:	6873      	ldr	r3, [r6, #4]
 8009f66:	f7f7 fd1f 	bl	80019a8 <__aeabi_dmul>
 8009f6a:	003b      	movs	r3, r7
 8009f6c:	3401      	adds	r4, #1
 8009f6e:	106d      	asrs	r5, r5, #1
 8009f70:	3608      	adds	r6, #8
 8009f72:	e75f      	b.n	8009e34 <_dtoa_r+0x3c8>
 8009f74:	9b03      	ldr	r3, [sp, #12]
 8009f76:	930e      	str	r3, [sp, #56]	; 0x38
 8009f78:	9b07      	ldr	r3, [sp, #28]
 8009f7a:	e783      	b.n	8009e84 <_dtoa_r+0x418>
 8009f7c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009f7e:	4b84      	ldr	r3, [pc, #528]	; (800a190 <_dtoa_r+0x724>)
 8009f80:	3a01      	subs	r2, #1
 8009f82:	00d2      	lsls	r2, r2, #3
 8009f84:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8009f86:	189b      	adds	r3, r3, r2
 8009f88:	9c08      	ldr	r4, [sp, #32]
 8009f8a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8009f8c:	681a      	ldr	r2, [r3, #0]
 8009f8e:	685b      	ldr	r3, [r3, #4]
 8009f90:	2900      	cmp	r1, #0
 8009f92:	d051      	beq.n	800a038 <_dtoa_r+0x5cc>
 8009f94:	2000      	movs	r0, #0
 8009f96:	4986      	ldr	r1, [pc, #536]	; (800a1b0 <_dtoa_r+0x744>)
 8009f98:	f7f7 f90c 	bl	80011b4 <__aeabi_ddiv>
 8009f9c:	0022      	movs	r2, r4
 8009f9e:	002b      	movs	r3, r5
 8009fa0:	f7f7 ffc4 	bl	8001f2c <__aeabi_dsub>
 8009fa4:	9a06      	ldr	r2, [sp, #24]
 8009fa6:	0004      	movs	r4, r0
 8009fa8:	4694      	mov	ip, r2
 8009faa:	000d      	movs	r5, r1
 8009fac:	9b06      	ldr	r3, [sp, #24]
 8009fae:	9314      	str	r3, [sp, #80]	; 0x50
 8009fb0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fb2:	4463      	add	r3, ip
 8009fb4:	9318      	str	r3, [sp, #96]	; 0x60
 8009fb6:	0039      	movs	r1, r7
 8009fb8:	0030      	movs	r0, r6
 8009fba:	f7f8 fb57 	bl	800266c <__aeabi_d2iz>
 8009fbe:	9012      	str	r0, [sp, #72]	; 0x48
 8009fc0:	f7f8 fb8a 	bl	80026d8 <__aeabi_i2d>
 8009fc4:	0002      	movs	r2, r0
 8009fc6:	000b      	movs	r3, r1
 8009fc8:	0030      	movs	r0, r6
 8009fca:	0039      	movs	r1, r7
 8009fcc:	f7f7 ffae 	bl	8001f2c <__aeabi_dsub>
 8009fd0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009fd2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	9308      	str	r3, [sp, #32]
 8009fd8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8009fda:	0006      	movs	r6, r0
 8009fdc:	3330      	adds	r3, #48	; 0x30
 8009fde:	7013      	strb	r3, [r2, #0]
 8009fe0:	0022      	movs	r2, r4
 8009fe2:	002b      	movs	r3, r5
 8009fe4:	000f      	movs	r7, r1
 8009fe6:	f7f6 fa33 	bl	8000450 <__aeabi_dcmplt>
 8009fea:	2800      	cmp	r0, #0
 8009fec:	d174      	bne.n	800a0d8 <_dtoa_r+0x66c>
 8009fee:	0032      	movs	r2, r6
 8009ff0:	003b      	movs	r3, r7
 8009ff2:	2000      	movs	r0, #0
 8009ff4:	4968      	ldr	r1, [pc, #416]	; (800a198 <_dtoa_r+0x72c>)
 8009ff6:	f7f7 ff99 	bl	8001f2c <__aeabi_dsub>
 8009ffa:	0022      	movs	r2, r4
 8009ffc:	002b      	movs	r3, r5
 8009ffe:	f7f6 fa27 	bl	8000450 <__aeabi_dcmplt>
 800a002:	2800      	cmp	r0, #0
 800a004:	d000      	beq.n	800a008 <_dtoa_r+0x59c>
 800a006:	e0d7      	b.n	800a1b8 <_dtoa_r+0x74c>
 800a008:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800a00a:	9a08      	ldr	r2, [sp, #32]
 800a00c:	4293      	cmp	r3, r2
 800a00e:	d100      	bne.n	800a012 <_dtoa_r+0x5a6>
 800a010:	e771      	b.n	8009ef6 <_dtoa_r+0x48a>
 800a012:	2200      	movs	r2, #0
 800a014:	0020      	movs	r0, r4
 800a016:	0029      	movs	r1, r5
 800a018:	4b60      	ldr	r3, [pc, #384]	; (800a19c <_dtoa_r+0x730>)
 800a01a:	f7f7 fcc5 	bl	80019a8 <__aeabi_dmul>
 800a01e:	4b5f      	ldr	r3, [pc, #380]	; (800a19c <_dtoa_r+0x730>)
 800a020:	0004      	movs	r4, r0
 800a022:	000d      	movs	r5, r1
 800a024:	0030      	movs	r0, r6
 800a026:	0039      	movs	r1, r7
 800a028:	2200      	movs	r2, #0
 800a02a:	f7f7 fcbd 	bl	80019a8 <__aeabi_dmul>
 800a02e:	9b08      	ldr	r3, [sp, #32]
 800a030:	0006      	movs	r6, r0
 800a032:	000f      	movs	r7, r1
 800a034:	9314      	str	r3, [sp, #80]	; 0x50
 800a036:	e7be      	b.n	8009fb6 <_dtoa_r+0x54a>
 800a038:	0020      	movs	r0, r4
 800a03a:	0029      	movs	r1, r5
 800a03c:	f7f7 fcb4 	bl	80019a8 <__aeabi_dmul>
 800a040:	9a06      	ldr	r2, [sp, #24]
 800a042:	9b06      	ldr	r3, [sp, #24]
 800a044:	4694      	mov	ip, r2
 800a046:	9308      	str	r3, [sp, #32]
 800a048:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a04a:	9014      	str	r0, [sp, #80]	; 0x50
 800a04c:	9115      	str	r1, [sp, #84]	; 0x54
 800a04e:	4463      	add	r3, ip
 800a050:	9319      	str	r3, [sp, #100]	; 0x64
 800a052:	0030      	movs	r0, r6
 800a054:	0039      	movs	r1, r7
 800a056:	f7f8 fb09 	bl	800266c <__aeabi_d2iz>
 800a05a:	9018      	str	r0, [sp, #96]	; 0x60
 800a05c:	f7f8 fb3c 	bl	80026d8 <__aeabi_i2d>
 800a060:	0002      	movs	r2, r0
 800a062:	000b      	movs	r3, r1
 800a064:	0030      	movs	r0, r6
 800a066:	0039      	movs	r1, r7
 800a068:	f7f7 ff60 	bl	8001f2c <__aeabi_dsub>
 800a06c:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800a06e:	9b08      	ldr	r3, [sp, #32]
 800a070:	3630      	adds	r6, #48	; 0x30
 800a072:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a074:	701e      	strb	r6, [r3, #0]
 800a076:	3301      	adds	r3, #1
 800a078:	0004      	movs	r4, r0
 800a07a:	000d      	movs	r5, r1
 800a07c:	9308      	str	r3, [sp, #32]
 800a07e:	4293      	cmp	r3, r2
 800a080:	d12d      	bne.n	800a0de <_dtoa_r+0x672>
 800a082:	9814      	ldr	r0, [sp, #80]	; 0x50
 800a084:	9915      	ldr	r1, [sp, #84]	; 0x54
 800a086:	9a06      	ldr	r2, [sp, #24]
 800a088:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a08a:	4694      	mov	ip, r2
 800a08c:	4463      	add	r3, ip
 800a08e:	2200      	movs	r2, #0
 800a090:	9308      	str	r3, [sp, #32]
 800a092:	4b47      	ldr	r3, [pc, #284]	; (800a1b0 <_dtoa_r+0x744>)
 800a094:	f7f6 fd2e 	bl	8000af4 <__aeabi_dadd>
 800a098:	0002      	movs	r2, r0
 800a09a:	000b      	movs	r3, r1
 800a09c:	0020      	movs	r0, r4
 800a09e:	0029      	movs	r1, r5
 800a0a0:	f7f6 f9ea 	bl	8000478 <__aeabi_dcmpgt>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	d000      	beq.n	800a0aa <_dtoa_r+0x63e>
 800a0a8:	e086      	b.n	800a1b8 <_dtoa_r+0x74c>
 800a0aa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a0ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	493f      	ldr	r1, [pc, #252]	; (800a1b0 <_dtoa_r+0x744>)
 800a0b2:	f7f7 ff3b 	bl	8001f2c <__aeabi_dsub>
 800a0b6:	0002      	movs	r2, r0
 800a0b8:	000b      	movs	r3, r1
 800a0ba:	0020      	movs	r0, r4
 800a0bc:	0029      	movs	r1, r5
 800a0be:	f7f6 f9c7 	bl	8000450 <__aeabi_dcmplt>
 800a0c2:	2800      	cmp	r0, #0
 800a0c4:	d100      	bne.n	800a0c8 <_dtoa_r+0x65c>
 800a0c6:	e716      	b.n	8009ef6 <_dtoa_r+0x48a>
 800a0c8:	9b08      	ldr	r3, [sp, #32]
 800a0ca:	001a      	movs	r2, r3
 800a0cc:	3a01      	subs	r2, #1
 800a0ce:	9208      	str	r2, [sp, #32]
 800a0d0:	7812      	ldrb	r2, [r2, #0]
 800a0d2:	2a30      	cmp	r2, #48	; 0x30
 800a0d4:	d0f8      	beq.n	800a0c8 <_dtoa_r+0x65c>
 800a0d6:	9308      	str	r3, [sp, #32]
 800a0d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a0da:	9303      	str	r3, [sp, #12]
 800a0dc:	e046      	b.n	800a16c <_dtoa_r+0x700>
 800a0de:	2200      	movs	r2, #0
 800a0e0:	4b2e      	ldr	r3, [pc, #184]	; (800a19c <_dtoa_r+0x730>)
 800a0e2:	f7f7 fc61 	bl	80019a8 <__aeabi_dmul>
 800a0e6:	0006      	movs	r6, r0
 800a0e8:	000f      	movs	r7, r1
 800a0ea:	e7b2      	b.n	800a052 <_dtoa_r+0x5e6>
 800a0ec:	9b06      	ldr	r3, [sp, #24]
 800a0ee:	9a06      	ldr	r2, [sp, #24]
 800a0f0:	930a      	str	r3, [sp, #40]	; 0x28
 800a0f2:	9b07      	ldr	r3, [sp, #28]
 800a0f4:	9c08      	ldr	r4, [sp, #32]
 800a0f6:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	189b      	adds	r3, r3, r2
 800a0fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800a0fe:	0032      	movs	r2, r6
 800a100:	003b      	movs	r3, r7
 800a102:	0020      	movs	r0, r4
 800a104:	0029      	movs	r1, r5
 800a106:	f7f7 f855 	bl	80011b4 <__aeabi_ddiv>
 800a10a:	f7f8 faaf 	bl	800266c <__aeabi_d2iz>
 800a10e:	9007      	str	r0, [sp, #28]
 800a110:	f7f8 fae2 	bl	80026d8 <__aeabi_i2d>
 800a114:	0032      	movs	r2, r6
 800a116:	003b      	movs	r3, r7
 800a118:	f7f7 fc46 	bl	80019a8 <__aeabi_dmul>
 800a11c:	0002      	movs	r2, r0
 800a11e:	000b      	movs	r3, r1
 800a120:	0020      	movs	r0, r4
 800a122:	0029      	movs	r1, r5
 800a124:	f7f7 ff02 	bl	8001f2c <__aeabi_dsub>
 800a128:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a12a:	001a      	movs	r2, r3
 800a12c:	3201      	adds	r2, #1
 800a12e:	920a      	str	r2, [sp, #40]	; 0x28
 800a130:	9208      	str	r2, [sp, #32]
 800a132:	9a07      	ldr	r2, [sp, #28]
 800a134:	3230      	adds	r2, #48	; 0x30
 800a136:	701a      	strb	r2, [r3, #0]
 800a138:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a13a:	429a      	cmp	r2, r3
 800a13c:	d14f      	bne.n	800a1de <_dtoa_r+0x772>
 800a13e:	0002      	movs	r2, r0
 800a140:	000b      	movs	r3, r1
 800a142:	f7f6 fcd7 	bl	8000af4 <__aeabi_dadd>
 800a146:	0032      	movs	r2, r6
 800a148:	003b      	movs	r3, r7
 800a14a:	0004      	movs	r4, r0
 800a14c:	000d      	movs	r5, r1
 800a14e:	f7f6 f993 	bl	8000478 <__aeabi_dcmpgt>
 800a152:	2800      	cmp	r0, #0
 800a154:	d12e      	bne.n	800a1b4 <_dtoa_r+0x748>
 800a156:	0032      	movs	r2, r6
 800a158:	003b      	movs	r3, r7
 800a15a:	0020      	movs	r0, r4
 800a15c:	0029      	movs	r1, r5
 800a15e:	f7f6 f971 	bl	8000444 <__aeabi_dcmpeq>
 800a162:	2800      	cmp	r0, #0
 800a164:	d002      	beq.n	800a16c <_dtoa_r+0x700>
 800a166:	9b07      	ldr	r3, [sp, #28]
 800a168:	07de      	lsls	r6, r3, #31
 800a16a:	d423      	bmi.n	800a1b4 <_dtoa_r+0x748>
 800a16c:	9905      	ldr	r1, [sp, #20]
 800a16e:	9804      	ldr	r0, [sp, #16]
 800a170:	f000 fbd6 	bl	800a920 <_Bfree>
 800a174:	2300      	movs	r3, #0
 800a176:	9a08      	ldr	r2, [sp, #32]
 800a178:	7013      	strb	r3, [r2, #0]
 800a17a:	9b03      	ldr	r3, [sp, #12]
 800a17c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800a17e:	3301      	adds	r3, #1
 800a180:	6013      	str	r3, [r2, #0]
 800a182:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800a184:	2b00      	cmp	r3, #0
 800a186:	d100      	bne.n	800a18a <_dtoa_r+0x71e>
 800a188:	e4ba      	b.n	8009b00 <_dtoa_r+0x94>
 800a18a:	9a08      	ldr	r2, [sp, #32]
 800a18c:	601a      	str	r2, [r3, #0]
 800a18e:	e4b7      	b.n	8009b00 <_dtoa_r+0x94>
 800a190:	0800d4a0 	.word	0x0800d4a0
 800a194:	0800d478 	.word	0x0800d478
 800a198:	3ff00000 	.word	0x3ff00000
 800a19c:	40240000 	.word	0x40240000
 800a1a0:	401c0000 	.word	0x401c0000
 800a1a4:	fcc00000 	.word	0xfcc00000
 800a1a8:	40140000 	.word	0x40140000
 800a1ac:	7cc00000 	.word	0x7cc00000
 800a1b0:	3fe00000 	.word	0x3fe00000
 800a1b4:	9b03      	ldr	r3, [sp, #12]
 800a1b6:	930e      	str	r3, [sp, #56]	; 0x38
 800a1b8:	9b08      	ldr	r3, [sp, #32]
 800a1ba:	9308      	str	r3, [sp, #32]
 800a1bc:	3b01      	subs	r3, #1
 800a1be:	781a      	ldrb	r2, [r3, #0]
 800a1c0:	2a39      	cmp	r2, #57	; 0x39
 800a1c2:	d108      	bne.n	800a1d6 <_dtoa_r+0x76a>
 800a1c4:	9a06      	ldr	r2, [sp, #24]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d1f7      	bne.n	800a1ba <_dtoa_r+0x74e>
 800a1ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a1cc:	9906      	ldr	r1, [sp, #24]
 800a1ce:	3201      	adds	r2, #1
 800a1d0:	920e      	str	r2, [sp, #56]	; 0x38
 800a1d2:	2230      	movs	r2, #48	; 0x30
 800a1d4:	700a      	strb	r2, [r1, #0]
 800a1d6:	781a      	ldrb	r2, [r3, #0]
 800a1d8:	3201      	adds	r2, #1
 800a1da:	701a      	strb	r2, [r3, #0]
 800a1dc:	e77c      	b.n	800a0d8 <_dtoa_r+0x66c>
 800a1de:	2200      	movs	r2, #0
 800a1e0:	4ba9      	ldr	r3, [pc, #676]	; (800a488 <_dtoa_r+0xa1c>)
 800a1e2:	f7f7 fbe1 	bl	80019a8 <__aeabi_dmul>
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	0004      	movs	r4, r0
 800a1ec:	000d      	movs	r5, r1
 800a1ee:	f7f6 f929 	bl	8000444 <__aeabi_dcmpeq>
 800a1f2:	2800      	cmp	r0, #0
 800a1f4:	d100      	bne.n	800a1f8 <_dtoa_r+0x78c>
 800a1f6:	e782      	b.n	800a0fe <_dtoa_r+0x692>
 800a1f8:	e7b8      	b.n	800a16c <_dtoa_r+0x700>
 800a1fa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800a1fc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a1fe:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a200:	2f00      	cmp	r7, #0
 800a202:	d012      	beq.n	800a22a <_dtoa_r+0x7be>
 800a204:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a206:	2a01      	cmp	r2, #1
 800a208:	dc6e      	bgt.n	800a2e8 <_dtoa_r+0x87c>
 800a20a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a20c:	2a00      	cmp	r2, #0
 800a20e:	d065      	beq.n	800a2dc <_dtoa_r+0x870>
 800a210:	4a9e      	ldr	r2, [pc, #632]	; (800a48c <_dtoa_r+0xa20>)
 800a212:	189b      	adds	r3, r3, r2
 800a214:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a216:	2101      	movs	r1, #1
 800a218:	18d2      	adds	r2, r2, r3
 800a21a:	920a      	str	r2, [sp, #40]	; 0x28
 800a21c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a21e:	9804      	ldr	r0, [sp, #16]
 800a220:	18d3      	adds	r3, r2, r3
 800a222:	930c      	str	r3, [sp, #48]	; 0x30
 800a224:	f000 fc78 	bl	800ab18 <__i2b>
 800a228:	0007      	movs	r7, r0
 800a22a:	2c00      	cmp	r4, #0
 800a22c:	d00e      	beq.n	800a24c <_dtoa_r+0x7e0>
 800a22e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a230:	2b00      	cmp	r3, #0
 800a232:	dd0b      	ble.n	800a24c <_dtoa_r+0x7e0>
 800a234:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a236:	0023      	movs	r3, r4
 800a238:	4294      	cmp	r4, r2
 800a23a:	dd00      	ble.n	800a23e <_dtoa_r+0x7d2>
 800a23c:	0013      	movs	r3, r2
 800a23e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a240:	1ae4      	subs	r4, r4, r3
 800a242:	1ad2      	subs	r2, r2, r3
 800a244:	920a      	str	r2, [sp, #40]	; 0x28
 800a246:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a248:	1ad3      	subs	r3, r2, r3
 800a24a:	930c      	str	r3, [sp, #48]	; 0x30
 800a24c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d01e      	beq.n	800a290 <_dtoa_r+0x824>
 800a252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a254:	2b00      	cmp	r3, #0
 800a256:	d05c      	beq.n	800a312 <_dtoa_r+0x8a6>
 800a258:	2d00      	cmp	r5, #0
 800a25a:	dd10      	ble.n	800a27e <_dtoa_r+0x812>
 800a25c:	0039      	movs	r1, r7
 800a25e:	002a      	movs	r2, r5
 800a260:	9804      	ldr	r0, [sp, #16]
 800a262:	f000 fd21 	bl	800aca8 <__pow5mult>
 800a266:	9a05      	ldr	r2, [sp, #20]
 800a268:	0001      	movs	r1, r0
 800a26a:	0007      	movs	r7, r0
 800a26c:	9804      	ldr	r0, [sp, #16]
 800a26e:	f000 fc6b 	bl	800ab48 <__multiply>
 800a272:	0006      	movs	r6, r0
 800a274:	9905      	ldr	r1, [sp, #20]
 800a276:	9804      	ldr	r0, [sp, #16]
 800a278:	f000 fb52 	bl	800a920 <_Bfree>
 800a27c:	9605      	str	r6, [sp, #20]
 800a27e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a280:	1b5a      	subs	r2, r3, r5
 800a282:	42ab      	cmp	r3, r5
 800a284:	d004      	beq.n	800a290 <_dtoa_r+0x824>
 800a286:	9905      	ldr	r1, [sp, #20]
 800a288:	9804      	ldr	r0, [sp, #16]
 800a28a:	f000 fd0d 	bl	800aca8 <__pow5mult>
 800a28e:	9005      	str	r0, [sp, #20]
 800a290:	2101      	movs	r1, #1
 800a292:	9804      	ldr	r0, [sp, #16]
 800a294:	f000 fc40 	bl	800ab18 <__i2b>
 800a298:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a29a:	0006      	movs	r6, r0
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	dd3a      	ble.n	800a316 <_dtoa_r+0x8aa>
 800a2a0:	001a      	movs	r2, r3
 800a2a2:	0001      	movs	r1, r0
 800a2a4:	9804      	ldr	r0, [sp, #16]
 800a2a6:	f000 fcff 	bl	800aca8 <__pow5mult>
 800a2aa:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a2ac:	0006      	movs	r6, r0
 800a2ae:	2500      	movs	r5, #0
 800a2b0:	2b01      	cmp	r3, #1
 800a2b2:	dc38      	bgt.n	800a326 <_dtoa_r+0x8ba>
 800a2b4:	2500      	movs	r5, #0
 800a2b6:	9b08      	ldr	r3, [sp, #32]
 800a2b8:	42ab      	cmp	r3, r5
 800a2ba:	d130      	bne.n	800a31e <_dtoa_r+0x8b2>
 800a2bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2be:	031b      	lsls	r3, r3, #12
 800a2c0:	42ab      	cmp	r3, r5
 800a2c2:	d12c      	bne.n	800a31e <_dtoa_r+0x8b2>
 800a2c4:	4b72      	ldr	r3, [pc, #456]	; (800a490 <_dtoa_r+0xa24>)
 800a2c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2c8:	4213      	tst	r3, r2
 800a2ca:	d028      	beq.n	800a31e <_dtoa_r+0x8b2>
 800a2cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ce:	3501      	adds	r5, #1
 800a2d0:	3301      	adds	r3, #1
 800a2d2:	930a      	str	r3, [sp, #40]	; 0x28
 800a2d4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	930c      	str	r3, [sp, #48]	; 0x30
 800a2da:	e020      	b.n	800a31e <_dtoa_r+0x8b2>
 800a2dc:	2336      	movs	r3, #54	; 0x36
 800a2de:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a2e0:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800a2e2:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a2e4:	1a9b      	subs	r3, r3, r2
 800a2e6:	e795      	b.n	800a214 <_dtoa_r+0x7a8>
 800a2e8:	9b07      	ldr	r3, [sp, #28]
 800a2ea:	1e5d      	subs	r5, r3, #1
 800a2ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a2ee:	42ab      	cmp	r3, r5
 800a2f0:	db07      	blt.n	800a302 <_dtoa_r+0x896>
 800a2f2:	1b5d      	subs	r5, r3, r5
 800a2f4:	9b07      	ldr	r3, [sp, #28]
 800a2f6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	da8b      	bge.n	800a214 <_dtoa_r+0x7a8>
 800a2fc:	1ae4      	subs	r4, r4, r3
 800a2fe:	2300      	movs	r3, #0
 800a300:	e788      	b.n	800a214 <_dtoa_r+0x7a8>
 800a302:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a304:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a306:	1aeb      	subs	r3, r5, r3
 800a308:	18d3      	adds	r3, r2, r3
 800a30a:	950d      	str	r5, [sp, #52]	; 0x34
 800a30c:	9313      	str	r3, [sp, #76]	; 0x4c
 800a30e:	2500      	movs	r5, #0
 800a310:	e7f0      	b.n	800a2f4 <_dtoa_r+0x888>
 800a312:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a314:	e7b7      	b.n	800a286 <_dtoa_r+0x81a>
 800a316:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a318:	2500      	movs	r5, #0
 800a31a:	2b01      	cmp	r3, #1
 800a31c:	ddca      	ble.n	800a2b4 <_dtoa_r+0x848>
 800a31e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a320:	2001      	movs	r0, #1
 800a322:	2b00      	cmp	r3, #0
 800a324:	d008      	beq.n	800a338 <_dtoa_r+0x8cc>
 800a326:	6933      	ldr	r3, [r6, #16]
 800a328:	3303      	adds	r3, #3
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	18f3      	adds	r3, r6, r3
 800a32e:	6858      	ldr	r0, [r3, #4]
 800a330:	f000 fbaa 	bl	800aa88 <__hi0bits>
 800a334:	2320      	movs	r3, #32
 800a336:	1a18      	subs	r0, r3, r0
 800a338:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a33a:	1818      	adds	r0, r3, r0
 800a33c:	0002      	movs	r2, r0
 800a33e:	231f      	movs	r3, #31
 800a340:	401a      	ands	r2, r3
 800a342:	4218      	tst	r0, r3
 800a344:	d047      	beq.n	800a3d6 <_dtoa_r+0x96a>
 800a346:	3301      	adds	r3, #1
 800a348:	1a9b      	subs	r3, r3, r2
 800a34a:	2b04      	cmp	r3, #4
 800a34c:	dd3f      	ble.n	800a3ce <_dtoa_r+0x962>
 800a34e:	231c      	movs	r3, #28
 800a350:	1a9b      	subs	r3, r3, r2
 800a352:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a354:	18e4      	adds	r4, r4, r3
 800a356:	18d2      	adds	r2, r2, r3
 800a358:	920a      	str	r2, [sp, #40]	; 0x28
 800a35a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a35c:	18d3      	adds	r3, r2, r3
 800a35e:	930c      	str	r3, [sp, #48]	; 0x30
 800a360:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a362:	2b00      	cmp	r3, #0
 800a364:	dd05      	ble.n	800a372 <_dtoa_r+0x906>
 800a366:	001a      	movs	r2, r3
 800a368:	9905      	ldr	r1, [sp, #20]
 800a36a:	9804      	ldr	r0, [sp, #16]
 800a36c:	f000 fcf8 	bl	800ad60 <__lshift>
 800a370:	9005      	str	r0, [sp, #20]
 800a372:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a374:	2b00      	cmp	r3, #0
 800a376:	dd05      	ble.n	800a384 <_dtoa_r+0x918>
 800a378:	0031      	movs	r1, r6
 800a37a:	001a      	movs	r2, r3
 800a37c:	9804      	ldr	r0, [sp, #16]
 800a37e:	f000 fcef 	bl	800ad60 <__lshift>
 800a382:	0006      	movs	r6, r0
 800a384:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800a386:	2b00      	cmp	r3, #0
 800a388:	d027      	beq.n	800a3da <_dtoa_r+0x96e>
 800a38a:	0031      	movs	r1, r6
 800a38c:	9805      	ldr	r0, [sp, #20]
 800a38e:	f000 fd55 	bl	800ae3c <__mcmp>
 800a392:	2800      	cmp	r0, #0
 800a394:	da21      	bge.n	800a3da <_dtoa_r+0x96e>
 800a396:	9b03      	ldr	r3, [sp, #12]
 800a398:	220a      	movs	r2, #10
 800a39a:	3b01      	subs	r3, #1
 800a39c:	9303      	str	r3, [sp, #12]
 800a39e:	9905      	ldr	r1, [sp, #20]
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	9804      	ldr	r0, [sp, #16]
 800a3a4:	f000 fae0 	bl	800a968 <__multadd>
 800a3a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a3aa:	9005      	str	r0, [sp, #20]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d100      	bne.n	800a3b2 <_dtoa_r+0x946>
 800a3b0:	e15d      	b.n	800a66e <_dtoa_r+0xc02>
 800a3b2:	2300      	movs	r3, #0
 800a3b4:	0039      	movs	r1, r7
 800a3b6:	220a      	movs	r2, #10
 800a3b8:	9804      	ldr	r0, [sp, #16]
 800a3ba:	f000 fad5 	bl	800a968 <__multadd>
 800a3be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3c0:	0007      	movs	r7, r0
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	dc49      	bgt.n	800a45a <_dtoa_r+0x9ee>
 800a3c6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3c8:	2b02      	cmp	r3, #2
 800a3ca:	dc0e      	bgt.n	800a3ea <_dtoa_r+0x97e>
 800a3cc:	e045      	b.n	800a45a <_dtoa_r+0x9ee>
 800a3ce:	2b04      	cmp	r3, #4
 800a3d0:	d0c6      	beq.n	800a360 <_dtoa_r+0x8f4>
 800a3d2:	331c      	adds	r3, #28
 800a3d4:	e7bd      	b.n	800a352 <_dtoa_r+0x8e6>
 800a3d6:	0013      	movs	r3, r2
 800a3d8:	e7fb      	b.n	800a3d2 <_dtoa_r+0x966>
 800a3da:	9b07      	ldr	r3, [sp, #28]
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	dc36      	bgt.n	800a44e <_dtoa_r+0x9e2>
 800a3e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	dd33      	ble.n	800a44e <_dtoa_r+0x9e2>
 800a3e6:	9b07      	ldr	r3, [sp, #28]
 800a3e8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a3ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d10c      	bne.n	800a40a <_dtoa_r+0x99e>
 800a3f0:	0031      	movs	r1, r6
 800a3f2:	2205      	movs	r2, #5
 800a3f4:	9804      	ldr	r0, [sp, #16]
 800a3f6:	f000 fab7 	bl	800a968 <__multadd>
 800a3fa:	0006      	movs	r6, r0
 800a3fc:	0001      	movs	r1, r0
 800a3fe:	9805      	ldr	r0, [sp, #20]
 800a400:	f000 fd1c 	bl	800ae3c <__mcmp>
 800a404:	2800      	cmp	r0, #0
 800a406:	dd00      	ble.n	800a40a <_dtoa_r+0x99e>
 800a408:	e59f      	b.n	8009f4a <_dtoa_r+0x4de>
 800a40a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800a40c:	43db      	mvns	r3, r3
 800a40e:	9303      	str	r3, [sp, #12]
 800a410:	9b06      	ldr	r3, [sp, #24]
 800a412:	9308      	str	r3, [sp, #32]
 800a414:	2500      	movs	r5, #0
 800a416:	0031      	movs	r1, r6
 800a418:	9804      	ldr	r0, [sp, #16]
 800a41a:	f000 fa81 	bl	800a920 <_Bfree>
 800a41e:	2f00      	cmp	r7, #0
 800a420:	d100      	bne.n	800a424 <_dtoa_r+0x9b8>
 800a422:	e6a3      	b.n	800a16c <_dtoa_r+0x700>
 800a424:	2d00      	cmp	r5, #0
 800a426:	d005      	beq.n	800a434 <_dtoa_r+0x9c8>
 800a428:	42bd      	cmp	r5, r7
 800a42a:	d003      	beq.n	800a434 <_dtoa_r+0x9c8>
 800a42c:	0029      	movs	r1, r5
 800a42e:	9804      	ldr	r0, [sp, #16]
 800a430:	f000 fa76 	bl	800a920 <_Bfree>
 800a434:	0039      	movs	r1, r7
 800a436:	9804      	ldr	r0, [sp, #16]
 800a438:	f000 fa72 	bl	800a920 <_Bfree>
 800a43c:	e696      	b.n	800a16c <_dtoa_r+0x700>
 800a43e:	2600      	movs	r6, #0
 800a440:	0037      	movs	r7, r6
 800a442:	e7e2      	b.n	800a40a <_dtoa_r+0x99e>
 800a444:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a446:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800a448:	9303      	str	r3, [sp, #12]
 800a44a:	0037      	movs	r7, r6
 800a44c:	e57d      	b.n	8009f4a <_dtoa_r+0x4de>
 800a44e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a450:	2b00      	cmp	r3, #0
 800a452:	d100      	bne.n	800a456 <_dtoa_r+0x9ea>
 800a454:	e0c3      	b.n	800a5de <_dtoa_r+0xb72>
 800a456:	9b07      	ldr	r3, [sp, #28]
 800a458:	930b      	str	r3, [sp, #44]	; 0x2c
 800a45a:	2c00      	cmp	r4, #0
 800a45c:	dd05      	ble.n	800a46a <_dtoa_r+0x9fe>
 800a45e:	0039      	movs	r1, r7
 800a460:	0022      	movs	r2, r4
 800a462:	9804      	ldr	r0, [sp, #16]
 800a464:	f000 fc7c 	bl	800ad60 <__lshift>
 800a468:	0007      	movs	r7, r0
 800a46a:	0038      	movs	r0, r7
 800a46c:	2d00      	cmp	r5, #0
 800a46e:	d024      	beq.n	800a4ba <_dtoa_r+0xa4e>
 800a470:	6879      	ldr	r1, [r7, #4]
 800a472:	9804      	ldr	r0, [sp, #16]
 800a474:	f000 fa10 	bl	800a898 <_Balloc>
 800a478:	1e04      	subs	r4, r0, #0
 800a47a:	d111      	bne.n	800a4a0 <_dtoa_r+0xa34>
 800a47c:	0022      	movs	r2, r4
 800a47e:	4b05      	ldr	r3, [pc, #20]	; (800a494 <_dtoa_r+0xa28>)
 800a480:	4805      	ldr	r0, [pc, #20]	; (800a498 <_dtoa_r+0xa2c>)
 800a482:	4906      	ldr	r1, [pc, #24]	; (800a49c <_dtoa_r+0xa30>)
 800a484:	f7ff fb07 	bl	8009a96 <_dtoa_r+0x2a>
 800a488:	40240000 	.word	0x40240000
 800a48c:	00000433 	.word	0x00000433
 800a490:	7ff00000 	.word	0x7ff00000
 800a494:	0800d40d 	.word	0x0800d40d
 800a498:	0800d3b5 	.word	0x0800d3b5
 800a49c:	000002ef 	.word	0x000002ef
 800a4a0:	0039      	movs	r1, r7
 800a4a2:	693a      	ldr	r2, [r7, #16]
 800a4a4:	310c      	adds	r1, #12
 800a4a6:	3202      	adds	r2, #2
 800a4a8:	0092      	lsls	r2, r2, #2
 800a4aa:	300c      	adds	r0, #12
 800a4ac:	f002 f980 	bl	800c7b0 <memcpy>
 800a4b0:	2201      	movs	r2, #1
 800a4b2:	0021      	movs	r1, r4
 800a4b4:	9804      	ldr	r0, [sp, #16]
 800a4b6:	f000 fc53 	bl	800ad60 <__lshift>
 800a4ba:	9b06      	ldr	r3, [sp, #24]
 800a4bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a4be:	9307      	str	r3, [sp, #28]
 800a4c0:	3b01      	subs	r3, #1
 800a4c2:	189b      	adds	r3, r3, r2
 800a4c4:	2201      	movs	r2, #1
 800a4c6:	003d      	movs	r5, r7
 800a4c8:	0007      	movs	r7, r0
 800a4ca:	930e      	str	r3, [sp, #56]	; 0x38
 800a4cc:	9b08      	ldr	r3, [sp, #32]
 800a4ce:	4013      	ands	r3, r2
 800a4d0:	930d      	str	r3, [sp, #52]	; 0x34
 800a4d2:	0031      	movs	r1, r6
 800a4d4:	9805      	ldr	r0, [sp, #20]
 800a4d6:	f7ff fa39 	bl	800994c <quorem>
 800a4da:	0029      	movs	r1, r5
 800a4dc:	0004      	movs	r4, r0
 800a4de:	900b      	str	r0, [sp, #44]	; 0x2c
 800a4e0:	9805      	ldr	r0, [sp, #20]
 800a4e2:	f000 fcab 	bl	800ae3c <__mcmp>
 800a4e6:	003a      	movs	r2, r7
 800a4e8:	900c      	str	r0, [sp, #48]	; 0x30
 800a4ea:	0031      	movs	r1, r6
 800a4ec:	9804      	ldr	r0, [sp, #16]
 800a4ee:	f000 fcc1 	bl	800ae74 <__mdiff>
 800a4f2:	2201      	movs	r2, #1
 800a4f4:	68c3      	ldr	r3, [r0, #12]
 800a4f6:	3430      	adds	r4, #48	; 0x30
 800a4f8:	9008      	str	r0, [sp, #32]
 800a4fa:	920a      	str	r2, [sp, #40]	; 0x28
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d104      	bne.n	800a50a <_dtoa_r+0xa9e>
 800a500:	0001      	movs	r1, r0
 800a502:	9805      	ldr	r0, [sp, #20]
 800a504:	f000 fc9a 	bl	800ae3c <__mcmp>
 800a508:	900a      	str	r0, [sp, #40]	; 0x28
 800a50a:	9908      	ldr	r1, [sp, #32]
 800a50c:	9804      	ldr	r0, [sp, #16]
 800a50e:	f000 fa07 	bl	800a920 <_Bfree>
 800a512:	9b07      	ldr	r3, [sp, #28]
 800a514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a516:	3301      	adds	r3, #1
 800a518:	9308      	str	r3, [sp, #32]
 800a51a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a51c:	4313      	orrs	r3, r2
 800a51e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a520:	4313      	orrs	r3, r2
 800a522:	d109      	bne.n	800a538 <_dtoa_r+0xacc>
 800a524:	2c39      	cmp	r4, #57	; 0x39
 800a526:	d022      	beq.n	800a56e <_dtoa_r+0xb02>
 800a528:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	dd01      	ble.n	800a532 <_dtoa_r+0xac6>
 800a52e:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800a530:	3431      	adds	r4, #49	; 0x31
 800a532:	9b07      	ldr	r3, [sp, #28]
 800a534:	701c      	strb	r4, [r3, #0]
 800a536:	e76e      	b.n	800a416 <_dtoa_r+0x9aa>
 800a538:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	db04      	blt.n	800a548 <_dtoa_r+0xadc>
 800a53e:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800a540:	4313      	orrs	r3, r2
 800a542:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a544:	4313      	orrs	r3, r2
 800a546:	d11e      	bne.n	800a586 <_dtoa_r+0xb1a>
 800a548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	ddf1      	ble.n	800a532 <_dtoa_r+0xac6>
 800a54e:	9905      	ldr	r1, [sp, #20]
 800a550:	2201      	movs	r2, #1
 800a552:	9804      	ldr	r0, [sp, #16]
 800a554:	f000 fc04 	bl	800ad60 <__lshift>
 800a558:	0031      	movs	r1, r6
 800a55a:	9005      	str	r0, [sp, #20]
 800a55c:	f000 fc6e 	bl	800ae3c <__mcmp>
 800a560:	2800      	cmp	r0, #0
 800a562:	dc02      	bgt.n	800a56a <_dtoa_r+0xafe>
 800a564:	d1e5      	bne.n	800a532 <_dtoa_r+0xac6>
 800a566:	07e3      	lsls	r3, r4, #31
 800a568:	d5e3      	bpl.n	800a532 <_dtoa_r+0xac6>
 800a56a:	2c39      	cmp	r4, #57	; 0x39
 800a56c:	d1df      	bne.n	800a52e <_dtoa_r+0xac2>
 800a56e:	2339      	movs	r3, #57	; 0x39
 800a570:	9a07      	ldr	r2, [sp, #28]
 800a572:	7013      	strb	r3, [r2, #0]
 800a574:	9b08      	ldr	r3, [sp, #32]
 800a576:	9308      	str	r3, [sp, #32]
 800a578:	3b01      	subs	r3, #1
 800a57a:	781a      	ldrb	r2, [r3, #0]
 800a57c:	2a39      	cmp	r2, #57	; 0x39
 800a57e:	d063      	beq.n	800a648 <_dtoa_r+0xbdc>
 800a580:	3201      	adds	r2, #1
 800a582:	701a      	strb	r2, [r3, #0]
 800a584:	e747      	b.n	800a416 <_dtoa_r+0x9aa>
 800a586:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a588:	2b00      	cmp	r3, #0
 800a58a:	dd03      	ble.n	800a594 <_dtoa_r+0xb28>
 800a58c:	2c39      	cmp	r4, #57	; 0x39
 800a58e:	d0ee      	beq.n	800a56e <_dtoa_r+0xb02>
 800a590:	3401      	adds	r4, #1
 800a592:	e7ce      	b.n	800a532 <_dtoa_r+0xac6>
 800a594:	9b07      	ldr	r3, [sp, #28]
 800a596:	9a07      	ldr	r2, [sp, #28]
 800a598:	701c      	strb	r4, [r3, #0]
 800a59a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a59c:	4293      	cmp	r3, r2
 800a59e:	d03e      	beq.n	800a61e <_dtoa_r+0xbb2>
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	220a      	movs	r2, #10
 800a5a4:	9905      	ldr	r1, [sp, #20]
 800a5a6:	9804      	ldr	r0, [sp, #16]
 800a5a8:	f000 f9de 	bl	800a968 <__multadd>
 800a5ac:	2300      	movs	r3, #0
 800a5ae:	9005      	str	r0, [sp, #20]
 800a5b0:	220a      	movs	r2, #10
 800a5b2:	0029      	movs	r1, r5
 800a5b4:	9804      	ldr	r0, [sp, #16]
 800a5b6:	42bd      	cmp	r5, r7
 800a5b8:	d106      	bne.n	800a5c8 <_dtoa_r+0xb5c>
 800a5ba:	f000 f9d5 	bl	800a968 <__multadd>
 800a5be:	0005      	movs	r5, r0
 800a5c0:	0007      	movs	r7, r0
 800a5c2:	9b08      	ldr	r3, [sp, #32]
 800a5c4:	9307      	str	r3, [sp, #28]
 800a5c6:	e784      	b.n	800a4d2 <_dtoa_r+0xa66>
 800a5c8:	f000 f9ce 	bl	800a968 <__multadd>
 800a5cc:	0039      	movs	r1, r7
 800a5ce:	0005      	movs	r5, r0
 800a5d0:	2300      	movs	r3, #0
 800a5d2:	220a      	movs	r2, #10
 800a5d4:	9804      	ldr	r0, [sp, #16]
 800a5d6:	f000 f9c7 	bl	800a968 <__multadd>
 800a5da:	0007      	movs	r7, r0
 800a5dc:	e7f1      	b.n	800a5c2 <_dtoa_r+0xb56>
 800a5de:	9b07      	ldr	r3, [sp, #28]
 800a5e0:	930b      	str	r3, [sp, #44]	; 0x2c
 800a5e2:	2500      	movs	r5, #0
 800a5e4:	0031      	movs	r1, r6
 800a5e6:	9805      	ldr	r0, [sp, #20]
 800a5e8:	f7ff f9b0 	bl	800994c <quorem>
 800a5ec:	9b06      	ldr	r3, [sp, #24]
 800a5ee:	3030      	adds	r0, #48	; 0x30
 800a5f0:	5558      	strb	r0, [r3, r5]
 800a5f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5f4:	3501      	adds	r5, #1
 800a5f6:	0004      	movs	r4, r0
 800a5f8:	42ab      	cmp	r3, r5
 800a5fa:	dd07      	ble.n	800a60c <_dtoa_r+0xba0>
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	220a      	movs	r2, #10
 800a600:	9905      	ldr	r1, [sp, #20]
 800a602:	9804      	ldr	r0, [sp, #16]
 800a604:	f000 f9b0 	bl	800a968 <__multadd>
 800a608:	9005      	str	r0, [sp, #20]
 800a60a:	e7eb      	b.n	800a5e4 <_dtoa_r+0xb78>
 800a60c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a60e:	2301      	movs	r3, #1
 800a610:	2a00      	cmp	r2, #0
 800a612:	dd00      	ble.n	800a616 <_dtoa_r+0xbaa>
 800a614:	0013      	movs	r3, r2
 800a616:	2500      	movs	r5, #0
 800a618:	9a06      	ldr	r2, [sp, #24]
 800a61a:	18d3      	adds	r3, r2, r3
 800a61c:	9308      	str	r3, [sp, #32]
 800a61e:	9905      	ldr	r1, [sp, #20]
 800a620:	2201      	movs	r2, #1
 800a622:	9804      	ldr	r0, [sp, #16]
 800a624:	f000 fb9c 	bl	800ad60 <__lshift>
 800a628:	0031      	movs	r1, r6
 800a62a:	9005      	str	r0, [sp, #20]
 800a62c:	f000 fc06 	bl	800ae3c <__mcmp>
 800a630:	2800      	cmp	r0, #0
 800a632:	dc9f      	bgt.n	800a574 <_dtoa_r+0xb08>
 800a634:	d101      	bne.n	800a63a <_dtoa_r+0xbce>
 800a636:	07e4      	lsls	r4, r4, #31
 800a638:	d49c      	bmi.n	800a574 <_dtoa_r+0xb08>
 800a63a:	9b08      	ldr	r3, [sp, #32]
 800a63c:	9308      	str	r3, [sp, #32]
 800a63e:	3b01      	subs	r3, #1
 800a640:	781a      	ldrb	r2, [r3, #0]
 800a642:	2a30      	cmp	r2, #48	; 0x30
 800a644:	d0fa      	beq.n	800a63c <_dtoa_r+0xbd0>
 800a646:	e6e6      	b.n	800a416 <_dtoa_r+0x9aa>
 800a648:	9a06      	ldr	r2, [sp, #24]
 800a64a:	429a      	cmp	r2, r3
 800a64c:	d193      	bne.n	800a576 <_dtoa_r+0xb0a>
 800a64e:	9b03      	ldr	r3, [sp, #12]
 800a650:	3301      	adds	r3, #1
 800a652:	9303      	str	r3, [sp, #12]
 800a654:	2331      	movs	r3, #49	; 0x31
 800a656:	7013      	strb	r3, [r2, #0]
 800a658:	e6dd      	b.n	800a416 <_dtoa_r+0x9aa>
 800a65a:	4b09      	ldr	r3, [pc, #36]	; (800a680 <_dtoa_r+0xc14>)
 800a65c:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800a65e:	9306      	str	r3, [sp, #24]
 800a660:	4b08      	ldr	r3, [pc, #32]	; (800a684 <_dtoa_r+0xc18>)
 800a662:	2a00      	cmp	r2, #0
 800a664:	d001      	beq.n	800a66a <_dtoa_r+0xbfe>
 800a666:	f7ff fa49 	bl	8009afc <_dtoa_r+0x90>
 800a66a:	f7ff fa49 	bl	8009b00 <_dtoa_r+0x94>
 800a66e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a670:	2b00      	cmp	r3, #0
 800a672:	dcb6      	bgt.n	800a5e2 <_dtoa_r+0xb76>
 800a674:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800a676:	2b02      	cmp	r3, #2
 800a678:	dd00      	ble.n	800a67c <_dtoa_r+0xc10>
 800a67a:	e6b6      	b.n	800a3ea <_dtoa_r+0x97e>
 800a67c:	e7b1      	b.n	800a5e2 <_dtoa_r+0xb76>
 800a67e:	46c0      	nop			; (mov r8, r8)
 800a680:	0800d391 	.word	0x0800d391
 800a684:	0800d399 	.word	0x0800d399

0800a688 <_free_r>:
 800a688:	b570      	push	{r4, r5, r6, lr}
 800a68a:	0005      	movs	r5, r0
 800a68c:	2900      	cmp	r1, #0
 800a68e:	d010      	beq.n	800a6b2 <_free_r+0x2a>
 800a690:	1f0c      	subs	r4, r1, #4
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	2b00      	cmp	r3, #0
 800a696:	da00      	bge.n	800a69a <_free_r+0x12>
 800a698:	18e4      	adds	r4, r4, r3
 800a69a:	0028      	movs	r0, r5
 800a69c:	f000 f8ec 	bl	800a878 <__malloc_lock>
 800a6a0:	4a1d      	ldr	r2, [pc, #116]	; (800a718 <_free_r+0x90>)
 800a6a2:	6813      	ldr	r3, [r2, #0]
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d105      	bne.n	800a6b4 <_free_r+0x2c>
 800a6a8:	6063      	str	r3, [r4, #4]
 800a6aa:	6014      	str	r4, [r2, #0]
 800a6ac:	0028      	movs	r0, r5
 800a6ae:	f000 f8eb 	bl	800a888 <__malloc_unlock>
 800a6b2:	bd70      	pop	{r4, r5, r6, pc}
 800a6b4:	42a3      	cmp	r3, r4
 800a6b6:	d908      	bls.n	800a6ca <_free_r+0x42>
 800a6b8:	6820      	ldr	r0, [r4, #0]
 800a6ba:	1821      	adds	r1, r4, r0
 800a6bc:	428b      	cmp	r3, r1
 800a6be:	d1f3      	bne.n	800a6a8 <_free_r+0x20>
 800a6c0:	6819      	ldr	r1, [r3, #0]
 800a6c2:	685b      	ldr	r3, [r3, #4]
 800a6c4:	1809      	adds	r1, r1, r0
 800a6c6:	6021      	str	r1, [r4, #0]
 800a6c8:	e7ee      	b.n	800a6a8 <_free_r+0x20>
 800a6ca:	001a      	movs	r2, r3
 800a6cc:	685b      	ldr	r3, [r3, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d001      	beq.n	800a6d6 <_free_r+0x4e>
 800a6d2:	42a3      	cmp	r3, r4
 800a6d4:	d9f9      	bls.n	800a6ca <_free_r+0x42>
 800a6d6:	6811      	ldr	r1, [r2, #0]
 800a6d8:	1850      	adds	r0, r2, r1
 800a6da:	42a0      	cmp	r0, r4
 800a6dc:	d10b      	bne.n	800a6f6 <_free_r+0x6e>
 800a6de:	6820      	ldr	r0, [r4, #0]
 800a6e0:	1809      	adds	r1, r1, r0
 800a6e2:	1850      	adds	r0, r2, r1
 800a6e4:	6011      	str	r1, [r2, #0]
 800a6e6:	4283      	cmp	r3, r0
 800a6e8:	d1e0      	bne.n	800a6ac <_free_r+0x24>
 800a6ea:	6818      	ldr	r0, [r3, #0]
 800a6ec:	685b      	ldr	r3, [r3, #4]
 800a6ee:	1841      	adds	r1, r0, r1
 800a6f0:	6011      	str	r1, [r2, #0]
 800a6f2:	6053      	str	r3, [r2, #4]
 800a6f4:	e7da      	b.n	800a6ac <_free_r+0x24>
 800a6f6:	42a0      	cmp	r0, r4
 800a6f8:	d902      	bls.n	800a700 <_free_r+0x78>
 800a6fa:	230c      	movs	r3, #12
 800a6fc:	602b      	str	r3, [r5, #0]
 800a6fe:	e7d5      	b.n	800a6ac <_free_r+0x24>
 800a700:	6820      	ldr	r0, [r4, #0]
 800a702:	1821      	adds	r1, r4, r0
 800a704:	428b      	cmp	r3, r1
 800a706:	d103      	bne.n	800a710 <_free_r+0x88>
 800a708:	6819      	ldr	r1, [r3, #0]
 800a70a:	685b      	ldr	r3, [r3, #4]
 800a70c:	1809      	adds	r1, r1, r0
 800a70e:	6021      	str	r1, [r4, #0]
 800a710:	6063      	str	r3, [r4, #4]
 800a712:	6054      	str	r4, [r2, #4]
 800a714:	e7ca      	b.n	800a6ac <_free_r+0x24>
 800a716:	46c0      	nop			; (mov r8, r8)
 800a718:	200007d8 	.word	0x200007d8

0800a71c <malloc>:
 800a71c:	b510      	push	{r4, lr}
 800a71e:	4b03      	ldr	r3, [pc, #12]	; (800a72c <malloc+0x10>)
 800a720:	0001      	movs	r1, r0
 800a722:	6818      	ldr	r0, [r3, #0]
 800a724:	f000 f826 	bl	800a774 <_malloc_r>
 800a728:	bd10      	pop	{r4, pc}
 800a72a:	46c0      	nop			; (mov r8, r8)
 800a72c:	20000068 	.word	0x20000068

0800a730 <sbrk_aligned>:
 800a730:	b570      	push	{r4, r5, r6, lr}
 800a732:	4e0f      	ldr	r6, [pc, #60]	; (800a770 <sbrk_aligned+0x40>)
 800a734:	000d      	movs	r5, r1
 800a736:	6831      	ldr	r1, [r6, #0]
 800a738:	0004      	movs	r4, r0
 800a73a:	2900      	cmp	r1, #0
 800a73c:	d102      	bne.n	800a744 <sbrk_aligned+0x14>
 800a73e:	f002 f825 	bl	800c78c <_sbrk_r>
 800a742:	6030      	str	r0, [r6, #0]
 800a744:	0029      	movs	r1, r5
 800a746:	0020      	movs	r0, r4
 800a748:	f002 f820 	bl	800c78c <_sbrk_r>
 800a74c:	1c43      	adds	r3, r0, #1
 800a74e:	d00a      	beq.n	800a766 <sbrk_aligned+0x36>
 800a750:	2303      	movs	r3, #3
 800a752:	1cc5      	adds	r5, r0, #3
 800a754:	439d      	bics	r5, r3
 800a756:	42a8      	cmp	r0, r5
 800a758:	d007      	beq.n	800a76a <sbrk_aligned+0x3a>
 800a75a:	1a29      	subs	r1, r5, r0
 800a75c:	0020      	movs	r0, r4
 800a75e:	f002 f815 	bl	800c78c <_sbrk_r>
 800a762:	3001      	adds	r0, #1
 800a764:	d101      	bne.n	800a76a <sbrk_aligned+0x3a>
 800a766:	2501      	movs	r5, #1
 800a768:	426d      	negs	r5, r5
 800a76a:	0028      	movs	r0, r5
 800a76c:	bd70      	pop	{r4, r5, r6, pc}
 800a76e:	46c0      	nop			; (mov r8, r8)
 800a770:	200007dc 	.word	0x200007dc

0800a774 <_malloc_r>:
 800a774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a776:	2203      	movs	r2, #3
 800a778:	1ccb      	adds	r3, r1, #3
 800a77a:	4393      	bics	r3, r2
 800a77c:	3308      	adds	r3, #8
 800a77e:	0006      	movs	r6, r0
 800a780:	001f      	movs	r7, r3
 800a782:	2b0c      	cmp	r3, #12
 800a784:	d238      	bcs.n	800a7f8 <_malloc_r+0x84>
 800a786:	270c      	movs	r7, #12
 800a788:	42b9      	cmp	r1, r7
 800a78a:	d837      	bhi.n	800a7fc <_malloc_r+0x88>
 800a78c:	0030      	movs	r0, r6
 800a78e:	f000 f873 	bl	800a878 <__malloc_lock>
 800a792:	4b38      	ldr	r3, [pc, #224]	; (800a874 <_malloc_r+0x100>)
 800a794:	9300      	str	r3, [sp, #0]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	001c      	movs	r4, r3
 800a79a:	2c00      	cmp	r4, #0
 800a79c:	d133      	bne.n	800a806 <_malloc_r+0x92>
 800a79e:	0039      	movs	r1, r7
 800a7a0:	0030      	movs	r0, r6
 800a7a2:	f7ff ffc5 	bl	800a730 <sbrk_aligned>
 800a7a6:	0004      	movs	r4, r0
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d15e      	bne.n	800a86a <_malloc_r+0xf6>
 800a7ac:	9b00      	ldr	r3, [sp, #0]
 800a7ae:	681c      	ldr	r4, [r3, #0]
 800a7b0:	0025      	movs	r5, r4
 800a7b2:	2d00      	cmp	r5, #0
 800a7b4:	d14e      	bne.n	800a854 <_malloc_r+0xe0>
 800a7b6:	2c00      	cmp	r4, #0
 800a7b8:	d051      	beq.n	800a85e <_malloc_r+0xea>
 800a7ba:	6823      	ldr	r3, [r4, #0]
 800a7bc:	0029      	movs	r1, r5
 800a7be:	18e3      	adds	r3, r4, r3
 800a7c0:	0030      	movs	r0, r6
 800a7c2:	9301      	str	r3, [sp, #4]
 800a7c4:	f001 ffe2 	bl	800c78c <_sbrk_r>
 800a7c8:	9b01      	ldr	r3, [sp, #4]
 800a7ca:	4283      	cmp	r3, r0
 800a7cc:	d147      	bne.n	800a85e <_malloc_r+0xea>
 800a7ce:	6823      	ldr	r3, [r4, #0]
 800a7d0:	0030      	movs	r0, r6
 800a7d2:	1aff      	subs	r7, r7, r3
 800a7d4:	0039      	movs	r1, r7
 800a7d6:	f7ff ffab 	bl	800a730 <sbrk_aligned>
 800a7da:	3001      	adds	r0, #1
 800a7dc:	d03f      	beq.n	800a85e <_malloc_r+0xea>
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	19db      	adds	r3, r3, r7
 800a7e2:	6023      	str	r3, [r4, #0]
 800a7e4:	9b00      	ldr	r3, [sp, #0]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d040      	beq.n	800a86e <_malloc_r+0xfa>
 800a7ec:	685a      	ldr	r2, [r3, #4]
 800a7ee:	42a2      	cmp	r2, r4
 800a7f0:	d133      	bne.n	800a85a <_malloc_r+0xe6>
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	605a      	str	r2, [r3, #4]
 800a7f6:	e014      	b.n	800a822 <_malloc_r+0xae>
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	dac5      	bge.n	800a788 <_malloc_r+0x14>
 800a7fc:	230c      	movs	r3, #12
 800a7fe:	2500      	movs	r5, #0
 800a800:	6033      	str	r3, [r6, #0]
 800a802:	0028      	movs	r0, r5
 800a804:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a806:	6821      	ldr	r1, [r4, #0]
 800a808:	1bc9      	subs	r1, r1, r7
 800a80a:	d420      	bmi.n	800a84e <_malloc_r+0xda>
 800a80c:	290b      	cmp	r1, #11
 800a80e:	d918      	bls.n	800a842 <_malloc_r+0xce>
 800a810:	19e2      	adds	r2, r4, r7
 800a812:	6027      	str	r7, [r4, #0]
 800a814:	42a3      	cmp	r3, r4
 800a816:	d112      	bne.n	800a83e <_malloc_r+0xca>
 800a818:	9b00      	ldr	r3, [sp, #0]
 800a81a:	601a      	str	r2, [r3, #0]
 800a81c:	6863      	ldr	r3, [r4, #4]
 800a81e:	6011      	str	r1, [r2, #0]
 800a820:	6053      	str	r3, [r2, #4]
 800a822:	0030      	movs	r0, r6
 800a824:	0025      	movs	r5, r4
 800a826:	f000 f82f 	bl	800a888 <__malloc_unlock>
 800a82a:	2207      	movs	r2, #7
 800a82c:	350b      	adds	r5, #11
 800a82e:	1d23      	adds	r3, r4, #4
 800a830:	4395      	bics	r5, r2
 800a832:	1aea      	subs	r2, r5, r3
 800a834:	429d      	cmp	r5, r3
 800a836:	d0e4      	beq.n	800a802 <_malloc_r+0x8e>
 800a838:	1b5b      	subs	r3, r3, r5
 800a83a:	50a3      	str	r3, [r4, r2]
 800a83c:	e7e1      	b.n	800a802 <_malloc_r+0x8e>
 800a83e:	605a      	str	r2, [r3, #4]
 800a840:	e7ec      	b.n	800a81c <_malloc_r+0xa8>
 800a842:	6862      	ldr	r2, [r4, #4]
 800a844:	42a3      	cmp	r3, r4
 800a846:	d1d5      	bne.n	800a7f4 <_malloc_r+0x80>
 800a848:	9b00      	ldr	r3, [sp, #0]
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e7e9      	b.n	800a822 <_malloc_r+0xae>
 800a84e:	0023      	movs	r3, r4
 800a850:	6864      	ldr	r4, [r4, #4]
 800a852:	e7a2      	b.n	800a79a <_malloc_r+0x26>
 800a854:	002c      	movs	r4, r5
 800a856:	686d      	ldr	r5, [r5, #4]
 800a858:	e7ab      	b.n	800a7b2 <_malloc_r+0x3e>
 800a85a:	0013      	movs	r3, r2
 800a85c:	e7c4      	b.n	800a7e8 <_malloc_r+0x74>
 800a85e:	230c      	movs	r3, #12
 800a860:	0030      	movs	r0, r6
 800a862:	6033      	str	r3, [r6, #0]
 800a864:	f000 f810 	bl	800a888 <__malloc_unlock>
 800a868:	e7cb      	b.n	800a802 <_malloc_r+0x8e>
 800a86a:	6027      	str	r7, [r4, #0]
 800a86c:	e7d9      	b.n	800a822 <_malloc_r+0xae>
 800a86e:	605b      	str	r3, [r3, #4]
 800a870:	deff      	udf	#255	; 0xff
 800a872:	46c0      	nop			; (mov r8, r8)
 800a874:	200007d8 	.word	0x200007d8

0800a878 <__malloc_lock>:
 800a878:	b510      	push	{r4, lr}
 800a87a:	4802      	ldr	r0, [pc, #8]	; (800a884 <__malloc_lock+0xc>)
 800a87c:	f7ff f855 	bl	800992a <__retarget_lock_acquire_recursive>
 800a880:	bd10      	pop	{r4, pc}
 800a882:	46c0      	nop			; (mov r8, r8)
 800a884:	200007d4 	.word	0x200007d4

0800a888 <__malloc_unlock>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	4802      	ldr	r0, [pc, #8]	; (800a894 <__malloc_unlock+0xc>)
 800a88c:	f7ff f84e 	bl	800992c <__retarget_lock_release_recursive>
 800a890:	bd10      	pop	{r4, pc}
 800a892:	46c0      	nop			; (mov r8, r8)
 800a894:	200007d4 	.word	0x200007d4

0800a898 <_Balloc>:
 800a898:	b570      	push	{r4, r5, r6, lr}
 800a89a:	69c5      	ldr	r5, [r0, #28]
 800a89c:	0006      	movs	r6, r0
 800a89e:	000c      	movs	r4, r1
 800a8a0:	2d00      	cmp	r5, #0
 800a8a2:	d10e      	bne.n	800a8c2 <_Balloc+0x2a>
 800a8a4:	2010      	movs	r0, #16
 800a8a6:	f7ff ff39 	bl	800a71c <malloc>
 800a8aa:	1e02      	subs	r2, r0, #0
 800a8ac:	61f0      	str	r0, [r6, #28]
 800a8ae:	d104      	bne.n	800a8ba <_Balloc+0x22>
 800a8b0:	216b      	movs	r1, #107	; 0x6b
 800a8b2:	4b19      	ldr	r3, [pc, #100]	; (800a918 <_Balloc+0x80>)
 800a8b4:	4819      	ldr	r0, [pc, #100]	; (800a91c <_Balloc+0x84>)
 800a8b6:	f001 ff8b 	bl	800c7d0 <__assert_func>
 800a8ba:	6045      	str	r5, [r0, #4]
 800a8bc:	6085      	str	r5, [r0, #8]
 800a8be:	6005      	str	r5, [r0, #0]
 800a8c0:	60c5      	str	r5, [r0, #12]
 800a8c2:	69f5      	ldr	r5, [r6, #28]
 800a8c4:	68eb      	ldr	r3, [r5, #12]
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	d013      	beq.n	800a8f2 <_Balloc+0x5a>
 800a8ca:	69f3      	ldr	r3, [r6, #28]
 800a8cc:	00a2      	lsls	r2, r4, #2
 800a8ce:	68db      	ldr	r3, [r3, #12]
 800a8d0:	189b      	adds	r3, r3, r2
 800a8d2:	6818      	ldr	r0, [r3, #0]
 800a8d4:	2800      	cmp	r0, #0
 800a8d6:	d118      	bne.n	800a90a <_Balloc+0x72>
 800a8d8:	2101      	movs	r1, #1
 800a8da:	000d      	movs	r5, r1
 800a8dc:	40a5      	lsls	r5, r4
 800a8de:	1d6a      	adds	r2, r5, #5
 800a8e0:	0030      	movs	r0, r6
 800a8e2:	0092      	lsls	r2, r2, #2
 800a8e4:	f001 ff92 	bl	800c80c <_calloc_r>
 800a8e8:	2800      	cmp	r0, #0
 800a8ea:	d00c      	beq.n	800a906 <_Balloc+0x6e>
 800a8ec:	6044      	str	r4, [r0, #4]
 800a8ee:	6085      	str	r5, [r0, #8]
 800a8f0:	e00d      	b.n	800a90e <_Balloc+0x76>
 800a8f2:	2221      	movs	r2, #33	; 0x21
 800a8f4:	2104      	movs	r1, #4
 800a8f6:	0030      	movs	r0, r6
 800a8f8:	f001 ff88 	bl	800c80c <_calloc_r>
 800a8fc:	69f3      	ldr	r3, [r6, #28]
 800a8fe:	60e8      	str	r0, [r5, #12]
 800a900:	68db      	ldr	r3, [r3, #12]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d1e1      	bne.n	800a8ca <_Balloc+0x32>
 800a906:	2000      	movs	r0, #0
 800a908:	bd70      	pop	{r4, r5, r6, pc}
 800a90a:	6802      	ldr	r2, [r0, #0]
 800a90c:	601a      	str	r2, [r3, #0]
 800a90e:	2300      	movs	r3, #0
 800a910:	6103      	str	r3, [r0, #16]
 800a912:	60c3      	str	r3, [r0, #12]
 800a914:	e7f8      	b.n	800a908 <_Balloc+0x70>
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	0800d39e 	.word	0x0800d39e
 800a91c:	0800d41e 	.word	0x0800d41e

0800a920 <_Bfree>:
 800a920:	b570      	push	{r4, r5, r6, lr}
 800a922:	69c6      	ldr	r6, [r0, #28]
 800a924:	0005      	movs	r5, r0
 800a926:	000c      	movs	r4, r1
 800a928:	2e00      	cmp	r6, #0
 800a92a:	d10e      	bne.n	800a94a <_Bfree+0x2a>
 800a92c:	2010      	movs	r0, #16
 800a92e:	f7ff fef5 	bl	800a71c <malloc>
 800a932:	1e02      	subs	r2, r0, #0
 800a934:	61e8      	str	r0, [r5, #28]
 800a936:	d104      	bne.n	800a942 <_Bfree+0x22>
 800a938:	218f      	movs	r1, #143	; 0x8f
 800a93a:	4b09      	ldr	r3, [pc, #36]	; (800a960 <_Bfree+0x40>)
 800a93c:	4809      	ldr	r0, [pc, #36]	; (800a964 <_Bfree+0x44>)
 800a93e:	f001 ff47 	bl	800c7d0 <__assert_func>
 800a942:	6046      	str	r6, [r0, #4]
 800a944:	6086      	str	r6, [r0, #8]
 800a946:	6006      	str	r6, [r0, #0]
 800a948:	60c6      	str	r6, [r0, #12]
 800a94a:	2c00      	cmp	r4, #0
 800a94c:	d007      	beq.n	800a95e <_Bfree+0x3e>
 800a94e:	69eb      	ldr	r3, [r5, #28]
 800a950:	6862      	ldr	r2, [r4, #4]
 800a952:	68db      	ldr	r3, [r3, #12]
 800a954:	0092      	lsls	r2, r2, #2
 800a956:	189b      	adds	r3, r3, r2
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	6022      	str	r2, [r4, #0]
 800a95c:	601c      	str	r4, [r3, #0]
 800a95e:	bd70      	pop	{r4, r5, r6, pc}
 800a960:	0800d39e 	.word	0x0800d39e
 800a964:	0800d41e 	.word	0x0800d41e

0800a968 <__multadd>:
 800a968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a96a:	000e      	movs	r6, r1
 800a96c:	9001      	str	r0, [sp, #4]
 800a96e:	000c      	movs	r4, r1
 800a970:	001d      	movs	r5, r3
 800a972:	2000      	movs	r0, #0
 800a974:	690f      	ldr	r7, [r1, #16]
 800a976:	3614      	adds	r6, #20
 800a978:	6833      	ldr	r3, [r6, #0]
 800a97a:	3001      	adds	r0, #1
 800a97c:	b299      	uxth	r1, r3
 800a97e:	4351      	muls	r1, r2
 800a980:	0c1b      	lsrs	r3, r3, #16
 800a982:	4353      	muls	r3, r2
 800a984:	1949      	adds	r1, r1, r5
 800a986:	0c0d      	lsrs	r5, r1, #16
 800a988:	195b      	adds	r3, r3, r5
 800a98a:	0c1d      	lsrs	r5, r3, #16
 800a98c:	b289      	uxth	r1, r1
 800a98e:	041b      	lsls	r3, r3, #16
 800a990:	185b      	adds	r3, r3, r1
 800a992:	c608      	stmia	r6!, {r3}
 800a994:	4287      	cmp	r7, r0
 800a996:	dcef      	bgt.n	800a978 <__multadd+0x10>
 800a998:	2d00      	cmp	r5, #0
 800a99a:	d022      	beq.n	800a9e2 <__multadd+0x7a>
 800a99c:	68a3      	ldr	r3, [r4, #8]
 800a99e:	42bb      	cmp	r3, r7
 800a9a0:	dc19      	bgt.n	800a9d6 <__multadd+0x6e>
 800a9a2:	6861      	ldr	r1, [r4, #4]
 800a9a4:	9801      	ldr	r0, [sp, #4]
 800a9a6:	3101      	adds	r1, #1
 800a9a8:	f7ff ff76 	bl	800a898 <_Balloc>
 800a9ac:	1e06      	subs	r6, r0, #0
 800a9ae:	d105      	bne.n	800a9bc <__multadd+0x54>
 800a9b0:	0032      	movs	r2, r6
 800a9b2:	21ba      	movs	r1, #186	; 0xba
 800a9b4:	4b0c      	ldr	r3, [pc, #48]	; (800a9e8 <__multadd+0x80>)
 800a9b6:	480d      	ldr	r0, [pc, #52]	; (800a9ec <__multadd+0x84>)
 800a9b8:	f001 ff0a 	bl	800c7d0 <__assert_func>
 800a9bc:	0021      	movs	r1, r4
 800a9be:	6922      	ldr	r2, [r4, #16]
 800a9c0:	310c      	adds	r1, #12
 800a9c2:	3202      	adds	r2, #2
 800a9c4:	0092      	lsls	r2, r2, #2
 800a9c6:	300c      	adds	r0, #12
 800a9c8:	f001 fef2 	bl	800c7b0 <memcpy>
 800a9cc:	0021      	movs	r1, r4
 800a9ce:	9801      	ldr	r0, [sp, #4]
 800a9d0:	f7ff ffa6 	bl	800a920 <_Bfree>
 800a9d4:	0034      	movs	r4, r6
 800a9d6:	1d3b      	adds	r3, r7, #4
 800a9d8:	009b      	lsls	r3, r3, #2
 800a9da:	18e3      	adds	r3, r4, r3
 800a9dc:	605d      	str	r5, [r3, #4]
 800a9de:	1c7b      	adds	r3, r7, #1
 800a9e0:	6123      	str	r3, [r4, #16]
 800a9e2:	0020      	movs	r0, r4
 800a9e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a9e6:	46c0      	nop			; (mov r8, r8)
 800a9e8:	0800d40d 	.word	0x0800d40d
 800a9ec:	0800d41e 	.word	0x0800d41e

0800a9f0 <__s2b>:
 800a9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9f2:	0006      	movs	r6, r0
 800a9f4:	0018      	movs	r0, r3
 800a9f6:	000c      	movs	r4, r1
 800a9f8:	3008      	adds	r0, #8
 800a9fa:	2109      	movs	r1, #9
 800a9fc:	9301      	str	r3, [sp, #4]
 800a9fe:	0015      	movs	r5, r2
 800aa00:	f7f5 fc24 	bl	800024c <__divsi3>
 800aa04:	2301      	movs	r3, #1
 800aa06:	2100      	movs	r1, #0
 800aa08:	4283      	cmp	r3, r0
 800aa0a:	db0a      	blt.n	800aa22 <__s2b+0x32>
 800aa0c:	0030      	movs	r0, r6
 800aa0e:	f7ff ff43 	bl	800a898 <_Balloc>
 800aa12:	1e01      	subs	r1, r0, #0
 800aa14:	d108      	bne.n	800aa28 <__s2b+0x38>
 800aa16:	000a      	movs	r2, r1
 800aa18:	4b19      	ldr	r3, [pc, #100]	; (800aa80 <__s2b+0x90>)
 800aa1a:	481a      	ldr	r0, [pc, #104]	; (800aa84 <__s2b+0x94>)
 800aa1c:	31d3      	adds	r1, #211	; 0xd3
 800aa1e:	f001 fed7 	bl	800c7d0 <__assert_func>
 800aa22:	005b      	lsls	r3, r3, #1
 800aa24:	3101      	adds	r1, #1
 800aa26:	e7ef      	b.n	800aa08 <__s2b+0x18>
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	6143      	str	r3, [r0, #20]
 800aa2c:	2301      	movs	r3, #1
 800aa2e:	6103      	str	r3, [r0, #16]
 800aa30:	2d09      	cmp	r5, #9
 800aa32:	dd18      	ble.n	800aa66 <__s2b+0x76>
 800aa34:	0023      	movs	r3, r4
 800aa36:	3309      	adds	r3, #9
 800aa38:	001f      	movs	r7, r3
 800aa3a:	9300      	str	r3, [sp, #0]
 800aa3c:	1964      	adds	r4, r4, r5
 800aa3e:	783b      	ldrb	r3, [r7, #0]
 800aa40:	220a      	movs	r2, #10
 800aa42:	0030      	movs	r0, r6
 800aa44:	3b30      	subs	r3, #48	; 0x30
 800aa46:	f7ff ff8f 	bl	800a968 <__multadd>
 800aa4a:	3701      	adds	r7, #1
 800aa4c:	0001      	movs	r1, r0
 800aa4e:	42a7      	cmp	r7, r4
 800aa50:	d1f5      	bne.n	800aa3e <__s2b+0x4e>
 800aa52:	002c      	movs	r4, r5
 800aa54:	9b00      	ldr	r3, [sp, #0]
 800aa56:	3c08      	subs	r4, #8
 800aa58:	191c      	adds	r4, r3, r4
 800aa5a:	002f      	movs	r7, r5
 800aa5c:	9b01      	ldr	r3, [sp, #4]
 800aa5e:	429f      	cmp	r7, r3
 800aa60:	db04      	blt.n	800aa6c <__s2b+0x7c>
 800aa62:	0008      	movs	r0, r1
 800aa64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa66:	2509      	movs	r5, #9
 800aa68:	340a      	adds	r4, #10
 800aa6a:	e7f6      	b.n	800aa5a <__s2b+0x6a>
 800aa6c:	1b63      	subs	r3, r4, r5
 800aa6e:	5ddb      	ldrb	r3, [r3, r7]
 800aa70:	220a      	movs	r2, #10
 800aa72:	0030      	movs	r0, r6
 800aa74:	3b30      	subs	r3, #48	; 0x30
 800aa76:	f7ff ff77 	bl	800a968 <__multadd>
 800aa7a:	3701      	adds	r7, #1
 800aa7c:	0001      	movs	r1, r0
 800aa7e:	e7ed      	b.n	800aa5c <__s2b+0x6c>
 800aa80:	0800d40d 	.word	0x0800d40d
 800aa84:	0800d41e 	.word	0x0800d41e

0800aa88 <__hi0bits>:
 800aa88:	0003      	movs	r3, r0
 800aa8a:	0c02      	lsrs	r2, r0, #16
 800aa8c:	2000      	movs	r0, #0
 800aa8e:	4282      	cmp	r2, r0
 800aa90:	d101      	bne.n	800aa96 <__hi0bits+0xe>
 800aa92:	041b      	lsls	r3, r3, #16
 800aa94:	3010      	adds	r0, #16
 800aa96:	0e1a      	lsrs	r2, r3, #24
 800aa98:	d101      	bne.n	800aa9e <__hi0bits+0x16>
 800aa9a:	3008      	adds	r0, #8
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	0f1a      	lsrs	r2, r3, #28
 800aaa0:	d101      	bne.n	800aaa6 <__hi0bits+0x1e>
 800aaa2:	3004      	adds	r0, #4
 800aaa4:	011b      	lsls	r3, r3, #4
 800aaa6:	0f9a      	lsrs	r2, r3, #30
 800aaa8:	d101      	bne.n	800aaae <__hi0bits+0x26>
 800aaaa:	3002      	adds	r0, #2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	db03      	blt.n	800aaba <__hi0bits+0x32>
 800aab2:	3001      	adds	r0, #1
 800aab4:	005b      	lsls	r3, r3, #1
 800aab6:	d400      	bmi.n	800aaba <__hi0bits+0x32>
 800aab8:	2020      	movs	r0, #32
 800aaba:	4770      	bx	lr

0800aabc <__lo0bits>:
 800aabc:	6803      	ldr	r3, [r0, #0]
 800aabe:	0001      	movs	r1, r0
 800aac0:	2207      	movs	r2, #7
 800aac2:	0018      	movs	r0, r3
 800aac4:	4010      	ands	r0, r2
 800aac6:	4213      	tst	r3, r2
 800aac8:	d00d      	beq.n	800aae6 <__lo0bits+0x2a>
 800aaca:	3a06      	subs	r2, #6
 800aacc:	2000      	movs	r0, #0
 800aace:	4213      	tst	r3, r2
 800aad0:	d105      	bne.n	800aade <__lo0bits+0x22>
 800aad2:	3002      	adds	r0, #2
 800aad4:	4203      	tst	r3, r0
 800aad6:	d003      	beq.n	800aae0 <__lo0bits+0x24>
 800aad8:	40d3      	lsrs	r3, r2
 800aada:	0010      	movs	r0, r2
 800aadc:	600b      	str	r3, [r1, #0]
 800aade:	4770      	bx	lr
 800aae0:	089b      	lsrs	r3, r3, #2
 800aae2:	600b      	str	r3, [r1, #0]
 800aae4:	e7fb      	b.n	800aade <__lo0bits+0x22>
 800aae6:	b29a      	uxth	r2, r3
 800aae8:	2a00      	cmp	r2, #0
 800aaea:	d101      	bne.n	800aaf0 <__lo0bits+0x34>
 800aaec:	2010      	movs	r0, #16
 800aaee:	0c1b      	lsrs	r3, r3, #16
 800aaf0:	b2da      	uxtb	r2, r3
 800aaf2:	2a00      	cmp	r2, #0
 800aaf4:	d101      	bne.n	800aafa <__lo0bits+0x3e>
 800aaf6:	3008      	adds	r0, #8
 800aaf8:	0a1b      	lsrs	r3, r3, #8
 800aafa:	071a      	lsls	r2, r3, #28
 800aafc:	d101      	bne.n	800ab02 <__lo0bits+0x46>
 800aafe:	3004      	adds	r0, #4
 800ab00:	091b      	lsrs	r3, r3, #4
 800ab02:	079a      	lsls	r2, r3, #30
 800ab04:	d101      	bne.n	800ab0a <__lo0bits+0x4e>
 800ab06:	3002      	adds	r0, #2
 800ab08:	089b      	lsrs	r3, r3, #2
 800ab0a:	07da      	lsls	r2, r3, #31
 800ab0c:	d4e9      	bmi.n	800aae2 <__lo0bits+0x26>
 800ab0e:	3001      	adds	r0, #1
 800ab10:	085b      	lsrs	r3, r3, #1
 800ab12:	d1e6      	bne.n	800aae2 <__lo0bits+0x26>
 800ab14:	2020      	movs	r0, #32
 800ab16:	e7e2      	b.n	800aade <__lo0bits+0x22>

0800ab18 <__i2b>:
 800ab18:	b510      	push	{r4, lr}
 800ab1a:	000c      	movs	r4, r1
 800ab1c:	2101      	movs	r1, #1
 800ab1e:	f7ff febb 	bl	800a898 <_Balloc>
 800ab22:	2800      	cmp	r0, #0
 800ab24:	d107      	bne.n	800ab36 <__i2b+0x1e>
 800ab26:	2146      	movs	r1, #70	; 0x46
 800ab28:	4c05      	ldr	r4, [pc, #20]	; (800ab40 <__i2b+0x28>)
 800ab2a:	0002      	movs	r2, r0
 800ab2c:	4b05      	ldr	r3, [pc, #20]	; (800ab44 <__i2b+0x2c>)
 800ab2e:	0020      	movs	r0, r4
 800ab30:	31ff      	adds	r1, #255	; 0xff
 800ab32:	f001 fe4d 	bl	800c7d0 <__assert_func>
 800ab36:	2301      	movs	r3, #1
 800ab38:	6144      	str	r4, [r0, #20]
 800ab3a:	6103      	str	r3, [r0, #16]
 800ab3c:	bd10      	pop	{r4, pc}
 800ab3e:	46c0      	nop			; (mov r8, r8)
 800ab40:	0800d41e 	.word	0x0800d41e
 800ab44:	0800d40d 	.word	0x0800d40d

0800ab48 <__multiply>:
 800ab48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab4a:	0015      	movs	r5, r2
 800ab4c:	690a      	ldr	r2, [r1, #16]
 800ab4e:	692b      	ldr	r3, [r5, #16]
 800ab50:	000c      	movs	r4, r1
 800ab52:	b08b      	sub	sp, #44	; 0x2c
 800ab54:	429a      	cmp	r2, r3
 800ab56:	da01      	bge.n	800ab5c <__multiply+0x14>
 800ab58:	002c      	movs	r4, r5
 800ab5a:	000d      	movs	r5, r1
 800ab5c:	6927      	ldr	r7, [r4, #16]
 800ab5e:	692e      	ldr	r6, [r5, #16]
 800ab60:	6861      	ldr	r1, [r4, #4]
 800ab62:	19bb      	adds	r3, r7, r6
 800ab64:	9303      	str	r3, [sp, #12]
 800ab66:	68a3      	ldr	r3, [r4, #8]
 800ab68:	19ba      	adds	r2, r7, r6
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	da00      	bge.n	800ab70 <__multiply+0x28>
 800ab6e:	3101      	adds	r1, #1
 800ab70:	f7ff fe92 	bl	800a898 <_Balloc>
 800ab74:	9002      	str	r0, [sp, #8]
 800ab76:	2800      	cmp	r0, #0
 800ab78:	d106      	bne.n	800ab88 <__multiply+0x40>
 800ab7a:	21b1      	movs	r1, #177	; 0xb1
 800ab7c:	4b48      	ldr	r3, [pc, #288]	; (800aca0 <__multiply+0x158>)
 800ab7e:	4849      	ldr	r0, [pc, #292]	; (800aca4 <__multiply+0x15c>)
 800ab80:	9a02      	ldr	r2, [sp, #8]
 800ab82:	0049      	lsls	r1, r1, #1
 800ab84:	f001 fe24 	bl	800c7d0 <__assert_func>
 800ab88:	9b02      	ldr	r3, [sp, #8]
 800ab8a:	2200      	movs	r2, #0
 800ab8c:	3314      	adds	r3, #20
 800ab8e:	469c      	mov	ip, r3
 800ab90:	19bb      	adds	r3, r7, r6
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	4463      	add	r3, ip
 800ab96:	9304      	str	r3, [sp, #16]
 800ab98:	4663      	mov	r3, ip
 800ab9a:	9904      	ldr	r1, [sp, #16]
 800ab9c:	428b      	cmp	r3, r1
 800ab9e:	d32a      	bcc.n	800abf6 <__multiply+0xae>
 800aba0:	0023      	movs	r3, r4
 800aba2:	00bf      	lsls	r7, r7, #2
 800aba4:	3314      	adds	r3, #20
 800aba6:	3514      	adds	r5, #20
 800aba8:	9308      	str	r3, [sp, #32]
 800abaa:	00b6      	lsls	r6, r6, #2
 800abac:	19db      	adds	r3, r3, r7
 800abae:	9305      	str	r3, [sp, #20]
 800abb0:	19ab      	adds	r3, r5, r6
 800abb2:	9309      	str	r3, [sp, #36]	; 0x24
 800abb4:	2304      	movs	r3, #4
 800abb6:	9306      	str	r3, [sp, #24]
 800abb8:	0023      	movs	r3, r4
 800abba:	9a05      	ldr	r2, [sp, #20]
 800abbc:	3315      	adds	r3, #21
 800abbe:	9501      	str	r5, [sp, #4]
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d305      	bcc.n	800abd0 <__multiply+0x88>
 800abc4:	1b13      	subs	r3, r2, r4
 800abc6:	3b15      	subs	r3, #21
 800abc8:	089b      	lsrs	r3, r3, #2
 800abca:	3301      	adds	r3, #1
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	9306      	str	r3, [sp, #24]
 800abd0:	9b01      	ldr	r3, [sp, #4]
 800abd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d310      	bcc.n	800abfa <__multiply+0xb2>
 800abd8:	9b03      	ldr	r3, [sp, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	dd05      	ble.n	800abea <__multiply+0xa2>
 800abde:	9b04      	ldr	r3, [sp, #16]
 800abe0:	3b04      	subs	r3, #4
 800abe2:	9304      	str	r3, [sp, #16]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	d056      	beq.n	800ac98 <__multiply+0x150>
 800abea:	9b02      	ldr	r3, [sp, #8]
 800abec:	9a03      	ldr	r2, [sp, #12]
 800abee:	0018      	movs	r0, r3
 800abf0:	611a      	str	r2, [r3, #16]
 800abf2:	b00b      	add	sp, #44	; 0x2c
 800abf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abf6:	c304      	stmia	r3!, {r2}
 800abf8:	e7cf      	b.n	800ab9a <__multiply+0x52>
 800abfa:	9b01      	ldr	r3, [sp, #4]
 800abfc:	6818      	ldr	r0, [r3, #0]
 800abfe:	b280      	uxth	r0, r0
 800ac00:	2800      	cmp	r0, #0
 800ac02:	d01e      	beq.n	800ac42 <__multiply+0xfa>
 800ac04:	4667      	mov	r7, ip
 800ac06:	2500      	movs	r5, #0
 800ac08:	9e08      	ldr	r6, [sp, #32]
 800ac0a:	ce02      	ldmia	r6!, {r1}
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	9307      	str	r3, [sp, #28]
 800ac10:	b28b      	uxth	r3, r1
 800ac12:	4343      	muls	r3, r0
 800ac14:	001a      	movs	r2, r3
 800ac16:	466b      	mov	r3, sp
 800ac18:	8b9b      	ldrh	r3, [r3, #28]
 800ac1a:	18d3      	adds	r3, r2, r3
 800ac1c:	195b      	adds	r3, r3, r5
 800ac1e:	0c0d      	lsrs	r5, r1, #16
 800ac20:	4345      	muls	r5, r0
 800ac22:	9a07      	ldr	r2, [sp, #28]
 800ac24:	0c11      	lsrs	r1, r2, #16
 800ac26:	1869      	adds	r1, r5, r1
 800ac28:	0c1a      	lsrs	r2, r3, #16
 800ac2a:	188a      	adds	r2, r1, r2
 800ac2c:	b29b      	uxth	r3, r3
 800ac2e:	0c15      	lsrs	r5, r2, #16
 800ac30:	0412      	lsls	r2, r2, #16
 800ac32:	431a      	orrs	r2, r3
 800ac34:	9b05      	ldr	r3, [sp, #20]
 800ac36:	c704      	stmia	r7!, {r2}
 800ac38:	42b3      	cmp	r3, r6
 800ac3a:	d8e6      	bhi.n	800ac0a <__multiply+0xc2>
 800ac3c:	4663      	mov	r3, ip
 800ac3e:	9a06      	ldr	r2, [sp, #24]
 800ac40:	509d      	str	r5, [r3, r2]
 800ac42:	9b01      	ldr	r3, [sp, #4]
 800ac44:	6818      	ldr	r0, [r3, #0]
 800ac46:	0c00      	lsrs	r0, r0, #16
 800ac48:	d020      	beq.n	800ac8c <__multiply+0x144>
 800ac4a:	4663      	mov	r3, ip
 800ac4c:	0025      	movs	r5, r4
 800ac4e:	4661      	mov	r1, ip
 800ac50:	2700      	movs	r7, #0
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	3514      	adds	r5, #20
 800ac56:	682a      	ldr	r2, [r5, #0]
 800ac58:	680e      	ldr	r6, [r1, #0]
 800ac5a:	b292      	uxth	r2, r2
 800ac5c:	4342      	muls	r2, r0
 800ac5e:	0c36      	lsrs	r6, r6, #16
 800ac60:	1992      	adds	r2, r2, r6
 800ac62:	19d2      	adds	r2, r2, r7
 800ac64:	0416      	lsls	r6, r2, #16
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	431e      	orrs	r6, r3
 800ac6a:	600e      	str	r6, [r1, #0]
 800ac6c:	cd40      	ldmia	r5!, {r6}
 800ac6e:	684b      	ldr	r3, [r1, #4]
 800ac70:	0c36      	lsrs	r6, r6, #16
 800ac72:	4346      	muls	r6, r0
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	0c12      	lsrs	r2, r2, #16
 800ac78:	18f3      	adds	r3, r6, r3
 800ac7a:	189b      	adds	r3, r3, r2
 800ac7c:	9a05      	ldr	r2, [sp, #20]
 800ac7e:	0c1f      	lsrs	r7, r3, #16
 800ac80:	3104      	adds	r1, #4
 800ac82:	42aa      	cmp	r2, r5
 800ac84:	d8e7      	bhi.n	800ac56 <__multiply+0x10e>
 800ac86:	4662      	mov	r2, ip
 800ac88:	9906      	ldr	r1, [sp, #24]
 800ac8a:	5053      	str	r3, [r2, r1]
 800ac8c:	9b01      	ldr	r3, [sp, #4]
 800ac8e:	3304      	adds	r3, #4
 800ac90:	9301      	str	r3, [sp, #4]
 800ac92:	2304      	movs	r3, #4
 800ac94:	449c      	add	ip, r3
 800ac96:	e79b      	b.n	800abd0 <__multiply+0x88>
 800ac98:	9b03      	ldr	r3, [sp, #12]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	9303      	str	r3, [sp, #12]
 800ac9e:	e79b      	b.n	800abd8 <__multiply+0x90>
 800aca0:	0800d40d 	.word	0x0800d40d
 800aca4:	0800d41e 	.word	0x0800d41e

0800aca8 <__pow5mult>:
 800aca8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acaa:	2303      	movs	r3, #3
 800acac:	0015      	movs	r5, r2
 800acae:	0007      	movs	r7, r0
 800acb0:	000e      	movs	r6, r1
 800acb2:	401a      	ands	r2, r3
 800acb4:	421d      	tst	r5, r3
 800acb6:	d008      	beq.n	800acca <__pow5mult+0x22>
 800acb8:	4925      	ldr	r1, [pc, #148]	; (800ad50 <__pow5mult+0xa8>)
 800acba:	3a01      	subs	r2, #1
 800acbc:	0092      	lsls	r2, r2, #2
 800acbe:	5852      	ldr	r2, [r2, r1]
 800acc0:	2300      	movs	r3, #0
 800acc2:	0031      	movs	r1, r6
 800acc4:	f7ff fe50 	bl	800a968 <__multadd>
 800acc8:	0006      	movs	r6, r0
 800acca:	10ad      	asrs	r5, r5, #2
 800accc:	d03d      	beq.n	800ad4a <__pow5mult+0xa2>
 800acce:	69fc      	ldr	r4, [r7, #28]
 800acd0:	2c00      	cmp	r4, #0
 800acd2:	d10f      	bne.n	800acf4 <__pow5mult+0x4c>
 800acd4:	2010      	movs	r0, #16
 800acd6:	f7ff fd21 	bl	800a71c <malloc>
 800acda:	1e02      	subs	r2, r0, #0
 800acdc:	61f8      	str	r0, [r7, #28]
 800acde:	d105      	bne.n	800acec <__pow5mult+0x44>
 800ace0:	21b4      	movs	r1, #180	; 0xb4
 800ace2:	4b1c      	ldr	r3, [pc, #112]	; (800ad54 <__pow5mult+0xac>)
 800ace4:	481c      	ldr	r0, [pc, #112]	; (800ad58 <__pow5mult+0xb0>)
 800ace6:	31ff      	adds	r1, #255	; 0xff
 800ace8:	f001 fd72 	bl	800c7d0 <__assert_func>
 800acec:	6044      	str	r4, [r0, #4]
 800acee:	6084      	str	r4, [r0, #8]
 800acf0:	6004      	str	r4, [r0, #0]
 800acf2:	60c4      	str	r4, [r0, #12]
 800acf4:	69fb      	ldr	r3, [r7, #28]
 800acf6:	689c      	ldr	r4, [r3, #8]
 800acf8:	9301      	str	r3, [sp, #4]
 800acfa:	2c00      	cmp	r4, #0
 800acfc:	d108      	bne.n	800ad10 <__pow5mult+0x68>
 800acfe:	0038      	movs	r0, r7
 800ad00:	4916      	ldr	r1, [pc, #88]	; (800ad5c <__pow5mult+0xb4>)
 800ad02:	f7ff ff09 	bl	800ab18 <__i2b>
 800ad06:	9b01      	ldr	r3, [sp, #4]
 800ad08:	0004      	movs	r4, r0
 800ad0a:	6098      	str	r0, [r3, #8]
 800ad0c:	2300      	movs	r3, #0
 800ad0e:	6003      	str	r3, [r0, #0]
 800ad10:	2301      	movs	r3, #1
 800ad12:	421d      	tst	r5, r3
 800ad14:	d00a      	beq.n	800ad2c <__pow5mult+0x84>
 800ad16:	0031      	movs	r1, r6
 800ad18:	0022      	movs	r2, r4
 800ad1a:	0038      	movs	r0, r7
 800ad1c:	f7ff ff14 	bl	800ab48 <__multiply>
 800ad20:	0031      	movs	r1, r6
 800ad22:	9001      	str	r0, [sp, #4]
 800ad24:	0038      	movs	r0, r7
 800ad26:	f7ff fdfb 	bl	800a920 <_Bfree>
 800ad2a:	9e01      	ldr	r6, [sp, #4]
 800ad2c:	106d      	asrs	r5, r5, #1
 800ad2e:	d00c      	beq.n	800ad4a <__pow5mult+0xa2>
 800ad30:	6820      	ldr	r0, [r4, #0]
 800ad32:	2800      	cmp	r0, #0
 800ad34:	d107      	bne.n	800ad46 <__pow5mult+0x9e>
 800ad36:	0022      	movs	r2, r4
 800ad38:	0021      	movs	r1, r4
 800ad3a:	0038      	movs	r0, r7
 800ad3c:	f7ff ff04 	bl	800ab48 <__multiply>
 800ad40:	2300      	movs	r3, #0
 800ad42:	6020      	str	r0, [r4, #0]
 800ad44:	6003      	str	r3, [r0, #0]
 800ad46:	0004      	movs	r4, r0
 800ad48:	e7e2      	b.n	800ad10 <__pow5mult+0x68>
 800ad4a:	0030      	movs	r0, r6
 800ad4c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ad4e:	46c0      	nop			; (mov r8, r8)
 800ad50:	0800d568 	.word	0x0800d568
 800ad54:	0800d39e 	.word	0x0800d39e
 800ad58:	0800d41e 	.word	0x0800d41e
 800ad5c:	00000271 	.word	0x00000271

0800ad60 <__lshift>:
 800ad60:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad62:	000c      	movs	r4, r1
 800ad64:	0017      	movs	r7, r2
 800ad66:	6923      	ldr	r3, [r4, #16]
 800ad68:	1155      	asrs	r5, r2, #5
 800ad6a:	b087      	sub	sp, #28
 800ad6c:	18eb      	adds	r3, r5, r3
 800ad6e:	9302      	str	r3, [sp, #8]
 800ad70:	3301      	adds	r3, #1
 800ad72:	9301      	str	r3, [sp, #4]
 800ad74:	6849      	ldr	r1, [r1, #4]
 800ad76:	68a3      	ldr	r3, [r4, #8]
 800ad78:	9004      	str	r0, [sp, #16]
 800ad7a:	9a01      	ldr	r2, [sp, #4]
 800ad7c:	4293      	cmp	r3, r2
 800ad7e:	db10      	blt.n	800ada2 <__lshift+0x42>
 800ad80:	9804      	ldr	r0, [sp, #16]
 800ad82:	f7ff fd89 	bl	800a898 <_Balloc>
 800ad86:	2300      	movs	r3, #0
 800ad88:	0002      	movs	r2, r0
 800ad8a:	0006      	movs	r6, r0
 800ad8c:	0019      	movs	r1, r3
 800ad8e:	3214      	adds	r2, #20
 800ad90:	4298      	cmp	r0, r3
 800ad92:	d10c      	bne.n	800adae <__lshift+0x4e>
 800ad94:	31df      	adds	r1, #223	; 0xdf
 800ad96:	0032      	movs	r2, r6
 800ad98:	4b26      	ldr	r3, [pc, #152]	; (800ae34 <__lshift+0xd4>)
 800ad9a:	4827      	ldr	r0, [pc, #156]	; (800ae38 <__lshift+0xd8>)
 800ad9c:	31ff      	adds	r1, #255	; 0xff
 800ad9e:	f001 fd17 	bl	800c7d0 <__assert_func>
 800ada2:	3101      	adds	r1, #1
 800ada4:	005b      	lsls	r3, r3, #1
 800ada6:	e7e8      	b.n	800ad7a <__lshift+0x1a>
 800ada8:	0098      	lsls	r0, r3, #2
 800adaa:	5011      	str	r1, [r2, r0]
 800adac:	3301      	adds	r3, #1
 800adae:	42ab      	cmp	r3, r5
 800adb0:	dbfa      	blt.n	800ada8 <__lshift+0x48>
 800adb2:	43eb      	mvns	r3, r5
 800adb4:	17db      	asrs	r3, r3, #31
 800adb6:	401d      	ands	r5, r3
 800adb8:	211f      	movs	r1, #31
 800adba:	0023      	movs	r3, r4
 800adbc:	0038      	movs	r0, r7
 800adbe:	00ad      	lsls	r5, r5, #2
 800adc0:	1955      	adds	r5, r2, r5
 800adc2:	6922      	ldr	r2, [r4, #16]
 800adc4:	3314      	adds	r3, #20
 800adc6:	0092      	lsls	r2, r2, #2
 800adc8:	4008      	ands	r0, r1
 800adca:	4684      	mov	ip, r0
 800adcc:	189a      	adds	r2, r3, r2
 800adce:	420f      	tst	r7, r1
 800add0:	d02a      	beq.n	800ae28 <__lshift+0xc8>
 800add2:	3101      	adds	r1, #1
 800add4:	1a09      	subs	r1, r1, r0
 800add6:	9105      	str	r1, [sp, #20]
 800add8:	2100      	movs	r1, #0
 800adda:	9503      	str	r5, [sp, #12]
 800addc:	4667      	mov	r7, ip
 800adde:	6818      	ldr	r0, [r3, #0]
 800ade0:	40b8      	lsls	r0, r7
 800ade2:	4308      	orrs	r0, r1
 800ade4:	9903      	ldr	r1, [sp, #12]
 800ade6:	c101      	stmia	r1!, {r0}
 800ade8:	9103      	str	r1, [sp, #12]
 800adea:	9805      	ldr	r0, [sp, #20]
 800adec:	cb02      	ldmia	r3!, {r1}
 800adee:	40c1      	lsrs	r1, r0
 800adf0:	429a      	cmp	r2, r3
 800adf2:	d8f3      	bhi.n	800addc <__lshift+0x7c>
 800adf4:	0020      	movs	r0, r4
 800adf6:	3015      	adds	r0, #21
 800adf8:	2304      	movs	r3, #4
 800adfa:	4282      	cmp	r2, r0
 800adfc:	d304      	bcc.n	800ae08 <__lshift+0xa8>
 800adfe:	1b13      	subs	r3, r2, r4
 800ae00:	3b15      	subs	r3, #21
 800ae02:	089b      	lsrs	r3, r3, #2
 800ae04:	3301      	adds	r3, #1
 800ae06:	009b      	lsls	r3, r3, #2
 800ae08:	50e9      	str	r1, [r5, r3]
 800ae0a:	2900      	cmp	r1, #0
 800ae0c:	d002      	beq.n	800ae14 <__lshift+0xb4>
 800ae0e:	9b02      	ldr	r3, [sp, #8]
 800ae10:	3302      	adds	r3, #2
 800ae12:	9301      	str	r3, [sp, #4]
 800ae14:	9b01      	ldr	r3, [sp, #4]
 800ae16:	9804      	ldr	r0, [sp, #16]
 800ae18:	3b01      	subs	r3, #1
 800ae1a:	0021      	movs	r1, r4
 800ae1c:	6133      	str	r3, [r6, #16]
 800ae1e:	f7ff fd7f 	bl	800a920 <_Bfree>
 800ae22:	0030      	movs	r0, r6
 800ae24:	b007      	add	sp, #28
 800ae26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae28:	cb02      	ldmia	r3!, {r1}
 800ae2a:	c502      	stmia	r5!, {r1}
 800ae2c:	429a      	cmp	r2, r3
 800ae2e:	d8fb      	bhi.n	800ae28 <__lshift+0xc8>
 800ae30:	e7f0      	b.n	800ae14 <__lshift+0xb4>
 800ae32:	46c0      	nop			; (mov r8, r8)
 800ae34:	0800d40d 	.word	0x0800d40d
 800ae38:	0800d41e 	.word	0x0800d41e

0800ae3c <__mcmp>:
 800ae3c:	b530      	push	{r4, r5, lr}
 800ae3e:	690b      	ldr	r3, [r1, #16]
 800ae40:	6904      	ldr	r4, [r0, #16]
 800ae42:	0002      	movs	r2, r0
 800ae44:	1ae0      	subs	r0, r4, r3
 800ae46:	429c      	cmp	r4, r3
 800ae48:	d10e      	bne.n	800ae68 <__mcmp+0x2c>
 800ae4a:	3214      	adds	r2, #20
 800ae4c:	009b      	lsls	r3, r3, #2
 800ae4e:	3114      	adds	r1, #20
 800ae50:	0014      	movs	r4, r2
 800ae52:	18c9      	adds	r1, r1, r3
 800ae54:	18d2      	adds	r2, r2, r3
 800ae56:	3a04      	subs	r2, #4
 800ae58:	3904      	subs	r1, #4
 800ae5a:	6815      	ldr	r5, [r2, #0]
 800ae5c:	680b      	ldr	r3, [r1, #0]
 800ae5e:	429d      	cmp	r5, r3
 800ae60:	d003      	beq.n	800ae6a <__mcmp+0x2e>
 800ae62:	2001      	movs	r0, #1
 800ae64:	429d      	cmp	r5, r3
 800ae66:	d303      	bcc.n	800ae70 <__mcmp+0x34>
 800ae68:	bd30      	pop	{r4, r5, pc}
 800ae6a:	4294      	cmp	r4, r2
 800ae6c:	d3f3      	bcc.n	800ae56 <__mcmp+0x1a>
 800ae6e:	e7fb      	b.n	800ae68 <__mcmp+0x2c>
 800ae70:	4240      	negs	r0, r0
 800ae72:	e7f9      	b.n	800ae68 <__mcmp+0x2c>

0800ae74 <__mdiff>:
 800ae74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae76:	000e      	movs	r6, r1
 800ae78:	0007      	movs	r7, r0
 800ae7a:	0011      	movs	r1, r2
 800ae7c:	0030      	movs	r0, r6
 800ae7e:	b087      	sub	sp, #28
 800ae80:	0014      	movs	r4, r2
 800ae82:	f7ff ffdb 	bl	800ae3c <__mcmp>
 800ae86:	1e05      	subs	r5, r0, #0
 800ae88:	d110      	bne.n	800aeac <__mdiff+0x38>
 800ae8a:	0001      	movs	r1, r0
 800ae8c:	0038      	movs	r0, r7
 800ae8e:	f7ff fd03 	bl	800a898 <_Balloc>
 800ae92:	1e02      	subs	r2, r0, #0
 800ae94:	d104      	bne.n	800aea0 <__mdiff+0x2c>
 800ae96:	4b3f      	ldr	r3, [pc, #252]	; (800af94 <__mdiff+0x120>)
 800ae98:	483f      	ldr	r0, [pc, #252]	; (800af98 <__mdiff+0x124>)
 800ae9a:	4940      	ldr	r1, [pc, #256]	; (800af9c <__mdiff+0x128>)
 800ae9c:	f001 fc98 	bl	800c7d0 <__assert_func>
 800aea0:	2301      	movs	r3, #1
 800aea2:	6145      	str	r5, [r0, #20]
 800aea4:	6103      	str	r3, [r0, #16]
 800aea6:	0010      	movs	r0, r2
 800aea8:	b007      	add	sp, #28
 800aeaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aeac:	2301      	movs	r3, #1
 800aeae:	9301      	str	r3, [sp, #4]
 800aeb0:	2800      	cmp	r0, #0
 800aeb2:	db04      	blt.n	800aebe <__mdiff+0x4a>
 800aeb4:	0023      	movs	r3, r4
 800aeb6:	0034      	movs	r4, r6
 800aeb8:	001e      	movs	r6, r3
 800aeba:	2300      	movs	r3, #0
 800aebc:	9301      	str	r3, [sp, #4]
 800aebe:	0038      	movs	r0, r7
 800aec0:	6861      	ldr	r1, [r4, #4]
 800aec2:	f7ff fce9 	bl	800a898 <_Balloc>
 800aec6:	1e02      	subs	r2, r0, #0
 800aec8:	d103      	bne.n	800aed2 <__mdiff+0x5e>
 800aeca:	4b32      	ldr	r3, [pc, #200]	; (800af94 <__mdiff+0x120>)
 800aecc:	4832      	ldr	r0, [pc, #200]	; (800af98 <__mdiff+0x124>)
 800aece:	4934      	ldr	r1, [pc, #208]	; (800afa0 <__mdiff+0x12c>)
 800aed0:	e7e4      	b.n	800ae9c <__mdiff+0x28>
 800aed2:	9b01      	ldr	r3, [sp, #4]
 800aed4:	2700      	movs	r7, #0
 800aed6:	60c3      	str	r3, [r0, #12]
 800aed8:	6920      	ldr	r0, [r4, #16]
 800aeda:	3414      	adds	r4, #20
 800aedc:	0083      	lsls	r3, r0, #2
 800aede:	18e3      	adds	r3, r4, r3
 800aee0:	0021      	movs	r1, r4
 800aee2:	9401      	str	r4, [sp, #4]
 800aee4:	0034      	movs	r4, r6
 800aee6:	9302      	str	r3, [sp, #8]
 800aee8:	6933      	ldr	r3, [r6, #16]
 800aeea:	3414      	adds	r4, #20
 800aeec:	009b      	lsls	r3, r3, #2
 800aeee:	18e3      	adds	r3, r4, r3
 800aef0:	9303      	str	r3, [sp, #12]
 800aef2:	0013      	movs	r3, r2
 800aef4:	3314      	adds	r3, #20
 800aef6:	469c      	mov	ip, r3
 800aef8:	9305      	str	r3, [sp, #20]
 800aefa:	9104      	str	r1, [sp, #16]
 800aefc:	9b04      	ldr	r3, [sp, #16]
 800aefe:	cc02      	ldmia	r4!, {r1}
 800af00:	cb20      	ldmia	r3!, {r5}
 800af02:	9304      	str	r3, [sp, #16]
 800af04:	b2ab      	uxth	r3, r5
 800af06:	19df      	adds	r7, r3, r7
 800af08:	b28b      	uxth	r3, r1
 800af0a:	1afb      	subs	r3, r7, r3
 800af0c:	0c09      	lsrs	r1, r1, #16
 800af0e:	0c2d      	lsrs	r5, r5, #16
 800af10:	1a6d      	subs	r5, r5, r1
 800af12:	1419      	asrs	r1, r3, #16
 800af14:	1869      	adds	r1, r5, r1
 800af16:	b29b      	uxth	r3, r3
 800af18:	140f      	asrs	r7, r1, #16
 800af1a:	0409      	lsls	r1, r1, #16
 800af1c:	4319      	orrs	r1, r3
 800af1e:	4663      	mov	r3, ip
 800af20:	c302      	stmia	r3!, {r1}
 800af22:	469c      	mov	ip, r3
 800af24:	9b03      	ldr	r3, [sp, #12]
 800af26:	42a3      	cmp	r3, r4
 800af28:	d8e8      	bhi.n	800aefc <__mdiff+0x88>
 800af2a:	0031      	movs	r1, r6
 800af2c:	9c03      	ldr	r4, [sp, #12]
 800af2e:	3115      	adds	r1, #21
 800af30:	2304      	movs	r3, #4
 800af32:	428c      	cmp	r4, r1
 800af34:	d304      	bcc.n	800af40 <__mdiff+0xcc>
 800af36:	1ba3      	subs	r3, r4, r6
 800af38:	3b15      	subs	r3, #21
 800af3a:	089b      	lsrs	r3, r3, #2
 800af3c:	3301      	adds	r3, #1
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	9901      	ldr	r1, [sp, #4]
 800af42:	18cd      	adds	r5, r1, r3
 800af44:	9905      	ldr	r1, [sp, #20]
 800af46:	002e      	movs	r6, r5
 800af48:	18cb      	adds	r3, r1, r3
 800af4a:	469c      	mov	ip, r3
 800af4c:	9902      	ldr	r1, [sp, #8]
 800af4e:	428e      	cmp	r6, r1
 800af50:	d310      	bcc.n	800af74 <__mdiff+0x100>
 800af52:	9e02      	ldr	r6, [sp, #8]
 800af54:	1ee9      	subs	r1, r5, #3
 800af56:	2400      	movs	r4, #0
 800af58:	428e      	cmp	r6, r1
 800af5a:	d304      	bcc.n	800af66 <__mdiff+0xf2>
 800af5c:	0031      	movs	r1, r6
 800af5e:	3103      	adds	r1, #3
 800af60:	1b49      	subs	r1, r1, r5
 800af62:	0889      	lsrs	r1, r1, #2
 800af64:	008c      	lsls	r4, r1, #2
 800af66:	191b      	adds	r3, r3, r4
 800af68:	3b04      	subs	r3, #4
 800af6a:	6819      	ldr	r1, [r3, #0]
 800af6c:	2900      	cmp	r1, #0
 800af6e:	d00f      	beq.n	800af90 <__mdiff+0x11c>
 800af70:	6110      	str	r0, [r2, #16]
 800af72:	e798      	b.n	800aea6 <__mdiff+0x32>
 800af74:	ce02      	ldmia	r6!, {r1}
 800af76:	b28c      	uxth	r4, r1
 800af78:	19e4      	adds	r4, r4, r7
 800af7a:	0c0f      	lsrs	r7, r1, #16
 800af7c:	1421      	asrs	r1, r4, #16
 800af7e:	1879      	adds	r1, r7, r1
 800af80:	b2a4      	uxth	r4, r4
 800af82:	140f      	asrs	r7, r1, #16
 800af84:	0409      	lsls	r1, r1, #16
 800af86:	4321      	orrs	r1, r4
 800af88:	4664      	mov	r4, ip
 800af8a:	c402      	stmia	r4!, {r1}
 800af8c:	46a4      	mov	ip, r4
 800af8e:	e7dd      	b.n	800af4c <__mdiff+0xd8>
 800af90:	3801      	subs	r0, #1
 800af92:	e7e9      	b.n	800af68 <__mdiff+0xf4>
 800af94:	0800d40d 	.word	0x0800d40d
 800af98:	0800d41e 	.word	0x0800d41e
 800af9c:	00000237 	.word	0x00000237
 800afa0:	00000245 	.word	0x00000245

0800afa4 <__ulp>:
 800afa4:	2000      	movs	r0, #0
 800afa6:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <__ulp+0x30>)
 800afa8:	4019      	ands	r1, r3
 800afaa:	4b0b      	ldr	r3, [pc, #44]	; (800afd8 <__ulp+0x34>)
 800afac:	18c9      	adds	r1, r1, r3
 800afae:	4281      	cmp	r1, r0
 800afb0:	dc06      	bgt.n	800afc0 <__ulp+0x1c>
 800afb2:	4249      	negs	r1, r1
 800afb4:	150b      	asrs	r3, r1, #20
 800afb6:	2b13      	cmp	r3, #19
 800afb8:	dc03      	bgt.n	800afc2 <__ulp+0x1e>
 800afba:	2180      	movs	r1, #128	; 0x80
 800afbc:	0309      	lsls	r1, r1, #12
 800afbe:	4119      	asrs	r1, r3
 800afc0:	4770      	bx	lr
 800afc2:	3b14      	subs	r3, #20
 800afc4:	2001      	movs	r0, #1
 800afc6:	2b1e      	cmp	r3, #30
 800afc8:	dc02      	bgt.n	800afd0 <__ulp+0x2c>
 800afca:	2080      	movs	r0, #128	; 0x80
 800afcc:	0600      	lsls	r0, r0, #24
 800afce:	40d8      	lsrs	r0, r3
 800afd0:	2100      	movs	r1, #0
 800afd2:	e7f5      	b.n	800afc0 <__ulp+0x1c>
 800afd4:	7ff00000 	.word	0x7ff00000
 800afd8:	fcc00000 	.word	0xfcc00000

0800afdc <__b2d>:
 800afdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afde:	0006      	movs	r6, r0
 800afe0:	6903      	ldr	r3, [r0, #16]
 800afe2:	3614      	adds	r6, #20
 800afe4:	009b      	lsls	r3, r3, #2
 800afe6:	18f3      	adds	r3, r6, r3
 800afe8:	1f1d      	subs	r5, r3, #4
 800afea:	682c      	ldr	r4, [r5, #0]
 800afec:	000f      	movs	r7, r1
 800afee:	0020      	movs	r0, r4
 800aff0:	9301      	str	r3, [sp, #4]
 800aff2:	f7ff fd49 	bl	800aa88 <__hi0bits>
 800aff6:	2220      	movs	r2, #32
 800aff8:	1a12      	subs	r2, r2, r0
 800affa:	603a      	str	r2, [r7, #0]
 800affc:	0003      	movs	r3, r0
 800affe:	4a1c      	ldr	r2, [pc, #112]	; (800b070 <__b2d+0x94>)
 800b000:	280a      	cmp	r0, #10
 800b002:	dc15      	bgt.n	800b030 <__b2d+0x54>
 800b004:	210b      	movs	r1, #11
 800b006:	0027      	movs	r7, r4
 800b008:	1a09      	subs	r1, r1, r0
 800b00a:	40cf      	lsrs	r7, r1
 800b00c:	433a      	orrs	r2, r7
 800b00e:	468c      	mov	ip, r1
 800b010:	0011      	movs	r1, r2
 800b012:	2200      	movs	r2, #0
 800b014:	42ae      	cmp	r6, r5
 800b016:	d202      	bcs.n	800b01e <__b2d+0x42>
 800b018:	9a01      	ldr	r2, [sp, #4]
 800b01a:	3a08      	subs	r2, #8
 800b01c:	6812      	ldr	r2, [r2, #0]
 800b01e:	3315      	adds	r3, #21
 800b020:	409c      	lsls	r4, r3
 800b022:	4663      	mov	r3, ip
 800b024:	0027      	movs	r7, r4
 800b026:	40da      	lsrs	r2, r3
 800b028:	4317      	orrs	r7, r2
 800b02a:	0038      	movs	r0, r7
 800b02c:	b003      	add	sp, #12
 800b02e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b030:	2700      	movs	r7, #0
 800b032:	42ae      	cmp	r6, r5
 800b034:	d202      	bcs.n	800b03c <__b2d+0x60>
 800b036:	9d01      	ldr	r5, [sp, #4]
 800b038:	3d08      	subs	r5, #8
 800b03a:	682f      	ldr	r7, [r5, #0]
 800b03c:	210b      	movs	r1, #11
 800b03e:	4249      	negs	r1, r1
 800b040:	468c      	mov	ip, r1
 800b042:	449c      	add	ip, r3
 800b044:	2b0b      	cmp	r3, #11
 800b046:	d010      	beq.n	800b06a <__b2d+0x8e>
 800b048:	4661      	mov	r1, ip
 800b04a:	2320      	movs	r3, #32
 800b04c:	408c      	lsls	r4, r1
 800b04e:	1a5b      	subs	r3, r3, r1
 800b050:	0039      	movs	r1, r7
 800b052:	40d9      	lsrs	r1, r3
 800b054:	430c      	orrs	r4, r1
 800b056:	4322      	orrs	r2, r4
 800b058:	0011      	movs	r1, r2
 800b05a:	2200      	movs	r2, #0
 800b05c:	42b5      	cmp	r5, r6
 800b05e:	d901      	bls.n	800b064 <__b2d+0x88>
 800b060:	3d04      	subs	r5, #4
 800b062:	682a      	ldr	r2, [r5, #0]
 800b064:	4664      	mov	r4, ip
 800b066:	40a7      	lsls	r7, r4
 800b068:	e7dd      	b.n	800b026 <__b2d+0x4a>
 800b06a:	4322      	orrs	r2, r4
 800b06c:	0011      	movs	r1, r2
 800b06e:	e7dc      	b.n	800b02a <__b2d+0x4e>
 800b070:	3ff00000 	.word	0x3ff00000

0800b074 <__d2b>:
 800b074:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b076:	2101      	movs	r1, #1
 800b078:	0014      	movs	r4, r2
 800b07a:	001d      	movs	r5, r3
 800b07c:	9f08      	ldr	r7, [sp, #32]
 800b07e:	f7ff fc0b 	bl	800a898 <_Balloc>
 800b082:	1e06      	subs	r6, r0, #0
 800b084:	d105      	bne.n	800b092 <__d2b+0x1e>
 800b086:	0032      	movs	r2, r6
 800b088:	4b24      	ldr	r3, [pc, #144]	; (800b11c <__d2b+0xa8>)
 800b08a:	4825      	ldr	r0, [pc, #148]	; (800b120 <__d2b+0xac>)
 800b08c:	4925      	ldr	r1, [pc, #148]	; (800b124 <__d2b+0xb0>)
 800b08e:	f001 fb9f 	bl	800c7d0 <__assert_func>
 800b092:	032b      	lsls	r3, r5, #12
 800b094:	006d      	lsls	r5, r5, #1
 800b096:	0b1b      	lsrs	r3, r3, #12
 800b098:	0d6d      	lsrs	r5, r5, #21
 800b09a:	d125      	bne.n	800b0e8 <__d2b+0x74>
 800b09c:	9301      	str	r3, [sp, #4]
 800b09e:	2c00      	cmp	r4, #0
 800b0a0:	d028      	beq.n	800b0f4 <__d2b+0x80>
 800b0a2:	4668      	mov	r0, sp
 800b0a4:	9400      	str	r4, [sp, #0]
 800b0a6:	f7ff fd09 	bl	800aabc <__lo0bits>
 800b0aa:	9b01      	ldr	r3, [sp, #4]
 800b0ac:	9900      	ldr	r1, [sp, #0]
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d01e      	beq.n	800b0f0 <__d2b+0x7c>
 800b0b2:	2220      	movs	r2, #32
 800b0b4:	001c      	movs	r4, r3
 800b0b6:	1a12      	subs	r2, r2, r0
 800b0b8:	4094      	lsls	r4, r2
 800b0ba:	0022      	movs	r2, r4
 800b0bc:	40c3      	lsrs	r3, r0
 800b0be:	430a      	orrs	r2, r1
 800b0c0:	6172      	str	r2, [r6, #20]
 800b0c2:	9301      	str	r3, [sp, #4]
 800b0c4:	9c01      	ldr	r4, [sp, #4]
 800b0c6:	61b4      	str	r4, [r6, #24]
 800b0c8:	1e63      	subs	r3, r4, #1
 800b0ca:	419c      	sbcs	r4, r3
 800b0cc:	3401      	adds	r4, #1
 800b0ce:	6134      	str	r4, [r6, #16]
 800b0d0:	2d00      	cmp	r5, #0
 800b0d2:	d017      	beq.n	800b104 <__d2b+0x90>
 800b0d4:	2435      	movs	r4, #53	; 0x35
 800b0d6:	4b14      	ldr	r3, [pc, #80]	; (800b128 <__d2b+0xb4>)
 800b0d8:	18ed      	adds	r5, r5, r3
 800b0da:	182d      	adds	r5, r5, r0
 800b0dc:	603d      	str	r5, [r7, #0]
 800b0de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e0:	1a24      	subs	r4, r4, r0
 800b0e2:	601c      	str	r4, [r3, #0]
 800b0e4:	0030      	movs	r0, r6
 800b0e6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b0e8:	2280      	movs	r2, #128	; 0x80
 800b0ea:	0352      	lsls	r2, r2, #13
 800b0ec:	4313      	orrs	r3, r2
 800b0ee:	e7d5      	b.n	800b09c <__d2b+0x28>
 800b0f0:	6171      	str	r1, [r6, #20]
 800b0f2:	e7e7      	b.n	800b0c4 <__d2b+0x50>
 800b0f4:	a801      	add	r0, sp, #4
 800b0f6:	f7ff fce1 	bl	800aabc <__lo0bits>
 800b0fa:	9b01      	ldr	r3, [sp, #4]
 800b0fc:	2401      	movs	r4, #1
 800b0fe:	6173      	str	r3, [r6, #20]
 800b100:	3020      	adds	r0, #32
 800b102:	e7e4      	b.n	800b0ce <__d2b+0x5a>
 800b104:	4b09      	ldr	r3, [pc, #36]	; (800b12c <__d2b+0xb8>)
 800b106:	18c0      	adds	r0, r0, r3
 800b108:	4b09      	ldr	r3, [pc, #36]	; (800b130 <__d2b+0xbc>)
 800b10a:	6038      	str	r0, [r7, #0]
 800b10c:	18e3      	adds	r3, r4, r3
 800b10e:	009b      	lsls	r3, r3, #2
 800b110:	18f3      	adds	r3, r6, r3
 800b112:	6958      	ldr	r0, [r3, #20]
 800b114:	f7ff fcb8 	bl	800aa88 <__hi0bits>
 800b118:	0164      	lsls	r4, r4, #5
 800b11a:	e7e0      	b.n	800b0de <__d2b+0x6a>
 800b11c:	0800d40d 	.word	0x0800d40d
 800b120:	0800d41e 	.word	0x0800d41e
 800b124:	0000030f 	.word	0x0000030f
 800b128:	fffffbcd 	.word	0xfffffbcd
 800b12c:	fffffbce 	.word	0xfffffbce
 800b130:	3fffffff 	.word	0x3fffffff

0800b134 <__ratio>:
 800b134:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b136:	b087      	sub	sp, #28
 800b138:	000f      	movs	r7, r1
 800b13a:	a904      	add	r1, sp, #16
 800b13c:	0006      	movs	r6, r0
 800b13e:	f7ff ff4d 	bl	800afdc <__b2d>
 800b142:	9000      	str	r0, [sp, #0]
 800b144:	9101      	str	r1, [sp, #4]
 800b146:	9c00      	ldr	r4, [sp, #0]
 800b148:	9d01      	ldr	r5, [sp, #4]
 800b14a:	0038      	movs	r0, r7
 800b14c:	a905      	add	r1, sp, #20
 800b14e:	f7ff ff45 	bl	800afdc <__b2d>
 800b152:	9002      	str	r0, [sp, #8]
 800b154:	9103      	str	r1, [sp, #12]
 800b156:	9a02      	ldr	r2, [sp, #8]
 800b158:	9b03      	ldr	r3, [sp, #12]
 800b15a:	6930      	ldr	r0, [r6, #16]
 800b15c:	6939      	ldr	r1, [r7, #16]
 800b15e:	9e04      	ldr	r6, [sp, #16]
 800b160:	1a40      	subs	r0, r0, r1
 800b162:	9905      	ldr	r1, [sp, #20]
 800b164:	0140      	lsls	r0, r0, #5
 800b166:	1a71      	subs	r1, r6, r1
 800b168:	1841      	adds	r1, r0, r1
 800b16a:	0508      	lsls	r0, r1, #20
 800b16c:	2900      	cmp	r1, #0
 800b16e:	dd07      	ble.n	800b180 <__ratio+0x4c>
 800b170:	9901      	ldr	r1, [sp, #4]
 800b172:	1845      	adds	r5, r0, r1
 800b174:	0020      	movs	r0, r4
 800b176:	0029      	movs	r1, r5
 800b178:	f7f6 f81c 	bl	80011b4 <__aeabi_ddiv>
 800b17c:	b007      	add	sp, #28
 800b17e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b180:	9903      	ldr	r1, [sp, #12]
 800b182:	1a0b      	subs	r3, r1, r0
 800b184:	e7f6      	b.n	800b174 <__ratio+0x40>

0800b186 <__copybits>:
 800b186:	b570      	push	{r4, r5, r6, lr}
 800b188:	0014      	movs	r4, r2
 800b18a:	0005      	movs	r5, r0
 800b18c:	3901      	subs	r1, #1
 800b18e:	6913      	ldr	r3, [r2, #16]
 800b190:	1149      	asrs	r1, r1, #5
 800b192:	3101      	adds	r1, #1
 800b194:	0089      	lsls	r1, r1, #2
 800b196:	3414      	adds	r4, #20
 800b198:	009b      	lsls	r3, r3, #2
 800b19a:	1841      	adds	r1, r0, r1
 800b19c:	18e3      	adds	r3, r4, r3
 800b19e:	42a3      	cmp	r3, r4
 800b1a0:	d80d      	bhi.n	800b1be <__copybits+0x38>
 800b1a2:	0014      	movs	r4, r2
 800b1a4:	3411      	adds	r4, #17
 800b1a6:	2500      	movs	r5, #0
 800b1a8:	429c      	cmp	r4, r3
 800b1aa:	d803      	bhi.n	800b1b4 <__copybits+0x2e>
 800b1ac:	1a9b      	subs	r3, r3, r2
 800b1ae:	3b11      	subs	r3, #17
 800b1b0:	089b      	lsrs	r3, r3, #2
 800b1b2:	009d      	lsls	r5, r3, #2
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	1940      	adds	r0, r0, r5
 800b1b8:	4281      	cmp	r1, r0
 800b1ba:	d803      	bhi.n	800b1c4 <__copybits+0x3e>
 800b1bc:	bd70      	pop	{r4, r5, r6, pc}
 800b1be:	cc40      	ldmia	r4!, {r6}
 800b1c0:	c540      	stmia	r5!, {r6}
 800b1c2:	e7ec      	b.n	800b19e <__copybits+0x18>
 800b1c4:	c008      	stmia	r0!, {r3}
 800b1c6:	e7f7      	b.n	800b1b8 <__copybits+0x32>

0800b1c8 <__any_on>:
 800b1c8:	0002      	movs	r2, r0
 800b1ca:	6900      	ldr	r0, [r0, #16]
 800b1cc:	b510      	push	{r4, lr}
 800b1ce:	3214      	adds	r2, #20
 800b1d0:	114b      	asrs	r3, r1, #5
 800b1d2:	4298      	cmp	r0, r3
 800b1d4:	db13      	blt.n	800b1fe <__any_on+0x36>
 800b1d6:	dd0c      	ble.n	800b1f2 <__any_on+0x2a>
 800b1d8:	241f      	movs	r4, #31
 800b1da:	0008      	movs	r0, r1
 800b1dc:	4020      	ands	r0, r4
 800b1de:	4221      	tst	r1, r4
 800b1e0:	d007      	beq.n	800b1f2 <__any_on+0x2a>
 800b1e2:	0099      	lsls	r1, r3, #2
 800b1e4:	588c      	ldr	r4, [r1, r2]
 800b1e6:	0021      	movs	r1, r4
 800b1e8:	40c1      	lsrs	r1, r0
 800b1ea:	4081      	lsls	r1, r0
 800b1ec:	2001      	movs	r0, #1
 800b1ee:	428c      	cmp	r4, r1
 800b1f0:	d104      	bne.n	800b1fc <__any_on+0x34>
 800b1f2:	009b      	lsls	r3, r3, #2
 800b1f4:	18d3      	adds	r3, r2, r3
 800b1f6:	4293      	cmp	r3, r2
 800b1f8:	d803      	bhi.n	800b202 <__any_on+0x3a>
 800b1fa:	2000      	movs	r0, #0
 800b1fc:	bd10      	pop	{r4, pc}
 800b1fe:	0003      	movs	r3, r0
 800b200:	e7f7      	b.n	800b1f2 <__any_on+0x2a>
 800b202:	3b04      	subs	r3, #4
 800b204:	6819      	ldr	r1, [r3, #0]
 800b206:	2900      	cmp	r1, #0
 800b208:	d0f5      	beq.n	800b1f6 <__any_on+0x2e>
 800b20a:	2001      	movs	r0, #1
 800b20c:	e7f6      	b.n	800b1fc <__any_on+0x34>
	...

0800b210 <sulp>:
 800b210:	b570      	push	{r4, r5, r6, lr}
 800b212:	0016      	movs	r6, r2
 800b214:	000d      	movs	r5, r1
 800b216:	f7ff fec5 	bl	800afa4 <__ulp>
 800b21a:	2e00      	cmp	r6, #0
 800b21c:	d00d      	beq.n	800b23a <sulp+0x2a>
 800b21e:	236b      	movs	r3, #107	; 0x6b
 800b220:	006a      	lsls	r2, r5, #1
 800b222:	0d52      	lsrs	r2, r2, #21
 800b224:	1a9b      	subs	r3, r3, r2
 800b226:	2b00      	cmp	r3, #0
 800b228:	dd07      	ble.n	800b23a <sulp+0x2a>
 800b22a:	2400      	movs	r4, #0
 800b22c:	4a03      	ldr	r2, [pc, #12]	; (800b23c <sulp+0x2c>)
 800b22e:	051b      	lsls	r3, r3, #20
 800b230:	189d      	adds	r5, r3, r2
 800b232:	002b      	movs	r3, r5
 800b234:	0022      	movs	r2, r4
 800b236:	f7f6 fbb7 	bl	80019a8 <__aeabi_dmul>
 800b23a:	bd70      	pop	{r4, r5, r6, pc}
 800b23c:	3ff00000 	.word	0x3ff00000

0800b240 <_strtod_l>:
 800b240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b242:	b0a1      	sub	sp, #132	; 0x84
 800b244:	9219      	str	r2, [sp, #100]	; 0x64
 800b246:	2200      	movs	r2, #0
 800b248:	2600      	movs	r6, #0
 800b24a:	2700      	movs	r7, #0
 800b24c:	9004      	str	r0, [sp, #16]
 800b24e:	9107      	str	r1, [sp, #28]
 800b250:	921c      	str	r2, [sp, #112]	; 0x70
 800b252:	911b      	str	r1, [sp, #108]	; 0x6c
 800b254:	780a      	ldrb	r2, [r1, #0]
 800b256:	2a2b      	cmp	r2, #43	; 0x2b
 800b258:	d055      	beq.n	800b306 <_strtod_l+0xc6>
 800b25a:	d841      	bhi.n	800b2e0 <_strtod_l+0xa0>
 800b25c:	2a0d      	cmp	r2, #13
 800b25e:	d83b      	bhi.n	800b2d8 <_strtod_l+0x98>
 800b260:	2a08      	cmp	r2, #8
 800b262:	d83b      	bhi.n	800b2dc <_strtod_l+0x9c>
 800b264:	2a00      	cmp	r2, #0
 800b266:	d044      	beq.n	800b2f2 <_strtod_l+0xb2>
 800b268:	2200      	movs	r2, #0
 800b26a:	920f      	str	r2, [sp, #60]	; 0x3c
 800b26c:	2100      	movs	r1, #0
 800b26e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800b270:	9109      	str	r1, [sp, #36]	; 0x24
 800b272:	782a      	ldrb	r2, [r5, #0]
 800b274:	2a30      	cmp	r2, #48	; 0x30
 800b276:	d000      	beq.n	800b27a <_strtod_l+0x3a>
 800b278:	e085      	b.n	800b386 <_strtod_l+0x146>
 800b27a:	786a      	ldrb	r2, [r5, #1]
 800b27c:	3120      	adds	r1, #32
 800b27e:	438a      	bics	r2, r1
 800b280:	2a58      	cmp	r2, #88	; 0x58
 800b282:	d000      	beq.n	800b286 <_strtod_l+0x46>
 800b284:	e075      	b.n	800b372 <_strtod_l+0x132>
 800b286:	9302      	str	r3, [sp, #8]
 800b288:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b28a:	4a97      	ldr	r2, [pc, #604]	; (800b4e8 <_strtod_l+0x2a8>)
 800b28c:	9301      	str	r3, [sp, #4]
 800b28e:	ab1c      	add	r3, sp, #112	; 0x70
 800b290:	9300      	str	r3, [sp, #0]
 800b292:	9804      	ldr	r0, [sp, #16]
 800b294:	ab1d      	add	r3, sp, #116	; 0x74
 800b296:	a91b      	add	r1, sp, #108	; 0x6c
 800b298:	f001 fb50 	bl	800c93c <__gethex>
 800b29c:	230f      	movs	r3, #15
 800b29e:	0002      	movs	r2, r0
 800b2a0:	401a      	ands	r2, r3
 800b2a2:	0004      	movs	r4, r0
 800b2a4:	9205      	str	r2, [sp, #20]
 800b2a6:	4218      	tst	r0, r3
 800b2a8:	d005      	beq.n	800b2b6 <_strtod_l+0x76>
 800b2aa:	2a06      	cmp	r2, #6
 800b2ac:	d12d      	bne.n	800b30a <_strtod_l+0xca>
 800b2ae:	1c6b      	adds	r3, r5, #1
 800b2b0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2b6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d002      	beq.n	800b2c2 <_strtod_l+0x82>
 800b2bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b2be:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800b2c0:	6013      	str	r3, [r2, #0]
 800b2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d01b      	beq.n	800b300 <_strtod_l+0xc0>
 800b2c8:	2380      	movs	r3, #128	; 0x80
 800b2ca:	0032      	movs	r2, r6
 800b2cc:	061b      	lsls	r3, r3, #24
 800b2ce:	18fb      	adds	r3, r7, r3
 800b2d0:	0010      	movs	r0, r2
 800b2d2:	0019      	movs	r1, r3
 800b2d4:	b021      	add	sp, #132	; 0x84
 800b2d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2d8:	2a20      	cmp	r2, #32
 800b2da:	d1c5      	bne.n	800b268 <_strtod_l+0x28>
 800b2dc:	3101      	adds	r1, #1
 800b2de:	e7b8      	b.n	800b252 <_strtod_l+0x12>
 800b2e0:	2a2d      	cmp	r2, #45	; 0x2d
 800b2e2:	d1c1      	bne.n	800b268 <_strtod_l+0x28>
 800b2e4:	3a2c      	subs	r2, #44	; 0x2c
 800b2e6:	920f      	str	r2, [sp, #60]	; 0x3c
 800b2e8:	1c4a      	adds	r2, r1, #1
 800b2ea:	921b      	str	r2, [sp, #108]	; 0x6c
 800b2ec:	784a      	ldrb	r2, [r1, #1]
 800b2ee:	2a00      	cmp	r2, #0
 800b2f0:	d1bc      	bne.n	800b26c <_strtod_l+0x2c>
 800b2f2:	9b07      	ldr	r3, [sp, #28]
 800b2f4:	931b      	str	r3, [sp, #108]	; 0x6c
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2fa:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1dd      	bne.n	800b2bc <_strtod_l+0x7c>
 800b300:	0032      	movs	r2, r6
 800b302:	003b      	movs	r3, r7
 800b304:	e7e4      	b.n	800b2d0 <_strtod_l+0x90>
 800b306:	2200      	movs	r2, #0
 800b308:	e7ed      	b.n	800b2e6 <_strtod_l+0xa6>
 800b30a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b30c:	2a00      	cmp	r2, #0
 800b30e:	d007      	beq.n	800b320 <_strtod_l+0xe0>
 800b310:	2135      	movs	r1, #53	; 0x35
 800b312:	a81e      	add	r0, sp, #120	; 0x78
 800b314:	f7ff ff37 	bl	800b186 <__copybits>
 800b318:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b31a:	9804      	ldr	r0, [sp, #16]
 800b31c:	f7ff fb00 	bl	800a920 <_Bfree>
 800b320:	9805      	ldr	r0, [sp, #20]
 800b322:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b324:	3801      	subs	r0, #1
 800b326:	2804      	cmp	r0, #4
 800b328:	d806      	bhi.n	800b338 <_strtod_l+0xf8>
 800b32a:	f7f4 fef1 	bl	8000110 <__gnu_thumb1_case_uqi>
 800b32e:	0312      	.short	0x0312
 800b330:	1e1c      	.short	0x1e1c
 800b332:	12          	.byte	0x12
 800b333:	00          	.byte	0x00
 800b334:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b336:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800b338:	05e4      	lsls	r4, r4, #23
 800b33a:	d502      	bpl.n	800b342 <_strtod_l+0x102>
 800b33c:	2380      	movs	r3, #128	; 0x80
 800b33e:	061b      	lsls	r3, r3, #24
 800b340:	431f      	orrs	r7, r3
 800b342:	4b6a      	ldr	r3, [pc, #424]	; (800b4ec <_strtod_l+0x2ac>)
 800b344:	423b      	tst	r3, r7
 800b346:	d1b6      	bne.n	800b2b6 <_strtod_l+0x76>
 800b348:	f7fe fac4 	bl	80098d4 <__errno>
 800b34c:	2322      	movs	r3, #34	; 0x22
 800b34e:	6003      	str	r3, [r0, #0]
 800b350:	e7b1      	b.n	800b2b6 <_strtod_l+0x76>
 800b352:	4967      	ldr	r1, [pc, #412]	; (800b4f0 <_strtod_l+0x2b0>)
 800b354:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800b356:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b358:	400a      	ands	r2, r1
 800b35a:	4966      	ldr	r1, [pc, #408]	; (800b4f4 <_strtod_l+0x2b4>)
 800b35c:	185b      	adds	r3, r3, r1
 800b35e:	051b      	lsls	r3, r3, #20
 800b360:	431a      	orrs	r2, r3
 800b362:	0017      	movs	r7, r2
 800b364:	e7e8      	b.n	800b338 <_strtod_l+0xf8>
 800b366:	4f61      	ldr	r7, [pc, #388]	; (800b4ec <_strtod_l+0x2ac>)
 800b368:	e7e6      	b.n	800b338 <_strtod_l+0xf8>
 800b36a:	2601      	movs	r6, #1
 800b36c:	4f62      	ldr	r7, [pc, #392]	; (800b4f8 <_strtod_l+0x2b8>)
 800b36e:	4276      	negs	r6, r6
 800b370:	e7e2      	b.n	800b338 <_strtod_l+0xf8>
 800b372:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b374:	1c5a      	adds	r2, r3, #1
 800b376:	921b      	str	r2, [sp, #108]	; 0x6c
 800b378:	785b      	ldrb	r3, [r3, #1]
 800b37a:	2b30      	cmp	r3, #48	; 0x30
 800b37c:	d0f9      	beq.n	800b372 <_strtod_l+0x132>
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d099      	beq.n	800b2b6 <_strtod_l+0x76>
 800b382:	2301      	movs	r3, #1
 800b384:	9309      	str	r3, [sp, #36]	; 0x24
 800b386:	2500      	movs	r5, #0
 800b388:	220a      	movs	r2, #10
 800b38a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b38c:	950d      	str	r5, [sp, #52]	; 0x34
 800b38e:	9310      	str	r3, [sp, #64]	; 0x40
 800b390:	9508      	str	r5, [sp, #32]
 800b392:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800b394:	7804      	ldrb	r4, [r0, #0]
 800b396:	0023      	movs	r3, r4
 800b398:	3b30      	subs	r3, #48	; 0x30
 800b39a:	b2d9      	uxtb	r1, r3
 800b39c:	2909      	cmp	r1, #9
 800b39e:	d927      	bls.n	800b3f0 <_strtod_l+0x1b0>
 800b3a0:	2201      	movs	r2, #1
 800b3a2:	4956      	ldr	r1, [pc, #344]	; (800b4fc <_strtod_l+0x2bc>)
 800b3a4:	f001 f9bd 	bl	800c722 <strncmp>
 800b3a8:	2800      	cmp	r0, #0
 800b3aa:	d031      	beq.n	800b410 <_strtod_l+0x1d0>
 800b3ac:	2000      	movs	r0, #0
 800b3ae:	0023      	movs	r3, r4
 800b3b0:	4684      	mov	ip, r0
 800b3b2:	9a08      	ldr	r2, [sp, #32]
 800b3b4:	900c      	str	r0, [sp, #48]	; 0x30
 800b3b6:	9205      	str	r2, [sp, #20]
 800b3b8:	2220      	movs	r2, #32
 800b3ba:	0019      	movs	r1, r3
 800b3bc:	4391      	bics	r1, r2
 800b3be:	000a      	movs	r2, r1
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	9106      	str	r1, [sp, #24]
 800b3c4:	2a45      	cmp	r2, #69	; 0x45
 800b3c6:	d000      	beq.n	800b3ca <_strtod_l+0x18a>
 800b3c8:	e0c2      	b.n	800b550 <_strtod_l+0x310>
 800b3ca:	9b05      	ldr	r3, [sp, #20]
 800b3cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3ce:	4303      	orrs	r3, r0
 800b3d0:	4313      	orrs	r3, r2
 800b3d2:	428b      	cmp	r3, r1
 800b3d4:	d08d      	beq.n	800b2f2 <_strtod_l+0xb2>
 800b3d6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b3d8:	9307      	str	r3, [sp, #28]
 800b3da:	3301      	adds	r3, #1
 800b3dc:	931b      	str	r3, [sp, #108]	; 0x6c
 800b3de:	9b07      	ldr	r3, [sp, #28]
 800b3e0:	785b      	ldrb	r3, [r3, #1]
 800b3e2:	2b2b      	cmp	r3, #43	; 0x2b
 800b3e4:	d071      	beq.n	800b4ca <_strtod_l+0x28a>
 800b3e6:	000c      	movs	r4, r1
 800b3e8:	2b2d      	cmp	r3, #45	; 0x2d
 800b3ea:	d174      	bne.n	800b4d6 <_strtod_l+0x296>
 800b3ec:	2401      	movs	r4, #1
 800b3ee:	e06d      	b.n	800b4cc <_strtod_l+0x28c>
 800b3f0:	9908      	ldr	r1, [sp, #32]
 800b3f2:	2908      	cmp	r1, #8
 800b3f4:	dc09      	bgt.n	800b40a <_strtod_l+0x1ca>
 800b3f6:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b3f8:	4351      	muls	r1, r2
 800b3fa:	185b      	adds	r3, r3, r1
 800b3fc:	930d      	str	r3, [sp, #52]	; 0x34
 800b3fe:	9b08      	ldr	r3, [sp, #32]
 800b400:	3001      	adds	r0, #1
 800b402:	3301      	adds	r3, #1
 800b404:	9308      	str	r3, [sp, #32]
 800b406:	901b      	str	r0, [sp, #108]	; 0x6c
 800b408:	e7c3      	b.n	800b392 <_strtod_l+0x152>
 800b40a:	4355      	muls	r5, r2
 800b40c:	195d      	adds	r5, r3, r5
 800b40e:	e7f6      	b.n	800b3fe <_strtod_l+0x1be>
 800b410:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b412:	1c5a      	adds	r2, r3, #1
 800b414:	921b      	str	r2, [sp, #108]	; 0x6c
 800b416:	9a08      	ldr	r2, [sp, #32]
 800b418:	785b      	ldrb	r3, [r3, #1]
 800b41a:	2a00      	cmp	r2, #0
 800b41c:	d03a      	beq.n	800b494 <_strtod_l+0x254>
 800b41e:	900c      	str	r0, [sp, #48]	; 0x30
 800b420:	9205      	str	r2, [sp, #20]
 800b422:	001a      	movs	r2, r3
 800b424:	3a30      	subs	r2, #48	; 0x30
 800b426:	2a09      	cmp	r2, #9
 800b428:	d912      	bls.n	800b450 <_strtod_l+0x210>
 800b42a:	2201      	movs	r2, #1
 800b42c:	4694      	mov	ip, r2
 800b42e:	e7c3      	b.n	800b3b8 <_strtod_l+0x178>
 800b430:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b432:	3001      	adds	r0, #1
 800b434:	1c5a      	adds	r2, r3, #1
 800b436:	921b      	str	r2, [sp, #108]	; 0x6c
 800b438:	785b      	ldrb	r3, [r3, #1]
 800b43a:	2b30      	cmp	r3, #48	; 0x30
 800b43c:	d0f8      	beq.n	800b430 <_strtod_l+0x1f0>
 800b43e:	001a      	movs	r2, r3
 800b440:	3a31      	subs	r2, #49	; 0x31
 800b442:	2a08      	cmp	r2, #8
 800b444:	d83c      	bhi.n	800b4c0 <_strtod_l+0x280>
 800b446:	900c      	str	r0, [sp, #48]	; 0x30
 800b448:	2000      	movs	r0, #0
 800b44a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800b44c:	9005      	str	r0, [sp, #20]
 800b44e:	9210      	str	r2, [sp, #64]	; 0x40
 800b450:	001a      	movs	r2, r3
 800b452:	1c41      	adds	r1, r0, #1
 800b454:	3a30      	subs	r2, #48	; 0x30
 800b456:	2b30      	cmp	r3, #48	; 0x30
 800b458:	d016      	beq.n	800b488 <_strtod_l+0x248>
 800b45a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b45c:	185b      	adds	r3, r3, r1
 800b45e:	930c      	str	r3, [sp, #48]	; 0x30
 800b460:	9b05      	ldr	r3, [sp, #20]
 800b462:	210a      	movs	r1, #10
 800b464:	469c      	mov	ip, r3
 800b466:	4484      	add	ip, r0
 800b468:	4563      	cmp	r3, ip
 800b46a:	d115      	bne.n	800b498 <_strtod_l+0x258>
 800b46c:	9905      	ldr	r1, [sp, #20]
 800b46e:	9b05      	ldr	r3, [sp, #20]
 800b470:	3101      	adds	r1, #1
 800b472:	1809      	adds	r1, r1, r0
 800b474:	181b      	adds	r3, r3, r0
 800b476:	9105      	str	r1, [sp, #20]
 800b478:	2b08      	cmp	r3, #8
 800b47a:	dc19      	bgt.n	800b4b0 <_strtod_l+0x270>
 800b47c:	230a      	movs	r3, #10
 800b47e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b480:	434b      	muls	r3, r1
 800b482:	2100      	movs	r1, #0
 800b484:	18d3      	adds	r3, r2, r3
 800b486:	930d      	str	r3, [sp, #52]	; 0x34
 800b488:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b48a:	0008      	movs	r0, r1
 800b48c:	1c5a      	adds	r2, r3, #1
 800b48e:	921b      	str	r2, [sp, #108]	; 0x6c
 800b490:	785b      	ldrb	r3, [r3, #1]
 800b492:	e7c6      	b.n	800b422 <_strtod_l+0x1e2>
 800b494:	9808      	ldr	r0, [sp, #32]
 800b496:	e7d0      	b.n	800b43a <_strtod_l+0x1fa>
 800b498:	1c5c      	adds	r4, r3, #1
 800b49a:	2b08      	cmp	r3, #8
 800b49c:	dc04      	bgt.n	800b4a8 <_strtod_l+0x268>
 800b49e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4a0:	434b      	muls	r3, r1
 800b4a2:	930d      	str	r3, [sp, #52]	; 0x34
 800b4a4:	0023      	movs	r3, r4
 800b4a6:	e7df      	b.n	800b468 <_strtod_l+0x228>
 800b4a8:	2c10      	cmp	r4, #16
 800b4aa:	dcfb      	bgt.n	800b4a4 <_strtod_l+0x264>
 800b4ac:	434d      	muls	r5, r1
 800b4ae:	e7f9      	b.n	800b4a4 <_strtod_l+0x264>
 800b4b0:	9b05      	ldr	r3, [sp, #20]
 800b4b2:	2100      	movs	r1, #0
 800b4b4:	2b10      	cmp	r3, #16
 800b4b6:	dce7      	bgt.n	800b488 <_strtod_l+0x248>
 800b4b8:	230a      	movs	r3, #10
 800b4ba:	435d      	muls	r5, r3
 800b4bc:	1955      	adds	r5, r2, r5
 800b4be:	e7e3      	b.n	800b488 <_strtod_l+0x248>
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	920c      	str	r2, [sp, #48]	; 0x30
 800b4c4:	9205      	str	r2, [sp, #20]
 800b4c6:	3201      	adds	r2, #1
 800b4c8:	e7b0      	b.n	800b42c <_strtod_l+0x1ec>
 800b4ca:	2400      	movs	r4, #0
 800b4cc:	9b07      	ldr	r3, [sp, #28]
 800b4ce:	3302      	adds	r3, #2
 800b4d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b4d2:	9b07      	ldr	r3, [sp, #28]
 800b4d4:	789b      	ldrb	r3, [r3, #2]
 800b4d6:	001a      	movs	r2, r3
 800b4d8:	3a30      	subs	r2, #48	; 0x30
 800b4da:	2a09      	cmp	r2, #9
 800b4dc:	d914      	bls.n	800b508 <_strtod_l+0x2c8>
 800b4de:	9a07      	ldr	r2, [sp, #28]
 800b4e0:	921b      	str	r2, [sp, #108]	; 0x6c
 800b4e2:	2200      	movs	r2, #0
 800b4e4:	e033      	b.n	800b54e <_strtod_l+0x30e>
 800b4e6:	46c0      	nop			; (mov r8, r8)
 800b4e8:	0800d578 	.word	0x0800d578
 800b4ec:	7ff00000 	.word	0x7ff00000
 800b4f0:	ffefffff 	.word	0xffefffff
 800b4f4:	00000433 	.word	0x00000433
 800b4f8:	7fffffff 	.word	0x7fffffff
 800b4fc:	0800d574 	.word	0x0800d574
 800b500:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b502:	1c5a      	adds	r2, r3, #1
 800b504:	921b      	str	r2, [sp, #108]	; 0x6c
 800b506:	785b      	ldrb	r3, [r3, #1]
 800b508:	2b30      	cmp	r3, #48	; 0x30
 800b50a:	d0f9      	beq.n	800b500 <_strtod_l+0x2c0>
 800b50c:	2200      	movs	r2, #0
 800b50e:	9206      	str	r2, [sp, #24]
 800b510:	001a      	movs	r2, r3
 800b512:	3a31      	subs	r2, #49	; 0x31
 800b514:	2a08      	cmp	r2, #8
 800b516:	d81b      	bhi.n	800b550 <_strtod_l+0x310>
 800b518:	3b30      	subs	r3, #48	; 0x30
 800b51a:	930e      	str	r3, [sp, #56]	; 0x38
 800b51c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b51e:	9306      	str	r3, [sp, #24]
 800b520:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b522:	1c59      	adds	r1, r3, #1
 800b524:	911b      	str	r1, [sp, #108]	; 0x6c
 800b526:	785b      	ldrb	r3, [r3, #1]
 800b528:	001a      	movs	r2, r3
 800b52a:	3a30      	subs	r2, #48	; 0x30
 800b52c:	2a09      	cmp	r2, #9
 800b52e:	d93a      	bls.n	800b5a6 <_strtod_l+0x366>
 800b530:	9a06      	ldr	r2, [sp, #24]
 800b532:	1a8a      	subs	r2, r1, r2
 800b534:	49b2      	ldr	r1, [pc, #712]	; (800b800 <_strtod_l+0x5c0>)
 800b536:	9106      	str	r1, [sp, #24]
 800b538:	2a08      	cmp	r2, #8
 800b53a:	dc04      	bgt.n	800b546 <_strtod_l+0x306>
 800b53c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b53e:	9206      	str	r2, [sp, #24]
 800b540:	428a      	cmp	r2, r1
 800b542:	dd00      	ble.n	800b546 <_strtod_l+0x306>
 800b544:	9106      	str	r1, [sp, #24]
 800b546:	2c00      	cmp	r4, #0
 800b548:	d002      	beq.n	800b550 <_strtod_l+0x310>
 800b54a:	9a06      	ldr	r2, [sp, #24]
 800b54c:	4252      	negs	r2, r2
 800b54e:	9206      	str	r2, [sp, #24]
 800b550:	9a05      	ldr	r2, [sp, #20]
 800b552:	2a00      	cmp	r2, #0
 800b554:	d14d      	bne.n	800b5f2 <_strtod_l+0x3b2>
 800b556:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b558:	4310      	orrs	r0, r2
 800b55a:	d000      	beq.n	800b55e <_strtod_l+0x31e>
 800b55c:	e6ab      	b.n	800b2b6 <_strtod_l+0x76>
 800b55e:	4662      	mov	r2, ip
 800b560:	2a00      	cmp	r2, #0
 800b562:	d000      	beq.n	800b566 <_strtod_l+0x326>
 800b564:	e6c5      	b.n	800b2f2 <_strtod_l+0xb2>
 800b566:	2b69      	cmp	r3, #105	; 0x69
 800b568:	d027      	beq.n	800b5ba <_strtod_l+0x37a>
 800b56a:	dc23      	bgt.n	800b5b4 <_strtod_l+0x374>
 800b56c:	2b49      	cmp	r3, #73	; 0x49
 800b56e:	d024      	beq.n	800b5ba <_strtod_l+0x37a>
 800b570:	2b4e      	cmp	r3, #78	; 0x4e
 800b572:	d000      	beq.n	800b576 <_strtod_l+0x336>
 800b574:	e6bd      	b.n	800b2f2 <_strtod_l+0xb2>
 800b576:	49a3      	ldr	r1, [pc, #652]	; (800b804 <_strtod_l+0x5c4>)
 800b578:	a81b      	add	r0, sp, #108	; 0x6c
 800b57a:	f001 fc15 	bl	800cda8 <__match>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d100      	bne.n	800b584 <_strtod_l+0x344>
 800b582:	e6b6      	b.n	800b2f2 <_strtod_l+0xb2>
 800b584:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	2b28      	cmp	r3, #40	; 0x28
 800b58a:	d12c      	bne.n	800b5e6 <_strtod_l+0x3a6>
 800b58c:	499e      	ldr	r1, [pc, #632]	; (800b808 <_strtod_l+0x5c8>)
 800b58e:	aa1e      	add	r2, sp, #120	; 0x78
 800b590:	a81b      	add	r0, sp, #108	; 0x6c
 800b592:	f001 fc1d 	bl	800cdd0 <__hexnan>
 800b596:	2805      	cmp	r0, #5
 800b598:	d125      	bne.n	800b5e6 <_strtod_l+0x3a6>
 800b59a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800b59c:	4a9b      	ldr	r2, [pc, #620]	; (800b80c <_strtod_l+0x5cc>)
 800b59e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800b5a0:	431a      	orrs	r2, r3
 800b5a2:	0017      	movs	r7, r2
 800b5a4:	e687      	b.n	800b2b6 <_strtod_l+0x76>
 800b5a6:	220a      	movs	r2, #10
 800b5a8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800b5aa:	434a      	muls	r2, r1
 800b5ac:	18d2      	adds	r2, r2, r3
 800b5ae:	3a30      	subs	r2, #48	; 0x30
 800b5b0:	920e      	str	r2, [sp, #56]	; 0x38
 800b5b2:	e7b5      	b.n	800b520 <_strtod_l+0x2e0>
 800b5b4:	2b6e      	cmp	r3, #110	; 0x6e
 800b5b6:	d0de      	beq.n	800b576 <_strtod_l+0x336>
 800b5b8:	e69b      	b.n	800b2f2 <_strtod_l+0xb2>
 800b5ba:	4995      	ldr	r1, [pc, #596]	; (800b810 <_strtod_l+0x5d0>)
 800b5bc:	a81b      	add	r0, sp, #108	; 0x6c
 800b5be:	f001 fbf3 	bl	800cda8 <__match>
 800b5c2:	2800      	cmp	r0, #0
 800b5c4:	d100      	bne.n	800b5c8 <_strtod_l+0x388>
 800b5c6:	e694      	b.n	800b2f2 <_strtod_l+0xb2>
 800b5c8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5ca:	4992      	ldr	r1, [pc, #584]	; (800b814 <_strtod_l+0x5d4>)
 800b5cc:	3b01      	subs	r3, #1
 800b5ce:	a81b      	add	r0, sp, #108	; 0x6c
 800b5d0:	931b      	str	r3, [sp, #108]	; 0x6c
 800b5d2:	f001 fbe9 	bl	800cda8 <__match>
 800b5d6:	2800      	cmp	r0, #0
 800b5d8:	d102      	bne.n	800b5e0 <_strtod_l+0x3a0>
 800b5da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b5dc:	3301      	adds	r3, #1
 800b5de:	931b      	str	r3, [sp, #108]	; 0x6c
 800b5e0:	2600      	movs	r6, #0
 800b5e2:	4f8a      	ldr	r7, [pc, #552]	; (800b80c <_strtod_l+0x5cc>)
 800b5e4:	e667      	b.n	800b2b6 <_strtod_l+0x76>
 800b5e6:	488c      	ldr	r0, [pc, #560]	; (800b818 <_strtod_l+0x5d8>)
 800b5e8:	f001 f8ec 	bl	800c7c4 <nan>
 800b5ec:	0006      	movs	r6, r0
 800b5ee:	000f      	movs	r7, r1
 800b5f0:	e661      	b.n	800b2b6 <_strtod_l+0x76>
 800b5f2:	9b06      	ldr	r3, [sp, #24]
 800b5f4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b5f6:	1a9b      	subs	r3, r3, r2
 800b5f8:	9309      	str	r3, [sp, #36]	; 0x24
 800b5fa:	9b08      	ldr	r3, [sp, #32]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d101      	bne.n	800b604 <_strtod_l+0x3c4>
 800b600:	9b05      	ldr	r3, [sp, #20]
 800b602:	9308      	str	r3, [sp, #32]
 800b604:	9c05      	ldr	r4, [sp, #20]
 800b606:	2c10      	cmp	r4, #16
 800b608:	dd00      	ble.n	800b60c <_strtod_l+0x3cc>
 800b60a:	2410      	movs	r4, #16
 800b60c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b60e:	f7f7 f893 	bl	8002738 <__aeabi_ui2d>
 800b612:	9b05      	ldr	r3, [sp, #20]
 800b614:	0006      	movs	r6, r0
 800b616:	000f      	movs	r7, r1
 800b618:	2b09      	cmp	r3, #9
 800b61a:	dd15      	ble.n	800b648 <_strtod_l+0x408>
 800b61c:	0022      	movs	r2, r4
 800b61e:	4b7f      	ldr	r3, [pc, #508]	; (800b81c <_strtod_l+0x5dc>)
 800b620:	3a09      	subs	r2, #9
 800b622:	00d2      	lsls	r2, r2, #3
 800b624:	189b      	adds	r3, r3, r2
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f7f6 f9bd 	bl	80019a8 <__aeabi_dmul>
 800b62e:	0006      	movs	r6, r0
 800b630:	0028      	movs	r0, r5
 800b632:	000f      	movs	r7, r1
 800b634:	f7f7 f880 	bl	8002738 <__aeabi_ui2d>
 800b638:	0002      	movs	r2, r0
 800b63a:	000b      	movs	r3, r1
 800b63c:	0030      	movs	r0, r6
 800b63e:	0039      	movs	r1, r7
 800b640:	f7f5 fa58 	bl	8000af4 <__aeabi_dadd>
 800b644:	0006      	movs	r6, r0
 800b646:	000f      	movs	r7, r1
 800b648:	9b05      	ldr	r3, [sp, #20]
 800b64a:	2b0f      	cmp	r3, #15
 800b64c:	dc39      	bgt.n	800b6c2 <_strtod_l+0x482>
 800b64e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b650:	2b00      	cmp	r3, #0
 800b652:	d100      	bne.n	800b656 <_strtod_l+0x416>
 800b654:	e62f      	b.n	800b2b6 <_strtod_l+0x76>
 800b656:	dd24      	ble.n	800b6a2 <_strtod_l+0x462>
 800b658:	2b16      	cmp	r3, #22
 800b65a:	dc09      	bgt.n	800b670 <_strtod_l+0x430>
 800b65c:	496f      	ldr	r1, [pc, #444]	; (800b81c <_strtod_l+0x5dc>)
 800b65e:	00db      	lsls	r3, r3, #3
 800b660:	18c9      	adds	r1, r1, r3
 800b662:	0032      	movs	r2, r6
 800b664:	6808      	ldr	r0, [r1, #0]
 800b666:	6849      	ldr	r1, [r1, #4]
 800b668:	003b      	movs	r3, r7
 800b66a:	f7f6 f99d 	bl	80019a8 <__aeabi_dmul>
 800b66e:	e7bd      	b.n	800b5ec <_strtod_l+0x3ac>
 800b670:	2325      	movs	r3, #37	; 0x25
 800b672:	9a05      	ldr	r2, [sp, #20]
 800b674:	1a9b      	subs	r3, r3, r2
 800b676:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b678:	4293      	cmp	r3, r2
 800b67a:	db22      	blt.n	800b6c2 <_strtod_l+0x482>
 800b67c:	240f      	movs	r4, #15
 800b67e:	9b05      	ldr	r3, [sp, #20]
 800b680:	4d66      	ldr	r5, [pc, #408]	; (800b81c <_strtod_l+0x5dc>)
 800b682:	1ae4      	subs	r4, r4, r3
 800b684:	00e1      	lsls	r1, r4, #3
 800b686:	1869      	adds	r1, r5, r1
 800b688:	0032      	movs	r2, r6
 800b68a:	6808      	ldr	r0, [r1, #0]
 800b68c:	6849      	ldr	r1, [r1, #4]
 800b68e:	003b      	movs	r3, r7
 800b690:	f7f6 f98a 	bl	80019a8 <__aeabi_dmul>
 800b694:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b696:	1b1c      	subs	r4, r3, r4
 800b698:	00e4      	lsls	r4, r4, #3
 800b69a:	192d      	adds	r5, r5, r4
 800b69c:	682a      	ldr	r2, [r5, #0]
 800b69e:	686b      	ldr	r3, [r5, #4]
 800b6a0:	e7e3      	b.n	800b66a <_strtod_l+0x42a>
 800b6a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6a4:	3316      	adds	r3, #22
 800b6a6:	db0c      	blt.n	800b6c2 <_strtod_l+0x482>
 800b6a8:	9906      	ldr	r1, [sp, #24]
 800b6aa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b6ac:	4b5b      	ldr	r3, [pc, #364]	; (800b81c <_strtod_l+0x5dc>)
 800b6ae:	1a52      	subs	r2, r2, r1
 800b6b0:	00d2      	lsls	r2, r2, #3
 800b6b2:	189b      	adds	r3, r3, r2
 800b6b4:	0030      	movs	r0, r6
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	685b      	ldr	r3, [r3, #4]
 800b6ba:	0039      	movs	r1, r7
 800b6bc:	f7f5 fd7a 	bl	80011b4 <__aeabi_ddiv>
 800b6c0:	e794      	b.n	800b5ec <_strtod_l+0x3ac>
 800b6c2:	9b05      	ldr	r3, [sp, #20]
 800b6c4:	1b1c      	subs	r4, r3, r4
 800b6c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b6c8:	18e4      	adds	r4, r4, r3
 800b6ca:	2c00      	cmp	r4, #0
 800b6cc:	dd72      	ble.n	800b7b4 <_strtod_l+0x574>
 800b6ce:	220f      	movs	r2, #15
 800b6d0:	0023      	movs	r3, r4
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	4214      	tst	r4, r2
 800b6d6:	d00a      	beq.n	800b6ee <_strtod_l+0x4ae>
 800b6d8:	4950      	ldr	r1, [pc, #320]	; (800b81c <_strtod_l+0x5dc>)
 800b6da:	00db      	lsls	r3, r3, #3
 800b6dc:	18c9      	adds	r1, r1, r3
 800b6de:	0032      	movs	r2, r6
 800b6e0:	6808      	ldr	r0, [r1, #0]
 800b6e2:	6849      	ldr	r1, [r1, #4]
 800b6e4:	003b      	movs	r3, r7
 800b6e6:	f7f6 f95f 	bl	80019a8 <__aeabi_dmul>
 800b6ea:	0006      	movs	r6, r0
 800b6ec:	000f      	movs	r7, r1
 800b6ee:	230f      	movs	r3, #15
 800b6f0:	439c      	bics	r4, r3
 800b6f2:	d04a      	beq.n	800b78a <_strtod_l+0x54a>
 800b6f4:	3326      	adds	r3, #38	; 0x26
 800b6f6:	33ff      	adds	r3, #255	; 0xff
 800b6f8:	429c      	cmp	r4, r3
 800b6fa:	dd22      	ble.n	800b742 <_strtod_l+0x502>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	9305      	str	r3, [sp, #20]
 800b700:	9306      	str	r3, [sp, #24]
 800b702:	930d      	str	r3, [sp, #52]	; 0x34
 800b704:	9308      	str	r3, [sp, #32]
 800b706:	2322      	movs	r3, #34	; 0x22
 800b708:	2600      	movs	r6, #0
 800b70a:	9a04      	ldr	r2, [sp, #16]
 800b70c:	4f3f      	ldr	r7, [pc, #252]	; (800b80c <_strtod_l+0x5cc>)
 800b70e:	6013      	str	r3, [r2, #0]
 800b710:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b712:	42b3      	cmp	r3, r6
 800b714:	d100      	bne.n	800b718 <_strtod_l+0x4d8>
 800b716:	e5ce      	b.n	800b2b6 <_strtod_l+0x76>
 800b718:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b71a:	9804      	ldr	r0, [sp, #16]
 800b71c:	f7ff f900 	bl	800a920 <_Bfree>
 800b720:	9908      	ldr	r1, [sp, #32]
 800b722:	9804      	ldr	r0, [sp, #16]
 800b724:	f7ff f8fc 	bl	800a920 <_Bfree>
 800b728:	9906      	ldr	r1, [sp, #24]
 800b72a:	9804      	ldr	r0, [sp, #16]
 800b72c:	f7ff f8f8 	bl	800a920 <_Bfree>
 800b730:	990d      	ldr	r1, [sp, #52]	; 0x34
 800b732:	9804      	ldr	r0, [sp, #16]
 800b734:	f7ff f8f4 	bl	800a920 <_Bfree>
 800b738:	9905      	ldr	r1, [sp, #20]
 800b73a:	9804      	ldr	r0, [sp, #16]
 800b73c:	f7ff f8f0 	bl	800a920 <_Bfree>
 800b740:	e5b9      	b.n	800b2b6 <_strtod_l+0x76>
 800b742:	2300      	movs	r3, #0
 800b744:	0030      	movs	r0, r6
 800b746:	0039      	movs	r1, r7
 800b748:	4d35      	ldr	r5, [pc, #212]	; (800b820 <_strtod_l+0x5e0>)
 800b74a:	1124      	asrs	r4, r4, #4
 800b74c:	9307      	str	r3, [sp, #28]
 800b74e:	2c01      	cmp	r4, #1
 800b750:	dc1e      	bgt.n	800b790 <_strtod_l+0x550>
 800b752:	2b00      	cmp	r3, #0
 800b754:	d001      	beq.n	800b75a <_strtod_l+0x51a>
 800b756:	0006      	movs	r6, r0
 800b758:	000f      	movs	r7, r1
 800b75a:	4b32      	ldr	r3, [pc, #200]	; (800b824 <_strtod_l+0x5e4>)
 800b75c:	9a07      	ldr	r2, [sp, #28]
 800b75e:	18ff      	adds	r7, r7, r3
 800b760:	4b2f      	ldr	r3, [pc, #188]	; (800b820 <_strtod_l+0x5e0>)
 800b762:	00d2      	lsls	r2, r2, #3
 800b764:	189d      	adds	r5, r3, r2
 800b766:	6828      	ldr	r0, [r5, #0]
 800b768:	6869      	ldr	r1, [r5, #4]
 800b76a:	0032      	movs	r2, r6
 800b76c:	003b      	movs	r3, r7
 800b76e:	f7f6 f91b 	bl	80019a8 <__aeabi_dmul>
 800b772:	4b26      	ldr	r3, [pc, #152]	; (800b80c <_strtod_l+0x5cc>)
 800b774:	4a2c      	ldr	r2, [pc, #176]	; (800b828 <_strtod_l+0x5e8>)
 800b776:	0006      	movs	r6, r0
 800b778:	400b      	ands	r3, r1
 800b77a:	4293      	cmp	r3, r2
 800b77c:	d8be      	bhi.n	800b6fc <_strtod_l+0x4bc>
 800b77e:	4a2b      	ldr	r2, [pc, #172]	; (800b82c <_strtod_l+0x5ec>)
 800b780:	4293      	cmp	r3, r2
 800b782:	d913      	bls.n	800b7ac <_strtod_l+0x56c>
 800b784:	2601      	movs	r6, #1
 800b786:	4f2a      	ldr	r7, [pc, #168]	; (800b830 <_strtod_l+0x5f0>)
 800b788:	4276      	negs	r6, r6
 800b78a:	2300      	movs	r3, #0
 800b78c:	9307      	str	r3, [sp, #28]
 800b78e:	e088      	b.n	800b8a2 <_strtod_l+0x662>
 800b790:	2201      	movs	r2, #1
 800b792:	4214      	tst	r4, r2
 800b794:	d004      	beq.n	800b7a0 <_strtod_l+0x560>
 800b796:	682a      	ldr	r2, [r5, #0]
 800b798:	686b      	ldr	r3, [r5, #4]
 800b79a:	f7f6 f905 	bl	80019a8 <__aeabi_dmul>
 800b79e:	2301      	movs	r3, #1
 800b7a0:	9a07      	ldr	r2, [sp, #28]
 800b7a2:	1064      	asrs	r4, r4, #1
 800b7a4:	3201      	adds	r2, #1
 800b7a6:	9207      	str	r2, [sp, #28]
 800b7a8:	3508      	adds	r5, #8
 800b7aa:	e7d0      	b.n	800b74e <_strtod_l+0x50e>
 800b7ac:	23d4      	movs	r3, #212	; 0xd4
 800b7ae:	049b      	lsls	r3, r3, #18
 800b7b0:	18cf      	adds	r7, r1, r3
 800b7b2:	e7ea      	b.n	800b78a <_strtod_l+0x54a>
 800b7b4:	2c00      	cmp	r4, #0
 800b7b6:	d0e8      	beq.n	800b78a <_strtod_l+0x54a>
 800b7b8:	4264      	negs	r4, r4
 800b7ba:	230f      	movs	r3, #15
 800b7bc:	0022      	movs	r2, r4
 800b7be:	401a      	ands	r2, r3
 800b7c0:	421c      	tst	r4, r3
 800b7c2:	d00a      	beq.n	800b7da <_strtod_l+0x59a>
 800b7c4:	4b15      	ldr	r3, [pc, #84]	; (800b81c <_strtod_l+0x5dc>)
 800b7c6:	00d2      	lsls	r2, r2, #3
 800b7c8:	189b      	adds	r3, r3, r2
 800b7ca:	0030      	movs	r0, r6
 800b7cc:	681a      	ldr	r2, [r3, #0]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	0039      	movs	r1, r7
 800b7d2:	f7f5 fcef 	bl	80011b4 <__aeabi_ddiv>
 800b7d6:	0006      	movs	r6, r0
 800b7d8:	000f      	movs	r7, r1
 800b7da:	1124      	asrs	r4, r4, #4
 800b7dc:	d0d5      	beq.n	800b78a <_strtod_l+0x54a>
 800b7de:	2c1f      	cmp	r4, #31
 800b7e0:	dd28      	ble.n	800b834 <_strtod_l+0x5f4>
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	9305      	str	r3, [sp, #20]
 800b7e6:	9306      	str	r3, [sp, #24]
 800b7e8:	930d      	str	r3, [sp, #52]	; 0x34
 800b7ea:	9308      	str	r3, [sp, #32]
 800b7ec:	2322      	movs	r3, #34	; 0x22
 800b7ee:	9a04      	ldr	r2, [sp, #16]
 800b7f0:	2600      	movs	r6, #0
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b7f6:	2700      	movs	r7, #0
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d18d      	bne.n	800b718 <_strtod_l+0x4d8>
 800b7fc:	e55b      	b.n	800b2b6 <_strtod_l+0x76>
 800b7fe:	46c0      	nop			; (mov r8, r8)
 800b800:	00004e1f 	.word	0x00004e1f
 800b804:	0800d365 	.word	0x0800d365
 800b808:	0800d58c 	.word	0x0800d58c
 800b80c:	7ff00000 	.word	0x7ff00000
 800b810:	0800d35d 	.word	0x0800d35d
 800b814:	0800d394 	.word	0x0800d394
 800b818:	0800d71d 	.word	0x0800d71d
 800b81c:	0800d4a0 	.word	0x0800d4a0
 800b820:	0800d478 	.word	0x0800d478
 800b824:	fcb00000 	.word	0xfcb00000
 800b828:	7ca00000 	.word	0x7ca00000
 800b82c:	7c900000 	.word	0x7c900000
 800b830:	7fefffff 	.word	0x7fefffff
 800b834:	2310      	movs	r3, #16
 800b836:	0022      	movs	r2, r4
 800b838:	401a      	ands	r2, r3
 800b83a:	9207      	str	r2, [sp, #28]
 800b83c:	421c      	tst	r4, r3
 800b83e:	d001      	beq.n	800b844 <_strtod_l+0x604>
 800b840:	335a      	adds	r3, #90	; 0x5a
 800b842:	9307      	str	r3, [sp, #28]
 800b844:	0030      	movs	r0, r6
 800b846:	0039      	movs	r1, r7
 800b848:	2300      	movs	r3, #0
 800b84a:	4dc4      	ldr	r5, [pc, #784]	; (800bb5c <_strtod_l+0x91c>)
 800b84c:	2201      	movs	r2, #1
 800b84e:	4214      	tst	r4, r2
 800b850:	d004      	beq.n	800b85c <_strtod_l+0x61c>
 800b852:	682a      	ldr	r2, [r5, #0]
 800b854:	686b      	ldr	r3, [r5, #4]
 800b856:	f7f6 f8a7 	bl	80019a8 <__aeabi_dmul>
 800b85a:	2301      	movs	r3, #1
 800b85c:	1064      	asrs	r4, r4, #1
 800b85e:	3508      	adds	r5, #8
 800b860:	2c00      	cmp	r4, #0
 800b862:	d1f3      	bne.n	800b84c <_strtod_l+0x60c>
 800b864:	2b00      	cmp	r3, #0
 800b866:	d001      	beq.n	800b86c <_strtod_l+0x62c>
 800b868:	0006      	movs	r6, r0
 800b86a:	000f      	movs	r7, r1
 800b86c:	9b07      	ldr	r3, [sp, #28]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d00f      	beq.n	800b892 <_strtod_l+0x652>
 800b872:	236b      	movs	r3, #107	; 0x6b
 800b874:	007a      	lsls	r2, r7, #1
 800b876:	0d52      	lsrs	r2, r2, #21
 800b878:	0039      	movs	r1, r7
 800b87a:	1a9b      	subs	r3, r3, r2
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	dd08      	ble.n	800b892 <_strtod_l+0x652>
 800b880:	2b1f      	cmp	r3, #31
 800b882:	dc00      	bgt.n	800b886 <_strtod_l+0x646>
 800b884:	e121      	b.n	800baca <_strtod_l+0x88a>
 800b886:	2600      	movs	r6, #0
 800b888:	2b34      	cmp	r3, #52	; 0x34
 800b88a:	dc00      	bgt.n	800b88e <_strtod_l+0x64e>
 800b88c:	e116      	b.n	800babc <_strtod_l+0x87c>
 800b88e:	27dc      	movs	r7, #220	; 0xdc
 800b890:	04bf      	lsls	r7, r7, #18
 800b892:	2200      	movs	r2, #0
 800b894:	2300      	movs	r3, #0
 800b896:	0030      	movs	r0, r6
 800b898:	0039      	movs	r1, r7
 800b89a:	f7f4 fdd3 	bl	8000444 <__aeabi_dcmpeq>
 800b89e:	2800      	cmp	r0, #0
 800b8a0:	d19f      	bne.n	800b7e2 <_strtod_l+0x5a2>
 800b8a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8a4:	9a08      	ldr	r2, [sp, #32]
 800b8a6:	9300      	str	r3, [sp, #0]
 800b8a8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800b8aa:	9b05      	ldr	r3, [sp, #20]
 800b8ac:	9804      	ldr	r0, [sp, #16]
 800b8ae:	f7ff f89f 	bl	800a9f0 <__s2b>
 800b8b2:	900d      	str	r0, [sp, #52]	; 0x34
 800b8b4:	2800      	cmp	r0, #0
 800b8b6:	d100      	bne.n	800b8ba <_strtod_l+0x67a>
 800b8b8:	e720      	b.n	800b6fc <_strtod_l+0x4bc>
 800b8ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8bc:	9906      	ldr	r1, [sp, #24]
 800b8be:	17da      	asrs	r2, r3, #31
 800b8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b8c2:	1a5b      	subs	r3, r3, r1
 800b8c4:	401a      	ands	r2, r3
 800b8c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b8c8:	9215      	str	r2, [sp, #84]	; 0x54
 800b8ca:	43db      	mvns	r3, r3
 800b8cc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8ce:	17db      	asrs	r3, r3, #31
 800b8d0:	401a      	ands	r2, r3
 800b8d2:	2300      	movs	r3, #0
 800b8d4:	9218      	str	r2, [sp, #96]	; 0x60
 800b8d6:	9305      	str	r3, [sp, #20]
 800b8d8:	9306      	str	r3, [sp, #24]
 800b8da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8dc:	9804      	ldr	r0, [sp, #16]
 800b8de:	6859      	ldr	r1, [r3, #4]
 800b8e0:	f7fe ffda 	bl	800a898 <_Balloc>
 800b8e4:	9008      	str	r0, [sp, #32]
 800b8e6:	2800      	cmp	r0, #0
 800b8e8:	d100      	bne.n	800b8ec <_strtod_l+0x6ac>
 800b8ea:	e70c      	b.n	800b706 <_strtod_l+0x4c6>
 800b8ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b8ee:	300c      	adds	r0, #12
 800b8f0:	0019      	movs	r1, r3
 800b8f2:	691a      	ldr	r2, [r3, #16]
 800b8f4:	310c      	adds	r1, #12
 800b8f6:	3202      	adds	r2, #2
 800b8f8:	0092      	lsls	r2, r2, #2
 800b8fa:	f000 ff59 	bl	800c7b0 <memcpy>
 800b8fe:	ab1e      	add	r3, sp, #120	; 0x78
 800b900:	9301      	str	r3, [sp, #4]
 800b902:	ab1d      	add	r3, sp, #116	; 0x74
 800b904:	9300      	str	r3, [sp, #0]
 800b906:	0032      	movs	r2, r6
 800b908:	003b      	movs	r3, r7
 800b90a:	9804      	ldr	r0, [sp, #16]
 800b90c:	9610      	str	r6, [sp, #64]	; 0x40
 800b90e:	9711      	str	r7, [sp, #68]	; 0x44
 800b910:	f7ff fbb0 	bl	800b074 <__d2b>
 800b914:	901c      	str	r0, [sp, #112]	; 0x70
 800b916:	2800      	cmp	r0, #0
 800b918:	d100      	bne.n	800b91c <_strtod_l+0x6dc>
 800b91a:	e6f4      	b.n	800b706 <_strtod_l+0x4c6>
 800b91c:	2101      	movs	r1, #1
 800b91e:	9804      	ldr	r0, [sp, #16]
 800b920:	f7ff f8fa 	bl	800ab18 <__i2b>
 800b924:	9006      	str	r0, [sp, #24]
 800b926:	2800      	cmp	r0, #0
 800b928:	d100      	bne.n	800b92c <_strtod_l+0x6ec>
 800b92a:	e6ec      	b.n	800b706 <_strtod_l+0x4c6>
 800b92c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800b92e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b930:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b932:	1ad4      	subs	r4, r2, r3
 800b934:	2b00      	cmp	r3, #0
 800b936:	db01      	blt.n	800b93c <_strtod_l+0x6fc>
 800b938:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800b93a:	195d      	adds	r5, r3, r5
 800b93c:	9907      	ldr	r1, [sp, #28]
 800b93e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800b940:	1a5b      	subs	r3, r3, r1
 800b942:	2136      	movs	r1, #54	; 0x36
 800b944:	189b      	adds	r3, r3, r2
 800b946:	1a8a      	subs	r2, r1, r2
 800b948:	4985      	ldr	r1, [pc, #532]	; (800bb60 <_strtod_l+0x920>)
 800b94a:	2001      	movs	r0, #1
 800b94c:	468c      	mov	ip, r1
 800b94e:	2100      	movs	r1, #0
 800b950:	3b01      	subs	r3, #1
 800b952:	9114      	str	r1, [sp, #80]	; 0x50
 800b954:	9012      	str	r0, [sp, #72]	; 0x48
 800b956:	4563      	cmp	r3, ip
 800b958:	da07      	bge.n	800b96a <_strtod_l+0x72a>
 800b95a:	4661      	mov	r1, ip
 800b95c:	1ac9      	subs	r1, r1, r3
 800b95e:	1a52      	subs	r2, r2, r1
 800b960:	291f      	cmp	r1, #31
 800b962:	dd00      	ble.n	800b966 <_strtod_l+0x726>
 800b964:	e0b6      	b.n	800bad4 <_strtod_l+0x894>
 800b966:	4088      	lsls	r0, r1
 800b968:	9012      	str	r0, [sp, #72]	; 0x48
 800b96a:	18ab      	adds	r3, r5, r2
 800b96c:	930c      	str	r3, [sp, #48]	; 0x30
 800b96e:	18a4      	adds	r4, r4, r2
 800b970:	9b07      	ldr	r3, [sp, #28]
 800b972:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b974:	191c      	adds	r4, r3, r4
 800b976:	002b      	movs	r3, r5
 800b978:	4295      	cmp	r5, r2
 800b97a:	dd00      	ble.n	800b97e <_strtod_l+0x73e>
 800b97c:	0013      	movs	r3, r2
 800b97e:	42a3      	cmp	r3, r4
 800b980:	dd00      	ble.n	800b984 <_strtod_l+0x744>
 800b982:	0023      	movs	r3, r4
 800b984:	2b00      	cmp	r3, #0
 800b986:	dd04      	ble.n	800b992 <_strtod_l+0x752>
 800b988:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b98a:	1ae4      	subs	r4, r4, r3
 800b98c:	1ad2      	subs	r2, r2, r3
 800b98e:	920c      	str	r2, [sp, #48]	; 0x30
 800b990:	1aed      	subs	r5, r5, r3
 800b992:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b994:	2b00      	cmp	r3, #0
 800b996:	dd17      	ble.n	800b9c8 <_strtod_l+0x788>
 800b998:	001a      	movs	r2, r3
 800b99a:	9906      	ldr	r1, [sp, #24]
 800b99c:	9804      	ldr	r0, [sp, #16]
 800b99e:	f7ff f983 	bl	800aca8 <__pow5mult>
 800b9a2:	9006      	str	r0, [sp, #24]
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	d100      	bne.n	800b9aa <_strtod_l+0x76a>
 800b9a8:	e6ad      	b.n	800b706 <_strtod_l+0x4c6>
 800b9aa:	0001      	movs	r1, r0
 800b9ac:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800b9ae:	9804      	ldr	r0, [sp, #16]
 800b9b0:	f7ff f8ca 	bl	800ab48 <__multiply>
 800b9b4:	900e      	str	r0, [sp, #56]	; 0x38
 800b9b6:	2800      	cmp	r0, #0
 800b9b8:	d100      	bne.n	800b9bc <_strtod_l+0x77c>
 800b9ba:	e6a4      	b.n	800b706 <_strtod_l+0x4c6>
 800b9bc:	991c      	ldr	r1, [sp, #112]	; 0x70
 800b9be:	9804      	ldr	r0, [sp, #16]
 800b9c0:	f7fe ffae 	bl	800a920 <_Bfree>
 800b9c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b9c6:	931c      	str	r3, [sp, #112]	; 0x70
 800b9c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	dd00      	ble.n	800b9d0 <_strtod_l+0x790>
 800b9ce:	e087      	b.n	800bae0 <_strtod_l+0x8a0>
 800b9d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	dd08      	ble.n	800b9e8 <_strtod_l+0x7a8>
 800b9d6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b9d8:	9908      	ldr	r1, [sp, #32]
 800b9da:	9804      	ldr	r0, [sp, #16]
 800b9dc:	f7ff f964 	bl	800aca8 <__pow5mult>
 800b9e0:	9008      	str	r0, [sp, #32]
 800b9e2:	2800      	cmp	r0, #0
 800b9e4:	d100      	bne.n	800b9e8 <_strtod_l+0x7a8>
 800b9e6:	e68e      	b.n	800b706 <_strtod_l+0x4c6>
 800b9e8:	2c00      	cmp	r4, #0
 800b9ea:	dd08      	ble.n	800b9fe <_strtod_l+0x7be>
 800b9ec:	0022      	movs	r2, r4
 800b9ee:	9908      	ldr	r1, [sp, #32]
 800b9f0:	9804      	ldr	r0, [sp, #16]
 800b9f2:	f7ff f9b5 	bl	800ad60 <__lshift>
 800b9f6:	9008      	str	r0, [sp, #32]
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d100      	bne.n	800b9fe <_strtod_l+0x7be>
 800b9fc:	e683      	b.n	800b706 <_strtod_l+0x4c6>
 800b9fe:	2d00      	cmp	r5, #0
 800ba00:	dd08      	ble.n	800ba14 <_strtod_l+0x7d4>
 800ba02:	002a      	movs	r2, r5
 800ba04:	9906      	ldr	r1, [sp, #24]
 800ba06:	9804      	ldr	r0, [sp, #16]
 800ba08:	f7ff f9aa 	bl	800ad60 <__lshift>
 800ba0c:	9006      	str	r0, [sp, #24]
 800ba0e:	2800      	cmp	r0, #0
 800ba10:	d100      	bne.n	800ba14 <_strtod_l+0x7d4>
 800ba12:	e678      	b.n	800b706 <_strtod_l+0x4c6>
 800ba14:	9a08      	ldr	r2, [sp, #32]
 800ba16:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ba18:	9804      	ldr	r0, [sp, #16]
 800ba1a:	f7ff fa2b 	bl	800ae74 <__mdiff>
 800ba1e:	9005      	str	r0, [sp, #20]
 800ba20:	2800      	cmp	r0, #0
 800ba22:	d100      	bne.n	800ba26 <_strtod_l+0x7e6>
 800ba24:	e66f      	b.n	800b706 <_strtod_l+0x4c6>
 800ba26:	2200      	movs	r2, #0
 800ba28:	68c3      	ldr	r3, [r0, #12]
 800ba2a:	9906      	ldr	r1, [sp, #24]
 800ba2c:	60c2      	str	r2, [r0, #12]
 800ba2e:	930c      	str	r3, [sp, #48]	; 0x30
 800ba30:	f7ff fa04 	bl	800ae3c <__mcmp>
 800ba34:	2800      	cmp	r0, #0
 800ba36:	da5d      	bge.n	800baf4 <_strtod_l+0x8b4>
 800ba38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba3a:	4333      	orrs	r3, r6
 800ba3c:	d000      	beq.n	800ba40 <_strtod_l+0x800>
 800ba3e:	e088      	b.n	800bb52 <_strtod_l+0x912>
 800ba40:	033b      	lsls	r3, r7, #12
 800ba42:	d000      	beq.n	800ba46 <_strtod_l+0x806>
 800ba44:	e085      	b.n	800bb52 <_strtod_l+0x912>
 800ba46:	22d6      	movs	r2, #214	; 0xd6
 800ba48:	4b46      	ldr	r3, [pc, #280]	; (800bb64 <_strtod_l+0x924>)
 800ba4a:	04d2      	lsls	r2, r2, #19
 800ba4c:	403b      	ands	r3, r7
 800ba4e:	4293      	cmp	r3, r2
 800ba50:	d97f      	bls.n	800bb52 <_strtod_l+0x912>
 800ba52:	9b05      	ldr	r3, [sp, #20]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d103      	bne.n	800ba62 <_strtod_l+0x822>
 800ba5a:	9b05      	ldr	r3, [sp, #20]
 800ba5c:	691b      	ldr	r3, [r3, #16]
 800ba5e:	2b01      	cmp	r3, #1
 800ba60:	dd77      	ble.n	800bb52 <_strtod_l+0x912>
 800ba62:	9905      	ldr	r1, [sp, #20]
 800ba64:	2201      	movs	r2, #1
 800ba66:	9804      	ldr	r0, [sp, #16]
 800ba68:	f7ff f97a 	bl	800ad60 <__lshift>
 800ba6c:	9906      	ldr	r1, [sp, #24]
 800ba6e:	9005      	str	r0, [sp, #20]
 800ba70:	f7ff f9e4 	bl	800ae3c <__mcmp>
 800ba74:	2800      	cmp	r0, #0
 800ba76:	dd6c      	ble.n	800bb52 <_strtod_l+0x912>
 800ba78:	9907      	ldr	r1, [sp, #28]
 800ba7a:	003b      	movs	r3, r7
 800ba7c:	4a39      	ldr	r2, [pc, #228]	; (800bb64 <_strtod_l+0x924>)
 800ba7e:	2900      	cmp	r1, #0
 800ba80:	d100      	bne.n	800ba84 <_strtod_l+0x844>
 800ba82:	e094      	b.n	800bbae <_strtod_l+0x96e>
 800ba84:	0011      	movs	r1, r2
 800ba86:	20d6      	movs	r0, #214	; 0xd6
 800ba88:	4039      	ands	r1, r7
 800ba8a:	04c0      	lsls	r0, r0, #19
 800ba8c:	4281      	cmp	r1, r0
 800ba8e:	dd00      	ble.n	800ba92 <_strtod_l+0x852>
 800ba90:	e08d      	b.n	800bbae <_strtod_l+0x96e>
 800ba92:	23dc      	movs	r3, #220	; 0xdc
 800ba94:	049b      	lsls	r3, r3, #18
 800ba96:	4299      	cmp	r1, r3
 800ba98:	dc00      	bgt.n	800ba9c <_strtod_l+0x85c>
 800ba9a:	e6a7      	b.n	800b7ec <_strtod_l+0x5ac>
 800ba9c:	0030      	movs	r0, r6
 800ba9e:	0039      	movs	r1, r7
 800baa0:	4b31      	ldr	r3, [pc, #196]	; (800bb68 <_strtod_l+0x928>)
 800baa2:	2200      	movs	r2, #0
 800baa4:	f7f5 ff80 	bl	80019a8 <__aeabi_dmul>
 800baa8:	4b2e      	ldr	r3, [pc, #184]	; (800bb64 <_strtod_l+0x924>)
 800baaa:	0006      	movs	r6, r0
 800baac:	000f      	movs	r7, r1
 800baae:	420b      	tst	r3, r1
 800bab0:	d000      	beq.n	800bab4 <_strtod_l+0x874>
 800bab2:	e631      	b.n	800b718 <_strtod_l+0x4d8>
 800bab4:	2322      	movs	r3, #34	; 0x22
 800bab6:	9a04      	ldr	r2, [sp, #16]
 800bab8:	6013      	str	r3, [r2, #0]
 800baba:	e62d      	b.n	800b718 <_strtod_l+0x4d8>
 800babc:	234b      	movs	r3, #75	; 0x4b
 800babe:	1a9a      	subs	r2, r3, r2
 800bac0:	3b4c      	subs	r3, #76	; 0x4c
 800bac2:	4093      	lsls	r3, r2
 800bac4:	4019      	ands	r1, r3
 800bac6:	000f      	movs	r7, r1
 800bac8:	e6e3      	b.n	800b892 <_strtod_l+0x652>
 800baca:	2201      	movs	r2, #1
 800bacc:	4252      	negs	r2, r2
 800bace:	409a      	lsls	r2, r3
 800bad0:	4016      	ands	r6, r2
 800bad2:	e6de      	b.n	800b892 <_strtod_l+0x652>
 800bad4:	4925      	ldr	r1, [pc, #148]	; (800bb6c <_strtod_l+0x92c>)
 800bad6:	1acb      	subs	r3, r1, r3
 800bad8:	0001      	movs	r1, r0
 800bada:	4099      	lsls	r1, r3
 800badc:	9114      	str	r1, [sp, #80]	; 0x50
 800bade:	e743      	b.n	800b968 <_strtod_l+0x728>
 800bae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bae2:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bae4:	9804      	ldr	r0, [sp, #16]
 800bae6:	f7ff f93b 	bl	800ad60 <__lshift>
 800baea:	901c      	str	r0, [sp, #112]	; 0x70
 800baec:	2800      	cmp	r0, #0
 800baee:	d000      	beq.n	800baf2 <_strtod_l+0x8b2>
 800baf0:	e76e      	b.n	800b9d0 <_strtod_l+0x790>
 800baf2:	e608      	b.n	800b706 <_strtod_l+0x4c6>
 800baf4:	970e      	str	r7, [sp, #56]	; 0x38
 800baf6:	2800      	cmp	r0, #0
 800baf8:	d177      	bne.n	800bbea <_strtod_l+0x9aa>
 800bafa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bafc:	033b      	lsls	r3, r7, #12
 800bafe:	0b1b      	lsrs	r3, r3, #12
 800bb00:	2a00      	cmp	r2, #0
 800bb02:	d039      	beq.n	800bb78 <_strtod_l+0x938>
 800bb04:	4a1a      	ldr	r2, [pc, #104]	; (800bb70 <_strtod_l+0x930>)
 800bb06:	4293      	cmp	r3, r2
 800bb08:	d139      	bne.n	800bb7e <_strtod_l+0x93e>
 800bb0a:	2101      	movs	r1, #1
 800bb0c:	9b07      	ldr	r3, [sp, #28]
 800bb0e:	4249      	negs	r1, r1
 800bb10:	0032      	movs	r2, r6
 800bb12:	0008      	movs	r0, r1
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d00b      	beq.n	800bb30 <_strtod_l+0x8f0>
 800bb18:	24d4      	movs	r4, #212	; 0xd4
 800bb1a:	4b12      	ldr	r3, [pc, #72]	; (800bb64 <_strtod_l+0x924>)
 800bb1c:	0008      	movs	r0, r1
 800bb1e:	403b      	ands	r3, r7
 800bb20:	04e4      	lsls	r4, r4, #19
 800bb22:	42a3      	cmp	r3, r4
 800bb24:	d804      	bhi.n	800bb30 <_strtod_l+0x8f0>
 800bb26:	306c      	adds	r0, #108	; 0x6c
 800bb28:	0d1b      	lsrs	r3, r3, #20
 800bb2a:	1ac3      	subs	r3, r0, r3
 800bb2c:	4099      	lsls	r1, r3
 800bb2e:	0008      	movs	r0, r1
 800bb30:	4282      	cmp	r2, r0
 800bb32:	d124      	bne.n	800bb7e <_strtod_l+0x93e>
 800bb34:	4b0f      	ldr	r3, [pc, #60]	; (800bb74 <_strtod_l+0x934>)
 800bb36:	990e      	ldr	r1, [sp, #56]	; 0x38
 800bb38:	4299      	cmp	r1, r3
 800bb3a:	d102      	bne.n	800bb42 <_strtod_l+0x902>
 800bb3c:	3201      	adds	r2, #1
 800bb3e:	d100      	bne.n	800bb42 <_strtod_l+0x902>
 800bb40:	e5e1      	b.n	800b706 <_strtod_l+0x4c6>
 800bb42:	4b08      	ldr	r3, [pc, #32]	; (800bb64 <_strtod_l+0x924>)
 800bb44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bb46:	2600      	movs	r6, #0
 800bb48:	401a      	ands	r2, r3
 800bb4a:	0013      	movs	r3, r2
 800bb4c:	2280      	movs	r2, #128	; 0x80
 800bb4e:	0352      	lsls	r2, r2, #13
 800bb50:	189f      	adds	r7, r3, r2
 800bb52:	9b07      	ldr	r3, [sp, #28]
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	d1a1      	bne.n	800ba9c <_strtod_l+0x85c>
 800bb58:	e5de      	b.n	800b718 <_strtod_l+0x4d8>
 800bb5a:	46c0      	nop			; (mov r8, r8)
 800bb5c:	0800d5a0 	.word	0x0800d5a0
 800bb60:	fffffc02 	.word	0xfffffc02
 800bb64:	7ff00000 	.word	0x7ff00000
 800bb68:	39500000 	.word	0x39500000
 800bb6c:	fffffbe2 	.word	0xfffffbe2
 800bb70:	000fffff 	.word	0x000fffff
 800bb74:	7fefffff 	.word	0x7fefffff
 800bb78:	4333      	orrs	r3, r6
 800bb7a:	d100      	bne.n	800bb7e <_strtod_l+0x93e>
 800bb7c:	e77c      	b.n	800ba78 <_strtod_l+0x838>
 800bb7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d01d      	beq.n	800bbc0 <_strtod_l+0x980>
 800bb84:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bb86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bb88:	4213      	tst	r3, r2
 800bb8a:	d0e2      	beq.n	800bb52 <_strtod_l+0x912>
 800bb8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb8e:	0030      	movs	r0, r6
 800bb90:	0039      	movs	r1, r7
 800bb92:	9a07      	ldr	r2, [sp, #28]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d017      	beq.n	800bbc8 <_strtod_l+0x988>
 800bb98:	f7ff fb3a 	bl	800b210 <sulp>
 800bb9c:	0002      	movs	r2, r0
 800bb9e:	000b      	movs	r3, r1
 800bba0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bba2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bba4:	f7f4 ffa6 	bl	8000af4 <__aeabi_dadd>
 800bba8:	0006      	movs	r6, r0
 800bbaa:	000f      	movs	r7, r1
 800bbac:	e7d1      	b.n	800bb52 <_strtod_l+0x912>
 800bbae:	2601      	movs	r6, #1
 800bbb0:	4013      	ands	r3, r2
 800bbb2:	4a98      	ldr	r2, [pc, #608]	; (800be14 <_strtod_l+0xbd4>)
 800bbb4:	4276      	negs	r6, r6
 800bbb6:	189b      	adds	r3, r3, r2
 800bbb8:	4a97      	ldr	r2, [pc, #604]	; (800be18 <_strtod_l+0xbd8>)
 800bbba:	431a      	orrs	r2, r3
 800bbbc:	0017      	movs	r7, r2
 800bbbe:	e7c8      	b.n	800bb52 <_strtod_l+0x912>
 800bbc0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800bbc2:	4233      	tst	r3, r6
 800bbc4:	d0c5      	beq.n	800bb52 <_strtod_l+0x912>
 800bbc6:	e7e1      	b.n	800bb8c <_strtod_l+0x94c>
 800bbc8:	f7ff fb22 	bl	800b210 <sulp>
 800bbcc:	0002      	movs	r2, r0
 800bbce:	000b      	movs	r3, r1
 800bbd0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bbd2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bbd4:	f7f6 f9aa 	bl	8001f2c <__aeabi_dsub>
 800bbd8:	2200      	movs	r2, #0
 800bbda:	2300      	movs	r3, #0
 800bbdc:	0006      	movs	r6, r0
 800bbde:	000f      	movs	r7, r1
 800bbe0:	f7f4 fc30 	bl	8000444 <__aeabi_dcmpeq>
 800bbe4:	2800      	cmp	r0, #0
 800bbe6:	d0b4      	beq.n	800bb52 <_strtod_l+0x912>
 800bbe8:	e600      	b.n	800b7ec <_strtod_l+0x5ac>
 800bbea:	9906      	ldr	r1, [sp, #24]
 800bbec:	9805      	ldr	r0, [sp, #20]
 800bbee:	f7ff faa1 	bl	800b134 <__ratio>
 800bbf2:	2380      	movs	r3, #128	; 0x80
 800bbf4:	2200      	movs	r2, #0
 800bbf6:	05db      	lsls	r3, r3, #23
 800bbf8:	0004      	movs	r4, r0
 800bbfa:	000d      	movs	r5, r1
 800bbfc:	f7f4 fc32 	bl	8000464 <__aeabi_dcmple>
 800bc00:	2800      	cmp	r0, #0
 800bc02:	d06d      	beq.n	800bce0 <_strtod_l+0xaa0>
 800bc04:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d000      	beq.n	800bc0c <_strtod_l+0x9cc>
 800bc0a:	e07e      	b.n	800bd0a <_strtod_l+0xaca>
 800bc0c:	2e00      	cmp	r6, #0
 800bc0e:	d158      	bne.n	800bcc2 <_strtod_l+0xa82>
 800bc10:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc12:	031b      	lsls	r3, r3, #12
 800bc14:	d000      	beq.n	800bc18 <_strtod_l+0x9d8>
 800bc16:	e07f      	b.n	800bd18 <_strtod_l+0xad8>
 800bc18:	2200      	movs	r2, #0
 800bc1a:	0020      	movs	r0, r4
 800bc1c:	0029      	movs	r1, r5
 800bc1e:	4b7f      	ldr	r3, [pc, #508]	; (800be1c <_strtod_l+0xbdc>)
 800bc20:	f7f4 fc16 	bl	8000450 <__aeabi_dcmplt>
 800bc24:	2800      	cmp	r0, #0
 800bc26:	d158      	bne.n	800bcda <_strtod_l+0xa9a>
 800bc28:	0020      	movs	r0, r4
 800bc2a:	0029      	movs	r1, r5
 800bc2c:	2200      	movs	r2, #0
 800bc2e:	4b7c      	ldr	r3, [pc, #496]	; (800be20 <_strtod_l+0xbe0>)
 800bc30:	f7f5 feba 	bl	80019a8 <__aeabi_dmul>
 800bc34:	0004      	movs	r4, r0
 800bc36:	000d      	movs	r5, r1
 800bc38:	2380      	movs	r3, #128	; 0x80
 800bc3a:	061b      	lsls	r3, r3, #24
 800bc3c:	940a      	str	r4, [sp, #40]	; 0x28
 800bc3e:	18eb      	adds	r3, r5, r3
 800bc40:	930b      	str	r3, [sp, #44]	; 0x2c
 800bc42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc44:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc46:	9212      	str	r2, [sp, #72]	; 0x48
 800bc48:	9313      	str	r3, [sp, #76]	; 0x4c
 800bc4a:	4a76      	ldr	r2, [pc, #472]	; (800be24 <_strtod_l+0xbe4>)
 800bc4c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc4e:	4013      	ands	r3, r2
 800bc50:	9314      	str	r3, [sp, #80]	; 0x50
 800bc52:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc54:	4b74      	ldr	r3, [pc, #464]	; (800be28 <_strtod_l+0xbe8>)
 800bc56:	429a      	cmp	r2, r3
 800bc58:	d000      	beq.n	800bc5c <_strtod_l+0xa1c>
 800bc5a:	e091      	b.n	800bd80 <_strtod_l+0xb40>
 800bc5c:	4a73      	ldr	r2, [pc, #460]	; (800be2c <_strtod_l+0xbec>)
 800bc5e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bc60:	4694      	mov	ip, r2
 800bc62:	4463      	add	r3, ip
 800bc64:	001f      	movs	r7, r3
 800bc66:	0030      	movs	r0, r6
 800bc68:	0019      	movs	r1, r3
 800bc6a:	f7ff f99b 	bl	800afa4 <__ulp>
 800bc6e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc72:	f7f5 fe99 	bl	80019a8 <__aeabi_dmul>
 800bc76:	0032      	movs	r2, r6
 800bc78:	003b      	movs	r3, r7
 800bc7a:	f7f4 ff3b 	bl	8000af4 <__aeabi_dadd>
 800bc7e:	4a69      	ldr	r2, [pc, #420]	; (800be24 <_strtod_l+0xbe4>)
 800bc80:	4b6b      	ldr	r3, [pc, #428]	; (800be30 <_strtod_l+0xbf0>)
 800bc82:	0006      	movs	r6, r0
 800bc84:	400a      	ands	r2, r1
 800bc86:	429a      	cmp	r2, r3
 800bc88:	d949      	bls.n	800bd1e <_strtod_l+0xade>
 800bc8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800bc8c:	4b69      	ldr	r3, [pc, #420]	; (800be34 <_strtod_l+0xbf4>)
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d103      	bne.n	800bc9a <_strtod_l+0xa5a>
 800bc92:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bc94:	3301      	adds	r3, #1
 800bc96:	d100      	bne.n	800bc9a <_strtod_l+0xa5a>
 800bc98:	e535      	b.n	800b706 <_strtod_l+0x4c6>
 800bc9a:	2601      	movs	r6, #1
 800bc9c:	4f65      	ldr	r7, [pc, #404]	; (800be34 <_strtod_l+0xbf4>)
 800bc9e:	4276      	negs	r6, r6
 800bca0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800bca2:	9804      	ldr	r0, [sp, #16]
 800bca4:	f7fe fe3c 	bl	800a920 <_Bfree>
 800bca8:	9908      	ldr	r1, [sp, #32]
 800bcaa:	9804      	ldr	r0, [sp, #16]
 800bcac:	f7fe fe38 	bl	800a920 <_Bfree>
 800bcb0:	9906      	ldr	r1, [sp, #24]
 800bcb2:	9804      	ldr	r0, [sp, #16]
 800bcb4:	f7fe fe34 	bl	800a920 <_Bfree>
 800bcb8:	9905      	ldr	r1, [sp, #20]
 800bcba:	9804      	ldr	r0, [sp, #16]
 800bcbc:	f7fe fe30 	bl	800a920 <_Bfree>
 800bcc0:	e60b      	b.n	800b8da <_strtod_l+0x69a>
 800bcc2:	2e01      	cmp	r6, #1
 800bcc4:	d103      	bne.n	800bcce <_strtod_l+0xa8e>
 800bcc6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bcc8:	2b00      	cmp	r3, #0
 800bcca:	d100      	bne.n	800bcce <_strtod_l+0xa8e>
 800bccc:	e58e      	b.n	800b7ec <_strtod_l+0x5ac>
 800bcce:	2300      	movs	r3, #0
 800bcd0:	4c59      	ldr	r4, [pc, #356]	; (800be38 <_strtod_l+0xbf8>)
 800bcd2:	930a      	str	r3, [sp, #40]	; 0x28
 800bcd4:	940b      	str	r4, [sp, #44]	; 0x2c
 800bcd6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bcd8:	e01c      	b.n	800bd14 <_strtod_l+0xad4>
 800bcda:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800bcdc:	4d50      	ldr	r5, [pc, #320]	; (800be20 <_strtod_l+0xbe0>)
 800bcde:	e7ab      	b.n	800bc38 <_strtod_l+0x9f8>
 800bce0:	2200      	movs	r2, #0
 800bce2:	0020      	movs	r0, r4
 800bce4:	0029      	movs	r1, r5
 800bce6:	4b4e      	ldr	r3, [pc, #312]	; (800be20 <_strtod_l+0xbe0>)
 800bce8:	f7f5 fe5e 	bl	80019a8 <__aeabi_dmul>
 800bcec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcee:	0004      	movs	r4, r0
 800bcf0:	000b      	movs	r3, r1
 800bcf2:	000d      	movs	r5, r1
 800bcf4:	2a00      	cmp	r2, #0
 800bcf6:	d104      	bne.n	800bd02 <_strtod_l+0xac2>
 800bcf8:	2280      	movs	r2, #128	; 0x80
 800bcfa:	0612      	lsls	r2, r2, #24
 800bcfc:	900a      	str	r0, [sp, #40]	; 0x28
 800bcfe:	188b      	adds	r3, r1, r2
 800bd00:	e79e      	b.n	800bc40 <_strtod_l+0xa00>
 800bd02:	0002      	movs	r2, r0
 800bd04:	920a      	str	r2, [sp, #40]	; 0x28
 800bd06:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd08:	e79b      	b.n	800bc42 <_strtod_l+0xa02>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	4c43      	ldr	r4, [pc, #268]	; (800be1c <_strtod_l+0xbdc>)
 800bd0e:	930a      	str	r3, [sp, #40]	; 0x28
 800bd10:	940b      	str	r4, [sp, #44]	; 0x2c
 800bd12:	2400      	movs	r4, #0
 800bd14:	4d41      	ldr	r5, [pc, #260]	; (800be1c <_strtod_l+0xbdc>)
 800bd16:	e794      	b.n	800bc42 <_strtod_l+0xa02>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	4c47      	ldr	r4, [pc, #284]	; (800be38 <_strtod_l+0xbf8>)
 800bd1c:	e7f7      	b.n	800bd0e <_strtod_l+0xace>
 800bd1e:	23d4      	movs	r3, #212	; 0xd4
 800bd20:	049b      	lsls	r3, r3, #18
 800bd22:	18cf      	adds	r7, r1, r3
 800bd24:	9b07      	ldr	r3, [sp, #28]
 800bd26:	970e      	str	r7, [sp, #56]	; 0x38
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d1b9      	bne.n	800bca0 <_strtod_l+0xa60>
 800bd2c:	4b3d      	ldr	r3, [pc, #244]	; (800be24 <_strtod_l+0xbe4>)
 800bd2e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd30:	403b      	ands	r3, r7
 800bd32:	429a      	cmp	r2, r3
 800bd34:	d1b4      	bne.n	800bca0 <_strtod_l+0xa60>
 800bd36:	0020      	movs	r0, r4
 800bd38:	0029      	movs	r1, r5
 800bd3a:	f7f4 fbcf 	bl	80004dc <__aeabi_d2lz>
 800bd3e:	f7f4 fc09 	bl	8000554 <__aeabi_l2d>
 800bd42:	0002      	movs	r2, r0
 800bd44:	000b      	movs	r3, r1
 800bd46:	0020      	movs	r0, r4
 800bd48:	0029      	movs	r1, r5
 800bd4a:	f7f6 f8ef 	bl	8001f2c <__aeabi_dsub>
 800bd4e:	033b      	lsls	r3, r7, #12
 800bd50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd52:	0b1b      	lsrs	r3, r3, #12
 800bd54:	4333      	orrs	r3, r6
 800bd56:	4313      	orrs	r3, r2
 800bd58:	0004      	movs	r4, r0
 800bd5a:	000d      	movs	r5, r1
 800bd5c:	4a37      	ldr	r2, [pc, #220]	; (800be3c <_strtod_l+0xbfc>)
 800bd5e:	2b00      	cmp	r3, #0
 800bd60:	d054      	beq.n	800be0c <_strtod_l+0xbcc>
 800bd62:	4b37      	ldr	r3, [pc, #220]	; (800be40 <_strtod_l+0xc00>)
 800bd64:	f7f4 fb74 	bl	8000450 <__aeabi_dcmplt>
 800bd68:	2800      	cmp	r0, #0
 800bd6a:	d000      	beq.n	800bd6e <_strtod_l+0xb2e>
 800bd6c:	e4d4      	b.n	800b718 <_strtod_l+0x4d8>
 800bd6e:	0020      	movs	r0, r4
 800bd70:	0029      	movs	r1, r5
 800bd72:	4a34      	ldr	r2, [pc, #208]	; (800be44 <_strtod_l+0xc04>)
 800bd74:	4b2a      	ldr	r3, [pc, #168]	; (800be20 <_strtod_l+0xbe0>)
 800bd76:	f7f4 fb7f 	bl	8000478 <__aeabi_dcmpgt>
 800bd7a:	2800      	cmp	r0, #0
 800bd7c:	d090      	beq.n	800bca0 <_strtod_l+0xa60>
 800bd7e:	e4cb      	b.n	800b718 <_strtod_l+0x4d8>
 800bd80:	9b07      	ldr	r3, [sp, #28]
 800bd82:	2b00      	cmp	r3, #0
 800bd84:	d02b      	beq.n	800bdde <_strtod_l+0xb9e>
 800bd86:	23d4      	movs	r3, #212	; 0xd4
 800bd88:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd8a:	04db      	lsls	r3, r3, #19
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d826      	bhi.n	800bdde <_strtod_l+0xb9e>
 800bd90:	0020      	movs	r0, r4
 800bd92:	0029      	movs	r1, r5
 800bd94:	4a2c      	ldr	r2, [pc, #176]	; (800be48 <_strtod_l+0xc08>)
 800bd96:	4b2d      	ldr	r3, [pc, #180]	; (800be4c <_strtod_l+0xc0c>)
 800bd98:	f7f4 fb64 	bl	8000464 <__aeabi_dcmple>
 800bd9c:	2800      	cmp	r0, #0
 800bd9e:	d017      	beq.n	800bdd0 <_strtod_l+0xb90>
 800bda0:	0020      	movs	r0, r4
 800bda2:	0029      	movs	r1, r5
 800bda4:	f7f4 fb7c 	bl	80004a0 <__aeabi_d2uiz>
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d100      	bne.n	800bdae <_strtod_l+0xb6e>
 800bdac:	3001      	adds	r0, #1
 800bdae:	f7f6 fcc3 	bl	8002738 <__aeabi_ui2d>
 800bdb2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bdb4:	0004      	movs	r4, r0
 800bdb6:	000b      	movs	r3, r1
 800bdb8:	000d      	movs	r5, r1
 800bdba:	2a00      	cmp	r2, #0
 800bdbc:	d122      	bne.n	800be04 <_strtod_l+0xbc4>
 800bdbe:	2280      	movs	r2, #128	; 0x80
 800bdc0:	0612      	lsls	r2, r2, #24
 800bdc2:	188b      	adds	r3, r1, r2
 800bdc4:	9016      	str	r0, [sp, #88]	; 0x58
 800bdc6:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdc8:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bdca:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdcc:	9212      	str	r2, [sp, #72]	; 0x48
 800bdce:	9313      	str	r3, [sp, #76]	; 0x4c
 800bdd0:	22d6      	movs	r2, #214	; 0xd6
 800bdd2:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bdd4:	04d2      	lsls	r2, r2, #19
 800bdd6:	189b      	adds	r3, r3, r2
 800bdd8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bdda:	1a9b      	subs	r3, r3, r2
 800bddc:	9313      	str	r3, [sp, #76]	; 0x4c
 800bdde:	9810      	ldr	r0, [sp, #64]	; 0x40
 800bde0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bde2:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800bde4:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800bde6:	f7ff f8dd 	bl	800afa4 <__ulp>
 800bdea:	0002      	movs	r2, r0
 800bdec:	000b      	movs	r3, r1
 800bdee:	0030      	movs	r0, r6
 800bdf0:	0039      	movs	r1, r7
 800bdf2:	f7f5 fdd9 	bl	80019a8 <__aeabi_dmul>
 800bdf6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800bdf8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bdfa:	f7f4 fe7b 	bl	8000af4 <__aeabi_dadd>
 800bdfe:	0006      	movs	r6, r0
 800be00:	000f      	movs	r7, r1
 800be02:	e78f      	b.n	800bd24 <_strtod_l+0xae4>
 800be04:	0002      	movs	r2, r0
 800be06:	9216      	str	r2, [sp, #88]	; 0x58
 800be08:	9317      	str	r3, [sp, #92]	; 0x5c
 800be0a:	e7dd      	b.n	800bdc8 <_strtod_l+0xb88>
 800be0c:	4b10      	ldr	r3, [pc, #64]	; (800be50 <_strtod_l+0xc10>)
 800be0e:	f7f4 fb1f 	bl	8000450 <__aeabi_dcmplt>
 800be12:	e7b2      	b.n	800bd7a <_strtod_l+0xb3a>
 800be14:	fff00000 	.word	0xfff00000
 800be18:	000fffff 	.word	0x000fffff
 800be1c:	3ff00000 	.word	0x3ff00000
 800be20:	3fe00000 	.word	0x3fe00000
 800be24:	7ff00000 	.word	0x7ff00000
 800be28:	7fe00000 	.word	0x7fe00000
 800be2c:	fcb00000 	.word	0xfcb00000
 800be30:	7c9fffff 	.word	0x7c9fffff
 800be34:	7fefffff 	.word	0x7fefffff
 800be38:	bff00000 	.word	0xbff00000
 800be3c:	94a03595 	.word	0x94a03595
 800be40:	3fdfffff 	.word	0x3fdfffff
 800be44:	35afe535 	.word	0x35afe535
 800be48:	ffc00000 	.word	0xffc00000
 800be4c:	41dfffff 	.word	0x41dfffff
 800be50:	3fcfffff 	.word	0x3fcfffff

0800be54 <_strtod_r>:
 800be54:	b510      	push	{r4, lr}
 800be56:	4b02      	ldr	r3, [pc, #8]	; (800be60 <_strtod_r+0xc>)
 800be58:	f7ff f9f2 	bl	800b240 <_strtod_l>
 800be5c:	bd10      	pop	{r4, pc}
 800be5e:	46c0      	nop			; (mov r8, r8)
 800be60:	2000006c 	.word	0x2000006c

0800be64 <_strtol_l.constprop.0>:
 800be64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be66:	b087      	sub	sp, #28
 800be68:	001e      	movs	r6, r3
 800be6a:	9005      	str	r0, [sp, #20]
 800be6c:	9101      	str	r1, [sp, #4]
 800be6e:	9202      	str	r2, [sp, #8]
 800be70:	2b01      	cmp	r3, #1
 800be72:	d048      	beq.n	800bf06 <_strtol_l.constprop.0+0xa2>
 800be74:	000b      	movs	r3, r1
 800be76:	2e24      	cmp	r6, #36	; 0x24
 800be78:	d845      	bhi.n	800bf06 <_strtol_l.constprop.0+0xa2>
 800be7a:	4a3b      	ldr	r2, [pc, #236]	; (800bf68 <_strtol_l.constprop.0+0x104>)
 800be7c:	2108      	movs	r1, #8
 800be7e:	4694      	mov	ip, r2
 800be80:	001a      	movs	r2, r3
 800be82:	4660      	mov	r0, ip
 800be84:	7814      	ldrb	r4, [r2, #0]
 800be86:	3301      	adds	r3, #1
 800be88:	5d00      	ldrb	r0, [r0, r4]
 800be8a:	001d      	movs	r5, r3
 800be8c:	0007      	movs	r7, r0
 800be8e:	400f      	ands	r7, r1
 800be90:	4208      	tst	r0, r1
 800be92:	d1f5      	bne.n	800be80 <_strtol_l.constprop.0+0x1c>
 800be94:	2c2d      	cmp	r4, #45	; 0x2d
 800be96:	d13d      	bne.n	800bf14 <_strtol_l.constprop.0+0xb0>
 800be98:	2701      	movs	r7, #1
 800be9a:	781c      	ldrb	r4, [r3, #0]
 800be9c:	1c95      	adds	r5, r2, #2
 800be9e:	2e00      	cmp	r6, #0
 800bea0:	d05e      	beq.n	800bf60 <_strtol_l.constprop.0+0xfc>
 800bea2:	2e10      	cmp	r6, #16
 800bea4:	d109      	bne.n	800beba <_strtol_l.constprop.0+0x56>
 800bea6:	2c30      	cmp	r4, #48	; 0x30
 800bea8:	d107      	bne.n	800beba <_strtol_l.constprop.0+0x56>
 800beaa:	2220      	movs	r2, #32
 800beac:	782b      	ldrb	r3, [r5, #0]
 800beae:	4393      	bics	r3, r2
 800beb0:	2b58      	cmp	r3, #88	; 0x58
 800beb2:	d150      	bne.n	800bf56 <_strtol_l.constprop.0+0xf2>
 800beb4:	2610      	movs	r6, #16
 800beb6:	786c      	ldrb	r4, [r5, #1]
 800beb8:	3502      	adds	r5, #2
 800beba:	4b2c      	ldr	r3, [pc, #176]	; (800bf6c <_strtol_l.constprop.0+0x108>)
 800bebc:	0031      	movs	r1, r6
 800bebe:	18fb      	adds	r3, r7, r3
 800bec0:	0018      	movs	r0, r3
 800bec2:	9303      	str	r3, [sp, #12]
 800bec4:	f7f4 f9be 	bl	8000244 <__aeabi_uidivmod>
 800bec8:	2200      	movs	r2, #0
 800beca:	9104      	str	r1, [sp, #16]
 800becc:	2101      	movs	r1, #1
 800bece:	4684      	mov	ip, r0
 800bed0:	0010      	movs	r0, r2
 800bed2:	4249      	negs	r1, r1
 800bed4:	0023      	movs	r3, r4
 800bed6:	3b30      	subs	r3, #48	; 0x30
 800bed8:	2b09      	cmp	r3, #9
 800beda:	d903      	bls.n	800bee4 <_strtol_l.constprop.0+0x80>
 800bedc:	3b11      	subs	r3, #17
 800bede:	2b19      	cmp	r3, #25
 800bee0:	d81d      	bhi.n	800bf1e <_strtol_l.constprop.0+0xba>
 800bee2:	330a      	adds	r3, #10
 800bee4:	429e      	cmp	r6, r3
 800bee6:	dd1e      	ble.n	800bf26 <_strtol_l.constprop.0+0xc2>
 800bee8:	1c54      	adds	r4, r2, #1
 800beea:	d009      	beq.n	800bf00 <_strtol_l.constprop.0+0x9c>
 800beec:	000a      	movs	r2, r1
 800beee:	4584      	cmp	ip, r0
 800bef0:	d306      	bcc.n	800bf00 <_strtol_l.constprop.0+0x9c>
 800bef2:	d102      	bne.n	800befa <_strtol_l.constprop.0+0x96>
 800bef4:	9c04      	ldr	r4, [sp, #16]
 800bef6:	429c      	cmp	r4, r3
 800bef8:	db02      	blt.n	800bf00 <_strtol_l.constprop.0+0x9c>
 800befa:	2201      	movs	r2, #1
 800befc:	4370      	muls	r0, r6
 800befe:	1818      	adds	r0, r3, r0
 800bf00:	782c      	ldrb	r4, [r5, #0]
 800bf02:	3501      	adds	r5, #1
 800bf04:	e7e6      	b.n	800bed4 <_strtol_l.constprop.0+0x70>
 800bf06:	f7fd fce5 	bl	80098d4 <__errno>
 800bf0a:	2316      	movs	r3, #22
 800bf0c:	6003      	str	r3, [r0, #0]
 800bf0e:	2000      	movs	r0, #0
 800bf10:	b007      	add	sp, #28
 800bf12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf14:	2c2b      	cmp	r4, #43	; 0x2b
 800bf16:	d1c2      	bne.n	800be9e <_strtol_l.constprop.0+0x3a>
 800bf18:	781c      	ldrb	r4, [r3, #0]
 800bf1a:	1c95      	adds	r5, r2, #2
 800bf1c:	e7bf      	b.n	800be9e <_strtol_l.constprop.0+0x3a>
 800bf1e:	0023      	movs	r3, r4
 800bf20:	3b61      	subs	r3, #97	; 0x61
 800bf22:	2b19      	cmp	r3, #25
 800bf24:	d9dd      	bls.n	800bee2 <_strtol_l.constprop.0+0x7e>
 800bf26:	1c53      	adds	r3, r2, #1
 800bf28:	d109      	bne.n	800bf3e <_strtol_l.constprop.0+0xda>
 800bf2a:	2322      	movs	r3, #34	; 0x22
 800bf2c:	9a05      	ldr	r2, [sp, #20]
 800bf2e:	9803      	ldr	r0, [sp, #12]
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	9b02      	ldr	r3, [sp, #8]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d0eb      	beq.n	800bf10 <_strtol_l.constprop.0+0xac>
 800bf38:	1e6b      	subs	r3, r5, #1
 800bf3a:	9301      	str	r3, [sp, #4]
 800bf3c:	e007      	b.n	800bf4e <_strtol_l.constprop.0+0xea>
 800bf3e:	2f00      	cmp	r7, #0
 800bf40:	d000      	beq.n	800bf44 <_strtol_l.constprop.0+0xe0>
 800bf42:	4240      	negs	r0, r0
 800bf44:	9b02      	ldr	r3, [sp, #8]
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d0e2      	beq.n	800bf10 <_strtol_l.constprop.0+0xac>
 800bf4a:	2a00      	cmp	r2, #0
 800bf4c:	d1f4      	bne.n	800bf38 <_strtol_l.constprop.0+0xd4>
 800bf4e:	9b02      	ldr	r3, [sp, #8]
 800bf50:	9a01      	ldr	r2, [sp, #4]
 800bf52:	601a      	str	r2, [r3, #0]
 800bf54:	e7dc      	b.n	800bf10 <_strtol_l.constprop.0+0xac>
 800bf56:	2430      	movs	r4, #48	; 0x30
 800bf58:	2e00      	cmp	r6, #0
 800bf5a:	d1ae      	bne.n	800beba <_strtol_l.constprop.0+0x56>
 800bf5c:	3608      	adds	r6, #8
 800bf5e:	e7ac      	b.n	800beba <_strtol_l.constprop.0+0x56>
 800bf60:	2c30      	cmp	r4, #48	; 0x30
 800bf62:	d0a2      	beq.n	800beaa <_strtol_l.constprop.0+0x46>
 800bf64:	260a      	movs	r6, #10
 800bf66:	e7a8      	b.n	800beba <_strtol_l.constprop.0+0x56>
 800bf68:	0800d5c9 	.word	0x0800d5c9
 800bf6c:	7fffffff 	.word	0x7fffffff

0800bf70 <_strtol_r>:
 800bf70:	b510      	push	{r4, lr}
 800bf72:	f7ff ff77 	bl	800be64 <_strtol_l.constprop.0>
 800bf76:	bd10      	pop	{r4, pc}

0800bf78 <__ssputs_r>:
 800bf78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf7a:	b085      	sub	sp, #20
 800bf7c:	9301      	str	r3, [sp, #4]
 800bf7e:	9203      	str	r2, [sp, #12]
 800bf80:	688e      	ldr	r6, [r1, #8]
 800bf82:	9a01      	ldr	r2, [sp, #4]
 800bf84:	0007      	movs	r7, r0
 800bf86:	000c      	movs	r4, r1
 800bf88:	680b      	ldr	r3, [r1, #0]
 800bf8a:	4296      	cmp	r6, r2
 800bf8c:	d831      	bhi.n	800bff2 <__ssputs_r+0x7a>
 800bf8e:	898a      	ldrh	r2, [r1, #12]
 800bf90:	2190      	movs	r1, #144	; 0x90
 800bf92:	00c9      	lsls	r1, r1, #3
 800bf94:	420a      	tst	r2, r1
 800bf96:	d029      	beq.n	800bfec <__ssputs_r+0x74>
 800bf98:	2003      	movs	r0, #3
 800bf9a:	6921      	ldr	r1, [r4, #16]
 800bf9c:	1a5b      	subs	r3, r3, r1
 800bf9e:	9302      	str	r3, [sp, #8]
 800bfa0:	6963      	ldr	r3, [r4, #20]
 800bfa2:	4343      	muls	r3, r0
 800bfa4:	0fdd      	lsrs	r5, r3, #31
 800bfa6:	18ed      	adds	r5, r5, r3
 800bfa8:	9b01      	ldr	r3, [sp, #4]
 800bfaa:	9802      	ldr	r0, [sp, #8]
 800bfac:	3301      	adds	r3, #1
 800bfae:	181b      	adds	r3, r3, r0
 800bfb0:	106d      	asrs	r5, r5, #1
 800bfb2:	42ab      	cmp	r3, r5
 800bfb4:	d900      	bls.n	800bfb8 <__ssputs_r+0x40>
 800bfb6:	001d      	movs	r5, r3
 800bfb8:	0552      	lsls	r2, r2, #21
 800bfba:	d529      	bpl.n	800c010 <__ssputs_r+0x98>
 800bfbc:	0029      	movs	r1, r5
 800bfbe:	0038      	movs	r0, r7
 800bfc0:	f7fe fbd8 	bl	800a774 <_malloc_r>
 800bfc4:	1e06      	subs	r6, r0, #0
 800bfc6:	d02d      	beq.n	800c024 <__ssputs_r+0xac>
 800bfc8:	9a02      	ldr	r2, [sp, #8]
 800bfca:	6921      	ldr	r1, [r4, #16]
 800bfcc:	f000 fbf0 	bl	800c7b0 <memcpy>
 800bfd0:	89a2      	ldrh	r2, [r4, #12]
 800bfd2:	4b19      	ldr	r3, [pc, #100]	; (800c038 <__ssputs_r+0xc0>)
 800bfd4:	401a      	ands	r2, r3
 800bfd6:	2380      	movs	r3, #128	; 0x80
 800bfd8:	4313      	orrs	r3, r2
 800bfda:	81a3      	strh	r3, [r4, #12]
 800bfdc:	9b02      	ldr	r3, [sp, #8]
 800bfde:	6126      	str	r6, [r4, #16]
 800bfe0:	18f6      	adds	r6, r6, r3
 800bfe2:	6026      	str	r6, [r4, #0]
 800bfe4:	6165      	str	r5, [r4, #20]
 800bfe6:	9e01      	ldr	r6, [sp, #4]
 800bfe8:	1aed      	subs	r5, r5, r3
 800bfea:	60a5      	str	r5, [r4, #8]
 800bfec:	9b01      	ldr	r3, [sp, #4]
 800bfee:	429e      	cmp	r6, r3
 800bff0:	d900      	bls.n	800bff4 <__ssputs_r+0x7c>
 800bff2:	9e01      	ldr	r6, [sp, #4]
 800bff4:	0032      	movs	r2, r6
 800bff6:	9903      	ldr	r1, [sp, #12]
 800bff8:	6820      	ldr	r0, [r4, #0]
 800bffa:	f000 fb7f 	bl	800c6fc <memmove>
 800bffe:	2000      	movs	r0, #0
 800c000:	68a3      	ldr	r3, [r4, #8]
 800c002:	1b9b      	subs	r3, r3, r6
 800c004:	60a3      	str	r3, [r4, #8]
 800c006:	6823      	ldr	r3, [r4, #0]
 800c008:	199b      	adds	r3, r3, r6
 800c00a:	6023      	str	r3, [r4, #0]
 800c00c:	b005      	add	sp, #20
 800c00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c010:	002a      	movs	r2, r5
 800c012:	0038      	movs	r0, r7
 800c014:	f000 ff96 	bl	800cf44 <_realloc_r>
 800c018:	1e06      	subs	r6, r0, #0
 800c01a:	d1df      	bne.n	800bfdc <__ssputs_r+0x64>
 800c01c:	0038      	movs	r0, r7
 800c01e:	6921      	ldr	r1, [r4, #16]
 800c020:	f7fe fb32 	bl	800a688 <_free_r>
 800c024:	230c      	movs	r3, #12
 800c026:	2001      	movs	r0, #1
 800c028:	603b      	str	r3, [r7, #0]
 800c02a:	89a2      	ldrh	r2, [r4, #12]
 800c02c:	3334      	adds	r3, #52	; 0x34
 800c02e:	4313      	orrs	r3, r2
 800c030:	81a3      	strh	r3, [r4, #12]
 800c032:	4240      	negs	r0, r0
 800c034:	e7ea      	b.n	800c00c <__ssputs_r+0x94>
 800c036:	46c0      	nop			; (mov r8, r8)
 800c038:	fffffb7f 	.word	0xfffffb7f

0800c03c <_svfiprintf_r>:
 800c03c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c03e:	b0a1      	sub	sp, #132	; 0x84
 800c040:	9003      	str	r0, [sp, #12]
 800c042:	001d      	movs	r5, r3
 800c044:	898b      	ldrh	r3, [r1, #12]
 800c046:	000f      	movs	r7, r1
 800c048:	0016      	movs	r6, r2
 800c04a:	061b      	lsls	r3, r3, #24
 800c04c:	d511      	bpl.n	800c072 <_svfiprintf_r+0x36>
 800c04e:	690b      	ldr	r3, [r1, #16]
 800c050:	2b00      	cmp	r3, #0
 800c052:	d10e      	bne.n	800c072 <_svfiprintf_r+0x36>
 800c054:	2140      	movs	r1, #64	; 0x40
 800c056:	f7fe fb8d 	bl	800a774 <_malloc_r>
 800c05a:	6038      	str	r0, [r7, #0]
 800c05c:	6138      	str	r0, [r7, #16]
 800c05e:	2800      	cmp	r0, #0
 800c060:	d105      	bne.n	800c06e <_svfiprintf_r+0x32>
 800c062:	230c      	movs	r3, #12
 800c064:	9a03      	ldr	r2, [sp, #12]
 800c066:	3801      	subs	r0, #1
 800c068:	6013      	str	r3, [r2, #0]
 800c06a:	b021      	add	sp, #132	; 0x84
 800c06c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c06e:	2340      	movs	r3, #64	; 0x40
 800c070:	617b      	str	r3, [r7, #20]
 800c072:	2300      	movs	r3, #0
 800c074:	ac08      	add	r4, sp, #32
 800c076:	6163      	str	r3, [r4, #20]
 800c078:	3320      	adds	r3, #32
 800c07a:	7663      	strb	r3, [r4, #25]
 800c07c:	3310      	adds	r3, #16
 800c07e:	76a3      	strb	r3, [r4, #26]
 800c080:	9507      	str	r5, [sp, #28]
 800c082:	0035      	movs	r5, r6
 800c084:	782b      	ldrb	r3, [r5, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d001      	beq.n	800c08e <_svfiprintf_r+0x52>
 800c08a:	2b25      	cmp	r3, #37	; 0x25
 800c08c:	d148      	bne.n	800c120 <_svfiprintf_r+0xe4>
 800c08e:	1bab      	subs	r3, r5, r6
 800c090:	9305      	str	r3, [sp, #20]
 800c092:	42b5      	cmp	r5, r6
 800c094:	d00b      	beq.n	800c0ae <_svfiprintf_r+0x72>
 800c096:	0032      	movs	r2, r6
 800c098:	0039      	movs	r1, r7
 800c09a:	9803      	ldr	r0, [sp, #12]
 800c09c:	f7ff ff6c 	bl	800bf78 <__ssputs_r>
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	d100      	bne.n	800c0a6 <_svfiprintf_r+0x6a>
 800c0a4:	e0af      	b.n	800c206 <_svfiprintf_r+0x1ca>
 800c0a6:	6963      	ldr	r3, [r4, #20]
 800c0a8:	9a05      	ldr	r2, [sp, #20]
 800c0aa:	189b      	adds	r3, r3, r2
 800c0ac:	6163      	str	r3, [r4, #20]
 800c0ae:	782b      	ldrb	r3, [r5, #0]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d100      	bne.n	800c0b6 <_svfiprintf_r+0x7a>
 800c0b4:	e0a7      	b.n	800c206 <_svfiprintf_r+0x1ca>
 800c0b6:	2201      	movs	r2, #1
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	4252      	negs	r2, r2
 800c0bc:	6062      	str	r2, [r4, #4]
 800c0be:	a904      	add	r1, sp, #16
 800c0c0:	3254      	adds	r2, #84	; 0x54
 800c0c2:	1852      	adds	r2, r2, r1
 800c0c4:	1c6e      	adds	r6, r5, #1
 800c0c6:	6023      	str	r3, [r4, #0]
 800c0c8:	60e3      	str	r3, [r4, #12]
 800c0ca:	60a3      	str	r3, [r4, #8]
 800c0cc:	7013      	strb	r3, [r2, #0]
 800c0ce:	65a3      	str	r3, [r4, #88]	; 0x58
 800c0d0:	4b55      	ldr	r3, [pc, #340]	; (800c228 <_svfiprintf_r+0x1ec>)
 800c0d2:	2205      	movs	r2, #5
 800c0d4:	0018      	movs	r0, r3
 800c0d6:	7831      	ldrb	r1, [r6, #0]
 800c0d8:	9305      	str	r3, [sp, #20]
 800c0da:	f7fd fc28 	bl	800992e <memchr>
 800c0de:	1c75      	adds	r5, r6, #1
 800c0e0:	2800      	cmp	r0, #0
 800c0e2:	d11f      	bne.n	800c124 <_svfiprintf_r+0xe8>
 800c0e4:	6822      	ldr	r2, [r4, #0]
 800c0e6:	06d3      	lsls	r3, r2, #27
 800c0e8:	d504      	bpl.n	800c0f4 <_svfiprintf_r+0xb8>
 800c0ea:	2353      	movs	r3, #83	; 0x53
 800c0ec:	a904      	add	r1, sp, #16
 800c0ee:	185b      	adds	r3, r3, r1
 800c0f0:	2120      	movs	r1, #32
 800c0f2:	7019      	strb	r1, [r3, #0]
 800c0f4:	0713      	lsls	r3, r2, #28
 800c0f6:	d504      	bpl.n	800c102 <_svfiprintf_r+0xc6>
 800c0f8:	2353      	movs	r3, #83	; 0x53
 800c0fa:	a904      	add	r1, sp, #16
 800c0fc:	185b      	adds	r3, r3, r1
 800c0fe:	212b      	movs	r1, #43	; 0x2b
 800c100:	7019      	strb	r1, [r3, #0]
 800c102:	7833      	ldrb	r3, [r6, #0]
 800c104:	2b2a      	cmp	r3, #42	; 0x2a
 800c106:	d016      	beq.n	800c136 <_svfiprintf_r+0xfa>
 800c108:	0035      	movs	r5, r6
 800c10a:	2100      	movs	r1, #0
 800c10c:	200a      	movs	r0, #10
 800c10e:	68e3      	ldr	r3, [r4, #12]
 800c110:	782a      	ldrb	r2, [r5, #0]
 800c112:	1c6e      	adds	r6, r5, #1
 800c114:	3a30      	subs	r2, #48	; 0x30
 800c116:	2a09      	cmp	r2, #9
 800c118:	d94e      	bls.n	800c1b8 <_svfiprintf_r+0x17c>
 800c11a:	2900      	cmp	r1, #0
 800c11c:	d111      	bne.n	800c142 <_svfiprintf_r+0x106>
 800c11e:	e017      	b.n	800c150 <_svfiprintf_r+0x114>
 800c120:	3501      	adds	r5, #1
 800c122:	e7af      	b.n	800c084 <_svfiprintf_r+0x48>
 800c124:	9b05      	ldr	r3, [sp, #20]
 800c126:	6822      	ldr	r2, [r4, #0]
 800c128:	1ac0      	subs	r0, r0, r3
 800c12a:	2301      	movs	r3, #1
 800c12c:	4083      	lsls	r3, r0
 800c12e:	4313      	orrs	r3, r2
 800c130:	002e      	movs	r6, r5
 800c132:	6023      	str	r3, [r4, #0]
 800c134:	e7cc      	b.n	800c0d0 <_svfiprintf_r+0x94>
 800c136:	9b07      	ldr	r3, [sp, #28]
 800c138:	1d19      	adds	r1, r3, #4
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	9107      	str	r1, [sp, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	db01      	blt.n	800c146 <_svfiprintf_r+0x10a>
 800c142:	930b      	str	r3, [sp, #44]	; 0x2c
 800c144:	e004      	b.n	800c150 <_svfiprintf_r+0x114>
 800c146:	425b      	negs	r3, r3
 800c148:	60e3      	str	r3, [r4, #12]
 800c14a:	2302      	movs	r3, #2
 800c14c:	4313      	orrs	r3, r2
 800c14e:	6023      	str	r3, [r4, #0]
 800c150:	782b      	ldrb	r3, [r5, #0]
 800c152:	2b2e      	cmp	r3, #46	; 0x2e
 800c154:	d10a      	bne.n	800c16c <_svfiprintf_r+0x130>
 800c156:	786b      	ldrb	r3, [r5, #1]
 800c158:	2b2a      	cmp	r3, #42	; 0x2a
 800c15a:	d135      	bne.n	800c1c8 <_svfiprintf_r+0x18c>
 800c15c:	9b07      	ldr	r3, [sp, #28]
 800c15e:	3502      	adds	r5, #2
 800c160:	1d1a      	adds	r2, r3, #4
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	9207      	str	r2, [sp, #28]
 800c166:	2b00      	cmp	r3, #0
 800c168:	db2b      	blt.n	800c1c2 <_svfiprintf_r+0x186>
 800c16a:	9309      	str	r3, [sp, #36]	; 0x24
 800c16c:	4e2f      	ldr	r6, [pc, #188]	; (800c22c <_svfiprintf_r+0x1f0>)
 800c16e:	2203      	movs	r2, #3
 800c170:	0030      	movs	r0, r6
 800c172:	7829      	ldrb	r1, [r5, #0]
 800c174:	f7fd fbdb 	bl	800992e <memchr>
 800c178:	2800      	cmp	r0, #0
 800c17a:	d006      	beq.n	800c18a <_svfiprintf_r+0x14e>
 800c17c:	2340      	movs	r3, #64	; 0x40
 800c17e:	1b80      	subs	r0, r0, r6
 800c180:	4083      	lsls	r3, r0
 800c182:	6822      	ldr	r2, [r4, #0]
 800c184:	3501      	adds	r5, #1
 800c186:	4313      	orrs	r3, r2
 800c188:	6023      	str	r3, [r4, #0]
 800c18a:	7829      	ldrb	r1, [r5, #0]
 800c18c:	2206      	movs	r2, #6
 800c18e:	4828      	ldr	r0, [pc, #160]	; (800c230 <_svfiprintf_r+0x1f4>)
 800c190:	1c6e      	adds	r6, r5, #1
 800c192:	7621      	strb	r1, [r4, #24]
 800c194:	f7fd fbcb 	bl	800992e <memchr>
 800c198:	2800      	cmp	r0, #0
 800c19a:	d03c      	beq.n	800c216 <_svfiprintf_r+0x1da>
 800c19c:	4b25      	ldr	r3, [pc, #148]	; (800c234 <_svfiprintf_r+0x1f8>)
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d125      	bne.n	800c1ee <_svfiprintf_r+0x1b2>
 800c1a2:	2207      	movs	r2, #7
 800c1a4:	9b07      	ldr	r3, [sp, #28]
 800c1a6:	3307      	adds	r3, #7
 800c1a8:	4393      	bics	r3, r2
 800c1aa:	3308      	adds	r3, #8
 800c1ac:	9307      	str	r3, [sp, #28]
 800c1ae:	6963      	ldr	r3, [r4, #20]
 800c1b0:	9a04      	ldr	r2, [sp, #16]
 800c1b2:	189b      	adds	r3, r3, r2
 800c1b4:	6163      	str	r3, [r4, #20]
 800c1b6:	e764      	b.n	800c082 <_svfiprintf_r+0x46>
 800c1b8:	4343      	muls	r3, r0
 800c1ba:	0035      	movs	r5, r6
 800c1bc:	2101      	movs	r1, #1
 800c1be:	189b      	adds	r3, r3, r2
 800c1c0:	e7a6      	b.n	800c110 <_svfiprintf_r+0xd4>
 800c1c2:	2301      	movs	r3, #1
 800c1c4:	425b      	negs	r3, r3
 800c1c6:	e7d0      	b.n	800c16a <_svfiprintf_r+0x12e>
 800c1c8:	2300      	movs	r3, #0
 800c1ca:	200a      	movs	r0, #10
 800c1cc:	001a      	movs	r2, r3
 800c1ce:	3501      	adds	r5, #1
 800c1d0:	6063      	str	r3, [r4, #4]
 800c1d2:	7829      	ldrb	r1, [r5, #0]
 800c1d4:	1c6e      	adds	r6, r5, #1
 800c1d6:	3930      	subs	r1, #48	; 0x30
 800c1d8:	2909      	cmp	r1, #9
 800c1da:	d903      	bls.n	800c1e4 <_svfiprintf_r+0x1a8>
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d0c5      	beq.n	800c16c <_svfiprintf_r+0x130>
 800c1e0:	9209      	str	r2, [sp, #36]	; 0x24
 800c1e2:	e7c3      	b.n	800c16c <_svfiprintf_r+0x130>
 800c1e4:	4342      	muls	r2, r0
 800c1e6:	0035      	movs	r5, r6
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	1852      	adds	r2, r2, r1
 800c1ec:	e7f1      	b.n	800c1d2 <_svfiprintf_r+0x196>
 800c1ee:	aa07      	add	r2, sp, #28
 800c1f0:	9200      	str	r2, [sp, #0]
 800c1f2:	0021      	movs	r1, r4
 800c1f4:	003a      	movs	r2, r7
 800c1f6:	4b10      	ldr	r3, [pc, #64]	; (800c238 <_svfiprintf_r+0x1fc>)
 800c1f8:	9803      	ldr	r0, [sp, #12]
 800c1fa:	f7fc faed 	bl	80087d8 <_printf_float>
 800c1fe:	9004      	str	r0, [sp, #16]
 800c200:	9b04      	ldr	r3, [sp, #16]
 800c202:	3301      	adds	r3, #1
 800c204:	d1d3      	bne.n	800c1ae <_svfiprintf_r+0x172>
 800c206:	89bb      	ldrh	r3, [r7, #12]
 800c208:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c20a:	065b      	lsls	r3, r3, #25
 800c20c:	d400      	bmi.n	800c210 <_svfiprintf_r+0x1d4>
 800c20e:	e72c      	b.n	800c06a <_svfiprintf_r+0x2e>
 800c210:	2001      	movs	r0, #1
 800c212:	4240      	negs	r0, r0
 800c214:	e729      	b.n	800c06a <_svfiprintf_r+0x2e>
 800c216:	aa07      	add	r2, sp, #28
 800c218:	9200      	str	r2, [sp, #0]
 800c21a:	0021      	movs	r1, r4
 800c21c:	003a      	movs	r2, r7
 800c21e:	4b06      	ldr	r3, [pc, #24]	; (800c238 <_svfiprintf_r+0x1fc>)
 800c220:	9803      	ldr	r0, [sp, #12]
 800c222:	f7fc fd9f 	bl	8008d64 <_printf_i>
 800c226:	e7ea      	b.n	800c1fe <_svfiprintf_r+0x1c2>
 800c228:	0800d6c9 	.word	0x0800d6c9
 800c22c:	0800d6cf 	.word	0x0800d6cf
 800c230:	0800d6d3 	.word	0x0800d6d3
 800c234:	080087d9 	.word	0x080087d9
 800c238:	0800bf79 	.word	0x0800bf79

0800c23c <__sfputc_r>:
 800c23c:	6893      	ldr	r3, [r2, #8]
 800c23e:	b510      	push	{r4, lr}
 800c240:	3b01      	subs	r3, #1
 800c242:	6093      	str	r3, [r2, #8]
 800c244:	2b00      	cmp	r3, #0
 800c246:	da04      	bge.n	800c252 <__sfputc_r+0x16>
 800c248:	6994      	ldr	r4, [r2, #24]
 800c24a:	42a3      	cmp	r3, r4
 800c24c:	db07      	blt.n	800c25e <__sfputc_r+0x22>
 800c24e:	290a      	cmp	r1, #10
 800c250:	d005      	beq.n	800c25e <__sfputc_r+0x22>
 800c252:	6813      	ldr	r3, [r2, #0]
 800c254:	1c58      	adds	r0, r3, #1
 800c256:	6010      	str	r0, [r2, #0]
 800c258:	7019      	strb	r1, [r3, #0]
 800c25a:	0008      	movs	r0, r1
 800c25c:	bd10      	pop	{r4, pc}
 800c25e:	f7fd fa39 	bl	80096d4 <__swbuf_r>
 800c262:	0001      	movs	r1, r0
 800c264:	e7f9      	b.n	800c25a <__sfputc_r+0x1e>

0800c266 <__sfputs_r>:
 800c266:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c268:	0006      	movs	r6, r0
 800c26a:	000f      	movs	r7, r1
 800c26c:	0014      	movs	r4, r2
 800c26e:	18d5      	adds	r5, r2, r3
 800c270:	42ac      	cmp	r4, r5
 800c272:	d101      	bne.n	800c278 <__sfputs_r+0x12>
 800c274:	2000      	movs	r0, #0
 800c276:	e007      	b.n	800c288 <__sfputs_r+0x22>
 800c278:	7821      	ldrb	r1, [r4, #0]
 800c27a:	003a      	movs	r2, r7
 800c27c:	0030      	movs	r0, r6
 800c27e:	f7ff ffdd 	bl	800c23c <__sfputc_r>
 800c282:	3401      	adds	r4, #1
 800c284:	1c43      	adds	r3, r0, #1
 800c286:	d1f3      	bne.n	800c270 <__sfputs_r+0xa>
 800c288:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c28c <_vfiprintf_r>:
 800c28c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c28e:	b0a1      	sub	sp, #132	; 0x84
 800c290:	000f      	movs	r7, r1
 800c292:	0015      	movs	r5, r2
 800c294:	001e      	movs	r6, r3
 800c296:	9003      	str	r0, [sp, #12]
 800c298:	2800      	cmp	r0, #0
 800c29a:	d004      	beq.n	800c2a6 <_vfiprintf_r+0x1a>
 800c29c:	6a03      	ldr	r3, [r0, #32]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d101      	bne.n	800c2a6 <_vfiprintf_r+0x1a>
 800c2a2:	f7fd f907 	bl	80094b4 <__sinit>
 800c2a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2a8:	07db      	lsls	r3, r3, #31
 800c2aa:	d405      	bmi.n	800c2b8 <_vfiprintf_r+0x2c>
 800c2ac:	89bb      	ldrh	r3, [r7, #12]
 800c2ae:	059b      	lsls	r3, r3, #22
 800c2b0:	d402      	bmi.n	800c2b8 <_vfiprintf_r+0x2c>
 800c2b2:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c2b4:	f7fd fb39 	bl	800992a <__retarget_lock_acquire_recursive>
 800c2b8:	89bb      	ldrh	r3, [r7, #12]
 800c2ba:	071b      	lsls	r3, r3, #28
 800c2bc:	d502      	bpl.n	800c2c4 <_vfiprintf_r+0x38>
 800c2be:	693b      	ldr	r3, [r7, #16]
 800c2c0:	2b00      	cmp	r3, #0
 800c2c2:	d113      	bne.n	800c2ec <_vfiprintf_r+0x60>
 800c2c4:	0039      	movs	r1, r7
 800c2c6:	9803      	ldr	r0, [sp, #12]
 800c2c8:	f7fd fa46 	bl	8009758 <__swsetup_r>
 800c2cc:	2800      	cmp	r0, #0
 800c2ce:	d00d      	beq.n	800c2ec <_vfiprintf_r+0x60>
 800c2d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c2d2:	07db      	lsls	r3, r3, #31
 800c2d4:	d503      	bpl.n	800c2de <_vfiprintf_r+0x52>
 800c2d6:	2001      	movs	r0, #1
 800c2d8:	4240      	negs	r0, r0
 800c2da:	b021      	add	sp, #132	; 0x84
 800c2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2de:	89bb      	ldrh	r3, [r7, #12]
 800c2e0:	059b      	lsls	r3, r3, #22
 800c2e2:	d4f8      	bmi.n	800c2d6 <_vfiprintf_r+0x4a>
 800c2e4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c2e6:	f7fd fb21 	bl	800992c <__retarget_lock_release_recursive>
 800c2ea:	e7f4      	b.n	800c2d6 <_vfiprintf_r+0x4a>
 800c2ec:	2300      	movs	r3, #0
 800c2ee:	ac08      	add	r4, sp, #32
 800c2f0:	6163      	str	r3, [r4, #20]
 800c2f2:	3320      	adds	r3, #32
 800c2f4:	7663      	strb	r3, [r4, #25]
 800c2f6:	3310      	adds	r3, #16
 800c2f8:	76a3      	strb	r3, [r4, #26]
 800c2fa:	9607      	str	r6, [sp, #28]
 800c2fc:	002e      	movs	r6, r5
 800c2fe:	7833      	ldrb	r3, [r6, #0]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d001      	beq.n	800c308 <_vfiprintf_r+0x7c>
 800c304:	2b25      	cmp	r3, #37	; 0x25
 800c306:	d148      	bne.n	800c39a <_vfiprintf_r+0x10e>
 800c308:	1b73      	subs	r3, r6, r5
 800c30a:	9305      	str	r3, [sp, #20]
 800c30c:	42ae      	cmp	r6, r5
 800c30e:	d00b      	beq.n	800c328 <_vfiprintf_r+0x9c>
 800c310:	002a      	movs	r2, r5
 800c312:	0039      	movs	r1, r7
 800c314:	9803      	ldr	r0, [sp, #12]
 800c316:	f7ff ffa6 	bl	800c266 <__sfputs_r>
 800c31a:	3001      	adds	r0, #1
 800c31c:	d100      	bne.n	800c320 <_vfiprintf_r+0x94>
 800c31e:	e0af      	b.n	800c480 <_vfiprintf_r+0x1f4>
 800c320:	6963      	ldr	r3, [r4, #20]
 800c322:	9a05      	ldr	r2, [sp, #20]
 800c324:	189b      	adds	r3, r3, r2
 800c326:	6163      	str	r3, [r4, #20]
 800c328:	7833      	ldrb	r3, [r6, #0]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d100      	bne.n	800c330 <_vfiprintf_r+0xa4>
 800c32e:	e0a7      	b.n	800c480 <_vfiprintf_r+0x1f4>
 800c330:	2201      	movs	r2, #1
 800c332:	2300      	movs	r3, #0
 800c334:	4252      	negs	r2, r2
 800c336:	6062      	str	r2, [r4, #4]
 800c338:	a904      	add	r1, sp, #16
 800c33a:	3254      	adds	r2, #84	; 0x54
 800c33c:	1852      	adds	r2, r2, r1
 800c33e:	1c75      	adds	r5, r6, #1
 800c340:	6023      	str	r3, [r4, #0]
 800c342:	60e3      	str	r3, [r4, #12]
 800c344:	60a3      	str	r3, [r4, #8]
 800c346:	7013      	strb	r3, [r2, #0]
 800c348:	65a3      	str	r3, [r4, #88]	; 0x58
 800c34a:	4b59      	ldr	r3, [pc, #356]	; (800c4b0 <_vfiprintf_r+0x224>)
 800c34c:	2205      	movs	r2, #5
 800c34e:	0018      	movs	r0, r3
 800c350:	7829      	ldrb	r1, [r5, #0]
 800c352:	9305      	str	r3, [sp, #20]
 800c354:	f7fd faeb 	bl	800992e <memchr>
 800c358:	1c6e      	adds	r6, r5, #1
 800c35a:	2800      	cmp	r0, #0
 800c35c:	d11f      	bne.n	800c39e <_vfiprintf_r+0x112>
 800c35e:	6822      	ldr	r2, [r4, #0]
 800c360:	06d3      	lsls	r3, r2, #27
 800c362:	d504      	bpl.n	800c36e <_vfiprintf_r+0xe2>
 800c364:	2353      	movs	r3, #83	; 0x53
 800c366:	a904      	add	r1, sp, #16
 800c368:	185b      	adds	r3, r3, r1
 800c36a:	2120      	movs	r1, #32
 800c36c:	7019      	strb	r1, [r3, #0]
 800c36e:	0713      	lsls	r3, r2, #28
 800c370:	d504      	bpl.n	800c37c <_vfiprintf_r+0xf0>
 800c372:	2353      	movs	r3, #83	; 0x53
 800c374:	a904      	add	r1, sp, #16
 800c376:	185b      	adds	r3, r3, r1
 800c378:	212b      	movs	r1, #43	; 0x2b
 800c37a:	7019      	strb	r1, [r3, #0]
 800c37c:	782b      	ldrb	r3, [r5, #0]
 800c37e:	2b2a      	cmp	r3, #42	; 0x2a
 800c380:	d016      	beq.n	800c3b0 <_vfiprintf_r+0x124>
 800c382:	002e      	movs	r6, r5
 800c384:	2100      	movs	r1, #0
 800c386:	200a      	movs	r0, #10
 800c388:	68e3      	ldr	r3, [r4, #12]
 800c38a:	7832      	ldrb	r2, [r6, #0]
 800c38c:	1c75      	adds	r5, r6, #1
 800c38e:	3a30      	subs	r2, #48	; 0x30
 800c390:	2a09      	cmp	r2, #9
 800c392:	d94e      	bls.n	800c432 <_vfiprintf_r+0x1a6>
 800c394:	2900      	cmp	r1, #0
 800c396:	d111      	bne.n	800c3bc <_vfiprintf_r+0x130>
 800c398:	e017      	b.n	800c3ca <_vfiprintf_r+0x13e>
 800c39a:	3601      	adds	r6, #1
 800c39c:	e7af      	b.n	800c2fe <_vfiprintf_r+0x72>
 800c39e:	9b05      	ldr	r3, [sp, #20]
 800c3a0:	6822      	ldr	r2, [r4, #0]
 800c3a2:	1ac0      	subs	r0, r0, r3
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	4083      	lsls	r3, r0
 800c3a8:	4313      	orrs	r3, r2
 800c3aa:	0035      	movs	r5, r6
 800c3ac:	6023      	str	r3, [r4, #0]
 800c3ae:	e7cc      	b.n	800c34a <_vfiprintf_r+0xbe>
 800c3b0:	9b07      	ldr	r3, [sp, #28]
 800c3b2:	1d19      	adds	r1, r3, #4
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	9107      	str	r1, [sp, #28]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	db01      	blt.n	800c3c0 <_vfiprintf_r+0x134>
 800c3bc:	930b      	str	r3, [sp, #44]	; 0x2c
 800c3be:	e004      	b.n	800c3ca <_vfiprintf_r+0x13e>
 800c3c0:	425b      	negs	r3, r3
 800c3c2:	60e3      	str	r3, [r4, #12]
 800c3c4:	2302      	movs	r3, #2
 800c3c6:	4313      	orrs	r3, r2
 800c3c8:	6023      	str	r3, [r4, #0]
 800c3ca:	7833      	ldrb	r3, [r6, #0]
 800c3cc:	2b2e      	cmp	r3, #46	; 0x2e
 800c3ce:	d10a      	bne.n	800c3e6 <_vfiprintf_r+0x15a>
 800c3d0:	7873      	ldrb	r3, [r6, #1]
 800c3d2:	2b2a      	cmp	r3, #42	; 0x2a
 800c3d4:	d135      	bne.n	800c442 <_vfiprintf_r+0x1b6>
 800c3d6:	9b07      	ldr	r3, [sp, #28]
 800c3d8:	3602      	adds	r6, #2
 800c3da:	1d1a      	adds	r2, r3, #4
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	9207      	str	r2, [sp, #28]
 800c3e0:	2b00      	cmp	r3, #0
 800c3e2:	db2b      	blt.n	800c43c <_vfiprintf_r+0x1b0>
 800c3e4:	9309      	str	r3, [sp, #36]	; 0x24
 800c3e6:	4d33      	ldr	r5, [pc, #204]	; (800c4b4 <_vfiprintf_r+0x228>)
 800c3e8:	2203      	movs	r2, #3
 800c3ea:	0028      	movs	r0, r5
 800c3ec:	7831      	ldrb	r1, [r6, #0]
 800c3ee:	f7fd fa9e 	bl	800992e <memchr>
 800c3f2:	2800      	cmp	r0, #0
 800c3f4:	d006      	beq.n	800c404 <_vfiprintf_r+0x178>
 800c3f6:	2340      	movs	r3, #64	; 0x40
 800c3f8:	1b40      	subs	r0, r0, r5
 800c3fa:	4083      	lsls	r3, r0
 800c3fc:	6822      	ldr	r2, [r4, #0]
 800c3fe:	3601      	adds	r6, #1
 800c400:	4313      	orrs	r3, r2
 800c402:	6023      	str	r3, [r4, #0]
 800c404:	7831      	ldrb	r1, [r6, #0]
 800c406:	2206      	movs	r2, #6
 800c408:	482b      	ldr	r0, [pc, #172]	; (800c4b8 <_vfiprintf_r+0x22c>)
 800c40a:	1c75      	adds	r5, r6, #1
 800c40c:	7621      	strb	r1, [r4, #24]
 800c40e:	f7fd fa8e 	bl	800992e <memchr>
 800c412:	2800      	cmp	r0, #0
 800c414:	d043      	beq.n	800c49e <_vfiprintf_r+0x212>
 800c416:	4b29      	ldr	r3, [pc, #164]	; (800c4bc <_vfiprintf_r+0x230>)
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d125      	bne.n	800c468 <_vfiprintf_r+0x1dc>
 800c41c:	2207      	movs	r2, #7
 800c41e:	9b07      	ldr	r3, [sp, #28]
 800c420:	3307      	adds	r3, #7
 800c422:	4393      	bics	r3, r2
 800c424:	3308      	adds	r3, #8
 800c426:	9307      	str	r3, [sp, #28]
 800c428:	6963      	ldr	r3, [r4, #20]
 800c42a:	9a04      	ldr	r2, [sp, #16]
 800c42c:	189b      	adds	r3, r3, r2
 800c42e:	6163      	str	r3, [r4, #20]
 800c430:	e764      	b.n	800c2fc <_vfiprintf_r+0x70>
 800c432:	4343      	muls	r3, r0
 800c434:	002e      	movs	r6, r5
 800c436:	2101      	movs	r1, #1
 800c438:	189b      	adds	r3, r3, r2
 800c43a:	e7a6      	b.n	800c38a <_vfiprintf_r+0xfe>
 800c43c:	2301      	movs	r3, #1
 800c43e:	425b      	negs	r3, r3
 800c440:	e7d0      	b.n	800c3e4 <_vfiprintf_r+0x158>
 800c442:	2300      	movs	r3, #0
 800c444:	200a      	movs	r0, #10
 800c446:	001a      	movs	r2, r3
 800c448:	3601      	adds	r6, #1
 800c44a:	6063      	str	r3, [r4, #4]
 800c44c:	7831      	ldrb	r1, [r6, #0]
 800c44e:	1c75      	adds	r5, r6, #1
 800c450:	3930      	subs	r1, #48	; 0x30
 800c452:	2909      	cmp	r1, #9
 800c454:	d903      	bls.n	800c45e <_vfiprintf_r+0x1d2>
 800c456:	2b00      	cmp	r3, #0
 800c458:	d0c5      	beq.n	800c3e6 <_vfiprintf_r+0x15a>
 800c45a:	9209      	str	r2, [sp, #36]	; 0x24
 800c45c:	e7c3      	b.n	800c3e6 <_vfiprintf_r+0x15a>
 800c45e:	4342      	muls	r2, r0
 800c460:	002e      	movs	r6, r5
 800c462:	2301      	movs	r3, #1
 800c464:	1852      	adds	r2, r2, r1
 800c466:	e7f1      	b.n	800c44c <_vfiprintf_r+0x1c0>
 800c468:	aa07      	add	r2, sp, #28
 800c46a:	9200      	str	r2, [sp, #0]
 800c46c:	0021      	movs	r1, r4
 800c46e:	003a      	movs	r2, r7
 800c470:	4b13      	ldr	r3, [pc, #76]	; (800c4c0 <_vfiprintf_r+0x234>)
 800c472:	9803      	ldr	r0, [sp, #12]
 800c474:	f7fc f9b0 	bl	80087d8 <_printf_float>
 800c478:	9004      	str	r0, [sp, #16]
 800c47a:	9b04      	ldr	r3, [sp, #16]
 800c47c:	3301      	adds	r3, #1
 800c47e:	d1d3      	bne.n	800c428 <_vfiprintf_r+0x19c>
 800c480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c482:	07db      	lsls	r3, r3, #31
 800c484:	d405      	bmi.n	800c492 <_vfiprintf_r+0x206>
 800c486:	89bb      	ldrh	r3, [r7, #12]
 800c488:	059b      	lsls	r3, r3, #22
 800c48a:	d402      	bmi.n	800c492 <_vfiprintf_r+0x206>
 800c48c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800c48e:	f7fd fa4d 	bl	800992c <__retarget_lock_release_recursive>
 800c492:	89bb      	ldrh	r3, [r7, #12]
 800c494:	065b      	lsls	r3, r3, #25
 800c496:	d500      	bpl.n	800c49a <_vfiprintf_r+0x20e>
 800c498:	e71d      	b.n	800c2d6 <_vfiprintf_r+0x4a>
 800c49a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c49c:	e71d      	b.n	800c2da <_vfiprintf_r+0x4e>
 800c49e:	aa07      	add	r2, sp, #28
 800c4a0:	9200      	str	r2, [sp, #0]
 800c4a2:	0021      	movs	r1, r4
 800c4a4:	003a      	movs	r2, r7
 800c4a6:	4b06      	ldr	r3, [pc, #24]	; (800c4c0 <_vfiprintf_r+0x234>)
 800c4a8:	9803      	ldr	r0, [sp, #12]
 800c4aa:	f7fc fc5b 	bl	8008d64 <_printf_i>
 800c4ae:	e7e3      	b.n	800c478 <_vfiprintf_r+0x1ec>
 800c4b0:	0800d6c9 	.word	0x0800d6c9
 800c4b4:	0800d6cf 	.word	0x0800d6cf
 800c4b8:	0800d6d3 	.word	0x0800d6d3
 800c4bc:	080087d9 	.word	0x080087d9
 800c4c0:	0800c267 	.word	0x0800c267

0800c4c4 <__sflush_r>:
 800c4c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4c6:	898b      	ldrh	r3, [r1, #12]
 800c4c8:	0005      	movs	r5, r0
 800c4ca:	000c      	movs	r4, r1
 800c4cc:	071a      	lsls	r2, r3, #28
 800c4ce:	d45c      	bmi.n	800c58a <__sflush_r+0xc6>
 800c4d0:	684a      	ldr	r2, [r1, #4]
 800c4d2:	2a00      	cmp	r2, #0
 800c4d4:	dc04      	bgt.n	800c4e0 <__sflush_r+0x1c>
 800c4d6:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c4d8:	2a00      	cmp	r2, #0
 800c4da:	dc01      	bgt.n	800c4e0 <__sflush_r+0x1c>
 800c4dc:	2000      	movs	r0, #0
 800c4de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c4e0:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c4e2:	2f00      	cmp	r7, #0
 800c4e4:	d0fa      	beq.n	800c4dc <__sflush_r+0x18>
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	2080      	movs	r0, #128	; 0x80
 800c4ea:	682e      	ldr	r6, [r5, #0]
 800c4ec:	602a      	str	r2, [r5, #0]
 800c4ee:	001a      	movs	r2, r3
 800c4f0:	0140      	lsls	r0, r0, #5
 800c4f2:	6a21      	ldr	r1, [r4, #32]
 800c4f4:	4002      	ands	r2, r0
 800c4f6:	4203      	tst	r3, r0
 800c4f8:	d034      	beq.n	800c564 <__sflush_r+0xa0>
 800c4fa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c4fc:	89a3      	ldrh	r3, [r4, #12]
 800c4fe:	075b      	lsls	r3, r3, #29
 800c500:	d506      	bpl.n	800c510 <__sflush_r+0x4c>
 800c502:	6863      	ldr	r3, [r4, #4]
 800c504:	1ac0      	subs	r0, r0, r3
 800c506:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d001      	beq.n	800c510 <__sflush_r+0x4c>
 800c50c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c50e:	1ac0      	subs	r0, r0, r3
 800c510:	0002      	movs	r2, r0
 800c512:	2300      	movs	r3, #0
 800c514:	0028      	movs	r0, r5
 800c516:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c518:	6a21      	ldr	r1, [r4, #32]
 800c51a:	47b8      	blx	r7
 800c51c:	89a2      	ldrh	r2, [r4, #12]
 800c51e:	1c43      	adds	r3, r0, #1
 800c520:	d106      	bne.n	800c530 <__sflush_r+0x6c>
 800c522:	6829      	ldr	r1, [r5, #0]
 800c524:	291d      	cmp	r1, #29
 800c526:	d82c      	bhi.n	800c582 <__sflush_r+0xbe>
 800c528:	4b2a      	ldr	r3, [pc, #168]	; (800c5d4 <__sflush_r+0x110>)
 800c52a:	410b      	asrs	r3, r1
 800c52c:	07db      	lsls	r3, r3, #31
 800c52e:	d428      	bmi.n	800c582 <__sflush_r+0xbe>
 800c530:	2300      	movs	r3, #0
 800c532:	6063      	str	r3, [r4, #4]
 800c534:	6923      	ldr	r3, [r4, #16]
 800c536:	6023      	str	r3, [r4, #0]
 800c538:	04d2      	lsls	r2, r2, #19
 800c53a:	d505      	bpl.n	800c548 <__sflush_r+0x84>
 800c53c:	1c43      	adds	r3, r0, #1
 800c53e:	d102      	bne.n	800c546 <__sflush_r+0x82>
 800c540:	682b      	ldr	r3, [r5, #0]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d100      	bne.n	800c548 <__sflush_r+0x84>
 800c546:	6560      	str	r0, [r4, #84]	; 0x54
 800c548:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c54a:	602e      	str	r6, [r5, #0]
 800c54c:	2900      	cmp	r1, #0
 800c54e:	d0c5      	beq.n	800c4dc <__sflush_r+0x18>
 800c550:	0023      	movs	r3, r4
 800c552:	3344      	adds	r3, #68	; 0x44
 800c554:	4299      	cmp	r1, r3
 800c556:	d002      	beq.n	800c55e <__sflush_r+0x9a>
 800c558:	0028      	movs	r0, r5
 800c55a:	f7fe f895 	bl	800a688 <_free_r>
 800c55e:	2000      	movs	r0, #0
 800c560:	6360      	str	r0, [r4, #52]	; 0x34
 800c562:	e7bc      	b.n	800c4de <__sflush_r+0x1a>
 800c564:	2301      	movs	r3, #1
 800c566:	0028      	movs	r0, r5
 800c568:	47b8      	blx	r7
 800c56a:	1c43      	adds	r3, r0, #1
 800c56c:	d1c6      	bne.n	800c4fc <__sflush_r+0x38>
 800c56e:	682b      	ldr	r3, [r5, #0]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d0c3      	beq.n	800c4fc <__sflush_r+0x38>
 800c574:	2b1d      	cmp	r3, #29
 800c576:	d001      	beq.n	800c57c <__sflush_r+0xb8>
 800c578:	2b16      	cmp	r3, #22
 800c57a:	d101      	bne.n	800c580 <__sflush_r+0xbc>
 800c57c:	602e      	str	r6, [r5, #0]
 800c57e:	e7ad      	b.n	800c4dc <__sflush_r+0x18>
 800c580:	89a2      	ldrh	r2, [r4, #12]
 800c582:	2340      	movs	r3, #64	; 0x40
 800c584:	4313      	orrs	r3, r2
 800c586:	81a3      	strh	r3, [r4, #12]
 800c588:	e7a9      	b.n	800c4de <__sflush_r+0x1a>
 800c58a:	690e      	ldr	r6, [r1, #16]
 800c58c:	2e00      	cmp	r6, #0
 800c58e:	d0a5      	beq.n	800c4dc <__sflush_r+0x18>
 800c590:	680f      	ldr	r7, [r1, #0]
 800c592:	600e      	str	r6, [r1, #0]
 800c594:	1bba      	subs	r2, r7, r6
 800c596:	9201      	str	r2, [sp, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	079b      	lsls	r3, r3, #30
 800c59c:	d100      	bne.n	800c5a0 <__sflush_r+0xdc>
 800c59e:	694a      	ldr	r2, [r1, #20]
 800c5a0:	60a2      	str	r2, [r4, #8]
 800c5a2:	9b01      	ldr	r3, [sp, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	dd99      	ble.n	800c4dc <__sflush_r+0x18>
 800c5a8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c5aa:	0032      	movs	r2, r6
 800c5ac:	001f      	movs	r7, r3
 800c5ae:	0028      	movs	r0, r5
 800c5b0:	9b01      	ldr	r3, [sp, #4]
 800c5b2:	6a21      	ldr	r1, [r4, #32]
 800c5b4:	47b8      	blx	r7
 800c5b6:	2800      	cmp	r0, #0
 800c5b8:	dc06      	bgt.n	800c5c8 <__sflush_r+0x104>
 800c5ba:	2340      	movs	r3, #64	; 0x40
 800c5bc:	2001      	movs	r0, #1
 800c5be:	89a2      	ldrh	r2, [r4, #12]
 800c5c0:	4240      	negs	r0, r0
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	81a3      	strh	r3, [r4, #12]
 800c5c6:	e78a      	b.n	800c4de <__sflush_r+0x1a>
 800c5c8:	9b01      	ldr	r3, [sp, #4]
 800c5ca:	1836      	adds	r6, r6, r0
 800c5cc:	1a1b      	subs	r3, r3, r0
 800c5ce:	9301      	str	r3, [sp, #4]
 800c5d0:	e7e7      	b.n	800c5a2 <__sflush_r+0xde>
 800c5d2:	46c0      	nop			; (mov r8, r8)
 800c5d4:	dfbffffe 	.word	0xdfbffffe

0800c5d8 <_fflush_r>:
 800c5d8:	690b      	ldr	r3, [r1, #16]
 800c5da:	b570      	push	{r4, r5, r6, lr}
 800c5dc:	0005      	movs	r5, r0
 800c5de:	000c      	movs	r4, r1
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d102      	bne.n	800c5ea <_fflush_r+0x12>
 800c5e4:	2500      	movs	r5, #0
 800c5e6:	0028      	movs	r0, r5
 800c5e8:	bd70      	pop	{r4, r5, r6, pc}
 800c5ea:	2800      	cmp	r0, #0
 800c5ec:	d004      	beq.n	800c5f8 <_fflush_r+0x20>
 800c5ee:	6a03      	ldr	r3, [r0, #32]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d101      	bne.n	800c5f8 <_fflush_r+0x20>
 800c5f4:	f7fc ff5e 	bl	80094b4 <__sinit>
 800c5f8:	220c      	movs	r2, #12
 800c5fa:	5ea3      	ldrsh	r3, [r4, r2]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d0f1      	beq.n	800c5e4 <_fflush_r+0xc>
 800c600:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c602:	07d2      	lsls	r2, r2, #31
 800c604:	d404      	bmi.n	800c610 <_fflush_r+0x38>
 800c606:	059b      	lsls	r3, r3, #22
 800c608:	d402      	bmi.n	800c610 <_fflush_r+0x38>
 800c60a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c60c:	f7fd f98d 	bl	800992a <__retarget_lock_acquire_recursive>
 800c610:	0028      	movs	r0, r5
 800c612:	0021      	movs	r1, r4
 800c614:	f7ff ff56 	bl	800c4c4 <__sflush_r>
 800c618:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c61a:	0005      	movs	r5, r0
 800c61c:	07db      	lsls	r3, r3, #31
 800c61e:	d4e2      	bmi.n	800c5e6 <_fflush_r+0xe>
 800c620:	89a3      	ldrh	r3, [r4, #12]
 800c622:	059b      	lsls	r3, r3, #22
 800c624:	d4df      	bmi.n	800c5e6 <_fflush_r+0xe>
 800c626:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c628:	f7fd f980 	bl	800992c <__retarget_lock_release_recursive>
 800c62c:	e7db      	b.n	800c5e6 <_fflush_r+0xe>
	...

0800c630 <__swhatbuf_r>:
 800c630:	b570      	push	{r4, r5, r6, lr}
 800c632:	000e      	movs	r6, r1
 800c634:	001d      	movs	r5, r3
 800c636:	230e      	movs	r3, #14
 800c638:	5ec9      	ldrsh	r1, [r1, r3]
 800c63a:	0014      	movs	r4, r2
 800c63c:	b096      	sub	sp, #88	; 0x58
 800c63e:	2900      	cmp	r1, #0
 800c640:	da0c      	bge.n	800c65c <__swhatbuf_r+0x2c>
 800c642:	89b2      	ldrh	r2, [r6, #12]
 800c644:	2380      	movs	r3, #128	; 0x80
 800c646:	0011      	movs	r1, r2
 800c648:	4019      	ands	r1, r3
 800c64a:	421a      	tst	r2, r3
 800c64c:	d013      	beq.n	800c676 <__swhatbuf_r+0x46>
 800c64e:	2100      	movs	r1, #0
 800c650:	3b40      	subs	r3, #64	; 0x40
 800c652:	2000      	movs	r0, #0
 800c654:	6029      	str	r1, [r5, #0]
 800c656:	6023      	str	r3, [r4, #0]
 800c658:	b016      	add	sp, #88	; 0x58
 800c65a:	bd70      	pop	{r4, r5, r6, pc}
 800c65c:	466a      	mov	r2, sp
 800c65e:	f000 f871 	bl	800c744 <_fstat_r>
 800c662:	2800      	cmp	r0, #0
 800c664:	dbed      	blt.n	800c642 <__swhatbuf_r+0x12>
 800c666:	23f0      	movs	r3, #240	; 0xf0
 800c668:	9901      	ldr	r1, [sp, #4]
 800c66a:	021b      	lsls	r3, r3, #8
 800c66c:	4019      	ands	r1, r3
 800c66e:	4b03      	ldr	r3, [pc, #12]	; (800c67c <__swhatbuf_r+0x4c>)
 800c670:	18c9      	adds	r1, r1, r3
 800c672:	424b      	negs	r3, r1
 800c674:	4159      	adcs	r1, r3
 800c676:	2380      	movs	r3, #128	; 0x80
 800c678:	00db      	lsls	r3, r3, #3
 800c67a:	e7ea      	b.n	800c652 <__swhatbuf_r+0x22>
 800c67c:	ffffe000 	.word	0xffffe000

0800c680 <__smakebuf_r>:
 800c680:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c682:	2602      	movs	r6, #2
 800c684:	898b      	ldrh	r3, [r1, #12]
 800c686:	0005      	movs	r5, r0
 800c688:	000c      	movs	r4, r1
 800c68a:	4233      	tst	r3, r6
 800c68c:	d006      	beq.n	800c69c <__smakebuf_r+0x1c>
 800c68e:	0023      	movs	r3, r4
 800c690:	3347      	adds	r3, #71	; 0x47
 800c692:	6023      	str	r3, [r4, #0]
 800c694:	6123      	str	r3, [r4, #16]
 800c696:	2301      	movs	r3, #1
 800c698:	6163      	str	r3, [r4, #20]
 800c69a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800c69c:	466a      	mov	r2, sp
 800c69e:	ab01      	add	r3, sp, #4
 800c6a0:	f7ff ffc6 	bl	800c630 <__swhatbuf_r>
 800c6a4:	9900      	ldr	r1, [sp, #0]
 800c6a6:	0007      	movs	r7, r0
 800c6a8:	0028      	movs	r0, r5
 800c6aa:	f7fe f863 	bl	800a774 <_malloc_r>
 800c6ae:	2800      	cmp	r0, #0
 800c6b0:	d108      	bne.n	800c6c4 <__smakebuf_r+0x44>
 800c6b2:	220c      	movs	r2, #12
 800c6b4:	5ea3      	ldrsh	r3, [r4, r2]
 800c6b6:	059a      	lsls	r2, r3, #22
 800c6b8:	d4ef      	bmi.n	800c69a <__smakebuf_r+0x1a>
 800c6ba:	2203      	movs	r2, #3
 800c6bc:	4393      	bics	r3, r2
 800c6be:	431e      	orrs	r6, r3
 800c6c0:	81a6      	strh	r6, [r4, #12]
 800c6c2:	e7e4      	b.n	800c68e <__smakebuf_r+0xe>
 800c6c4:	2380      	movs	r3, #128	; 0x80
 800c6c6:	89a2      	ldrh	r2, [r4, #12]
 800c6c8:	6020      	str	r0, [r4, #0]
 800c6ca:	4313      	orrs	r3, r2
 800c6cc:	81a3      	strh	r3, [r4, #12]
 800c6ce:	9b00      	ldr	r3, [sp, #0]
 800c6d0:	6120      	str	r0, [r4, #16]
 800c6d2:	6163      	str	r3, [r4, #20]
 800c6d4:	9b01      	ldr	r3, [sp, #4]
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d00c      	beq.n	800c6f4 <__smakebuf_r+0x74>
 800c6da:	0028      	movs	r0, r5
 800c6dc:	230e      	movs	r3, #14
 800c6de:	5ee1      	ldrsh	r1, [r4, r3]
 800c6e0:	f000 f842 	bl	800c768 <_isatty_r>
 800c6e4:	2800      	cmp	r0, #0
 800c6e6:	d005      	beq.n	800c6f4 <__smakebuf_r+0x74>
 800c6e8:	2303      	movs	r3, #3
 800c6ea:	89a2      	ldrh	r2, [r4, #12]
 800c6ec:	439a      	bics	r2, r3
 800c6ee:	3b02      	subs	r3, #2
 800c6f0:	4313      	orrs	r3, r2
 800c6f2:	81a3      	strh	r3, [r4, #12]
 800c6f4:	89a3      	ldrh	r3, [r4, #12]
 800c6f6:	433b      	orrs	r3, r7
 800c6f8:	81a3      	strh	r3, [r4, #12]
 800c6fa:	e7ce      	b.n	800c69a <__smakebuf_r+0x1a>

0800c6fc <memmove>:
 800c6fc:	b510      	push	{r4, lr}
 800c6fe:	4288      	cmp	r0, r1
 800c700:	d902      	bls.n	800c708 <memmove+0xc>
 800c702:	188b      	adds	r3, r1, r2
 800c704:	4298      	cmp	r0, r3
 800c706:	d303      	bcc.n	800c710 <memmove+0x14>
 800c708:	2300      	movs	r3, #0
 800c70a:	e007      	b.n	800c71c <memmove+0x20>
 800c70c:	5c8b      	ldrb	r3, [r1, r2]
 800c70e:	5483      	strb	r3, [r0, r2]
 800c710:	3a01      	subs	r2, #1
 800c712:	d2fb      	bcs.n	800c70c <memmove+0x10>
 800c714:	bd10      	pop	{r4, pc}
 800c716:	5ccc      	ldrb	r4, [r1, r3]
 800c718:	54c4      	strb	r4, [r0, r3]
 800c71a:	3301      	adds	r3, #1
 800c71c:	429a      	cmp	r2, r3
 800c71e:	d1fa      	bne.n	800c716 <memmove+0x1a>
 800c720:	e7f8      	b.n	800c714 <memmove+0x18>

0800c722 <strncmp>:
 800c722:	b530      	push	{r4, r5, lr}
 800c724:	0005      	movs	r5, r0
 800c726:	1e10      	subs	r0, r2, #0
 800c728:	d00b      	beq.n	800c742 <strncmp+0x20>
 800c72a:	2400      	movs	r4, #0
 800c72c:	3a01      	subs	r2, #1
 800c72e:	5d2b      	ldrb	r3, [r5, r4]
 800c730:	5d08      	ldrb	r0, [r1, r4]
 800c732:	4283      	cmp	r3, r0
 800c734:	d104      	bne.n	800c740 <strncmp+0x1e>
 800c736:	42a2      	cmp	r2, r4
 800c738:	d002      	beq.n	800c740 <strncmp+0x1e>
 800c73a:	3401      	adds	r4, #1
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d1f6      	bne.n	800c72e <strncmp+0xc>
 800c740:	1a18      	subs	r0, r3, r0
 800c742:	bd30      	pop	{r4, r5, pc}

0800c744 <_fstat_r>:
 800c744:	2300      	movs	r3, #0
 800c746:	b570      	push	{r4, r5, r6, lr}
 800c748:	4d06      	ldr	r5, [pc, #24]	; (800c764 <_fstat_r+0x20>)
 800c74a:	0004      	movs	r4, r0
 800c74c:	0008      	movs	r0, r1
 800c74e:	0011      	movs	r1, r2
 800c750:	602b      	str	r3, [r5, #0]
 800c752:	f7f6 fe90 	bl	8003476 <_fstat>
 800c756:	1c43      	adds	r3, r0, #1
 800c758:	d103      	bne.n	800c762 <_fstat_r+0x1e>
 800c75a:	682b      	ldr	r3, [r5, #0]
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d000      	beq.n	800c762 <_fstat_r+0x1e>
 800c760:	6023      	str	r3, [r4, #0]
 800c762:	bd70      	pop	{r4, r5, r6, pc}
 800c764:	200007d0 	.word	0x200007d0

0800c768 <_isatty_r>:
 800c768:	2300      	movs	r3, #0
 800c76a:	b570      	push	{r4, r5, r6, lr}
 800c76c:	4d06      	ldr	r5, [pc, #24]	; (800c788 <_isatty_r+0x20>)
 800c76e:	0004      	movs	r4, r0
 800c770:	0008      	movs	r0, r1
 800c772:	602b      	str	r3, [r5, #0]
 800c774:	f7f6 fe8d 	bl	8003492 <_isatty>
 800c778:	1c43      	adds	r3, r0, #1
 800c77a:	d103      	bne.n	800c784 <_isatty_r+0x1c>
 800c77c:	682b      	ldr	r3, [r5, #0]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d000      	beq.n	800c784 <_isatty_r+0x1c>
 800c782:	6023      	str	r3, [r4, #0]
 800c784:	bd70      	pop	{r4, r5, r6, pc}
 800c786:	46c0      	nop			; (mov r8, r8)
 800c788:	200007d0 	.word	0x200007d0

0800c78c <_sbrk_r>:
 800c78c:	2300      	movs	r3, #0
 800c78e:	b570      	push	{r4, r5, r6, lr}
 800c790:	4d06      	ldr	r5, [pc, #24]	; (800c7ac <_sbrk_r+0x20>)
 800c792:	0004      	movs	r4, r0
 800c794:	0008      	movs	r0, r1
 800c796:	602b      	str	r3, [r5, #0]
 800c798:	f7f6 fe90 	bl	80034bc <_sbrk>
 800c79c:	1c43      	adds	r3, r0, #1
 800c79e:	d103      	bne.n	800c7a8 <_sbrk_r+0x1c>
 800c7a0:	682b      	ldr	r3, [r5, #0]
 800c7a2:	2b00      	cmp	r3, #0
 800c7a4:	d000      	beq.n	800c7a8 <_sbrk_r+0x1c>
 800c7a6:	6023      	str	r3, [r4, #0]
 800c7a8:	bd70      	pop	{r4, r5, r6, pc}
 800c7aa:	46c0      	nop			; (mov r8, r8)
 800c7ac:	200007d0 	.word	0x200007d0

0800c7b0 <memcpy>:
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	b510      	push	{r4, lr}
 800c7b4:	429a      	cmp	r2, r3
 800c7b6:	d100      	bne.n	800c7ba <memcpy+0xa>
 800c7b8:	bd10      	pop	{r4, pc}
 800c7ba:	5ccc      	ldrb	r4, [r1, r3]
 800c7bc:	54c4      	strb	r4, [r0, r3]
 800c7be:	3301      	adds	r3, #1
 800c7c0:	e7f8      	b.n	800c7b4 <memcpy+0x4>
	...

0800c7c4 <nan>:
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	4901      	ldr	r1, [pc, #4]	; (800c7cc <nan+0x8>)
 800c7c8:	4770      	bx	lr
 800c7ca:	46c0      	nop			; (mov r8, r8)
 800c7cc:	7ff80000 	.word	0x7ff80000

0800c7d0 <__assert_func>:
 800c7d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800c7d2:	0014      	movs	r4, r2
 800c7d4:	001a      	movs	r2, r3
 800c7d6:	4b09      	ldr	r3, [pc, #36]	; (800c7fc <__assert_func+0x2c>)
 800c7d8:	0005      	movs	r5, r0
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	000e      	movs	r6, r1
 800c7de:	68d8      	ldr	r0, [r3, #12]
 800c7e0:	4b07      	ldr	r3, [pc, #28]	; (800c800 <__assert_func+0x30>)
 800c7e2:	2c00      	cmp	r4, #0
 800c7e4:	d101      	bne.n	800c7ea <__assert_func+0x1a>
 800c7e6:	4b07      	ldr	r3, [pc, #28]	; (800c804 <__assert_func+0x34>)
 800c7e8:	001c      	movs	r4, r3
 800c7ea:	4907      	ldr	r1, [pc, #28]	; (800c808 <__assert_func+0x38>)
 800c7ec:	9301      	str	r3, [sp, #4]
 800c7ee:	9402      	str	r4, [sp, #8]
 800c7f0:	002b      	movs	r3, r5
 800c7f2:	9600      	str	r6, [sp, #0]
 800c7f4:	f000 fbe2 	bl	800cfbc <fiprintf>
 800c7f8:	f000 fbf0 	bl	800cfdc <abort>
 800c7fc:	20000068 	.word	0x20000068
 800c800:	0800d6e2 	.word	0x0800d6e2
 800c804:	0800d71d 	.word	0x0800d71d
 800c808:	0800d6ef 	.word	0x0800d6ef

0800c80c <_calloc_r>:
 800c80c:	b570      	push	{r4, r5, r6, lr}
 800c80e:	0c0b      	lsrs	r3, r1, #16
 800c810:	0c15      	lsrs	r5, r2, #16
 800c812:	2b00      	cmp	r3, #0
 800c814:	d11e      	bne.n	800c854 <_calloc_r+0x48>
 800c816:	2d00      	cmp	r5, #0
 800c818:	d10c      	bne.n	800c834 <_calloc_r+0x28>
 800c81a:	b289      	uxth	r1, r1
 800c81c:	b294      	uxth	r4, r2
 800c81e:	434c      	muls	r4, r1
 800c820:	0021      	movs	r1, r4
 800c822:	f7fd ffa7 	bl	800a774 <_malloc_r>
 800c826:	1e05      	subs	r5, r0, #0
 800c828:	d01b      	beq.n	800c862 <_calloc_r+0x56>
 800c82a:	0022      	movs	r2, r4
 800c82c:	2100      	movs	r1, #0
 800c82e:	f7fc fff7 	bl	8009820 <memset>
 800c832:	e016      	b.n	800c862 <_calloc_r+0x56>
 800c834:	1c2b      	adds	r3, r5, #0
 800c836:	1c0c      	adds	r4, r1, #0
 800c838:	b289      	uxth	r1, r1
 800c83a:	b292      	uxth	r2, r2
 800c83c:	434a      	muls	r2, r1
 800c83e:	b2a1      	uxth	r1, r4
 800c840:	b29c      	uxth	r4, r3
 800c842:	434c      	muls	r4, r1
 800c844:	0c13      	lsrs	r3, r2, #16
 800c846:	18e4      	adds	r4, r4, r3
 800c848:	0c23      	lsrs	r3, r4, #16
 800c84a:	d107      	bne.n	800c85c <_calloc_r+0x50>
 800c84c:	0424      	lsls	r4, r4, #16
 800c84e:	b292      	uxth	r2, r2
 800c850:	4314      	orrs	r4, r2
 800c852:	e7e5      	b.n	800c820 <_calloc_r+0x14>
 800c854:	2d00      	cmp	r5, #0
 800c856:	d101      	bne.n	800c85c <_calloc_r+0x50>
 800c858:	1c14      	adds	r4, r2, #0
 800c85a:	e7ed      	b.n	800c838 <_calloc_r+0x2c>
 800c85c:	230c      	movs	r3, #12
 800c85e:	2500      	movs	r5, #0
 800c860:	6003      	str	r3, [r0, #0]
 800c862:	0028      	movs	r0, r5
 800c864:	bd70      	pop	{r4, r5, r6, pc}

0800c866 <rshift>:
 800c866:	0002      	movs	r2, r0
 800c868:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c86a:	6904      	ldr	r4, [r0, #16]
 800c86c:	114b      	asrs	r3, r1, #5
 800c86e:	b085      	sub	sp, #20
 800c870:	3214      	adds	r2, #20
 800c872:	9302      	str	r3, [sp, #8]
 800c874:	114d      	asrs	r5, r1, #5
 800c876:	0013      	movs	r3, r2
 800c878:	42ac      	cmp	r4, r5
 800c87a:	dd32      	ble.n	800c8e2 <rshift+0x7c>
 800c87c:	261f      	movs	r6, #31
 800c87e:	000f      	movs	r7, r1
 800c880:	114b      	asrs	r3, r1, #5
 800c882:	009b      	lsls	r3, r3, #2
 800c884:	00a5      	lsls	r5, r4, #2
 800c886:	18d3      	adds	r3, r2, r3
 800c888:	4037      	ands	r7, r6
 800c88a:	1955      	adds	r5, r2, r5
 800c88c:	9300      	str	r3, [sp, #0]
 800c88e:	9701      	str	r7, [sp, #4]
 800c890:	4231      	tst	r1, r6
 800c892:	d10d      	bne.n	800c8b0 <rshift+0x4a>
 800c894:	0016      	movs	r6, r2
 800c896:	0019      	movs	r1, r3
 800c898:	428d      	cmp	r5, r1
 800c89a:	d836      	bhi.n	800c90a <rshift+0xa4>
 800c89c:	9900      	ldr	r1, [sp, #0]
 800c89e:	2300      	movs	r3, #0
 800c8a0:	3903      	subs	r1, #3
 800c8a2:	428d      	cmp	r5, r1
 800c8a4:	d302      	bcc.n	800c8ac <rshift+0x46>
 800c8a6:	9b02      	ldr	r3, [sp, #8]
 800c8a8:	1ae4      	subs	r4, r4, r3
 800c8aa:	00a3      	lsls	r3, r4, #2
 800c8ac:	18d3      	adds	r3, r2, r3
 800c8ae:	e018      	b.n	800c8e2 <rshift+0x7c>
 800c8b0:	2120      	movs	r1, #32
 800c8b2:	9e01      	ldr	r6, [sp, #4]
 800c8b4:	9f01      	ldr	r7, [sp, #4]
 800c8b6:	1b89      	subs	r1, r1, r6
 800c8b8:	9e00      	ldr	r6, [sp, #0]
 800c8ba:	9103      	str	r1, [sp, #12]
 800c8bc:	ce02      	ldmia	r6!, {r1}
 800c8be:	4694      	mov	ip, r2
 800c8c0:	40f9      	lsrs	r1, r7
 800c8c2:	42b5      	cmp	r5, r6
 800c8c4:	d816      	bhi.n	800c8f4 <rshift+0x8e>
 800c8c6:	9e00      	ldr	r6, [sp, #0]
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	3601      	adds	r6, #1
 800c8cc:	42b5      	cmp	r5, r6
 800c8ce:	d303      	bcc.n	800c8d8 <rshift+0x72>
 800c8d0:	9b02      	ldr	r3, [sp, #8]
 800c8d2:	1ae3      	subs	r3, r4, r3
 800c8d4:	009b      	lsls	r3, r3, #2
 800c8d6:	3b04      	subs	r3, #4
 800c8d8:	18d3      	adds	r3, r2, r3
 800c8da:	6019      	str	r1, [r3, #0]
 800c8dc:	2900      	cmp	r1, #0
 800c8de:	d000      	beq.n	800c8e2 <rshift+0x7c>
 800c8e0:	3304      	adds	r3, #4
 800c8e2:	1a99      	subs	r1, r3, r2
 800c8e4:	1089      	asrs	r1, r1, #2
 800c8e6:	6101      	str	r1, [r0, #16]
 800c8e8:	4293      	cmp	r3, r2
 800c8ea:	d101      	bne.n	800c8f0 <rshift+0x8a>
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	6143      	str	r3, [r0, #20]
 800c8f0:	b005      	add	sp, #20
 800c8f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8f4:	6837      	ldr	r7, [r6, #0]
 800c8f6:	9b03      	ldr	r3, [sp, #12]
 800c8f8:	409f      	lsls	r7, r3
 800c8fa:	430f      	orrs	r7, r1
 800c8fc:	4661      	mov	r1, ip
 800c8fe:	c180      	stmia	r1!, {r7}
 800c900:	468c      	mov	ip, r1
 800c902:	9b01      	ldr	r3, [sp, #4]
 800c904:	ce02      	ldmia	r6!, {r1}
 800c906:	40d9      	lsrs	r1, r3
 800c908:	e7db      	b.n	800c8c2 <rshift+0x5c>
 800c90a:	c980      	ldmia	r1!, {r7}
 800c90c:	c680      	stmia	r6!, {r7}
 800c90e:	e7c3      	b.n	800c898 <rshift+0x32>

0800c910 <__hexdig_fun>:
 800c910:	0002      	movs	r2, r0
 800c912:	3a30      	subs	r2, #48	; 0x30
 800c914:	0003      	movs	r3, r0
 800c916:	2a09      	cmp	r2, #9
 800c918:	d802      	bhi.n	800c920 <__hexdig_fun+0x10>
 800c91a:	3b20      	subs	r3, #32
 800c91c:	b2d8      	uxtb	r0, r3
 800c91e:	4770      	bx	lr
 800c920:	0002      	movs	r2, r0
 800c922:	3a61      	subs	r2, #97	; 0x61
 800c924:	2a05      	cmp	r2, #5
 800c926:	d801      	bhi.n	800c92c <__hexdig_fun+0x1c>
 800c928:	3b47      	subs	r3, #71	; 0x47
 800c92a:	e7f7      	b.n	800c91c <__hexdig_fun+0xc>
 800c92c:	001a      	movs	r2, r3
 800c92e:	3a41      	subs	r2, #65	; 0x41
 800c930:	2000      	movs	r0, #0
 800c932:	2a05      	cmp	r2, #5
 800c934:	d8f3      	bhi.n	800c91e <__hexdig_fun+0xe>
 800c936:	3b27      	subs	r3, #39	; 0x27
 800c938:	e7f0      	b.n	800c91c <__hexdig_fun+0xc>
	...

0800c93c <__gethex>:
 800c93c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c93e:	b089      	sub	sp, #36	; 0x24
 800c940:	9307      	str	r3, [sp, #28]
 800c942:	2302      	movs	r3, #2
 800c944:	9201      	str	r2, [sp, #4]
 800c946:	680a      	ldr	r2, [r1, #0]
 800c948:	425b      	negs	r3, r3
 800c94a:	9003      	str	r0, [sp, #12]
 800c94c:	9106      	str	r1, [sp, #24]
 800c94e:	1c96      	adds	r6, r2, #2
 800c950:	1a9b      	subs	r3, r3, r2
 800c952:	199a      	adds	r2, r3, r6
 800c954:	9600      	str	r6, [sp, #0]
 800c956:	9205      	str	r2, [sp, #20]
 800c958:	9a00      	ldr	r2, [sp, #0]
 800c95a:	3601      	adds	r6, #1
 800c95c:	7810      	ldrb	r0, [r2, #0]
 800c95e:	2830      	cmp	r0, #48	; 0x30
 800c960:	d0f7      	beq.n	800c952 <__gethex+0x16>
 800c962:	f7ff ffd5 	bl	800c910 <__hexdig_fun>
 800c966:	2300      	movs	r3, #0
 800c968:	001d      	movs	r5, r3
 800c96a:	9302      	str	r3, [sp, #8]
 800c96c:	4298      	cmp	r0, r3
 800c96e:	d11d      	bne.n	800c9ac <__gethex+0x70>
 800c970:	2201      	movs	r2, #1
 800c972:	49a6      	ldr	r1, [pc, #664]	; (800cc0c <__gethex+0x2d0>)
 800c974:	9800      	ldr	r0, [sp, #0]
 800c976:	f7ff fed4 	bl	800c722 <strncmp>
 800c97a:	0007      	movs	r7, r0
 800c97c:	42a8      	cmp	r0, r5
 800c97e:	d169      	bne.n	800ca54 <__gethex+0x118>
 800c980:	9b00      	ldr	r3, [sp, #0]
 800c982:	0034      	movs	r4, r6
 800c984:	7858      	ldrb	r0, [r3, #1]
 800c986:	f7ff ffc3 	bl	800c910 <__hexdig_fun>
 800c98a:	2301      	movs	r3, #1
 800c98c:	9302      	str	r3, [sp, #8]
 800c98e:	42a8      	cmp	r0, r5
 800c990:	d02f      	beq.n	800c9f2 <__gethex+0xb6>
 800c992:	9600      	str	r6, [sp, #0]
 800c994:	9b00      	ldr	r3, [sp, #0]
 800c996:	7818      	ldrb	r0, [r3, #0]
 800c998:	2830      	cmp	r0, #48	; 0x30
 800c99a:	d009      	beq.n	800c9b0 <__gethex+0x74>
 800c99c:	f7ff ffb8 	bl	800c910 <__hexdig_fun>
 800c9a0:	4242      	negs	r2, r0
 800c9a2:	4142      	adcs	r2, r0
 800c9a4:	2301      	movs	r3, #1
 800c9a6:	0035      	movs	r5, r6
 800c9a8:	9202      	str	r2, [sp, #8]
 800c9aa:	9305      	str	r3, [sp, #20]
 800c9ac:	9c00      	ldr	r4, [sp, #0]
 800c9ae:	e004      	b.n	800c9ba <__gethex+0x7e>
 800c9b0:	9b00      	ldr	r3, [sp, #0]
 800c9b2:	3301      	adds	r3, #1
 800c9b4:	9300      	str	r3, [sp, #0]
 800c9b6:	e7ed      	b.n	800c994 <__gethex+0x58>
 800c9b8:	3401      	adds	r4, #1
 800c9ba:	7820      	ldrb	r0, [r4, #0]
 800c9bc:	f7ff ffa8 	bl	800c910 <__hexdig_fun>
 800c9c0:	1e07      	subs	r7, r0, #0
 800c9c2:	d1f9      	bne.n	800c9b8 <__gethex+0x7c>
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	0020      	movs	r0, r4
 800c9c8:	4990      	ldr	r1, [pc, #576]	; (800cc0c <__gethex+0x2d0>)
 800c9ca:	f7ff feaa 	bl	800c722 <strncmp>
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d10d      	bne.n	800c9ee <__gethex+0xb2>
 800c9d2:	2d00      	cmp	r5, #0
 800c9d4:	d106      	bne.n	800c9e4 <__gethex+0xa8>
 800c9d6:	3401      	adds	r4, #1
 800c9d8:	0025      	movs	r5, r4
 800c9da:	7820      	ldrb	r0, [r4, #0]
 800c9dc:	f7ff ff98 	bl	800c910 <__hexdig_fun>
 800c9e0:	2800      	cmp	r0, #0
 800c9e2:	d102      	bne.n	800c9ea <__gethex+0xae>
 800c9e4:	1b2d      	subs	r5, r5, r4
 800c9e6:	00af      	lsls	r7, r5, #2
 800c9e8:	e003      	b.n	800c9f2 <__gethex+0xb6>
 800c9ea:	3401      	adds	r4, #1
 800c9ec:	e7f5      	b.n	800c9da <__gethex+0x9e>
 800c9ee:	2d00      	cmp	r5, #0
 800c9f0:	d1f8      	bne.n	800c9e4 <__gethex+0xa8>
 800c9f2:	2220      	movs	r2, #32
 800c9f4:	7823      	ldrb	r3, [r4, #0]
 800c9f6:	0026      	movs	r6, r4
 800c9f8:	4393      	bics	r3, r2
 800c9fa:	2b50      	cmp	r3, #80	; 0x50
 800c9fc:	d11d      	bne.n	800ca3a <__gethex+0xfe>
 800c9fe:	7863      	ldrb	r3, [r4, #1]
 800ca00:	2b2b      	cmp	r3, #43	; 0x2b
 800ca02:	d02c      	beq.n	800ca5e <__gethex+0x122>
 800ca04:	2b2d      	cmp	r3, #45	; 0x2d
 800ca06:	d02e      	beq.n	800ca66 <__gethex+0x12a>
 800ca08:	2300      	movs	r3, #0
 800ca0a:	1c66      	adds	r6, r4, #1
 800ca0c:	9304      	str	r3, [sp, #16]
 800ca0e:	7830      	ldrb	r0, [r6, #0]
 800ca10:	f7ff ff7e 	bl	800c910 <__hexdig_fun>
 800ca14:	1e43      	subs	r3, r0, #1
 800ca16:	b2db      	uxtb	r3, r3
 800ca18:	2b18      	cmp	r3, #24
 800ca1a:	d82b      	bhi.n	800ca74 <__gethex+0x138>
 800ca1c:	3810      	subs	r0, #16
 800ca1e:	0005      	movs	r5, r0
 800ca20:	7870      	ldrb	r0, [r6, #1]
 800ca22:	f7ff ff75 	bl	800c910 <__hexdig_fun>
 800ca26:	1e43      	subs	r3, r0, #1
 800ca28:	b2db      	uxtb	r3, r3
 800ca2a:	3601      	adds	r6, #1
 800ca2c:	2b18      	cmp	r3, #24
 800ca2e:	d91c      	bls.n	800ca6a <__gethex+0x12e>
 800ca30:	9b04      	ldr	r3, [sp, #16]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d000      	beq.n	800ca38 <__gethex+0xfc>
 800ca36:	426d      	negs	r5, r5
 800ca38:	197f      	adds	r7, r7, r5
 800ca3a:	9b06      	ldr	r3, [sp, #24]
 800ca3c:	601e      	str	r6, [r3, #0]
 800ca3e:	9b02      	ldr	r3, [sp, #8]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d019      	beq.n	800ca78 <__gethex+0x13c>
 800ca44:	2600      	movs	r6, #0
 800ca46:	9b05      	ldr	r3, [sp, #20]
 800ca48:	42b3      	cmp	r3, r6
 800ca4a:	d100      	bne.n	800ca4e <__gethex+0x112>
 800ca4c:	3606      	adds	r6, #6
 800ca4e:	0030      	movs	r0, r6
 800ca50:	b009      	add	sp, #36	; 0x24
 800ca52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca54:	2301      	movs	r3, #1
 800ca56:	2700      	movs	r7, #0
 800ca58:	9c00      	ldr	r4, [sp, #0]
 800ca5a:	9302      	str	r3, [sp, #8]
 800ca5c:	e7c9      	b.n	800c9f2 <__gethex+0xb6>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	9304      	str	r3, [sp, #16]
 800ca62:	1ca6      	adds	r6, r4, #2
 800ca64:	e7d3      	b.n	800ca0e <__gethex+0xd2>
 800ca66:	2301      	movs	r3, #1
 800ca68:	e7fa      	b.n	800ca60 <__gethex+0x124>
 800ca6a:	230a      	movs	r3, #10
 800ca6c:	435d      	muls	r5, r3
 800ca6e:	182d      	adds	r5, r5, r0
 800ca70:	3d10      	subs	r5, #16
 800ca72:	e7d5      	b.n	800ca20 <__gethex+0xe4>
 800ca74:	0026      	movs	r6, r4
 800ca76:	e7e0      	b.n	800ca3a <__gethex+0xfe>
 800ca78:	9b00      	ldr	r3, [sp, #0]
 800ca7a:	9902      	ldr	r1, [sp, #8]
 800ca7c:	1ae3      	subs	r3, r4, r3
 800ca7e:	3b01      	subs	r3, #1
 800ca80:	2b07      	cmp	r3, #7
 800ca82:	dc0a      	bgt.n	800ca9a <__gethex+0x15e>
 800ca84:	9803      	ldr	r0, [sp, #12]
 800ca86:	f7fd ff07 	bl	800a898 <_Balloc>
 800ca8a:	1e05      	subs	r5, r0, #0
 800ca8c:	d108      	bne.n	800caa0 <__gethex+0x164>
 800ca8e:	002a      	movs	r2, r5
 800ca90:	21e4      	movs	r1, #228	; 0xe4
 800ca92:	4b5f      	ldr	r3, [pc, #380]	; (800cc10 <__gethex+0x2d4>)
 800ca94:	485f      	ldr	r0, [pc, #380]	; (800cc14 <__gethex+0x2d8>)
 800ca96:	f7ff fe9b 	bl	800c7d0 <__assert_func>
 800ca9a:	3101      	adds	r1, #1
 800ca9c:	105b      	asrs	r3, r3, #1
 800ca9e:	e7ef      	b.n	800ca80 <__gethex+0x144>
 800caa0:	0003      	movs	r3, r0
 800caa2:	3314      	adds	r3, #20
 800caa4:	9302      	str	r3, [sp, #8]
 800caa6:	9305      	str	r3, [sp, #20]
 800caa8:	2300      	movs	r3, #0
 800caaa:	001e      	movs	r6, r3
 800caac:	9304      	str	r3, [sp, #16]
 800caae:	9b00      	ldr	r3, [sp, #0]
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	d33f      	bcc.n	800cb34 <__gethex+0x1f8>
 800cab4:	9c05      	ldr	r4, [sp, #20]
 800cab6:	9b02      	ldr	r3, [sp, #8]
 800cab8:	c440      	stmia	r4!, {r6}
 800caba:	1ae4      	subs	r4, r4, r3
 800cabc:	10a4      	asrs	r4, r4, #2
 800cabe:	0030      	movs	r0, r6
 800cac0:	612c      	str	r4, [r5, #16]
 800cac2:	f7fd ffe1 	bl	800aa88 <__hi0bits>
 800cac6:	9b01      	ldr	r3, [sp, #4]
 800cac8:	0164      	lsls	r4, r4, #5
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	1a26      	subs	r6, r4, r0
 800cace:	9300      	str	r3, [sp, #0]
 800cad0:	429e      	cmp	r6, r3
 800cad2:	dd51      	ble.n	800cb78 <__gethex+0x23c>
 800cad4:	1af6      	subs	r6, r6, r3
 800cad6:	0031      	movs	r1, r6
 800cad8:	0028      	movs	r0, r5
 800cada:	f7fe fb75 	bl	800b1c8 <__any_on>
 800cade:	1e04      	subs	r4, r0, #0
 800cae0:	d016      	beq.n	800cb10 <__gethex+0x1d4>
 800cae2:	2401      	movs	r4, #1
 800cae4:	231f      	movs	r3, #31
 800cae6:	0020      	movs	r0, r4
 800cae8:	1e72      	subs	r2, r6, #1
 800caea:	4013      	ands	r3, r2
 800caec:	4098      	lsls	r0, r3
 800caee:	0003      	movs	r3, r0
 800caf0:	1151      	asrs	r1, r2, #5
 800caf2:	9802      	ldr	r0, [sp, #8]
 800caf4:	0089      	lsls	r1, r1, #2
 800caf6:	5809      	ldr	r1, [r1, r0]
 800caf8:	4219      	tst	r1, r3
 800cafa:	d009      	beq.n	800cb10 <__gethex+0x1d4>
 800cafc:	42a2      	cmp	r2, r4
 800cafe:	dd06      	ble.n	800cb0e <__gethex+0x1d2>
 800cb00:	0028      	movs	r0, r5
 800cb02:	1eb1      	subs	r1, r6, #2
 800cb04:	f7fe fb60 	bl	800b1c8 <__any_on>
 800cb08:	3402      	adds	r4, #2
 800cb0a:	2800      	cmp	r0, #0
 800cb0c:	d100      	bne.n	800cb10 <__gethex+0x1d4>
 800cb0e:	2402      	movs	r4, #2
 800cb10:	0031      	movs	r1, r6
 800cb12:	0028      	movs	r0, r5
 800cb14:	f7ff fea7 	bl	800c866 <rshift>
 800cb18:	19bf      	adds	r7, r7, r6
 800cb1a:	9b01      	ldr	r3, [sp, #4]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	42bb      	cmp	r3, r7
 800cb20:	da3a      	bge.n	800cb98 <__gethex+0x25c>
 800cb22:	0029      	movs	r1, r5
 800cb24:	9803      	ldr	r0, [sp, #12]
 800cb26:	f7fd fefb 	bl	800a920 <_Bfree>
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cb2e:	26a3      	movs	r6, #163	; 0xa3
 800cb30:	6013      	str	r3, [r2, #0]
 800cb32:	e78c      	b.n	800ca4e <__gethex+0x112>
 800cb34:	3c01      	subs	r4, #1
 800cb36:	7823      	ldrb	r3, [r4, #0]
 800cb38:	2b2e      	cmp	r3, #46	; 0x2e
 800cb3a:	d012      	beq.n	800cb62 <__gethex+0x226>
 800cb3c:	9b04      	ldr	r3, [sp, #16]
 800cb3e:	2b20      	cmp	r3, #32
 800cb40:	d104      	bne.n	800cb4c <__gethex+0x210>
 800cb42:	9b05      	ldr	r3, [sp, #20]
 800cb44:	c340      	stmia	r3!, {r6}
 800cb46:	2600      	movs	r6, #0
 800cb48:	9305      	str	r3, [sp, #20]
 800cb4a:	9604      	str	r6, [sp, #16]
 800cb4c:	7820      	ldrb	r0, [r4, #0]
 800cb4e:	f7ff fedf 	bl	800c910 <__hexdig_fun>
 800cb52:	230f      	movs	r3, #15
 800cb54:	4018      	ands	r0, r3
 800cb56:	9b04      	ldr	r3, [sp, #16]
 800cb58:	4098      	lsls	r0, r3
 800cb5a:	3304      	adds	r3, #4
 800cb5c:	4306      	orrs	r6, r0
 800cb5e:	9304      	str	r3, [sp, #16]
 800cb60:	e7a5      	b.n	800caae <__gethex+0x172>
 800cb62:	9b00      	ldr	r3, [sp, #0]
 800cb64:	42a3      	cmp	r3, r4
 800cb66:	d8e9      	bhi.n	800cb3c <__gethex+0x200>
 800cb68:	2201      	movs	r2, #1
 800cb6a:	0020      	movs	r0, r4
 800cb6c:	4927      	ldr	r1, [pc, #156]	; (800cc0c <__gethex+0x2d0>)
 800cb6e:	f7ff fdd8 	bl	800c722 <strncmp>
 800cb72:	2800      	cmp	r0, #0
 800cb74:	d1e2      	bne.n	800cb3c <__gethex+0x200>
 800cb76:	e79a      	b.n	800caae <__gethex+0x172>
 800cb78:	9b00      	ldr	r3, [sp, #0]
 800cb7a:	2400      	movs	r4, #0
 800cb7c:	429e      	cmp	r6, r3
 800cb7e:	dacc      	bge.n	800cb1a <__gethex+0x1de>
 800cb80:	1b9e      	subs	r6, r3, r6
 800cb82:	0029      	movs	r1, r5
 800cb84:	0032      	movs	r2, r6
 800cb86:	9803      	ldr	r0, [sp, #12]
 800cb88:	f7fe f8ea 	bl	800ad60 <__lshift>
 800cb8c:	0003      	movs	r3, r0
 800cb8e:	3314      	adds	r3, #20
 800cb90:	0005      	movs	r5, r0
 800cb92:	1bbf      	subs	r7, r7, r6
 800cb94:	9302      	str	r3, [sp, #8]
 800cb96:	e7c0      	b.n	800cb1a <__gethex+0x1de>
 800cb98:	9b01      	ldr	r3, [sp, #4]
 800cb9a:	685e      	ldr	r6, [r3, #4]
 800cb9c:	42be      	cmp	r6, r7
 800cb9e:	dd70      	ble.n	800cc82 <__gethex+0x346>
 800cba0:	9b00      	ldr	r3, [sp, #0]
 800cba2:	1bf6      	subs	r6, r6, r7
 800cba4:	42b3      	cmp	r3, r6
 800cba6:	dc37      	bgt.n	800cc18 <__gethex+0x2dc>
 800cba8:	9b01      	ldr	r3, [sp, #4]
 800cbaa:	68db      	ldr	r3, [r3, #12]
 800cbac:	2b02      	cmp	r3, #2
 800cbae:	d024      	beq.n	800cbfa <__gethex+0x2be>
 800cbb0:	2b03      	cmp	r3, #3
 800cbb2:	d026      	beq.n	800cc02 <__gethex+0x2c6>
 800cbb4:	2b01      	cmp	r3, #1
 800cbb6:	d117      	bne.n	800cbe8 <__gethex+0x2ac>
 800cbb8:	9b00      	ldr	r3, [sp, #0]
 800cbba:	42b3      	cmp	r3, r6
 800cbbc:	d114      	bne.n	800cbe8 <__gethex+0x2ac>
 800cbbe:	2b01      	cmp	r3, #1
 800cbc0:	d10b      	bne.n	800cbda <__gethex+0x29e>
 800cbc2:	9b01      	ldr	r3, [sp, #4]
 800cbc4:	9a07      	ldr	r2, [sp, #28]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	2662      	movs	r6, #98	; 0x62
 800cbca:	6013      	str	r3, [r2, #0]
 800cbcc:	2301      	movs	r3, #1
 800cbce:	9a02      	ldr	r2, [sp, #8]
 800cbd0:	612b      	str	r3, [r5, #16]
 800cbd2:	6013      	str	r3, [r2, #0]
 800cbd4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cbd6:	601d      	str	r5, [r3, #0]
 800cbd8:	e739      	b.n	800ca4e <__gethex+0x112>
 800cbda:	9900      	ldr	r1, [sp, #0]
 800cbdc:	0028      	movs	r0, r5
 800cbde:	3901      	subs	r1, #1
 800cbe0:	f7fe faf2 	bl	800b1c8 <__any_on>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	d1ec      	bne.n	800cbc2 <__gethex+0x286>
 800cbe8:	0029      	movs	r1, r5
 800cbea:	9803      	ldr	r0, [sp, #12]
 800cbec:	f7fd fe98 	bl	800a920 <_Bfree>
 800cbf0:	2300      	movs	r3, #0
 800cbf2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cbf4:	2650      	movs	r6, #80	; 0x50
 800cbf6:	6013      	str	r3, [r2, #0]
 800cbf8:	e729      	b.n	800ca4e <__gethex+0x112>
 800cbfa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	d1f3      	bne.n	800cbe8 <__gethex+0x2ac>
 800cc00:	e7df      	b.n	800cbc2 <__gethex+0x286>
 800cc02:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc04:	2b00      	cmp	r3, #0
 800cc06:	d1dc      	bne.n	800cbc2 <__gethex+0x286>
 800cc08:	e7ee      	b.n	800cbe8 <__gethex+0x2ac>
 800cc0a:	46c0      	nop			; (mov r8, r8)
 800cc0c:	0800d574 	.word	0x0800d574
 800cc10:	0800d40d 	.word	0x0800d40d
 800cc14:	0800d71e 	.word	0x0800d71e
 800cc18:	1e77      	subs	r7, r6, #1
 800cc1a:	2c00      	cmp	r4, #0
 800cc1c:	d12f      	bne.n	800cc7e <__gethex+0x342>
 800cc1e:	2f00      	cmp	r7, #0
 800cc20:	d004      	beq.n	800cc2c <__gethex+0x2f0>
 800cc22:	0039      	movs	r1, r7
 800cc24:	0028      	movs	r0, r5
 800cc26:	f7fe facf 	bl	800b1c8 <__any_on>
 800cc2a:	0004      	movs	r4, r0
 800cc2c:	231f      	movs	r3, #31
 800cc2e:	117a      	asrs	r2, r7, #5
 800cc30:	401f      	ands	r7, r3
 800cc32:	3b1e      	subs	r3, #30
 800cc34:	40bb      	lsls	r3, r7
 800cc36:	9902      	ldr	r1, [sp, #8]
 800cc38:	0092      	lsls	r2, r2, #2
 800cc3a:	5852      	ldr	r2, [r2, r1]
 800cc3c:	421a      	tst	r2, r3
 800cc3e:	d001      	beq.n	800cc44 <__gethex+0x308>
 800cc40:	2302      	movs	r3, #2
 800cc42:	431c      	orrs	r4, r3
 800cc44:	9b00      	ldr	r3, [sp, #0]
 800cc46:	0031      	movs	r1, r6
 800cc48:	1b9b      	subs	r3, r3, r6
 800cc4a:	2602      	movs	r6, #2
 800cc4c:	0028      	movs	r0, r5
 800cc4e:	9300      	str	r3, [sp, #0]
 800cc50:	f7ff fe09 	bl	800c866 <rshift>
 800cc54:	9b01      	ldr	r3, [sp, #4]
 800cc56:	685f      	ldr	r7, [r3, #4]
 800cc58:	2c00      	cmp	r4, #0
 800cc5a:	d041      	beq.n	800cce0 <__gethex+0x3a4>
 800cc5c:	9b01      	ldr	r3, [sp, #4]
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	2b02      	cmp	r3, #2
 800cc62:	d010      	beq.n	800cc86 <__gethex+0x34a>
 800cc64:	2b03      	cmp	r3, #3
 800cc66:	d012      	beq.n	800cc8e <__gethex+0x352>
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d106      	bne.n	800cc7a <__gethex+0x33e>
 800cc6c:	07a2      	lsls	r2, r4, #30
 800cc6e:	d504      	bpl.n	800cc7a <__gethex+0x33e>
 800cc70:	9a02      	ldr	r2, [sp, #8]
 800cc72:	6812      	ldr	r2, [r2, #0]
 800cc74:	4314      	orrs	r4, r2
 800cc76:	421c      	tst	r4, r3
 800cc78:	d10c      	bne.n	800cc94 <__gethex+0x358>
 800cc7a:	2310      	movs	r3, #16
 800cc7c:	e02f      	b.n	800ccde <__gethex+0x3a2>
 800cc7e:	2401      	movs	r4, #1
 800cc80:	e7d4      	b.n	800cc2c <__gethex+0x2f0>
 800cc82:	2601      	movs	r6, #1
 800cc84:	e7e8      	b.n	800cc58 <__gethex+0x31c>
 800cc86:	2301      	movs	r3, #1
 800cc88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cc8a:	1a9b      	subs	r3, r3, r2
 800cc8c:	930f      	str	r3, [sp, #60]	; 0x3c
 800cc8e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	d0f2      	beq.n	800cc7a <__gethex+0x33e>
 800cc94:	692b      	ldr	r3, [r5, #16]
 800cc96:	2000      	movs	r0, #0
 800cc98:	9302      	str	r3, [sp, #8]
 800cc9a:	009b      	lsls	r3, r3, #2
 800cc9c:	9304      	str	r3, [sp, #16]
 800cc9e:	002b      	movs	r3, r5
 800cca0:	9a04      	ldr	r2, [sp, #16]
 800cca2:	3314      	adds	r3, #20
 800cca4:	1899      	adds	r1, r3, r2
 800cca6:	681a      	ldr	r2, [r3, #0]
 800cca8:	1c54      	adds	r4, r2, #1
 800ccaa:	d01e      	beq.n	800ccea <__gethex+0x3ae>
 800ccac:	3201      	adds	r2, #1
 800ccae:	601a      	str	r2, [r3, #0]
 800ccb0:	002b      	movs	r3, r5
 800ccb2:	3314      	adds	r3, #20
 800ccb4:	2e02      	cmp	r6, #2
 800ccb6:	d141      	bne.n	800cd3c <__gethex+0x400>
 800ccb8:	9a01      	ldr	r2, [sp, #4]
 800ccba:	9900      	ldr	r1, [sp, #0]
 800ccbc:	6812      	ldr	r2, [r2, #0]
 800ccbe:	3a01      	subs	r2, #1
 800ccc0:	428a      	cmp	r2, r1
 800ccc2:	d10b      	bne.n	800ccdc <__gethex+0x3a0>
 800ccc4:	221f      	movs	r2, #31
 800ccc6:	9800      	ldr	r0, [sp, #0]
 800ccc8:	1149      	asrs	r1, r1, #5
 800ccca:	4002      	ands	r2, r0
 800cccc:	2001      	movs	r0, #1
 800ccce:	0004      	movs	r4, r0
 800ccd0:	4094      	lsls	r4, r2
 800ccd2:	0089      	lsls	r1, r1, #2
 800ccd4:	58cb      	ldr	r3, [r1, r3]
 800ccd6:	4223      	tst	r3, r4
 800ccd8:	d000      	beq.n	800ccdc <__gethex+0x3a0>
 800ccda:	2601      	movs	r6, #1
 800ccdc:	2320      	movs	r3, #32
 800ccde:	431e      	orrs	r6, r3
 800cce0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cce2:	601d      	str	r5, [r3, #0]
 800cce4:	9b07      	ldr	r3, [sp, #28]
 800cce6:	601f      	str	r7, [r3, #0]
 800cce8:	e6b1      	b.n	800ca4e <__gethex+0x112>
 800ccea:	c301      	stmia	r3!, {r0}
 800ccec:	4299      	cmp	r1, r3
 800ccee:	d8da      	bhi.n	800cca6 <__gethex+0x36a>
 800ccf0:	68ab      	ldr	r3, [r5, #8]
 800ccf2:	9a02      	ldr	r2, [sp, #8]
 800ccf4:	429a      	cmp	r2, r3
 800ccf6:	db18      	blt.n	800cd2a <__gethex+0x3ee>
 800ccf8:	6869      	ldr	r1, [r5, #4]
 800ccfa:	9803      	ldr	r0, [sp, #12]
 800ccfc:	3101      	adds	r1, #1
 800ccfe:	f7fd fdcb 	bl	800a898 <_Balloc>
 800cd02:	1e04      	subs	r4, r0, #0
 800cd04:	d104      	bne.n	800cd10 <__gethex+0x3d4>
 800cd06:	0022      	movs	r2, r4
 800cd08:	2184      	movs	r1, #132	; 0x84
 800cd0a:	4b1c      	ldr	r3, [pc, #112]	; (800cd7c <__gethex+0x440>)
 800cd0c:	481c      	ldr	r0, [pc, #112]	; (800cd80 <__gethex+0x444>)
 800cd0e:	e6c2      	b.n	800ca96 <__gethex+0x15a>
 800cd10:	0029      	movs	r1, r5
 800cd12:	692a      	ldr	r2, [r5, #16]
 800cd14:	310c      	adds	r1, #12
 800cd16:	3202      	adds	r2, #2
 800cd18:	0092      	lsls	r2, r2, #2
 800cd1a:	300c      	adds	r0, #12
 800cd1c:	f7ff fd48 	bl	800c7b0 <memcpy>
 800cd20:	0029      	movs	r1, r5
 800cd22:	9803      	ldr	r0, [sp, #12]
 800cd24:	f7fd fdfc 	bl	800a920 <_Bfree>
 800cd28:	0025      	movs	r5, r4
 800cd2a:	692b      	ldr	r3, [r5, #16]
 800cd2c:	1c5a      	adds	r2, r3, #1
 800cd2e:	612a      	str	r2, [r5, #16]
 800cd30:	2201      	movs	r2, #1
 800cd32:	3304      	adds	r3, #4
 800cd34:	009b      	lsls	r3, r3, #2
 800cd36:	18eb      	adds	r3, r5, r3
 800cd38:	605a      	str	r2, [r3, #4]
 800cd3a:	e7b9      	b.n	800ccb0 <__gethex+0x374>
 800cd3c:	692a      	ldr	r2, [r5, #16]
 800cd3e:	9902      	ldr	r1, [sp, #8]
 800cd40:	428a      	cmp	r2, r1
 800cd42:	dd09      	ble.n	800cd58 <__gethex+0x41c>
 800cd44:	2101      	movs	r1, #1
 800cd46:	0028      	movs	r0, r5
 800cd48:	f7ff fd8d 	bl	800c866 <rshift>
 800cd4c:	9b01      	ldr	r3, [sp, #4]
 800cd4e:	3701      	adds	r7, #1
 800cd50:	689b      	ldr	r3, [r3, #8]
 800cd52:	42bb      	cmp	r3, r7
 800cd54:	dac1      	bge.n	800ccda <__gethex+0x39e>
 800cd56:	e6e4      	b.n	800cb22 <__gethex+0x1e6>
 800cd58:	221f      	movs	r2, #31
 800cd5a:	9c00      	ldr	r4, [sp, #0]
 800cd5c:	9900      	ldr	r1, [sp, #0]
 800cd5e:	2601      	movs	r6, #1
 800cd60:	4014      	ands	r4, r2
 800cd62:	4211      	tst	r1, r2
 800cd64:	d0ba      	beq.n	800ccdc <__gethex+0x3a0>
 800cd66:	9a04      	ldr	r2, [sp, #16]
 800cd68:	189b      	adds	r3, r3, r2
 800cd6a:	3b04      	subs	r3, #4
 800cd6c:	6818      	ldr	r0, [r3, #0]
 800cd6e:	f7fd fe8b 	bl	800aa88 <__hi0bits>
 800cd72:	2320      	movs	r3, #32
 800cd74:	1b1b      	subs	r3, r3, r4
 800cd76:	4298      	cmp	r0, r3
 800cd78:	dbe4      	blt.n	800cd44 <__gethex+0x408>
 800cd7a:	e7af      	b.n	800ccdc <__gethex+0x3a0>
 800cd7c:	0800d40d 	.word	0x0800d40d
 800cd80:	0800d71e 	.word	0x0800d71e

0800cd84 <L_shift>:
 800cd84:	2308      	movs	r3, #8
 800cd86:	b570      	push	{r4, r5, r6, lr}
 800cd88:	2520      	movs	r5, #32
 800cd8a:	1a9a      	subs	r2, r3, r2
 800cd8c:	0092      	lsls	r2, r2, #2
 800cd8e:	1aad      	subs	r5, r5, r2
 800cd90:	6843      	ldr	r3, [r0, #4]
 800cd92:	6804      	ldr	r4, [r0, #0]
 800cd94:	001e      	movs	r6, r3
 800cd96:	40ae      	lsls	r6, r5
 800cd98:	40d3      	lsrs	r3, r2
 800cd9a:	4334      	orrs	r4, r6
 800cd9c:	6004      	str	r4, [r0, #0]
 800cd9e:	6043      	str	r3, [r0, #4]
 800cda0:	3004      	adds	r0, #4
 800cda2:	4288      	cmp	r0, r1
 800cda4:	d3f4      	bcc.n	800cd90 <L_shift+0xc>
 800cda6:	bd70      	pop	{r4, r5, r6, pc}

0800cda8 <__match>:
 800cda8:	b530      	push	{r4, r5, lr}
 800cdaa:	6803      	ldr	r3, [r0, #0]
 800cdac:	780c      	ldrb	r4, [r1, #0]
 800cdae:	3301      	adds	r3, #1
 800cdb0:	2c00      	cmp	r4, #0
 800cdb2:	d102      	bne.n	800cdba <__match+0x12>
 800cdb4:	6003      	str	r3, [r0, #0]
 800cdb6:	2001      	movs	r0, #1
 800cdb8:	bd30      	pop	{r4, r5, pc}
 800cdba:	781a      	ldrb	r2, [r3, #0]
 800cdbc:	0015      	movs	r5, r2
 800cdbe:	3d41      	subs	r5, #65	; 0x41
 800cdc0:	2d19      	cmp	r5, #25
 800cdc2:	d800      	bhi.n	800cdc6 <__match+0x1e>
 800cdc4:	3220      	adds	r2, #32
 800cdc6:	3101      	adds	r1, #1
 800cdc8:	42a2      	cmp	r2, r4
 800cdca:	d0ef      	beq.n	800cdac <__match+0x4>
 800cdcc:	2000      	movs	r0, #0
 800cdce:	e7f3      	b.n	800cdb8 <__match+0x10>

0800cdd0 <__hexnan>:
 800cdd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cdd2:	680b      	ldr	r3, [r1, #0]
 800cdd4:	b08b      	sub	sp, #44	; 0x2c
 800cdd6:	9201      	str	r2, [sp, #4]
 800cdd8:	9901      	ldr	r1, [sp, #4]
 800cdda:	115a      	asrs	r2, r3, #5
 800cddc:	0092      	lsls	r2, r2, #2
 800cdde:	188a      	adds	r2, r1, r2
 800cde0:	9202      	str	r2, [sp, #8]
 800cde2:	0019      	movs	r1, r3
 800cde4:	221f      	movs	r2, #31
 800cde6:	4011      	ands	r1, r2
 800cde8:	9008      	str	r0, [sp, #32]
 800cdea:	9106      	str	r1, [sp, #24]
 800cdec:	4213      	tst	r3, r2
 800cdee:	d002      	beq.n	800cdf6 <__hexnan+0x26>
 800cdf0:	9b02      	ldr	r3, [sp, #8]
 800cdf2:	3304      	adds	r3, #4
 800cdf4:	9302      	str	r3, [sp, #8]
 800cdf6:	9b02      	ldr	r3, [sp, #8]
 800cdf8:	2500      	movs	r5, #0
 800cdfa:	1f1f      	subs	r7, r3, #4
 800cdfc:	003e      	movs	r6, r7
 800cdfe:	003c      	movs	r4, r7
 800ce00:	9b08      	ldr	r3, [sp, #32]
 800ce02:	603d      	str	r5, [r7, #0]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	9507      	str	r5, [sp, #28]
 800ce08:	9305      	str	r3, [sp, #20]
 800ce0a:	9503      	str	r5, [sp, #12]
 800ce0c:	9b05      	ldr	r3, [sp, #20]
 800ce0e:	3301      	adds	r3, #1
 800ce10:	9309      	str	r3, [sp, #36]	; 0x24
 800ce12:	9b05      	ldr	r3, [sp, #20]
 800ce14:	785b      	ldrb	r3, [r3, #1]
 800ce16:	9304      	str	r3, [sp, #16]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d028      	beq.n	800ce6e <__hexnan+0x9e>
 800ce1c:	9804      	ldr	r0, [sp, #16]
 800ce1e:	f7ff fd77 	bl	800c910 <__hexdig_fun>
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d154      	bne.n	800ced0 <__hexnan+0x100>
 800ce26:	9b04      	ldr	r3, [sp, #16]
 800ce28:	2b20      	cmp	r3, #32
 800ce2a:	d819      	bhi.n	800ce60 <__hexnan+0x90>
 800ce2c:	9b03      	ldr	r3, [sp, #12]
 800ce2e:	9a07      	ldr	r2, [sp, #28]
 800ce30:	4293      	cmp	r3, r2
 800ce32:	dd12      	ble.n	800ce5a <__hexnan+0x8a>
 800ce34:	42b4      	cmp	r4, r6
 800ce36:	d206      	bcs.n	800ce46 <__hexnan+0x76>
 800ce38:	2d07      	cmp	r5, #7
 800ce3a:	dc04      	bgt.n	800ce46 <__hexnan+0x76>
 800ce3c:	002a      	movs	r2, r5
 800ce3e:	0031      	movs	r1, r6
 800ce40:	0020      	movs	r0, r4
 800ce42:	f7ff ff9f 	bl	800cd84 <L_shift>
 800ce46:	9b01      	ldr	r3, [sp, #4]
 800ce48:	2508      	movs	r5, #8
 800ce4a:	429c      	cmp	r4, r3
 800ce4c:	d905      	bls.n	800ce5a <__hexnan+0x8a>
 800ce4e:	1f26      	subs	r6, r4, #4
 800ce50:	2500      	movs	r5, #0
 800ce52:	0034      	movs	r4, r6
 800ce54:	9b03      	ldr	r3, [sp, #12]
 800ce56:	6035      	str	r5, [r6, #0]
 800ce58:	9307      	str	r3, [sp, #28]
 800ce5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce5c:	9305      	str	r3, [sp, #20]
 800ce5e:	e7d5      	b.n	800ce0c <__hexnan+0x3c>
 800ce60:	9b04      	ldr	r3, [sp, #16]
 800ce62:	2b29      	cmp	r3, #41	; 0x29
 800ce64:	d159      	bne.n	800cf1a <__hexnan+0x14a>
 800ce66:	9b05      	ldr	r3, [sp, #20]
 800ce68:	9a08      	ldr	r2, [sp, #32]
 800ce6a:	3302      	adds	r3, #2
 800ce6c:	6013      	str	r3, [r2, #0]
 800ce6e:	9b03      	ldr	r3, [sp, #12]
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	d052      	beq.n	800cf1a <__hexnan+0x14a>
 800ce74:	42b4      	cmp	r4, r6
 800ce76:	d206      	bcs.n	800ce86 <__hexnan+0xb6>
 800ce78:	2d07      	cmp	r5, #7
 800ce7a:	dc04      	bgt.n	800ce86 <__hexnan+0xb6>
 800ce7c:	002a      	movs	r2, r5
 800ce7e:	0031      	movs	r1, r6
 800ce80:	0020      	movs	r0, r4
 800ce82:	f7ff ff7f 	bl	800cd84 <L_shift>
 800ce86:	9b01      	ldr	r3, [sp, #4]
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	d935      	bls.n	800cef8 <__hexnan+0x128>
 800ce8c:	001a      	movs	r2, r3
 800ce8e:	0023      	movs	r3, r4
 800ce90:	cb02      	ldmia	r3!, {r1}
 800ce92:	c202      	stmia	r2!, {r1}
 800ce94:	429f      	cmp	r7, r3
 800ce96:	d2fb      	bcs.n	800ce90 <__hexnan+0xc0>
 800ce98:	9b02      	ldr	r3, [sp, #8]
 800ce9a:	1c62      	adds	r2, r4, #1
 800ce9c:	1ed9      	subs	r1, r3, #3
 800ce9e:	2304      	movs	r3, #4
 800cea0:	4291      	cmp	r1, r2
 800cea2:	d305      	bcc.n	800ceb0 <__hexnan+0xe0>
 800cea4:	9b02      	ldr	r3, [sp, #8]
 800cea6:	3b04      	subs	r3, #4
 800cea8:	1b1b      	subs	r3, r3, r4
 800ceaa:	089b      	lsrs	r3, r3, #2
 800ceac:	3301      	adds	r3, #1
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	9a01      	ldr	r2, [sp, #4]
 800ceb2:	18d3      	adds	r3, r2, r3
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	c304      	stmia	r3!, {r2}
 800ceb8:	429f      	cmp	r7, r3
 800ceba:	d2fc      	bcs.n	800ceb6 <__hexnan+0xe6>
 800cebc:	683b      	ldr	r3, [r7, #0]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d104      	bne.n	800cecc <__hexnan+0xfc>
 800cec2:	9b01      	ldr	r3, [sp, #4]
 800cec4:	429f      	cmp	r7, r3
 800cec6:	d126      	bne.n	800cf16 <__hexnan+0x146>
 800cec8:	2301      	movs	r3, #1
 800ceca:	603b      	str	r3, [r7, #0]
 800cecc:	2005      	movs	r0, #5
 800cece:	e025      	b.n	800cf1c <__hexnan+0x14c>
 800ced0:	9b03      	ldr	r3, [sp, #12]
 800ced2:	3501      	adds	r5, #1
 800ced4:	3301      	adds	r3, #1
 800ced6:	9303      	str	r3, [sp, #12]
 800ced8:	2d08      	cmp	r5, #8
 800ceda:	dd06      	ble.n	800ceea <__hexnan+0x11a>
 800cedc:	9b01      	ldr	r3, [sp, #4]
 800cede:	429c      	cmp	r4, r3
 800cee0:	d9bb      	bls.n	800ce5a <__hexnan+0x8a>
 800cee2:	2300      	movs	r3, #0
 800cee4:	2501      	movs	r5, #1
 800cee6:	3c04      	subs	r4, #4
 800cee8:	6023      	str	r3, [r4, #0]
 800ceea:	220f      	movs	r2, #15
 800ceec:	6823      	ldr	r3, [r4, #0]
 800ceee:	4010      	ands	r0, r2
 800cef0:	011b      	lsls	r3, r3, #4
 800cef2:	4303      	orrs	r3, r0
 800cef4:	6023      	str	r3, [r4, #0]
 800cef6:	e7b0      	b.n	800ce5a <__hexnan+0x8a>
 800cef8:	9b06      	ldr	r3, [sp, #24]
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d0de      	beq.n	800cebc <__hexnan+0xec>
 800cefe:	2320      	movs	r3, #32
 800cf00:	9a06      	ldr	r2, [sp, #24]
 800cf02:	9902      	ldr	r1, [sp, #8]
 800cf04:	1a9b      	subs	r3, r3, r2
 800cf06:	2201      	movs	r2, #1
 800cf08:	4252      	negs	r2, r2
 800cf0a:	40da      	lsrs	r2, r3
 800cf0c:	3904      	subs	r1, #4
 800cf0e:	680b      	ldr	r3, [r1, #0]
 800cf10:	4013      	ands	r3, r2
 800cf12:	600b      	str	r3, [r1, #0]
 800cf14:	e7d2      	b.n	800cebc <__hexnan+0xec>
 800cf16:	3f04      	subs	r7, #4
 800cf18:	e7d0      	b.n	800cebc <__hexnan+0xec>
 800cf1a:	2004      	movs	r0, #4
 800cf1c:	b00b      	add	sp, #44	; 0x2c
 800cf1e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800cf20 <__ascii_mbtowc>:
 800cf20:	b082      	sub	sp, #8
 800cf22:	2900      	cmp	r1, #0
 800cf24:	d100      	bne.n	800cf28 <__ascii_mbtowc+0x8>
 800cf26:	a901      	add	r1, sp, #4
 800cf28:	1e10      	subs	r0, r2, #0
 800cf2a:	d006      	beq.n	800cf3a <__ascii_mbtowc+0x1a>
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d006      	beq.n	800cf3e <__ascii_mbtowc+0x1e>
 800cf30:	7813      	ldrb	r3, [r2, #0]
 800cf32:	600b      	str	r3, [r1, #0]
 800cf34:	7810      	ldrb	r0, [r2, #0]
 800cf36:	1e43      	subs	r3, r0, #1
 800cf38:	4198      	sbcs	r0, r3
 800cf3a:	b002      	add	sp, #8
 800cf3c:	4770      	bx	lr
 800cf3e:	2002      	movs	r0, #2
 800cf40:	4240      	negs	r0, r0
 800cf42:	e7fa      	b.n	800cf3a <__ascii_mbtowc+0x1a>

0800cf44 <_realloc_r>:
 800cf44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf46:	0007      	movs	r7, r0
 800cf48:	000e      	movs	r6, r1
 800cf4a:	0014      	movs	r4, r2
 800cf4c:	2900      	cmp	r1, #0
 800cf4e:	d105      	bne.n	800cf5c <_realloc_r+0x18>
 800cf50:	0011      	movs	r1, r2
 800cf52:	f7fd fc0f 	bl	800a774 <_malloc_r>
 800cf56:	0005      	movs	r5, r0
 800cf58:	0028      	movs	r0, r5
 800cf5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cf5c:	2a00      	cmp	r2, #0
 800cf5e:	d103      	bne.n	800cf68 <_realloc_r+0x24>
 800cf60:	f7fd fb92 	bl	800a688 <_free_r>
 800cf64:	0025      	movs	r5, r4
 800cf66:	e7f7      	b.n	800cf58 <_realloc_r+0x14>
 800cf68:	f000 f83f 	bl	800cfea <_malloc_usable_size_r>
 800cf6c:	9001      	str	r0, [sp, #4]
 800cf6e:	4284      	cmp	r4, r0
 800cf70:	d803      	bhi.n	800cf7a <_realloc_r+0x36>
 800cf72:	0035      	movs	r5, r6
 800cf74:	0843      	lsrs	r3, r0, #1
 800cf76:	42a3      	cmp	r3, r4
 800cf78:	d3ee      	bcc.n	800cf58 <_realloc_r+0x14>
 800cf7a:	0021      	movs	r1, r4
 800cf7c:	0038      	movs	r0, r7
 800cf7e:	f7fd fbf9 	bl	800a774 <_malloc_r>
 800cf82:	1e05      	subs	r5, r0, #0
 800cf84:	d0e8      	beq.n	800cf58 <_realloc_r+0x14>
 800cf86:	9b01      	ldr	r3, [sp, #4]
 800cf88:	0022      	movs	r2, r4
 800cf8a:	429c      	cmp	r4, r3
 800cf8c:	d900      	bls.n	800cf90 <_realloc_r+0x4c>
 800cf8e:	001a      	movs	r2, r3
 800cf90:	0031      	movs	r1, r6
 800cf92:	0028      	movs	r0, r5
 800cf94:	f7ff fc0c 	bl	800c7b0 <memcpy>
 800cf98:	0031      	movs	r1, r6
 800cf9a:	0038      	movs	r0, r7
 800cf9c:	f7fd fb74 	bl	800a688 <_free_r>
 800cfa0:	e7da      	b.n	800cf58 <_realloc_r+0x14>

0800cfa2 <__ascii_wctomb>:
 800cfa2:	0003      	movs	r3, r0
 800cfa4:	1e08      	subs	r0, r1, #0
 800cfa6:	d005      	beq.n	800cfb4 <__ascii_wctomb+0x12>
 800cfa8:	2aff      	cmp	r2, #255	; 0xff
 800cfaa:	d904      	bls.n	800cfb6 <__ascii_wctomb+0x14>
 800cfac:	228a      	movs	r2, #138	; 0x8a
 800cfae:	2001      	movs	r0, #1
 800cfb0:	601a      	str	r2, [r3, #0]
 800cfb2:	4240      	negs	r0, r0
 800cfb4:	4770      	bx	lr
 800cfb6:	2001      	movs	r0, #1
 800cfb8:	700a      	strb	r2, [r1, #0]
 800cfba:	e7fb      	b.n	800cfb4 <__ascii_wctomb+0x12>

0800cfbc <fiprintf>:
 800cfbc:	b40e      	push	{r1, r2, r3}
 800cfbe:	b517      	push	{r0, r1, r2, r4, lr}
 800cfc0:	4c05      	ldr	r4, [pc, #20]	; (800cfd8 <fiprintf+0x1c>)
 800cfc2:	ab05      	add	r3, sp, #20
 800cfc4:	cb04      	ldmia	r3!, {r2}
 800cfc6:	0001      	movs	r1, r0
 800cfc8:	6820      	ldr	r0, [r4, #0]
 800cfca:	9301      	str	r3, [sp, #4]
 800cfcc:	f7ff f95e 	bl	800c28c <_vfiprintf_r>
 800cfd0:	bc1e      	pop	{r1, r2, r3, r4}
 800cfd2:	bc08      	pop	{r3}
 800cfd4:	b003      	add	sp, #12
 800cfd6:	4718      	bx	r3
 800cfd8:	20000068 	.word	0x20000068

0800cfdc <abort>:
 800cfdc:	2006      	movs	r0, #6
 800cfde:	b510      	push	{r4, lr}
 800cfe0:	f000 f836 	bl	800d050 <raise>
 800cfe4:	2001      	movs	r0, #1
 800cfe6:	f7f6 f9f7 	bl	80033d8 <_exit>

0800cfea <_malloc_usable_size_r>:
 800cfea:	1f0b      	subs	r3, r1, #4
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	1f18      	subs	r0, r3, #4
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	da01      	bge.n	800cff8 <_malloc_usable_size_r+0xe>
 800cff4:	580b      	ldr	r3, [r1, r0]
 800cff6:	18c0      	adds	r0, r0, r3
 800cff8:	4770      	bx	lr

0800cffa <_raise_r>:
 800cffa:	b570      	push	{r4, r5, r6, lr}
 800cffc:	0004      	movs	r4, r0
 800cffe:	000d      	movs	r5, r1
 800d000:	291f      	cmp	r1, #31
 800d002:	d904      	bls.n	800d00e <_raise_r+0x14>
 800d004:	2316      	movs	r3, #22
 800d006:	6003      	str	r3, [r0, #0]
 800d008:	2001      	movs	r0, #1
 800d00a:	4240      	negs	r0, r0
 800d00c:	bd70      	pop	{r4, r5, r6, pc}
 800d00e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800d010:	2b00      	cmp	r3, #0
 800d012:	d004      	beq.n	800d01e <_raise_r+0x24>
 800d014:	008a      	lsls	r2, r1, #2
 800d016:	189b      	adds	r3, r3, r2
 800d018:	681a      	ldr	r2, [r3, #0]
 800d01a:	2a00      	cmp	r2, #0
 800d01c:	d108      	bne.n	800d030 <_raise_r+0x36>
 800d01e:	0020      	movs	r0, r4
 800d020:	f000 f832 	bl	800d088 <_getpid_r>
 800d024:	002a      	movs	r2, r5
 800d026:	0001      	movs	r1, r0
 800d028:	0020      	movs	r0, r4
 800d02a:	f000 f81b 	bl	800d064 <_kill_r>
 800d02e:	e7ed      	b.n	800d00c <_raise_r+0x12>
 800d030:	2000      	movs	r0, #0
 800d032:	2a01      	cmp	r2, #1
 800d034:	d0ea      	beq.n	800d00c <_raise_r+0x12>
 800d036:	1c51      	adds	r1, r2, #1
 800d038:	d103      	bne.n	800d042 <_raise_r+0x48>
 800d03a:	2316      	movs	r3, #22
 800d03c:	3001      	adds	r0, #1
 800d03e:	6023      	str	r3, [r4, #0]
 800d040:	e7e4      	b.n	800d00c <_raise_r+0x12>
 800d042:	2400      	movs	r4, #0
 800d044:	0028      	movs	r0, r5
 800d046:	601c      	str	r4, [r3, #0]
 800d048:	4790      	blx	r2
 800d04a:	0020      	movs	r0, r4
 800d04c:	e7de      	b.n	800d00c <_raise_r+0x12>
	...

0800d050 <raise>:
 800d050:	b510      	push	{r4, lr}
 800d052:	4b03      	ldr	r3, [pc, #12]	; (800d060 <raise+0x10>)
 800d054:	0001      	movs	r1, r0
 800d056:	6818      	ldr	r0, [r3, #0]
 800d058:	f7ff ffcf 	bl	800cffa <_raise_r>
 800d05c:	bd10      	pop	{r4, pc}
 800d05e:	46c0      	nop			; (mov r8, r8)
 800d060:	20000068 	.word	0x20000068

0800d064 <_kill_r>:
 800d064:	2300      	movs	r3, #0
 800d066:	b570      	push	{r4, r5, r6, lr}
 800d068:	4d06      	ldr	r5, [pc, #24]	; (800d084 <_kill_r+0x20>)
 800d06a:	0004      	movs	r4, r0
 800d06c:	0008      	movs	r0, r1
 800d06e:	0011      	movs	r1, r2
 800d070:	602b      	str	r3, [r5, #0]
 800d072:	f7f6 f9a1 	bl	80033b8 <_kill>
 800d076:	1c43      	adds	r3, r0, #1
 800d078:	d103      	bne.n	800d082 <_kill_r+0x1e>
 800d07a:	682b      	ldr	r3, [r5, #0]
 800d07c:	2b00      	cmp	r3, #0
 800d07e:	d000      	beq.n	800d082 <_kill_r+0x1e>
 800d080:	6023      	str	r3, [r4, #0]
 800d082:	bd70      	pop	{r4, r5, r6, pc}
 800d084:	200007d0 	.word	0x200007d0

0800d088 <_getpid_r>:
 800d088:	b510      	push	{r4, lr}
 800d08a:	f7f6 f98f 	bl	80033ac <_getpid>
 800d08e:	bd10      	pop	{r4, pc}

0800d090 <_init>:
 800d090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d092:	46c0      	nop			; (mov r8, r8)
 800d094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d096:	bc08      	pop	{r3}
 800d098:	469e      	mov	lr, r3
 800d09a:	4770      	bx	lr

0800d09c <_fini>:
 800d09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d09e:	46c0      	nop			; (mov r8, r8)
 800d0a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d0a2:	bc08      	pop	{r3}
 800d0a4:	469e      	mov	lr, r3
 800d0a6:	4770      	bx	lr
