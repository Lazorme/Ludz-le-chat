
Ludz_le_chat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc18  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  0800bcd8  0800bcd8  0001bcd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bef0  0800bef0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800bef0  0800bef0  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800bef0  0800bef0  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bef0  0800bef0  0001bef0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bef4  0800bef4  0001bef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800bef8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000087b4  2000006c  0800bf64  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008820  0800bf64  00028820  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d883  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004bfe  00000000  00000000  0003d95a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ab0  00000000  00000000  00042558  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000149e  00000000  00000000  00044008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c066  00000000  00000000  000454a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021fbf  00000000  00000000  0006150c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a58b1  00000000  00000000  000834cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006878  00000000  00000000  00128d7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  0012f5f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800bcc0 	.word	0x0800bcc0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800bcc0 	.word	0x0800bcc0

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 f8db 	bl	80005d4 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f82b 	bl	8000484 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 f8cd 	bl	80005d4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 f8c3 	bl	80005d4 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 f853 	bl	8000508 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 f849 	bl	8000508 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__eqdf2>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464e      	mov	r6, r9
 8000488:	4645      	mov	r5, r8
 800048a:	46de      	mov	lr, fp
 800048c:	4657      	mov	r7, sl
 800048e:	4690      	mov	r8, r2
 8000490:	b5e0      	push	{r5, r6, r7, lr}
 8000492:	0017      	movs	r7, r2
 8000494:	031a      	lsls	r2, r3, #12
 8000496:	0b12      	lsrs	r2, r2, #12
 8000498:	0005      	movs	r5, r0
 800049a:	4684      	mov	ip, r0
 800049c:	4819      	ldr	r0, [pc, #100]	; (8000504 <__eqdf2+0x80>)
 800049e:	030e      	lsls	r6, r1, #12
 80004a0:	004c      	lsls	r4, r1, #1
 80004a2:	4691      	mov	r9, r2
 80004a4:	005a      	lsls	r2, r3, #1
 80004a6:	0fdb      	lsrs	r3, r3, #31
 80004a8:	469b      	mov	fp, r3
 80004aa:	0b36      	lsrs	r6, r6, #12
 80004ac:	0d64      	lsrs	r4, r4, #21
 80004ae:	0fc9      	lsrs	r1, r1, #31
 80004b0:	0d52      	lsrs	r2, r2, #21
 80004b2:	4284      	cmp	r4, r0
 80004b4:	d019      	beq.n	80004ea <__eqdf2+0x66>
 80004b6:	4282      	cmp	r2, r0
 80004b8:	d010      	beq.n	80004dc <__eqdf2+0x58>
 80004ba:	2001      	movs	r0, #1
 80004bc:	4294      	cmp	r4, r2
 80004be:	d10e      	bne.n	80004de <__eqdf2+0x5a>
 80004c0:	454e      	cmp	r6, r9
 80004c2:	d10c      	bne.n	80004de <__eqdf2+0x5a>
 80004c4:	2001      	movs	r0, #1
 80004c6:	45c4      	cmp	ip, r8
 80004c8:	d109      	bne.n	80004de <__eqdf2+0x5a>
 80004ca:	4559      	cmp	r1, fp
 80004cc:	d017      	beq.n	80004fe <__eqdf2+0x7a>
 80004ce:	2c00      	cmp	r4, #0
 80004d0:	d105      	bne.n	80004de <__eqdf2+0x5a>
 80004d2:	0030      	movs	r0, r6
 80004d4:	4328      	orrs	r0, r5
 80004d6:	1e43      	subs	r3, r0, #1
 80004d8:	4198      	sbcs	r0, r3
 80004da:	e000      	b.n	80004de <__eqdf2+0x5a>
 80004dc:	2001      	movs	r0, #1
 80004de:	bcf0      	pop	{r4, r5, r6, r7}
 80004e0:	46bb      	mov	fp, r7
 80004e2:	46b2      	mov	sl, r6
 80004e4:	46a9      	mov	r9, r5
 80004e6:	46a0      	mov	r8, r4
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ea:	0033      	movs	r3, r6
 80004ec:	2001      	movs	r0, #1
 80004ee:	432b      	orrs	r3, r5
 80004f0:	d1f5      	bne.n	80004de <__eqdf2+0x5a>
 80004f2:	42a2      	cmp	r2, r4
 80004f4:	d1f3      	bne.n	80004de <__eqdf2+0x5a>
 80004f6:	464b      	mov	r3, r9
 80004f8:	433b      	orrs	r3, r7
 80004fa:	d1f0      	bne.n	80004de <__eqdf2+0x5a>
 80004fc:	e7e2      	b.n	80004c4 <__eqdf2+0x40>
 80004fe:	2000      	movs	r0, #0
 8000500:	e7ed      	b.n	80004de <__eqdf2+0x5a>
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	000007ff 	.word	0x000007ff

08000508 <__gedf2>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	4647      	mov	r7, r8
 800050c:	46ce      	mov	lr, r9
 800050e:	0004      	movs	r4, r0
 8000510:	0018      	movs	r0, r3
 8000512:	0016      	movs	r6, r2
 8000514:	031b      	lsls	r3, r3, #12
 8000516:	0b1b      	lsrs	r3, r3, #12
 8000518:	4d2d      	ldr	r5, [pc, #180]	; (80005d0 <__gedf2+0xc8>)
 800051a:	004a      	lsls	r2, r1, #1
 800051c:	4699      	mov	r9, r3
 800051e:	b580      	push	{r7, lr}
 8000520:	0043      	lsls	r3, r0, #1
 8000522:	030f      	lsls	r7, r1, #12
 8000524:	46a4      	mov	ip, r4
 8000526:	46b0      	mov	r8, r6
 8000528:	0b3f      	lsrs	r7, r7, #12
 800052a:	0d52      	lsrs	r2, r2, #21
 800052c:	0fc9      	lsrs	r1, r1, #31
 800052e:	0d5b      	lsrs	r3, r3, #21
 8000530:	0fc0      	lsrs	r0, r0, #31
 8000532:	42aa      	cmp	r2, r5
 8000534:	d021      	beq.n	800057a <__gedf2+0x72>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d013      	beq.n	8000562 <__gedf2+0x5a>
 800053a:	2a00      	cmp	r2, #0
 800053c:	d122      	bne.n	8000584 <__gedf2+0x7c>
 800053e:	433c      	orrs	r4, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <__gedf2+0x42>
 8000544:	464d      	mov	r5, r9
 8000546:	432e      	orrs	r6, r5
 8000548:	d022      	beq.n	8000590 <__gedf2+0x88>
 800054a:	2c00      	cmp	r4, #0
 800054c:	d010      	beq.n	8000570 <__gedf2+0x68>
 800054e:	4281      	cmp	r1, r0
 8000550:	d022      	beq.n	8000598 <__gedf2+0x90>
 8000552:	2002      	movs	r0, #2
 8000554:	3901      	subs	r1, #1
 8000556:	4008      	ands	r0, r1
 8000558:	3801      	subs	r0, #1
 800055a:	bcc0      	pop	{r6, r7}
 800055c:	46b9      	mov	r9, r7
 800055e:	46b0      	mov	r8, r6
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	464d      	mov	r5, r9
 8000564:	432e      	orrs	r6, r5
 8000566:	d129      	bne.n	80005bc <__gedf2+0xb4>
 8000568:	2a00      	cmp	r2, #0
 800056a:	d1f0      	bne.n	800054e <__gedf2+0x46>
 800056c:	433c      	orrs	r4, r7
 800056e:	d1ee      	bne.n	800054e <__gedf2+0x46>
 8000570:	2800      	cmp	r0, #0
 8000572:	d1f2      	bne.n	800055a <__gedf2+0x52>
 8000574:	2001      	movs	r0, #1
 8000576:	4240      	negs	r0, r0
 8000578:	e7ef      	b.n	800055a <__gedf2+0x52>
 800057a:	003d      	movs	r5, r7
 800057c:	4325      	orrs	r5, r4
 800057e:	d11d      	bne.n	80005bc <__gedf2+0xb4>
 8000580:	4293      	cmp	r3, r2
 8000582:	d0ee      	beq.n	8000562 <__gedf2+0x5a>
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1e2      	bne.n	800054e <__gedf2+0x46>
 8000588:	464c      	mov	r4, r9
 800058a:	4326      	orrs	r6, r4
 800058c:	d1df      	bne.n	800054e <__gedf2+0x46>
 800058e:	e7e0      	b.n	8000552 <__gedf2+0x4a>
 8000590:	2000      	movs	r0, #0
 8000592:	2c00      	cmp	r4, #0
 8000594:	d0e1      	beq.n	800055a <__gedf2+0x52>
 8000596:	e7dc      	b.n	8000552 <__gedf2+0x4a>
 8000598:	429a      	cmp	r2, r3
 800059a:	dc0a      	bgt.n	80005b2 <__gedf2+0xaa>
 800059c:	dbe8      	blt.n	8000570 <__gedf2+0x68>
 800059e:	454f      	cmp	r7, r9
 80005a0:	d8d7      	bhi.n	8000552 <__gedf2+0x4a>
 80005a2:	d00e      	beq.n	80005c2 <__gedf2+0xba>
 80005a4:	2000      	movs	r0, #0
 80005a6:	454f      	cmp	r7, r9
 80005a8:	d2d7      	bcs.n	800055a <__gedf2+0x52>
 80005aa:	2900      	cmp	r1, #0
 80005ac:	d0e2      	beq.n	8000574 <__gedf2+0x6c>
 80005ae:	0008      	movs	r0, r1
 80005b0:	e7d3      	b.n	800055a <__gedf2+0x52>
 80005b2:	4243      	negs	r3, r0
 80005b4:	4158      	adcs	r0, r3
 80005b6:	0040      	lsls	r0, r0, #1
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7ce      	b.n	800055a <__gedf2+0x52>
 80005bc:	2002      	movs	r0, #2
 80005be:	4240      	negs	r0, r0
 80005c0:	e7cb      	b.n	800055a <__gedf2+0x52>
 80005c2:	45c4      	cmp	ip, r8
 80005c4:	d8c5      	bhi.n	8000552 <__gedf2+0x4a>
 80005c6:	2000      	movs	r0, #0
 80005c8:	45c4      	cmp	ip, r8
 80005ca:	d2c6      	bcs.n	800055a <__gedf2+0x52>
 80005cc:	e7ed      	b.n	80005aa <__gedf2+0xa2>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	000007ff 	.word	0x000007ff

080005d4 <__ledf2>:
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	4647      	mov	r7, r8
 80005d8:	46ce      	mov	lr, r9
 80005da:	0004      	movs	r4, r0
 80005dc:	0018      	movs	r0, r3
 80005de:	0016      	movs	r6, r2
 80005e0:	031b      	lsls	r3, r3, #12
 80005e2:	0b1b      	lsrs	r3, r3, #12
 80005e4:	4d2c      	ldr	r5, [pc, #176]	; (8000698 <__ledf2+0xc4>)
 80005e6:	004a      	lsls	r2, r1, #1
 80005e8:	4699      	mov	r9, r3
 80005ea:	b580      	push	{r7, lr}
 80005ec:	0043      	lsls	r3, r0, #1
 80005ee:	030f      	lsls	r7, r1, #12
 80005f0:	46a4      	mov	ip, r4
 80005f2:	46b0      	mov	r8, r6
 80005f4:	0b3f      	lsrs	r7, r7, #12
 80005f6:	0d52      	lsrs	r2, r2, #21
 80005f8:	0fc9      	lsrs	r1, r1, #31
 80005fa:	0d5b      	lsrs	r3, r3, #21
 80005fc:	0fc0      	lsrs	r0, r0, #31
 80005fe:	42aa      	cmp	r2, r5
 8000600:	d00d      	beq.n	800061e <__ledf2+0x4a>
 8000602:	42ab      	cmp	r3, r5
 8000604:	d010      	beq.n	8000628 <__ledf2+0x54>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d127      	bne.n	800065a <__ledf2+0x86>
 800060a:	433c      	orrs	r4, r7
 800060c:	2b00      	cmp	r3, #0
 800060e:	d111      	bne.n	8000634 <__ledf2+0x60>
 8000610:	464d      	mov	r5, r9
 8000612:	432e      	orrs	r6, r5
 8000614:	d10e      	bne.n	8000634 <__ledf2+0x60>
 8000616:	2000      	movs	r0, #0
 8000618:	2c00      	cmp	r4, #0
 800061a:	d015      	beq.n	8000648 <__ledf2+0x74>
 800061c:	e00e      	b.n	800063c <__ledf2+0x68>
 800061e:	003d      	movs	r5, r7
 8000620:	4325      	orrs	r5, r4
 8000622:	d110      	bne.n	8000646 <__ledf2+0x72>
 8000624:	4293      	cmp	r3, r2
 8000626:	d118      	bne.n	800065a <__ledf2+0x86>
 8000628:	464d      	mov	r5, r9
 800062a:	432e      	orrs	r6, r5
 800062c:	d10b      	bne.n	8000646 <__ledf2+0x72>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d102      	bne.n	8000638 <__ledf2+0x64>
 8000632:	433c      	orrs	r4, r7
 8000634:	2c00      	cmp	r4, #0
 8000636:	d00b      	beq.n	8000650 <__ledf2+0x7c>
 8000638:	4281      	cmp	r1, r0
 800063a:	d014      	beq.n	8000666 <__ledf2+0x92>
 800063c:	2002      	movs	r0, #2
 800063e:	3901      	subs	r1, #1
 8000640:	4008      	ands	r0, r1
 8000642:	3801      	subs	r0, #1
 8000644:	e000      	b.n	8000648 <__ledf2+0x74>
 8000646:	2002      	movs	r0, #2
 8000648:	bcc0      	pop	{r6, r7}
 800064a:	46b9      	mov	r9, r7
 800064c:	46b0      	mov	r8, r6
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	2800      	cmp	r0, #0
 8000652:	d1f9      	bne.n	8000648 <__ledf2+0x74>
 8000654:	2001      	movs	r0, #1
 8000656:	4240      	negs	r0, r0
 8000658:	e7f6      	b.n	8000648 <__ledf2+0x74>
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1ec      	bne.n	8000638 <__ledf2+0x64>
 800065e:	464c      	mov	r4, r9
 8000660:	4326      	orrs	r6, r4
 8000662:	d1e9      	bne.n	8000638 <__ledf2+0x64>
 8000664:	e7ea      	b.n	800063c <__ledf2+0x68>
 8000666:	429a      	cmp	r2, r3
 8000668:	dd04      	ble.n	8000674 <__ledf2+0xa0>
 800066a:	4243      	negs	r3, r0
 800066c:	4158      	adcs	r0, r3
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	3801      	subs	r0, #1
 8000672:	e7e9      	b.n	8000648 <__ledf2+0x74>
 8000674:	429a      	cmp	r2, r3
 8000676:	dbeb      	blt.n	8000650 <__ledf2+0x7c>
 8000678:	454f      	cmp	r7, r9
 800067a:	d8df      	bhi.n	800063c <__ledf2+0x68>
 800067c:	d006      	beq.n	800068c <__ledf2+0xb8>
 800067e:	2000      	movs	r0, #0
 8000680:	454f      	cmp	r7, r9
 8000682:	d2e1      	bcs.n	8000648 <__ledf2+0x74>
 8000684:	2900      	cmp	r1, #0
 8000686:	d0e5      	beq.n	8000654 <__ledf2+0x80>
 8000688:	0008      	movs	r0, r1
 800068a:	e7dd      	b.n	8000648 <__ledf2+0x74>
 800068c:	45c4      	cmp	ip, r8
 800068e:	d8d5      	bhi.n	800063c <__ledf2+0x68>
 8000690:	2000      	movs	r0, #0
 8000692:	45c4      	cmp	ip, r8
 8000694:	d2d8      	bcs.n	8000648 <__ledf2+0x74>
 8000696:	e7f5      	b.n	8000684 <__ledf2+0xb0>
 8000698:	000007ff 	.word	0x000007ff

0800069c <__aeabi_d2iz>:
 800069c:	000a      	movs	r2, r1
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	4c13      	ldr	r4, [pc, #76]	; (80006f0 <__aeabi_d2iz+0x54>)
 80006a2:	0053      	lsls	r3, r2, #1
 80006a4:	0309      	lsls	r1, r1, #12
 80006a6:	0005      	movs	r5, r0
 80006a8:	0b09      	lsrs	r1, r1, #12
 80006aa:	2000      	movs	r0, #0
 80006ac:	0d5b      	lsrs	r3, r3, #21
 80006ae:	0fd2      	lsrs	r2, r2, #31
 80006b0:	42a3      	cmp	r3, r4
 80006b2:	dd04      	ble.n	80006be <__aeabi_d2iz+0x22>
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <__aeabi_d2iz+0x58>)
 80006b6:	4283      	cmp	r3, r0
 80006b8:	dd02      	ble.n	80006c0 <__aeabi_d2iz+0x24>
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <__aeabi_d2iz+0x5c>)
 80006bc:	18d0      	adds	r0, r2, r3
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	2080      	movs	r0, #128	; 0x80
 80006c2:	0340      	lsls	r0, r0, #13
 80006c4:	4301      	orrs	r1, r0
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <__aeabi_d2iz+0x60>)
 80006c8:	1ac0      	subs	r0, r0, r3
 80006ca:	281f      	cmp	r0, #31
 80006cc:	dd08      	ble.n	80006e0 <__aeabi_d2iz+0x44>
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <__aeabi_d2iz+0x64>)
 80006d0:	1ac3      	subs	r3, r0, r3
 80006d2:	40d9      	lsrs	r1, r3
 80006d4:	000b      	movs	r3, r1
 80006d6:	4258      	negs	r0, r3
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d1f0      	bne.n	80006be <__aeabi_d2iz+0x22>
 80006dc:	0018      	movs	r0, r3
 80006de:	e7ee      	b.n	80006be <__aeabi_d2iz+0x22>
 80006e0:	4c08      	ldr	r4, [pc, #32]	; (8000704 <__aeabi_d2iz+0x68>)
 80006e2:	40c5      	lsrs	r5, r0
 80006e4:	46a4      	mov	ip, r4
 80006e6:	4463      	add	r3, ip
 80006e8:	4099      	lsls	r1, r3
 80006ea:	000b      	movs	r3, r1
 80006ec:	432b      	orrs	r3, r5
 80006ee:	e7f2      	b.n	80006d6 <__aeabi_d2iz+0x3a>
 80006f0:	000003fe 	.word	0x000003fe
 80006f4:	0000041d 	.word	0x0000041d
 80006f8:	7fffffff 	.word	0x7fffffff
 80006fc:	00000433 	.word	0x00000433
 8000700:	00000413 	.word	0x00000413
 8000704:	fffffbed 	.word	0xfffffbed

08000708 <__aeabi_i2d>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	2800      	cmp	r0, #0
 800070c:	d016      	beq.n	800073c <__aeabi_i2d+0x34>
 800070e:	17c3      	asrs	r3, r0, #31
 8000710:	18c5      	adds	r5, r0, r3
 8000712:	405d      	eors	r5, r3
 8000714:	0fc4      	lsrs	r4, r0, #31
 8000716:	0028      	movs	r0, r5
 8000718:	f000 f826 	bl	8000768 <__clzsi2>
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <__aeabi_i2d+0x5c>)
 800071e:	1a1b      	subs	r3, r3, r0
 8000720:	280a      	cmp	r0, #10
 8000722:	dc16      	bgt.n	8000752 <__aeabi_i2d+0x4a>
 8000724:	0002      	movs	r2, r0
 8000726:	002e      	movs	r6, r5
 8000728:	3215      	adds	r2, #21
 800072a:	4096      	lsls	r6, r2
 800072c:	220b      	movs	r2, #11
 800072e:	1a12      	subs	r2, r2, r0
 8000730:	40d5      	lsrs	r5, r2
 8000732:	055b      	lsls	r3, r3, #21
 8000734:	032d      	lsls	r5, r5, #12
 8000736:	0b2d      	lsrs	r5, r5, #12
 8000738:	0d5b      	lsrs	r3, r3, #21
 800073a:	e003      	b.n	8000744 <__aeabi_i2d+0x3c>
 800073c:	2400      	movs	r4, #0
 800073e:	2300      	movs	r3, #0
 8000740:	2500      	movs	r5, #0
 8000742:	2600      	movs	r6, #0
 8000744:	051b      	lsls	r3, r3, #20
 8000746:	432b      	orrs	r3, r5
 8000748:	07e4      	lsls	r4, r4, #31
 800074a:	4323      	orrs	r3, r4
 800074c:	0030      	movs	r0, r6
 800074e:	0019      	movs	r1, r3
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	380b      	subs	r0, #11
 8000754:	4085      	lsls	r5, r0
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	032d      	lsls	r5, r5, #12
 800075a:	2600      	movs	r6, #0
 800075c:	0b2d      	lsrs	r5, r5, #12
 800075e:	0d5b      	lsrs	r3, r3, #21
 8000760:	e7f0      	b.n	8000744 <__aeabi_i2d+0x3c>
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	0000041e 	.word	0x0000041e

08000768 <__clzsi2>:
 8000768:	211c      	movs	r1, #28
 800076a:	2301      	movs	r3, #1
 800076c:	041b      	lsls	r3, r3, #16
 800076e:	4298      	cmp	r0, r3
 8000770:	d301      	bcc.n	8000776 <__clzsi2+0xe>
 8000772:	0c00      	lsrs	r0, r0, #16
 8000774:	3910      	subs	r1, #16
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	4298      	cmp	r0, r3
 800077a:	d301      	bcc.n	8000780 <__clzsi2+0x18>
 800077c:	0a00      	lsrs	r0, r0, #8
 800077e:	3908      	subs	r1, #8
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	4298      	cmp	r0, r3
 8000784:	d301      	bcc.n	800078a <__clzsi2+0x22>
 8000786:	0900      	lsrs	r0, r0, #4
 8000788:	3904      	subs	r1, #4
 800078a:	a202      	add	r2, pc, #8	; (adr r2, 8000794 <__clzsi2+0x2c>)
 800078c:	5c10      	ldrb	r0, [r2, r0]
 800078e:	1840      	adds	r0, r0, r1
 8000790:	4770      	bx	lr
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	02020304 	.word	0x02020304
 8000798:	01010101 	.word	0x01010101
	...

080007a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	230c      	movs	r3, #12
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f00a fb2c 	bl	800ae10 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ba:	4a35      	ldr	r2, [pc, #212]	; (8000890 <MX_ADC1_Init+0xec>)
 80007bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_ADC1_Init+0xe8>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	05d2      	lsls	r2, r2, #23
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_ADC1_Init+0xe8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_ADC1_Init+0xe8>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	0392      	lsls	r2, r2, #14
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_ADC1_Init+0xe8>)
 80007dc:	2204      	movs	r2, #4
 80007de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_ADC1_Init+0xe8>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC1_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_ADC1_Init+0xe8>)
 8000806:	222c      	movs	r2, #44	; 0x2c
 8000808:	2100      	movs	r1, #0
 800080a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC1_Init+0xe8>)
 8000814:	2206      	movs	r2, #6
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ADC1_Init+0xe8>)
 800081a:	2206      	movs	r2, #6
 800081c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC1_Init+0xe8>)
 8000820:	223c      	movs	r2, #60	; 0x3c
 8000822:	2100      	movs	r1, #0
 8000824:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_ADC1_Init+0xe8>)
 800082e:	0018      	movs	r0, r3
 8000830:	f002 f960 	bl	8002af4 <HAL_ADC_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000838:	f000 ff38 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	1d3a      	adds	r2, r7, #4
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_ADC1_Init+0xe8>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f002 faf5 	bl	8002e44 <HAL_ADC_ConfigChannel>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800085e:	f000 ff25 	bl	80016ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_ADC1_Init+0xf0>)
 8000866:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2204      	movs	r2, #4
 800086c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	1d3a      	adds	r2, r7, #4
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_ADC1_Init+0xe8>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f002 fae5 	bl	8002e44 <HAL_ADC_ConfigChannel>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087e:	f000 ff15 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b004      	add	sp, #16
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000088 	.word	0x20000088
 8000890:	40012400 	.word	0x40012400
 8000894:	04000002 	.word	0x04000002

08000898 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08b      	sub	sp, #44	; 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	2414      	movs	r4, #20
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f00a fab0 	bl	800ae10 <memset>
  if(adcHandle->Instance==ADC1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	; (800096c <HAL_ADC_MspInit+0xd4>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d154      	bne.n	8000964 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0349      	lsls	r1, r1, #13
 80008c4:	430a      	orrs	r2, r1
 80008c6:	641a      	str	r2, [r3, #64]	; 0x40
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	035b      	lsls	r3, r3, #13
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Shunt1_Pin|ADC_Shunt2_Pin;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2203      	movs	r2, #3
 80008f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2203      	movs	r2, #3
 80008f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	193a      	adds	r2, r7, r4
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f002 ff73 	bl	80037f4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <HAL_ADC_MspInit+0xe0>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000916:	2205      	movs	r2, #5
 8000918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0052      	lsls	r2, r2, #1
 8000932:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fd00 	bl	8003350 <HAL_DMA_Init>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000954:	f000 feaa 	bl	80016ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800095c:	651a      	str	r2, [r3, #80]	; 0x50
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b00b      	add	sp, #44	; 0x2c
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	40012400 	.word	0x40012400
 8000970:	40021000 	.word	0x40021000
 8000974:	200000ec 	.word	0x200000ec
 8000978:	40020008 	.word	0x40020008

0800097c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_FREERTOS_Init+0x2c>)
 8000986:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000988:	c313      	stmia	r3!, {r0, r1, r4}
 800098a:	ca03      	ldmia	r2!, {r0, r1}
 800098c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2100      	movs	r1, #0
 8000992:	0018      	movs	r0, r3
 8000994:	f007 fd69 	bl	800846a <osThreadCreate>
 8000998:	0002      	movs	r2, r0
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <MX_FREERTOS_Init+0x30>)
 800099c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b007      	add	sp, #28
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	0800bce4 	.word	0x0800bce4
 80009ac:	20000148 	.word	0x20000148

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f007 fd7e 	bl	80084ba <osDelay>
 80009be:	e7fb      	b.n	80009b8 <StartDefaultTask+0x8>

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_DMA_Init+0x48>)
 80009c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_DMA_Init+0x48>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	639a      	str	r2, [r3, #56]	; 0x38
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_DMA_Init+0x48>)
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2103      	movs	r1, #3
 80009e2:	2009      	movs	r0, #9
 80009e4:	f002 fc8e 	bl	8003304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e8:	2009      	movs	r0, #9
 80009ea:	f002 fca0 	bl	800332e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2103      	movs	r1, #3
 80009f2:	200a      	movs	r0, #10
 80009f4:	f002 fc86 	bl	8003304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f002 fc98 	bl	800332e <HAL_NVIC_EnableIRQ>

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40021000 	.word	0x40021000

08000a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	2414      	movs	r4, #20
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	0018      	movs	r0, r3
 8000a18:	2314      	movs	r3, #20
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f00a f9f7 	bl	800ae10 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a26:	4b74      	ldr	r3, [pc, #464]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2e:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2204      	movs	r2, #4
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b6f      	ldr	r3, [pc, #444]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b6c      	ldr	r3, [pc, #432]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b68      	ldr	r3, [pc, #416]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b66      	ldr	r3, [pc, #408]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a70:	2102      	movs	r1, #2
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b60      	ldr	r3, [pc, #384]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b5d      	ldr	r3, [pc, #372]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a88:	2108      	movs	r1, #8
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b5a      	ldr	r3, [pc, #360]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2208      	movs	r2, #8
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	00d9      	lsls	r1, r3, #3
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f003 f809 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000aaa:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <MX_GPIO_Init+0x1f0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	213f      	movs	r1, #63	; 0x3f
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f003 f803 	bl	8003abc <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 8000ab6:	4b52      	ldr	r3, [pc, #328]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2118      	movs	r1, #24
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 fffd 	bl	8003abc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Bouton1_Pin|Bouton2_Pin;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2288      	movs	r2, #136	; 0x88
 8000acc:	0352      	lsls	r2, r2, #13
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x1f8>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f002 fe89 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton3_Pin;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2288      	movs	r2, #136	; 0x88
 8000aec:	0352      	lsls	r2, r2, #13
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2201      	movs	r2, #1
 8000af4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton3_GPIO_Port, &GPIO_InitStruct);
 8000af6:	193a      	adds	r2, r7, r4
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fe78 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Contact1_Pin|Contact2_Pin|Contact3_Pin|Contact4_Pin
 8000b04:	0021      	movs	r1, r4
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000b0a:	601a      	str	r2, [r3, #0]
                          |Bordure2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2288      	movs	r2, #136	; 0x88
 8000b10:	0352      	lsls	r2, r2, #13
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2202      	movs	r2, #2
 8000b18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	000c      	movs	r4, r1
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f002 fe66 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	00d2      	lsls	r2, r2, #3
 8000b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	000c      	movs	r4, r1
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b46:	193a      	adds	r2, r7, r4
 8000b48:	23a0      	movs	r3, #160	; 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 fe50 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	223f      	movs	r2, #63	; 0x3f
 8000b58:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_GPIO_Init+0x1f0>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f002 fe3e 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2218      	movs	r2, #24
 8000b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2201      	movs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f002 fe2c 	bl	80037f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bordure1_Pin;
 8000b9c:	0021      	movs	r1, r4
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2288      	movs	r2, #136	; 0x88
 8000baa:	0352      	lsls	r2, r2, #13
 8000bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bordure1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000bb8:	0019      	movs	r1, r3
 8000bba:	0010      	movs	r0, r2
 8000bbc:	f002 fe1a 	bl	80037f4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f002 fb9d 	bl	8003304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f002 fbaf 	bl	800332e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f002 fb95 	bl	8003304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000bda:	2006      	movs	r0, #6
 8000bdc:	f002 fba7 	bl	800332e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2103      	movs	r1, #3
 8000be4:	2007      	movs	r0, #7
 8000be6:	f002 fb8d 	bl	8003304 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f002 fb9f 	bl	800332e <HAL_NVIC_EnableIRQ>

}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b00b      	add	sp, #44	; 0x2c
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000c00 	.word	0x50000c00
 8000c00:	50000400 	.word	0x50000400
 8000c04:	50000800 	.word	0x50000800
 8000c08:	0000e220 	.word	0x0000e220

08000c0c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
 8000c18:	1d39      	adds	r1, r7, #4
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <__io_putchar+0x20>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f005 fa1f 	bl	8006060 <HAL_UART_Transmit>
	return chr;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	200035e0 	.word	0x200035e0

08000c30 <uart_transmit>:
int uart_transmit(uint8_t *p_data, uint16_t size){
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	000a      	movs	r2, r1
 8000c3a:	1cbb      	adds	r3, r7, #2
 8000c3c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, p_data, size, HAL_MAX_DELAY);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425c      	negs	r4, r3
 8000c42:	1cbb      	adds	r3, r7, #2
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <uart_transmit+0x2c>)
 8000c4a:	0023      	movs	r3, r4
 8000c4c:	f005 fa08 	bl	8006060 <HAL_UART_Transmit>
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b003      	add	sp, #12
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	20003674 	.word	0x20003674

08000c60 <uart_it_transmit>:
int uart_it_transmit(uint8_t *p_data, uint16_t size){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	000a      	movs	r2, r1
 8000c6a:	1cbb      	adds	r3, r7, #2
 8000c6c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart4, p_data, size);
 8000c6e:	1cbb      	adds	r3, r7, #2
 8000c70:	881a      	ldrh	r2, [r3, #0]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <uart_it_transmit+0x28>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f005 fb70 	bl	800635c <HAL_UART_Transmit_IT>
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	20003674 	.word	0x20003674

08000c8c <uart_dma_transmit>:
int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	000a      	movs	r2, r1
 8000c96:	1cbb      	adds	r3, r7, #2
 8000c98:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart4, p_data, size);
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	881a      	ldrh	r2, [r3, #0]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <uart_dma_transmit+0x28>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f005 fc5a 	bl	800655c <HAL_UART_Transmit_DMA>
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	20003674 	.word	0x20003674

08000cb8 <uart_poll_receive>:
int uart_poll_receive(uint8_t *p_data, uint16_t size){
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	1cbb      	adds	r3, r7, #2
 8000cc4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive(&huart4, p_data, size, HAL_MAX_DELAY);
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	425c      	negs	r4, r3
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <uart_poll_receive+0x2c>)
 8000cd2:	0023      	movs	r3, r4
 8000cd4:	f005 fa60 	bl	8006198 <HAL_UART_Receive>
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b003      	add	sp, #12
 8000ce0:	bd90      	pop	{r4, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	20003674 	.word	0x20003674

08000ce8 <uart_it_receive>:
int uart_it_receive(uint8_t *p_data, uint16_t size){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	1cbb      	adds	r3, r7, #2
 8000cf4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart4, p_data, size);
 8000cf6:	1cbb      	adds	r3, r7, #2
 8000cf8:	881a      	ldrh	r2, [r3, #0]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <uart_it_receive+0x28>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f005 fbd4 	bl	80064ac <HAL_UART_Receive_IT>
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	20003674 	.word	0x20003674

08000d14 <uart_dma_receive>:
int uart_dma_receive(uint8_t *p_data, uint16_t size){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	1cbb      	adds	r3, r7, #2
 8000d20:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, p_data, size);
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <uart_dma_receive+0x28>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f005 fca8 	bl	8006680 <HAL_UART_Receive_DMA>
	return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	20003674 	.word	0x20003674

08000d40 <TaskLIDAR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void TaskLIDAR (void * pvParameters){
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	for(;;){
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8000d48:	4bd7      	ldr	r3, [pc, #860]	; (80010a8 <TaskLIDAR+0x368>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4252      	negs	r2, r2
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f007 fd77 	bl	8008846 <xQueueSemaphoreTake>
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e188      	b.n	8001070 <TaskLIDAR+0x330>
			if(i==DATA_BUFF_SIZE/2){
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	23fa      	movs	r3, #250	; 0xfa
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d107      	bne.n	8000d78 <TaskLIDAR+0x38>
				xSemaphoreTake(SemClpCallBack, portMAX_DELAY);
 8000d68:	4bd0      	ldr	r3, [pc, #832]	; (80010ac <TaskLIDAR+0x36c>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4252      	negs	r2, r2
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f007 fd67 	bl	8008846 <xQueueSemaphoreTake>
			}
			//Réponce à la commande Scan
			if(i==0){
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d14f      	bne.n	8000e1e <TaskLIDAR+0xde>
				if((h_LIDAR.data_buff[i]==0xA5) && (h_LIDAR.data_buff[i+1]==0x5A) && (h_LIDAR.data_buff[i+2]==0x05) && (h_LIDAR.data_buff[i+3]==0x00) && (h_LIDAR.data_buff[i+4]==0x00) && (h_LIDAR.data_buff[i+5]==0x40) && (h_LIDAR.data_buff[i+6]==0x81)){
 8000d7e:	4acc      	ldr	r2, [pc, #816]	; (80010b0 <TaskLIDAR+0x370>)
 8000d80:	2171      	movs	r1, #113	; 0x71
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	18d3      	adds	r3, r2, r3
 8000d86:	185b      	adds	r3, r3, r1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2ba5      	cmp	r3, #165	; 0xa5
 8000d8c:	d147      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4ac7      	ldr	r2, [pc, #796]	; (80010b0 <TaskLIDAR+0x370>)
 8000d94:	2171      	movs	r1, #113	; 0x71
 8000d96:	18d3      	adds	r3, r2, r3
 8000d98:	185b      	adds	r3, r3, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b5a      	cmp	r3, #90	; 0x5a
 8000d9e:	d13e      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3302      	adds	r3, #2
 8000da4:	4ac2      	ldr	r2, [pc, #776]	; (80010b0 <TaskLIDAR+0x370>)
 8000da6:	2171      	movs	r1, #113	; 0x71
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	185b      	adds	r3, r3, r1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	d135      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3303      	adds	r3, #3
 8000db6:	4abe      	ldr	r2, [pc, #760]	; (80010b0 <TaskLIDAR+0x370>)
 8000db8:	2171      	movs	r1, #113	; 0x71
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	185b      	adds	r3, r3, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d12c      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	4ab9      	ldr	r2, [pc, #740]	; (80010b0 <TaskLIDAR+0x370>)
 8000dca:	2171      	movs	r1, #113	; 0x71
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	185b      	adds	r3, r3, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d123      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3305      	adds	r3, #5
 8000dda:	4ab5      	ldr	r2, [pc, #724]	; (80010b0 <TaskLIDAR+0x370>)
 8000ddc:	2171      	movs	r1, #113	; 0x71
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	185b      	adds	r3, r3, r1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b40      	cmp	r3, #64	; 0x40
 8000de6:	d11a      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3306      	adds	r3, #6
 8000dec:	4ab0      	ldr	r2, [pc, #704]	; (80010b0 <TaskLIDAR+0x370>)
 8000dee:	2171      	movs	r1, #113	; 0x71
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	185b      	adds	r3, r3, r1
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b81      	cmp	r3, #129	; 0x81
 8000df8:	d111      	bne.n	8000e1e <TaskLIDAR+0xde>
					printf("Scan Command Reply\r\n");
 8000dfa:	4bae      	ldr	r3, [pc, #696]	; (80010b4 <TaskLIDAR+0x374>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f009 fed7 	bl	800abb0 <puts>
					h_LIDAR.processing.idx=0;
 8000e02:	4bab      	ldr	r3, [pc, #684]	; (80010b0 <TaskLIDAR+0x370>)
 8000e04:	4aac      	ldr	r2, [pc, #688]	; (80010b8 <TaskLIDAR+0x378>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	5499      	strb	r1, [r3, r2]
					i=6;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	60fb      	str	r3, [r7, #12]
					frame_start=7;
 8000e0e:	4bab      	ldr	r3, [pc, #684]	; (80010bc <TaskLIDAR+0x37c>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
					frame_end=frame_start+4;
 8000e14:	4ba9      	ldr	r3, [pc, #676]	; (80010bc <TaskLIDAR+0x37c>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1d1a      	adds	r2, r3, #4
 8000e1a:	4ba9      	ldr	r3, [pc, #676]	; (80010c0 <TaskLIDAR+0x380>)
 8000e1c:	601a      	str	r2, [r3, #0]
				}
			}

			if(i==frame_start){
 8000e1e:	4ba7      	ldr	r3, [pc, #668]	; (80010bc <TaskLIDAR+0x37c>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d10a      	bne.n	8000e3e <TaskLIDAR+0xfe>
				h_LIDAR.processing.PH=h_LIDAR.data_buff[i];
 8000e28:	4aa1      	ldr	r2, [pc, #644]	; (80010b0 <TaskLIDAR+0x370>)
 8000e2a:	2171      	movs	r1, #113	; 0x71
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	185b      	adds	r3, r3, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b299      	uxth	r1, r3
 8000e36:	4b9e      	ldr	r3, [pc, #632]	; (80010b0 <TaskLIDAR+0x370>)
 8000e38:	4aa2      	ldr	r2, [pc, #648]	; (80010c4 <TaskLIDAR+0x384>)
 8000e3a:	5299      	strh	r1, [r3, r2]
 8000e3c:	e115      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+1){
 8000e3e:	4b9f      	ldr	r3, [pc, #636]	; (80010bc <TaskLIDAR+0x37c>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d112      	bne.n	8000e70 <TaskLIDAR+0x130>
				h_LIDAR.processing.PH=h_LIDAR.processing.PH|(h_LIDAR.data_buff[i]<<8);
 8000e4a:	4b99      	ldr	r3, [pc, #612]	; (80010b0 <TaskLIDAR+0x370>)
 8000e4c:	4a9d      	ldr	r2, [pc, #628]	; (80010c4 <TaskLIDAR+0x384>)
 8000e4e:	5a9b      	ldrh	r3, [r3, r2]
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	4997      	ldr	r1, [pc, #604]	; (80010b0 <TaskLIDAR+0x370>)
 8000e54:	2071      	movs	r0, #113	; 0x71
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	18cb      	adds	r3, r1, r3
 8000e5a:	181b      	adds	r3, r3, r0
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b299      	uxth	r1, r3
 8000e68:	4b91      	ldr	r3, [pc, #580]	; (80010b0 <TaskLIDAR+0x370>)
 8000e6a:	4a96      	ldr	r2, [pc, #600]	; (80010c4 <TaskLIDAR+0x384>)
 8000e6c:	5299      	strh	r1, [r3, r2]
 8000e6e:	e0fc      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+2){
 8000e70:	4b92      	ldr	r3, [pc, #584]	; (80010bc <TaskLIDAR+0x37c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d109      	bne.n	8000e90 <TaskLIDAR+0x150>
				h_LIDAR.processing.CT=h_LIDAR.data_buff[i];
 8000e7c:	4a8c      	ldr	r2, [pc, #560]	; (80010b0 <TaskLIDAR+0x370>)
 8000e7e:	2171      	movs	r1, #113	; 0x71
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	185b      	adds	r3, r3, r1
 8000e86:	7819      	ldrb	r1, [r3, #0]
 8000e88:	4b89      	ldr	r3, [pc, #548]	; (80010b0 <TaskLIDAR+0x370>)
 8000e8a:	4a8f      	ldr	r2, [pc, #572]	; (80010c8 <TaskLIDAR+0x388>)
 8000e8c:	5499      	strb	r1, [r3, r2]
 8000e8e:	e0ec      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+3){
 8000e90:	4b8a      	ldr	r3, [pc, #552]	; (80010bc <TaskLIDAR+0x37c>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3303      	adds	r3, #3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d117      	bne.n	8000ecc <TaskLIDAR+0x18c>
				frame_end=frame_start+9+2*h_LIDAR.data_buff[i];
 8000e9c:	4b87      	ldr	r3, [pc, #540]	; (80010bc <TaskLIDAR+0x37c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3309      	adds	r3, #9
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4982      	ldr	r1, [pc, #520]	; (80010b0 <TaskLIDAR+0x370>)
 8000ea6:	2071      	movs	r0, #113	; 0x71
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	18cb      	adds	r3, r1, r3
 8000eac:	181b      	adds	r3, r3, r0
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	18d2      	adds	r2, r2, r3
 8000eb4:	4b82      	ldr	r3, [pc, #520]	; (80010c0 <TaskLIDAR+0x380>)
 8000eb6:	601a      	str	r2, [r3, #0]
				h_LIDAR.processing.LSN=h_LIDAR.data_buff[i];
 8000eb8:	4a7d      	ldr	r2, [pc, #500]	; (80010b0 <TaskLIDAR+0x370>)
 8000eba:	2171      	movs	r1, #113	; 0x71
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	185b      	adds	r3, r3, r1
 8000ec2:	7819      	ldrb	r1, [r3, #0]
 8000ec4:	4b7a      	ldr	r3, [pc, #488]	; (80010b0 <TaskLIDAR+0x370>)
 8000ec6:	4a81      	ldr	r2, [pc, #516]	; (80010cc <TaskLIDAR+0x38c>)
 8000ec8:	5499      	strb	r1, [r3, r2]
 8000eca:	e0ce      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+4){
 8000ecc:	4b7b      	ldr	r3, [pc, #492]	; (80010bc <TaskLIDAR+0x37c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10a      	bne.n	8000eee <TaskLIDAR+0x1ae>
				h_LIDAR.processing.FSA=h_LIDAR.data_buff[i];
 8000ed8:	4a75      	ldr	r2, [pc, #468]	; (80010b0 <TaskLIDAR+0x370>)
 8000eda:	2171      	movs	r1, #113	; 0x71
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	185b      	adds	r3, r3, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	4b72      	ldr	r3, [pc, #456]	; (80010b0 <TaskLIDAR+0x370>)
 8000ee8:	4a79      	ldr	r2, [pc, #484]	; (80010d0 <TaskLIDAR+0x390>)
 8000eea:	5299      	strh	r1, [r3, r2]
 8000eec:	e0bd      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+5){
 8000eee:	4b73      	ldr	r3, [pc, #460]	; (80010bc <TaskLIDAR+0x37c>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3305      	adds	r3, #5
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d112      	bne.n	8000f20 <TaskLIDAR+0x1e0>
				h_LIDAR.processing.FSA=h_LIDAR.processing.FSA|(h_LIDAR.data_buff[i]<<8);
 8000efa:	4b6d      	ldr	r3, [pc, #436]	; (80010b0 <TaskLIDAR+0x370>)
 8000efc:	4a74      	ldr	r2, [pc, #464]	; (80010d0 <TaskLIDAR+0x390>)
 8000efe:	5a9b      	ldrh	r3, [r3, r2]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	496b      	ldr	r1, [pc, #428]	; (80010b0 <TaskLIDAR+0x370>)
 8000f04:	2071      	movs	r0, #113	; 0x71
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	18cb      	adds	r3, r1, r3
 8000f0a:	181b      	adds	r3, r3, r0
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	b299      	uxth	r1, r3
 8000f18:	4b65      	ldr	r3, [pc, #404]	; (80010b0 <TaskLIDAR+0x370>)
 8000f1a:	4a6d      	ldr	r2, [pc, #436]	; (80010d0 <TaskLIDAR+0x390>)
 8000f1c:	5299      	strh	r1, [r3, r2]
 8000f1e:	e0a4      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+6){
 8000f20:	4b66      	ldr	r3, [pc, #408]	; (80010bc <TaskLIDAR+0x37c>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3306      	adds	r3, #6
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d10a      	bne.n	8000f42 <TaskLIDAR+0x202>
				h_LIDAR.processing.LSA=h_LIDAR.data_buff[i];
 8000f2c:	4a60      	ldr	r2, [pc, #384]	; (80010b0 <TaskLIDAR+0x370>)
 8000f2e:	2171      	movs	r1, #113	; 0x71
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	18d3      	adds	r3, r2, r3
 8000f34:	185b      	adds	r3, r3, r1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b299      	uxth	r1, r3
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <TaskLIDAR+0x370>)
 8000f3c:	4a65      	ldr	r2, [pc, #404]	; (80010d4 <TaskLIDAR+0x394>)
 8000f3e:	5299      	strh	r1, [r3, r2]
 8000f40:	e093      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+7){
 8000f42:	4b5e      	ldr	r3, [pc, #376]	; (80010bc <TaskLIDAR+0x37c>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3307      	adds	r3, #7
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d112      	bne.n	8000f74 <TaskLIDAR+0x234>
				h_LIDAR.processing.LSA=h_LIDAR.processing.LSA|(h_LIDAR.data_buff[i]<<8);
 8000f4e:	4b58      	ldr	r3, [pc, #352]	; (80010b0 <TaskLIDAR+0x370>)
 8000f50:	4a60      	ldr	r2, [pc, #384]	; (80010d4 <TaskLIDAR+0x394>)
 8000f52:	5a9b      	ldrh	r3, [r3, r2]
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4956      	ldr	r1, [pc, #344]	; (80010b0 <TaskLIDAR+0x370>)
 8000f58:	2071      	movs	r0, #113	; 0x71
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	18cb      	adds	r3, r1, r3
 8000f5e:	181b      	adds	r3, r3, r0
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	4b50      	ldr	r3, [pc, #320]	; (80010b0 <TaskLIDAR+0x370>)
 8000f6e:	4a59      	ldr	r2, [pc, #356]	; (80010d4 <TaskLIDAR+0x394>)
 8000f70:	5299      	strh	r1, [r3, r2]
 8000f72:	e07a      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+8){
 8000f74:	4b51      	ldr	r3, [pc, #324]	; (80010bc <TaskLIDAR+0x37c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3308      	adds	r3, #8
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d10a      	bne.n	8000f96 <TaskLIDAR+0x256>
				h_LIDAR.processing.CS=h_LIDAR.data_buff[i];
 8000f80:	4a4b      	ldr	r2, [pc, #300]	; (80010b0 <TaskLIDAR+0x370>)
 8000f82:	2171      	movs	r1, #113	; 0x71
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	185b      	adds	r3, r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	4b48      	ldr	r3, [pc, #288]	; (80010b0 <TaskLIDAR+0x370>)
 8000f90:	4a51      	ldr	r2, [pc, #324]	; (80010d8 <TaskLIDAR+0x398>)
 8000f92:	5299      	strh	r1, [r3, r2]
 8000f94:	e069      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+9){
 8000f96:	4b49      	ldr	r3, [pc, #292]	; (80010bc <TaskLIDAR+0x37c>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3309      	adds	r3, #9
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d112      	bne.n	8000fc8 <TaskLIDAR+0x288>
				h_LIDAR.processing.CS=h_LIDAR.processing.CS|(h_LIDAR.data_buff[i]<<8);
 8000fa2:	4b43      	ldr	r3, [pc, #268]	; (80010b0 <TaskLIDAR+0x370>)
 8000fa4:	4a4c      	ldr	r2, [pc, #304]	; (80010d8 <TaskLIDAR+0x398>)
 8000fa6:	5a9b      	ldrh	r3, [r3, r2]
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	4941      	ldr	r1, [pc, #260]	; (80010b0 <TaskLIDAR+0x370>)
 8000fac:	2071      	movs	r0, #113	; 0x71
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	18cb      	adds	r3, r1, r3
 8000fb2:	181b      	adds	r3, r3, r0
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	4b3b      	ldr	r3, [pc, #236]	; (80010b0 <TaskLIDAR+0x370>)
 8000fc2:	4a45      	ldr	r2, [pc, #276]	; (80010d8 <TaskLIDAR+0x398>)
 8000fc4:	5299      	strh	r1, [r3, r2]
 8000fc6:	e050      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_end){
 8000fc8:	4b3d      	ldr	r3, [pc, #244]	; (80010c0 <TaskLIDAR+0x380>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d136      	bne.n	8001040 <TaskLIDAR+0x300>
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8000fd2:	4b37      	ldr	r3, [pc, #220]	; (80010b0 <TaskLIDAR+0x370>)
 8000fd4:	4a38      	ldr	r2, [pc, #224]	; (80010b8 <TaskLIDAR+0x378>)
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	b2d0      	uxtb	r0, r2
 8000fdc:	4a34      	ldr	r2, [pc, #208]	; (80010b0 <TaskLIDAR+0x370>)
 8000fde:	4936      	ldr	r1, [pc, #216]	; (80010b8 <TaskLIDAR+0x378>)
 8000fe0:	5450      	strb	r0, [r2, r1]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	4a32      	ldr	r2, [pc, #200]	; (80010b0 <TaskLIDAR+0x370>)
 8000fe6:	2171      	movs	r1, #113	; 0x71
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	18d3      	adds	r3, r2, r3
 8000fec:	185b      	adds	r3, r3, r1
 8000fee:	7819      	ldrb	r1, [r3, #0]
 8000ff0:	4b2f      	ldr	r3, [pc, #188]	; (80010b0 <TaskLIDAR+0x370>)
 8000ff2:	4a3a      	ldr	r2, [pc, #232]	; (80010dc <TaskLIDAR+0x39c>)
 8000ff4:	181b      	adds	r3, r3, r0
 8000ff6:	189b      	adds	r3, r3, r2
 8000ff8:	1c0a      	adds	r2, r1, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
				if(frame_end-frame_start>11){
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <TaskLIDAR+0x380>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b2e      	ldr	r3, [pc, #184]	; (80010bc <TaskLIDAR+0x37c>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b0b      	cmp	r3, #11
 8001008:	dd0b      	ble.n	8001022 <TaskLIDAR+0x2e2>
					LIDAR_process_frame(&h_LIDAR); //On récupère les différents points
 800100a:	4b29      	ldr	r3, [pc, #164]	; (80010b0 <TaskLIDAR+0x370>)
 800100c:	0018      	movs	r0, r3
 800100e:	f008 ffdf 	bl	8009fd0 <LIDAR_process_frame>
					medianFilter(&h_LIDAR); //On filtre ces points
 8001012:	4b27      	ldr	r3, [pc, #156]	; (80010b0 <TaskLIDAR+0x370>)
 8001014:	0018      	movs	r0, r3
 8001016:	f009 f95d 	bl	800a2d4 <medianFilter>
					find_clusters(&h_LIDAR); //On regroupe ces points
 800101a:	4b25      	ldr	r3, [pc, #148]	; (80010b0 <TaskLIDAR+0x370>)
 800101c:	0018      	movs	r0, r3
 800101e:	f009 f899 	bl	800a154 <find_clusters>
				}
				h_LIDAR.processing.idx=0;
 8001022:	4b23      	ldr	r3, [pc, #140]	; (80010b0 <TaskLIDAR+0x370>)
 8001024:	4a24      	ldr	r2, [pc, #144]	; (80010b8 <TaskLIDAR+0x378>)
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]
				frame_start=frame_end+1;
 800102a:	4b25      	ldr	r3, [pc, #148]	; (80010c0 <TaskLIDAR+0x380>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4b22      	ldr	r3, [pc, #136]	; (80010bc <TaskLIDAR+0x37c>)
 8001032:	601a      	str	r2, [r3, #0]
				frame_end=frame_start+5;
 8001034:	4b21      	ldr	r3, [pc, #132]	; (80010bc <TaskLIDAR+0x37c>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1d5a      	adds	r2, r3, #5
 800103a:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <TaskLIDAR+0x380>)
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e014      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else{
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8001040:	4b1b      	ldr	r3, [pc, #108]	; (80010b0 <TaskLIDAR+0x370>)
 8001042:	4a1d      	ldr	r2, [pc, #116]	; (80010b8 <TaskLIDAR+0x378>)
 8001044:	5c9b      	ldrb	r3, [r3, r2]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	b2d0      	uxtb	r0, r2
 800104a:	4a19      	ldr	r2, [pc, #100]	; (80010b0 <TaskLIDAR+0x370>)
 800104c:	491a      	ldr	r1, [pc, #104]	; (80010b8 <TaskLIDAR+0x378>)
 800104e:	5450      	strb	r0, [r2, r1]
 8001050:	0018      	movs	r0, r3
 8001052:	4a17      	ldr	r2, [pc, #92]	; (80010b0 <TaskLIDAR+0x370>)
 8001054:	2171      	movs	r1, #113	; 0x71
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	185b      	adds	r3, r3, r1
 800105c:	7819      	ldrb	r1, [r3, #0]
 800105e:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <TaskLIDAR+0x370>)
 8001060:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <TaskLIDAR+0x39c>)
 8001062:	181b      	adds	r3, r3, r0
 8001064:	189b      	adds	r3, r3, r2
 8001066:	1c0a      	adds	r2, r1, #0
 8001068:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	23fa      	movs	r3, #250	; 0xfa
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	429a      	cmp	r2, r3
 8001078:	da00      	bge.n	800107c <TaskLIDAR+0x33c>
 800107a:	e670      	b.n	8000d5e <TaskLIDAR+0x1e>
			}
		}
		frame_start=frame_start-DATA_BUFF_SIZE;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <TaskLIDAR+0x37c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4917      	ldr	r1, [pc, #92]	; (80010e0 <TaskLIDAR+0x3a0>)
 8001082:	185a      	adds	r2, r3, r1
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <TaskLIDAR+0x37c>)
 8001086:	601a      	str	r2, [r3, #0]
		frame_end=frame_end-DATA_BUFF_SIZE;
 8001088:	4b0d      	ldr	r3, [pc, #52]	; (80010c0 <TaskLIDAR+0x380>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	185a      	adds	r2, r3, r1
 800108e:	4b0c      	ldr	r3, [pc, #48]	; (80010c0 <TaskLIDAR+0x380>)
 8001090:	601a      	str	r2, [r3, #0]

		printf("#\r\n");
 8001092:	4b14      	ldr	r3, [pc, #80]	; (80010e4 <TaskLIDAR+0x3a4>)
 8001094:	0018      	movs	r0, r3
 8001096:	f009 fd8b 	bl	800abb0 <puts>
		distance_min=1000;
 800109a:	4b13      	ldr	r3, [pc, #76]	; (80010e8 <TaskLIDAR+0x3a8>)
 800109c:	22fa      	movs	r2, #250	; 0xfa
 800109e:	0092      	lsls	r2, r2, #2
 80010a0:	601a      	str	r2, [r3, #0]
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 80010a2:	2300      	movs	r3, #0
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	e04d      	b.n	8001144 <TaskLIDAR+0x404>
 80010a8:	20003300 	.word	0x20003300
 80010ac:	20003304 	.word	0x20003304
 80010b0:	2000014c 	.word	0x2000014c
 80010b4:	0800bcf8 	.word	0x0800bcf8
 80010b8:	0000101e 	.word	0x0000101e
 80010bc:	20003310 	.word	0x20003310
 80010c0:	20003314 	.word	0x20003314
 80010c4:	00001014 	.word	0x00001014
 80010c8:	00001016 	.word	0x00001016
 80010cc:	00001017 	.word	0x00001017
 80010d0:	00001018 	.word	0x00001018
 80010d4:	0000101a 	.word	0x0000101a
 80010d8:	0000101c 	.word	0x0000101c
 80010dc:	00001fbf 	.word	0x00001fbf
 80010e0:	fffff060 	.word	0xfffff060
 80010e4:	0800bd0c 	.word	0x0800bd0c
 80010e8:	20003308 	.word	0x20003308

			if(h_LIDAR.processing.clusters[i].distance_moyenne<distance_min && h_LIDAR.processing.clusters[i].distance_moyenne !=0){
 80010ec:	4960      	ldr	r1, [pc, #384]	; (8001270 <TaskLIDAR+0x530>)
 80010ee:	68ba      	ldr	r2, [r7, #8]
 80010f0:	4860      	ldr	r0, [pc, #384]	; (8001274 <TaskLIDAR+0x534>)
 80010f2:	0013      	movs	r3, r2
 80010f4:	005b      	lsls	r3, r3, #1
 80010f6:	189b      	adds	r3, r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	18cb      	adds	r3, r1, r3
 80010fc:	181b      	adds	r3, r3, r0
 80010fe:	681a      	ldr	r2, [r3, #0]
 8001100:	4b5d      	ldr	r3, [pc, #372]	; (8001278 <TaskLIDAR+0x538>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	429a      	cmp	r2, r3
 8001106:	da1a      	bge.n	800113e <TaskLIDAR+0x3fe>
 8001108:	4959      	ldr	r1, [pc, #356]	; (8001270 <TaskLIDAR+0x530>)
 800110a:	68ba      	ldr	r2, [r7, #8]
 800110c:	4859      	ldr	r0, [pc, #356]	; (8001274 <TaskLIDAR+0x534>)
 800110e:	0013      	movs	r3, r2
 8001110:	005b      	lsls	r3, r3, #1
 8001112:	189b      	adds	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	18cb      	adds	r3, r1, r3
 8001118:	181b      	adds	r3, r3, r0
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d00e      	beq.n	800113e <TaskLIDAR+0x3fe>
				distance_min = h_LIDAR.processing.clusters[i].distance_moyenne;
 8001120:	4953      	ldr	r1, [pc, #332]	; (8001270 <TaskLIDAR+0x530>)
 8001122:	68ba      	ldr	r2, [r7, #8]
 8001124:	4853      	ldr	r0, [pc, #332]	; (8001274 <TaskLIDAR+0x534>)
 8001126:	0013      	movs	r3, r2
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	189b      	adds	r3, r3, r2
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	18cb      	adds	r3, r1, r3
 8001130:	181b      	adds	r3, r3, r0
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b50      	ldr	r3, [pc, #320]	; (8001278 <TaskLIDAR+0x538>)
 8001136:	601a      	str	r2, [r3, #0]
				idx_min=i;
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <TaskLIDAR+0x53c>)
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	601a      	str	r2, [r3, #0]
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	3301      	adds	r3, #1
 8001142:	60bb      	str	r3, [r7, #8]
 8001144:	4b4a      	ldr	r3, [pc, #296]	; (8001270 <TaskLIDAR+0x530>)
 8001146:	4a4e      	ldr	r2, [pc, #312]	; (8001280 <TaskLIDAR+0x540>)
 8001148:	589b      	ldr	r3, [r3, r2]
 800114a:	68ba      	ldr	r2, [r7, #8]
 800114c:	429a      	cmp	r2, r3
 800114e:	dbcd      	blt.n	80010ec <TaskLIDAR+0x3ac>
			}
		}
		printf("%d,%d\r\n",h_LIDAR.processing.clusters[idx_min].angle_moyen,h_LIDAR.processing.clusters[idx_min].distance_moyenne);
 8001150:	4b4a      	ldr	r3, [pc, #296]	; (800127c <TaskLIDAR+0x53c>)
 8001152:	681a      	ldr	r2, [r3, #0]
 8001154:	4946      	ldr	r1, [pc, #280]	; (8001270 <TaskLIDAR+0x530>)
 8001156:	484b      	ldr	r0, [pc, #300]	; (8001284 <TaskLIDAR+0x544>)
 8001158:	0013      	movs	r3, r2
 800115a:	005b      	lsls	r3, r3, #1
 800115c:	189b      	adds	r3, r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	18cb      	adds	r3, r1, r3
 8001162:	181b      	adds	r3, r3, r0
 8001164:	6818      	ldr	r0, [r3, #0]
 8001166:	4b45      	ldr	r3, [pc, #276]	; (800127c <TaskLIDAR+0x53c>)
 8001168:	681a      	ldr	r2, [r3, #0]
 800116a:	4941      	ldr	r1, [pc, #260]	; (8001270 <TaskLIDAR+0x530>)
 800116c:	4c41      	ldr	r4, [pc, #260]	; (8001274 <TaskLIDAR+0x534>)
 800116e:	0013      	movs	r3, r2
 8001170:	005b      	lsls	r3, r3, #1
 8001172:	189b      	adds	r3, r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	18cb      	adds	r3, r1, r3
 8001178:	191b      	adds	r3, r3, r4
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b42      	ldr	r3, [pc, #264]	; (8001288 <TaskLIDAR+0x548>)
 800117e:	0001      	movs	r1, r0
 8001180:	0018      	movs	r0, r3
 8001182:	f009 fcaf 	bl	800aae4 <iprintf>


		vitesse = h_LIDAR.processing.clusters[idx_min].distance_moyenne;
 8001186:	4b3d      	ldr	r3, [pc, #244]	; (800127c <TaskLIDAR+0x53c>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4939      	ldr	r1, [pc, #228]	; (8001270 <TaskLIDAR+0x530>)
 800118c:	4839      	ldr	r0, [pc, #228]	; (8001274 <TaskLIDAR+0x534>)
 800118e:	0013      	movs	r3, r2
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	189b      	adds	r3, r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	18cb      	adds	r3, r1, r3
 8001198:	181b      	adds	r3, r3, r0
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b3b      	ldr	r3, [pc, #236]	; (800128c <TaskLIDAR+0x54c>)
 800119e:	601a      	str	r2, [r3, #0]
//		else{
//			angle = angle_inverse(angle);
//			ajusterAlphaMoteurs(angle,vitesse, &motor1,&motor2);
//		}

		if (h_LIDAR.processing.clusters[idx_min].angle_moyen > 180){
 80011a0:	4b36      	ldr	r3, [pc, #216]	; (800127c <TaskLIDAR+0x53c>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4932      	ldr	r1, [pc, #200]	; (8001270 <TaskLIDAR+0x530>)
 80011a6:	4837      	ldr	r0, [pc, #220]	; (8001284 <TaskLIDAR+0x544>)
 80011a8:	0013      	movs	r3, r2
 80011aa:	005b      	lsls	r3, r3, #1
 80011ac:	189b      	adds	r3, r3, r2
 80011ae:	009b      	lsls	r3, r3, #2
 80011b0:	18cb      	adds	r3, r1, r3
 80011b2:	181b      	adds	r3, r3, r0
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2bb4      	cmp	r3, #180	; 0xb4
 80011b8:	dd29      	ble.n	800120e <TaskLIDAR+0x4ce>
			alpha1 = (180 - h_LIDAR.processing.clusters[idx_min].angle_moyen)*2 + 400 + vitesse;
 80011ba:	4b30      	ldr	r3, [pc, #192]	; (800127c <TaskLIDAR+0x53c>)
 80011bc:	681a      	ldr	r2, [r3, #0]
 80011be:	492c      	ldr	r1, [pc, #176]	; (8001270 <TaskLIDAR+0x530>)
 80011c0:	4830      	ldr	r0, [pc, #192]	; (8001284 <TaskLIDAR+0x544>)
 80011c2:	0013      	movs	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	189b      	adds	r3, r3, r2
 80011c8:	009b      	lsls	r3, r3, #2
 80011ca:	18cb      	adds	r3, r1, r3
 80011cc:	181b      	adds	r3, r3, r0
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	22be      	movs	r2, #190	; 0xbe
 80011d2:	0052      	lsls	r2, r2, #1
 80011d4:	1ad3      	subs	r3, r2, r3
 80011d6:	005a      	lsls	r2, r3, #1
 80011d8:	4b2c      	ldr	r3, [pc, #176]	; (800128c <TaskLIDAR+0x54c>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	18d2      	adds	r2, r2, r3
 80011de:	4b2c      	ldr	r3, [pc, #176]	; (8001290 <TaskLIDAR+0x550>)
 80011e0:	601a      	str	r2, [r3, #0]
			alpha2 = 300 + vitesse/4;
 80011e2:	4b2a      	ldr	r3, [pc, #168]	; (800128c <TaskLIDAR+0x54c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	da00      	bge.n	80011ec <TaskLIDAR+0x4ac>
 80011ea:	3303      	adds	r3, #3
 80011ec:	109b      	asrs	r3, r3, #2
 80011ee:	332d      	adds	r3, #45	; 0x2d
 80011f0:	33ff      	adds	r3, #255	; 0xff
 80011f2:	001a      	movs	r2, r3
 80011f4:	4b27      	ldr	r3, [pc, #156]	; (8001294 <TaskLIDAR+0x554>)
 80011f6:	601a      	str	r2, [r3, #0]
			if (alpha1 > 900 ){
 80011f8:	4b25      	ldr	r3, [pc, #148]	; (8001290 <TaskLIDAR+0x550>)
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	23e1      	movs	r3, #225	; 0xe1
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	429a      	cmp	r2, r3
 8001202:	dd2b      	ble.n	800125c <TaskLIDAR+0x51c>
				alpha1 = 900;
 8001204:	4b22      	ldr	r3, [pc, #136]	; (8001290 <TaskLIDAR+0x550>)
 8001206:	22e1      	movs	r2, #225	; 0xe1
 8001208:	0092      	lsls	r2, r2, #2
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	e026      	b.n	800125c <TaskLIDAR+0x51c>
			}
		}
		else{
			alpha2 = (h_LIDAR.processing.clusters[idx_min].angle_moyen -180)*2 + 400 + vitesse;
 800120e:	4b1b      	ldr	r3, [pc, #108]	; (800127c <TaskLIDAR+0x53c>)
 8001210:	681a      	ldr	r2, [r3, #0]
 8001212:	4917      	ldr	r1, [pc, #92]	; (8001270 <TaskLIDAR+0x530>)
 8001214:	481b      	ldr	r0, [pc, #108]	; (8001284 <TaskLIDAR+0x544>)
 8001216:	0013      	movs	r3, r2
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	189b      	adds	r3, r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	18cb      	adds	r3, r1, r3
 8001220:	181b      	adds	r3, r3, r0
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	3314      	adds	r3, #20
 8001226:	005a      	lsls	r2, r3, #1
 8001228:	4b18      	ldr	r3, [pc, #96]	; (800128c <TaskLIDAR+0x54c>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	18d2      	adds	r2, r2, r3
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <TaskLIDAR+0x554>)
 8001230:	601a      	str	r2, [r3, #0]
			alpha1 = 300 + vitesse/4 ;
 8001232:	4b16      	ldr	r3, [pc, #88]	; (800128c <TaskLIDAR+0x54c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	da00      	bge.n	800123c <TaskLIDAR+0x4fc>
 800123a:	3303      	adds	r3, #3
 800123c:	109b      	asrs	r3, r3, #2
 800123e:	332d      	adds	r3, #45	; 0x2d
 8001240:	33ff      	adds	r3, #255	; 0xff
 8001242:	001a      	movs	r2, r3
 8001244:	4b12      	ldr	r3, [pc, #72]	; (8001290 <TaskLIDAR+0x550>)
 8001246:	601a      	str	r2, [r3, #0]
			if (alpha2 > 900){
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <TaskLIDAR+0x554>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	23e1      	movs	r3, #225	; 0xe1
 800124e:	009b      	lsls	r3, r3, #2
 8001250:	429a      	cmp	r2, r3
 8001252:	dd03      	ble.n	800125c <TaskLIDAR+0x51c>
				alpha2 = 900;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <TaskLIDAR+0x554>)
 8001256:	22e1      	movs	r2, #225	; 0xe1
 8001258:	0092      	lsls	r2, r2, #2
 800125a:	601a      	str	r2, [r3, #0]
			}
		}
		motor1.alpha = alpha1;
 800125c:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <TaskLIDAR+0x550>)
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <TaskLIDAR+0x558>)
 8001262:	60da      	str	r2, [r3, #12]
		motor2.alpha = alpha2;
 8001264:	4b0b      	ldr	r3, [pc, #44]	; (8001294 <TaskLIDAR+0x554>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b0c      	ldr	r3, [pc, #48]	; (800129c <TaskLIDAR+0x55c>)
 800126a:	60da      	str	r2, [r3, #12]
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 800126c:	e56c      	b.n	8000d48 <TaskLIDAR+0x8>
 800126e:	46c0      	nop			; (mov r8, r8)
 8001270:	2000014c 	.word	0x2000014c
 8001274:	00002b60 	.word	0x00002b60
 8001278:	20003308 	.word	0x20003308
 800127c:	2000330c 	.word	0x2000330c
 8001280:	0000300c 	.word	0x0000300c
 8001284:	00002b5c 	.word	0x00002b5c
 8001288:	0800bd10 	.word	0x0800bd10
 800128c:	200032f4 	.word	0x200032f4
 8001290:	200032f8 	.word	0x200032f8
 8001294:	200032fc 	.word	0x200032fc
 8001298:	2000315c 	.word	0x2000315c
 800129c:	20003220 	.word	0x20003220

080012a0 <TaskMOTOR>:

	}
}

void TaskMOTOR (void * pvParameters){
 80012a0:	b590      	push	{r4, r7, lr}
 80012a2:	b0b1      	sub	sp, #196	; 0xc4
 80012a4:	af2e      	add	r7, sp, #184	; 0xb8
 80012a6:	6078      	str	r0, [r7, #4]
	for(;;){
		update_motor(motor1);
 80012a8:	4c10      	ldr	r4, [pc, #64]	; (80012ec <TaskMOTOR+0x4c>)
 80012aa:	466b      	mov	r3, sp
 80012ac:	0018      	movs	r0, r3
 80012ae:	0023      	movs	r3, r4
 80012b0:	3310      	adds	r3, #16
 80012b2:	22b4      	movs	r2, #180	; 0xb4
 80012b4:	0019      	movs	r1, r3
 80012b6:	f009 fe2e 	bl	800af16 <memcpy>
 80012ba:	6820      	ldr	r0, [r4, #0]
 80012bc:	6861      	ldr	r1, [r4, #4]
 80012be:	68a2      	ldr	r2, [r4, #8]
 80012c0:	68e3      	ldr	r3, [r4, #12]
 80012c2:	f009 f917 	bl	800a4f4 <update_motor>
		update_motor(motor2);
 80012c6:	4c0a      	ldr	r4, [pc, #40]	; (80012f0 <TaskMOTOR+0x50>)
 80012c8:	466b      	mov	r3, sp
 80012ca:	0018      	movs	r0, r3
 80012cc:	0023      	movs	r3, r4
 80012ce:	3310      	adds	r3, #16
 80012d0:	22b4      	movs	r2, #180	; 0xb4
 80012d2:	0019      	movs	r1, r3
 80012d4:	f009 fe1f 	bl	800af16 <memcpy>
 80012d8:	6820      	ldr	r0, [r4, #0]
 80012da:	6861      	ldr	r1, [r4, #4]
 80012dc:	68a2      	ldr	r2, [r4, #8]
 80012de:	68e3      	ldr	r3, [r4, #12]
 80012e0:	f009 f908 	bl	800a4f4 <update_motor>
		vTaskDelay(50);
 80012e4:	2032      	movs	r0, #50	; 0x32
 80012e6:	f007 fd41 	bl	8008d6c <vTaskDelay>
		update_motor(motor1);
 80012ea:	e7dd      	b.n	80012a8 <TaskMOTOR+0x8>
 80012ec:	2000315c 	.word	0x2000315c
 80012f0:	20003220 	.word	0x20003220

080012f4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80012f4:	b5b0      	push	{r4, r5, r7, lr}
 80012f6:	b094      	sub	sp, #80	; 0x50
 80012f8:	af10      	add	r7, sp, #64	; 0x40
	/* USER CODE BEGIN 1 */
	TaskHandle_t xHandleLIDAR = NULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	60bb      	str	r3, [r7, #8]
	TaskHandle_t xHandleMOTOR = NULL;
 80012fe:	2300      	movs	r3, #0
 8001300:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001302:	f001 fa83 	bl	800280c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001306:	f000 f929 	bl	800155c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800130a:	f7ff fb7f 	bl	8000a0c <MX_GPIO_Init>
	MX_DMA_Init();
 800130e:	f7ff fb57 	bl	80009c0 <MX_DMA_Init>
	MX_ADC1_Init();
 8001312:	f7ff fa47 	bl	80007a4 <MX_ADC1_Init>
	MX_TIM1_Init();
 8001316:	f000 fc25 	bl	8001b64 <MX_TIM1_Init>
	MX_TIM3_Init();
 800131a:	f000 fc8d 	bl	8001c38 <MX_TIM3_Init>
	MX_TIM14_Init();
 800131e:	f000 fd2b 	bl	8001d78 <MX_TIM14_Init>
	MX_TIM15_Init();
 8001322:	f000 fd79 	bl	8001e18 <MX_TIM15_Init>
	MX_TIM16_Init();
 8001326:	f000 fe1b 	bl	8001f60 <MX_TIM16_Init>
	MX_TIM17_Init();
 800132a:	f000 fea1 	bl	8002070 <MX_TIM17_Init>
	MX_USART1_UART_Init();
 800132e:	f001 f8f9 	bl	8002524 <MX_USART1_UART_Init>
	MX_USART4_UART_Init();
 8001332:	f001 f945 	bl	80025c0 <MX_USART4_UART_Init>
	MX_SPI1_Init();
 8001336:	f000 f9bf 	bl	80016b8 <MX_SPI1_Init>
	MX_TIM6_Init();
 800133a:	f000 fce1 	bl	8001d00 <MX_TIM6_Init>
	/* USER CODE BEGIN 2 */
	h_LIDAR.serial_drv.transmit=uart_transmit;
 800133e:	4b6f      	ldr	r3, [pc, #444]	; (80014fc <main+0x208>)
 8001340:	4a6f      	ldr	r2, [pc, #444]	; (8001500 <main+0x20c>)
 8001342:	601a      	str	r2, [r3, #0]
	h_LIDAR.serial_drv.it_transmit=uart_it_transmit;
 8001344:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <main+0x208>)
 8001346:	4a6f      	ldr	r2, [pc, #444]	; (8001504 <main+0x210>)
 8001348:	605a      	str	r2, [r3, #4]
	h_LIDAR.serial_drv.dma_transmit=uart_dma_transmit;
 800134a:	4b6c      	ldr	r3, [pc, #432]	; (80014fc <main+0x208>)
 800134c:	4a6e      	ldr	r2, [pc, #440]	; (8001508 <main+0x214>)
 800134e:	609a      	str	r2, [r3, #8]
	h_LIDAR.serial_drv.poll_receive=uart_poll_receive;
 8001350:	4b6a      	ldr	r3, [pc, #424]	; (80014fc <main+0x208>)
 8001352:	4a6e      	ldr	r2, [pc, #440]	; (800150c <main+0x218>)
 8001354:	60da      	str	r2, [r3, #12]
	h_LIDAR.serial_drv.it_receive=uart_it_receive;
 8001356:	4b69      	ldr	r3, [pc, #420]	; (80014fc <main+0x208>)
 8001358:	4a6d      	ldr	r2, [pc, #436]	; (8001510 <main+0x21c>)
 800135a:	611a      	str	r2, [r3, #16]
	h_LIDAR.serial_drv.dma_receive=uart_dma_receive;
 800135c:	4b67      	ldr	r3, [pc, #412]	; (80014fc <main+0x208>)
 800135e:	4a6d      	ldr	r2, [pc, #436]	; (8001514 <main+0x220>)
 8001360:	615a      	str	r2, [r3, #20]

	printf("\r\n===== Driver_LIDAR =====\r\n");
 8001362:	4b6d      	ldr	r3, [pc, #436]	; (8001518 <main+0x224>)
 8001364:	0018      	movs	r0, r3
 8001366:	f009 fc23 	bl	800abb0 <puts>

	LIDAR_stop(&h_LIDAR);
 800136a:	4b64      	ldr	r3, [pc, #400]	; (80014fc <main+0x208>)
 800136c:	0018      	movs	r0, r3
 800136e:	f008 fce7 	bl	8009d40 <LIDAR_stop>
	HAL_Delay(1000);
 8001372:	23fa      	movs	r3, #250	; 0xfa
 8001374:	009b      	lsls	r3, r3, #2
 8001376:	0018      	movs	r0, r3
 8001378:	f001 fa84 	bl	8002884 <HAL_Delay>
	LIDAR_get_info(&h_LIDAR);
 800137c:	4b5f      	ldr	r3, [pc, #380]	; (80014fc <main+0x208>)
 800137e:	0018      	movs	r0, r3
 8001380:	f008 fcf4 	bl	8009d6c <LIDAR_get_info>
	LIDAR_get_health_stat(&h_LIDAR);
 8001384:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <main+0x208>)
 8001386:	0018      	movs	r0, r3
 8001388:	f008 fdc6 	bl	8009f18 <LIDAR_get_health_stat>

	ret = xTaskCreate(TaskLIDAR,"TaskLIDAR",STACK_SIZE,(void *) NULL,1,&xHandleLIDAR);
 800138c:	2380      	movs	r3, #128	; 0x80
 800138e:	005a      	lsls	r2, r3, #1
 8001390:	4962      	ldr	r1, [pc, #392]	; (800151c <main+0x228>)
 8001392:	4863      	ldr	r0, [pc, #396]	; (8001520 <main+0x22c>)
 8001394:	2308      	movs	r3, #8
 8001396:	18fb      	adds	r3, r7, r3
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	2301      	movs	r3, #1
 800139c:	9300      	str	r3, [sp, #0]
 800139e:	2300      	movs	r3, #0
 80013a0:	f007 fbb5 	bl	8008b0e <xTaskCreate>
 80013a4:	0003      	movs	r3, r0
 80013a6:	60fb      	str	r3, [r7, #12]
	if (ret != pdPASS)
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d005      	beq.n	80013ba <main+0xc6>
	{
		printf("Error creating TaskLIDAR\r\n");
 80013ae:	4b5d      	ldr	r3, [pc, #372]	; (8001524 <main+0x230>)
 80013b0:	0018      	movs	r0, r3
 80013b2:	f009 fbfd 	bl	800abb0 <puts>
		Error_Handler();
 80013b6:	f000 f979 	bl	80016ac <Error_Handler>
	}
	printf("Task LIDAR created\r\n");
 80013ba:	4b5b      	ldr	r3, [pc, #364]	; (8001528 <main+0x234>)
 80013bc:	0018      	movs	r0, r3
 80013be:	f009 fbf7 	bl	800abb0 <puts>

	ret = xTaskCreate(TaskMOTOR,"TaskMOTOR",STACK_SIZE,(void *) NULL,1,&xHandleMOTOR);
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	005a      	lsls	r2, r3, #1
 80013c6:	4959      	ldr	r1, [pc, #356]	; (800152c <main+0x238>)
 80013c8:	4859      	ldr	r0, [pc, #356]	; (8001530 <main+0x23c>)
 80013ca:	1d3b      	adds	r3, r7, #4
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	2301      	movs	r3, #1
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	2300      	movs	r3, #0
 80013d4:	f007 fb9b 	bl	8008b0e <xTaskCreate>
 80013d8:	0003      	movs	r3, r0
 80013da:	60fb      	str	r3, [r7, #12]
	if (ret != pdPASS)
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d005      	beq.n	80013ee <main+0xfa>
	{
		printf("Error creating TaskMOTOR\r\n");
 80013e2:	4b54      	ldr	r3, [pc, #336]	; (8001534 <main+0x240>)
 80013e4:	0018      	movs	r0, r3
 80013e6:	f009 fbe3 	bl	800abb0 <puts>
		Error_Handler();
 80013ea:	f000 f95f 	bl	80016ac <Error_Handler>
	}
	printf("Task MOTOR created\r\n");
 80013ee:	4b52      	ldr	r3, [pc, #328]	; (8001538 <main+0x244>)
 80013f0:	0018      	movs	r0, r3
 80013f2:	f009 fbdd 	bl	800abb0 <puts>

	SemHalfCallBack = xSemaphoreCreateBinary();
 80013f6:	2203      	movs	r2, #3
 80013f8:	2100      	movs	r1, #0
 80013fa:	2001      	movs	r0, #1
 80013fc:	f007 f96e 	bl	80086dc <xQueueGenericCreate>
 8001400:	0002      	movs	r2, r0
 8001402:	4b4e      	ldr	r3, [pc, #312]	; (800153c <main+0x248>)
 8001404:	601a      	str	r2, [r3, #0]
	SemClpCallBack = xSemaphoreCreateBinary();
 8001406:	2203      	movs	r2, #3
 8001408:	2100      	movs	r1, #0
 800140a:	2001      	movs	r0, #1
 800140c:	f007 f966 	bl	80086dc <xQueueGenericCreate>
 8001410:	0002      	movs	r2, r0
 8001412:	4b4b      	ldr	r3, [pc, #300]	; (8001540 <main+0x24c>)
 8001414:	601a      	str	r2, [r3, #0]

	LIDAR_start(&h_LIDAR);
 8001416:	4b39      	ldr	r3, [pc, #228]	; (80014fc <main+0x208>)
 8001418:	0018      	movs	r0, r3
 800141a:	f008 fc73 	bl	8009d04 <LIDAR_start>
	//Initialisation
	motor_Init(&motor1,&motor2);
 800141e:	4a49      	ldr	r2, [pc, #292]	; (8001544 <main+0x250>)
 8001420:	4b49      	ldr	r3, [pc, #292]	; (8001548 <main+0x254>)
 8001422:	0011      	movs	r1, r2
 8001424:	0018      	movs	r0, r3
 8001426:	f009 f805 	bl	800a434 <motor_Init>
	motor1.sens = 1;
 800142a:	4b47      	ldr	r3, [pc, #284]	; (8001548 <main+0x254>)
 800142c:	2201      	movs	r2, #1
 800142e:	609a      	str	r2, [r3, #8]
	motor1.pwm_start(motor1.Timer_Backward,motor1.Channel_Backward);
 8001430:	4b45      	ldr	r3, [pc, #276]	; (8001548 <main+0x254>)
 8001432:	22b8      	movs	r2, #184	; 0xb8
 8001434:	589d      	ldr	r5, [r3, r2]
 8001436:	4b44      	ldr	r3, [pc, #272]	; (8001548 <main+0x254>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	4c43      	ldr	r4, [pc, #268]	; (8001548 <main+0x254>)
 800143c:	930f      	str	r3, [sp, #60]	; 0x3c
 800143e:	466b      	mov	r3, sp
 8001440:	0018      	movs	r0, r3
 8001442:	0023      	movs	r3, r4
 8001444:	337c      	adds	r3, #124	; 0x7c
 8001446:	223c      	movs	r2, #60	; 0x3c
 8001448:	0019      	movs	r1, r3
 800144a:	f009 fd64 	bl	800af16 <memcpy>
 800144e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001450:	6f21      	ldr	r1, [r4, #112]	; 0x70
 8001452:	6f62      	ldr	r2, [r4, #116]	; 0x74
 8001454:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 8001456:	47a8      	blx	r5
	motor1.pwm_start(motor1.Timer_Forward,motor1.Channel_Forward);
 8001458:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <main+0x254>)
 800145a:	22b8      	movs	r2, #184	; 0xb8
 800145c:	589d      	ldr	r5, [r3, r2]
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <main+0x254>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4c39      	ldr	r4, [pc, #228]	; (8001548 <main+0x254>)
 8001464:	930f      	str	r3, [sp, #60]	; 0x3c
 8001466:	466b      	mov	r3, sp
 8001468:	0018      	movs	r0, r3
 800146a:	0023      	movs	r3, r4
 800146c:	3330      	adds	r3, #48	; 0x30
 800146e:	223c      	movs	r2, #60	; 0x3c
 8001470:	0019      	movs	r1, r3
 8001472:	f009 fd50 	bl	800af16 <memcpy>
 8001476:	6a20      	ldr	r0, [r4, #32]
 8001478:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800147a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 800147c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800147e:	47a8      	blx	r5
	motor2.sens = 2;
 8001480:	4b30      	ldr	r3, [pc, #192]	; (8001544 <main+0x250>)
 8001482:	2202      	movs	r2, #2
 8001484:	609a      	str	r2, [r3, #8]
	motor2.pwm_start(motor2.Timer_Backward,motor2.Channel_Backward);
 8001486:	4b2f      	ldr	r3, [pc, #188]	; (8001544 <main+0x250>)
 8001488:	22b8      	movs	r2, #184	; 0xb8
 800148a:	589d      	ldr	r5, [r3, r2]
 800148c:	4b2d      	ldr	r3, [pc, #180]	; (8001544 <main+0x250>)
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4c2c      	ldr	r4, [pc, #176]	; (8001544 <main+0x250>)
 8001492:	930f      	str	r3, [sp, #60]	; 0x3c
 8001494:	466b      	mov	r3, sp
 8001496:	0018      	movs	r0, r3
 8001498:	0023      	movs	r3, r4
 800149a:	337c      	adds	r3, #124	; 0x7c
 800149c:	223c      	movs	r2, #60	; 0x3c
 800149e:	0019      	movs	r1, r3
 80014a0:	f009 fd39 	bl	800af16 <memcpy>
 80014a4:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80014a6:	6f21      	ldr	r1, [r4, #112]	; 0x70
 80014a8:	6f62      	ldr	r2, [r4, #116]	; 0x74
 80014aa:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 80014ac:	47a8      	blx	r5
	motor2.pwm_start(motor2.Timer_Forward,motor2.Channel_Forward);
 80014ae:	4b25      	ldr	r3, [pc, #148]	; (8001544 <main+0x250>)
 80014b0:	22b8      	movs	r2, #184	; 0xb8
 80014b2:	589d      	ldr	r5, [r3, r2]
 80014b4:	4b23      	ldr	r3, [pc, #140]	; (8001544 <main+0x250>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4c22      	ldr	r4, [pc, #136]	; (8001544 <main+0x250>)
 80014ba:	930f      	str	r3, [sp, #60]	; 0x3c
 80014bc:	466b      	mov	r3, sp
 80014be:	0018      	movs	r0, r3
 80014c0:	0023      	movs	r3, r4
 80014c2:	3330      	adds	r3, #48	; 0x30
 80014c4:	223c      	movs	r2, #60	; 0x3c
 80014c6:	0019      	movs	r1, r3
 80014c8:	f009 fd25 	bl	800af16 <memcpy>
 80014cc:	6a20      	ldr	r0, [r4, #32]
 80014ce:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80014d0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80014d2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80014d4:	47a8      	blx	r5

	//Codeur
	codeur_init(&hCodeurLeft,&htim3,0);
 80014d6:	491d      	ldr	r1, [pc, #116]	; (800154c <main+0x258>)
 80014d8:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <main+0x25c>)
 80014da:	2200      	movs	r2, #0
 80014dc:	0018      	movs	r0, r3
 80014de:	f009 fa19 	bl	800a914 <codeur_init>
	codeur_init(&hCodeurRight,&htim1,0);
 80014e2:	491c      	ldr	r1, [pc, #112]	; (8001554 <main+0x260>)
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <main+0x264>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	0018      	movs	r0, r3
 80014ea:	f009 fa13 	bl	800a914 <codeur_init>

	vTaskStartScheduler();
 80014ee:	f007 fc63 	bl	8008db8 <vTaskStartScheduler>
	/* USER CODE END 2 */

	/* Call init function for freertos objects (in freertos.c) */
	MX_FREERTOS_Init();
 80014f2:	f7ff fa43 	bl	800097c <MX_FREERTOS_Init>
	/* Start scheduler */
	osKernelStart();
 80014f6:	f006 ffb0 	bl	800845a <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
 80014fa:	e7fe      	b.n	80014fa <main+0x206>
 80014fc:	2000014c 	.word	0x2000014c
 8001500:	08000c31 	.word	0x08000c31
 8001504:	08000c61 	.word	0x08000c61
 8001508:	08000c8d 	.word	0x08000c8d
 800150c:	08000cb9 	.word	0x08000cb9
 8001510:	08000ce9 	.word	0x08000ce9
 8001514:	08000d15 	.word	0x08000d15
 8001518:	0800bd18 	.word	0x0800bd18
 800151c:	0800bd34 	.word	0x0800bd34
 8001520:	08000d41 	.word	0x08000d41
 8001524:	0800bd40 	.word	0x0800bd40
 8001528:	0800bd5c 	.word	0x0800bd5c
 800152c:	0800bd70 	.word	0x0800bd70
 8001530:	080012a1 	.word	0x080012a1
 8001534:	0800bd7c 	.word	0x0800bd7c
 8001538:	0800bd98 	.word	0x0800bd98
 800153c:	20003300 	.word	0x20003300
 8001540:	20003304 	.word	0x20003304
 8001544:	20003220 	.word	0x20003220
 8001548:	2000315c 	.word	0x2000315c
 800154c:	20003418 	.word	0x20003418
 8001550:	200032e4 	.word	0x200032e4
 8001554:	200033cc 	.word	0x200033cc
 8001558:	200032ec 	.word	0x200032ec

0800155c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b093      	sub	sp, #76	; 0x4c
 8001560:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001562:	2414      	movs	r4, #20
 8001564:	193b      	adds	r3, r7, r4
 8001566:	0018      	movs	r0, r3
 8001568:	2334      	movs	r3, #52	; 0x34
 800156a:	001a      	movs	r2, r3
 800156c:	2100      	movs	r1, #0
 800156e:	f009 fc4f 	bl	800ae10 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001572:	1d3b      	adds	r3, r7, #4
 8001574:	0018      	movs	r0, r3
 8001576:	2310      	movs	r3, #16
 8001578:	001a      	movs	r2, r3
 800157a:	2100      	movs	r1, #0
 800157c:	f009 fc48 	bl	800ae10 <memset>

	/** Configure the main internal regulator output voltage
	 */
	HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001580:	2380      	movs	r3, #128	; 0x80
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	0018      	movs	r0, r3
 8001586:	f002 faf5 	bl	8003b74 <HAL_PWREx_ControlVoltageScaling>

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158a:	193b      	adds	r3, r7, r4
 800158c:	2202      	movs	r2, #2
 800158e:	601a      	str	r2, [r3, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	193b      	adds	r3, r7, r4
 8001592:	2280      	movs	r2, #128	; 0x80
 8001594:	0052      	lsls	r2, r2, #1
 8001596:	60da      	str	r2, [r3, #12]
	RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8001598:	0021      	movs	r1, r4
 800159a:	187b      	adds	r3, r7, r1
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015a0:	187b      	adds	r3, r7, r1
 80015a2:	2240      	movs	r2, #64	; 0x40
 80015a4:	615a      	str	r2, [r3, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015a6:	187b      	adds	r3, r7, r1
 80015a8:	2202      	movs	r2, #2
 80015aa:	61da      	str	r2, [r3, #28]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80015ac:	187b      	adds	r3, r7, r1
 80015ae:	2202      	movs	r2, #2
 80015b0:	621a      	str	r2, [r3, #32]
	RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80015b2:	187b      	adds	r3, r7, r1
 80015b4:	2200      	movs	r2, #0
 80015b6:	625a      	str	r2, [r3, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLN = 8;
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	2208      	movs	r2, #8
 80015bc:	629a      	str	r2, [r3, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2280      	movs	r2, #128	; 0x80
 80015c2:	0292      	lsls	r2, r2, #10
 80015c4:	62da      	str	r2, [r3, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015c6:	187b      	adds	r3, r7, r1
 80015c8:	2280      	movs	r2, #128	; 0x80
 80015ca:	0592      	lsls	r2, r2, #22
 80015cc:	631a      	str	r2, [r3, #48]	; 0x30
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015ce:	187b      	adds	r3, r7, r1
 80015d0:	0018      	movs	r0, r3
 80015d2:	f002 fb1b 	bl	8003c0c <HAL_RCC_OscConfig>
 80015d6:	1e03      	subs	r3, r0, #0
 80015d8:	d001      	beq.n	80015de <SystemClock_Config+0x82>
	{
		Error_Handler();
 80015da:	f000 f867 	bl	80016ac <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015de:	1d3b      	adds	r3, r7, #4
 80015e0:	2207      	movs	r2, #7
 80015e2:	601a      	str	r2, [r3, #0]
			|RCC_CLOCKTYPE_PCLK1;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	2202      	movs	r2, #2
 80015e8:	605a      	str	r2, [r3, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015f0:	1d3b      	adds	r3, r7, #4
 80015f2:	2200      	movs	r2, #0
 80015f4:	60da      	str	r2, [r3, #12]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2102      	movs	r1, #2
 80015fa:	0018      	movs	r0, r3
 80015fc:	f002 fe16 	bl	800422c <HAL_RCC_ClockConfig>
 8001600:	1e03      	subs	r3, r0, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0xac>
	{
		Error_Handler();
 8001604:	f000 f852 	bl	80016ac <Error_Handler>
	}
}
 8001608:	46c0      	nop			; (mov r8, r8)
 800160a:	46bd      	mov	sp, r7
 800160c:	b013      	add	sp, #76	; 0x4c
 800160e:	bd90      	pop	{r4, r7, pc}

08001610 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 8001618:	2300      	movs	r3, #0
 800161a:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemHalfCallBack,&higher_priority_task_woken);
 800161c:	4b09      	ldr	r3, [pc, #36]	; (8001644 <HAL_UART_RxHalfCpltCallback+0x34>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	220c      	movs	r2, #12
 8001622:	18ba      	adds	r2, r7, r2
 8001624:	0011      	movs	r1, r2
 8001626:	0018      	movs	r0, r3
 8001628:	f007 f8a8 	bl	800877c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_UART_RxHalfCpltCallback+0x2a>
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_UART_RxHalfCpltCallback+0x38>)
 8001634:	2280      	movs	r2, #128	; 0x80
 8001636:	0552      	lsls	r2, r2, #21
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	46c0      	nop			; (mov r8, r8)
 800163c:	46bd      	mov	sp, r7
 800163e:	b004      	add	sp, #16
 8001640:	bd80      	pop	{r7, pc}
 8001642:	46c0      	nop			; (mov r8, r8)
 8001644:	20003300 	.word	0x20003300
 8001648:	e000ed04 	.word	0xe000ed04

0800164c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 8001654:	2300      	movs	r3, #0
 8001656:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemClpCallBack,&higher_priority_task_woken);
 8001658:	4b09      	ldr	r3, [pc, #36]	; (8001680 <HAL_UART_RxCpltCallback+0x34>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	220c      	movs	r2, #12
 800165e:	18ba      	adds	r2, r7, r2
 8001660:	0011      	movs	r1, r2
 8001662:	0018      	movs	r0, r3
 8001664:	f007 f88a 	bl	800877c <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_UART_RxCpltCallback+0x2a>
 800166e:	4b05      	ldr	r3, [pc, #20]	; (8001684 <HAL_UART_RxCpltCallback+0x38>)
 8001670:	2280      	movs	r2, #128	; 0x80
 8001672:	0552      	lsls	r2, r2, #21
 8001674:	601a      	str	r2, [r3, #0]
}
 8001676:	46c0      	nop			; (mov r8, r8)
 8001678:	46bd      	mov	sp, r7
 800167a:	b004      	add	sp, #16
 800167c:	bd80      	pop	{r7, pc}
 800167e:	46c0      	nop			; (mov r8, r8)
 8001680:	20003304 	.word	0x20003304
 8001684:	e000ed04 	.word	0xe000ed04

08001688 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM7) {
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a04      	ldr	r2, [pc, #16]	; (80016a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d101      	bne.n	800169e <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 800169a:	f001 f8d7 	bl	800284c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 800169e:	46c0      	nop			; (mov r8, r8)
 80016a0:	46bd      	mov	sp, r7
 80016a2:	b002      	add	sp, #8
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	46c0      	nop			; (mov r8, r8)
 80016a8:	40001400 	.word	0x40001400

080016ac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016b0:	b672      	cpsid	i
}
 80016b2:	46c0      	nop			; (mov r8, r8)
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80016b4:	e7fe      	b.n	80016b4 <Error_Handler+0x8>
	...

080016b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80016bc:	4b1b      	ldr	r3, [pc, #108]	; (800172c <MX_SPI1_Init+0x74>)
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <MX_SPI1_Init+0x78>)
 80016c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016c2:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_SPI1_Init+0x74>)
 80016c4:	2282      	movs	r2, #130	; 0x82
 80016c6:	0052      	lsls	r2, r2, #1
 80016c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ca:	4b18      	ldr	r3, [pc, #96]	; (800172c <MX_SPI1_Init+0x74>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80016d0:	4b16      	ldr	r3, [pc, #88]	; (800172c <MX_SPI1_Init+0x74>)
 80016d2:	22c0      	movs	r2, #192	; 0xc0
 80016d4:	0092      	lsls	r2, r2, #2
 80016d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016d8:	4b14      	ldr	r3, [pc, #80]	; (800172c <MX_SPI1_Init+0x74>)
 80016da:	2200      	movs	r2, #0
 80016dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016de:	4b13      	ldr	r3, [pc, #76]	; (800172c <MX_SPI1_Init+0x74>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_SPI1_Init+0x74>)
 80016e6:	2280      	movs	r2, #128	; 0x80
 80016e8:	0092      	lsls	r2, r2, #2
 80016ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_SPI1_Init+0x74>)
 80016ee:	2210      	movs	r2, #16
 80016f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_SPI1_Init+0x74>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_SPI1_Init+0x74>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016fe:	4b0b      	ldr	r3, [pc, #44]	; (800172c <MX_SPI1_Init+0x74>)
 8001700:	2200      	movs	r2, #0
 8001702:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001704:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_SPI1_Init+0x74>)
 8001706:	2207      	movs	r2, #7
 8001708:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800170a:	4b08      	ldr	r3, [pc, #32]	; (800172c <MX_SPI1_Init+0x74>)
 800170c:	2200      	movs	r2, #0
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001710:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_SPI1_Init+0x74>)
 8001712:	2208      	movs	r2, #8
 8001714:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001716:	4b05      	ldr	r3, [pc, #20]	; (800172c <MX_SPI1_Init+0x74>)
 8001718:	0018      	movs	r0, r3
 800171a:	f003 f88d 	bl	8004838 <HAL_SPI_Init>
 800171e:	1e03      	subs	r3, r0, #0
 8001720:	d001      	beq.n	8001726 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001722:	f7ff ffc3 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20003318 	.word	0x20003318
 8001730:	40013000 	.word	0x40013000

08001734 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001734:	b590      	push	{r4, r7, lr}
 8001736:	b08b      	sub	sp, #44	; 0x2c
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800173c:	2414      	movs	r4, #20
 800173e:	193b      	adds	r3, r7, r4
 8001740:	0018      	movs	r0, r3
 8001742:	2314      	movs	r3, #20
 8001744:	001a      	movs	r2, r3
 8001746:	2100      	movs	r1, #0
 8001748:	f009 fb62 	bl	800ae10 <memset>
  if(spiHandle->Instance==SPI1)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a1b      	ldr	r2, [pc, #108]	; (80017c0 <HAL_SPI_MspInit+0x8c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d130      	bne.n	80017b8 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001756:	4b1b      	ldr	r3, [pc, #108]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 8001758:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800175a:	4b1a      	ldr	r3, [pc, #104]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	0149      	lsls	r1, r1, #5
 8001760:	430a      	orrs	r2, r1
 8001762:	641a      	str	r2, [r3, #64]	; 0x40
 8001764:	4b17      	ldr	r3, [pc, #92]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 8001766:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001768:	2380      	movs	r3, #128	; 0x80
 800176a:	015b      	lsls	r3, r3, #5
 800176c:	4013      	ands	r3, r2
 800176e:	613b      	str	r3, [r7, #16]
 8001770:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001772:	4b14      	ldr	r3, [pc, #80]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 8001774:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001776:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 8001778:	2101      	movs	r1, #1
 800177a:	430a      	orrs	r2, r1
 800177c:	635a      	str	r2, [r3, #52]	; 0x34
 800177e:	4b11      	ldr	r3, [pc, #68]	; (80017c4 <HAL_SPI_MspInit+0x90>)
 8001780:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001782:	2201      	movs	r2, #1
 8001784:	4013      	ands	r3, r2
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_11;
 800178a:	0021      	movs	r1, r4
 800178c:	187b      	adds	r3, r7, r1
 800178e:	4a0e      	ldr	r2, [pc, #56]	; (80017c8 <HAL_SPI_MspInit+0x94>)
 8001790:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001792:	187b      	adds	r3, r7, r1
 8001794:	2202      	movs	r2, #2
 8001796:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001798:	187b      	adds	r3, r7, r1
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	187b      	adds	r3, r7, r1
 80017a0:	2200      	movs	r2, #0
 80017a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80017a4:	187b      	adds	r3, r7, r1
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017aa:	187a      	adds	r2, r7, r1
 80017ac:	23a0      	movs	r3, #160	; 0xa0
 80017ae:	05db      	lsls	r3, r3, #23
 80017b0:	0011      	movs	r1, r2
 80017b2:	0018      	movs	r0, r3
 80017b4:	f002 f81e 	bl	80037f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017b8:	46c0      	nop			; (mov r8, r8)
 80017ba:	46bd      	mov	sp, r7
 80017bc:	b00b      	add	sp, #44	; 0x2c
 80017be:	bd90      	pop	{r4, r7, pc}
 80017c0:	40013000 	.word	0x40013000
 80017c4:	40021000 	.word	0x40021000
 80017c8:	00000824 	.word	0x00000824

080017cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017d2:	4b15      	ldr	r3, [pc, #84]	; (8001828 <HAL_MspInit+0x5c>)
 80017d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017d6:	4b14      	ldr	r3, [pc, #80]	; (8001828 <HAL_MspInit+0x5c>)
 80017d8:	2101      	movs	r1, #1
 80017da:	430a      	orrs	r2, r1
 80017dc:	641a      	str	r2, [r3, #64]	; 0x40
 80017de:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_MspInit+0x5c>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	2201      	movs	r2, #1
 80017e4:	4013      	ands	r3, r2
 80017e6:	607b      	str	r3, [r7, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ea:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_MspInit+0x5c>)
 80017ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_MspInit+0x5c>)
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	0549      	lsls	r1, r1, #21
 80017f4:	430a      	orrs	r2, r1
 80017f6:	63da      	str	r2, [r3, #60]	; 0x3c
 80017f8:	4b0b      	ldr	r3, [pc, #44]	; (8001828 <HAL_MspInit+0x5c>)
 80017fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80017fc:	2380      	movs	r3, #128	; 0x80
 80017fe:	055b      	lsls	r3, r3, #21
 8001800:	4013      	ands	r3, r2
 8001802:	603b      	str	r3, [r7, #0]
 8001804:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8001806:	2302      	movs	r3, #2
 8001808:	425b      	negs	r3, r3
 800180a:	2200      	movs	r2, #0
 800180c:	2103      	movs	r1, #3
 800180e:	0018      	movs	r0, r3
 8001810:	f001 fd78 	bl	8003304 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001814:	23c0      	movs	r3, #192	; 0xc0
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	0018      	movs	r0, r3
 800181a:	f001 f857 	bl	80028cc <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800181e:	46c0      	nop			; (mov r8, r8)
 8001820:	46bd      	mov	sp, r7
 8001822:	b002      	add	sp, #8
 8001824:	bd80      	pop	{r7, pc}
 8001826:	46c0      	nop			; (mov r8, r8)
 8001828:	40021000 	.word	0x40021000

0800182c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800182c:	b5b0      	push	{r4, r5, r7, lr}
 800182e:	b08c      	sub	sp, #48	; 0x30
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001834:	232b      	movs	r3, #43	; 0x2b
 8001836:	18fb      	adds	r3, r7, r3
 8001838:	2200      	movs	r2, #0
 800183a:	701a      	strb	r2, [r3, #0]

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 800183c:	4b37      	ldr	r3, [pc, #220]	; (800191c <HAL_InitTick+0xf0>)
 800183e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001840:	4b36      	ldr	r3, [pc, #216]	; (800191c <HAL_InitTick+0xf0>)
 8001842:	2120      	movs	r1, #32
 8001844:	430a      	orrs	r2, r1
 8001846:	63da      	str	r2, [r3, #60]	; 0x3c
 8001848:	4b34      	ldr	r3, [pc, #208]	; (800191c <HAL_InitTick+0xf0>)
 800184a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184c:	2220      	movs	r2, #32
 800184e:	4013      	ands	r3, r2
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001854:	230c      	movs	r3, #12
 8001856:	18fa      	adds	r2, r7, r3
 8001858:	2410      	movs	r4, #16
 800185a:	193b      	adds	r3, r7, r4
 800185c:	0011      	movs	r1, r2
 800185e:	0018      	movs	r0, r3
 8001860:	f002 fe8c 	bl	800457c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001864:	193b      	adds	r3, r7, r4
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800186a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186c:	2b00      	cmp	r3, #0
 800186e:	d104      	bne.n	800187a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001870:	f002 fe6e 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 8001874:	0003      	movs	r3, r0
 8001876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001878:	e004      	b.n	8001884 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800187a:	f002 fe69 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 800187e:	0003      	movs	r3, r0
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001886:	4926      	ldr	r1, [pc, #152]	; (8001920 <HAL_InitTick+0xf4>)
 8001888:	0018      	movs	r0, r3
 800188a:	f7fe fc47 	bl	800011c <__udivsi3>
 800188e:	0003      	movs	r3, r0
 8001890:	3b01      	subs	r3, #1
 8001892:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8001894:	4b23      	ldr	r3, [pc, #140]	; (8001924 <HAL_InitTick+0xf8>)
 8001896:	4a24      	ldr	r2, [pc, #144]	; (8001928 <HAL_InitTick+0xfc>)
 8001898:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800189a:	4b22      	ldr	r3, [pc, #136]	; (8001924 <HAL_InitTick+0xf8>)
 800189c:	4a23      	ldr	r2, [pc, #140]	; (800192c <HAL_InitTick+0x100>)
 800189e:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80018a0:	4b20      	ldr	r3, [pc, #128]	; (8001924 <HAL_InitTick+0xf8>)
 80018a2:	6a3a      	ldr	r2, [r7, #32]
 80018a4:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 80018a6:	4b1f      	ldr	r3, [pc, #124]	; (8001924 <HAL_InitTick+0xf8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_InitTick+0xf8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b2:	4b1c      	ldr	r3, [pc, #112]	; (8001924 <HAL_InitTick+0xf8>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80018b8:	252b      	movs	r5, #43	; 0x2b
 80018ba:	197c      	adds	r4, r7, r5
 80018bc:	4b19      	ldr	r3, [pc, #100]	; (8001924 <HAL_InitTick+0xf8>)
 80018be:	0018      	movs	r0, r3
 80018c0:	f003 f872 	bl	80049a8 <HAL_TIM_Base_Init>
 80018c4:	0003      	movs	r3, r0
 80018c6:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80018c8:	197b      	adds	r3, r7, r5
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d11e      	bne.n	800190e <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80018d0:	197c      	adds	r4, r7, r5
 80018d2:	4b14      	ldr	r3, [pc, #80]	; (8001924 <HAL_InitTick+0xf8>)
 80018d4:	0018      	movs	r0, r3
 80018d6:	f003 f90d 	bl	8004af4 <HAL_TIM_Base_Start_IT>
 80018da:	0003      	movs	r3, r0
 80018dc:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80018de:	197b      	adds	r3, r7, r5
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d113      	bne.n	800190e <HAL_InitTick+0xe2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80018e6:	2012      	movs	r0, #18
 80018e8:	f001 fd21 	bl	800332e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2b03      	cmp	r3, #3
 80018f0:	d809      	bhi.n	8001906 <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	0019      	movs	r1, r3
 80018f8:	2012      	movs	r0, #18
 80018fa:	f001 fd03 	bl	8003304 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018fe:	4b0c      	ldr	r3, [pc, #48]	; (8001930 <HAL_InitTick+0x104>)
 8001900:	687a      	ldr	r2, [r7, #4]
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	e003      	b.n	800190e <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 8001906:	232b      	movs	r3, #43	; 0x2b
 8001908:	18fb      	adds	r3, r7, r3
 800190a:	2201      	movs	r2, #1
 800190c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 800190e:	232b      	movs	r3, #43	; 0x2b
 8001910:	18fb      	adds	r3, r7, r3
 8001912:	781b      	ldrb	r3, [r3, #0]
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	b00c      	add	sp, #48	; 0x30
 800191a:	bdb0      	pop	{r4, r5, r7, pc}
 800191c:	40021000 	.word	0x40021000
 8001920:	000f4240 	.word	0x000f4240
 8001924:	2000337c 	.word	0x2000337c
 8001928:	40001400 	.word	0x40001400
 800192c:	000003e7 	.word	0x000003e7
 8001930:	20000004 	.word	0x20000004

08001934 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001938:	e7fe      	b.n	8001938 <NMI_Handler+0x4>

0800193a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800193a:	b580      	push	{r7, lr}
 800193c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800193e:	e7fe      	b.n	800193e <HardFault_Handler+0x4>

08001940 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton1_Pin);
 8001944:	2001      	movs	r0, #1
 8001946:	f002 f8d7 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 800194a:	46c0      	nop			; (mov r8, r8)
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}

08001950 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton2_Pin);
 8001954:	2008      	movs	r0, #8
 8001956:	f002 f8cf 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 800195a:	46c0      	nop			; (mov r8, r8)
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton3_Pin);
 8001964:	2010      	movs	r0, #16
 8001966:	f002 f8c7 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact4_Pin);
 800196a:	2020      	movs	r0, #32
 800196c:	f002 f8c4 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure1_Pin);
 8001970:	2380      	movs	r3, #128	; 0x80
 8001972:	005b      	lsls	r3, r3, #1
 8001974:	0018      	movs	r0, r3
 8001976:	f002 f8bf 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure2_Pin);
 800197a:	2380      	movs	r3, #128	; 0x80
 800197c:	009b      	lsls	r3, r3, #2
 800197e:	0018      	movs	r0, r3
 8001980:	f002 f8ba 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact1_Pin);
 8001984:	2380      	movs	r3, #128	; 0x80
 8001986:	019b      	lsls	r3, r3, #6
 8001988:	0018      	movs	r0, r3
 800198a:	f002 f8b5 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact2_Pin);
 800198e:	2380      	movs	r3, #128	; 0x80
 8001990:	01db      	lsls	r3, r3, #7
 8001992:	0018      	movs	r0, r3
 8001994:	f002 f8b0 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact3_Pin);
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	021b      	lsls	r3, r3, #8
 800199c:	0018      	movs	r0, r3
 800199e:	f002 f8ab 	bl	8003af8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019ac:	4b03      	ldr	r3, [pc, #12]	; (80019bc <DMA1_Channel1_IRQHandler+0x14>)
 80019ae:	0018      	movs	r0, r3
 80019b0:	f001 fdde 	bl	8003570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019b4:	46c0      	nop			; (mov r8, r8)
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	200000ec 	.word	0x200000ec

080019c0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80019c4:	4b03      	ldr	r3, [pc, #12]	; (80019d4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80019c6:	0018      	movs	r0, r3
 80019c8:	f001 fdd2 	bl	8003570 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80019cc:	46c0      	nop			; (mov r8, r8)
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
 80019d2:	46c0      	nop			; (mov r8, r8)
 80019d4:	20003708 	.word	0x20003708

080019d8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019dc:	4b03      	ldr	r3, [pc, #12]	; (80019ec <TIM1_CC_IRQHandler+0x14>)
 80019de:	0018      	movs	r0, r3
 80019e0:	f003 fc12 	bl	8005208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	46c0      	nop			; (mov r8, r8)
 80019ec:	200033cc 	.word	0x200033cc

080019f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019f4:	4b03      	ldr	r3, [pc, #12]	; (8001a04 <TIM3_IRQHandler+0x14>)
 80019f6:	0018      	movs	r0, r3
 80019f8:	f003 fc06 	bl	8005208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019fc:	46c0      	nop			; (mov r8, r8)
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	20003418 	.word	0x20003418

08001a08 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001a0c:	4b03      	ldr	r3, [pc, #12]	; (8001a1c <TIM7_IRQHandler+0x14>)
 8001a0e:	0018      	movs	r0, r3
 8001a10:	f003 fbfa 	bl	8005208 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8001a14:	46c0      	nop			; (mov r8, r8)
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	46c0      	nop			; (mov r8, r8)
 8001a1c:	2000337c 	.word	0x2000337c

08001a20 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	60f8      	str	r0, [r7, #12]
 8001a28:	60b9      	str	r1, [r7, #8]
 8001a2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	617b      	str	r3, [r7, #20]
 8001a30:	e00a      	b.n	8001a48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a32:	e000      	b.n	8001a36 <_read+0x16>
 8001a34:	bf00      	nop
 8001a36:	0001      	movs	r1, r0
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	1c5a      	adds	r2, r3, #1
 8001a3c:	60ba      	str	r2, [r7, #8]
 8001a3e:	b2ca      	uxtb	r2, r1
 8001a40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	3301      	adds	r3, #1
 8001a46:	617b      	str	r3, [r7, #20]
 8001a48:	697a      	ldr	r2, [r7, #20]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	dbf0      	blt.n	8001a32 <_read+0x12>
  }

  return len;
 8001a50:	687b      	ldr	r3, [r7, #4]
}
 8001a52:	0018      	movs	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	b006      	add	sp, #24
 8001a58:	bd80      	pop	{r7, pc}

08001a5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a5a:	b580      	push	{r7, lr}
 8001a5c:	b086      	sub	sp, #24
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a66:	2300      	movs	r3, #0
 8001a68:	617b      	str	r3, [r7, #20]
 8001a6a:	e009      	b.n	8001a80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	1c5a      	adds	r2, r3, #1
 8001a70:	60ba      	str	r2, [r7, #8]
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	0018      	movs	r0, r3
 8001a76:	f7ff f8c9 	bl	8000c0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	3301      	adds	r3, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	429a      	cmp	r2, r3
 8001a86:	dbf1      	blt.n	8001a6c <_write+0x12>
  }
  return len;
 8001a88:	687b      	ldr	r3, [r7, #4]
}
 8001a8a:	0018      	movs	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	b006      	add	sp, #24
 8001a90:	bd80      	pop	{r7, pc}

08001a92 <_close>:

int _close(int file)
{
 8001a92:	b580      	push	{r7, lr}
 8001a94:	b082      	sub	sp, #8
 8001a96:	af00      	add	r7, sp, #0
 8001a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	425b      	negs	r3, r3
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b002      	add	sp, #8
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
 8001aae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2280      	movs	r2, #128	; 0x80
 8001ab4:	0192      	lsls	r2, r2, #6
 8001ab6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	0018      	movs	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	b002      	add	sp, #8
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <_isatty>:

int _isatty(int file)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001aca:	2301      	movs	r3, #1
}
 8001acc:	0018      	movs	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b002      	add	sp, #8
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	60f8      	str	r0, [r7, #12]
 8001adc:	60b9      	str	r1, [r7, #8]
 8001ade:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	0018      	movs	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	b004      	add	sp, #16
 8001ae8:	bd80      	pop	{r7, pc}
	...

08001aec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001af4:	4a14      	ldr	r2, [pc, #80]	; (8001b48 <_sbrk+0x5c>)
 8001af6:	4b15      	ldr	r3, [pc, #84]	; (8001b4c <_sbrk+0x60>)
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b00:	4b13      	ldr	r3, [pc, #76]	; (8001b50 <_sbrk+0x64>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d102      	bne.n	8001b0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b08:	4b11      	ldr	r3, [pc, #68]	; (8001b50 <_sbrk+0x64>)
 8001b0a:	4a12      	ldr	r2, [pc, #72]	; (8001b54 <_sbrk+0x68>)
 8001b0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b0e:	4b10      	ldr	r3, [pc, #64]	; (8001b50 <_sbrk+0x64>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	18d3      	adds	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d207      	bcs.n	8001b2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b1c:	f009 f9ce 	bl	800aebc <__errno>
 8001b20:	0003      	movs	r3, r0
 8001b22:	220c      	movs	r2, #12
 8001b24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b26:	2301      	movs	r3, #1
 8001b28:	425b      	negs	r3, r3
 8001b2a:	e009      	b.n	8001b40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b2c:	4b08      	ldr	r3, [pc, #32]	; (8001b50 <_sbrk+0x64>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b32:	4b07      	ldr	r3, [pc, #28]	; (8001b50 <_sbrk+0x64>)
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	18d2      	adds	r2, r2, r3
 8001b3a:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <_sbrk+0x64>)
 8001b3c:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b006      	add	sp, #24
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20009000 	.word	0x20009000
 8001b4c:	00000400 	.word	0x00000400
 8001b50:	200033c8 	.word	0x200033c8
 8001b54:	20008820 	.word	0x20008820

08001b58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	46c0      	nop			; (mov r8, r8)
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}
	...

08001b64 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b64:	b590      	push	{r4, r7, lr}
 8001b66:	b08d      	sub	sp, #52	; 0x34
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b6a:	240c      	movs	r4, #12
 8001b6c:	193b      	adds	r3, r7, r4
 8001b6e:	0018      	movs	r0, r3
 8001b70:	2324      	movs	r3, #36	; 0x24
 8001b72:	001a      	movs	r2, r3
 8001b74:	2100      	movs	r1, #0
 8001b76:	f009 f94b 	bl	800ae10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b7a:	003b      	movs	r3, r7
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	230c      	movs	r3, #12
 8001b80:	001a      	movs	r2, r3
 8001b82:	2100      	movs	r1, #0
 8001b84:	f009 f944 	bl	800ae10 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b88:	4b28      	ldr	r3, [pc, #160]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001b8a:	4a29      	ldr	r2, [pc, #164]	; (8001c30 <MX_TIM1_Init+0xcc>)
 8001b8c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b8e:	4b27      	ldr	r3, [pc, #156]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b94:	4b25      	ldr	r3, [pc, #148]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001b9c:	4a25      	ldr	r2, [pc, #148]	; (8001c34 <MX_TIM1_Init+0xd0>)
 8001b9e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba0:	4b22      	ldr	r3, [pc, #136]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bac:	4b1f      	ldr	r3, [pc, #124]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bb2:	0021      	movs	r1, r4
 8001bb4:	187b      	adds	r3, r7, r1
 8001bb6:	2203      	movs	r2, #3
 8001bb8:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001bba:	187b      	adds	r3, r7, r1
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bc0:	187b      	adds	r3, r7, r1
 8001bc2:	2201      	movs	r2, #1
 8001bc4:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bc6:	187b      	adds	r3, r7, r1
 8001bc8:	2200      	movs	r2, #0
 8001bca:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001bcc:	187b      	adds	r3, r7, r1
 8001bce:	2200      	movs	r2, #0
 8001bd0:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001bd2:	187b      	adds	r3, r7, r1
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bd8:	187b      	adds	r3, r7, r1
 8001bda:	2201      	movs	r2, #1
 8001bdc:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bde:	187b      	adds	r3, r7, r1
 8001be0:	2200      	movs	r2, #0
 8001be2:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001be4:	187b      	adds	r3, r7, r1
 8001be6:	2200      	movs	r2, #0
 8001be8:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001bea:	187a      	adds	r2, r7, r1
 8001bec:	4b0f      	ldr	r3, [pc, #60]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001bee:	0011      	movs	r1, r2
 8001bf0:	0018      	movs	r0, r3
 8001bf2:	f003 f99d 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8001bf6:	1e03      	subs	r3, r0, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001bfa:	f7ff fd57 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfe:	003b      	movs	r3, r7
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c04:	003b      	movs	r3, r7
 8001c06:	2200      	movs	r2, #0
 8001c08:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c0a:	003b      	movs	r3, r7
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c10:	003a      	movs	r2, r7
 8001c12:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <MX_TIM1_Init+0xc8>)
 8001c14:	0011      	movs	r1, r2
 8001c16:	0018      	movs	r0, r3
 8001c18:	f004 f8a6 	bl	8005d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001c1c:	1e03      	subs	r3, r0, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001c20:	f7ff fd44 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001c24:	46c0      	nop			; (mov r8, r8)
 8001c26:	46bd      	mov	sp, r7
 8001c28:	b00d      	add	sp, #52	; 0x34
 8001c2a:	bd90      	pop	{r4, r7, pc}
 8001c2c:	200033cc 	.word	0x200033cc
 8001c30:	40012c00 	.word	0x40012c00
 8001c34:	0000ffff 	.word	0x0000ffff

08001c38 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c38:	b590      	push	{r4, r7, lr}
 8001c3a:	b08d      	sub	sp, #52	; 0x34
 8001c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c3e:	240c      	movs	r4, #12
 8001c40:	193b      	adds	r3, r7, r4
 8001c42:	0018      	movs	r0, r3
 8001c44:	2324      	movs	r3, #36	; 0x24
 8001c46:	001a      	movs	r2, r3
 8001c48:	2100      	movs	r1, #0
 8001c4a:	f009 f8e1 	bl	800ae10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c4e:	003b      	movs	r3, r7
 8001c50:	0018      	movs	r0, r3
 8001c52:	230c      	movs	r3, #12
 8001c54:	001a      	movs	r2, r3
 8001c56:	2100      	movs	r1, #0
 8001c58:	f009 f8da 	bl	800ae10 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c5c:	4b25      	ldr	r3, [pc, #148]	; (8001cf4 <MX_TIM3_Init+0xbc>)
 8001c5e:	4a26      	ldr	r2, [pc, #152]	; (8001cf8 <MX_TIM3_Init+0xc0>)
 8001c60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c62:	4b24      	ldr	r3, [pc, #144]	; (8001cf4 <MX_TIM3_Init+0xbc>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c68:	4b22      	ldr	r3, [pc, #136]	; (8001cf4 <MX_TIM3_Init+0xbc>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c6e:	4b21      	ldr	r3, [pc, #132]	; (8001cf4 <MX_TIM3_Init+0xbc>)
 8001c70:	4a22      	ldr	r2, [pc, #136]	; (8001cfc <MX_TIM3_Init+0xc4>)
 8001c72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b1f      	ldr	r3, [pc, #124]	; (8001cf4 <MX_TIM3_Init+0xbc>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c7a:	4b1e      	ldr	r3, [pc, #120]	; (8001cf4 <MX_TIM3_Init+0xbc>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c80:	0021      	movs	r1, r4
 8001c82:	187b      	adds	r3, r7, r1
 8001c84:	2203      	movs	r2, #3
 8001c86:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001c88:	187b      	adds	r3, r7, r1
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c8e:	187b      	adds	r3, r7, r1
 8001c90:	2201      	movs	r2, #1
 8001c92:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c94:	187b      	adds	r3, r7, r1
 8001c96:	2200      	movs	r2, #0
 8001c98:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 8001c9a:	187b      	adds	r3, r7, r1
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001ca0:	187b      	adds	r3, r7, r1
 8001ca2:	2202      	movs	r2, #2
 8001ca4:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001ca6:	187b      	adds	r3, r7, r1
 8001ca8:	2201      	movs	r2, #1
 8001caa:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cac:	187b      	adds	r3, r7, r1
 8001cae:	2200      	movs	r2, #0
 8001cb0:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 8001cb2:	187b      	adds	r3, r7, r1
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cb8:	187a      	adds	r2, r7, r1
 8001cba:	4b0e      	ldr	r3, [pc, #56]	; (8001cf4 <MX_TIM3_Init+0xbc>)
 8001cbc:	0011      	movs	r1, r2
 8001cbe:	0018      	movs	r0, r3
 8001cc0:	f003 f936 	bl	8004f30 <HAL_TIM_Encoder_Init>
 8001cc4:	1e03      	subs	r3, r0, #0
 8001cc6:	d001      	beq.n	8001ccc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001cc8:	f7ff fcf0 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ccc:	003b      	movs	r3, r7
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cd2:	003b      	movs	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cd8:	003a      	movs	r2, r7
 8001cda:	4b06      	ldr	r3, [pc, #24]	; (8001cf4 <MX_TIM3_Init+0xbc>)
 8001cdc:	0011      	movs	r1, r2
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f004 f842 	bl	8005d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001ce4:	1e03      	subs	r3, r0, #0
 8001ce6:	d001      	beq.n	8001cec <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001ce8:	f7ff fce0 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cec:	46c0      	nop			; (mov r8, r8)
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	b00d      	add	sp, #52	; 0x34
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	20003418 	.word	0x20003418
 8001cf8:	40000400 	.word	0x40000400
 8001cfc:	0000ffff 	.word	0x0000ffff

08001d00 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d06:	1d3b      	adds	r3, r7, #4
 8001d08:	0018      	movs	r0, r3
 8001d0a:	230c      	movs	r3, #12
 8001d0c:	001a      	movs	r2, r3
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f009 f87e 	bl	800ae10 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001d14:	4b15      	ldr	r3, [pc, #84]	; (8001d6c <MX_TIM6_Init+0x6c>)
 8001d16:	4a16      	ldr	r2, [pc, #88]	; (8001d70 <MX_TIM6_Init+0x70>)
 8001d18:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 8001d1a:	4b14      	ldr	r3, [pc, #80]	; (8001d6c <MX_TIM6_Init+0x6c>)
 8001d1c:	4a15      	ldr	r2, [pc, #84]	; (8001d74 <MX_TIM6_Init+0x74>)
 8001d1e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d20:	4b12      	ldr	r3, [pc, #72]	; (8001d6c <MX_TIM6_Init+0x6c>)
 8001d22:	2200      	movs	r2, #0
 8001d24:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <MX_TIM6_Init+0x6c>)
 8001d28:	2263      	movs	r2, #99	; 0x63
 8001d2a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	; (8001d6c <MX_TIM6_Init+0x6c>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001d32:	4b0e      	ldr	r3, [pc, #56]	; (8001d6c <MX_TIM6_Init+0x6c>)
 8001d34:	0018      	movs	r0, r3
 8001d36:	f002 fe37 	bl	80049a8 <HAL_TIM_Base_Init>
 8001d3a:	1e03      	subs	r3, r0, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001d3e:	f7ff fcb5 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	2220      	movs	r2, #32
 8001d46:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001d4e:	1d3a      	adds	r2, r7, #4
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <MX_TIM6_Init+0x6c>)
 8001d52:	0011      	movs	r1, r2
 8001d54:	0018      	movs	r0, r3
 8001d56:	f004 f807 	bl	8005d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5a:	1e03      	subs	r3, r0, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001d5e:	f7ff fca5 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001d62:	46c0      	nop			; (mov r8, r8)
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b004      	add	sp, #16
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)
 8001d6c:	20003464 	.word	0x20003464
 8001d70:	40001000 	.word	0x40001000
 8001d74:	0000f9ff 	.word	0x0000f9ff

08001d78 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	0018      	movs	r0, r3
 8001d82:	231c      	movs	r3, #28
 8001d84:	001a      	movs	r2, r3
 8001d86:	2100      	movs	r1, #0
 8001d88:	f009 f842 	bl	800ae10 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001d8c:	4b1f      	ldr	r3, [pc, #124]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001d8e:	4a20      	ldr	r2, [pc, #128]	; (8001e10 <MX_TIM14_Init+0x98>)
 8001d90:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001d92:	4b1e      	ldr	r3, [pc, #120]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001d94:	2200      	movs	r2, #0
 8001d96:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d98:	4b1c      	ldr	r3, [pc, #112]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001d9e:	4b1b      	ldr	r3, [pc, #108]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001da0:	4a1c      	ldr	r2, [pc, #112]	; (8001e14 <MX_TIM14_Init+0x9c>)
 8001da2:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da4:	4b19      	ldr	r3, [pc, #100]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001da6:	2200      	movs	r2, #0
 8001da8:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001daa:	4b18      	ldr	r3, [pc, #96]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001db0:	4b16      	ldr	r3, [pc, #88]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001db2:	0018      	movs	r0, r3
 8001db4:	f002 fdf8 	bl	80049a8 <HAL_TIM_Base_Init>
 8001db8:	1e03      	subs	r3, r0, #0
 8001dba:	d001      	beq.n	8001dc0 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001dbc:	f7ff fc76 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001dc2:	0018      	movs	r0, r3
 8001dc4:	f002 feec 	bl	8004ba0 <HAL_TIM_PWM_Init>
 8001dc8:	1e03      	subs	r3, r0, #0
 8001dca:	d001      	beq.n	8001dd0 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001dcc:	f7ff fc6e 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2260      	movs	r2, #96	; 0x60
 8001dd4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001dd6:	1d3b      	adds	r3, r7, #4
 8001dd8:	2200      	movs	r2, #0
 8001dda:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2200      	movs	r2, #0
 8001de0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	2200      	movs	r2, #0
 8001de6:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001de8:	1d39      	adds	r1, r7, #4
 8001dea:	4b08      	ldr	r3, [pc, #32]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	0018      	movs	r0, r3
 8001df0:	f003 fb3c 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 8001df4:	1e03      	subs	r3, r0, #0
 8001df6:	d001      	beq.n	8001dfc <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001df8:	f7ff fc58 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001dfc:	4b03      	ldr	r3, [pc, #12]	; (8001e0c <MX_TIM14_Init+0x94>)
 8001dfe:	0018      	movs	r0, r3
 8001e00:	f000 fad2 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b008      	add	sp, #32
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	200034b0 	.word	0x200034b0
 8001e10:	40002000 	.word	0x40002000
 8001e14:	0000ffff 	.word	0x0000ffff

08001e18 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b098      	sub	sp, #96	; 0x60
 8001e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1e:	2354      	movs	r3, #84	; 0x54
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	0018      	movs	r0, r3
 8001e24:	230c      	movs	r3, #12
 8001e26:	001a      	movs	r2, r3
 8001e28:	2100      	movs	r1, #0
 8001e2a:	f008 fff1 	bl	800ae10 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e2e:	2338      	movs	r3, #56	; 0x38
 8001e30:	18fb      	adds	r3, r7, r3
 8001e32:	0018      	movs	r0, r3
 8001e34:	231c      	movs	r3, #28
 8001e36:	001a      	movs	r2, r3
 8001e38:	2100      	movs	r1, #0
 8001e3a:	f008 ffe9 	bl	800ae10 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e3e:	1d3b      	adds	r3, r7, #4
 8001e40:	0018      	movs	r0, r3
 8001e42:	2334      	movs	r3, #52	; 0x34
 8001e44:	001a      	movs	r2, r3
 8001e46:	2100      	movs	r1, #0
 8001e48:	f008 ffe2 	bl	800ae10 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001e4c:	4b41      	ldr	r3, [pc, #260]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e4e:	4a42      	ldr	r2, [pc, #264]	; (8001f58 <MX_TIM15_Init+0x140>)
 8001e50:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 8001e52:	4b40      	ldr	r3, [pc, #256]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e54:	2213      	movs	r2, #19
 8001e56:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e58:	4b3e      	ldr	r3, [pc, #248]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001e5e:	4b3d      	ldr	r3, [pc, #244]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e60:	4a3e      	ldr	r2, [pc, #248]	; (8001f5c <MX_TIM15_Init+0x144>)
 8001e62:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e64:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001e6a:	4b3a      	ldr	r3, [pc, #232]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e70:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001e76:	4b37      	ldr	r3, [pc, #220]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e78:	0018      	movs	r0, r3
 8001e7a:	f002 fe91 	bl	8004ba0 <HAL_TIM_PWM_Init>
 8001e7e:	1e03      	subs	r3, r0, #0
 8001e80:	d001      	beq.n	8001e86 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001e82:	f7ff fc13 	bl	80016ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e86:	2154      	movs	r1, #84	; 0x54
 8001e88:	187b      	adds	r3, r7, r1
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8e:	187b      	adds	r3, r7, r1
 8001e90:	2200      	movs	r2, #0
 8001e92:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001e94:	187a      	adds	r2, r7, r1
 8001e96:	4b2f      	ldr	r3, [pc, #188]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001e98:	0011      	movs	r1, r2
 8001e9a:	0018      	movs	r0, r3
 8001e9c:	f003 ff64 	bl	8005d68 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	1e03      	subs	r3, r0, #0
 8001ea2:	d001      	beq.n	8001ea8 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001ea4:	f7ff fc02 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ea8:	2138      	movs	r1, #56	; 0x38
 8001eaa:	187b      	adds	r3, r7, r1
 8001eac:	2260      	movs	r2, #96	; 0x60
 8001eae:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001eb0:	187b      	adds	r3, r7, r1
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001eb6:	187b      	adds	r3, r7, r1
 8001eb8:	2200      	movs	r2, #0
 8001eba:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ebc:	187b      	adds	r3, r7, r1
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec2:	187b      	adds	r3, r7, r1
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ec8:	187b      	adds	r3, r7, r1
 8001eca:	2200      	movs	r2, #0
 8001ecc:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ece:	187b      	adds	r3, r7, r1
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ed4:	1879      	adds	r1, r7, r1
 8001ed6:	4b1f      	ldr	r3, [pc, #124]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001ed8:	2200      	movs	r2, #0
 8001eda:	0018      	movs	r0, r3
 8001edc:	f003 fac6 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 8001ee0:	1e03      	subs	r3, r0, #0
 8001ee2:	d001      	beq.n	8001ee8 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001ee4:	f7ff fbe2 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ee8:	2338      	movs	r3, #56	; 0x38
 8001eea:	18f9      	adds	r1, r7, r3
 8001eec:	4b19      	ldr	r3, [pc, #100]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001eee:	2204      	movs	r2, #4
 8001ef0:	0018      	movs	r0, r3
 8001ef2:	f003 fabb 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 8001ef6:	1e03      	subs	r3, r0, #0
 8001ef8:	d001      	beq.n	8001efe <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8001efa:	f7ff fbd7 	bl	80016ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001efe:	1d3b      	adds	r3, r7, #4
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f04:	1d3b      	adds	r3, r7, #4
 8001f06:	2200      	movs	r2, #0
 8001f08:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f0a:	1d3b      	adds	r3, r7, #4
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001f10:	1d3b      	adds	r3, r7, #4
 8001f12:	2200      	movs	r2, #0
 8001f14:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f16:	1d3b      	adds	r3, r7, #4
 8001f18:	2200      	movs	r2, #0
 8001f1a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f1c:	1d3b      	adds	r3, r7, #4
 8001f1e:	2280      	movs	r2, #128	; 0x80
 8001f20:	0192      	lsls	r2, r2, #6
 8001f22:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001f24:	1d3b      	adds	r3, r7, #4
 8001f26:	2200      	movs	r2, #0
 8001f28:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001f30:	1d3a      	adds	r2, r7, #4
 8001f32:	4b08      	ldr	r3, [pc, #32]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001f34:	0011      	movs	r1, r2
 8001f36:	0018      	movs	r0, r3
 8001f38:	f003 ff7e 	bl	8005e38 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f3c:	1e03      	subs	r3, r0, #0
 8001f3e:	d001      	beq.n	8001f44 <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001f40:	f7ff fbb4 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001f44:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <MX_TIM15_Init+0x13c>)
 8001f46:	0018      	movs	r0, r3
 8001f48:	f000 fa2e 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 8001f4c:	46c0      	nop			; (mov r8, r8)
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	b018      	add	sp, #96	; 0x60
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	200034fc 	.word	0x200034fc
 8001f58:	40014000 	.word	0x40014000
 8001f5c:	000003e7 	.word	0x000003e7

08001f60 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b094      	sub	sp, #80	; 0x50
 8001f64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f66:	2334      	movs	r3, #52	; 0x34
 8001f68:	18fb      	adds	r3, r7, r3
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	231c      	movs	r3, #28
 8001f6e:	001a      	movs	r2, r3
 8001f70:	2100      	movs	r1, #0
 8001f72:	f008 ff4d 	bl	800ae10 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f76:	003b      	movs	r3, r7
 8001f78:	0018      	movs	r0, r3
 8001f7a:	2334      	movs	r3, #52	; 0x34
 8001f7c:	001a      	movs	r2, r3
 8001f7e:	2100      	movs	r1, #0
 8001f80:	f008 ff46 	bl	800ae10 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001f84:	4b37      	ldr	r3, [pc, #220]	; (8002064 <MX_TIM16_Init+0x104>)
 8001f86:	4a38      	ldr	r2, [pc, #224]	; (8002068 <MX_TIM16_Init+0x108>)
 8001f88:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8001f8a:	4b36      	ldr	r3, [pc, #216]	; (8002064 <MX_TIM16_Init+0x104>)
 8001f8c:	2213      	movs	r2, #19
 8001f8e:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f90:	4b34      	ldr	r3, [pc, #208]	; (8002064 <MX_TIM16_Init+0x104>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001f96:	4b33      	ldr	r3, [pc, #204]	; (8002064 <MX_TIM16_Init+0x104>)
 8001f98:	4a34      	ldr	r2, [pc, #208]	; (800206c <MX_TIM16_Init+0x10c>)
 8001f9a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f9c:	4b31      	ldr	r3, [pc, #196]	; (8002064 <MX_TIM16_Init+0x104>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <MX_TIM16_Init+0x104>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fa8:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <MX_TIM16_Init+0x104>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001fae:	4b2d      	ldr	r3, [pc, #180]	; (8002064 <MX_TIM16_Init+0x104>)
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	f002 fcf9 	bl	80049a8 <HAL_TIM_Base_Init>
 8001fb6:	1e03      	subs	r3, r0, #0
 8001fb8:	d001      	beq.n	8001fbe <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001fba:	f7ff fb77 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001fbe:	4b29      	ldr	r3, [pc, #164]	; (8002064 <MX_TIM16_Init+0x104>)
 8001fc0:	0018      	movs	r0, r3
 8001fc2:	f002 fded 	bl	8004ba0 <HAL_TIM_PWM_Init>
 8001fc6:	1e03      	subs	r3, r0, #0
 8001fc8:	d001      	beq.n	8001fce <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001fca:	f7ff fb6f 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fce:	2134      	movs	r1, #52	; 0x34
 8001fd0:	187b      	adds	r3, r7, r1
 8001fd2:	2260      	movs	r2, #96	; 0x60
 8001fd4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001fd6:	187b      	adds	r3, r7, r1
 8001fd8:	2200      	movs	r2, #0
 8001fda:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fdc:	187b      	adds	r3, r7, r1
 8001fde:	2200      	movs	r2, #0
 8001fe0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fe2:	187b      	adds	r3, r7, r1
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fe8:	187b      	adds	r3, r7, r1
 8001fea:	2200      	movs	r2, #0
 8001fec:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fee:	187b      	adds	r3, r7, r1
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ff4:	187b      	adds	r3, r7, r1
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ffa:	1879      	adds	r1, r7, r1
 8001ffc:	4b19      	ldr	r3, [pc, #100]	; (8002064 <MX_TIM16_Init+0x104>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	0018      	movs	r0, r3
 8002002:	f003 fa33 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 8002006:	1e03      	subs	r3, r0, #0
 8002008:	d001      	beq.n	800200e <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 800200a:	f7ff fb4f 	bl	80016ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800200e:	003b      	movs	r3, r7
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002014:	003b      	movs	r3, r7
 8002016:	2200      	movs	r2, #0
 8002018:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201a:	003b      	movs	r3, r7
 800201c:	2200      	movs	r2, #0
 800201e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002020:	003b      	movs	r3, r7
 8002022:	2200      	movs	r2, #0
 8002024:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002026:	003b      	movs	r3, r7
 8002028:	2200      	movs	r2, #0
 800202a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202c:	003b      	movs	r3, r7
 800202e:	2280      	movs	r2, #128	; 0x80
 8002030:	0192      	lsls	r2, r2, #6
 8002032:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002034:	003b      	movs	r3, r7
 8002036:	2200      	movs	r2, #0
 8002038:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800203a:	003b      	movs	r3, r7
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8002040:	003a      	movs	r2, r7
 8002042:	4b08      	ldr	r3, [pc, #32]	; (8002064 <MX_TIM16_Init+0x104>)
 8002044:	0011      	movs	r1, r2
 8002046:	0018      	movs	r0, r3
 8002048:	f003 fef6 	bl	8005e38 <HAL_TIMEx_ConfigBreakDeadTime>
 800204c:	1e03      	subs	r3, r0, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8002050:	f7ff fb2c 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8002054:	4b03      	ldr	r3, [pc, #12]	; (8002064 <MX_TIM16_Init+0x104>)
 8002056:	0018      	movs	r0, r3
 8002058:	f000 f9a6 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 800205c:	46c0      	nop			; (mov r8, r8)
 800205e:	46bd      	mov	sp, r7
 8002060:	b014      	add	sp, #80	; 0x50
 8002062:	bd80      	pop	{r7, pc}
 8002064:	20003548 	.word	0x20003548
 8002068:	40014400 	.word	0x40014400
 800206c:	000003e7 	.word	0x000003e7

08002070 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b094      	sub	sp, #80	; 0x50
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002076:	2334      	movs	r3, #52	; 0x34
 8002078:	18fb      	adds	r3, r7, r3
 800207a:	0018      	movs	r0, r3
 800207c:	231c      	movs	r3, #28
 800207e:	001a      	movs	r2, r3
 8002080:	2100      	movs	r1, #0
 8002082:	f008 fec5 	bl	800ae10 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002086:	003b      	movs	r3, r7
 8002088:	0018      	movs	r0, r3
 800208a:	2334      	movs	r3, #52	; 0x34
 800208c:	001a      	movs	r2, r3
 800208e:	2100      	movs	r1, #0
 8002090:	f008 febe 	bl	800ae10 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8002094:	4b37      	ldr	r3, [pc, #220]	; (8002174 <MX_TIM17_Init+0x104>)
 8002096:	4a38      	ldr	r2, [pc, #224]	; (8002178 <MX_TIM17_Init+0x108>)
 8002098:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 800209a:	4b36      	ldr	r3, [pc, #216]	; (8002174 <MX_TIM17_Init+0x104>)
 800209c:	2213      	movs	r2, #19
 800209e:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020a0:	4b34      	ldr	r3, [pc, #208]	; (8002174 <MX_TIM17_Init+0x104>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 80020a6:	4b33      	ldr	r3, [pc, #204]	; (8002174 <MX_TIM17_Init+0x104>)
 80020a8:	4a34      	ldr	r2, [pc, #208]	; (800217c <MX_TIM17_Init+0x10c>)
 80020aa:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020ac:	4b31      	ldr	r3, [pc, #196]	; (8002174 <MX_TIM17_Init+0x104>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80020b2:	4b30      	ldr	r3, [pc, #192]	; (8002174 <MX_TIM17_Init+0x104>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020b8:	4b2e      	ldr	r3, [pc, #184]	; (8002174 <MX_TIM17_Init+0x104>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80020be:	4b2d      	ldr	r3, [pc, #180]	; (8002174 <MX_TIM17_Init+0x104>)
 80020c0:	0018      	movs	r0, r3
 80020c2:	f002 fc71 	bl	80049a8 <HAL_TIM_Base_Init>
 80020c6:	1e03      	subs	r3, r0, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 80020ca:	f7ff faef 	bl	80016ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80020ce:	4b29      	ldr	r3, [pc, #164]	; (8002174 <MX_TIM17_Init+0x104>)
 80020d0:	0018      	movs	r0, r3
 80020d2:	f002 fd65 	bl	8004ba0 <HAL_TIM_PWM_Init>
 80020d6:	1e03      	subs	r3, r0, #0
 80020d8:	d001      	beq.n	80020de <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 80020da:	f7ff fae7 	bl	80016ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020de:	2134      	movs	r1, #52	; 0x34
 80020e0:	187b      	adds	r3, r7, r1
 80020e2:	2260      	movs	r2, #96	; 0x60
 80020e4:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80020e6:	187b      	adds	r3, r7, r1
 80020e8:	2200      	movs	r2, #0
 80020ea:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020ec:	187b      	adds	r3, r7, r1
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80020f2:	187b      	adds	r3, r7, r1
 80020f4:	2200      	movs	r2, #0
 80020f6:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020f8:	187b      	adds	r3, r7, r1
 80020fa:	2200      	movs	r2, #0
 80020fc:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020fe:	187b      	adds	r3, r7, r1
 8002100:	2200      	movs	r2, #0
 8002102:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002104:	187b      	adds	r3, r7, r1
 8002106:	2200      	movs	r2, #0
 8002108:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800210a:	1879      	adds	r1, r7, r1
 800210c:	4b19      	ldr	r3, [pc, #100]	; (8002174 <MX_TIM17_Init+0x104>)
 800210e:	2200      	movs	r2, #0
 8002110:	0018      	movs	r0, r3
 8002112:	f003 f9ab 	bl	800546c <HAL_TIM_PWM_ConfigChannel>
 8002116:	1e03      	subs	r3, r0, #0
 8002118:	d001      	beq.n	800211e <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 800211a:	f7ff fac7 	bl	80016ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800211e:	003b      	movs	r3, r7
 8002120:	2200      	movs	r2, #0
 8002122:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002124:	003b      	movs	r3, r7
 8002126:	2200      	movs	r2, #0
 8002128:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800212a:	003b      	movs	r3, r7
 800212c:	2200      	movs	r2, #0
 800212e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002130:	003b      	movs	r3, r7
 8002132:	2200      	movs	r2, #0
 8002134:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002136:	003b      	movs	r3, r7
 8002138:	2200      	movs	r2, #0
 800213a:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800213c:	003b      	movs	r3, r7
 800213e:	2280      	movs	r2, #128	; 0x80
 8002140:	0192      	lsls	r2, r2, #6
 8002142:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8002144:	003b      	movs	r3, r7
 8002146:	2200      	movs	r2, #0
 8002148:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800214a:	003b      	movs	r3, r7
 800214c:	2200      	movs	r2, #0
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8002150:	003a      	movs	r2, r7
 8002152:	4b08      	ldr	r3, [pc, #32]	; (8002174 <MX_TIM17_Init+0x104>)
 8002154:	0011      	movs	r1, r2
 8002156:	0018      	movs	r0, r3
 8002158:	f003 fe6e 	bl	8005e38 <HAL_TIMEx_ConfigBreakDeadTime>
 800215c:	1e03      	subs	r3, r0, #0
 800215e:	d001      	beq.n	8002164 <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8002160:	f7ff faa4 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8002164:	4b03      	ldr	r3, [pc, #12]	; (8002174 <MX_TIM17_Init+0x104>)
 8002166:	0018      	movs	r0, r3
 8002168:	f000 f91e 	bl	80023a8 <HAL_TIM_MspPostInit>

}
 800216c:	46c0      	nop			; (mov r8, r8)
 800216e:	46bd      	mov	sp, r7
 8002170:	b014      	add	sp, #80	; 0x50
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20003594 	.word	0x20003594
 8002178:	40014800 	.word	0x40014800
 800217c:	000003e7 	.word	0x000003e7

08002180 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8002180:	b590      	push	{r4, r7, lr}
 8002182:	b08d      	sub	sp, #52	; 0x34
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002188:	241c      	movs	r4, #28
 800218a:	193b      	adds	r3, r7, r4
 800218c:	0018      	movs	r0, r3
 800218e:	2314      	movs	r3, #20
 8002190:	001a      	movs	r2, r3
 8002192:	2100      	movs	r1, #0
 8002194:	f008 fe3c 	bl	800ae10 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a3e      	ldr	r2, [pc, #248]	; (8002298 <HAL_TIM_Encoder_MspInit+0x118>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d13a      	bne.n	8002218 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021a2:	4b3e      	ldr	r3, [pc, #248]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 80021a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021a6:	4b3d      	ldr	r3, [pc, #244]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 80021a8:	2180      	movs	r1, #128	; 0x80
 80021aa:	0109      	lsls	r1, r1, #4
 80021ac:	430a      	orrs	r2, r1
 80021ae:	641a      	str	r2, [r3, #64]	; 0x40
 80021b0:	4b3a      	ldr	r3, [pc, #232]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 80021b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021b4:	2380      	movs	r3, #128	; 0x80
 80021b6:	011b      	lsls	r3, r3, #4
 80021b8:	4013      	ands	r3, r2
 80021ba:	61bb      	str	r3, [r7, #24]
 80021bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 80021c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021c2:	4b36      	ldr	r3, [pc, #216]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	430a      	orrs	r2, r1
 80021c8:	635a      	str	r2, [r3, #52]	; 0x34
 80021ca:	4b34      	ldr	r3, [pc, #208]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 80021cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ce:	2201      	movs	r2, #1
 80021d0:	4013      	ands	r3, r2
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CODEUR1_PH1_Pin|CODEUR1_PH2_Pin;
 80021d6:	193b      	adds	r3, r7, r4
 80021d8:	22c0      	movs	r2, #192	; 0xc0
 80021da:	0092      	lsls	r2, r2, #2
 80021dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021de:	0021      	movs	r1, r4
 80021e0:	187b      	adds	r3, r7, r1
 80021e2:	2202      	movs	r2, #2
 80021e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	187b      	adds	r3, r7, r1
 80021e8:	2200      	movs	r2, #0
 80021ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ec:	187b      	adds	r3, r7, r1
 80021ee:	2200      	movs	r2, #0
 80021f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80021f2:	187b      	adds	r3, r7, r1
 80021f4:	2202      	movs	r2, #2
 80021f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021f8:	187a      	adds	r2, r7, r1
 80021fa:	23a0      	movs	r3, #160	; 0xa0
 80021fc:	05db      	lsls	r3, r3, #23
 80021fe:	0011      	movs	r1, r2
 8002200:	0018      	movs	r0, r3
 8002202:	f001 faf7 	bl	80037f4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 8002206:	2200      	movs	r2, #0
 8002208:	2103      	movs	r1, #3
 800220a:	200e      	movs	r0, #14
 800220c:	f001 f87a 	bl	8003304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8002210:	200e      	movs	r0, #14
 8002212:	f001 f88c 	bl	800332e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002216:	e03a      	b.n	800228e <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a20      	ldr	r2, [pc, #128]	; (80022a0 <HAL_TIM_Encoder_MspInit+0x120>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d135      	bne.n	800228e <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002222:	4b1e      	ldr	r3, [pc, #120]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002226:	4b1d      	ldr	r3, [pc, #116]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002228:	2102      	movs	r1, #2
 800222a:	430a      	orrs	r2, r1
 800222c:	63da      	str	r2, [r3, #60]	; 0x3c
 800222e:	4b1b      	ldr	r3, [pc, #108]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002230:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002232:	2202      	movs	r2, #2
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800223a:	4b18      	ldr	r3, [pc, #96]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 800223c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800223e:	4b17      	ldr	r3, [pc, #92]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002240:	2104      	movs	r1, #4
 8002242:	430a      	orrs	r2, r1
 8002244:	635a      	str	r2, [r3, #52]	; 0x34
 8002246:	4b15      	ldr	r3, [pc, #84]	; (800229c <HAL_TIM_Encoder_MspInit+0x11c>)
 8002248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800224a:	2204      	movs	r2, #4
 800224c:	4013      	ands	r3, r2
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CODEUR2_PH1_Pin|CODEUR2_PH2_Pin;
 8002252:	211c      	movs	r1, #28
 8002254:	187b      	adds	r3, r7, r1
 8002256:	22c0      	movs	r2, #192	; 0xc0
 8002258:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800225a:	187b      	adds	r3, r7, r1
 800225c:	2202      	movs	r2, #2
 800225e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002260:	187b      	adds	r3, r7, r1
 8002262:	2200      	movs	r2, #0
 8002264:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	187b      	adds	r3, r7, r1
 8002268:	2200      	movs	r2, #0
 800226a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 800226c:	187b      	adds	r3, r7, r1
 800226e:	2201      	movs	r2, #1
 8002270:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002272:	187b      	adds	r3, r7, r1
 8002274:	4a0b      	ldr	r2, [pc, #44]	; (80022a4 <HAL_TIM_Encoder_MspInit+0x124>)
 8002276:	0019      	movs	r1, r3
 8002278:	0010      	movs	r0, r2
 800227a:	f001 fabb 	bl	80037f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 800227e:	2200      	movs	r2, #0
 8002280:	2103      	movs	r1, #3
 8002282:	2010      	movs	r0, #16
 8002284:	f001 f83e 	bl	8003304 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002288:	2010      	movs	r0, #16
 800228a:	f001 f850 	bl	800332e <HAL_NVIC_EnableIRQ>
}
 800228e:	46c0      	nop			; (mov r8, r8)
 8002290:	46bd      	mov	sp, r7
 8002292:	b00d      	add	sp, #52	; 0x34
 8002294:	bd90      	pop	{r4, r7, pc}
 8002296:	46c0      	nop			; (mov r8, r8)
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40021000 	.word	0x40021000
 80022a0:	40000400 	.word	0x40000400
 80022a4:	50000800 	.word	0x50000800

080022a8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b086      	sub	sp, #24
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a27      	ldr	r2, [pc, #156]	; (8002354 <HAL_TIM_Base_MspInit+0xac>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d10c      	bne.n	80022d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80022ba:	4b27      	ldr	r3, [pc, #156]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 80022bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022be:	4b26      	ldr	r3, [pc, #152]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 80022c0:	2110      	movs	r1, #16
 80022c2:	430a      	orrs	r2, r1
 80022c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80022c6:	4b24      	ldr	r3, [pc, #144]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 80022c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ca:	2210      	movs	r2, #16
 80022cc:	4013      	ands	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
 80022d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80022d2:	e03a      	b.n	800234a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a20      	ldr	r2, [pc, #128]	; (800235c <HAL_TIM_Base_MspInit+0xb4>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d10e      	bne.n	80022fc <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80022de:	4b1e      	ldr	r3, [pc, #120]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 80022e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022e2:	4b1d      	ldr	r3, [pc, #116]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 80022e4:	2180      	movs	r1, #128	; 0x80
 80022e6:	0209      	lsls	r1, r1, #8
 80022e8:	430a      	orrs	r2, r1
 80022ea:	641a      	str	r2, [r3, #64]	; 0x40
 80022ec:	4b1a      	ldr	r3, [pc, #104]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 80022ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80022f0:	2380      	movs	r3, #128	; 0x80
 80022f2:	021b      	lsls	r3, r3, #8
 80022f4:	4013      	ands	r3, r2
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]
}
 80022fa:	e026      	b.n	800234a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_TIM_Base_MspInit+0xb8>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d10e      	bne.n	8002324 <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8002306:	4b14      	ldr	r3, [pc, #80]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 8002308:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800230a:	4b13      	ldr	r3, [pc, #76]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 800230c:	2180      	movs	r1, #128	; 0x80
 800230e:	0289      	lsls	r1, r1, #10
 8002310:	430a      	orrs	r2, r1
 8002312:	641a      	str	r2, [r3, #64]	; 0x40
 8002314:	4b10      	ldr	r3, [pc, #64]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 8002316:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002318:	2380      	movs	r3, #128	; 0x80
 800231a:	029b      	lsls	r3, r3, #10
 800231c:	4013      	ands	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	68fb      	ldr	r3, [r7, #12]
}
 8002322:	e012      	b.n	800234a <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM17)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a0e      	ldr	r2, [pc, #56]	; (8002364 <HAL_TIM_Base_MspInit+0xbc>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d10d      	bne.n	800234a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800232e:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 8002330:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002332:	4b09      	ldr	r3, [pc, #36]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	02c9      	lsls	r1, r1, #11
 8002338:	430a      	orrs	r2, r1
 800233a:	641a      	str	r2, [r3, #64]	; 0x40
 800233c:	4b06      	ldr	r3, [pc, #24]	; (8002358 <HAL_TIM_Base_MspInit+0xb0>)
 800233e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002340:	2380      	movs	r3, #128	; 0x80
 8002342:	02db      	lsls	r3, r3, #11
 8002344:	4013      	ands	r3, r2
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
}
 800234a:	46c0      	nop			; (mov r8, r8)
 800234c:	46bd      	mov	sp, r7
 800234e:	b006      	add	sp, #24
 8002350:	bd80      	pop	{r7, pc}
 8002352:	46c0      	nop			; (mov r8, r8)
 8002354:	40001000 	.word	0x40001000
 8002358:	40021000 	.word	0x40021000
 800235c:	40002000 	.word	0x40002000
 8002360:	40014400 	.word	0x40014400
 8002364:	40014800 	.word	0x40014800

08002368 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b084      	sub	sp, #16
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4a0a      	ldr	r2, [pc, #40]	; (80023a0 <HAL_TIM_PWM_MspInit+0x38>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d10d      	bne.n	8002396 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 800237a:	4b0a      	ldr	r3, [pc, #40]	; (80023a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800237c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800237e:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_TIM_PWM_MspInit+0x3c>)
 8002380:	2180      	movs	r1, #128	; 0x80
 8002382:	0249      	lsls	r1, r1, #9
 8002384:	430a      	orrs	r2, r1
 8002386:	641a      	str	r2, [r3, #64]	; 0x40
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_TIM_PWM_MspInit+0x3c>)
 800238a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800238c:	2380      	movs	r3, #128	; 0x80
 800238e:	025b      	lsls	r3, r3, #9
 8002390:	4013      	ands	r3, r2
 8002392:	60fb      	str	r3, [r7, #12]
 8002394:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 8002396:	46c0      	nop			; (mov r8, r8)
 8002398:	46bd      	mov	sp, r7
 800239a:	b004      	add	sp, #16
 800239c:	bd80      	pop	{r7, pc}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	40014000 	.word	0x40014000
 80023a4:	40021000 	.word	0x40021000

080023a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b08d      	sub	sp, #52	; 0x34
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023b0:	241c      	movs	r4, #28
 80023b2:	193b      	adds	r3, r7, r4
 80023b4:	0018      	movs	r0, r3
 80023b6:	2314      	movs	r3, #20
 80023b8:	001a      	movs	r2, r3
 80023ba:	2100      	movs	r1, #0
 80023bc:	f008 fd28 	bl	800ae10 <memset>
  if(timHandle->Instance==TIM14)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a51      	ldr	r2, [pc, #324]	; (800250c <HAL_TIM_MspPostInit+0x164>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d123      	bne.n	8002412 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ca:	4b51      	ldr	r3, [pc, #324]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 80023cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ce:	4b50      	ldr	r3, [pc, #320]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 80023d0:	2104      	movs	r1, #4
 80023d2:	430a      	orrs	r2, r1
 80023d4:	635a      	str	r2, [r3, #52]	; 0x34
 80023d6:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 80023d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023da:	2204      	movs	r2, #4
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
 80023e0:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOT_LIDAR_Pin;
 80023e2:	193b      	adds	r3, r7, r4
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	0152      	lsls	r2, r2, #5
 80023e8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ea:	0021      	movs	r1, r4
 80023ec:	187b      	adds	r3, r7, r1
 80023ee:	2202      	movs	r2, #2
 80023f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f2:	187b      	adds	r3, r7, r1
 80023f4:	2200      	movs	r2, #0
 80023f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f8:	187b      	adds	r3, r7, r1
 80023fa:	2200      	movs	r2, #0
 80023fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 80023fe:	187b      	adds	r3, r7, r1
 8002400:	2202      	movs	r2, #2
 8002402:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT_LIDAR_GPIO_Port, &GPIO_InitStruct);
 8002404:	187b      	adds	r3, r7, r1
 8002406:	4a43      	ldr	r2, [pc, #268]	; (8002514 <HAL_TIM_MspPostInit+0x16c>)
 8002408:	0019      	movs	r1, r3
 800240a:	0010      	movs	r0, r2
 800240c:	f001 f9f2 	bl	80037f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002410:	e078      	b.n	8002504 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a40      	ldr	r2, [pc, #256]	; (8002518 <HAL_TIM_MspPostInit+0x170>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d122      	bne.n	8002462 <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800241c:	4b3c      	ldr	r3, [pc, #240]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 800241e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002420:	4b3b      	ldr	r3, [pc, #236]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 8002422:	2104      	movs	r1, #4
 8002424:	430a      	orrs	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	; 0x34
 8002428:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 800242a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800242c:	2204      	movs	r2, #4
 800242e:	4013      	ands	r3, r2
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_MOT2_PH1_Pin|PWM_MOT2_PH2_Pin;
 8002434:	211c      	movs	r1, #28
 8002436:	187b      	adds	r3, r7, r1
 8002438:	2206      	movs	r2, #6
 800243a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243c:	187b      	adds	r3, r7, r1
 800243e:	2202      	movs	r2, #2
 8002440:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	187b      	adds	r3, r7, r1
 8002444:	2200      	movs	r2, #0
 8002446:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002448:	187b      	adds	r3, r7, r1
 800244a:	2200      	movs	r2, #0
 800244c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 800244e:	187b      	adds	r3, r7, r1
 8002450:	2202      	movs	r2, #2
 8002452:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002454:	187b      	adds	r3, r7, r1
 8002456:	4a2f      	ldr	r2, [pc, #188]	; (8002514 <HAL_TIM_MspPostInit+0x16c>)
 8002458:	0019      	movs	r1, r3
 800245a:	0010      	movs	r0, r2
 800245c:	f001 f9ca 	bl	80037f4 <HAL_GPIO_Init>
}
 8002460:	e050      	b.n	8002504 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2d      	ldr	r2, [pc, #180]	; (800251c <HAL_TIM_MspPostInit+0x174>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d123      	bne.n	80024b4 <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800246c:	4b28      	ldr	r3, [pc, #160]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 800246e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002470:	4b27      	ldr	r3, [pc, #156]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 8002472:	2101      	movs	r1, #1
 8002474:	430a      	orrs	r2, r1
 8002476:	635a      	str	r2, [r3, #52]	; 0x34
 8002478:	4b25      	ldr	r3, [pc, #148]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	2201      	movs	r2, #1
 800247e:	4013      	ands	r3, r2
 8002480:	613b      	str	r3, [r7, #16]
 8002482:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_MOT1_PH1_Pin;
 8002484:	211c      	movs	r1, #28
 8002486:	187b      	adds	r3, r7, r1
 8002488:	2240      	movs	r2, #64	; 0x40
 800248a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248c:	187b      	adds	r3, r7, r1
 800248e:	2202      	movs	r2, #2
 8002490:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	187b      	adds	r3, r7, r1
 8002494:	2200      	movs	r2, #0
 8002496:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002498:	187b      	adds	r3, r7, r1
 800249a:	2200      	movs	r2, #0
 800249c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 800249e:	187b      	adds	r3, r7, r1
 80024a0:	2205      	movs	r2, #5
 80024a2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH1_GPIO_Port, &GPIO_InitStruct);
 80024a4:	187a      	adds	r2, r7, r1
 80024a6:	23a0      	movs	r3, #160	; 0xa0
 80024a8:	05db      	lsls	r3, r3, #23
 80024aa:	0011      	movs	r1, r2
 80024ac:	0018      	movs	r0, r3
 80024ae:	f001 f9a1 	bl	80037f4 <HAL_GPIO_Init>
}
 80024b2:	e027      	b.n	8002504 <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_TIM_MspPostInit+0x178>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d122      	bne.n	8002504 <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024be:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 80024c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80024c2:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	430a      	orrs	r2, r1
 80024c8:	635a      	str	r2, [r3, #52]	; 0x34
 80024ca:	4b11      	ldr	r3, [pc, #68]	; (8002510 <HAL_TIM_MspPostInit+0x168>)
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	2201      	movs	r2, #1
 80024d0:	4013      	ands	r3, r2
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOT1_PH2_Pin;
 80024d6:	211c      	movs	r1, #28
 80024d8:	187b      	adds	r3, r7, r1
 80024da:	2280      	movs	r2, #128	; 0x80
 80024dc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024de:	187b      	adds	r3, r7, r1
 80024e0:	2202      	movs	r2, #2
 80024e2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	187b      	adds	r3, r7, r1
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024ea:	187b      	adds	r3, r7, r1
 80024ec:	2200      	movs	r2, #0
 80024ee:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 80024f0:	187b      	adds	r3, r7, r1
 80024f2:	2205      	movs	r2, #5
 80024f4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH2_GPIO_Port, &GPIO_InitStruct);
 80024f6:	187a      	adds	r2, r7, r1
 80024f8:	23a0      	movs	r3, #160	; 0xa0
 80024fa:	05db      	lsls	r3, r3, #23
 80024fc:	0011      	movs	r1, r2
 80024fe:	0018      	movs	r0, r3
 8002500:	f001 f978 	bl	80037f4 <HAL_GPIO_Init>
}
 8002504:	46c0      	nop			; (mov r8, r8)
 8002506:	46bd      	mov	sp, r7
 8002508:	b00d      	add	sp, #52	; 0x34
 800250a:	bd90      	pop	{r4, r7, pc}
 800250c:	40002000 	.word	0x40002000
 8002510:	40021000 	.word	0x40021000
 8002514:	50000800 	.word	0x50000800
 8002518:	40014000 	.word	0x40014000
 800251c:	40014400 	.word	0x40014400
 8002520:	40014800 	.word	0x40014800

08002524 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 800252a:	4a24      	ldr	r2, [pc, #144]	; (80025bc <MX_USART1_UART_Init+0x98>)
 800252c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 8002530:	22e1      	movs	r2, #225	; 0xe1
 8002532:	0292      	lsls	r2, r2, #10
 8002534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b1e      	ldr	r3, [pc, #120]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002542:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 8002568:	2200      	movs	r2, #0
 800256a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 800256e:	0018      	movs	r0, r3
 8002570:	f003 fd20 	bl	8005fb4 <HAL_UART_Init>
 8002574:	1e03      	subs	r3, r0, #0
 8002576:	d001      	beq.n	800257c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002578:	f7ff f898 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 800257e:	2100      	movs	r1, #0
 8002580:	0018      	movs	r0, r3
 8002582:	f005 fe71 	bl	8008268 <HAL_UARTEx_SetTxFifoThreshold>
 8002586:	1e03      	subs	r3, r0, #0
 8002588:	d001      	beq.n	800258e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800258a:	f7ff f88f 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 8002590:	2100      	movs	r1, #0
 8002592:	0018      	movs	r0, r3
 8002594:	f005 fea8 	bl	80082e8 <HAL_UARTEx_SetRxFifoThreshold>
 8002598:	1e03      	subs	r3, r0, #0
 800259a:	d001      	beq.n	80025a0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800259c:	f7ff f886 	bl	80016ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80025a0:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <MX_USART1_UART_Init+0x94>)
 80025a2:	0018      	movs	r0, r3
 80025a4:	f005 fe26 	bl	80081f4 <HAL_UARTEx_DisableFifoMode>
 80025a8:	1e03      	subs	r3, r0, #0
 80025aa:	d001      	beq.n	80025b0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80025ac:	f7ff f87e 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80025b0:	46c0      	nop			; (mov r8, r8)
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	200035e0 	.word	0x200035e0
 80025bc:	40013800 	.word	0x40013800

080025c0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80025c4:	4b16      	ldr	r3, [pc, #88]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025c6:	4a17      	ldr	r2, [pc, #92]	; (8002624 <MX_USART4_UART_Init+0x64>)
 80025c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025cc:	22fa      	movs	r2, #250	; 0xfa
 80025ce:	0252      	lsls	r2, r2, #9
 80025d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80025d2:	4b13      	ldr	r3, [pc, #76]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80025d8:	4b11      	ldr	r3, [pc, #68]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025da:	2200      	movs	r2, #0
 80025dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80025e4:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025e6:	220c      	movs	r2, #12
 80025e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80025f0:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025f6:	4b0a      	ldr	r3, [pc, #40]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80025fc:	4b08      	ldr	r3, [pc, #32]	; (8002620 <MX_USART4_UART_Init+0x60>)
 80025fe:	2200      	movs	r2, #0
 8002600:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002602:	4b07      	ldr	r3, [pc, #28]	; (8002620 <MX_USART4_UART_Init+0x60>)
 8002604:	2200      	movs	r2, #0
 8002606:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <MX_USART4_UART_Init+0x60>)
 800260a:	0018      	movs	r0, r3
 800260c:	f003 fcd2 	bl	8005fb4 <HAL_UART_Init>
 8002610:	1e03      	subs	r3, r0, #0
 8002612:	d001      	beq.n	8002618 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 8002614:	f7ff f84a 	bl	80016ac <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8002618:	46c0      	nop			; (mov r8, r8)
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	46c0      	nop			; (mov r8, r8)
 8002620:	20003674 	.word	0x20003674
 8002624:	40004c00 	.word	0x40004c00

08002628 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002628:	b590      	push	{r4, r7, lr}
 800262a:	b093      	sub	sp, #76	; 0x4c
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002630:	2334      	movs	r3, #52	; 0x34
 8002632:	18fb      	adds	r3, r7, r3
 8002634:	0018      	movs	r0, r3
 8002636:	2314      	movs	r3, #20
 8002638:	001a      	movs	r2, r3
 800263a:	2100      	movs	r1, #0
 800263c:	f008 fbe8 	bl	800ae10 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002640:	2418      	movs	r4, #24
 8002642:	193b      	adds	r3, r7, r4
 8002644:	0018      	movs	r0, r3
 8002646:	231c      	movs	r3, #28
 8002648:	001a      	movs	r2, r3
 800264a:	2100      	movs	r1, #0
 800264c:	f008 fbe0 	bl	800ae10 <memset>
  if(uartHandle->Instance==USART1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a52      	ldr	r2, [pc, #328]	; (80027a0 <HAL_UART_MspInit+0x178>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d13e      	bne.n	80026d8 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800265a:	193b      	adds	r3, r7, r4
 800265c:	2201      	movs	r2, #1
 800265e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002660:	193b      	adds	r3, r7, r4
 8002662:	2200      	movs	r2, #0
 8002664:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002666:	193b      	adds	r3, r7, r4
 8002668:	0018      	movs	r0, r3
 800266a:	f001 ffb1 	bl	80045d0 <HAL_RCCEx_PeriphCLKConfig>
 800266e:	1e03      	subs	r3, r0, #0
 8002670:	d001      	beq.n	8002676 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002672:	f7ff f81b 	bl	80016ac <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002676:	4b4b      	ldr	r3, [pc, #300]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 8002678:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800267a:	4b4a      	ldr	r3, [pc, #296]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 800267c:	2180      	movs	r1, #128	; 0x80
 800267e:	01c9      	lsls	r1, r1, #7
 8002680:	430a      	orrs	r2, r1
 8002682:	641a      	str	r2, [r3, #64]	; 0x40
 8002684:	4b47      	ldr	r3, [pc, #284]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 8002686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002688:	2380      	movs	r3, #128	; 0x80
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	4013      	ands	r3, r2
 800268e:	617b      	str	r3, [r7, #20]
 8002690:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 8002694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002696:	4b43      	ldr	r3, [pc, #268]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 8002698:	2104      	movs	r1, #4
 800269a:	430a      	orrs	r2, r1
 800269c:	635a      	str	r2, [r3, #52]	; 0x34
 800269e:	4b41      	ldr	r3, [pc, #260]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 80026a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026a2:	2204      	movs	r2, #4
 80026a4:	4013      	ands	r3, r2
 80026a6:	613b      	str	r3, [r7, #16]
 80026a8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Debug_Pin|USART1_RX_Debug_Pin;
 80026aa:	2134      	movs	r1, #52	; 0x34
 80026ac:	187b      	adds	r3, r7, r1
 80026ae:	2230      	movs	r2, #48	; 0x30
 80026b0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	187b      	adds	r3, r7, r1
 80026b4:	2202      	movs	r2, #2
 80026b6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b8:	187b      	adds	r3, r7, r1
 80026ba:	2200      	movs	r2, #0
 80026bc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026be:	187b      	adds	r3, r7, r1
 80026c0:	2200      	movs	r2, #0
 80026c2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80026c4:	187b      	adds	r3, r7, r1
 80026c6:	2201      	movs	r2, #1
 80026c8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ca:	187b      	adds	r3, r7, r1
 80026cc:	4a36      	ldr	r2, [pc, #216]	; (80027a8 <HAL_UART_MspInit+0x180>)
 80026ce:	0019      	movs	r1, r3
 80026d0:	0010      	movs	r0, r2
 80026d2:	f001 f88f 	bl	80037f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80026d6:	e05f      	b.n	8002798 <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART4)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a33      	ldr	r2, [pc, #204]	; (80027ac <HAL_UART_MspInit+0x184>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d15a      	bne.n	8002798 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART4_CLK_ENABLE();
 80026e2:	4b30      	ldr	r3, [pc, #192]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 80026e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e6:	4b2f      	ldr	r3, [pc, #188]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0309      	lsls	r1, r1, #12
 80026ec:	430a      	orrs	r2, r1
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80026f0:	4b2c      	ldr	r3, [pc, #176]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 80026f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	031b      	lsls	r3, r3, #12
 80026f8:	4013      	ands	r3, r2
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fe:	4b29      	ldr	r3, [pc, #164]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 8002700:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002702:	4b28      	ldr	r3, [pc, #160]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 8002704:	2104      	movs	r1, #4
 8002706:	430a      	orrs	r2, r1
 8002708:	635a      	str	r2, [r3, #52]	; 0x34
 800270a:	4b26      	ldr	r3, [pc, #152]	; (80027a4 <HAL_UART_MspInit+0x17c>)
 800270c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800270e:	2204      	movs	r2, #4
 8002710:	4013      	ands	r3, r2
 8002712:	60bb      	str	r3, [r7, #8]
 8002714:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_RX_LIDAR_Pin|USART4_TX_LIDAR_Pin;
 8002716:	2134      	movs	r1, #52	; 0x34
 8002718:	187b      	adds	r3, r7, r1
 800271a:	22c0      	movs	r2, #192	; 0xc0
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002720:	187b      	adds	r3, r7, r1
 8002722:	2202      	movs	r2, #2
 8002724:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	187b      	adds	r3, r7, r1
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272c:	187b      	adds	r3, r7, r1
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 8002732:	187b      	adds	r3, r7, r1
 8002734:	2201      	movs	r2, #1
 8002736:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002738:	187b      	adds	r3, r7, r1
 800273a:	4a1b      	ldr	r2, [pc, #108]	; (80027a8 <HAL_UART_MspInit+0x180>)
 800273c:	0019      	movs	r1, r3
 800273e:	0010      	movs	r0, r2
 8002740:	f001 f858 	bl	80037f4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 8002744:	4b1a      	ldr	r3, [pc, #104]	; (80027b0 <HAL_UART_MspInit+0x188>)
 8002746:	4a1b      	ldr	r2, [pc, #108]	; (80027b4 <HAL_UART_MspInit+0x18c>)
 8002748:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 800274a:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <HAL_UART_MspInit+0x188>)
 800274c:	2238      	movs	r2, #56	; 0x38
 800274e:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <HAL_UART_MspInit+0x188>)
 8002752:	2200      	movs	r2, #0
 8002754:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <HAL_UART_MspInit+0x188>)
 8002758:	2200      	movs	r2, #0
 800275a:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <HAL_UART_MspInit+0x188>)
 800275e:	2280      	movs	r2, #128	; 0x80
 8002760:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <HAL_UART_MspInit+0x188>)
 8002764:	2200      	movs	r2, #0
 8002766:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <HAL_UART_MspInit+0x188>)
 800276a:	2200      	movs	r2, #0
 800276c:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800276e:	4b10      	ldr	r3, [pc, #64]	; (80027b0 <HAL_UART_MspInit+0x188>)
 8002770:	2220      	movs	r2, #32
 8002772:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002774:	4b0e      	ldr	r3, [pc, #56]	; (80027b0 <HAL_UART_MspInit+0x188>)
 8002776:	2200      	movs	r2, #0
 8002778:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800277a:	4b0d      	ldr	r3, [pc, #52]	; (80027b0 <HAL_UART_MspInit+0x188>)
 800277c:	0018      	movs	r0, r3
 800277e:	f000 fde7 	bl	8003350 <HAL_DMA_Init>
 8002782:	1e03      	subs	r3, r0, #0
 8002784:	d001      	beq.n	800278a <HAL_UART_MspInit+0x162>
      Error_Handler();
 8002786:	f7fe ff91 	bl	80016ac <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2180      	movs	r1, #128	; 0x80
 800278e:	4a08      	ldr	r2, [pc, #32]	; (80027b0 <HAL_UART_MspInit+0x188>)
 8002790:	505a      	str	r2, [r3, r1]
 8002792:	4b07      	ldr	r3, [pc, #28]	; (80027b0 <HAL_UART_MspInit+0x188>)
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002798:	46c0      	nop			; (mov r8, r8)
 800279a:	46bd      	mov	sp, r7
 800279c:	b013      	add	sp, #76	; 0x4c
 800279e:	bd90      	pop	{r4, r7, pc}
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40021000 	.word	0x40021000
 80027a8:	50000800 	.word	0x50000800
 80027ac:	40004c00 	.word	0x40004c00
 80027b0:	20003708 	.word	0x20003708
 80027b4:	4002001c 	.word	0x4002001c

080027b8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027b8:	480d      	ldr	r0, [pc, #52]	; (80027f0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027ba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80027bc:	f7ff f9cc 	bl	8001b58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027c0:	480c      	ldr	r0, [pc, #48]	; (80027f4 <LoopForever+0x6>)
  ldr r1, =_edata
 80027c2:	490d      	ldr	r1, [pc, #52]	; (80027f8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027c4:	4a0d      	ldr	r2, [pc, #52]	; (80027fc <LoopForever+0xe>)
  movs r3, #0
 80027c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027c8:	e002      	b.n	80027d0 <LoopCopyDataInit>

080027ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027ce:	3304      	adds	r3, #4

080027d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d4:	d3f9      	bcc.n	80027ca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027d6:	4a0a      	ldr	r2, [pc, #40]	; (8002800 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027d8:	4c0a      	ldr	r4, [pc, #40]	; (8002804 <LoopForever+0x16>)
  movs r3, #0
 80027da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027dc:	e001      	b.n	80027e2 <LoopFillZerobss>

080027de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e0:	3204      	adds	r2, #4

080027e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e4:	d3fb      	bcc.n	80027de <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80027e6:	f008 fb6f 	bl	800aec8 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80027ea:	f7fe fd83 	bl	80012f4 <main>

080027ee <LoopForever>:

LoopForever:
  b LoopForever
 80027ee:	e7fe      	b.n	80027ee <LoopForever>
  ldr   r0, =_estack
 80027f0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80027f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027f8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80027fc:	0800bef8 	.word	0x0800bef8
  ldr r2, =_sbss
 8002800:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002804:	20008820 	.word	0x20008820

08002808 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002808:	e7fe      	b.n	8002808 <ADC1_IRQHandler>
	...

0800280c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002812:	1dfb      	adds	r3, r7, #7
 8002814:	2200      	movs	r2, #0
 8002816:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002818:	4b0b      	ldr	r3, [pc, #44]	; (8002848 <HAL_Init+0x3c>)
 800281a:	681a      	ldr	r2, [r3, #0]
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <HAL_Init+0x3c>)
 800281e:	2180      	movs	r1, #128	; 0x80
 8002820:	0049      	lsls	r1, r1, #1
 8002822:	430a      	orrs	r2, r1
 8002824:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002826:	2003      	movs	r0, #3
 8002828:	f7ff f800 	bl	800182c <HAL_InitTick>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d003      	beq.n	8002838 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002830:	1dfb      	adds	r3, r7, #7
 8002832:	2201      	movs	r2, #1
 8002834:	701a      	strb	r2, [r3, #0]
 8002836:	e001      	b.n	800283c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002838:	f7fe ffc8 	bl	80017cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800283c:	1dfb      	adds	r3, r7, #7
 800283e:	781b      	ldrb	r3, [r3, #0]
}
 8002840:	0018      	movs	r0, r3
 8002842:	46bd      	mov	sp, r7
 8002844:	b002      	add	sp, #8
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40022000 	.word	0x40022000

0800284c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002850:	4b05      	ldr	r3, [pc, #20]	; (8002868 <HAL_IncTick+0x1c>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	001a      	movs	r2, r3
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_IncTick+0x20>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	18d2      	adds	r2, r2, r3
 800285c:	4b03      	ldr	r3, [pc, #12]	; (800286c <HAL_IncTick+0x20>)
 800285e:	601a      	str	r2, [r3, #0]
}
 8002860:	46c0      	nop			; (mov r8, r8)
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	46c0      	nop			; (mov r8, r8)
 8002868:	20000008 	.word	0x20000008
 800286c:	20003764 	.word	0x20003764

08002870 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	af00      	add	r7, sp, #0
  return uwTick;
 8002874:	4b02      	ldr	r3, [pc, #8]	; (8002880 <HAL_GetTick+0x10>)
 8002876:	681b      	ldr	r3, [r3, #0]
}
 8002878:	0018      	movs	r0, r3
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	46c0      	nop			; (mov r8, r8)
 8002880:	20003764 	.word	0x20003764

08002884 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800288c:	f7ff fff0 	bl	8002870 <HAL_GetTick>
 8002890:	0003      	movs	r3, r0
 8002892:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	3301      	adds	r3, #1
 800289c:	d005      	beq.n	80028aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800289e:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <HAL_Delay+0x44>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	001a      	movs	r2, r3
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	189b      	adds	r3, r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	f7ff ffe0 	bl	8002870 <HAL_GetTick>
 80028b0:	0002      	movs	r2, r0
 80028b2:	68bb      	ldr	r3, [r7, #8]
 80028b4:	1ad3      	subs	r3, r2, r3
 80028b6:	68fa      	ldr	r2, [r7, #12]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d8f7      	bhi.n	80028ac <HAL_Delay+0x28>
  {
  }
}
 80028bc:	46c0      	nop			; (mov r8, r8)
 80028be:	46c0      	nop			; (mov r8, r8)
 80028c0:	46bd      	mov	sp, r7
 80028c2:	b004      	add	sp, #16
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	46c0      	nop			; (mov r8, r8)
 80028c8:	20000008 	.word	0x20000008

080028cc <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80028d4:	4b06      	ldr	r3, [pc, #24]	; (80028f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a06      	ldr	r2, [pc, #24]	; (80028f4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80028da:	4013      	ands	r3, r2
 80028dc:	0019      	movs	r1, r3
 80028de:	4b04      	ldr	r3, [pc, #16]	; (80028f0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80028e0:	687a      	ldr	r2, [r7, #4]
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
}
 80028e6:	46c0      	nop			; (mov r8, r8)
 80028e8:	46bd      	mov	sp, r7
 80028ea:	b002      	add	sp, #8
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	46c0      	nop			; (mov r8, r8)
 80028f0:	40010000 	.word	0x40010000
 80028f4:	fffff9ff 	.word	0xfffff9ff

080028f8 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b082      	sub	sp, #8
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
 8002900:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a05      	ldr	r2, [pc, #20]	; (800291c <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002908:	401a      	ands	r2, r3
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	431a      	orrs	r2, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	601a      	str	r2, [r3, #0]
}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	46bd      	mov	sp, r7
 8002916:	b002      	add	sp, #8
 8002918:	bd80      	pop	{r7, pc}
 800291a:	46c0      	nop			; (mov r8, r8)
 800291c:	fe3fffff 	.word	0xfe3fffff

08002920 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002920:	b580      	push	{r7, lr}
 8002922:	b082      	sub	sp, #8
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681a      	ldr	r2, [r3, #0]
 800292c:	23e0      	movs	r3, #224	; 0xe0
 800292e:	045b      	lsls	r3, r3, #17
 8002930:	4013      	ands	r3, r2
}
 8002932:	0018      	movs	r0, r3
 8002934:	46bd      	mov	sp, r7
 8002936:	b002      	add	sp, #8
 8002938:	bd80      	pop	{r7, pc}

0800293a <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	60f8      	str	r0, [r7, #12]
 8002942:	60b9      	str	r1, [r7, #8]
 8002944:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	68ba      	ldr	r2, [r7, #8]
 800294c:	2104      	movs	r1, #4
 800294e:	400a      	ands	r2, r1
 8002950:	2107      	movs	r1, #7
 8002952:	4091      	lsls	r1, r2
 8002954:	000a      	movs	r2, r1
 8002956:	43d2      	mvns	r2, r2
 8002958:	401a      	ands	r2, r3
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	2104      	movs	r1, #4
 800295e:	400b      	ands	r3, r1
 8002960:	6879      	ldr	r1, [r7, #4]
 8002962:	4099      	lsls	r1, r3
 8002964:	000b      	movs	r3, r1
 8002966:	431a      	orrs	r2, r3
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 800296c:	46c0      	nop			; (mov r8, r8)
 800296e:	46bd      	mov	sp, r7
 8002970:	b004      	add	sp, #16
 8002972:	bd80      	pop	{r7, pc}

08002974 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0
 800297a:	6078      	str	r0, [r7, #4]
 800297c:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	2104      	movs	r1, #4
 8002986:	400a      	ands	r2, r1
 8002988:	2107      	movs	r1, #7
 800298a:	4091      	lsls	r1, r2
 800298c:	000a      	movs	r2, r1
 800298e:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	2104      	movs	r1, #4
 8002994:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002996:	40da      	lsrs	r2, r3
 8002998:	0013      	movs	r3, r2
}
 800299a:	0018      	movs	r0, r3
 800299c:	46bd      	mov	sp, r7
 800299e:	b002      	add	sp, #8
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b084      	sub	sp, #16
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	60b9      	str	r1, [r7, #8]
 80029ac:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	211f      	movs	r1, #31
 80029b6:	400a      	ands	r2, r1
 80029b8:	210f      	movs	r1, #15
 80029ba:	4091      	lsls	r1, r2
 80029bc:	000a      	movs	r2, r1
 80029be:	43d2      	mvns	r2, r2
 80029c0:	401a      	ands	r2, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0e9b      	lsrs	r3, r3, #26
 80029c6:	210f      	movs	r1, #15
 80029c8:	4019      	ands	r1, r3
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	201f      	movs	r0, #31
 80029ce:	4003      	ands	r3, r0
 80029d0:	4099      	lsls	r1, r3
 80029d2:	000b      	movs	r3, r1
 80029d4:	431a      	orrs	r2, r3
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029da:	46c0      	nop			; (mov r8, r8)
 80029dc:	46bd      	mov	sp, r7
 80029de:	b004      	add	sp, #16
 80029e0:	bd80      	pop	{r7, pc}

080029e2 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80029e2:	b580      	push	{r7, lr}
 80029e4:	b082      	sub	sp, #8
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
 80029ea:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	035b      	lsls	r3, r3, #13
 80029f4:	0b5b      	lsrs	r3, r3, #13
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80029fc:	46c0      	nop			; (mov r8, r8)
 80029fe:	46bd      	mov	sp, r7
 8002a00:	b002      	add	sp, #8
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
 8002a0c:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	0352      	lsls	r2, r2, #13
 8002a16:	0b52      	lsrs	r2, r2, #13
 8002a18:	43d2      	mvns	r2, r2
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a20:	46c0      	nop			; (mov r8, r8)
 8002a22:	46bd      	mov	sp, r7
 8002a24:	b002      	add	sp, #8
 8002a26:	bd80      	pop	{r7, pc}

08002a28 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	695b      	ldr	r3, [r3, #20]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	0212      	lsls	r2, r2, #8
 8002a3c:	43d2      	mvns	r2, r2
 8002a3e:	401a      	ands	r2, r3
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	021b      	lsls	r3, r3, #8
 8002a44:	6879      	ldr	r1, [r7, #4]
 8002a46:	400b      	ands	r3, r1
 8002a48:	4904      	ldr	r1, [pc, #16]	; (8002a5c <LL_ADC_SetChannelSamplingTime+0x34>)
 8002a4a:	400b      	ands	r3, r1
 8002a4c:	431a      	orrs	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	46bd      	mov	sp, r7
 8002a56:	b004      	add	sp, #16
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	46c0      	nop			; (mov r8, r8)
 8002a5c:	07ffff00 	.word	0x07ffff00

08002a60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	4a05      	ldr	r2, [pc, #20]	; (8002a84 <LL_ADC_EnableInternalRegulator+0x24>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	2280      	movs	r2, #128	; 0x80
 8002a72:	0552      	lsls	r2, r2, #21
 8002a74:	431a      	orrs	r2, r3
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	b002      	add	sp, #8
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	46c0      	nop			; (mov r8, r8)
 8002a84:	6fffffe8 	.word	0x6fffffe8

08002a88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	055b      	lsls	r3, r3, #21
 8002a98:	401a      	ands	r2, r3
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	055b      	lsls	r3, r3, #21
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d101      	bne.n	8002aa6 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	b002      	add	sp, #8
 8002aae:	bd80      	pop	{r7, pc}

08002ab0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	2201      	movs	r2, #1
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d101      	bne.n	8002ac8 <LL_ADC_IsEnabled+0x18>
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e000      	b.n	8002aca <LL_ADC_IsEnabled+0x1a>
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	0018      	movs	r0, r3
 8002acc:	46bd      	mov	sp, r7
 8002ace:	b002      	add	sp, #8
 8002ad0:	bd80      	pop	{r7, pc}

08002ad2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ad2:	b580      	push	{r7, lr}
 8002ad4:	b082      	sub	sp, #8
 8002ad6:	af00      	add	r7, sp, #0
 8002ad8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	4013      	ands	r3, r2
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_REG_IsConversionOngoing+0x18>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	0018      	movs	r0, r3
 8002aee:	46bd      	mov	sp, r7
 8002af0:	b002      	add	sp, #8
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b088      	sub	sp, #32
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002afc:	231f      	movs	r3, #31
 8002afe:	18fb      	adds	r3, r7, r3
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8002b04:	2300      	movs	r3, #0
 8002b06:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e17f      	b.n	8002e1a <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10a      	bne.n	8002b38 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f7fd feb7 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2254      	movs	r2, #84	; 0x54
 8002b34:	2100      	movs	r1, #0
 8002b36:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	0018      	movs	r0, r3
 8002b3e:	f7ff ffa3 	bl	8002a88 <LL_ADC_IsInternalRegulatorEnabled>
 8002b42:	1e03      	subs	r3, r0, #0
 8002b44:	d115      	bne.n	8002b72 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7ff ff88 	bl	8002a60 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002b50:	4bb4      	ldr	r3, [pc, #720]	; (8002e24 <HAL_ADC_Init+0x330>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	49b4      	ldr	r1, [pc, #720]	; (8002e28 <HAL_ADC_Init+0x334>)
 8002b56:	0018      	movs	r0, r3
 8002b58:	f7fd fae0 	bl	800011c <__udivsi3>
 8002b5c:	0003      	movs	r3, r0
 8002b5e:	3301      	adds	r3, #1
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b64:	e002      	b.n	8002b6c <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d1f9      	bne.n	8002b66 <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f7ff ff86 	bl	8002a88 <LL_ADC_IsInternalRegulatorEnabled>
 8002b7c:	1e03      	subs	r3, r0, #0
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b84:	2210      	movs	r2, #16
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b90:	2201      	movs	r2, #1
 8002b92:	431a      	orrs	r2, r3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b98:	231f      	movs	r3, #31
 8002b9a:	18fb      	adds	r3, r7, r3
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	f7ff ff94 	bl	8002ad2 <LL_ADC_REG_IsConversionOngoing>
 8002baa:	0003      	movs	r3, r0
 8002bac:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb2:	2210      	movs	r2, #16
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	d000      	beq.n	8002bba <HAL_ADC_Init+0xc6>
 8002bb8:	e122      	b.n	8002e00 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d000      	beq.n	8002bc2 <HAL_ADC_Init+0xce>
 8002bc0:	e11e      	b.n	8002e00 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bc6:	4a99      	ldr	r2, [pc, #612]	; (8002e2c <HAL_ADC_Init+0x338>)
 8002bc8:	4013      	ands	r3, r2
 8002bca:	2202      	movs	r2, #2
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	0018      	movs	r0, r3
 8002bd8:	f7ff ff6a 	bl	8002ab0 <LL_ADC_IsEnabled>
 8002bdc:	1e03      	subs	r3, r0, #0
 8002bde:	d000      	beq.n	8002be2 <HAL_ADC_Init+0xee>
 8002be0:	e0ad      	b.n	8002d3e <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	7e1b      	ldrb	r3, [r3, #24]
 8002bea:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002bec:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	7e5b      	ldrb	r3, [r3, #25]
 8002bf2:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8002bf4:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	7e9b      	ldrb	r3, [r3, #26]
 8002bfa:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002bfc:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d002      	beq.n	8002c0c <HAL_ADC_Init+0x118>
 8002c06:	2380      	movs	r3, #128	; 0x80
 8002c08:	015b      	lsls	r3, r3, #5
 8002c0a:	e000      	b.n	8002c0e <HAL_ADC_Init+0x11a>
 8002c0c:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002c0e:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002c14:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	da04      	bge.n	8002c28 <HAL_ADC_Init+0x134>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	005b      	lsls	r3, r3, #1
 8002c24:	085b      	lsrs	r3, r3, #1
 8002c26:	e001      	b.n	8002c2c <HAL_ADC_Init+0x138>
 8002c28:	2380      	movs	r3, #128	; 0x80
 8002c2a:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002c2c:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	5c5b      	ldrb	r3, [r3, r1]
 8002c34:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8002c36:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	2220      	movs	r2, #32
 8002c42:	5c9b      	ldrb	r3, [r3, r2]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d115      	bne.n	8002c74 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e9b      	ldrb	r3, [r3, #26]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d105      	bne.n	8002c5c <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	2280      	movs	r2, #128	; 0x80
 8002c54:	0252      	lsls	r2, r2, #9
 8002c56:	4313      	orrs	r3, r2
 8002c58:	61bb      	str	r3, [r7, #24]
 8002c5a:	e00b      	b.n	8002c74 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	2220      	movs	r2, #32
 8002c62:	431a      	orrs	r2, r3
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d00a      	beq.n	8002c92 <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c80:	23e0      	movs	r3, #224	; 0xe0
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4a65      	ldr	r2, [pc, #404]	; (8002e30 <HAL_ADC_Init+0x33c>)
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	0019      	movs	r1, r3
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	430a      	orrs	r2, r1
 8002ca6:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	0f9b      	lsrs	r3, r3, #30
 8002cae:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	697a      	ldr	r2, [r7, #20]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	223c      	movs	r2, #60	; 0x3c
 8002cc0:	5c9b      	ldrb	r3, [r3, r2]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d111      	bne.n	8002cea <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	0f9b      	lsrs	r3, r3, #30
 8002ccc:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8002cd2:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 8002cd8:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8002cde:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	691b      	ldr	r3, [r3, #16]
 8002cf0:	4a50      	ldr	r2, [pc, #320]	; (8002e34 <HAL_ADC_Init+0x340>)
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	0019      	movs	r1, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	697a      	ldr	r2, [r7, #20]
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	23c0      	movs	r3, #192	; 0xc0
 8002d06:	061b      	lsls	r3, r3, #24
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d018      	beq.n	8002d3e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002d10:	2380      	movs	r3, #128	; 0x80
 8002d12:	05db      	lsls	r3, r3, #23
 8002d14:	429a      	cmp	r2, r3
 8002d16:	d012      	beq.n	8002d3e <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002d1c:	2380      	movs	r3, #128	; 0x80
 8002d1e:	061b      	lsls	r3, r3, #24
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d00c      	beq.n	8002d3e <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002d24:	4b44      	ldr	r3, [pc, #272]	; (8002e38 <HAL_ADC_Init+0x344>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a44      	ldr	r2, [pc, #272]	; (8002e3c <HAL_ADC_Init+0x348>)
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	0019      	movs	r1, r3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685a      	ldr	r2, [r3, #4]
 8002d32:	23f0      	movs	r3, #240	; 0xf0
 8002d34:	039b      	lsls	r3, r3, #14
 8002d36:	401a      	ands	r2, r3
 8002d38:	4b3f      	ldr	r3, [pc, #252]	; (8002e38 <HAL_ADC_Init+0x344>)
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6818      	ldr	r0, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d46:	001a      	movs	r2, r3
 8002d48:	2100      	movs	r1, #0
 8002d4a:	f7ff fdf6 	bl	800293a <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d56:	493a      	ldr	r1, [pc, #232]	; (8002e40 <HAL_ADC_Init+0x34c>)
 8002d58:	001a      	movs	r2, r3
 8002d5a:	f7ff fdee 	bl	800293a <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	691b      	ldr	r3, [r3, #16]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2110      	movs	r1, #16
 8002d72:	4249      	negs	r1, r1
 8002d74:	430a      	orrs	r2, r1
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
 8002d78:	e018      	b.n	8002dac <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	691a      	ldr	r2, [r3, #16]
 8002d7e:	2380      	movs	r3, #128	; 0x80
 8002d80:	039b      	lsls	r3, r3, #14
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d112      	bne.n	8002dac <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
 8002d90:	3b01      	subs	r3, #1
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	221c      	movs	r2, #28
 8002d96:	4013      	ands	r3, r2
 8002d98:	2210      	movs	r2, #16
 8002d9a:	4252      	negs	r2, r2
 8002d9c:	409a      	lsls	r2, r3
 8002d9e:	0011      	movs	r1, r2
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	430a      	orrs	r2, r1
 8002daa:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	2100      	movs	r1, #0
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7ff fdde 	bl	8002974 <LL_ADC_GetSamplingTimeCommonChannels>
 8002db8:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d10b      	bne.n	8002dda <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	2203      	movs	r2, #3
 8002dce:	4393      	bics	r3, r2
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dd8:	e01c      	b.n	8002e14 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dde:	2212      	movs	r2, #18
 8002de0:	4393      	bics	r3, r2
 8002de2:	2210      	movs	r2, #16
 8002de4:	431a      	orrs	r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dee:	2201      	movs	r2, #1
 8002df0:	431a      	orrs	r2, r3
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002df6:	231f      	movs	r3, #31
 8002df8:	18fb      	adds	r3, r7, r3
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002dfe:	e009      	b.n	8002e14 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e04:	2210      	movs	r2, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002e0c:	231f      	movs	r3, #31
 8002e0e:	18fb      	adds	r3, r7, r3
 8002e10:	2201      	movs	r2, #1
 8002e12:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002e14:	231f      	movs	r3, #31
 8002e16:	18fb      	adds	r3, r7, r3
 8002e18:	781b      	ldrb	r3, [r3, #0]
}
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	b008      	add	sp, #32
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	46c0      	nop			; (mov r8, r8)
 8002e24:	20000000 	.word	0x20000000
 8002e28:	00030d40 	.word	0x00030d40
 8002e2c:	fffffefd 	.word	0xfffffefd
 8002e30:	fffe0201 	.word	0xfffe0201
 8002e34:	1ffffc02 	.word	0x1ffffc02
 8002e38:	40012708 	.word	0x40012708
 8002e3c:	ffc3ffff 	.word	0xffc3ffff
 8002e40:	07ffff04 	.word	0x07ffff04

08002e44 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b086      	sub	sp, #24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e4e:	2317      	movs	r3, #23
 8002e50:	18fb      	adds	r3, r7, r3
 8002e52:	2200      	movs	r2, #0
 8002e54:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002e56:	2300      	movs	r3, #0
 8002e58:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2254      	movs	r2, #84	; 0x54
 8002e5e:	5c9b      	ldrb	r3, [r3, r2]
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d101      	bne.n	8002e68 <HAL_ADC_ConfigChannel+0x24>
 8002e64:	2302      	movs	r3, #2
 8002e66:	e1c0      	b.n	80031ea <HAL_ADC_ConfigChannel+0x3a6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2254      	movs	r2, #84	; 0x54
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	0018      	movs	r0, r3
 8002e76:	f7ff fe2c 	bl	8002ad2 <LL_ADC_REG_IsConversionOngoing>
 8002e7a:	1e03      	subs	r3, r0, #0
 8002e7c:	d000      	beq.n	8002e80 <HAL_ADC_ConfigChannel+0x3c>
 8002e7e:	e1a3      	b.n	80031c8 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b02      	cmp	r3, #2
 8002e86:	d100      	bne.n	8002e8a <HAL_ADC_ConfigChannel+0x46>
 8002e88:	e143      	b.n	8003112 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	691a      	ldr	r2, [r3, #16]
 8002e8e:	2380      	movs	r3, #128	; 0x80
 8002e90:	061b      	lsls	r3, r3, #24
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d004      	beq.n	8002ea0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e9a:	4ac1      	ldr	r2, [pc, #772]	; (80031a0 <HAL_ADC_ConfigChannel+0x35c>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d108      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	0010      	movs	r0, r2
 8002eac:	f7ff fd99 	bl	80029e2 <LL_ADC_REG_SetSequencerChAdd>
 8002eb0:	e0c9      	b.n	8003046 <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	211f      	movs	r1, #31
 8002ebc:	400b      	ands	r3, r1
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	4099      	lsls	r1, r3
 8002ec2:	000b      	movs	r3, r1
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	0019      	movs	r1, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	035b      	lsls	r3, r3, #13
 8002ed0:	0b5b      	lsrs	r3, r3, #13
 8002ed2:	d105      	bne.n	8002ee0 <HAL_ADC_ConfigChannel+0x9c>
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	0e9b      	lsrs	r3, r3, #26
 8002eda:	221f      	movs	r2, #31
 8002edc:	4013      	ands	r3, r2
 8002ede:	e098      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	d000      	beq.n	8002eec <HAL_ADC_ConfigChannel+0xa8>
 8002eea:	e091      	b.n	8003010 <HAL_ADC_ConfigChannel+0x1cc>
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	d000      	beq.n	8002ef8 <HAL_ADC_ConfigChannel+0xb4>
 8002ef6:	e089      	b.n	800300c <HAL_ADC_ConfigChannel+0x1c8>
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	2204      	movs	r2, #4
 8002efe:	4013      	ands	r3, r2
 8002f00:	d000      	beq.n	8002f04 <HAL_ADC_ConfigChannel+0xc0>
 8002f02:	e081      	b.n	8003008 <HAL_ADC_ConfigChannel+0x1c4>
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	2208      	movs	r2, #8
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	d000      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0xcc>
 8002f0e:	e079      	b.n	8003004 <HAL_ADC_ConfigChannel+0x1c0>
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2210      	movs	r2, #16
 8002f16:	4013      	ands	r3, r2
 8002f18:	d000      	beq.n	8002f1c <HAL_ADC_ConfigChannel+0xd8>
 8002f1a:	e071      	b.n	8003000 <HAL_ADC_ConfigChannel+0x1bc>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2220      	movs	r2, #32
 8002f22:	4013      	ands	r3, r2
 8002f24:	d000      	beq.n	8002f28 <HAL_ADC_ConfigChannel+0xe4>
 8002f26:	e069      	b.n	8002ffc <HAL_ADC_ConfigChannel+0x1b8>
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	2240      	movs	r2, #64	; 0x40
 8002f2e:	4013      	ands	r3, r2
 8002f30:	d000      	beq.n	8002f34 <HAL_ADC_ConfigChannel+0xf0>
 8002f32:	e061      	b.n	8002ff8 <HAL_ADC_ConfigChannel+0x1b4>
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2280      	movs	r2, #128	; 0x80
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	d000      	beq.n	8002f40 <HAL_ADC_ConfigChannel+0xfc>
 8002f3e:	e059      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x1b0>
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	2380      	movs	r3, #128	; 0x80
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4013      	ands	r3, r2
 8002f4a:	d151      	bne.n	8002ff0 <HAL_ADC_ConfigChannel+0x1ac>
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	2380      	movs	r3, #128	; 0x80
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	4013      	ands	r3, r2
 8002f56:	d149      	bne.n	8002fec <HAL_ADC_ConfigChannel+0x1a8>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681a      	ldr	r2, [r3, #0]
 8002f5c:	2380      	movs	r3, #128	; 0x80
 8002f5e:	00db      	lsls	r3, r3, #3
 8002f60:	4013      	ands	r3, r2
 8002f62:	d141      	bne.n	8002fe8 <HAL_ADC_ConfigChannel+0x1a4>
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	2380      	movs	r3, #128	; 0x80
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	d139      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x1a0>
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	2380      	movs	r3, #128	; 0x80
 8002f76:	015b      	lsls	r3, r3, #5
 8002f78:	4013      	ands	r3, r2
 8002f7a:	d131      	bne.n	8002fe0 <HAL_ADC_ConfigChannel+0x19c>
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	2380      	movs	r3, #128	; 0x80
 8002f82:	019b      	lsls	r3, r3, #6
 8002f84:	4013      	ands	r3, r2
 8002f86:	d129      	bne.n	8002fdc <HAL_ADC_ConfigChannel+0x198>
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	681a      	ldr	r2, [r3, #0]
 8002f8c:	2380      	movs	r3, #128	; 0x80
 8002f8e:	01db      	lsls	r3, r3, #7
 8002f90:	4013      	ands	r3, r2
 8002f92:	d121      	bne.n	8002fd8 <HAL_ADC_ConfigChannel+0x194>
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	2380      	movs	r3, #128	; 0x80
 8002f9a:	021b      	lsls	r3, r3, #8
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d119      	bne.n	8002fd4 <HAL_ADC_ConfigChannel+0x190>
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	2380      	movs	r3, #128	; 0x80
 8002fa6:	025b      	lsls	r3, r3, #9
 8002fa8:	4013      	ands	r3, r2
 8002faa:	d111      	bne.n	8002fd0 <HAL_ADC_ConfigChannel+0x18c>
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	029b      	lsls	r3, r3, #10
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	d109      	bne.n	8002fcc <HAL_ADC_ConfigChannel+0x188>
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	2380      	movs	r3, #128	; 0x80
 8002fbe:	02db      	lsls	r3, r3, #11
 8002fc0:	4013      	ands	r3, r2
 8002fc2:	d001      	beq.n	8002fc8 <HAL_ADC_ConfigChannel+0x184>
 8002fc4:	2312      	movs	r3, #18
 8002fc6:	e024      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fc8:	2300      	movs	r3, #0
 8002fca:	e022      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fcc:	2311      	movs	r3, #17
 8002fce:	e020      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	e01e      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fd4:	230f      	movs	r3, #15
 8002fd6:	e01c      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fd8:	230e      	movs	r3, #14
 8002fda:	e01a      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fdc:	230d      	movs	r3, #13
 8002fde:	e018      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fe0:	230c      	movs	r3, #12
 8002fe2:	e016      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fe4:	230b      	movs	r3, #11
 8002fe6:	e014      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fe8:	230a      	movs	r3, #10
 8002fea:	e012      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002fec:	2309      	movs	r3, #9
 8002fee:	e010      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002ff0:	2308      	movs	r3, #8
 8002ff2:	e00e      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002ff4:	2307      	movs	r3, #7
 8002ff6:	e00c      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002ff8:	2306      	movs	r3, #6
 8002ffa:	e00a      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8002ffc:	2305      	movs	r3, #5
 8002ffe:	e008      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8003000:	2304      	movs	r3, #4
 8003002:	e006      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8003004:	2303      	movs	r3, #3
 8003006:	e004      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8003008:	2302      	movs	r3, #2
 800300a:	e002      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_ADC_ConfigChannel+0x1ce>
 8003010:	2300      	movs	r3, #0
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	6852      	ldr	r2, [r2, #4]
 8003016:	201f      	movs	r0, #31
 8003018:	4002      	ands	r2, r0
 800301a:	4093      	lsls	r3, r2
 800301c:	000a      	movs	r2, r1
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	089b      	lsrs	r3, r3, #2
 800302a:	1c5a      	adds	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	69db      	ldr	r3, [r3, #28]
 8003030:	429a      	cmp	r2, r3
 8003032:	d808      	bhi.n	8003046 <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6818      	ldr	r0, [r3, #0]
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	6859      	ldr	r1, [r3, #4]
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	001a      	movs	r2, r3
 8003042:	f7ff fcae 	bl	80029a2 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6818      	ldr	r0, [r3, #0]
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	001a      	movs	r2, r3
 8003054:	f7ff fce8 	bl	8002a28 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db00      	blt.n	8003062 <HAL_ADC_ConfigChannel+0x21e>
 8003060:	e0bc      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003062:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_ADC_ConfigChannel+0x360>)
 8003064:	0018      	movs	r0, r3
 8003066:	f7ff fc5b 	bl	8002920 <LL_ADC_GetCommonPathInternalCh>
 800306a:	0003      	movs	r3, r0
 800306c:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_ADC_ConfigChannel+0x364>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d122      	bne.n	80030be <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003078:	693a      	ldr	r2, [r7, #16]
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	041b      	lsls	r3, r3, #16
 800307e:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8003080:	d11d      	bne.n	80030be <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	0412      	lsls	r2, r2, #16
 8003088:	4313      	orrs	r3, r2
 800308a:	4a46      	ldr	r2, [pc, #280]	; (80031a4 <HAL_ADC_ConfigChannel+0x360>)
 800308c:	0019      	movs	r1, r3
 800308e:	0010      	movs	r0, r2
 8003090:	f7ff fc32 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003094:	4b45      	ldr	r3, [pc, #276]	; (80031ac <HAL_ADC_ConfigChannel+0x368>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4945      	ldr	r1, [pc, #276]	; (80031b0 <HAL_ADC_ConfigChannel+0x36c>)
 800309a:	0018      	movs	r0, r3
 800309c:	f7fd f83e 	bl	800011c <__udivsi3>
 80030a0:	0003      	movs	r3, r0
 80030a2:	1c5a      	adds	r2, r3, #1
 80030a4:	0013      	movs	r3, r2
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	189b      	adds	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030ae:	e002      	b.n	80030b6 <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d1f9      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80030bc:	e08e      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a3c      	ldr	r2, [pc, #240]	; (80031b4 <HAL_ADC_ConfigChannel+0x370>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d10e      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80030c8:	693a      	ldr	r2, [r7, #16]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	045b      	lsls	r3, r3, #17
 80030ce:	4013      	ands	r3, r2
 80030d0:	d109      	bne.n	80030e6 <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	2280      	movs	r2, #128	; 0x80
 80030d6:	0452      	lsls	r2, r2, #17
 80030d8:	4313      	orrs	r3, r2
 80030da:	4a32      	ldr	r2, [pc, #200]	; (80031a4 <HAL_ADC_ConfigChannel+0x360>)
 80030dc:	0019      	movs	r1, r3
 80030de:	0010      	movs	r0, r2
 80030e0:	f7ff fc0a 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 80030e4:	e07a      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a33      	ldr	r2, [pc, #204]	; (80031b8 <HAL_ADC_ConfigChannel+0x374>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d000      	beq.n	80030f2 <HAL_ADC_ConfigChannel+0x2ae>
 80030f0:	e074      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80030f2:	693a      	ldr	r2, [r7, #16]
 80030f4:	2380      	movs	r3, #128	; 0x80
 80030f6:	03db      	lsls	r3, r3, #15
 80030f8:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 80030fa:	d000      	beq.n	80030fe <HAL_ADC_ConfigChannel+0x2ba>
 80030fc:	e06e      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	2280      	movs	r2, #128	; 0x80
 8003102:	03d2      	lsls	r2, r2, #15
 8003104:	4313      	orrs	r3, r2
 8003106:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <HAL_ADC_ConfigChannel+0x360>)
 8003108:	0019      	movs	r1, r3
 800310a:	0010      	movs	r0, r2
 800310c:	f7ff fbf4 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 8003110:	e064      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	691a      	ldr	r2, [r3, #16]
 8003116:	2380      	movs	r3, #128	; 0x80
 8003118:	061b      	lsls	r3, r3, #24
 800311a:	429a      	cmp	r2, r3
 800311c:	d004      	beq.n	8003128 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8003122:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_ADC_ConfigChannel+0x35c>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d107      	bne.n	8003138 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	0019      	movs	r1, r3
 8003132:	0010      	movs	r0, r2
 8003134:	f7ff fc66 	bl	8002a04 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	da4d      	bge.n	80031dc <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003140:	4b18      	ldr	r3, [pc, #96]	; (80031a4 <HAL_ADC_ConfigChannel+0x360>)
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff fbec 	bl	8002920 <LL_ADC_GetCommonPathInternalCh>
 8003148:	0003      	movs	r3, r0
 800314a:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a15      	ldr	r2, [pc, #84]	; (80031a8 <HAL_ADC_ConfigChannel+0x364>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d108      	bne.n	8003168 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	4a18      	ldr	r2, [pc, #96]	; (80031bc <HAL_ADC_ConfigChannel+0x378>)
 800315a:	4013      	ands	r3, r2
 800315c:	4a11      	ldr	r2, [pc, #68]	; (80031a4 <HAL_ADC_ConfigChannel+0x360>)
 800315e:	0019      	movs	r1, r3
 8003160:	0010      	movs	r0, r2
 8003162:	f7ff fbc9 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 8003166:	e039      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a11      	ldr	r2, [pc, #68]	; (80031b4 <HAL_ADC_ConfigChannel+0x370>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d108      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	4a12      	ldr	r2, [pc, #72]	; (80031c0 <HAL_ADC_ConfigChannel+0x37c>)
 8003176:	4013      	ands	r3, r2
 8003178:	4a0a      	ldr	r2, [pc, #40]	; (80031a4 <HAL_ADC_ConfigChannel+0x360>)
 800317a:	0019      	movs	r1, r3
 800317c:	0010      	movs	r0, r2
 800317e:	f7ff fbbb 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 8003182:	e02b      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a0b      	ldr	r2, [pc, #44]	; (80031b8 <HAL_ADC_ConfigChannel+0x374>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d126      	bne.n	80031dc <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	4a0c      	ldr	r2, [pc, #48]	; (80031c4 <HAL_ADC_ConfigChannel+0x380>)
 8003192:	4013      	ands	r3, r2
 8003194:	4a03      	ldr	r2, [pc, #12]	; (80031a4 <HAL_ADC_ConfigChannel+0x360>)
 8003196:	0019      	movs	r1, r3
 8003198:	0010      	movs	r0, r2
 800319a:	f7ff fbad 	bl	80028f8 <LL_ADC_SetCommonPathInternalCh>
 800319e:	e01d      	b.n	80031dc <HAL_ADC_ConfigChannel+0x398>
 80031a0:	80000004 	.word	0x80000004
 80031a4:	40012708 	.word	0x40012708
 80031a8:	b0001000 	.word	0xb0001000
 80031ac:	20000000 	.word	0x20000000
 80031b0:	00030d40 	.word	0x00030d40
 80031b4:	b8004000 	.word	0xb8004000
 80031b8:	b4002000 	.word	0xb4002000
 80031bc:	ff7fffff 	.word	0xff7fffff
 80031c0:	feffffff 	.word	0xfeffffff
 80031c4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031cc:	2220      	movs	r2, #32
 80031ce:	431a      	orrs	r2, r3
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80031d4:	2317      	movs	r3, #23
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	2201      	movs	r2, #1
 80031da:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2254      	movs	r2, #84	; 0x54
 80031e0:	2100      	movs	r1, #0
 80031e2:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80031e4:	2317      	movs	r3, #23
 80031e6:	18fb      	adds	r3, r7, r3
 80031e8:	781b      	ldrb	r3, [r3, #0]
}
 80031ea:	0018      	movs	r0, r3
 80031ec:	46bd      	mov	sp, r7
 80031ee:	b006      	add	sp, #24
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	46c0      	nop			; (mov r8, r8)

080031f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031f4:	b580      	push	{r7, lr}
 80031f6:	b082      	sub	sp, #8
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	0002      	movs	r2, r0
 80031fc:	1dfb      	adds	r3, r7, #7
 80031fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003200:	1dfb      	adds	r3, r7, #7
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	2b7f      	cmp	r3, #127	; 0x7f
 8003206:	d809      	bhi.n	800321c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003208:	1dfb      	adds	r3, r7, #7
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	001a      	movs	r2, r3
 800320e:	231f      	movs	r3, #31
 8003210:	401a      	ands	r2, r3
 8003212:	4b04      	ldr	r3, [pc, #16]	; (8003224 <__NVIC_EnableIRQ+0x30>)
 8003214:	2101      	movs	r1, #1
 8003216:	4091      	lsls	r1, r2
 8003218:	000a      	movs	r2, r1
 800321a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800321c:	46c0      	nop			; (mov r8, r8)
 800321e:	46bd      	mov	sp, r7
 8003220:	b002      	add	sp, #8
 8003222:	bd80      	pop	{r7, pc}
 8003224:	e000e100 	.word	0xe000e100

08003228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003228:	b590      	push	{r4, r7, lr}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	0002      	movs	r2, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	1dfb      	adds	r3, r7, #7
 8003234:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8003236:	1dfb      	adds	r3, r7, #7
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b7f      	cmp	r3, #127	; 0x7f
 800323c:	d828      	bhi.n	8003290 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800323e:	4a2f      	ldr	r2, [pc, #188]	; (80032fc <__NVIC_SetPriority+0xd4>)
 8003240:	1dfb      	adds	r3, r7, #7
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	b25b      	sxtb	r3, r3
 8003246:	089b      	lsrs	r3, r3, #2
 8003248:	33c0      	adds	r3, #192	; 0xc0
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	589b      	ldr	r3, [r3, r2]
 800324e:	1dfa      	adds	r2, r7, #7
 8003250:	7812      	ldrb	r2, [r2, #0]
 8003252:	0011      	movs	r1, r2
 8003254:	2203      	movs	r2, #3
 8003256:	400a      	ands	r2, r1
 8003258:	00d2      	lsls	r2, r2, #3
 800325a:	21ff      	movs	r1, #255	; 0xff
 800325c:	4091      	lsls	r1, r2
 800325e:	000a      	movs	r2, r1
 8003260:	43d2      	mvns	r2, r2
 8003262:	401a      	ands	r2, r3
 8003264:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	22ff      	movs	r2, #255	; 0xff
 800326c:	401a      	ands	r2, r3
 800326e:	1dfb      	adds	r3, r7, #7
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	0018      	movs	r0, r3
 8003274:	2303      	movs	r3, #3
 8003276:	4003      	ands	r3, r0
 8003278:	00db      	lsls	r3, r3, #3
 800327a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800327c:	481f      	ldr	r0, [pc, #124]	; (80032fc <__NVIC_SetPriority+0xd4>)
 800327e:	1dfb      	adds	r3, r7, #7
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	b25b      	sxtb	r3, r3
 8003284:	089b      	lsrs	r3, r3, #2
 8003286:	430a      	orrs	r2, r1
 8003288:	33c0      	adds	r3, #192	; 0xc0
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800328e:	e031      	b.n	80032f4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8003290:	4a1b      	ldr	r2, [pc, #108]	; (8003300 <__NVIC_SetPriority+0xd8>)
 8003292:	1dfb      	adds	r3, r7, #7
 8003294:	781b      	ldrb	r3, [r3, #0]
 8003296:	0019      	movs	r1, r3
 8003298:	230f      	movs	r3, #15
 800329a:	400b      	ands	r3, r1
 800329c:	3b08      	subs	r3, #8
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3306      	adds	r3, #6
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	18d3      	adds	r3, r2, r3
 80032a6:	3304      	adds	r3, #4
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	1dfa      	adds	r2, r7, #7
 80032ac:	7812      	ldrb	r2, [r2, #0]
 80032ae:	0011      	movs	r1, r2
 80032b0:	2203      	movs	r2, #3
 80032b2:	400a      	ands	r2, r1
 80032b4:	00d2      	lsls	r2, r2, #3
 80032b6:	21ff      	movs	r1, #255	; 0xff
 80032b8:	4091      	lsls	r1, r2
 80032ba:	000a      	movs	r2, r1
 80032bc:	43d2      	mvns	r2, r2
 80032be:	401a      	ands	r2, r3
 80032c0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	019b      	lsls	r3, r3, #6
 80032c6:	22ff      	movs	r2, #255	; 0xff
 80032c8:	401a      	ands	r2, r3
 80032ca:	1dfb      	adds	r3, r7, #7
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	0018      	movs	r0, r3
 80032d0:	2303      	movs	r3, #3
 80032d2:	4003      	ands	r3, r0
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80032d8:	4809      	ldr	r0, [pc, #36]	; (8003300 <__NVIC_SetPriority+0xd8>)
 80032da:	1dfb      	adds	r3, r7, #7
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	001c      	movs	r4, r3
 80032e0:	230f      	movs	r3, #15
 80032e2:	4023      	ands	r3, r4
 80032e4:	3b08      	subs	r3, #8
 80032e6:	089b      	lsrs	r3, r3, #2
 80032e8:	430a      	orrs	r2, r1
 80032ea:	3306      	adds	r3, #6
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	18c3      	adds	r3, r0, r3
 80032f0:	3304      	adds	r3, #4
 80032f2:	601a      	str	r2, [r3, #0]
}
 80032f4:	46c0      	nop			; (mov r8, r8)
 80032f6:	46bd      	mov	sp, r7
 80032f8:	b003      	add	sp, #12
 80032fa:	bd90      	pop	{r4, r7, pc}
 80032fc:	e000e100 	.word	0xe000e100
 8003300:	e000ed00 	.word	0xe000ed00

08003304 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	60b9      	str	r1, [r7, #8]
 800330c:	607a      	str	r2, [r7, #4]
 800330e:	210f      	movs	r1, #15
 8003310:	187b      	adds	r3, r7, r1
 8003312:	1c02      	adds	r2, r0, #0
 8003314:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	187b      	adds	r3, r7, r1
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	b25b      	sxtb	r3, r3
 800331e:	0011      	movs	r1, r2
 8003320:	0018      	movs	r0, r3
 8003322:	f7ff ff81 	bl	8003228 <__NVIC_SetPriority>
}
 8003326:	46c0      	nop			; (mov r8, r8)
 8003328:	46bd      	mov	sp, r7
 800332a:	b004      	add	sp, #16
 800332c:	bd80      	pop	{r7, pc}

0800332e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800332e:	b580      	push	{r7, lr}
 8003330:	b082      	sub	sp, #8
 8003332:	af00      	add	r7, sp, #0
 8003334:	0002      	movs	r2, r0
 8003336:	1dfb      	adds	r3, r7, #7
 8003338:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800333a:	1dfb      	adds	r3, r7, #7
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b25b      	sxtb	r3, r3
 8003340:	0018      	movs	r0, r3
 8003342:	f7ff ff57 	bl	80031f4 <__NVIC_EnableIRQ>
}
 8003346:	46c0      	nop			; (mov r8, r8)
 8003348:	46bd      	mov	sp, r7
 800334a:	b002      	add	sp, #8
 800334c:	bd80      	pop	{r7, pc}
	...

08003350 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b082      	sub	sp, #8
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800335e:	2301      	movs	r3, #1
 8003360:	e077      	b.n	8003452 <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a3d      	ldr	r2, [pc, #244]	; (800345c <HAL_DMA_Init+0x10c>)
 8003368:	4694      	mov	ip, r2
 800336a:	4463      	add	r3, ip
 800336c:	2114      	movs	r1, #20
 800336e:	0018      	movs	r0, r3
 8003370:	f7fc fed4 	bl	800011c <__udivsi3>
 8003374:	0003      	movs	r3, r0
 8003376:	009a      	lsls	r2, r3, #2
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2225      	movs	r2, #37	; 0x25
 8003380:	2102      	movs	r1, #2
 8003382:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4934      	ldr	r1, [pc, #208]	; (8003460 <HAL_DMA_Init+0x110>)
 8003390:	400a      	ands	r2, r1
 8003392:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	6819      	ldr	r1, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689a      	ldr	r2, [r3, #8]
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	431a      	orrs	r2, r3
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	691b      	ldr	r3, [r3, #16]
 80033a8:	431a      	orrs	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	695b      	ldr	r3, [r3, #20]
 80033ae:	431a      	orrs	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	699b      	ldr	r3, [r3, #24]
 80033b4:	431a      	orrs	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	69db      	ldr	r3, [r3, #28]
 80033ba:	431a      	orrs	r2, r3
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	431a      	orrs	r2, r3
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	430a      	orrs	r2, r1
 80033c8:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	0018      	movs	r0, r3
 80033ce:	f000 f9c1 	bl	8003754 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	2380      	movs	r3, #128	; 0x80
 80033d8:	01db      	lsls	r3, r3, #7
 80033da:	429a      	cmp	r2, r3
 80033dc:	d102      	bne.n	80033e4 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685a      	ldr	r2, [r3, #4]
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ec:	213f      	movs	r1, #63	; 0x3f
 80033ee:	400a      	ands	r2, r1
 80033f0:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033f6:	687a      	ldr	r2, [r7, #4]
 80033f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80033fa:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d011      	beq.n	8003428 <HAL_DMA_Init+0xd8>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b04      	cmp	r3, #4
 800340a:	d80d      	bhi.n	8003428 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f9cc 	bl	80037ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003418:	2200      	movs	r2, #0
 800341a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003424:	605a      	str	r2, [r3, #4]
 8003426:	e008      	b.n	800343a <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2200      	movs	r2, #0
 8003438:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2225      	movs	r2, #37	; 0x25
 8003444:	2101      	movs	r1, #1
 8003446:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2224      	movs	r2, #36	; 0x24
 800344c:	2100      	movs	r1, #0
 800344e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003450:	2300      	movs	r3, #0
}
 8003452:	0018      	movs	r0, r3
 8003454:	46bd      	mov	sp, r7
 8003456:	b002      	add	sp, #8
 8003458:	bd80      	pop	{r7, pc}
 800345a:	46c0      	nop			; (mov r8, r8)
 800345c:	bffdfff8 	.word	0xbffdfff8
 8003460:	ffff800f 	.word	0xffff800f

08003464 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af00      	add	r7, sp, #0
 800346a:	60f8      	str	r0, [r7, #12]
 800346c:	60b9      	str	r1, [r7, #8]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2317      	movs	r3, #23
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	2200      	movs	r2, #0
 8003478:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2224      	movs	r2, #36	; 0x24
 800347e:	5c9b      	ldrb	r3, [r3, r2]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d101      	bne.n	8003488 <HAL_DMA_Start_IT+0x24>
 8003484:	2302      	movs	r3, #2
 8003486:	e06f      	b.n	8003568 <HAL_DMA_Start_IT+0x104>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	2224      	movs	r2, #36	; 0x24
 800348c:	2101      	movs	r1, #1
 800348e:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2225      	movs	r2, #37	; 0x25
 8003494:	5c9b      	ldrb	r3, [r3, r2]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d157      	bne.n	800354c <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2225      	movs	r2, #37	; 0x25
 80034a0:	2102      	movs	r1, #2
 80034a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2200      	movs	r2, #0
 80034a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	681a      	ldr	r2, [r3, #0]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2101      	movs	r1, #1
 80034b6:	438a      	bics	r2, r1
 80034b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	68b9      	ldr	r1, [r7, #8]
 80034c0:	68f8      	ldr	r0, [r7, #12]
 80034c2:	f000 f907 	bl	80036d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d008      	beq.n	80034e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	210e      	movs	r1, #14
 80034da:	430a      	orrs	r2, r1
 80034dc:	601a      	str	r2, [r3, #0]
 80034de:	e00f      	b.n	8003500 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	681a      	ldr	r2, [r3, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2104      	movs	r1, #4
 80034ec:	438a      	bics	r2, r1
 80034ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	210a      	movs	r1, #10
 80034fc:	430a      	orrs	r2, r1
 80034fe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	2380      	movs	r3, #128	; 0x80
 8003508:	025b      	lsls	r3, r3, #9
 800350a:	4013      	ands	r3, r2
 800350c:	d008      	beq.n	8003520 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	0049      	lsls	r1, r1, #1
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	2b00      	cmp	r3, #0
 8003526:	d008      	beq.n	800353a <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003532:	2180      	movs	r1, #128	; 0x80
 8003534:	0049      	lsls	r1, r1, #1
 8003536:	430a      	orrs	r2, r1
 8003538:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2101      	movs	r1, #1
 8003546:	430a      	orrs	r2, r1
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e00a      	b.n	8003562 <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2280      	movs	r2, #128	; 0x80
 8003550:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2224      	movs	r2, #36	; 0x24
 8003556:	2100      	movs	r1, #0
 8003558:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 800355a:	2317      	movs	r3, #23
 800355c:	18fb      	adds	r3, r7, r3
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8003562:	2317      	movs	r3, #23
 8003564:	18fb      	adds	r3, r7, r3
 8003566:	781b      	ldrb	r3, [r3, #0]
}
 8003568:	0018      	movs	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	b006      	add	sp, #24
 800356e:	bd80      	pop	{r7, pc}

08003570 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003578:	4b55      	ldr	r3, [pc, #340]	; (80036d0 <HAL_DMA_IRQHandler+0x160>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	221c      	movs	r2, #28
 800358c:	4013      	ands	r3, r2
 800358e:	2204      	movs	r2, #4
 8003590:	409a      	lsls	r2, r3
 8003592:	0013      	movs	r3, r2
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	4013      	ands	r3, r2
 8003598:	d027      	beq.n	80035ea <HAL_DMA_IRQHandler+0x7a>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2204      	movs	r2, #4
 800359e:	4013      	ands	r3, r2
 80035a0:	d023      	beq.n	80035ea <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	2220      	movs	r2, #32
 80035aa:	4013      	ands	r3, r2
 80035ac:	d107      	bne.n	80035be <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2104      	movs	r1, #4
 80035ba:	438a      	bics	r2, r1
 80035bc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80035be:	4b44      	ldr	r3, [pc, #272]	; (80036d0 <HAL_DMA_IRQHandler+0x160>)
 80035c0:	6859      	ldr	r1, [r3, #4]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	221c      	movs	r2, #28
 80035c8:	4013      	ands	r3, r2
 80035ca:	2204      	movs	r2, #4
 80035cc:	409a      	lsls	r2, r3
 80035ce:	4b40      	ldr	r3, [pc, #256]	; (80036d0 <HAL_DMA_IRQHandler+0x160>)
 80035d0:	430a      	orrs	r2, r1
 80035d2:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d100      	bne.n	80035de <HAL_DMA_IRQHandler+0x6e>
 80035dc:	e073      	b.n	80036c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	0010      	movs	r0, r2
 80035e6:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 80035e8:	e06d      	b.n	80036c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ee:	221c      	movs	r2, #28
 80035f0:	4013      	ands	r3, r2
 80035f2:	2202      	movs	r2, #2
 80035f4:	409a      	lsls	r2, r3
 80035f6:	0013      	movs	r3, r2
 80035f8:	68fa      	ldr	r2, [r7, #12]
 80035fa:	4013      	ands	r3, r2
 80035fc:	d02e      	beq.n	800365c <HAL_DMA_IRQHandler+0xec>
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	2202      	movs	r2, #2
 8003602:	4013      	ands	r3, r2
 8003604:	d02a      	beq.n	800365c <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	d10b      	bne.n	800362a <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	210a      	movs	r1, #10
 800361e:	438a      	bics	r2, r1
 8003620:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2225      	movs	r2, #37	; 0x25
 8003626:	2101      	movs	r1, #1
 8003628:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 800362a:	4b29      	ldr	r3, [pc, #164]	; (80036d0 <HAL_DMA_IRQHandler+0x160>)
 800362c:	6859      	ldr	r1, [r3, #4]
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003632:	221c      	movs	r2, #28
 8003634:	4013      	ands	r3, r2
 8003636:	2202      	movs	r2, #2
 8003638:	409a      	lsls	r2, r3
 800363a:	4b25      	ldr	r3, [pc, #148]	; (80036d0 <HAL_DMA_IRQHandler+0x160>)
 800363c:	430a      	orrs	r2, r1
 800363e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2224      	movs	r2, #36	; 0x24
 8003644:	2100      	movs	r1, #0
 8003646:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	2b00      	cmp	r3, #0
 800364e:	d03a      	beq.n	80036c6 <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	687a      	ldr	r2, [r7, #4]
 8003656:	0010      	movs	r0, r2
 8003658:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 800365a:	e034      	b.n	80036c6 <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003660:	221c      	movs	r2, #28
 8003662:	4013      	ands	r3, r2
 8003664:	2208      	movs	r2, #8
 8003666:	409a      	lsls	r2, r3
 8003668:	0013      	movs	r3, r2
 800366a:	68fa      	ldr	r2, [r7, #12]
 800366c:	4013      	ands	r3, r2
 800366e:	d02b      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x158>
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	2208      	movs	r2, #8
 8003674:	4013      	ands	r3, r2
 8003676:	d027      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	210e      	movs	r1, #14
 8003684:	438a      	bics	r2, r1
 8003686:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003688:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <HAL_DMA_IRQHandler+0x160>)
 800368a:	6859      	ldr	r1, [r3, #4]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003690:	221c      	movs	r2, #28
 8003692:	4013      	ands	r3, r2
 8003694:	2201      	movs	r2, #1
 8003696:	409a      	lsls	r2, r3
 8003698:	4b0d      	ldr	r3, [pc, #52]	; (80036d0 <HAL_DMA_IRQHandler+0x160>)
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2201      	movs	r2, #1
 80036a2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2225      	movs	r2, #37	; 0x25
 80036a8:	2101      	movs	r1, #1
 80036aa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2224      	movs	r2, #36	; 0x24
 80036b0:	2100      	movs	r1, #0
 80036b2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d005      	beq.n	80036c8 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036c0:	687a      	ldr	r2, [r7, #4]
 80036c2:	0010      	movs	r0, r2
 80036c4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80036c6:	46c0      	nop			; (mov r8, r8)
 80036c8:	46c0      	nop			; (mov r8, r8)
}
 80036ca:	46bd      	mov	sp, r7
 80036cc:	b004      	add	sp, #16
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40020000 	.word	0x40020000

080036d4 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b084      	sub	sp, #16
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	607a      	str	r2, [r7, #4]
 80036e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80036e6:	68fa      	ldr	r2, [r7, #12]
 80036e8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80036ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80036fc:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80036fe:	4b14      	ldr	r3, [pc, #80]	; (8003750 <DMA_SetConfig+0x7c>)
 8003700:	6859      	ldr	r1, [r3, #4]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	221c      	movs	r2, #28
 8003708:	4013      	ands	r3, r2
 800370a:	2201      	movs	r2, #1
 800370c:	409a      	lsls	r2, r3
 800370e:	4b10      	ldr	r3, [pc, #64]	; (8003750 <DMA_SetConfig+0x7c>)
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	683a      	ldr	r2, [r7, #0]
 800371a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	2b10      	cmp	r3, #16
 8003722:	d108      	bne.n	8003736 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	687a      	ldr	r2, [r7, #4]
 800372a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003734:	e007      	b.n	8003746 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68ba      	ldr	r2, [r7, #8]
 800373c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	60da      	str	r2, [r3, #12]
}
 8003746:	46c0      	nop			; (mov r8, r8)
 8003748:	46bd      	mov	sp, r7
 800374a:	b004      	add	sp, #16
 800374c:	bd80      	pop	{r7, pc}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	40020000 	.word	0x40020000

08003754 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b084      	sub	sp, #16
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	4a10      	ldr	r2, [pc, #64]	; (80037a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8003764:	4694      	mov	ip, r2
 8003766:	4463      	add	r3, ip
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	001a      	movs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	001a      	movs	r2, r3
 8003776:	23ff      	movs	r3, #255	; 0xff
 8003778:	4013      	ands	r3, r2
 800377a:	3b08      	subs	r3, #8
 800377c:	2114      	movs	r1, #20
 800377e:	0018      	movs	r0, r3
 8003780:	f7fc fccc 	bl	800011c <__udivsi3>
 8003784:	0003      	movs	r3, r0
 8003786:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	4a07      	ldr	r2, [pc, #28]	; (80037a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 800378c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	221f      	movs	r2, #31
 8003792:	4013      	ands	r3, r2
 8003794:	2201      	movs	r2, #1
 8003796:	409a      	lsls	r2, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	64da      	str	r2, [r3, #76]	; 0x4c
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bd80      	pop	{r7, pc}
 80037a4:	10008200 	.word	0x10008200
 80037a8:	40020880 	.word	0x40020880

080037ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b084      	sub	sp, #16
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	685b      	ldr	r3, [r3, #4]
 80037b8:	223f      	movs	r2, #63	; 0x3f
 80037ba:	4013      	ands	r3, r2
 80037bc:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4a0a      	ldr	r2, [pc, #40]	; (80037ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80037c2:	4694      	mov	ip, r2
 80037c4:	4463      	add	r3, ip
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	001a      	movs	r2, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3b01      	subs	r3, #1
 80037d8:	2203      	movs	r2, #3
 80037da:	4013      	ands	r3, r2
 80037dc:	2201      	movs	r2, #1
 80037de:	409a      	lsls	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	659a      	str	r2, [r3, #88]	; 0x58
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b004      	add	sp, #16
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	1000823f 	.word	0x1000823f
 80037f0:	40020940 	.word	0x40020940

080037f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b086      	sub	sp, #24
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80037fe:	2300      	movs	r3, #0
 8003800:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003802:	e147      	b.n	8003a94 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	2101      	movs	r1, #1
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4091      	lsls	r1, r2
 800380e:	000a      	movs	r2, r1
 8003810:	4013      	ands	r3, r2
 8003812:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d100      	bne.n	800381c <HAL_GPIO_Init+0x28>
 800381a:	e138      	b.n	8003a8e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	2203      	movs	r2, #3
 8003822:	4013      	ands	r3, r2
 8003824:	2b01      	cmp	r3, #1
 8003826:	d005      	beq.n	8003834 <HAL_GPIO_Init+0x40>
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2203      	movs	r2, #3
 800382e:	4013      	ands	r3, r2
 8003830:	2b02      	cmp	r3, #2
 8003832:	d130      	bne.n	8003896 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	005b      	lsls	r3, r3, #1
 800383e:	2203      	movs	r2, #3
 8003840:	409a      	lsls	r2, r3
 8003842:	0013      	movs	r3, r2
 8003844:	43da      	mvns	r2, r3
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	4013      	ands	r3, r2
 800384a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	005b      	lsls	r3, r3, #1
 8003854:	409a      	lsls	r2, r3
 8003856:	0013      	movs	r3, r2
 8003858:	693a      	ldr	r2, [r7, #16]
 800385a:	4313      	orrs	r3, r2
 800385c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	693a      	ldr	r2, [r7, #16]
 8003862:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800386a:	2201      	movs	r2, #1
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	409a      	lsls	r2, r3
 8003870:	0013      	movs	r3, r2
 8003872:	43da      	mvns	r2, r3
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	4013      	ands	r3, r2
 8003878:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	091b      	lsrs	r3, r3, #4
 8003880:	2201      	movs	r2, #1
 8003882:	401a      	ands	r2, r3
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	409a      	lsls	r2, r3
 8003888:	0013      	movs	r3, r2
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	693a      	ldr	r2, [r7, #16]
 8003894:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	2203      	movs	r2, #3
 800389c:	4013      	ands	r3, r2
 800389e:	2b03      	cmp	r3, #3
 80038a0:	d017      	beq.n	80038d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	2203      	movs	r2, #3
 80038ae:	409a      	lsls	r2, r3
 80038b0:	0013      	movs	r3, r2
 80038b2:	43da      	mvns	r2, r3
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4013      	ands	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	689a      	ldr	r2, [r3, #8]
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	409a      	lsls	r2, r3
 80038c4:	0013      	movs	r3, r2
 80038c6:	693a      	ldr	r2, [r7, #16]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	693a      	ldr	r2, [r7, #16]
 80038d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2203      	movs	r2, #3
 80038d8:	4013      	ands	r3, r2
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d123      	bne.n	8003926 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	08da      	lsrs	r2, r3, #3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	3208      	adds	r2, #8
 80038e6:	0092      	lsls	r2, r2, #2
 80038e8:	58d3      	ldr	r3, [r2, r3]
 80038ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	2207      	movs	r2, #7
 80038f0:	4013      	ands	r3, r2
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	220f      	movs	r2, #15
 80038f6:	409a      	lsls	r2, r3
 80038f8:	0013      	movs	r3, r2
 80038fa:	43da      	mvns	r2, r3
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	4013      	ands	r3, r2
 8003900:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	691a      	ldr	r2, [r3, #16]
 8003906:	697b      	ldr	r3, [r7, #20]
 8003908:	2107      	movs	r1, #7
 800390a:	400b      	ands	r3, r1
 800390c:	009b      	lsls	r3, r3, #2
 800390e:	409a      	lsls	r2, r3
 8003910:	0013      	movs	r3, r2
 8003912:	693a      	ldr	r2, [r7, #16]
 8003914:	4313      	orrs	r3, r2
 8003916:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	08da      	lsrs	r2, r3, #3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	3208      	adds	r2, #8
 8003920:	0092      	lsls	r2, r2, #2
 8003922:	6939      	ldr	r1, [r7, #16]
 8003924:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	2203      	movs	r2, #3
 8003932:	409a      	lsls	r2, r3
 8003934:	0013      	movs	r3, r2
 8003936:	43da      	mvns	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2203      	movs	r2, #3
 8003944:	401a      	ands	r2, r3
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	409a      	lsls	r2, r3
 800394c:	0013      	movs	r3, r2
 800394e:	693a      	ldr	r2, [r7, #16]
 8003950:	4313      	orrs	r3, r2
 8003952:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	23c0      	movs	r3, #192	; 0xc0
 8003960:	029b      	lsls	r3, r3, #10
 8003962:	4013      	ands	r3, r2
 8003964:	d100      	bne.n	8003968 <HAL_GPIO_Init+0x174>
 8003966:	e092      	b.n	8003a8e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003968:	4a50      	ldr	r2, [pc, #320]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	089b      	lsrs	r3, r3, #2
 800396e:	3318      	adds	r3, #24
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	589b      	ldr	r3, [r3, r2]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2203      	movs	r2, #3
 800397a:	4013      	ands	r3, r2
 800397c:	00db      	lsls	r3, r3, #3
 800397e:	220f      	movs	r2, #15
 8003980:	409a      	lsls	r2, r3
 8003982:	0013      	movs	r3, r2
 8003984:	43da      	mvns	r2, r3
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	4013      	ands	r3, r2
 800398a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	23a0      	movs	r3, #160	; 0xa0
 8003990:	05db      	lsls	r3, r3, #23
 8003992:	429a      	cmp	r2, r3
 8003994:	d013      	beq.n	80039be <HAL_GPIO_Init+0x1ca>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a45      	ldr	r2, [pc, #276]	; (8003ab0 <HAL_GPIO_Init+0x2bc>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00d      	beq.n	80039ba <HAL_GPIO_Init+0x1c6>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a44      	ldr	r2, [pc, #272]	; (8003ab4 <HAL_GPIO_Init+0x2c0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <HAL_GPIO_Init+0x1c2>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a43      	ldr	r2, [pc, #268]	; (8003ab8 <HAL_GPIO_Init+0x2c4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d101      	bne.n	80039b2 <HAL_GPIO_Init+0x1be>
 80039ae:	2303      	movs	r3, #3
 80039b0:	e006      	b.n	80039c0 <HAL_GPIO_Init+0x1cc>
 80039b2:	2305      	movs	r3, #5
 80039b4:	e004      	b.n	80039c0 <HAL_GPIO_Init+0x1cc>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e002      	b.n	80039c0 <HAL_GPIO_Init+0x1cc>
 80039ba:	2301      	movs	r3, #1
 80039bc:	e000      	b.n	80039c0 <HAL_GPIO_Init+0x1cc>
 80039be:	2300      	movs	r3, #0
 80039c0:	697a      	ldr	r2, [r7, #20]
 80039c2:	2103      	movs	r1, #3
 80039c4:	400a      	ands	r2, r1
 80039c6:	00d2      	lsls	r2, r2, #3
 80039c8:	4093      	lsls	r3, r2
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80039d0:	4936      	ldr	r1, [pc, #216]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	089b      	lsrs	r3, r3, #2
 80039d6:	3318      	adds	r3, #24
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039de:	4b33      	ldr	r3, [pc, #204]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	43da      	mvns	r2, r3
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	4013      	ands	r3, r2
 80039ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	685a      	ldr	r2, [r3, #4]
 80039f2:	2380      	movs	r3, #128	; 0x80
 80039f4:	035b      	lsls	r3, r3, #13
 80039f6:	4013      	ands	r3, r2
 80039f8:	d003      	beq.n	8003a02 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80039fa:	693a      	ldr	r2, [r7, #16]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a02:	4b2a      	ldr	r3, [pc, #168]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003a04:	693a      	ldr	r2, [r7, #16]
 8003a06:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003a08:	4b28      	ldr	r3, [pc, #160]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4013      	ands	r3, r2
 8003a16:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	2380      	movs	r3, #128	; 0x80
 8003a1e:	039b      	lsls	r3, r3, #14
 8003a20:	4013      	ands	r3, r2
 8003a22:	d003      	beq.n	8003a2c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8003a24:	693a      	ldr	r2, [r7, #16]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a2c:	4b1f      	ldr	r3, [pc, #124]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003a32:	4a1e      	ldr	r2, [pc, #120]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003a34:	2384      	movs	r3, #132	; 0x84
 8003a36:	58d3      	ldr	r3, [r2, r3]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43da      	mvns	r2, r3
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685a      	ldr	r2, [r3, #4]
 8003a48:	2380      	movs	r3, #128	; 0x80
 8003a4a:	029b      	lsls	r3, r3, #10
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a58:	4914      	ldr	r1, [pc, #80]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003a5a:	2284      	movs	r2, #132	; 0x84
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003a60:	4a12      	ldr	r2, [pc, #72]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003a62:	2380      	movs	r3, #128	; 0x80
 8003a64:	58d3      	ldr	r3, [r2, r3]
 8003a66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	43da      	mvns	r2, r3
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	685a      	ldr	r2, [r3, #4]
 8003a76:	2380      	movs	r3, #128	; 0x80
 8003a78:	025b      	lsls	r3, r3, #9
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003a7e:	693a      	ldr	r2, [r7, #16]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	4313      	orrs	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a86:	4909      	ldr	r1, [pc, #36]	; (8003aac <HAL_GPIO_Init+0x2b8>)
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	3301      	adds	r3, #1
 8003a92:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	697b      	ldr	r3, [r7, #20]
 8003a9a:	40da      	lsrs	r2, r3
 8003a9c:	1e13      	subs	r3, r2, #0
 8003a9e:	d000      	beq.n	8003aa2 <HAL_GPIO_Init+0x2ae>
 8003aa0:	e6b0      	b.n	8003804 <HAL_GPIO_Init+0x10>
  }
}
 8003aa2:	46c0      	nop			; (mov r8, r8)
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b006      	add	sp, #24
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	40021800 	.word	0x40021800
 8003ab0:	50000400 	.word	0x50000400
 8003ab4:	50000800 	.word	0x50000800
 8003ab8:	50000c00 	.word	0x50000c00

08003abc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b082      	sub	sp, #8
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
 8003ac4:	0008      	movs	r0, r1
 8003ac6:	0011      	movs	r1, r2
 8003ac8:	1cbb      	adds	r3, r7, #2
 8003aca:	1c02      	adds	r2, r0, #0
 8003acc:	801a      	strh	r2, [r3, #0]
 8003ace:	1c7b      	adds	r3, r7, #1
 8003ad0:	1c0a      	adds	r2, r1, #0
 8003ad2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003ad4:	1c7b      	adds	r3, r7, #1
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d004      	beq.n	8003ae6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003adc:	1cbb      	adds	r3, r7, #2
 8003ade:	881a      	ldrh	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ae4:	e003      	b.n	8003aee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003ae6:	1cbb      	adds	r3, r7, #2
 8003ae8:	881a      	ldrh	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003aee:	46c0      	nop			; (mov r8, r8)
 8003af0:	46bd      	mov	sp, r7
 8003af2:	b002      	add	sp, #8
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	0002      	movs	r2, r0
 8003b00:	1dbb      	adds	r3, r7, #6
 8003b02:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8003b04:	4b10      	ldr	r3, [pc, #64]	; (8003b48 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	1dba      	adds	r2, r7, #6
 8003b0a:	8812      	ldrh	r2, [r2, #0]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	d008      	beq.n	8003b22 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003b10:	4b0d      	ldr	r3, [pc, #52]	; (8003b48 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003b12:	1dba      	adds	r2, r7, #6
 8003b14:	8812      	ldrh	r2, [r2, #0]
 8003b16:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003b18:	1dbb      	adds	r3, r7, #6
 8003b1a:	881b      	ldrh	r3, [r3, #0]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f000 f815 	bl	8003b4c <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8003b22:	4b09      	ldr	r3, [pc, #36]	; (8003b48 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003b24:	691b      	ldr	r3, [r3, #16]
 8003b26:	1dba      	adds	r2, r7, #6
 8003b28:	8812      	ldrh	r2, [r2, #0]
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	d008      	beq.n	8003b40 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003b2e:	4b06      	ldr	r3, [pc, #24]	; (8003b48 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003b30:	1dba      	adds	r2, r7, #6
 8003b32:	8812      	ldrh	r2, [r2, #0]
 8003b34:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8003b36:	1dbb      	adds	r3, r7, #6
 8003b38:	881b      	ldrh	r3, [r3, #0]
 8003b3a:	0018      	movs	r0, r3
 8003b3c:	f000 f810 	bl	8003b60 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}
 8003b48:	40021800 	.word	0x40021800

08003b4c <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b082      	sub	sp, #8
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	0002      	movs	r2, r0
 8003b54:	1dbb      	adds	r3, r7, #6
 8003b56:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003b58:	46c0      	nop			; (mov r8, r8)
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	b002      	add	sp, #8
 8003b5e:	bd80      	pop	{r7, pc}

08003b60 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b082      	sub	sp, #8
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	0002      	movs	r2, r0
 8003b68:	1dbb      	adds	r3, r7, #6
 8003b6a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003b6c:	46c0      	nop			; (mov r8, r8)
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	b002      	add	sp, #8
 8003b72:	bd80      	pop	{r7, pc}

08003b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003b7c:	4b19      	ldr	r3, [pc, #100]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a19      	ldr	r2, [pc, #100]	; (8003be8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003b82:	4013      	ands	r3, r2
 8003b84:	0019      	movs	r1, r3
 8003b86:	4b17      	ldr	r3, [pc, #92]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003b88:	687a      	ldr	r2, [r7, #4]
 8003b8a:	430a      	orrs	r2, r1
 8003b8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	2380      	movs	r3, #128	; 0x80
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d11f      	bne.n	8003bd8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8003b98:	4b14      	ldr	r3, [pc, #80]	; (8003bec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	0013      	movs	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	189b      	adds	r3, r3, r2
 8003ba2:	005b      	lsls	r3, r3, #1
 8003ba4:	4912      	ldr	r1, [pc, #72]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7fc fab8 	bl	800011c <__udivsi3>
 8003bac:	0003      	movs	r3, r0
 8003bae:	3301      	adds	r3, #1
 8003bb0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb2:	e008      	b.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	60fb      	str	r3, [r7, #12]
 8003bc0:	e001      	b.n	8003bc6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003bc2:	2303      	movs	r3, #3
 8003bc4:	e009      	b.n	8003bda <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc6:	4b07      	ldr	r3, [pc, #28]	; (8003be4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	00db      	lsls	r3, r3, #3
 8003bce:	401a      	ands	r2, r3
 8003bd0:	2380      	movs	r3, #128	; 0x80
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	429a      	cmp	r2, r3
 8003bd6:	d0ed      	beq.n	8003bb4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8003bd8:	2300      	movs	r3, #0
}
 8003bda:	0018      	movs	r0, r3
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	b004      	add	sp, #16
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	46c0      	nop			; (mov r8, r8)
 8003be4:	40007000 	.word	0x40007000
 8003be8:	fffff9ff 	.word	0xfffff9ff
 8003bec:	20000000 	.word	0x20000000
 8003bf0:	000f4240 	.word	0x000f4240

08003bf4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003bf8:	4b03      	ldr	r3, [pc, #12]	; (8003c08 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003bfa:	689a      	ldr	r2, [r3, #8]
 8003bfc:	23e0      	movs	r3, #224	; 0xe0
 8003bfe:	01db      	lsls	r3, r3, #7
 8003c00:	4013      	ands	r3, r2
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	40021000 	.word	0x40021000

08003c0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e2f3      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2201      	movs	r2, #1
 8003c24:	4013      	ands	r3, r2
 8003c26:	d100      	bne.n	8003c2a <HAL_RCC_OscConfig+0x1e>
 8003c28:	e07c      	b.n	8003d24 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c2a:	4bc3      	ldr	r3, [pc, #780]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2238      	movs	r2, #56	; 0x38
 8003c30:	4013      	ands	r3, r2
 8003c32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c34:	4bc0      	ldr	r3, [pc, #768]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	2203      	movs	r2, #3
 8003c3a:	4013      	ands	r3, r2
 8003c3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003c3e:	69bb      	ldr	r3, [r7, #24]
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d102      	bne.n	8003c4a <HAL_RCC_OscConfig+0x3e>
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	2b03      	cmp	r3, #3
 8003c48:	d002      	beq.n	8003c50 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003c4a:	69bb      	ldr	r3, [r7, #24]
 8003c4c:	2b08      	cmp	r3, #8
 8003c4e:	d10b      	bne.n	8003c68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c50:	4bb9      	ldr	r3, [pc, #740]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	2380      	movs	r3, #128	; 0x80
 8003c56:	029b      	lsls	r3, r3, #10
 8003c58:	4013      	ands	r3, r2
 8003c5a:	d062      	beq.n	8003d22 <HAL_RCC_OscConfig+0x116>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d15e      	bne.n	8003d22 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8003c64:	2301      	movs	r3, #1
 8003c66:	e2ce      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	2380      	movs	r3, #128	; 0x80
 8003c6e:	025b      	lsls	r3, r3, #9
 8003c70:	429a      	cmp	r2, r3
 8003c72:	d107      	bne.n	8003c84 <HAL_RCC_OscConfig+0x78>
 8003c74:	4bb0      	ldr	r3, [pc, #704]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	4baf      	ldr	r3, [pc, #700]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c7a:	2180      	movs	r1, #128	; 0x80
 8003c7c:	0249      	lsls	r1, r1, #9
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	601a      	str	r2, [r3, #0]
 8003c82:	e020      	b.n	8003cc6 <HAL_RCC_OscConfig+0xba>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	685a      	ldr	r2, [r3, #4]
 8003c88:	23a0      	movs	r3, #160	; 0xa0
 8003c8a:	02db      	lsls	r3, r3, #11
 8003c8c:	429a      	cmp	r2, r3
 8003c8e:	d10e      	bne.n	8003cae <HAL_RCC_OscConfig+0xa2>
 8003c90:	4ba9      	ldr	r3, [pc, #676]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	4ba8      	ldr	r3, [pc, #672]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003c96:	2180      	movs	r1, #128	; 0x80
 8003c98:	02c9      	lsls	r1, r1, #11
 8003c9a:	430a      	orrs	r2, r1
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	4ba6      	ldr	r3, [pc, #664]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	4ba5      	ldr	r3, [pc, #660]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ca4:	2180      	movs	r1, #128	; 0x80
 8003ca6:	0249      	lsls	r1, r1, #9
 8003ca8:	430a      	orrs	r2, r1
 8003caa:	601a      	str	r2, [r3, #0]
 8003cac:	e00b      	b.n	8003cc6 <HAL_RCC_OscConfig+0xba>
 8003cae:	4ba2      	ldr	r3, [pc, #648]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	4ba1      	ldr	r3, [pc, #644]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cb4:	49a1      	ldr	r1, [pc, #644]	; (8003f3c <HAL_RCC_OscConfig+0x330>)
 8003cb6:	400a      	ands	r2, r1
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	4b9f      	ldr	r3, [pc, #636]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b9e      	ldr	r3, [pc, #632]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cc0:	499f      	ldr	r1, [pc, #636]	; (8003f40 <HAL_RCC_OscConfig+0x334>)
 8003cc2:	400a      	ands	r2, r1
 8003cc4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d014      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cce:	f7fe fdcf 	bl	8002870 <HAL_GetTick>
 8003cd2:	0003      	movs	r3, r0
 8003cd4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cd6:	e008      	b.n	8003cea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cd8:	f7fe fdca 	bl	8002870 <HAL_GetTick>
 8003cdc:	0002      	movs	r2, r0
 8003cde:	693b      	ldr	r3, [r7, #16]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	2b64      	cmp	r3, #100	; 0x64
 8003ce4:	d901      	bls.n	8003cea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e28d      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cea:	4b93      	ldr	r3, [pc, #588]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003cec:	681a      	ldr	r2, [r3, #0]
 8003cee:	2380      	movs	r3, #128	; 0x80
 8003cf0:	029b      	lsls	r3, r3, #10
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d0f0      	beq.n	8003cd8 <HAL_RCC_OscConfig+0xcc>
 8003cf6:	e015      	b.n	8003d24 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf8:	f7fe fdba 	bl	8002870 <HAL_GetTick>
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d00:	e008      	b.n	8003d14 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d02:	f7fe fdb5 	bl	8002870 <HAL_GetTick>
 8003d06:	0002      	movs	r2, r0
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	1ad3      	subs	r3, r2, r3
 8003d0c:	2b64      	cmp	r3, #100	; 0x64
 8003d0e:	d901      	bls.n	8003d14 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e278      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d14:	4b88      	ldr	r3, [pc, #544]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	029b      	lsls	r3, r3, #10
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	d1f0      	bne.n	8003d02 <HAL_RCC_OscConfig+0xf6>
 8003d20:	e000      	b.n	8003d24 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d22:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2202      	movs	r2, #2
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	d100      	bne.n	8003d30 <HAL_RCC_OscConfig+0x124>
 8003d2e:	e099      	b.n	8003e64 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d30:	4b81      	ldr	r3, [pc, #516]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	2238      	movs	r2, #56	; 0x38
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d3a:	4b7f      	ldr	r3, [pc, #508]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d3c:	68db      	ldr	r3, [r3, #12]
 8003d3e:	2203      	movs	r2, #3
 8003d40:	4013      	ands	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	2b10      	cmp	r3, #16
 8003d48:	d102      	bne.n	8003d50 <HAL_RCC_OscConfig+0x144>
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d002      	beq.n	8003d56 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d135      	bne.n	8003dc2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d56:	4b78      	ldr	r3, [pc, #480]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	4013      	ands	r3, r2
 8003d60:	d005      	beq.n	8003d6e <HAL_RCC_OscConfig+0x162>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e24b      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d6e:	4b72      	ldr	r3, [pc, #456]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	4a74      	ldr	r2, [pc, #464]	; (8003f44 <HAL_RCC_OscConfig+0x338>)
 8003d74:	4013      	ands	r3, r2
 8003d76:	0019      	movs	r1, r3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	695b      	ldr	r3, [r3, #20]
 8003d7c:	021a      	lsls	r2, r3, #8
 8003d7e:	4b6e      	ldr	r3, [pc, #440]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d80:	430a      	orrs	r2, r1
 8003d82:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d112      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003d8a:	4b6b      	ldr	r3, [pc, #428]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	4a6e      	ldr	r2, [pc, #440]	; (8003f48 <HAL_RCC_OscConfig+0x33c>)
 8003d90:	4013      	ands	r3, r2
 8003d92:	0019      	movs	r1, r3
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	691a      	ldr	r2, [r3, #16]
 8003d98:	4b67      	ldr	r3, [pc, #412]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003d9a:	430a      	orrs	r2, r1
 8003d9c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003d9e:	4b66      	ldr	r3, [pc, #408]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	0adb      	lsrs	r3, r3, #11
 8003da4:	2207      	movs	r2, #7
 8003da6:	4013      	ands	r3, r2
 8003da8:	4a68      	ldr	r2, [pc, #416]	; (8003f4c <HAL_RCC_OscConfig+0x340>)
 8003daa:	40da      	lsrs	r2, r3
 8003dac:	4b68      	ldr	r3, [pc, #416]	; (8003f50 <HAL_RCC_OscConfig+0x344>)
 8003dae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003db0:	4b68      	ldr	r3, [pc, #416]	; (8003f54 <HAL_RCC_OscConfig+0x348>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	0018      	movs	r0, r3
 8003db6:	f7fd fd39 	bl	800182c <HAL_InitTick>
 8003dba:	1e03      	subs	r3, r0, #0
 8003dbc:	d051      	beq.n	8003e62 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e221      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	68db      	ldr	r3, [r3, #12]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d030      	beq.n	8003e2c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003dca:	4b5b      	ldr	r3, [pc, #364]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a5e      	ldr	r2, [pc, #376]	; (8003f48 <HAL_RCC_OscConfig+0x33c>)
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	0019      	movs	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	4b57      	ldr	r3, [pc, #348]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003dde:	4b56      	ldr	r3, [pc, #344]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003de0:	681a      	ldr	r2, [r3, #0]
 8003de2:	4b55      	ldr	r3, [pc, #340]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003de4:	2180      	movs	r1, #128	; 0x80
 8003de6:	0049      	lsls	r1, r1, #1
 8003de8:	430a      	orrs	r2, r1
 8003dea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dec:	f7fe fd40 	bl	8002870 <HAL_GetTick>
 8003df0:	0003      	movs	r3, r0
 8003df2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003df6:	f7fe fd3b 	bl	8002870 <HAL_GetTick>
 8003dfa:	0002      	movs	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e1fe      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e08:	4b4b      	ldr	r3, [pc, #300]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	2380      	movs	r3, #128	; 0x80
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4013      	ands	r3, r2
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e14:	4b48      	ldr	r3, [pc, #288]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	4a4a      	ldr	r2, [pc, #296]	; (8003f44 <HAL_RCC_OscConfig+0x338>)
 8003e1a:	4013      	ands	r3, r2
 8003e1c:	0019      	movs	r1, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	021a      	lsls	r2, r3, #8
 8003e24:	4b44      	ldr	r3, [pc, #272]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e26:	430a      	orrs	r2, r1
 8003e28:	605a      	str	r2, [r3, #4]
 8003e2a:	e01b      	b.n	8003e64 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003e2c:	4b42      	ldr	r3, [pc, #264]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	4b41      	ldr	r3, [pc, #260]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e32:	4949      	ldr	r1, [pc, #292]	; (8003f58 <HAL_RCC_OscConfig+0x34c>)
 8003e34:	400a      	ands	r2, r1
 8003e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fe fd1a 	bl	8002870 <HAL_GetTick>
 8003e3c:	0003      	movs	r3, r0
 8003e3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fe fd15 	bl	8002870 <HAL_GetTick>
 8003e46:	0002      	movs	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1d8      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e54:	4b38      	ldr	r3, [pc, #224]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	2380      	movs	r3, #128	; 0x80
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	d1f0      	bne.n	8003e42 <HAL_RCC_OscConfig+0x236>
 8003e60:	e000      	b.n	8003e64 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2208      	movs	r2, #8
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	d047      	beq.n	8003efe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003e6e:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	2238      	movs	r2, #56	; 0x38
 8003e74:	4013      	ands	r3, r2
 8003e76:	2b18      	cmp	r3, #24
 8003e78:	d10a      	bne.n	8003e90 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003e7a:	4b2f      	ldr	r3, [pc, #188]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e7e:	2202      	movs	r2, #2
 8003e80:	4013      	ands	r3, r2
 8003e82:	d03c      	beq.n	8003efe <HAL_RCC_OscConfig+0x2f2>
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d138      	bne.n	8003efe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003e8c:	2301      	movs	r3, #1
 8003e8e:	e1ba      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	699b      	ldr	r3, [r3, #24]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d019      	beq.n	8003ecc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003e98:	4b27      	ldr	r3, [pc, #156]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e9c:	4b26      	ldr	r3, [pc, #152]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	430a      	orrs	r2, r1
 8003ea2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea4:	f7fe fce4 	bl	8002870 <HAL_GetTick>
 8003ea8:	0003      	movs	r3, r0
 8003eaa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eae:	f7fe fcdf 	bl	8002870 <HAL_GetTick>
 8003eb2:	0002      	movs	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e1a2      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ec0:	4b1d      	ldr	r3, [pc, #116]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec4:	2202      	movs	r2, #2
 8003ec6:	4013      	ands	r3, r2
 8003ec8:	d0f1      	beq.n	8003eae <HAL_RCC_OscConfig+0x2a2>
 8003eca:	e018      	b.n	8003efe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003ecc:	4b1a      	ldr	r3, [pc, #104]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ece:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003ed0:	4b19      	ldr	r3, [pc, #100]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	438a      	bics	r2, r1
 8003ed6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fcca 	bl	8002870 <HAL_GetTick>
 8003edc:	0003      	movs	r3, r0
 8003ede:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ee0:	e008      	b.n	8003ef4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ee2:	f7fe fcc5 	bl	8002870 <HAL_GetTick>
 8003ee6:	0002      	movs	r2, r0
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	1ad3      	subs	r3, r2, r3
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d901      	bls.n	8003ef4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e188      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003ef4:	4b10      	ldr	r3, [pc, #64]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ef8:	2202      	movs	r2, #2
 8003efa:	4013      	ands	r3, r2
 8003efc:	d1f1      	bne.n	8003ee2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	2204      	movs	r2, #4
 8003f04:	4013      	ands	r3, r2
 8003f06:	d100      	bne.n	8003f0a <HAL_RCC_OscConfig+0x2fe>
 8003f08:	e0c6      	b.n	8004098 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f0a:	231f      	movs	r3, #31
 8003f0c:	18fb      	adds	r3, r7, r3
 8003f0e:	2200      	movs	r2, #0
 8003f10:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003f12:	4b09      	ldr	r3, [pc, #36]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003f14:	689b      	ldr	r3, [r3, #8]
 8003f16:	2238      	movs	r2, #56	; 0x38
 8003f18:	4013      	ands	r3, r2
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d11e      	bne.n	8003f5c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003f1e:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_RCC_OscConfig+0x32c>)
 8003f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f22:	2202      	movs	r2, #2
 8003f24:	4013      	ands	r3, r2
 8003f26:	d100      	bne.n	8003f2a <HAL_RCC_OscConfig+0x31e>
 8003f28:	e0b6      	b.n	8004098 <HAL_RCC_OscConfig+0x48c>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d000      	beq.n	8003f34 <HAL_RCC_OscConfig+0x328>
 8003f32:	e0b1      	b.n	8004098 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003f34:	2301      	movs	r3, #1
 8003f36:	e166      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
 8003f38:	40021000 	.word	0x40021000
 8003f3c:	fffeffff 	.word	0xfffeffff
 8003f40:	fffbffff 	.word	0xfffbffff
 8003f44:	ffff80ff 	.word	0xffff80ff
 8003f48:	ffffc7ff 	.word	0xffffc7ff
 8003f4c:	00f42400 	.word	0x00f42400
 8003f50:	20000000 	.word	0x20000000
 8003f54:	20000004 	.word	0x20000004
 8003f58:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f5c:	4bac      	ldr	r3, [pc, #688]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8003f5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f60:	2380      	movs	r3, #128	; 0x80
 8003f62:	055b      	lsls	r3, r3, #21
 8003f64:	4013      	ands	r3, r2
 8003f66:	d101      	bne.n	8003f6c <HAL_RCC_OscConfig+0x360>
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x362>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d011      	beq.n	8003f96 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003f72:	4ba7      	ldr	r3, [pc, #668]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8003f74:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f76:	4ba6      	ldr	r3, [pc, #664]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8003f78:	2180      	movs	r1, #128	; 0x80
 8003f7a:	0549      	lsls	r1, r1, #21
 8003f7c:	430a      	orrs	r2, r1
 8003f7e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003f80:	4ba3      	ldr	r3, [pc, #652]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8003f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f84:	2380      	movs	r3, #128	; 0x80
 8003f86:	055b      	lsls	r3, r3, #21
 8003f88:	4013      	ands	r3, r2
 8003f8a:	60fb      	str	r3, [r7, #12]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003f8e:	231f      	movs	r3, #31
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	2201      	movs	r2, #1
 8003f94:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f96:	4b9f      	ldr	r3, [pc, #636]	; (8004214 <HAL_RCC_OscConfig+0x608>)
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	2380      	movs	r3, #128	; 0x80
 8003f9c:	005b      	lsls	r3, r3, #1
 8003f9e:	4013      	ands	r3, r2
 8003fa0:	d11a      	bne.n	8003fd8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa2:	4b9c      	ldr	r3, [pc, #624]	; (8004214 <HAL_RCC_OscConfig+0x608>)
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	4b9b      	ldr	r3, [pc, #620]	; (8004214 <HAL_RCC_OscConfig+0x608>)
 8003fa8:	2180      	movs	r1, #128	; 0x80
 8003faa:	0049      	lsls	r1, r1, #1
 8003fac:	430a      	orrs	r2, r1
 8003fae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003fb0:	f7fe fc5e 	bl	8002870 <HAL_GetTick>
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb8:	e008      	b.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fba:	f7fe fc59 	bl	8002870 <HAL_GetTick>
 8003fbe:	0002      	movs	r2, r0
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	1ad3      	subs	r3, r2, r3
 8003fc4:	2b02      	cmp	r3, #2
 8003fc6:	d901      	bls.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e11c      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fcc:	4b91      	ldr	r3, [pc, #580]	; (8004214 <HAL_RCC_OscConfig+0x608>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	2380      	movs	r3, #128	; 0x80
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4013      	ands	r3, r2
 8003fd6:	d0f0      	beq.n	8003fba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d106      	bne.n	8003fee <HAL_RCC_OscConfig+0x3e2>
 8003fe0:	4b8b      	ldr	r3, [pc, #556]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8003fe2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003fe4:	4b8a      	ldr	r3, [pc, #552]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8003fe6:	2101      	movs	r1, #1
 8003fe8:	430a      	orrs	r2, r1
 8003fea:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fec:	e01c      	b.n	8004028 <HAL_RCC_OscConfig+0x41c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	2b05      	cmp	r3, #5
 8003ff4:	d10c      	bne.n	8004010 <HAL_RCC_OscConfig+0x404>
 8003ff6:	4b86      	ldr	r3, [pc, #536]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8003ff8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003ffa:	4b85      	ldr	r3, [pc, #532]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8003ffc:	2104      	movs	r1, #4
 8003ffe:	430a      	orrs	r2, r1
 8004000:	65da      	str	r2, [r3, #92]	; 0x5c
 8004002:	4b83      	ldr	r3, [pc, #524]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004004:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004006:	4b82      	ldr	r3, [pc, #520]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004008:	2101      	movs	r1, #1
 800400a:	430a      	orrs	r2, r1
 800400c:	65da      	str	r2, [r3, #92]	; 0x5c
 800400e:	e00b      	b.n	8004028 <HAL_RCC_OscConfig+0x41c>
 8004010:	4b7f      	ldr	r3, [pc, #508]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004012:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004014:	4b7e      	ldr	r3, [pc, #504]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004016:	2101      	movs	r1, #1
 8004018:	438a      	bics	r2, r1
 800401a:	65da      	str	r2, [r3, #92]	; 0x5c
 800401c:	4b7c      	ldr	r3, [pc, #496]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 800401e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004020:	4b7b      	ldr	r3, [pc, #492]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004022:	2104      	movs	r1, #4
 8004024:	438a      	bics	r2, r1
 8004026:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d014      	beq.n	800405a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7fe fc1e 	bl	8002870 <HAL_GetTick>
 8004034:	0003      	movs	r3, r0
 8004036:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004038:	e009      	b.n	800404e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800403a:	f7fe fc19 	bl	8002870 <HAL_GetTick>
 800403e:	0002      	movs	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	4a74      	ldr	r2, [pc, #464]	; (8004218 <HAL_RCC_OscConfig+0x60c>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e0db      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404e:	4b70      	ldr	r3, [pc, #448]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004050:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004052:	2202      	movs	r2, #2
 8004054:	4013      	ands	r3, r2
 8004056:	d0f0      	beq.n	800403a <HAL_RCC_OscConfig+0x42e>
 8004058:	e013      	b.n	8004082 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800405a:	f7fe fc09 	bl	8002870 <HAL_GetTick>
 800405e:	0003      	movs	r3, r0
 8004060:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004062:	e009      	b.n	8004078 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fe fc04 	bl	8002870 <HAL_GetTick>
 8004068:	0002      	movs	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	4a6a      	ldr	r2, [pc, #424]	; (8004218 <HAL_RCC_OscConfig+0x60c>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e0c6      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004078:	4b65      	ldr	r3, [pc, #404]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 800407a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800407c:	2202      	movs	r2, #2
 800407e:	4013      	ands	r3, r2
 8004080:	d1f0      	bne.n	8004064 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004082:	231f      	movs	r3, #31
 8004084:	18fb      	adds	r3, r7, r3
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b60      	ldr	r3, [pc, #384]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 800408e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004090:	4b5f      	ldr	r3, [pc, #380]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004092:	4962      	ldr	r1, [pc, #392]	; (800421c <HAL_RCC_OscConfig+0x610>)
 8004094:	400a      	ands	r2, r1
 8004096:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	69db      	ldr	r3, [r3, #28]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d100      	bne.n	80040a2 <HAL_RCC_OscConfig+0x496>
 80040a0:	e0b0      	b.n	8004204 <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80040a2:	4b5b      	ldr	r3, [pc, #364]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	2238      	movs	r2, #56	; 0x38
 80040a8:	4013      	ands	r3, r2
 80040aa:	2b10      	cmp	r3, #16
 80040ac:	d100      	bne.n	80040b0 <HAL_RCC_OscConfig+0x4a4>
 80040ae:	e078      	b.n	80041a2 <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	69db      	ldr	r3, [r3, #28]
 80040b4:	2b02      	cmp	r3, #2
 80040b6:	d153      	bne.n	8004160 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040b8:	4b55      	ldr	r3, [pc, #340]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	4b54      	ldr	r3, [pc, #336]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 80040be:	4958      	ldr	r1, [pc, #352]	; (8004220 <HAL_RCC_OscConfig+0x614>)
 80040c0:	400a      	ands	r2, r1
 80040c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040c4:	f7fe fbd4 	bl	8002870 <HAL_GetTick>
 80040c8:	0003      	movs	r3, r0
 80040ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040cc:	e008      	b.n	80040e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040ce:	f7fe fbcf 	bl	8002870 <HAL_GetTick>
 80040d2:	0002      	movs	r2, r0
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	1ad3      	subs	r3, r2, r3
 80040d8:	2b02      	cmp	r3, #2
 80040da:	d901      	bls.n	80040e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80040dc:	2303      	movs	r3, #3
 80040de:	e092      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040e0:	4b4b      	ldr	r3, [pc, #300]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	2380      	movs	r3, #128	; 0x80
 80040e6:	049b      	lsls	r3, r3, #18
 80040e8:	4013      	ands	r3, r2
 80040ea:	d1f0      	bne.n	80040ce <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040ec:	4b48      	ldr	r3, [pc, #288]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	4a4c      	ldr	r2, [pc, #304]	; (8004224 <HAL_RCC_OscConfig+0x618>)
 80040f2:	4013      	ands	r3, r2
 80040f4:	0019      	movs	r1, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1a      	ldr	r2, [r3, #32]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004104:	021b      	lsls	r3, r3, #8
 8004106:	431a      	orrs	r2, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	431a      	orrs	r2, r3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004112:	431a      	orrs	r2, r3
 8004114:	4b3e      	ldr	r3, [pc, #248]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004116:	430a      	orrs	r2, r1
 8004118:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800411a:	4b3d      	ldr	r3, [pc, #244]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4b3c      	ldr	r3, [pc, #240]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004120:	2180      	movs	r1, #128	; 0x80
 8004122:	0449      	lsls	r1, r1, #17
 8004124:	430a      	orrs	r2, r1
 8004126:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004128:	4b39      	ldr	r3, [pc, #228]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	4b38      	ldr	r3, [pc, #224]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 800412e:	2180      	movs	r1, #128	; 0x80
 8004130:	0549      	lsls	r1, r1, #21
 8004132:	430a      	orrs	r2, r1
 8004134:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004136:	f7fe fb9b 	bl	8002870 <HAL_GetTick>
 800413a:	0003      	movs	r3, r0
 800413c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004140:	f7fe fb96 	bl	8002870 <HAL_GetTick>
 8004144:	0002      	movs	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e059      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004152:	4b2f      	ldr	r3, [pc, #188]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004154:	681a      	ldr	r2, [r3, #0]
 8004156:	2380      	movs	r3, #128	; 0x80
 8004158:	049b      	lsls	r3, r3, #18
 800415a:	4013      	ands	r3, r2
 800415c:	d0f0      	beq.n	8004140 <HAL_RCC_OscConfig+0x534>
 800415e:	e051      	b.n	8004204 <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	4b2a      	ldr	r3, [pc, #168]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004166:	492e      	ldr	r1, [pc, #184]	; (8004220 <HAL_RCC_OscConfig+0x614>)
 8004168:	400a      	ands	r2, r1
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fb80 	bl	8002870 <HAL_GetTick>
 8004170:	0003      	movs	r3, r0
 8004172:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004174:	e008      	b.n	8004188 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004176:	f7fe fb7b 	bl	8002870 <HAL_GetTick>
 800417a:	0002      	movs	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d901      	bls.n	8004188 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e03e      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004188:	4b21      	ldr	r3, [pc, #132]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	2380      	movs	r3, #128	; 0x80
 800418e:	049b      	lsls	r3, r3, #18
 8004190:	4013      	ands	r3, r2
 8004192:	d1f0      	bne.n	8004176 <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8004194:	4b1e      	ldr	r3, [pc, #120]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	4b1d      	ldr	r3, [pc, #116]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 800419a:	4923      	ldr	r1, [pc, #140]	; (8004228 <HAL_RCC_OscConfig+0x61c>)
 800419c:	400a      	ands	r2, r1
 800419e:	60da      	str	r2, [r3, #12]
 80041a0:	e030      	b.n	8004204 <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d101      	bne.n	80041ae <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e02b      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80041ae:	4b18      	ldr	r3, [pc, #96]	; (8004210 <HAL_RCC_OscConfig+0x604>)
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	2203      	movs	r2, #3
 80041b8:	401a      	ands	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d11e      	bne.n	8004200 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2270      	movs	r2, #112	; 0x70
 80041c6:	401a      	ands	r2, r3
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d117      	bne.n	8004200 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	23fe      	movs	r3, #254	; 0xfe
 80041d4:	01db      	lsls	r3, r3, #7
 80041d6:	401a      	ands	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d10e      	bne.n	8004200 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	23f8      	movs	r3, #248	; 0xf8
 80041e6:	039b      	lsls	r3, r3, #14
 80041e8:	401a      	ands	r2, r3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d106      	bne.n	8004200 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	0f5b      	lsrs	r3, r3, #29
 80041f6:	075a      	lsls	r2, r3, #29
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	0018      	movs	r0, r3
 8004208:	46bd      	mov	sp, r7
 800420a:	b008      	add	sp, #32
 800420c:	bd80      	pop	{r7, pc}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	40021000 	.word	0x40021000
 8004214:	40007000 	.word	0x40007000
 8004218:	00001388 	.word	0x00001388
 800421c:	efffffff 	.word	0xefffffff
 8004220:	feffffff 	.word	0xfeffffff
 8004224:	1fc1808c 	.word	0x1fc1808c
 8004228:	effefffc 	.word	0xeffefffc

0800422c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d101      	bne.n	8004240 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e0e9      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004240:	4b76      	ldr	r3, [pc, #472]	; (800441c <HAL_RCC_ClockConfig+0x1f0>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2207      	movs	r2, #7
 8004246:	4013      	ands	r3, r2
 8004248:	683a      	ldr	r2, [r7, #0]
 800424a:	429a      	cmp	r2, r3
 800424c:	d91e      	bls.n	800428c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424e:	4b73      	ldr	r3, [pc, #460]	; (800441c <HAL_RCC_ClockConfig+0x1f0>)
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	2207      	movs	r2, #7
 8004254:	4393      	bics	r3, r2
 8004256:	0019      	movs	r1, r3
 8004258:	4b70      	ldr	r3, [pc, #448]	; (800441c <HAL_RCC_ClockConfig+0x1f0>)
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004260:	f7fe fb06 	bl	8002870 <HAL_GetTick>
 8004264:	0003      	movs	r3, r0
 8004266:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004268:	e009      	b.n	800427e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800426a:	f7fe fb01 	bl	8002870 <HAL_GetTick>
 800426e:	0002      	movs	r2, r0
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	1ad3      	subs	r3, r2, r3
 8004274:	4a6a      	ldr	r2, [pc, #424]	; (8004420 <HAL_RCC_ClockConfig+0x1f4>)
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0ca      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800427e:	4b67      	ldr	r3, [pc, #412]	; (800441c <HAL_RCC_ClockConfig+0x1f0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	2207      	movs	r2, #7
 8004284:	4013      	ands	r3, r2
 8004286:	683a      	ldr	r2, [r7, #0]
 8004288:	429a      	cmp	r2, r3
 800428a:	d1ee      	bne.n	800426a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	2202      	movs	r2, #2
 8004292:	4013      	ands	r3, r2
 8004294:	d015      	beq.n	80042c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	2204      	movs	r2, #4
 800429c:	4013      	ands	r3, r2
 800429e:	d006      	beq.n	80042ae <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80042a0:	4b60      	ldr	r3, [pc, #384]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80042a2:	689a      	ldr	r2, [r3, #8]
 80042a4:	4b5f      	ldr	r3, [pc, #380]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80042a6:	21e0      	movs	r1, #224	; 0xe0
 80042a8:	01c9      	lsls	r1, r1, #7
 80042aa:	430a      	orrs	r2, r1
 80042ac:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042ae:	4b5d      	ldr	r3, [pc, #372]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	4a5d      	ldr	r2, [pc, #372]	; (8004428 <HAL_RCC_ClockConfig+0x1fc>)
 80042b4:	4013      	ands	r3, r2
 80042b6:	0019      	movs	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689a      	ldr	r2, [r3, #8]
 80042bc:	4b59      	ldr	r3, [pc, #356]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80042be:	430a      	orrs	r2, r1
 80042c0:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2201      	movs	r2, #1
 80042c8:	4013      	ands	r3, r2
 80042ca:	d057      	beq.n	800437c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d107      	bne.n	80042e4 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042d4:	4b53      	ldr	r3, [pc, #332]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80042d6:	681a      	ldr	r2, [r3, #0]
 80042d8:	2380      	movs	r3, #128	; 0x80
 80042da:	029b      	lsls	r3, r3, #10
 80042dc:	4013      	ands	r3, r2
 80042de:	d12b      	bne.n	8004338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e097      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	685b      	ldr	r3, [r3, #4]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d107      	bne.n	80042fc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ec:	4b4d      	ldr	r3, [pc, #308]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80042ee:	681a      	ldr	r2, [r3, #0]
 80042f0:	2380      	movs	r3, #128	; 0x80
 80042f2:	049b      	lsls	r3, r3, #18
 80042f4:	4013      	ands	r3, r2
 80042f6:	d11f      	bne.n	8004338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e08b      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d107      	bne.n	8004314 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004304:	4b47      	ldr	r3, [pc, #284]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4013      	ands	r3, r2
 800430e:	d113      	bne.n	8004338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e07f      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	2b03      	cmp	r3, #3
 800431a:	d106      	bne.n	800432a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800431c:	4b41      	ldr	r3, [pc, #260]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 800431e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004320:	2202      	movs	r2, #2
 8004322:	4013      	ands	r3, r2
 8004324:	d108      	bne.n	8004338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e074      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800432a:	4b3e      	ldr	r3, [pc, #248]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 800432c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800432e:	2202      	movs	r2, #2
 8004330:	4013      	ands	r3, r2
 8004332:	d101      	bne.n	8004338 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e06d      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004338:	4b3a      	ldr	r3, [pc, #232]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2207      	movs	r2, #7
 800433e:	4393      	bics	r3, r2
 8004340:	0019      	movs	r1, r3
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	4b37      	ldr	r3, [pc, #220]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 8004348:	430a      	orrs	r2, r1
 800434a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800434c:	f7fe fa90 	bl	8002870 <HAL_GetTick>
 8004350:	0003      	movs	r3, r0
 8004352:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004354:	e009      	b.n	800436a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004356:	f7fe fa8b 	bl	8002870 <HAL_GetTick>
 800435a:	0002      	movs	r2, r0
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	1ad3      	subs	r3, r2, r3
 8004360:	4a2f      	ldr	r2, [pc, #188]	; (8004420 <HAL_RCC_ClockConfig+0x1f4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d901      	bls.n	800436a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8004366:	2303      	movs	r3, #3
 8004368:	e054      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800436a:	4b2e      	ldr	r3, [pc, #184]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	2238      	movs	r2, #56	; 0x38
 8004370:	401a      	ands	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	429a      	cmp	r2, r3
 800437a:	d1ec      	bne.n	8004356 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800437c:	4b27      	ldr	r3, [pc, #156]	; (800441c <HAL_RCC_ClockConfig+0x1f0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2207      	movs	r2, #7
 8004382:	4013      	ands	r3, r2
 8004384:	683a      	ldr	r2, [r7, #0]
 8004386:	429a      	cmp	r2, r3
 8004388:	d21e      	bcs.n	80043c8 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800438a:	4b24      	ldr	r3, [pc, #144]	; (800441c <HAL_RCC_ClockConfig+0x1f0>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2207      	movs	r2, #7
 8004390:	4393      	bics	r3, r2
 8004392:	0019      	movs	r1, r3
 8004394:	4b21      	ldr	r3, [pc, #132]	; (800441c <HAL_RCC_ClockConfig+0x1f0>)
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	430a      	orrs	r2, r1
 800439a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800439c:	f7fe fa68 	bl	8002870 <HAL_GetTick>
 80043a0:	0003      	movs	r3, r0
 80043a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043a4:	e009      	b.n	80043ba <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a6:	f7fe fa63 	bl	8002870 <HAL_GetTick>
 80043aa:	0002      	movs	r2, r0
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1ad3      	subs	r3, r2, r3
 80043b0:	4a1b      	ldr	r2, [pc, #108]	; (8004420 <HAL_RCC_ClockConfig+0x1f4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d901      	bls.n	80043ba <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80043b6:	2303      	movs	r3, #3
 80043b8:	e02c      	b.n	8004414 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80043ba:	4b18      	ldr	r3, [pc, #96]	; (800441c <HAL_RCC_ClockConfig+0x1f0>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2207      	movs	r2, #7
 80043c0:	4013      	ands	r3, r2
 80043c2:	683a      	ldr	r2, [r7, #0]
 80043c4:	429a      	cmp	r2, r3
 80043c6:	d1ee      	bne.n	80043a6 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	2204      	movs	r2, #4
 80043ce:	4013      	ands	r3, r2
 80043d0:	d009      	beq.n	80043e6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80043d2:	4b14      	ldr	r3, [pc, #80]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80043d4:	689b      	ldr	r3, [r3, #8]
 80043d6:	4a15      	ldr	r2, [pc, #84]	; (800442c <HAL_RCC_ClockConfig+0x200>)
 80043d8:	4013      	ands	r3, r2
 80043da:	0019      	movs	r1, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	68da      	ldr	r2, [r3, #12]
 80043e0:	4b10      	ldr	r3, [pc, #64]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80043e2:	430a      	orrs	r2, r1
 80043e4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80043e6:	f000 f829 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80043ea:	0001      	movs	r1, r0
 80043ec:	4b0d      	ldr	r3, [pc, #52]	; (8004424 <HAL_RCC_ClockConfig+0x1f8>)
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	0a1b      	lsrs	r3, r3, #8
 80043f2:	220f      	movs	r2, #15
 80043f4:	401a      	ands	r2, r3
 80043f6:	4b0e      	ldr	r3, [pc, #56]	; (8004430 <HAL_RCC_ClockConfig+0x204>)
 80043f8:	0092      	lsls	r2, r2, #2
 80043fa:	58d3      	ldr	r3, [r2, r3]
 80043fc:	221f      	movs	r2, #31
 80043fe:	4013      	ands	r3, r2
 8004400:	000a      	movs	r2, r1
 8004402:	40da      	lsrs	r2, r3
 8004404:	4b0b      	ldr	r3, [pc, #44]	; (8004434 <HAL_RCC_ClockConfig+0x208>)
 8004406:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004408:	4b0b      	ldr	r3, [pc, #44]	; (8004438 <HAL_RCC_ClockConfig+0x20c>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	0018      	movs	r0, r3
 800440e:	f7fd fa0d 	bl	800182c <HAL_InitTick>
 8004412:	0003      	movs	r3, r0
}
 8004414:	0018      	movs	r0, r3
 8004416:	46bd      	mov	sp, r7
 8004418:	b004      	add	sp, #16
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40022000 	.word	0x40022000
 8004420:	00001388 	.word	0x00001388
 8004424:	40021000 	.word	0x40021000
 8004428:	fffff0ff 	.word	0xfffff0ff
 800442c:	ffff8fff 	.word	0xffff8fff
 8004430:	0800bde0 	.word	0x0800bde0
 8004434:	20000000 	.word	0x20000000
 8004438:	20000004 	.word	0x20000004

0800443c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004442:	4b3c      	ldr	r3, [pc, #240]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	2238      	movs	r2, #56	; 0x38
 8004448:	4013      	ands	r3, r2
 800444a:	d10f      	bne.n	800446c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800444c:	4b39      	ldr	r3, [pc, #228]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	0adb      	lsrs	r3, r3, #11
 8004452:	2207      	movs	r2, #7
 8004454:	4013      	ands	r3, r2
 8004456:	2201      	movs	r2, #1
 8004458:	409a      	lsls	r2, r3
 800445a:	0013      	movs	r3, r2
 800445c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	4835      	ldr	r0, [pc, #212]	; (8004538 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004462:	f7fb fe5b 	bl	800011c <__udivsi3>
 8004466:	0003      	movs	r3, r0
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	e05d      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800446c:	4b31      	ldr	r3, [pc, #196]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	2238      	movs	r2, #56	; 0x38
 8004472:	4013      	ands	r3, r2
 8004474:	2b08      	cmp	r3, #8
 8004476:	d102      	bne.n	800447e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004478:	4b2f      	ldr	r3, [pc, #188]	; (8004538 <HAL_RCC_GetSysClockFreq+0xfc>)
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	e054      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800447e:	4b2d      	ldr	r3, [pc, #180]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	2238      	movs	r2, #56	; 0x38
 8004484:	4013      	ands	r3, r2
 8004486:	2b10      	cmp	r3, #16
 8004488:	d138      	bne.n	80044fc <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800448a:	4b2a      	ldr	r3, [pc, #168]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	2203      	movs	r2, #3
 8004490:	4013      	ands	r3, r2
 8004492:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004494:	4b27      	ldr	r3, [pc, #156]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004496:	68db      	ldr	r3, [r3, #12]
 8004498:	091b      	lsrs	r3, r3, #4
 800449a:	2207      	movs	r2, #7
 800449c:	4013      	ands	r3, r2
 800449e:	3301      	adds	r3, #1
 80044a0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b03      	cmp	r3, #3
 80044a6:	d10d      	bne.n	80044c4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	4823      	ldr	r0, [pc, #140]	; (8004538 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044ac:	f7fb fe36 	bl	800011c <__udivsi3>
 80044b0:	0003      	movs	r3, r0
 80044b2:	0019      	movs	r1, r3
 80044b4:	4b1f      	ldr	r3, [pc, #124]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	0a1b      	lsrs	r3, r3, #8
 80044ba:	227f      	movs	r2, #127	; 0x7f
 80044bc:	4013      	ands	r3, r2
 80044be:	434b      	muls	r3, r1
 80044c0:	617b      	str	r3, [r7, #20]
        break;
 80044c2:	e00d      	b.n	80044e0 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80044c4:	68b9      	ldr	r1, [r7, #8]
 80044c6:	481c      	ldr	r0, [pc, #112]	; (8004538 <HAL_RCC_GetSysClockFreq+0xfc>)
 80044c8:	f7fb fe28 	bl	800011c <__udivsi3>
 80044cc:	0003      	movs	r3, r0
 80044ce:	0019      	movs	r1, r3
 80044d0:	4b18      	ldr	r3, [pc, #96]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	0a1b      	lsrs	r3, r3, #8
 80044d6:	227f      	movs	r2, #127	; 0x7f
 80044d8:	4013      	ands	r3, r2
 80044da:	434b      	muls	r3, r1
 80044dc:	617b      	str	r3, [r7, #20]
        break;
 80044de:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80044e0:	4b14      	ldr	r3, [pc, #80]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	0f5b      	lsrs	r3, r3, #29
 80044e6:	2207      	movs	r2, #7
 80044e8:	4013      	ands	r3, r2
 80044ea:	3301      	adds	r3, #1
 80044ec:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80044ee:	6879      	ldr	r1, [r7, #4]
 80044f0:	6978      	ldr	r0, [r7, #20]
 80044f2:	f7fb fe13 	bl	800011c <__udivsi3>
 80044f6:	0003      	movs	r3, r0
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e015      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80044fc:	4b0d      	ldr	r3, [pc, #52]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	2238      	movs	r2, #56	; 0x38
 8004502:	4013      	ands	r3, r2
 8004504:	2b20      	cmp	r3, #32
 8004506:	d103      	bne.n	8004510 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004508:	2380      	movs	r3, #128	; 0x80
 800450a:	021b      	lsls	r3, r3, #8
 800450c:	613b      	str	r3, [r7, #16]
 800450e:	e00b      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004510:	4b08      	ldr	r3, [pc, #32]	; (8004534 <HAL_RCC_GetSysClockFreq+0xf8>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2238      	movs	r2, #56	; 0x38
 8004516:	4013      	ands	r3, r2
 8004518:	2b18      	cmp	r3, #24
 800451a:	d103      	bne.n	8004524 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800451c:	23fa      	movs	r3, #250	; 0xfa
 800451e:	01db      	lsls	r3, r3, #7
 8004520:	613b      	str	r3, [r7, #16]
 8004522:	e001      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8004524:	2300      	movs	r3, #0
 8004526:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004528:	693b      	ldr	r3, [r7, #16]
}
 800452a:	0018      	movs	r0, r3
 800452c:	46bd      	mov	sp, r7
 800452e:	b006      	add	sp, #24
 8004530:	bd80      	pop	{r7, pc}
 8004532:	46c0      	nop			; (mov r8, r8)
 8004534:	40021000 	.word	0x40021000
 8004538:	00f42400 	.word	0x00f42400

0800453c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004540:	4b02      	ldr	r3, [pc, #8]	; (800454c <HAL_RCC_GetHCLKFreq+0x10>)
 8004542:	681b      	ldr	r3, [r3, #0]
}
 8004544:	0018      	movs	r0, r3
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
 800454a:	46c0      	nop			; (mov r8, r8)
 800454c:	20000000 	.word	0x20000000

08004550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004550:	b5b0      	push	{r4, r5, r7, lr}
 8004552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8004554:	f7ff fff2 	bl	800453c <HAL_RCC_GetHCLKFreq>
 8004558:	0004      	movs	r4, r0
 800455a:	f7ff fb4b 	bl	8003bf4 <LL_RCC_GetAPB1Prescaler>
 800455e:	0003      	movs	r3, r0
 8004560:	0b1a      	lsrs	r2, r3, #12
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_GetPCLK1Freq+0x28>)
 8004564:	0092      	lsls	r2, r2, #2
 8004566:	58d3      	ldr	r3, [r2, r3]
 8004568:	221f      	movs	r2, #31
 800456a:	4013      	ands	r3, r2
 800456c:	40dc      	lsrs	r4, r3
 800456e:	0023      	movs	r3, r4
}
 8004570:	0018      	movs	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	bdb0      	pop	{r4, r5, r7, pc}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	0800be20 	.word	0x0800be20

0800457c <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b082      	sub	sp, #8
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2207      	movs	r2, #7
 800458a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <HAL_RCC_GetClockConfig+0x4c>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	2207      	movs	r2, #7
 8004592:	401a      	ands	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <HAL_RCC_GetClockConfig+0x4c>)
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	23f0      	movs	r3, #240	; 0xf0
 800459e:	011b      	lsls	r3, r3, #4
 80045a0:	401a      	ands	r2, r3
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80045a6:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <HAL_RCC_GetClockConfig+0x4c>)
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	23e0      	movs	r3, #224	; 0xe0
 80045ac:	01db      	lsls	r3, r3, #7
 80045ae:	401a      	ands	r2, r3
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80045b4:	4b05      	ldr	r3, [pc, #20]	; (80045cc <HAL_RCC_GetClockConfig+0x50>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	2207      	movs	r2, #7
 80045ba:	401a      	ands	r2, r3
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	601a      	str	r2, [r3, #0]
}
 80045c0:	46c0      	nop			; (mov r8, r8)
 80045c2:	46bd      	mov	sp, r7
 80045c4:	b002      	add	sp, #8
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	40021000 	.word	0x40021000
 80045cc:	40022000 	.word	0x40022000

080045d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b086      	sub	sp, #24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80045d8:	2313      	movs	r3, #19
 80045da:	18fb      	adds	r3, r7, r3
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045e0:	2312      	movs	r3, #18
 80045e2:	18fb      	adds	r3, r7, r3
 80045e4:	2200      	movs	r2, #0
 80045e6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	2380      	movs	r3, #128	; 0x80
 80045ee:	029b      	lsls	r3, r3, #10
 80045f0:	4013      	ands	r3, r2
 80045f2:	d100      	bne.n	80045f6 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80045f4:	e0a3      	b.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80045f6:	2011      	movs	r0, #17
 80045f8:	183b      	adds	r3, r7, r0
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045fe:	4b86      	ldr	r3, [pc, #536]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004600:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004602:	2380      	movs	r3, #128	; 0x80
 8004604:	055b      	lsls	r3, r3, #21
 8004606:	4013      	ands	r3, r2
 8004608:	d110      	bne.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800460a:	4b83      	ldr	r3, [pc, #524]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800460c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800460e:	4b82      	ldr	r3, [pc, #520]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004610:	2180      	movs	r1, #128	; 0x80
 8004612:	0549      	lsls	r1, r1, #21
 8004614:	430a      	orrs	r2, r1
 8004616:	63da      	str	r2, [r3, #60]	; 0x3c
 8004618:	4b7f      	ldr	r3, [pc, #508]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800461a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461c:	2380      	movs	r3, #128	; 0x80
 800461e:	055b      	lsls	r3, r3, #21
 8004620:	4013      	ands	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
 8004624:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004626:	183b      	adds	r3, r7, r0
 8004628:	2201      	movs	r2, #1
 800462a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800462c:	4b7b      	ldr	r3, [pc, #492]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	4b7a      	ldr	r3, [pc, #488]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004632:	2180      	movs	r1, #128	; 0x80
 8004634:	0049      	lsls	r1, r1, #1
 8004636:	430a      	orrs	r2, r1
 8004638:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800463a:	f7fe f919 	bl	8002870 <HAL_GetTick>
 800463e:	0003      	movs	r3, r0
 8004640:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004642:	e00b      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004644:	f7fe f914 	bl	8002870 <HAL_GetTick>
 8004648:	0002      	movs	r2, r0
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	2b02      	cmp	r3, #2
 8004650:	d904      	bls.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8004652:	2313      	movs	r3, #19
 8004654:	18fb      	adds	r3, r7, r3
 8004656:	2203      	movs	r2, #3
 8004658:	701a      	strb	r2, [r3, #0]
        break;
 800465a:	e005      	b.n	8004668 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800465c:	4b6f      	ldr	r3, [pc, #444]	; (800481c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	2380      	movs	r3, #128	; 0x80
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	4013      	ands	r3, r2
 8004666:	d0ed      	beq.n	8004644 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004668:	2313      	movs	r3, #19
 800466a:	18fb      	adds	r3, r7, r3
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d154      	bne.n	800471c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004672:	4b69      	ldr	r3, [pc, #420]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004674:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004676:	23c0      	movs	r3, #192	; 0xc0
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	4013      	ands	r3, r2
 800467c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800467e:	697b      	ldr	r3, [r7, #20]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d019      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	697a      	ldr	r2, [r7, #20]
 800468a:	429a      	cmp	r2, r3
 800468c:	d014      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800468e:	4b62      	ldr	r3, [pc, #392]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004690:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004692:	4a63      	ldr	r2, [pc, #396]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004694:	4013      	ands	r3, r2
 8004696:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004698:	4b5f      	ldr	r3, [pc, #380]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800469a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800469c:	4b5e      	ldr	r3, [pc, #376]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800469e:	2180      	movs	r1, #128	; 0x80
 80046a0:	0249      	lsls	r1, r1, #9
 80046a2:	430a      	orrs	r2, r1
 80046a4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046a6:	4b5c      	ldr	r3, [pc, #368]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80046aa:	4b5b      	ldr	r3, [pc, #364]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046ac:	495d      	ldr	r1, [pc, #372]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80046ae:	400a      	ands	r2, r1
 80046b0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046b2:	4b59      	ldr	r3, [pc, #356]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	2201      	movs	r2, #1
 80046bc:	4013      	ands	r3, r2
 80046be:	d016      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c0:	f7fe f8d6 	bl	8002870 <HAL_GetTick>
 80046c4:	0003      	movs	r3, r0
 80046c6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046c8:	e00c      	b.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fe f8d1 	bl	8002870 <HAL_GetTick>
 80046ce:	0002      	movs	r2, r0
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	4a54      	ldr	r2, [pc, #336]	; (8004828 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d904      	bls.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80046da:	2313      	movs	r3, #19
 80046dc:	18fb      	adds	r3, r7, r3
 80046de:	2203      	movs	r2, #3
 80046e0:	701a      	strb	r2, [r3, #0]
            break;
 80046e2:	e004      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046e4:	4b4c      	ldr	r3, [pc, #304]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e8:	2202      	movs	r2, #2
 80046ea:	4013      	ands	r3, r2
 80046ec:	d0ed      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80046ee:	2313      	movs	r3, #19
 80046f0:	18fb      	adds	r3, r7, r3
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80046f8:	4b47      	ldr	r3, [pc, #284]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80046fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046fc:	4a48      	ldr	r2, [pc, #288]	; (8004820 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80046fe:	4013      	ands	r3, r2
 8004700:	0019      	movs	r1, r3
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	699a      	ldr	r2, [r3, #24]
 8004706:	4b44      	ldr	r3, [pc, #272]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004708:	430a      	orrs	r2, r1
 800470a:	65da      	str	r2, [r3, #92]	; 0x5c
 800470c:	e00c      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800470e:	2312      	movs	r3, #18
 8004710:	18fb      	adds	r3, r7, r3
 8004712:	2213      	movs	r2, #19
 8004714:	18ba      	adds	r2, r7, r2
 8004716:	7812      	ldrb	r2, [r2, #0]
 8004718:	701a      	strb	r2, [r3, #0]
 800471a:	e005      	b.n	8004728 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471c:	2312      	movs	r3, #18
 800471e:	18fb      	adds	r3, r7, r3
 8004720:	2213      	movs	r2, #19
 8004722:	18ba      	adds	r2, r7, r2
 8004724:	7812      	ldrb	r2, [r2, #0]
 8004726:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004728:	2311      	movs	r3, #17
 800472a:	18fb      	adds	r3, r7, r3
 800472c:	781b      	ldrb	r3, [r3, #0]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d105      	bne.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004732:	4b39      	ldr	r3, [pc, #228]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004734:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004736:	4b38      	ldr	r3, [pc, #224]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004738:	493c      	ldr	r1, [pc, #240]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800473a:	400a      	ands	r2, r1
 800473c:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2201      	movs	r2, #1
 8004744:	4013      	ands	r3, r2
 8004746:	d009      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004748:	4b33      	ldr	r3, [pc, #204]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800474a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800474c:	2203      	movs	r2, #3
 800474e:	4393      	bics	r3, r2
 8004750:	0019      	movs	r1, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	685a      	ldr	r2, [r3, #4]
 8004756:	4b30      	ldr	r3, [pc, #192]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004758:	430a      	orrs	r2, r1
 800475a:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2202      	movs	r2, #2
 8004762:	4013      	ands	r3, r2
 8004764:	d009      	beq.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004766:	4b2c      	ldr	r3, [pc, #176]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800476a:	220c      	movs	r2, #12
 800476c:	4393      	bics	r3, r2
 800476e:	0019      	movs	r1, r3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689a      	ldr	r2, [r3, #8]
 8004774:	4b28      	ldr	r3, [pc, #160]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004776:	430a      	orrs	r2, r1
 8004778:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2220      	movs	r2, #32
 8004780:	4013      	ands	r3, r2
 8004782:	d009      	beq.n	8004798 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004784:	4b24      	ldr	r3, [pc, #144]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004788:	4a29      	ldr	r2, [pc, #164]	; (8004830 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800478a:	4013      	ands	r3, r2
 800478c:	0019      	movs	r1, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	68da      	ldr	r2, [r3, #12]
 8004792:	4b21      	ldr	r3, [pc, #132]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004794:	430a      	orrs	r2, r1
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681a      	ldr	r2, [r3, #0]
 800479c:	2380      	movs	r3, #128	; 0x80
 800479e:	01db      	lsls	r3, r3, #7
 80047a0:	4013      	ands	r3, r2
 80047a2:	d015      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80047a4:	4b1c      	ldr	r3, [pc, #112]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	0899      	lsrs	r1, r3, #2
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	695a      	ldr	r2, [r3, #20]
 80047b0:	4b19      	ldr	r3, [pc, #100]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047b2:	430a      	orrs	r2, r1
 80047b4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695a      	ldr	r2, [r3, #20]
 80047ba:	2380      	movs	r3, #128	; 0x80
 80047bc:	05db      	lsls	r3, r3, #23
 80047be:	429a      	cmp	r2, r3
 80047c0:	d106      	bne.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047c2:	4b15      	ldr	r3, [pc, #84]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	4b14      	ldr	r3, [pc, #80]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047c8:	2180      	movs	r1, #128	; 0x80
 80047ca:	0249      	lsls	r1, r1, #9
 80047cc:	430a      	orrs	r2, r1
 80047ce:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	2380      	movs	r3, #128	; 0x80
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	4013      	ands	r3, r2
 80047da:	d016      	beq.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80047dc:	4b0e      	ldr	r3, [pc, #56]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	4a14      	ldr	r2, [pc, #80]	; (8004834 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80047e2:	4013      	ands	r3, r2
 80047e4:	0019      	movs	r1, r3
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691a      	ldr	r2, [r3, #16]
 80047ea:	4b0b      	ldr	r3, [pc, #44]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047ec:	430a      	orrs	r2, r1
 80047ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	691a      	ldr	r2, [r3, #16]
 80047f4:	2380      	movs	r3, #128	; 0x80
 80047f6:	01db      	lsls	r3, r3, #7
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d106      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80047fc:	4b06      	ldr	r3, [pc, #24]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80047fe:	68da      	ldr	r2, [r3, #12]
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004802:	2180      	movs	r1, #128	; 0x80
 8004804:	0249      	lsls	r1, r1, #9
 8004806:	430a      	orrs	r2, r1
 8004808:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 800480a:	2312      	movs	r3, #18
 800480c:	18fb      	adds	r3, r7, r3
 800480e:	781b      	ldrb	r3, [r3, #0]
}
 8004810:	0018      	movs	r0, r3
 8004812:	46bd      	mov	sp, r7
 8004814:	b006      	add	sp, #24
 8004816:	bd80      	pop	{r7, pc}
 8004818:	40021000 	.word	0x40021000
 800481c:	40007000 	.word	0x40007000
 8004820:	fffffcff 	.word	0xfffffcff
 8004824:	fffeffff 	.word	0xfffeffff
 8004828:	00001388 	.word	0x00001388
 800482c:	efffffff 	.word	0xefffffff
 8004830:	ffffcfff 	.word	0xffffcfff
 8004834:	ffff3fff 	.word	0xffff3fff

08004838 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b084      	sub	sp, #16
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d101      	bne.n	800484a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e0a8      	b.n	800499c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b00      	cmp	r3, #0
 8004850:	d109      	bne.n	8004866 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685a      	ldr	r2, [r3, #4]
 8004856:	2382      	movs	r3, #130	; 0x82
 8004858:	005b      	lsls	r3, r3, #1
 800485a:	429a      	cmp	r2, r3
 800485c:	d009      	beq.n	8004872 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	61da      	str	r2, [r3, #28]
 8004864:	e005      	b.n	8004872 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2200      	movs	r2, #0
 800486a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	225d      	movs	r2, #93	; 0x5d
 800487c:	5c9b      	ldrb	r3, [r3, r2]
 800487e:	b2db      	uxtb	r3, r3
 8004880:	2b00      	cmp	r3, #0
 8004882:	d107      	bne.n	8004894 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	225c      	movs	r2, #92	; 0x5c
 8004888:	2100      	movs	r1, #0
 800488a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	0018      	movs	r0, r3
 8004890:	f7fc ff50 	bl	8001734 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	225d      	movs	r2, #93	; 0x5d
 8004898:	2102      	movs	r1, #2
 800489a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2140      	movs	r1, #64	; 0x40
 80048a8:	438a      	bics	r2, r1
 80048aa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	68da      	ldr	r2, [r3, #12]
 80048b0:	23e0      	movs	r3, #224	; 0xe0
 80048b2:	00db      	lsls	r3, r3, #3
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d902      	bls.n	80048be <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80048b8:	2300      	movs	r3, #0
 80048ba:	60fb      	str	r3, [r7, #12]
 80048bc:	e002      	b.n	80048c4 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80048be:	2380      	movs	r3, #128	; 0x80
 80048c0:	015b      	lsls	r3, r3, #5
 80048c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68da      	ldr	r2, [r3, #12]
 80048c8:	23f0      	movs	r3, #240	; 0xf0
 80048ca:	011b      	lsls	r3, r3, #4
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d008      	beq.n	80048e2 <HAL_SPI_Init+0xaa>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	23e0      	movs	r3, #224	; 0xe0
 80048d6:	00db      	lsls	r3, r3, #3
 80048d8:	429a      	cmp	r2, r3
 80048da:	d002      	beq.n	80048e2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685a      	ldr	r2, [r3, #4]
 80048e6:	2382      	movs	r3, #130	; 0x82
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	401a      	ands	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6899      	ldr	r1, [r3, #8]
 80048f0:	2384      	movs	r3, #132	; 0x84
 80048f2:	021b      	lsls	r3, r3, #8
 80048f4:	400b      	ands	r3, r1
 80048f6:	431a      	orrs	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	2102      	movs	r1, #2
 80048fe:	400b      	ands	r3, r1
 8004900:	431a      	orrs	r2, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	2101      	movs	r1, #1
 8004908:	400b      	ands	r3, r1
 800490a:	431a      	orrs	r2, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6999      	ldr	r1, [r3, #24]
 8004910:	2380      	movs	r3, #128	; 0x80
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	400b      	ands	r3, r1
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	2138      	movs	r1, #56	; 0x38
 800491e:	400b      	ands	r3, r1
 8004920:	431a      	orrs	r2, r3
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	2180      	movs	r1, #128	; 0x80
 8004928:	400b      	ands	r3, r1
 800492a:	431a      	orrs	r2, r3
 800492c:	0011      	movs	r1, r2
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004932:	2380      	movs	r3, #128	; 0x80
 8004934:	019b      	lsls	r3, r3, #6
 8004936:	401a      	ands	r2, r3
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	430a      	orrs	r2, r1
 800493e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	699b      	ldr	r3, [r3, #24]
 8004944:	0c1b      	lsrs	r3, r3, #16
 8004946:	2204      	movs	r2, #4
 8004948:	401a      	ands	r2, r3
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494e:	2110      	movs	r1, #16
 8004950:	400b      	ands	r3, r1
 8004952:	431a      	orrs	r2, r3
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004958:	2108      	movs	r1, #8
 800495a:	400b      	ands	r3, r1
 800495c:	431a      	orrs	r2, r3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	68d9      	ldr	r1, [r3, #12]
 8004962:	23f0      	movs	r3, #240	; 0xf0
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	400b      	ands	r3, r1
 8004968:	431a      	orrs	r2, r3
 800496a:	0011      	movs	r1, r2
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	2380      	movs	r3, #128	; 0x80
 8004970:	015b      	lsls	r3, r3, #5
 8004972:	401a      	ands	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4907      	ldr	r1, [pc, #28]	; (80049a4 <HAL_SPI_Init+0x16c>)
 8004988:	400a      	ands	r2, r1
 800498a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	225d      	movs	r2, #93	; 0x5d
 8004996:	2101      	movs	r1, #1
 8004998:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	0018      	movs	r0, r3
 800499e:	46bd      	mov	sp, r7
 80049a0:	b004      	add	sp, #16
 80049a2:	bd80      	pop	{r7, pc}
 80049a4:	fffff7ff 	.word	0xfffff7ff

080049a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d101      	bne.n	80049ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80049b6:	2301      	movs	r3, #1
 80049b8:	e04a      	b.n	8004a50 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	223d      	movs	r2, #61	; 0x3d
 80049be:	5c9b      	ldrb	r3, [r3, r2]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d107      	bne.n	80049d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	223c      	movs	r2, #60	; 0x3c
 80049ca:	2100      	movs	r1, #0
 80049cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	0018      	movs	r0, r3
 80049d2:	f7fd fc69 	bl	80022a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	223d      	movs	r2, #61	; 0x3d
 80049da:	2102      	movs	r1, #2
 80049dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	3304      	adds	r3, #4
 80049e6:	0019      	movs	r1, r3
 80049e8:	0010      	movs	r0, r2
 80049ea:	f000 fe5f 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2248      	movs	r2, #72	; 0x48
 80049f2:	2101      	movs	r1, #1
 80049f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	223e      	movs	r2, #62	; 0x3e
 80049fa:	2101      	movs	r1, #1
 80049fc:	5499      	strb	r1, [r3, r2]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	223f      	movs	r2, #63	; 0x3f
 8004a02:	2101      	movs	r1, #1
 8004a04:	5499      	strb	r1, [r3, r2]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2240      	movs	r2, #64	; 0x40
 8004a0a:	2101      	movs	r1, #1
 8004a0c:	5499      	strb	r1, [r3, r2]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2241      	movs	r2, #65	; 0x41
 8004a12:	2101      	movs	r1, #1
 8004a14:	5499      	strb	r1, [r3, r2]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2242      	movs	r2, #66	; 0x42
 8004a1a:	2101      	movs	r1, #1
 8004a1c:	5499      	strb	r1, [r3, r2]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2243      	movs	r2, #67	; 0x43
 8004a22:	2101      	movs	r1, #1
 8004a24:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2244      	movs	r2, #68	; 0x44
 8004a2a:	2101      	movs	r1, #1
 8004a2c:	5499      	strb	r1, [r3, r2]
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2245      	movs	r2, #69	; 0x45
 8004a32:	2101      	movs	r1, #1
 8004a34:	5499      	strb	r1, [r3, r2]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2246      	movs	r2, #70	; 0x46
 8004a3a:	2101      	movs	r1, #1
 8004a3c:	5499      	strb	r1, [r3, r2]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2247      	movs	r2, #71	; 0x47
 8004a42:	2101      	movs	r1, #1
 8004a44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	223d      	movs	r2, #61	; 0x3d
 8004a4a:	2101      	movs	r1, #1
 8004a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a4e:	2300      	movs	r3, #0
}
 8004a50:	0018      	movs	r0, r3
 8004a52:	46bd      	mov	sp, r7
 8004a54:	b002      	add	sp, #8
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	223d      	movs	r2, #61	; 0x3d
 8004a64:	5c9b      	ldrb	r3, [r3, r2]
 8004a66:	b2db      	uxtb	r3, r3
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d001      	beq.n	8004a70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e034      	b.n	8004ada <HAL_TIM_Base_Start+0x82>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	223d      	movs	r2, #61	; 0x3d
 8004a74:	2102      	movs	r1, #2
 8004a76:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a19      	ldr	r2, [pc, #100]	; (8004ae4 <HAL_TIM_Base_Start+0x8c>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d009      	beq.n	8004a96 <HAL_TIM_Base_Start+0x3e>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a18      	ldr	r2, [pc, #96]	; (8004ae8 <HAL_TIM_Base_Start+0x90>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d004      	beq.n	8004a96 <HAL_TIM_Base_Start+0x3e>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a16      	ldr	r2, [pc, #88]	; (8004aec <HAL_TIM_Base_Start+0x94>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d116      	bne.n	8004ac4 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	4a14      	ldr	r2, [pc, #80]	; (8004af0 <HAL_TIM_Base_Start+0x98>)
 8004a9e:	4013      	ands	r3, r2
 8004aa0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2b06      	cmp	r3, #6
 8004aa6:	d016      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7e>
 8004aa8:	68fa      	ldr	r2, [r7, #12]
 8004aaa:	2380      	movs	r3, #128	; 0x80
 8004aac:	025b      	lsls	r3, r3, #9
 8004aae:	429a      	cmp	r2, r3
 8004ab0:	d011      	beq.n	8004ad6 <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	681a      	ldr	r2, [r3, #0]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	2101      	movs	r1, #1
 8004abe:	430a      	orrs	r2, r1
 8004ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ac2:	e008      	b.n	8004ad6 <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	2101      	movs	r1, #1
 8004ad0:	430a      	orrs	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]
 8004ad4:	e000      	b.n	8004ad8 <HAL_TIM_Base_Start+0x80>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ad6:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004ad8:	2300      	movs	r3, #0
}
 8004ada:	0018      	movs	r0, r3
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b004      	add	sp, #16
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40014000 	.word	0x40014000
 8004af0:	00010007 	.word	0x00010007

08004af4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	223d      	movs	r2, #61	; 0x3d
 8004b00:	5c9b      	ldrb	r3, [r3, r2]
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d001      	beq.n	8004b0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	e03c      	b.n	8004b86 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	223d      	movs	r2, #61	; 0x3d
 8004b10:	2102      	movs	r1, #2
 8004b12:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	2101      	movs	r1, #1
 8004b20:	430a      	orrs	r2, r1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4a19      	ldr	r2, [pc, #100]	; (8004b90 <HAL_TIM_Base_Start_IT+0x9c>)
 8004b2a:	4293      	cmp	r3, r2
 8004b2c:	d009      	beq.n	8004b42 <HAL_TIM_Base_Start_IT+0x4e>
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a18      	ldr	r2, [pc, #96]	; (8004b94 <HAL_TIM_Base_Start_IT+0xa0>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d004      	beq.n	8004b42 <HAL_TIM_Base_Start_IT+0x4e>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	4a16      	ldr	r2, [pc, #88]	; (8004b98 <HAL_TIM_Base_Start_IT+0xa4>)
 8004b3e:	4293      	cmp	r3, r2
 8004b40:	d116      	bne.n	8004b70 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689b      	ldr	r3, [r3, #8]
 8004b48:	4a14      	ldr	r2, [pc, #80]	; (8004b9c <HAL_TIM_Base_Start_IT+0xa8>)
 8004b4a:	4013      	ands	r3, r2
 8004b4c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2b06      	cmp	r3, #6
 8004b52:	d016      	beq.n	8004b82 <HAL_TIM_Base_Start_IT+0x8e>
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	2380      	movs	r3, #128	; 0x80
 8004b58:	025b      	lsls	r3, r3, #9
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d011      	beq.n	8004b82 <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	2101      	movs	r1, #1
 8004b6a:	430a      	orrs	r2, r1
 8004b6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b6e:	e008      	b.n	8004b82 <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2101      	movs	r1, #1
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	e000      	b.n	8004b84 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b82:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	0018      	movs	r0, r3
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	b004      	add	sp, #16
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	46c0      	nop			; (mov r8, r8)
 8004b90:	40012c00 	.word	0x40012c00
 8004b94:	40000400 	.word	0x40000400
 8004b98:	40014000 	.word	0x40014000
 8004b9c:	00010007 	.word	0x00010007

08004ba0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b082      	sub	sp, #8
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d101      	bne.n	8004bb2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e04a      	b.n	8004c48 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	223d      	movs	r2, #61	; 0x3d
 8004bb6:	5c9b      	ldrb	r3, [r3, r2]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d107      	bne.n	8004bce <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	223c      	movs	r2, #60	; 0x3c
 8004bc2:	2100      	movs	r1, #0
 8004bc4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	0018      	movs	r0, r3
 8004bca:	f7fd fbcd 	bl	8002368 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	223d      	movs	r2, #61	; 0x3d
 8004bd2:	2102      	movs	r1, #2
 8004bd4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	3304      	adds	r3, #4
 8004bde:	0019      	movs	r1, r3
 8004be0:	0010      	movs	r0, r2
 8004be2:	f000 fd63 	bl	80056ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2248      	movs	r2, #72	; 0x48
 8004bea:	2101      	movs	r1, #1
 8004bec:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	223e      	movs	r2, #62	; 0x3e
 8004bf2:	2101      	movs	r1, #1
 8004bf4:	5499      	strb	r1, [r3, r2]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	223f      	movs	r2, #63	; 0x3f
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	5499      	strb	r1, [r3, r2]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2240      	movs	r2, #64	; 0x40
 8004c02:	2101      	movs	r1, #1
 8004c04:	5499      	strb	r1, [r3, r2]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2241      	movs	r2, #65	; 0x41
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	5499      	strb	r1, [r3, r2]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2242      	movs	r2, #66	; 0x42
 8004c12:	2101      	movs	r1, #1
 8004c14:	5499      	strb	r1, [r3, r2]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2243      	movs	r2, #67	; 0x43
 8004c1a:	2101      	movs	r1, #1
 8004c1c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2244      	movs	r2, #68	; 0x44
 8004c22:	2101      	movs	r1, #1
 8004c24:	5499      	strb	r1, [r3, r2]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2245      	movs	r2, #69	; 0x45
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	5499      	strb	r1, [r3, r2]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2246      	movs	r2, #70	; 0x46
 8004c32:	2101      	movs	r1, #1
 8004c34:	5499      	strb	r1, [r3, r2]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2247      	movs	r2, #71	; 0x47
 8004c3a:	2101      	movs	r1, #1
 8004c3c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	223d      	movs	r2, #61	; 0x3d
 8004c42:	2101      	movs	r1, #1
 8004c44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	0018      	movs	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	b002      	add	sp, #8
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d108      	bne.n	8004c72 <HAL_TIM_PWM_Start+0x22>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	223e      	movs	r2, #62	; 0x3e
 8004c64:	5c9b      	ldrb	r3, [r3, r2]
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	1e5a      	subs	r2, r3, #1
 8004c6c:	4193      	sbcs	r3, r2
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	e037      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x92>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d108      	bne.n	8004c8a <HAL_TIM_PWM_Start+0x3a>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	223f      	movs	r2, #63	; 0x3f
 8004c7c:	5c9b      	ldrb	r3, [r3, r2]
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	1e5a      	subs	r2, r3, #1
 8004c84:	4193      	sbcs	r3, r2
 8004c86:	b2db      	uxtb	r3, r3
 8004c88:	e02b      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x92>
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d108      	bne.n	8004ca2 <HAL_TIM_PWM_Start+0x52>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2240      	movs	r2, #64	; 0x40
 8004c94:	5c9b      	ldrb	r3, [r3, r2]
 8004c96:	b2db      	uxtb	r3, r3
 8004c98:	3b01      	subs	r3, #1
 8004c9a:	1e5a      	subs	r2, r3, #1
 8004c9c:	4193      	sbcs	r3, r2
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	e01f      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x92>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b0c      	cmp	r3, #12
 8004ca6:	d108      	bne.n	8004cba <HAL_TIM_PWM_Start+0x6a>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2241      	movs	r2, #65	; 0x41
 8004cac:	5c9b      	ldrb	r3, [r3, r2]
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	3b01      	subs	r3, #1
 8004cb2:	1e5a      	subs	r2, r3, #1
 8004cb4:	4193      	sbcs	r3, r2
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	e013      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x92>
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	2b10      	cmp	r3, #16
 8004cbe:	d108      	bne.n	8004cd2 <HAL_TIM_PWM_Start+0x82>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2242      	movs	r2, #66	; 0x42
 8004cc4:	5c9b      	ldrb	r3, [r3, r2]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	3b01      	subs	r3, #1
 8004cca:	1e5a      	subs	r2, r3, #1
 8004ccc:	4193      	sbcs	r3, r2
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	e007      	b.n	8004ce2 <HAL_TIM_PWM_Start+0x92>
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2243      	movs	r2, #67	; 0x43
 8004cd6:	5c9b      	ldrb	r3, [r3, r2]
 8004cd8:	b2db      	uxtb	r3, r3
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	1e5a      	subs	r2, r3, #1
 8004cde:	4193      	sbcs	r3, r2
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e085      	b.n	8004df6 <HAL_TIM_PWM_Start+0x1a6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d104      	bne.n	8004cfa <HAL_TIM_PWM_Start+0xaa>
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	223e      	movs	r2, #62	; 0x3e
 8004cf4:	2102      	movs	r1, #2
 8004cf6:	5499      	strb	r1, [r3, r2]
 8004cf8:	e023      	b.n	8004d42 <HAL_TIM_PWM_Start+0xf2>
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	2b04      	cmp	r3, #4
 8004cfe:	d104      	bne.n	8004d0a <HAL_TIM_PWM_Start+0xba>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	223f      	movs	r2, #63	; 0x3f
 8004d04:	2102      	movs	r1, #2
 8004d06:	5499      	strb	r1, [r3, r2]
 8004d08:	e01b      	b.n	8004d42 <HAL_TIM_PWM_Start+0xf2>
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	2b08      	cmp	r3, #8
 8004d0e:	d104      	bne.n	8004d1a <HAL_TIM_PWM_Start+0xca>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2240      	movs	r2, #64	; 0x40
 8004d14:	2102      	movs	r1, #2
 8004d16:	5499      	strb	r1, [r3, r2]
 8004d18:	e013      	b.n	8004d42 <HAL_TIM_PWM_Start+0xf2>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	2b0c      	cmp	r3, #12
 8004d1e:	d104      	bne.n	8004d2a <HAL_TIM_PWM_Start+0xda>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2241      	movs	r2, #65	; 0x41
 8004d24:	2102      	movs	r1, #2
 8004d26:	5499      	strb	r1, [r3, r2]
 8004d28:	e00b      	b.n	8004d42 <HAL_TIM_PWM_Start+0xf2>
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	2b10      	cmp	r3, #16
 8004d2e:	d104      	bne.n	8004d3a <HAL_TIM_PWM_Start+0xea>
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2242      	movs	r2, #66	; 0x42
 8004d34:	2102      	movs	r1, #2
 8004d36:	5499      	strb	r1, [r3, r2]
 8004d38:	e003      	b.n	8004d42 <HAL_TIM_PWM_Start+0xf2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2243      	movs	r2, #67	; 0x43
 8004d3e:	2102      	movs	r1, #2
 8004d40:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	f000 ffe8 	bl	8005d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a2a      	ldr	r2, [pc, #168]	; (8004e00 <HAL_TIM_PWM_Start+0x1b0>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d00e      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x128>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a29      	ldr	r2, [pc, #164]	; (8004e04 <HAL_TIM_PWM_Start+0x1b4>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d009      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x128>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4a27      	ldr	r2, [pc, #156]	; (8004e08 <HAL_TIM_PWM_Start+0x1b8>)
 8004d6a:	4293      	cmp	r3, r2
 8004d6c:	d004      	beq.n	8004d78 <HAL_TIM_PWM_Start+0x128>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4a26      	ldr	r2, [pc, #152]	; (8004e0c <HAL_TIM_PWM_Start+0x1bc>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d101      	bne.n	8004d7c <HAL_TIM_PWM_Start+0x12c>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <HAL_TIM_PWM_Start+0x12e>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d008      	beq.n	8004d94 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2180      	movs	r1, #128	; 0x80
 8004d8e:	0209      	lsls	r1, r1, #8
 8004d90:	430a      	orrs	r2, r1
 8004d92:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a19      	ldr	r2, [pc, #100]	; (8004e00 <HAL_TIM_PWM_Start+0x1b0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d009      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x162>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	4a1b      	ldr	r2, [pc, #108]	; (8004e10 <HAL_TIM_PWM_Start+0x1c0>)
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d004      	beq.n	8004db2 <HAL_TIM_PWM_Start+0x162>
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a15      	ldr	r2, [pc, #84]	; (8004e04 <HAL_TIM_PWM_Start+0x1b4>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d116      	bne.n	8004de0 <HAL_TIM_PWM_Start+0x190>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	4a16      	ldr	r2, [pc, #88]	; (8004e14 <HAL_TIM_PWM_Start+0x1c4>)
 8004dba:	4013      	ands	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2b06      	cmp	r3, #6
 8004dc2:	d016      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x1a2>
 8004dc4:	68fa      	ldr	r2, [r7, #12]
 8004dc6:	2380      	movs	r3, #128	; 0x80
 8004dc8:	025b      	lsls	r3, r3, #9
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d011      	beq.n	8004df2 <HAL_TIM_PWM_Start+0x1a2>
    {
      __HAL_TIM_ENABLE(htim);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	2101      	movs	r1, #1
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dde:	e008      	b.n	8004df2 <HAL_TIM_PWM_Start+0x1a2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	2101      	movs	r1, #1
 8004dec:	430a      	orrs	r2, r1
 8004dee:	601a      	str	r2, [r3, #0]
 8004df0:	e000      	b.n	8004df4 <HAL_TIM_PWM_Start+0x1a4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004df2:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	0018      	movs	r0, r3
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	b004      	add	sp, #16
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	40012c00 	.word	0x40012c00
 8004e04:	40014000 	.word	0x40014000
 8004e08:	40014400 	.word	0x40014400
 8004e0c:	40014800 	.word	0x40014800
 8004e10:	40000400 	.word	0x40000400
 8004e14:	00010007 	.word	0x00010007

08004e18 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b082      	sub	sp, #8
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6839      	ldr	r1, [r7, #0]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	0018      	movs	r0, r3
 8004e2c:	f000 ff78 	bl	8005d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a37      	ldr	r2, [pc, #220]	; (8004f14 <HAL_TIM_PWM_Stop+0xfc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d00e      	beq.n	8004e58 <HAL_TIM_PWM_Stop+0x40>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	4a36      	ldr	r2, [pc, #216]	; (8004f18 <HAL_TIM_PWM_Stop+0x100>)
 8004e40:	4293      	cmp	r3, r2
 8004e42:	d009      	beq.n	8004e58 <HAL_TIM_PWM_Stop+0x40>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	4a34      	ldr	r2, [pc, #208]	; (8004f1c <HAL_TIM_PWM_Stop+0x104>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d004      	beq.n	8004e58 <HAL_TIM_PWM_Stop+0x40>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	4a33      	ldr	r2, [pc, #204]	; (8004f20 <HAL_TIM_PWM_Stop+0x108>)
 8004e54:	4293      	cmp	r3, r2
 8004e56:	d101      	bne.n	8004e5c <HAL_TIM_PWM_Stop+0x44>
 8004e58:	2301      	movs	r3, #1
 8004e5a:	e000      	b.n	8004e5e <HAL_TIM_PWM_Stop+0x46>
 8004e5c:	2300      	movs	r3, #0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d013      	beq.n	8004e8a <HAL_TIM_PWM_Stop+0x72>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	6a1b      	ldr	r3, [r3, #32]
 8004e68:	4a2e      	ldr	r2, [pc, #184]	; (8004f24 <HAL_TIM_PWM_Stop+0x10c>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	d10d      	bne.n	8004e8a <HAL_TIM_PWM_Stop+0x72>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	6a1b      	ldr	r3, [r3, #32]
 8004e74:	4a2c      	ldr	r2, [pc, #176]	; (8004f28 <HAL_TIM_PWM_Stop+0x110>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	d107      	bne.n	8004e8a <HAL_TIM_PWM_Stop+0x72>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4929      	ldr	r1, [pc, #164]	; (8004f2c <HAL_TIM_PWM_Stop+0x114>)
 8004e86:	400a      	ands	r2, r1
 8004e88:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	4a24      	ldr	r2, [pc, #144]	; (8004f24 <HAL_TIM_PWM_Stop+0x10c>)
 8004e92:	4013      	ands	r3, r2
 8004e94:	d10d      	bne.n	8004eb2 <HAL_TIM_PWM_Stop+0x9a>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6a1b      	ldr	r3, [r3, #32]
 8004e9c:	4a22      	ldr	r2, [pc, #136]	; (8004f28 <HAL_TIM_PWM_Stop+0x110>)
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	d107      	bne.n	8004eb2 <HAL_TIM_PWM_Stop+0x9a>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2101      	movs	r1, #1
 8004eae:	438a      	bics	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d104      	bne.n	8004ec2 <HAL_TIM_PWM_Stop+0xaa>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	223e      	movs	r2, #62	; 0x3e
 8004ebc:	2101      	movs	r1, #1
 8004ebe:	5499      	strb	r1, [r3, r2]
 8004ec0:	e023      	b.n	8004f0a <HAL_TIM_PWM_Stop+0xf2>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b04      	cmp	r3, #4
 8004ec6:	d104      	bne.n	8004ed2 <HAL_TIM_PWM_Stop+0xba>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	223f      	movs	r2, #63	; 0x3f
 8004ecc:	2101      	movs	r1, #1
 8004ece:	5499      	strb	r1, [r3, r2]
 8004ed0:	e01b      	b.n	8004f0a <HAL_TIM_PWM_Stop+0xf2>
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	2b08      	cmp	r3, #8
 8004ed6:	d104      	bne.n	8004ee2 <HAL_TIM_PWM_Stop+0xca>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2240      	movs	r2, #64	; 0x40
 8004edc:	2101      	movs	r1, #1
 8004ede:	5499      	strb	r1, [r3, r2]
 8004ee0:	e013      	b.n	8004f0a <HAL_TIM_PWM_Stop+0xf2>
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b0c      	cmp	r3, #12
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_PWM_Stop+0xda>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2241      	movs	r2, #65	; 0x41
 8004eec:	2101      	movs	r1, #1
 8004eee:	5499      	strb	r1, [r3, r2]
 8004ef0:	e00b      	b.n	8004f0a <HAL_TIM_PWM_Stop+0xf2>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b10      	cmp	r3, #16
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_PWM_Stop+0xea>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2242      	movs	r2, #66	; 0x42
 8004efc:	2101      	movs	r1, #1
 8004efe:	5499      	strb	r1, [r3, r2]
 8004f00:	e003      	b.n	8004f0a <HAL_TIM_PWM_Stop+0xf2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2243      	movs	r2, #67	; 0x43
 8004f06:	2101      	movs	r1, #1
 8004f08:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8004f0a:	2300      	movs	r3, #0
}
 8004f0c:	0018      	movs	r0, r3
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	b002      	add	sp, #8
 8004f12:	bd80      	pop	{r7, pc}
 8004f14:	40012c00 	.word	0x40012c00
 8004f18:	40014000 	.word	0x40014000
 8004f1c:	40014400 	.word	0x40014400
 8004f20:	40014800 	.word	0x40014800
 8004f24:	00001111 	.word	0x00001111
 8004f28:	00000444 	.word	0x00000444
 8004f2c:	ffff7fff 	.word	0xffff7fff

08004f30 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e090      	b.n	8005066 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	223d      	movs	r2, #61	; 0x3d
 8004f48:	5c9b      	ldrb	r3, [r3, r2]
 8004f4a:	b2db      	uxtb	r3, r3
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d107      	bne.n	8004f60 <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	223c      	movs	r2, #60	; 0x3c
 8004f54:	2100      	movs	r1, #0
 8004f56:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	0018      	movs	r0, r3
 8004f5c:	f7fd f910 	bl	8002180 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	223d      	movs	r2, #61	; 0x3d
 8004f64:	2102      	movs	r1, #2
 8004f66:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689a      	ldr	r2, [r3, #8]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	493f      	ldr	r1, [pc, #252]	; (8005070 <HAL_TIM_Encoder_Init+0x140>)
 8004f74:	400a      	ands	r2, r1
 8004f76:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	0019      	movs	r1, r3
 8004f82:	0010      	movs	r0, r2
 8004f84:	f000 fb92 	bl	80056ac <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	689b      	ldr	r3, [r3, #8]
 8004f8e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699b      	ldr	r3, [r3, #24]
 8004f96:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	6a1b      	ldr	r3, [r3, #32]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	697a      	ldr	r2, [r7, #20]
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	4a31      	ldr	r2, [pc, #196]	; (8005074 <HAL_TIM_Encoder_Init+0x144>)
 8004fae:	4013      	ands	r3, r2
 8004fb0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	689a      	ldr	r2, [r3, #8]
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	699b      	ldr	r3, [r3, #24]
 8004fba:	021b      	lsls	r3, r3, #8
 8004fbc:	4313      	orrs	r3, r2
 8004fbe:	693a      	ldr	r2, [r7, #16]
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4a2c      	ldr	r2, [pc, #176]	; (8005078 <HAL_TIM_Encoder_Init+0x148>)
 8004fc8:	4013      	ands	r3, r2
 8004fca:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4a2b      	ldr	r2, [pc, #172]	; (800507c <HAL_TIM_Encoder_Init+0x14c>)
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	68da      	ldr	r2, [r3, #12]
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	69db      	ldr	r3, [r3, #28]
 8004fdc:	021b      	lsls	r3, r3, #8
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	011a      	lsls	r2, r3, #4
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	031b      	lsls	r3, r3, #12
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2222      	movs	r2, #34	; 0x22
 8004ffe:	4393      	bics	r3, r2
 8005000:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2288      	movs	r2, #136	; 0x88
 8005006:	4393      	bics	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	685a      	ldr	r2, [r3, #4]
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	695b      	ldr	r3, [r3, #20]
 8005012:	011b      	lsls	r3, r3, #4
 8005014:	4313      	orrs	r3, r2
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4313      	orrs	r3, r2
 800501a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	697a      	ldr	r2, [r7, #20]
 8005022:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	693a      	ldr	r2, [r7, #16]
 800502a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2248      	movs	r2, #72	; 0x48
 8005038:	2101      	movs	r1, #1
 800503a:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	223e      	movs	r2, #62	; 0x3e
 8005040:	2101      	movs	r1, #1
 8005042:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	223f      	movs	r2, #63	; 0x3f
 8005048:	2101      	movs	r1, #1
 800504a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2244      	movs	r2, #68	; 0x44
 8005050:	2101      	movs	r1, #1
 8005052:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2245      	movs	r2, #69	; 0x45
 8005058:	2101      	movs	r1, #1
 800505a:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	223d      	movs	r2, #61	; 0x3d
 8005060:	2101      	movs	r1, #1
 8005062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005064:	2300      	movs	r3, #0
}
 8005066:	0018      	movs	r0, r3
 8005068:	46bd      	mov	sp, r7
 800506a:	b006      	add	sp, #24
 800506c:	bd80      	pop	{r7, pc}
 800506e:	46c0      	nop			; (mov r8, r8)
 8005070:	fffebff8 	.word	0xfffebff8
 8005074:	fffffcfc 	.word	0xfffffcfc
 8005078:	fffff3f3 	.word	0xfffff3f3
 800507c:	ffff0f0f 	.word	0xffff0f0f

08005080 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005080:	b590      	push	{r4, r7, lr}
 8005082:	b085      	sub	sp, #20
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800508a:	200f      	movs	r0, #15
 800508c:	183b      	adds	r3, r7, r0
 800508e:	687a      	ldr	r2, [r7, #4]
 8005090:	213e      	movs	r1, #62	; 0x3e
 8005092:	5c52      	ldrb	r2, [r2, r1]
 8005094:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005096:	230e      	movs	r3, #14
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	213f      	movs	r1, #63	; 0x3f
 800509e:	5c52      	ldrb	r2, [r2, r1]
 80050a0:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80050a2:	240d      	movs	r4, #13
 80050a4:	193b      	adds	r3, r7, r4
 80050a6:	687a      	ldr	r2, [r7, #4]
 80050a8:	2144      	movs	r1, #68	; 0x44
 80050aa:	5c52      	ldrb	r2, [r2, r1]
 80050ac:	701a      	strb	r2, [r3, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80050ae:	230c      	movs	r3, #12
 80050b0:	18fb      	adds	r3, r7, r3
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	2145      	movs	r1, #69	; 0x45
 80050b6:	5c52      	ldrb	r2, [r2, r1]
 80050b8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d112      	bne.n	80050e6 <HAL_TIM_Encoder_Start_IT+0x66>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80050c0:	183b      	adds	r3, r7, r0
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b01      	cmp	r3, #1
 80050c6:	d103      	bne.n	80050d0 <HAL_TIM_Encoder_Start_IT+0x50>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80050c8:	193b      	adds	r3, r7, r4
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b01      	cmp	r3, #1
 80050ce:	d001      	beq.n	80050d4 <HAL_TIM_Encoder_Start_IT+0x54>
    {
      return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e095      	b.n	8005200 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	223e      	movs	r2, #62	; 0x3e
 80050d8:	2102      	movs	r1, #2
 80050da:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2244      	movs	r2, #68	; 0x44
 80050e0:	2102      	movs	r1, #2
 80050e2:	5499      	strb	r1, [r3, r2]
 80050e4:	e03d      	b.n	8005162 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d114      	bne.n	8005116 <HAL_TIM_Encoder_Start_IT+0x96>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80050ec:	230e      	movs	r3, #14
 80050ee:	18fb      	adds	r3, r7, r3
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d104      	bne.n	8005100 <HAL_TIM_Encoder_Start_IT+0x80>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80050f6:	230c      	movs	r3, #12
 80050f8:	18fb      	adds	r3, r7, r3
 80050fa:	781b      	ldrb	r3, [r3, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d001      	beq.n	8005104 <HAL_TIM_Encoder_Start_IT+0x84>
    {
      return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e07d      	b.n	8005200 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	223f      	movs	r2, #63	; 0x3f
 8005108:	2102      	movs	r1, #2
 800510a:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2245      	movs	r2, #69	; 0x45
 8005110:	2102      	movs	r1, #2
 8005112:	5499      	strb	r1, [r3, r2]
 8005114:	e025      	b.n	8005162 <HAL_TIM_Encoder_Start_IT+0xe2>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005116:	230f      	movs	r3, #15
 8005118:	18fb      	adds	r3, r7, r3
 800511a:	781b      	ldrb	r3, [r3, #0]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d10e      	bne.n	800513e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005120:	230e      	movs	r3, #14
 8005122:	18fb      	adds	r3, r7, r3
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d109      	bne.n	800513e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800512a:	230d      	movs	r3, #13
 800512c:	18fb      	adds	r3, r7, r3
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	2b01      	cmp	r3, #1
 8005132:	d104      	bne.n	800513e <HAL_TIM_Encoder_Start_IT+0xbe>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005134:	230c      	movs	r3, #12
 8005136:	18fb      	adds	r3, r7, r3
 8005138:	781b      	ldrb	r3, [r3, #0]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d001      	beq.n	8005142 <HAL_TIM_Encoder_Start_IT+0xc2>
    {
      return HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	e05e      	b.n	8005200 <HAL_TIM_Encoder_Start_IT+0x180>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	223e      	movs	r2, #62	; 0x3e
 8005146:	2102      	movs	r1, #2
 8005148:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	223f      	movs	r2, #63	; 0x3f
 800514e:	2102      	movs	r1, #2
 8005150:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2244      	movs	r2, #68	; 0x44
 8005156:	2102      	movs	r1, #2
 8005158:	5499      	strb	r1, [r3, r2]
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2245      	movs	r2, #69	; 0x45
 800515e:	2102      	movs	r1, #2
 8005160:	5499      	strb	r1, [r3, r2]
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d003      	beq.n	8005170 <HAL_TIM_Encoder_Start_IT+0xf0>
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b04      	cmp	r3, #4
 800516c:	d010      	beq.n	8005190 <HAL_TIM_Encoder_Start_IT+0x110>
 800516e:	e01f      	b.n	80051b0 <HAL_TIM_Encoder_Start_IT+0x130>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	2201      	movs	r2, #1
 8005176:	2100      	movs	r1, #0
 8005178:	0018      	movs	r0, r3
 800517a:	f000 fdd1 	bl	8005d20 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68da      	ldr	r2, [r3, #12]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2102      	movs	r1, #2
 800518a:	430a      	orrs	r2, r1
 800518c:	60da      	str	r2, [r3, #12]
      break;
 800518e:	e02e      	b.n	80051ee <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	2104      	movs	r1, #4
 8005198:	0018      	movs	r0, r3
 800519a:	f000 fdc1 	bl	8005d20 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2104      	movs	r1, #4
 80051aa:	430a      	orrs	r2, r1
 80051ac:	60da      	str	r2, [r3, #12]
      break;
 80051ae:	e01e      	b.n	80051ee <HAL_TIM_Encoder_Start_IT+0x16e>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2201      	movs	r2, #1
 80051b6:	2100      	movs	r1, #0
 80051b8:	0018      	movs	r0, r3
 80051ba:	f000 fdb1 	bl	8005d20 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	2104      	movs	r1, #4
 80051c6:	0018      	movs	r0, r3
 80051c8:	f000 fdaa 	bl	8005d20 <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2102      	movs	r1, #2
 80051d8:	430a      	orrs	r2, r1
 80051da:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68da      	ldr	r2, [r3, #12]
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2104      	movs	r1, #4
 80051e8:	430a      	orrs	r2, r1
 80051ea:	60da      	str	r2, [r3, #12]
      break;
 80051ec:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	2101      	movs	r1, #1
 80051fa:	430a      	orrs	r2, r1
 80051fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80051fe:	2300      	movs	r3, #0
}
 8005200:	0018      	movs	r0, r3
 8005202:	46bd      	mov	sp, r7
 8005204:	b005      	add	sp, #20
 8005206:	bd90      	pop	{r4, r7, pc}

08005208 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b082      	sub	sp, #8
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	2202      	movs	r2, #2
 8005218:	4013      	ands	r3, r2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d124      	bne.n	8005268 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68db      	ldr	r3, [r3, #12]
 8005224:	2202      	movs	r2, #2
 8005226:	4013      	ands	r3, r2
 8005228:	2b02      	cmp	r3, #2
 800522a:	d11d      	bne.n	8005268 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2203      	movs	r2, #3
 8005232:	4252      	negs	r2, r2
 8005234:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	699b      	ldr	r3, [r3, #24]
 8005242:	2203      	movs	r2, #3
 8005244:	4013      	ands	r3, r2
 8005246:	d004      	beq.n	8005252 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	0018      	movs	r0, r3
 800524c:	f000 fa16 	bl	800567c <HAL_TIM_IC_CaptureCallback>
 8005250:	e007      	b.n	8005262 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	0018      	movs	r0, r3
 8005256:	f000 fa09 	bl	800566c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	0018      	movs	r0, r3
 800525e:	f000 fa15 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	2204      	movs	r2, #4
 8005270:	4013      	ands	r3, r2
 8005272:	2b04      	cmp	r3, #4
 8005274:	d125      	bne.n	80052c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68db      	ldr	r3, [r3, #12]
 800527c:	2204      	movs	r2, #4
 800527e:	4013      	ands	r3, r2
 8005280:	2b04      	cmp	r3, #4
 8005282:	d11e      	bne.n	80052c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	2205      	movs	r2, #5
 800528a:	4252      	negs	r2, r2
 800528c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2202      	movs	r2, #2
 8005292:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	699a      	ldr	r2, [r3, #24]
 800529a:	23c0      	movs	r3, #192	; 0xc0
 800529c:	009b      	lsls	r3, r3, #2
 800529e:	4013      	ands	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	0018      	movs	r0, r3
 80052a6:	f000 f9e9 	bl	800567c <HAL_TIM_IC_CaptureCallback>
 80052aa:	e007      	b.n	80052bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	0018      	movs	r0, r3
 80052b0:	f000 f9dc 	bl	800566c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	0018      	movs	r0, r3
 80052b8:	f000 f9e8 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2200      	movs	r2, #0
 80052c0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2208      	movs	r2, #8
 80052ca:	4013      	ands	r3, r2
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d124      	bne.n	800531a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	2208      	movs	r2, #8
 80052d8:	4013      	ands	r3, r2
 80052da:	2b08      	cmp	r3, #8
 80052dc:	d11d      	bne.n	800531a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	2209      	movs	r2, #9
 80052e4:	4252      	negs	r2, r2
 80052e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2204      	movs	r2, #4
 80052ec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	2203      	movs	r2, #3
 80052f6:	4013      	ands	r3, r2
 80052f8:	d004      	beq.n	8005304 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	0018      	movs	r0, r3
 80052fe:	f000 f9bd 	bl	800567c <HAL_TIM_IC_CaptureCallback>
 8005302:	e007      	b.n	8005314 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	0018      	movs	r0, r3
 8005308:	f000 f9b0 	bl	800566c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	0018      	movs	r0, r3
 8005310:	f000 f9bc 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2200      	movs	r2, #0
 8005318:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	691b      	ldr	r3, [r3, #16]
 8005320:	2210      	movs	r2, #16
 8005322:	4013      	ands	r3, r2
 8005324:	2b10      	cmp	r3, #16
 8005326:	d125      	bne.n	8005374 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	2210      	movs	r2, #16
 8005330:	4013      	ands	r3, r2
 8005332:	2b10      	cmp	r3, #16
 8005334:	d11e      	bne.n	8005374 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	2211      	movs	r2, #17
 800533c:	4252      	negs	r2, r2
 800533e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2208      	movs	r2, #8
 8005344:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69da      	ldr	r2, [r3, #28]
 800534c:	23c0      	movs	r3, #192	; 0xc0
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4013      	ands	r3, r2
 8005352:	d004      	beq.n	800535e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	0018      	movs	r0, r3
 8005358:	f000 f990 	bl	800567c <HAL_TIM_IC_CaptureCallback>
 800535c:	e007      	b.n	800536e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	0018      	movs	r0, r3
 8005362:	f000 f983 	bl	800566c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	0018      	movs	r0, r3
 800536a:	f000 f98f 	bl	800568c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	691b      	ldr	r3, [r3, #16]
 800537a:	2201      	movs	r2, #1
 800537c:	4013      	ands	r3, r2
 800537e:	2b01      	cmp	r3, #1
 8005380:	d10f      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	68db      	ldr	r3, [r3, #12]
 8005388:	2201      	movs	r2, #1
 800538a:	4013      	ands	r3, r2
 800538c:	2b01      	cmp	r3, #1
 800538e:	d108      	bne.n	80053a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	2202      	movs	r2, #2
 8005396:	4252      	negs	r2, r2
 8005398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	0018      	movs	r0, r3
 800539e:	f7fc f973 	bl	8001688 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	2280      	movs	r2, #128	; 0x80
 80053aa:	4013      	ands	r3, r2
 80053ac:	2b80      	cmp	r3, #128	; 0x80
 80053ae:	d10f      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2280      	movs	r2, #128	; 0x80
 80053b8:	4013      	ands	r3, r2
 80053ba:	2b80      	cmp	r3, #128	; 0x80
 80053bc:	d108      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2281      	movs	r2, #129	; 0x81
 80053c4:	4252      	negs	r2, r2
 80053c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	0018      	movs	r0, r3
 80053cc:	f000 fde2 	bl	8005f94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691a      	ldr	r2, [r3, #16]
 80053d6:	2380      	movs	r3, #128	; 0x80
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	401a      	ands	r2, r3
 80053dc:	2380      	movs	r3, #128	; 0x80
 80053de:	005b      	lsls	r3, r3, #1
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d10e      	bne.n	8005402 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	4013      	ands	r3, r2
 80053ee:	2b80      	cmp	r3, #128	; 0x80
 80053f0:	d107      	bne.n	8005402 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	4a1c      	ldr	r2, [pc, #112]	; (8005468 <HAL_TIM_IRQHandler+0x260>)
 80053f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	0018      	movs	r0, r3
 80053fe:	f000 fdd1 	bl	8005fa4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	691b      	ldr	r3, [r3, #16]
 8005408:	2240      	movs	r2, #64	; 0x40
 800540a:	4013      	ands	r3, r2
 800540c:	2b40      	cmp	r3, #64	; 0x40
 800540e:	d10f      	bne.n	8005430 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	68db      	ldr	r3, [r3, #12]
 8005416:	2240      	movs	r2, #64	; 0x40
 8005418:	4013      	ands	r3, r2
 800541a:	2b40      	cmp	r3, #64	; 0x40
 800541c:	d108      	bne.n	8005430 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	2241      	movs	r2, #65	; 0x41
 8005424:	4252      	negs	r2, r2
 8005426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	0018      	movs	r0, r3
 800542c:	f000 f936 	bl	800569c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2220      	movs	r2, #32
 8005438:	4013      	ands	r3, r2
 800543a:	2b20      	cmp	r3, #32
 800543c:	d10f      	bne.n	800545e <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	4013      	ands	r3, r2
 8005448:	2b20      	cmp	r3, #32
 800544a:	d108      	bne.n	800545e <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2221      	movs	r2, #33	; 0x21
 8005452:	4252      	negs	r2, r2
 8005454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	0018      	movs	r0, r3
 800545a:	f000 fd93 	bl	8005f84 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800545e:	46c0      	nop			; (mov r8, r8)
 8005460:	46bd      	mov	sp, r7
 8005462:	b002      	add	sp, #8
 8005464:	bd80      	pop	{r7, pc}
 8005466:	46c0      	nop			; (mov r8, r8)
 8005468:	fffffeff 	.word	0xfffffeff

0800546c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005478:	2317      	movs	r3, #23
 800547a:	18fb      	adds	r3, r7, r3
 800547c:	2200      	movs	r2, #0
 800547e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	223c      	movs	r2, #60	; 0x3c
 8005484:	5c9b      	ldrb	r3, [r3, r2]
 8005486:	2b01      	cmp	r3, #1
 8005488:	d101      	bne.n	800548e <HAL_TIM_PWM_ConfigChannel+0x22>
 800548a:	2302      	movs	r3, #2
 800548c:	e0e5      	b.n	800565a <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	223c      	movs	r2, #60	; 0x3c
 8005492:	2101      	movs	r1, #1
 8005494:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	2b14      	cmp	r3, #20
 800549a:	d900      	bls.n	800549e <HAL_TIM_PWM_ConfigChannel+0x32>
 800549c:	e0d1      	b.n	8005642 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	009a      	lsls	r2, r3, #2
 80054a2:	4b70      	ldr	r3, [pc, #448]	; (8005664 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80054a4:	18d3      	adds	r3, r2, r3
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68ba      	ldr	r2, [r7, #8]
 80054b0:	0011      	movs	r1, r2
 80054b2:	0018      	movs	r0, r3
 80054b4:	f000 f970 	bl	8005798 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	699a      	ldr	r2, [r3, #24]
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	2108      	movs	r1, #8
 80054c4:	430a      	orrs	r2, r1
 80054c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699a      	ldr	r2, [r3, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	2104      	movs	r1, #4
 80054d4:	438a      	bics	r2, r1
 80054d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	6999      	ldr	r1, [r3, #24]
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	691a      	ldr	r2, [r3, #16]
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	430a      	orrs	r2, r1
 80054e8:	619a      	str	r2, [r3, #24]
      break;
 80054ea:	e0af      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68ba      	ldr	r2, [r7, #8]
 80054f2:	0011      	movs	r1, r2
 80054f4:	0018      	movs	r0, r3
 80054f6:	f000 f9d9 	bl	80058ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	699a      	ldr	r2, [r3, #24]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2180      	movs	r1, #128	; 0x80
 8005506:	0109      	lsls	r1, r1, #4
 8005508:	430a      	orrs	r2, r1
 800550a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	699a      	ldr	r2, [r3, #24]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4954      	ldr	r1, [pc, #336]	; (8005668 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005518:	400a      	ands	r2, r1
 800551a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	6999      	ldr	r1, [r3, #24]
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	021a      	lsls	r2, r3, #8
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	430a      	orrs	r2, r1
 800552e:	619a      	str	r2, [r3, #24]
      break;
 8005530:	e08c      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	0011      	movs	r1, r2
 800553a:	0018      	movs	r0, r3
 800553c:	f000 fa3a 	bl	80059b4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	69da      	ldr	r2, [r3, #28]
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	2108      	movs	r1, #8
 800554c:	430a      	orrs	r2, r1
 800554e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	69da      	ldr	r2, [r3, #28]
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2104      	movs	r1, #4
 800555c:	438a      	bics	r2, r1
 800555e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	69d9      	ldr	r1, [r3, #28]
 8005566:	68bb      	ldr	r3, [r7, #8]
 8005568:	691a      	ldr	r2, [r3, #16]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	430a      	orrs	r2, r1
 8005570:	61da      	str	r2, [r3, #28]
      break;
 8005572:	e06b      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	0011      	movs	r1, r2
 800557c:	0018      	movs	r0, r3
 800557e:	f000 faa1 	bl	8005ac4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	69da      	ldr	r2, [r3, #28]
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2180      	movs	r1, #128	; 0x80
 800558e:	0109      	lsls	r1, r1, #4
 8005590:	430a      	orrs	r2, r1
 8005592:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	69da      	ldr	r2, [r3, #28]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	4932      	ldr	r1, [pc, #200]	; (8005668 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80055a0:	400a      	ands	r2, r1
 80055a2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	69d9      	ldr	r1, [r3, #28]
 80055aa:	68bb      	ldr	r3, [r7, #8]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	021a      	lsls	r2, r3, #8
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	430a      	orrs	r2, r1
 80055b6:	61da      	str	r2, [r3, #28]
      break;
 80055b8:	e048      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0011      	movs	r1, r2
 80055c2:	0018      	movs	r0, r3
 80055c4:	f000 fae8 	bl	8005b98 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2108      	movs	r1, #8
 80055d4:	430a      	orrs	r2, r1
 80055d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2104      	movs	r1, #4
 80055e4:	438a      	bics	r2, r1
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691a      	ldr	r2, [r3, #16]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	430a      	orrs	r2, r1
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80055fa:	e027      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	0011      	movs	r1, r2
 8005604:	0018      	movs	r0, r3
 8005606:	f000 fb27 	bl	8005c58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	2180      	movs	r1, #128	; 0x80
 8005616:	0109      	lsls	r1, r1, #4
 8005618:	430a      	orrs	r2, r1
 800561a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4910      	ldr	r1, [pc, #64]	; (8005668 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8005628:	400a      	ands	r2, r1
 800562a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	691b      	ldr	r3, [r3, #16]
 8005636:	021a      	lsls	r2, r3, #8
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005640:	e004      	b.n	800564c <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8005642:	2317      	movs	r3, #23
 8005644:	18fb      	adds	r3, r7, r3
 8005646:	2201      	movs	r2, #1
 8005648:	701a      	strb	r2, [r3, #0]
      break;
 800564a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	223c      	movs	r2, #60	; 0x3c
 8005650:	2100      	movs	r1, #0
 8005652:	5499      	strb	r1, [r3, r2]

  return status;
 8005654:	2317      	movs	r3, #23
 8005656:	18fb      	adds	r3, r7, r3
 8005658:	781b      	ldrb	r3, [r3, #0]
}
 800565a:	0018      	movs	r0, r3
 800565c:	46bd      	mov	sp, r7
 800565e:	b006      	add	sp, #24
 8005660:	bd80      	pop	{r7, pc}
 8005662:	46c0      	nop			; (mov r8, r8)
 8005664:	0800be40 	.word	0x0800be40
 8005668:	fffffbff 	.word	0xfffffbff

0800566c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b082      	sub	sp, #8
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005674:	46c0      	nop			; (mov r8, r8)
 8005676:	46bd      	mov	sp, r7
 8005678:	b002      	add	sp, #8
 800567a:	bd80      	pop	{r7, pc}

0800567c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005684:	46c0      	nop			; (mov r8, r8)
 8005686:	46bd      	mov	sp, r7
 8005688:	b002      	add	sp, #8
 800568a:	bd80      	pop	{r7, pc}

0800568c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800568c:	b580      	push	{r7, lr}
 800568e:	b082      	sub	sp, #8
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005694:	46c0      	nop			; (mov r8, r8)
 8005696:	46bd      	mov	sp, r7
 8005698:	b002      	add	sp, #8
 800569a:	bd80      	pop	{r7, pc}

0800569c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b082      	sub	sp, #8
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056a4:	46c0      	nop			; (mov r8, r8)
 80056a6:	46bd      	mov	sp, r7
 80056a8:	b002      	add	sp, #8
 80056aa:	bd80      	pop	{r7, pc}

080056ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	4a2f      	ldr	r2, [pc, #188]	; (800577c <TIM_Base_SetConfig+0xd0>)
 80056c0:	4293      	cmp	r3, r2
 80056c2:	d003      	beq.n	80056cc <TIM_Base_SetConfig+0x20>
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a2e      	ldr	r2, [pc, #184]	; (8005780 <TIM_Base_SetConfig+0xd4>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d108      	bne.n	80056de <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2270      	movs	r2, #112	; 0x70
 80056d0:	4393      	bics	r3, r2
 80056d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	685b      	ldr	r3, [r3, #4]
 80056d8:	68fa      	ldr	r2, [r7, #12]
 80056da:	4313      	orrs	r3, r2
 80056dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a26      	ldr	r2, [pc, #152]	; (800577c <TIM_Base_SetConfig+0xd0>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d013      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a25      	ldr	r2, [pc, #148]	; (8005780 <TIM_Base_SetConfig+0xd4>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a24      	ldr	r2, [pc, #144]	; (8005784 <TIM_Base_SetConfig+0xd8>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d00b      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a23      	ldr	r2, [pc, #140]	; (8005788 <TIM_Base_SetConfig+0xdc>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d007      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a22      	ldr	r2, [pc, #136]	; (800578c <TIM_Base_SetConfig+0xe0>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d003      	beq.n	800570e <TIM_Base_SetConfig+0x62>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a21      	ldr	r2, [pc, #132]	; (8005790 <TIM_Base_SetConfig+0xe4>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d108      	bne.n	8005720 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	4a20      	ldr	r2, [pc, #128]	; (8005794 <TIM_Base_SetConfig+0xe8>)
 8005712:	4013      	ands	r3, r2
 8005714:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	4313      	orrs	r3, r2
 800571e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2280      	movs	r2, #128	; 0x80
 8005724:	4393      	bics	r3, r2
 8005726:	001a      	movs	r2, r3
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	695b      	ldr	r3, [r3, #20]
 800572c:	4313      	orrs	r3, r2
 800572e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	689a      	ldr	r2, [r3, #8]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a0c      	ldr	r2, [pc, #48]	; (800577c <TIM_Base_SetConfig+0xd0>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d00b      	beq.n	8005766 <TIM_Base_SetConfig+0xba>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <TIM_Base_SetConfig+0xdc>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d007      	beq.n	8005766 <TIM_Base_SetConfig+0xba>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a0c      	ldr	r2, [pc, #48]	; (800578c <TIM_Base_SetConfig+0xe0>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d003      	beq.n	8005766 <TIM_Base_SetConfig+0xba>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a0b      	ldr	r2, [pc, #44]	; (8005790 <TIM_Base_SetConfig+0xe4>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d103      	bne.n	800576e <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	691a      	ldr	r2, [r3, #16]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2201      	movs	r2, #1
 8005772:	615a      	str	r2, [r3, #20]
}
 8005774:	46c0      	nop			; (mov r8, r8)
 8005776:	46bd      	mov	sp, r7
 8005778:	b004      	add	sp, #16
 800577a:	bd80      	pop	{r7, pc}
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40000400 	.word	0x40000400
 8005784:	40002000 	.word	0x40002000
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800
 8005794:	fffffcff 	.word	0xfffffcff

08005798 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b086      	sub	sp, #24
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6a1b      	ldr	r3, [r3, #32]
 80057a6:	2201      	movs	r2, #1
 80057a8:	4393      	bics	r3, r2
 80057aa:	001a      	movs	r2, r3
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6a1b      	ldr	r3, [r3, #32]
 80057b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	4a32      	ldr	r2, [pc, #200]	; (8005890 <TIM_OC1_SetConfig+0xf8>)
 80057c6:	4013      	ands	r3, r2
 80057c8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2203      	movs	r2, #3
 80057ce:	4393      	bics	r3, r2
 80057d0:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2202      	movs	r2, #2
 80057e0:	4393      	bics	r3, r2
 80057e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a28      	ldr	r2, [pc, #160]	; (8005894 <TIM_OC1_SetConfig+0xfc>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d00b      	beq.n	800580e <TIM_OC1_SetConfig+0x76>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a27      	ldr	r2, [pc, #156]	; (8005898 <TIM_OC1_SetConfig+0x100>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d007      	beq.n	800580e <TIM_OC1_SetConfig+0x76>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a26      	ldr	r2, [pc, #152]	; (800589c <TIM_OC1_SetConfig+0x104>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d003      	beq.n	800580e <TIM_OC1_SetConfig+0x76>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a25      	ldr	r2, [pc, #148]	; (80058a0 <TIM_OC1_SetConfig+0x108>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d10c      	bne.n	8005828 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	2208      	movs	r2, #8
 8005812:	4393      	bics	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	697a      	ldr	r2, [r7, #20]
 800581c:	4313      	orrs	r3, r2
 800581e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005820:	697b      	ldr	r3, [r7, #20]
 8005822:	2204      	movs	r2, #4
 8005824:	4393      	bics	r3, r2
 8005826:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	4a1a      	ldr	r2, [pc, #104]	; (8005894 <TIM_OC1_SetConfig+0xfc>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d00b      	beq.n	8005848 <TIM_OC1_SetConfig+0xb0>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	4a19      	ldr	r2, [pc, #100]	; (8005898 <TIM_OC1_SetConfig+0x100>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d007      	beq.n	8005848 <TIM_OC1_SetConfig+0xb0>
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	4a18      	ldr	r2, [pc, #96]	; (800589c <TIM_OC1_SetConfig+0x104>)
 800583c:	4293      	cmp	r3, r2
 800583e:	d003      	beq.n	8005848 <TIM_OC1_SetConfig+0xb0>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	4a17      	ldr	r2, [pc, #92]	; (80058a0 <TIM_OC1_SetConfig+0x108>)
 8005844:	4293      	cmp	r3, r2
 8005846:	d111      	bne.n	800586c <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005848:	693b      	ldr	r3, [r7, #16]
 800584a:	4a16      	ldr	r2, [pc, #88]	; (80058a4 <TIM_OC1_SetConfig+0x10c>)
 800584c:	4013      	ands	r3, r2
 800584e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	4a15      	ldr	r2, [pc, #84]	; (80058a8 <TIM_OC1_SetConfig+0x110>)
 8005854:	4013      	ands	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	695b      	ldr	r3, [r3, #20]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	693a      	ldr	r2, [r7, #16]
 8005868:	4313      	orrs	r3, r2
 800586a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	693a      	ldr	r2, [r7, #16]
 8005870:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68fa      	ldr	r2, [r7, #12]
 8005876:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	697a      	ldr	r2, [r7, #20]
 8005884:	621a      	str	r2, [r3, #32]
}
 8005886:	46c0      	nop			; (mov r8, r8)
 8005888:	46bd      	mov	sp, r7
 800588a:	b006      	add	sp, #24
 800588c:	bd80      	pop	{r7, pc}
 800588e:	46c0      	nop			; (mov r8, r8)
 8005890:	fffeff8f 	.word	0xfffeff8f
 8005894:	40012c00 	.word	0x40012c00
 8005898:	40014000 	.word	0x40014000
 800589c:	40014400 	.word	0x40014400
 80058a0:	40014800 	.word	0x40014800
 80058a4:	fffffeff 	.word	0xfffffeff
 80058a8:	fffffdff 	.word	0xfffffdff

080058ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b086      	sub	sp, #24
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	2210      	movs	r2, #16
 80058bc:	4393      	bics	r3, r2
 80058be:	001a      	movs	r2, r3
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	699b      	ldr	r3, [r3, #24]
 80058d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	4a2e      	ldr	r2, [pc, #184]	; (8005994 <TIM_OC2_SetConfig+0xe8>)
 80058da:	4013      	ands	r3, r2
 80058dc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	4a2d      	ldr	r2, [pc, #180]	; (8005998 <TIM_OC2_SetConfig+0xec>)
 80058e2:	4013      	ands	r3, r2
 80058e4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058e6:	683b      	ldr	r3, [r7, #0]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	021b      	lsls	r3, r3, #8
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	2220      	movs	r2, #32
 80058f6:	4393      	bics	r3, r2
 80058f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	011b      	lsls	r3, r3, #4
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4313      	orrs	r3, r2
 8005904:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a24      	ldr	r2, [pc, #144]	; (800599c <TIM_OC2_SetConfig+0xf0>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d10d      	bne.n	800592a <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2280      	movs	r2, #128	; 0x80
 8005912:	4393      	bics	r3, r2
 8005914:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	697a      	ldr	r2, [r7, #20]
 800591e:	4313      	orrs	r3, r2
 8005920:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2240      	movs	r2, #64	; 0x40
 8005926:	4393      	bics	r3, r2
 8005928:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <TIM_OC2_SetConfig+0xf0>)
 800592e:	4293      	cmp	r3, r2
 8005930:	d00b      	beq.n	800594a <TIM_OC2_SetConfig+0x9e>
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	4a1a      	ldr	r2, [pc, #104]	; (80059a0 <TIM_OC2_SetConfig+0xf4>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d007      	beq.n	800594a <TIM_OC2_SetConfig+0x9e>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	4a19      	ldr	r2, [pc, #100]	; (80059a4 <TIM_OC2_SetConfig+0xf8>)
 800593e:	4293      	cmp	r3, r2
 8005940:	d003      	beq.n	800594a <TIM_OC2_SetConfig+0x9e>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	4a18      	ldr	r2, [pc, #96]	; (80059a8 <TIM_OC2_SetConfig+0xfc>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d113      	bne.n	8005972 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	4a17      	ldr	r2, [pc, #92]	; (80059ac <TIM_OC2_SetConfig+0x100>)
 800594e:	4013      	ands	r3, r2
 8005950:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	4a16      	ldr	r2, [pc, #88]	; (80059b0 <TIM_OC2_SetConfig+0x104>)
 8005956:	4013      	ands	r3, r2
 8005958:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800595a:	683b      	ldr	r3, [r7, #0]
 800595c:	695b      	ldr	r3, [r3, #20]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4313      	orrs	r3, r2
 8005964:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	699b      	ldr	r3, [r3, #24]
 800596a:	009b      	lsls	r3, r3, #2
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	4313      	orrs	r3, r2
 8005970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	693a      	ldr	r2, [r7, #16]
 8005976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	685a      	ldr	r2, [r3, #4]
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	697a      	ldr	r2, [r7, #20]
 800598a:	621a      	str	r2, [r3, #32]
}
 800598c:	46c0      	nop			; (mov r8, r8)
 800598e:	46bd      	mov	sp, r7
 8005990:	b006      	add	sp, #24
 8005992:	bd80      	pop	{r7, pc}
 8005994:	feff8fff 	.word	0xfeff8fff
 8005998:	fffffcff 	.word	0xfffffcff
 800599c:	40012c00 	.word	0x40012c00
 80059a0:	40014000 	.word	0x40014000
 80059a4:	40014400 	.word	0x40014400
 80059a8:	40014800 	.word	0x40014800
 80059ac:	fffffbff 	.word	0xfffffbff
 80059b0:	fffff7ff 	.word	0xfffff7ff

080059b4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
 80059bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	4a35      	ldr	r2, [pc, #212]	; (8005a98 <TIM_OC3_SetConfig+0xe4>)
 80059c4:	401a      	ands	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	69db      	ldr	r3, [r3, #28]
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	4a2f      	ldr	r2, [pc, #188]	; (8005a9c <TIM_OC3_SetConfig+0xe8>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	2203      	movs	r2, #3
 80059e8:	4393      	bics	r3, r2
 80059ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059ec:	683b      	ldr	r3, [r7, #0]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	4a29      	ldr	r2, [pc, #164]	; (8005aa0 <TIM_OC3_SetConfig+0xec>)
 80059fa:	4013      	ands	r3, r2
 80059fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	689b      	ldr	r3, [r3, #8]
 8005a02:	021b      	lsls	r3, r3, #8
 8005a04:	697a      	ldr	r2, [r7, #20]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a25      	ldr	r2, [pc, #148]	; (8005aa4 <TIM_OC3_SetConfig+0xf0>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d10d      	bne.n	8005a2e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	4a24      	ldr	r2, [pc, #144]	; (8005aa8 <TIM_OC3_SetConfig+0xf4>)
 8005a16:	4013      	ands	r3, r2
 8005a18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	021b      	lsls	r3, r3, #8
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	4a20      	ldr	r2, [pc, #128]	; (8005aac <TIM_OC3_SetConfig+0xf8>)
 8005a2a:	4013      	ands	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a1c      	ldr	r2, [pc, #112]	; (8005aa4 <TIM_OC3_SetConfig+0xf0>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d00b      	beq.n	8005a4e <TIM_OC3_SetConfig+0x9a>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a1d      	ldr	r2, [pc, #116]	; (8005ab0 <TIM_OC3_SetConfig+0xfc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d007      	beq.n	8005a4e <TIM_OC3_SetConfig+0x9a>
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a1c      	ldr	r2, [pc, #112]	; (8005ab4 <TIM_OC3_SetConfig+0x100>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d003      	beq.n	8005a4e <TIM_OC3_SetConfig+0x9a>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	4a1b      	ldr	r2, [pc, #108]	; (8005ab8 <TIM_OC3_SetConfig+0x104>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d113      	bne.n	8005a76 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	4a1a      	ldr	r2, [pc, #104]	; (8005abc <TIM_OC3_SetConfig+0x108>)
 8005a52:	4013      	ands	r3, r2
 8005a54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	4a19      	ldr	r2, [pc, #100]	; (8005ac0 <TIM_OC3_SetConfig+0x10c>)
 8005a5a:	4013      	ands	r3, r2
 8005a5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	011b      	lsls	r3, r3, #4
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	4313      	orrs	r3, r2
 8005a68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	011b      	lsls	r3, r3, #4
 8005a70:	693a      	ldr	r2, [r7, #16]
 8005a72:	4313      	orrs	r3, r2
 8005a74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	68fa      	ldr	r2, [r7, #12]
 8005a80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	697a      	ldr	r2, [r7, #20]
 8005a8e:	621a      	str	r2, [r3, #32]
}
 8005a90:	46c0      	nop			; (mov r8, r8)
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b006      	add	sp, #24
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	fffffeff 	.word	0xfffffeff
 8005a9c:	fffeff8f 	.word	0xfffeff8f
 8005aa0:	fffffdff 	.word	0xfffffdff
 8005aa4:	40012c00 	.word	0x40012c00
 8005aa8:	fffff7ff 	.word	0xfffff7ff
 8005aac:	fffffbff 	.word	0xfffffbff
 8005ab0:	40014000 	.word	0x40014000
 8005ab4:	40014400 	.word	0x40014400
 8005ab8:	40014800 	.word	0x40014800
 8005abc:	ffffefff 	.word	0xffffefff
 8005ac0:	ffffdfff 	.word	0xffffdfff

08005ac4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	6a1b      	ldr	r3, [r3, #32]
 8005ad2:	4a28      	ldr	r2, [pc, #160]	; (8005b74 <TIM_OC4_SetConfig+0xb0>)
 8005ad4:	401a      	ands	r2, r3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69db      	ldr	r3, [r3, #28]
 8005aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a22      	ldr	r2, [pc, #136]	; (8005b78 <TIM_OC4_SetConfig+0xb4>)
 8005af0:	4013      	ands	r3, r2
 8005af2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a21      	ldr	r2, [pc, #132]	; (8005b7c <TIM_OC4_SetConfig+0xb8>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	021b      	lsls	r3, r3, #8
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	4313      	orrs	r3, r2
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b08:	693b      	ldr	r3, [r7, #16]
 8005b0a:	4a1d      	ldr	r2, [pc, #116]	; (8005b80 <TIM_OC4_SetConfig+0xbc>)
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689b      	ldr	r3, [r3, #8]
 8005b14:	031b      	lsls	r3, r3, #12
 8005b16:	693a      	ldr	r2, [r7, #16]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a19      	ldr	r2, [pc, #100]	; (8005b84 <TIM_OC4_SetConfig+0xc0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d00b      	beq.n	8005b3c <TIM_OC4_SetConfig+0x78>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	4a18      	ldr	r2, [pc, #96]	; (8005b88 <TIM_OC4_SetConfig+0xc4>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d007      	beq.n	8005b3c <TIM_OC4_SetConfig+0x78>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	4a17      	ldr	r2, [pc, #92]	; (8005b8c <TIM_OC4_SetConfig+0xc8>)
 8005b30:	4293      	cmp	r3, r2
 8005b32:	d003      	beq.n	8005b3c <TIM_OC4_SetConfig+0x78>
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4a16      	ldr	r2, [pc, #88]	; (8005b90 <TIM_OC4_SetConfig+0xcc>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d109      	bne.n	8005b50 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	4a15      	ldr	r2, [pc, #84]	; (8005b94 <TIM_OC4_SetConfig+0xd0>)
 8005b40:	4013      	ands	r3, r2
 8005b42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	695b      	ldr	r3, [r3, #20]
 8005b48:	019b      	lsls	r3, r3, #6
 8005b4a:	697a      	ldr	r2, [r7, #20]
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	685a      	ldr	r2, [r3, #4]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	693a      	ldr	r2, [r7, #16]
 8005b68:	621a      	str	r2, [r3, #32]
}
 8005b6a:	46c0      	nop			; (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	b006      	add	sp, #24
 8005b70:	bd80      	pop	{r7, pc}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	ffffefff 	.word	0xffffefff
 8005b78:	feff8fff 	.word	0xfeff8fff
 8005b7c:	fffffcff 	.word	0xfffffcff
 8005b80:	ffffdfff 	.word	0xffffdfff
 8005b84:	40012c00 	.word	0x40012c00
 8005b88:	40014000 	.word	0x40014000
 8005b8c:	40014400 	.word	0x40014400
 8005b90:	40014800 	.word	0x40014800
 8005b94:	ffffbfff 	.word	0xffffbfff

08005b98 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b086      	sub	sp, #24
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6a1b      	ldr	r3, [r3, #32]
 8005ba6:	4a25      	ldr	r2, [pc, #148]	; (8005c3c <TIM_OC5_SetConfig+0xa4>)
 8005ba8:	401a      	ands	r2, r3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6a1b      	ldr	r3, [r3, #32]
 8005bb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	4a1f      	ldr	r2, [pc, #124]	; (8005c40 <TIM_OC5_SetConfig+0xa8>)
 8005bc4:	4013      	ands	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	68fa      	ldr	r2, [r7, #12]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005bd2:	693b      	ldr	r3, [r7, #16]
 8005bd4:	4a1b      	ldr	r2, [pc, #108]	; (8005c44 <TIM_OC5_SetConfig+0xac>)
 8005bd6:	4013      	ands	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	041b      	lsls	r3, r3, #16
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a17      	ldr	r2, [pc, #92]	; (8005c48 <TIM_OC5_SetConfig+0xb0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d00b      	beq.n	8005c06 <TIM_OC5_SetConfig+0x6e>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <TIM_OC5_SetConfig+0xb4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d007      	beq.n	8005c06 <TIM_OC5_SetConfig+0x6e>
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4a15      	ldr	r2, [pc, #84]	; (8005c50 <TIM_OC5_SetConfig+0xb8>)
 8005bfa:	4293      	cmp	r3, r2
 8005bfc:	d003      	beq.n	8005c06 <TIM_OC5_SetConfig+0x6e>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a14      	ldr	r2, [pc, #80]	; (8005c54 <TIM_OC5_SetConfig+0xbc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d109      	bne.n	8005c1a <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	4a0c      	ldr	r2, [pc, #48]	; (8005c3c <TIM_OC5_SetConfig+0xa4>)
 8005c0a:	4013      	ands	r3, r2
 8005c0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	021b      	lsls	r3, r3, #8
 8005c14:	697a      	ldr	r2, [r7, #20]
 8005c16:	4313      	orrs	r3, r2
 8005c18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68fa      	ldr	r2, [r7, #12]
 8005c24:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	685a      	ldr	r2, [r3, #4]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	621a      	str	r2, [r3, #32]
}
 8005c34:	46c0      	nop			; (mov r8, r8)
 8005c36:	46bd      	mov	sp, r7
 8005c38:	b006      	add	sp, #24
 8005c3a:	bd80      	pop	{r7, pc}
 8005c3c:	fffeffff 	.word	0xfffeffff
 8005c40:	fffeff8f 	.word	0xfffeff8f
 8005c44:	fffdffff 	.word	0xfffdffff
 8005c48:	40012c00 	.word	0x40012c00
 8005c4c:	40014000 	.word	0x40014000
 8005c50:	40014400 	.word	0x40014400
 8005c54:	40014800 	.word	0x40014800

08005c58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b086      	sub	sp, #24
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
 8005c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a1b      	ldr	r3, [r3, #32]
 8005c66:	4a26      	ldr	r2, [pc, #152]	; (8005d00 <TIM_OC6_SetConfig+0xa8>)
 8005c68:	401a      	ands	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	4a20      	ldr	r2, [pc, #128]	; (8005d04 <TIM_OC6_SetConfig+0xac>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	021b      	lsls	r3, r3, #8
 8005c8e:	68fa      	ldr	r2, [r7, #12]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	4a1c      	ldr	r2, [pc, #112]	; (8005d08 <TIM_OC6_SetConfig+0xb0>)
 8005c98:	4013      	ands	r3, r2
 8005c9a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	051b      	lsls	r3, r3, #20
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	4a18      	ldr	r2, [pc, #96]	; (8005d0c <TIM_OC6_SetConfig+0xb4>)
 8005cac:	4293      	cmp	r3, r2
 8005cae:	d00b      	beq.n	8005cc8 <TIM_OC6_SetConfig+0x70>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	4a17      	ldr	r2, [pc, #92]	; (8005d10 <TIM_OC6_SetConfig+0xb8>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d007      	beq.n	8005cc8 <TIM_OC6_SetConfig+0x70>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a16      	ldr	r2, [pc, #88]	; (8005d14 <TIM_OC6_SetConfig+0xbc>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d003      	beq.n	8005cc8 <TIM_OC6_SetConfig+0x70>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a15      	ldr	r2, [pc, #84]	; (8005d18 <TIM_OC6_SetConfig+0xc0>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d109      	bne.n	8005cdc <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cc8:	697b      	ldr	r3, [r7, #20]
 8005cca:	4a14      	ldr	r2, [pc, #80]	; (8005d1c <TIM_OC6_SetConfig+0xc4>)
 8005ccc:	4013      	ands	r3, r2
 8005cce:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	695b      	ldr	r3, [r3, #20]
 8005cd4:	029b      	lsls	r3, r3, #10
 8005cd6:	697a      	ldr	r2, [r7, #20]
 8005cd8:	4313      	orrs	r3, r2
 8005cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68fa      	ldr	r2, [r7, #12]
 8005ce6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	693a      	ldr	r2, [r7, #16]
 8005cf4:	621a      	str	r2, [r3, #32]
}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b006      	add	sp, #24
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	ffefffff 	.word	0xffefffff
 8005d04:	feff8fff 	.word	0xfeff8fff
 8005d08:	ffdfffff 	.word	0xffdfffff
 8005d0c:	40012c00 	.word	0x40012c00
 8005d10:	40014000 	.word	0x40014000
 8005d14:	40014400 	.word	0x40014400
 8005d18:	40014800 	.word	0x40014800
 8005d1c:	fffbffff 	.word	0xfffbffff

08005d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	60f8      	str	r0, [r7, #12]
 8005d28:	60b9      	str	r1, [r7, #8]
 8005d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d2c:	68bb      	ldr	r3, [r7, #8]
 8005d2e:	221f      	movs	r2, #31
 8005d30:	4013      	ands	r3, r2
 8005d32:	2201      	movs	r2, #1
 8005d34:	409a      	lsls	r2, r3
 8005d36:	0013      	movs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	43d2      	mvns	r2, r2
 8005d42:	401a      	ands	r2, r3
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6a1a      	ldr	r2, [r3, #32]
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	211f      	movs	r1, #31
 8005d50:	400b      	ands	r3, r1
 8005d52:	6879      	ldr	r1, [r7, #4]
 8005d54:	4099      	lsls	r1, r3
 8005d56:	000b      	movs	r3, r1
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	46c0      	nop			; (mov r8, r8)
 8005d60:	46bd      	mov	sp, r7
 8005d62:	b006      	add	sp, #24
 8005d64:	bd80      	pop	{r7, pc}
	...

08005d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	223c      	movs	r2, #60	; 0x3c
 8005d76:	5c9b      	ldrb	r3, [r3, r2]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d101      	bne.n	8005d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005d7c:	2302      	movs	r3, #2
 8005d7e:	e04f      	b.n	8005e20 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	223c      	movs	r2, #60	; 0x3c
 8005d84:	2101      	movs	r1, #1
 8005d86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	223d      	movs	r2, #61	; 0x3d
 8005d8c:	2102      	movs	r1, #2
 8005d8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a20      	ldr	r2, [pc, #128]	; (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d108      	bne.n	8005dbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	4a1f      	ldr	r2, [pc, #124]	; (8005e2c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8005dae:	4013      	ands	r3, r2
 8005db0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	68fa      	ldr	r2, [r7, #12]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2270      	movs	r2, #112	; 0x70
 8005dc0:	4393      	bics	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68fa      	ldr	r2, [r7, #12]
 8005dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	4a13      	ldr	r2, [pc, #76]	; (8005e28 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d009      	beq.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	4a12      	ldr	r2, [pc, #72]	; (8005e30 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d004      	beq.n	8005df4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a11      	ldr	r2, [pc, #68]	; (8005e34 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d10c      	bne.n	8005e0e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005df4:	68bb      	ldr	r3, [r7, #8]
 8005df6:	2280      	movs	r2, #128	; 0x80
 8005df8:	4393      	bics	r3, r2
 8005dfa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	68ba      	ldr	r2, [r7, #8]
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68ba      	ldr	r2, [r7, #8]
 8005e0c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	223d      	movs	r2, #61	; 0x3d
 8005e12:	2101      	movs	r1, #1
 8005e14:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	223c      	movs	r2, #60	; 0x3c
 8005e1a:	2100      	movs	r1, #0
 8005e1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	0018      	movs	r0, r3
 8005e22:	46bd      	mov	sp, r7
 8005e24:	b004      	add	sp, #16
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	40012c00 	.word	0x40012c00
 8005e2c:	ff0fffff 	.word	0xff0fffff
 8005e30:	40000400 	.word	0x40000400
 8005e34:	40014000 	.word	0x40014000

08005e38 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	223c      	movs	r2, #60	; 0x3c
 8005e4a:	5c9b      	ldrb	r3, [r3, r2]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e079      	b.n	8005f48 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	223c      	movs	r2, #60	; 0x3c
 8005e58:	2101      	movs	r1, #1
 8005e5a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	22ff      	movs	r2, #255	; 0xff
 8005e60:	4393      	bics	r3, r2
 8005e62:	001a      	movs	r2, r3
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	68db      	ldr	r3, [r3, #12]
 8005e68:	4313      	orrs	r3, r2
 8005e6a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	4a38      	ldr	r2, [pc, #224]	; (8005f50 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005e70:	401a      	ands	r2, r3
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	4313      	orrs	r3, r2
 8005e78:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	4a35      	ldr	r2, [pc, #212]	; (8005f54 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005e7e:	401a      	ands	r2, r3
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	685b      	ldr	r3, [r3, #4]
 8005e84:	4313      	orrs	r3, r2
 8005e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	4a33      	ldr	r2, [pc, #204]	; (8005f58 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005e8c:	401a      	ands	r2, r3
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4313      	orrs	r3, r2
 8005e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4a30      	ldr	r2, [pc, #192]	; (8005f5c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005e9a:	401a      	ands	r2, r3
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	4313      	orrs	r3, r2
 8005ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005ea8:	401a      	ands	r2, r3
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	4a2b      	ldr	r2, [pc, #172]	; (8005f64 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005eb6:	401a      	ands	r2, r3
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4a29      	ldr	r2, [pc, #164]	; (8005f68 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005ec4:	401a      	ands	r2, r3
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	699b      	ldr	r3, [r3, #24]
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	4a25      	ldr	r2, [pc, #148]	; (8005f6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d106      	bne.n	8005ee8 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	4a24      	ldr	r2, [pc, #144]	; (8005f70 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005ede:	401a      	ands	r2, r3
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	4313      	orrs	r3, r2
 8005ee6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a1f      	ldr	r2, [pc, #124]	; (8005f6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d121      	bne.n	8005f36 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	4a1f      	ldr	r2, [pc, #124]	; (8005f74 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8005ef6:	401a      	ands	r2, r3
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efc:	051b      	lsls	r3, r3, #20
 8005efe:	4313      	orrs	r3, r2
 8005f00:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	4a1c      	ldr	r2, [pc, #112]	; (8005f78 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 8005f06:	401a      	ands	r2, r3
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4a1a      	ldr	r2, [pc, #104]	; (8005f7c <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 8005f14:	401a      	ands	r2, r3
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f1a:	4313      	orrs	r3, r2
 8005f1c:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a12      	ldr	r2, [pc, #72]	; (8005f6c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d106      	bne.n	8005f36 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	4a15      	ldr	r2, [pc, #84]	; (8005f80 <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 8005f2c:	401a      	ands	r2, r3
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f32:	4313      	orrs	r3, r2
 8005f34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	223c      	movs	r2, #60	; 0x3c
 8005f42:	2100      	movs	r1, #0
 8005f44:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	0018      	movs	r0, r3
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	b004      	add	sp, #16
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	fffffcff 	.word	0xfffffcff
 8005f54:	fffffbff 	.word	0xfffffbff
 8005f58:	fffff7ff 	.word	0xfffff7ff
 8005f5c:	ffffefff 	.word	0xffffefff
 8005f60:	ffffdfff 	.word	0xffffdfff
 8005f64:	ffffbfff 	.word	0xffffbfff
 8005f68:	fff0ffff 	.word	0xfff0ffff
 8005f6c:	40012c00 	.word	0x40012c00
 8005f70:	efffffff 	.word	0xefffffff
 8005f74:	ff0fffff 	.word	0xff0fffff
 8005f78:	feffffff 	.word	0xfeffffff
 8005f7c:	fdffffff 	.word	0xfdffffff
 8005f80:	dfffffff 	.word	0xdfffffff

08005f84 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b002      	add	sp, #8
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f9c:	46c0      	nop			; (mov r8, r8)
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	b002      	add	sp, #8
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b082      	sub	sp, #8
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005fac:	46c0      	nop			; (mov r8, r8)
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	b002      	add	sp, #8
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005fc2:	2301      	movs	r3, #1
 8005fc4:	e046      	b.n	8006054 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2288      	movs	r2, #136	; 0x88
 8005fca:	589b      	ldr	r3, [r3, r2]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d107      	bne.n	8005fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2284      	movs	r2, #132	; 0x84
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	0018      	movs	r0, r3
 8005fdc:	f7fc fb24 	bl	8002628 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2288      	movs	r2, #136	; 0x88
 8005fe4:	2124      	movs	r1, #36	; 0x24
 8005fe6:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2101      	movs	r1, #1
 8005ff4:	438a      	bics	r2, r1
 8005ff6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	0018      	movs	r0, r3
 8005ffc:	f000 fbba 	bl	8006774 <UART_SetConfig>
 8006000:	0003      	movs	r3, r0
 8006002:	2b01      	cmp	r3, #1
 8006004:	d101      	bne.n	800600a <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8006006:	2301      	movs	r3, #1
 8006008:	e024      	b.n	8006054 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800600e:	2b00      	cmp	r3, #0
 8006010:	d003      	beq.n	800601a <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	0018      	movs	r0, r3
 8006016:	f000 fd51 	bl	8006abc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	685a      	ldr	r2, [r3, #4]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	490d      	ldr	r1, [pc, #52]	; (800605c <HAL_UART_Init+0xa8>)
 8006026:	400a      	ands	r2, r1
 8006028:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	689a      	ldr	r2, [r3, #8]
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	212a      	movs	r1, #42	; 0x2a
 8006036:	438a      	bics	r2, r1
 8006038:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2101      	movs	r1, #1
 8006046:	430a      	orrs	r2, r1
 8006048:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	0018      	movs	r0, r3
 800604e:	f000 fde9 	bl	8006c24 <UART_CheckIdleState>
 8006052:	0003      	movs	r3, r0
}
 8006054:	0018      	movs	r0, r3
 8006056:	46bd      	mov	sp, r7
 8006058:	b002      	add	sp, #8
 800605a:	bd80      	pop	{r7, pc}
 800605c:	ffffb7ff 	.word	0xffffb7ff

08006060 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006060:	b580      	push	{r7, lr}
 8006062:	b08a      	sub	sp, #40	; 0x28
 8006064:	af02      	add	r7, sp, #8
 8006066:	60f8      	str	r0, [r7, #12]
 8006068:	60b9      	str	r1, [r7, #8]
 800606a:	603b      	str	r3, [r7, #0]
 800606c:	1dbb      	adds	r3, r7, #6
 800606e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2288      	movs	r2, #136	; 0x88
 8006074:	589b      	ldr	r3, [r3, r2]
 8006076:	2b20      	cmp	r3, #32
 8006078:	d000      	beq.n	800607c <HAL_UART_Transmit+0x1c>
 800607a:	e088      	b.n	800618e <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 800607c:	68bb      	ldr	r3, [r7, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <HAL_UART_Transmit+0x2a>
 8006082:	1dbb      	adds	r3, r7, #6
 8006084:	881b      	ldrh	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d101      	bne.n	800608e <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	e080      	b.n	8006190 <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689a      	ldr	r2, [r3, #8]
 8006092:	2380      	movs	r3, #128	; 0x80
 8006094:	015b      	lsls	r3, r3, #5
 8006096:	429a      	cmp	r2, r3
 8006098:	d109      	bne.n	80060ae <HAL_UART_Transmit+0x4e>
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	691b      	ldr	r3, [r3, #16]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d105      	bne.n	80060ae <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80060a2:	68bb      	ldr	r3, [r7, #8]
 80060a4:	2201      	movs	r2, #1
 80060a6:	4013      	ands	r3, r2
 80060a8:	d001      	beq.n	80060ae <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 80060aa:	2301      	movs	r3, #1
 80060ac:	e070      	b.n	8006190 <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	2290      	movs	r2, #144	; 0x90
 80060b2:	2100      	movs	r1, #0
 80060b4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2288      	movs	r2, #136	; 0x88
 80060ba:	2121      	movs	r1, #33	; 0x21
 80060bc:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80060be:	f7fc fbd7 	bl	8002870 <HAL_GetTick>
 80060c2:	0003      	movs	r3, r0
 80060c4:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	1dba      	adds	r2, r7, #6
 80060ca:	2154      	movs	r1, #84	; 0x54
 80060cc:	8812      	ldrh	r2, [r2, #0]
 80060ce:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	1dba      	adds	r2, r7, #6
 80060d4:	2156      	movs	r1, #86	; 0x56
 80060d6:	8812      	ldrh	r2, [r2, #0]
 80060d8:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	689a      	ldr	r2, [r3, #8]
 80060de:	2380      	movs	r3, #128	; 0x80
 80060e0:	015b      	lsls	r3, r3, #5
 80060e2:	429a      	cmp	r2, r3
 80060e4:	d108      	bne.n	80060f8 <HAL_UART_Transmit+0x98>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	691b      	ldr	r3, [r3, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d104      	bne.n	80060f8 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	61bb      	str	r3, [r7, #24]
 80060f6:	e003      	b.n	8006100 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80060fc:	2300      	movs	r3, #0
 80060fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006100:	e02c      	b.n	800615c <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006102:	697a      	ldr	r2, [r7, #20]
 8006104:	68f8      	ldr	r0, [r7, #12]
 8006106:	683b      	ldr	r3, [r7, #0]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	0013      	movs	r3, r2
 800610c:	2200      	movs	r2, #0
 800610e:	2180      	movs	r1, #128	; 0x80
 8006110:	f000 fdd6 	bl	8006cc0 <UART_WaitOnFlagUntilTimeout>
 8006114:	1e03      	subs	r3, r0, #0
 8006116:	d001      	beq.n	800611c <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 8006118:	2303      	movs	r3, #3
 800611a:	e039      	b.n	8006190 <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d10b      	bne.n	800613a <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006122:	69bb      	ldr	r3, [r7, #24]
 8006124:	881b      	ldrh	r3, [r3, #0]
 8006126:	001a      	movs	r2, r3
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	05d2      	lsls	r2, r2, #23
 800612e:	0dd2      	lsrs	r2, r2, #23
 8006130:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006132:	69bb      	ldr	r3, [r7, #24]
 8006134:	3302      	adds	r3, #2
 8006136:	61bb      	str	r3, [r7, #24]
 8006138:	e007      	b.n	800614a <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800613a:	69fb      	ldr	r3, [r7, #28]
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006144:	69fb      	ldr	r3, [r7, #28]
 8006146:	3301      	adds	r3, #1
 8006148:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2256      	movs	r2, #86	; 0x56
 800614e:	5a9b      	ldrh	r3, [r3, r2]
 8006150:	b29b      	uxth	r3, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	b299      	uxth	r1, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2256      	movs	r2, #86	; 0x56
 800615a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2256      	movs	r2, #86	; 0x56
 8006160:	5a9b      	ldrh	r3, [r3, r2]
 8006162:	b29b      	uxth	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1cc      	bne.n	8006102 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006168:	697a      	ldr	r2, [r7, #20]
 800616a:	68f8      	ldr	r0, [r7, #12]
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	9300      	str	r3, [sp, #0]
 8006170:	0013      	movs	r3, r2
 8006172:	2200      	movs	r2, #0
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	f000 fda3 	bl	8006cc0 <UART_WaitOnFlagUntilTimeout>
 800617a:	1e03      	subs	r3, r0, #0
 800617c:	d001      	beq.n	8006182 <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e006      	b.n	8006190 <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2288      	movs	r2, #136	; 0x88
 8006186:	2120      	movs	r1, #32
 8006188:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800618a:	2300      	movs	r3, #0
 800618c:	e000      	b.n	8006190 <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800618e:	2302      	movs	r3, #2
  }
}
 8006190:	0018      	movs	r0, r3
 8006192:	46bd      	mov	sp, r7
 8006194:	b008      	add	sp, #32
 8006196:	bd80      	pop	{r7, pc}

08006198 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b08a      	sub	sp, #40	; 0x28
 800619c:	af02      	add	r7, sp, #8
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	603b      	str	r3, [r7, #0]
 80061a4:	1dbb      	adds	r3, r7, #6
 80061a6:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	228c      	movs	r2, #140	; 0x8c
 80061ac:	589b      	ldr	r3, [r3, r2]
 80061ae:	2b20      	cmp	r3, #32
 80061b0:	d000      	beq.n	80061b4 <HAL_UART_Receive+0x1c>
 80061b2:	e0cc      	b.n	800634e <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_UART_Receive+0x2a>
 80061ba:	1dbb      	adds	r3, r7, #6
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d101      	bne.n	80061c6 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	e0c4      	b.n	8006350 <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689a      	ldr	r2, [r3, #8]
 80061ca:	2380      	movs	r3, #128	; 0x80
 80061cc:	015b      	lsls	r3, r3, #5
 80061ce:	429a      	cmp	r2, r3
 80061d0:	d109      	bne.n	80061e6 <HAL_UART_Receive+0x4e>
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d105      	bne.n	80061e6 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2201      	movs	r2, #1
 80061de:	4013      	ands	r3, r2
 80061e0:	d001      	beq.n	80061e6 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80061e2:	2301      	movs	r3, #1
 80061e4:	e0b4      	b.n	8006350 <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2290      	movs	r2, #144	; 0x90
 80061ea:	2100      	movs	r1, #0
 80061ec:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	228c      	movs	r2, #140	; 0x8c
 80061f2:	2122      	movs	r1, #34	; 0x22
 80061f4:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061fc:	f7fc fb38 	bl	8002870 <HAL_GetTick>
 8006200:	0003      	movs	r3, r0
 8006202:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	1dba      	adds	r2, r7, #6
 8006208:	215c      	movs	r1, #92	; 0x5c
 800620a:	8812      	ldrh	r2, [r2, #0]
 800620c:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	1dba      	adds	r2, r7, #6
 8006212:	215e      	movs	r1, #94	; 0x5e
 8006214:	8812      	ldrh	r2, [r2, #0]
 8006216:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	689a      	ldr	r2, [r3, #8]
 800621c:	2380      	movs	r3, #128	; 0x80
 800621e:	015b      	lsls	r3, r3, #5
 8006220:	429a      	cmp	r2, r3
 8006222:	d10d      	bne.n	8006240 <HAL_UART_Receive+0xa8>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d104      	bne.n	8006236 <HAL_UART_Receive+0x9e>
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2260      	movs	r2, #96	; 0x60
 8006230:	4949      	ldr	r1, [pc, #292]	; (8006358 <HAL_UART_Receive+0x1c0>)
 8006232:	5299      	strh	r1, [r3, r2]
 8006234:	e02e      	b.n	8006294 <HAL_UART_Receive+0xfc>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2260      	movs	r2, #96	; 0x60
 800623a:	21ff      	movs	r1, #255	; 0xff
 800623c:	5299      	strh	r1, [r3, r2]
 800623e:	e029      	b.n	8006294 <HAL_UART_Receive+0xfc>
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d10d      	bne.n	8006264 <HAL_UART_Receive+0xcc>
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <HAL_UART_Receive+0xc2>
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2260      	movs	r2, #96	; 0x60
 8006254:	21ff      	movs	r1, #255	; 0xff
 8006256:	5299      	strh	r1, [r3, r2]
 8006258:	e01c      	b.n	8006294 <HAL_UART_Receive+0xfc>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2260      	movs	r2, #96	; 0x60
 800625e:	217f      	movs	r1, #127	; 0x7f
 8006260:	5299      	strh	r1, [r3, r2]
 8006262:	e017      	b.n	8006294 <HAL_UART_Receive+0xfc>
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689a      	ldr	r2, [r3, #8]
 8006268:	2380      	movs	r3, #128	; 0x80
 800626a:	055b      	lsls	r3, r3, #21
 800626c:	429a      	cmp	r2, r3
 800626e:	d10d      	bne.n	800628c <HAL_UART_Receive+0xf4>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	691b      	ldr	r3, [r3, #16]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d104      	bne.n	8006282 <HAL_UART_Receive+0xea>
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2260      	movs	r2, #96	; 0x60
 800627c:	217f      	movs	r1, #127	; 0x7f
 800627e:	5299      	strh	r1, [r3, r2]
 8006280:	e008      	b.n	8006294 <HAL_UART_Receive+0xfc>
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2260      	movs	r2, #96	; 0x60
 8006286:	213f      	movs	r1, #63	; 0x3f
 8006288:	5299      	strh	r1, [r3, r2]
 800628a:	e003      	b.n	8006294 <HAL_UART_Receive+0xfc>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2260      	movs	r2, #96	; 0x60
 8006290:	2100      	movs	r1, #0
 8006292:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8006294:	2312      	movs	r3, #18
 8006296:	18fb      	adds	r3, r7, r3
 8006298:	68fa      	ldr	r2, [r7, #12]
 800629a:	2160      	movs	r1, #96	; 0x60
 800629c:	5a52      	ldrh	r2, [r2, r1]
 800629e:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	689a      	ldr	r2, [r3, #8]
 80062a4:	2380      	movs	r3, #128	; 0x80
 80062a6:	015b      	lsls	r3, r3, #5
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d108      	bne.n	80062be <HAL_UART_Receive+0x126>
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	691b      	ldr	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d104      	bne.n	80062be <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80062b8:	68bb      	ldr	r3, [r7, #8]
 80062ba:	61bb      	str	r3, [r7, #24]
 80062bc:	e003      	b.n	80062c6 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80062c2:	2300      	movs	r3, #0
 80062c4:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80062c6:	e036      	b.n	8006336 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80062c8:	697a      	ldr	r2, [r7, #20]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	0013      	movs	r3, r2
 80062d2:	2200      	movs	r2, #0
 80062d4:	2120      	movs	r1, #32
 80062d6:	f000 fcf3 	bl	8006cc0 <UART_WaitOnFlagUntilTimeout>
 80062da:	1e03      	subs	r3, r0, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 80062de:	2303      	movs	r3, #3
 80062e0:	e036      	b.n	8006350 <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 80062e2:	69fb      	ldr	r3, [r7, #28]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10e      	bne.n	8006306 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2212      	movs	r2, #18
 80062f2:	18ba      	adds	r2, r7, r2
 80062f4:	8812      	ldrh	r2, [r2, #0]
 80062f6:	4013      	ands	r3, r2
 80062f8:	b29a      	uxth	r2, r3
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	3302      	adds	r3, #2
 8006302:	61bb      	str	r3, [r7, #24]
 8006304:	e00e      	b.n	8006324 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2212      	movs	r2, #18
 8006310:	18ba      	adds	r2, r7, r2
 8006312:	8812      	ldrh	r2, [r2, #0]
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	4013      	ands	r3, r2
 8006318:	b2da      	uxtb	r2, r3
 800631a:	69fb      	ldr	r3, [r7, #28]
 800631c:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	3301      	adds	r3, #1
 8006322:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	225e      	movs	r2, #94	; 0x5e
 8006328:	5a9b      	ldrh	r3, [r3, r2]
 800632a:	b29b      	uxth	r3, r3
 800632c:	3b01      	subs	r3, #1
 800632e:	b299      	uxth	r1, r3
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	225e      	movs	r2, #94	; 0x5e
 8006334:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	225e      	movs	r2, #94	; 0x5e
 800633a:	5a9b      	ldrh	r3, [r3, r2]
 800633c:	b29b      	uxth	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d1c2      	bne.n	80062c8 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	228c      	movs	r2, #140	; 0x8c
 8006346:	2120      	movs	r1, #32
 8006348:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 800634a:	2300      	movs	r3, #0
 800634c:	e000      	b.n	8006350 <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 800634e:	2302      	movs	r3, #2
  }
}
 8006350:	0018      	movs	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	b008      	add	sp, #32
 8006356:	bd80      	pop	{r7, pc}
 8006358:	000001ff 	.word	0x000001ff

0800635c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	; 0x30
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	1dbb      	adds	r3, r7, #6
 8006368:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2288      	movs	r2, #136	; 0x88
 800636e:	589b      	ldr	r3, [r3, r2]
 8006370:	2b20      	cmp	r3, #32
 8006372:	d000      	beq.n	8006376 <HAL_UART_Transmit_IT+0x1a>
 8006374:	e08d      	b.n	8006492 <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_UART_Transmit_IT+0x28>
 800637c:	1dbb      	adds	r3, r7, #6
 800637e:	881b      	ldrh	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d101      	bne.n	8006388 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8006384:	2301      	movs	r3, #1
 8006386:	e085      	b.n	8006494 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	2380      	movs	r3, #128	; 0x80
 800638e:	015b      	lsls	r3, r3, #5
 8006390:	429a      	cmp	r2, r3
 8006392:	d109      	bne.n	80063a8 <HAL_UART_Transmit_IT+0x4c>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	691b      	ldr	r3, [r3, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d105      	bne.n	80063a8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	2201      	movs	r2, #1
 80063a0:	4013      	ands	r3, r2
 80063a2:	d001      	beq.n	80063a8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80063a4:	2301      	movs	r3, #1
 80063a6:	e075      	b.n	8006494 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1dba      	adds	r2, r7, #6
 80063b2:	2154      	movs	r1, #84	; 0x54
 80063b4:	8812      	ldrh	r2, [r2, #0]
 80063b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	1dba      	adds	r2, r7, #6
 80063bc:	2156      	movs	r1, #86	; 0x56
 80063be:	8812      	ldrh	r2, [r2, #0]
 80063c0:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2200      	movs	r2, #0
 80063c6:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2290      	movs	r2, #144	; 0x90
 80063cc:	2100      	movs	r1, #0
 80063ce:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2288      	movs	r2, #136	; 0x88
 80063d4:	2121      	movs	r1, #33	; 0x21
 80063d6:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80063dc:	2380      	movs	r3, #128	; 0x80
 80063de:	059b      	lsls	r3, r3, #22
 80063e0:	429a      	cmp	r2, r3
 80063e2:	d12a      	bne.n	800643a <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	689a      	ldr	r2, [r3, #8]
 80063e8:	2380      	movs	r3, #128	; 0x80
 80063ea:	015b      	lsls	r3, r3, #5
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d107      	bne.n	8006400 <HAL_UART_Transmit_IT+0xa4>
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d103      	bne.n	8006400 <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	4a28      	ldr	r2, [pc, #160]	; (800649c <HAL_UART_Transmit_IT+0x140>)
 80063fc:	679a      	str	r2, [r3, #120]	; 0x78
 80063fe:	e002      	b.n	8006406 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a27      	ldr	r2, [pc, #156]	; (80064a0 <HAL_UART_Transmit_IT+0x144>)
 8006404:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006406:	f3ef 8310 	mrs	r3, PRIMASK
 800640a:	61fb      	str	r3, [r7, #28]
  return(result);
 800640c:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800640e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006410:	2301      	movs	r3, #1
 8006412:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006414:	6a3b      	ldr	r3, [r7, #32]
 8006416:	f383 8810 	msr	PRIMASK, r3
}
 800641a:	46c0      	nop			; (mov r8, r8)
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689a      	ldr	r2, [r3, #8]
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2180      	movs	r1, #128	; 0x80
 8006428:	0409      	lsls	r1, r1, #16
 800642a:	430a      	orrs	r2, r1
 800642c:	609a      	str	r2, [r3, #8]
 800642e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006430:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006432:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006434:	f383 8810 	msr	PRIMASK, r3
}
 8006438:	e029      	b.n	800648e <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	2380      	movs	r3, #128	; 0x80
 8006440:	015b      	lsls	r3, r3, #5
 8006442:	429a      	cmp	r2, r3
 8006444:	d107      	bne.n	8006456 <HAL_UART_Transmit_IT+0xfa>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800644e:	68fb      	ldr	r3, [r7, #12]
 8006450:	4a14      	ldr	r2, [pc, #80]	; (80064a4 <HAL_UART_Transmit_IT+0x148>)
 8006452:	679a      	str	r2, [r3, #120]	; 0x78
 8006454:	e002      	b.n	800645c <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	4a13      	ldr	r2, [pc, #76]	; (80064a8 <HAL_UART_Transmit_IT+0x14c>)
 800645a:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800645c:	f3ef 8310 	mrs	r3, PRIMASK
 8006460:	613b      	str	r3, [r7, #16]
  return(result);
 8006462:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006464:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006466:	2301      	movs	r3, #1
 8006468:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	f383 8810 	msr	PRIMASK, r3
}
 8006470:	46c0      	nop			; (mov r8, r8)
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2180      	movs	r1, #128	; 0x80
 800647e:	430a      	orrs	r2, r1
 8006480:	601a      	str	r2, [r3, #0]
 8006482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006484:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	f383 8810 	msr	PRIMASK, r3
}
 800648c:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 800648e:	2300      	movs	r3, #0
 8006490:	e000      	b.n	8006494 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8006492:	2302      	movs	r3, #2
  }
}
 8006494:	0018      	movs	r0, r3
 8006496:	46bd      	mov	sp, r7
 8006498:	b00c      	add	sp, #48	; 0x30
 800649a:	bd80      	pop	{r7, pc}
 800649c:	08007841 	.word	0x08007841
 80064a0:	08007755 	.word	0x08007755
 80064a4:	08007695 	.word	0x08007695
 80064a8:	080075e1 	.word	0x080075e1

080064ac <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b088      	sub	sp, #32
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	1dbb      	adds	r3, r7, #6
 80064b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	228c      	movs	r2, #140	; 0x8c
 80064be:	589b      	ldr	r3, [r3, r2]
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d145      	bne.n	8006550 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d003      	beq.n	80064d2 <HAL_UART_Receive_IT+0x26>
 80064ca:	1dbb      	adds	r3, r7, #6
 80064cc:	881b      	ldrh	r3, [r3, #0]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d101      	bne.n	80064d6 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80064d2:	2301      	movs	r3, #1
 80064d4:	e03d      	b.n	8006552 <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689a      	ldr	r2, [r3, #8]
 80064da:	2380      	movs	r3, #128	; 0x80
 80064dc:	015b      	lsls	r3, r3, #5
 80064de:	429a      	cmp	r2, r3
 80064e0:	d109      	bne.n	80064f6 <HAL_UART_Receive_IT+0x4a>
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	691b      	ldr	r3, [r3, #16]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d105      	bne.n	80064f6 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	2201      	movs	r2, #1
 80064ee:	4013      	ands	r3, r2
 80064f0:	d001      	beq.n	80064f6 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80064f2:	2301      	movs	r3, #1
 80064f4:	e02d      	b.n	8006552 <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2200      	movs	r2, #0
 80064fa:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	685a      	ldr	r2, [r3, #4]
 8006502:	2380      	movs	r3, #128	; 0x80
 8006504:	041b      	lsls	r3, r3, #16
 8006506:	4013      	ands	r3, r2
 8006508:	d019      	beq.n	800653e <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800650a:	f3ef 8310 	mrs	r3, PRIMASK
 800650e:	613b      	str	r3, [r7, #16]
  return(result);
 8006510:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	2301      	movs	r3, #1
 8006516:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	46c0      	nop			; (mov r8, r8)
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	681a      	ldr	r2, [r3, #0]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2180      	movs	r1, #128	; 0x80
 800652c:	04c9      	lsls	r1, r1, #19
 800652e:	430a      	orrs	r2, r1
 8006530:	601a      	str	r2, [r3, #0]
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006536:	69bb      	ldr	r3, [r7, #24]
 8006538:	f383 8810 	msr	PRIMASK, r3
}
 800653c:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800653e:	1dbb      	adds	r3, r7, #6
 8006540:	881a      	ldrh	r2, [r3, #0]
 8006542:	68b9      	ldr	r1, [r7, #8]
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	0018      	movs	r0, r3
 8006548:	f000 fc82 	bl	8006e50 <UART_Start_Receive_IT>
 800654c:	0003      	movs	r3, r0
 800654e:	e000      	b.n	8006552 <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006550:	2302      	movs	r3, #2
  }
}
 8006552:	0018      	movs	r0, r3
 8006554:	46bd      	mov	sp, r7
 8006556:	b008      	add	sp, #32
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	1dbb      	adds	r3, r7, #6
 8006568:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	2288      	movs	r2, #136	; 0x88
 800656e:	589b      	ldr	r3, [r3, r2]
 8006570:	2b20      	cmp	r3, #32
 8006572:	d000      	beq.n	8006576 <HAL_UART_Transmit_DMA+0x1a>
 8006574:	e079      	b.n	800666a <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <HAL_UART_Transmit_DMA+0x28>
 800657c:	1dbb      	adds	r3, r7, #6
 800657e:	881b      	ldrh	r3, [r3, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d101      	bne.n	8006588 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8006584:	2301      	movs	r3, #1
 8006586:	e071      	b.n	800666c <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	689a      	ldr	r2, [r3, #8]
 800658c:	2380      	movs	r3, #128	; 0x80
 800658e:	015b      	lsls	r3, r3, #5
 8006590:	429a      	cmp	r2, r3
 8006592:	d109      	bne.n	80065a8 <HAL_UART_Transmit_DMA+0x4c>
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	691b      	ldr	r3, [r3, #16]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d105      	bne.n	80065a8 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	2201      	movs	r2, #1
 80065a0:	4013      	ands	r3, r2
 80065a2:	d001      	beq.n	80065a8 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 80065a4:	2301      	movs	r3, #1
 80065a6:	e061      	b.n	800666c <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	1dba      	adds	r2, r7, #6
 80065b2:	2154      	movs	r1, #84	; 0x54
 80065b4:	8812      	ldrh	r2, [r2, #0]
 80065b6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	1dba      	adds	r2, r7, #6
 80065bc:	2156      	movs	r1, #86	; 0x56
 80065be:	8812      	ldrh	r2, [r2, #0]
 80065c0:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2290      	movs	r2, #144	; 0x90
 80065c6:	2100      	movs	r1, #0
 80065c8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2288      	movs	r2, #136	; 0x88
 80065ce:	2121      	movs	r1, #33	; 0x21
 80065d0:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d028      	beq.n	800662c <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065de:	4a25      	ldr	r2, [pc, #148]	; (8006674 <HAL_UART_Transmit_DMA+0x118>)
 80065e0:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065e6:	4a24      	ldr	r2, [pc, #144]	; (8006678 <HAL_UART_Transmit_DMA+0x11c>)
 80065e8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065ee:	4a23      	ldr	r2, [pc, #140]	; (800667c <HAL_UART_Transmit_DMA+0x120>)
 80065f0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80065f6:	2200      	movs	r2, #0
 80065f8:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006602:	0019      	movs	r1, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	3328      	adds	r3, #40	; 0x28
 800660a:	001a      	movs	r2, r3
 800660c:	1dbb      	adds	r3, r7, #6
 800660e:	881b      	ldrh	r3, [r3, #0]
 8006610:	f7fc ff28 	bl	8003464 <HAL_DMA_Start_IT>
 8006614:	1e03      	subs	r3, r0, #0
 8006616:	d009      	beq.n	800662c <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	2290      	movs	r2, #144	; 0x90
 800661c:	2110      	movs	r1, #16
 800661e:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	2288      	movs	r2, #136	; 0x88
 8006624:	2120      	movs	r1, #32
 8006626:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8006628:	2301      	movs	r3, #1
 800662a:	e01f      	b.n	800666c <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	2240      	movs	r2, #64	; 0x40
 8006632:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006634:	f3ef 8310 	mrs	r3, PRIMASK
 8006638:	613b      	str	r3, [r7, #16]
  return(result);
 800663a:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800663c:	61fb      	str	r3, [r7, #28]
 800663e:	2301      	movs	r3, #1
 8006640:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f383 8810 	msr	PRIMASK, r3
}
 8006648:	46c0      	nop			; (mov r8, r8)
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	689a      	ldr	r2, [r3, #8]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	2180      	movs	r1, #128	; 0x80
 8006656:	430a      	orrs	r2, r1
 8006658:	609a      	str	r2, [r3, #8]
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800665e:	69bb      	ldr	r3, [r7, #24]
 8006660:	f383 8810 	msr	PRIMASK, r3
}
 8006664:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	e000      	b.n	800666c <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 800666a:	2302      	movs	r3, #2
  }
}
 800666c:	0018      	movs	r0, r3
 800666e:	46bd      	mov	sp, r7
 8006670:	b008      	add	sp, #32
 8006672:	bd80      	pop	{r7, pc}
 8006674:	08007331 	.word	0x08007331
 8006678:	080073c9 	.word	0x080073c9
 800667c:	0800755b 	.word	0x0800755b

08006680 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af00      	add	r7, sp, #0
 8006686:	60f8      	str	r0, [r7, #12]
 8006688:	60b9      	str	r1, [r7, #8]
 800668a:	1dbb      	adds	r3, r7, #6
 800668c:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	228c      	movs	r2, #140	; 0x8c
 8006692:	589b      	ldr	r3, [r3, r2]
 8006694:	2b20      	cmp	r3, #32
 8006696:	d145      	bne.n	8006724 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d003      	beq.n	80066a6 <HAL_UART_Receive_DMA+0x26>
 800669e:	1dbb      	adds	r3, r7, #6
 80066a0:	881b      	ldrh	r3, [r3, #0]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e03d      	b.n	8006726 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689a      	ldr	r2, [r3, #8]
 80066ae:	2380      	movs	r3, #128	; 0x80
 80066b0:	015b      	lsls	r3, r3, #5
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d109      	bne.n	80066ca <HAL_UART_Receive_DMA+0x4a>
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	691b      	ldr	r3, [r3, #16]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d105      	bne.n	80066ca <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80066be:	68bb      	ldr	r3, [r7, #8]
 80066c0:	2201      	movs	r2, #1
 80066c2:	4013      	ands	r3, r2
 80066c4:	d001      	beq.n	80066ca <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e02d      	b.n	8006726 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685a      	ldr	r2, [r3, #4]
 80066d6:	2380      	movs	r3, #128	; 0x80
 80066d8:	041b      	lsls	r3, r3, #16
 80066da:	4013      	ands	r3, r2
 80066dc:	d019      	beq.n	8006712 <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066de:	f3ef 8310 	mrs	r3, PRIMASK
 80066e2:	613b      	str	r3, [r7, #16]
  return(result);
 80066e4:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80066e6:	61fb      	str	r3, [r7, #28]
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066ec:	697b      	ldr	r3, [r7, #20]
 80066ee:	f383 8810 	msr	PRIMASK, r3
}
 80066f2:	46c0      	nop			; (mov r8, r8)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	681a      	ldr	r2, [r3, #0]
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2180      	movs	r1, #128	; 0x80
 8006700:	04c9      	lsls	r1, r1, #19
 8006702:	430a      	orrs	r2, r1
 8006704:	601a      	str	r2, [r3, #0]
 8006706:	69fb      	ldr	r3, [r7, #28]
 8006708:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	f383 8810 	msr	PRIMASK, r3
}
 8006710:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006712:	1dbb      	adds	r3, r7, #6
 8006714:	881a      	ldrh	r2, [r3, #0]
 8006716:	68b9      	ldr	r1, [r7, #8]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	0018      	movs	r0, r3
 800671c:	f000 fcbc 	bl	8007098 <UART_Start_Receive_DMA>
 8006720:	0003      	movs	r3, r0
 8006722:	e000      	b.n	8006726 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8006724:	2302      	movs	r3, #2
  }
}
 8006726:	0018      	movs	r0, r3
 8006728:	46bd      	mov	sp, r7
 800672a:	b008      	add	sp, #32
 800672c:	bd80      	pop	{r7, pc}

0800672e <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800672e:	b580      	push	{r7, lr}
 8006730:	b082      	sub	sp, #8
 8006732:	af00      	add	r7, sp, #0
 8006734:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006736:	46c0      	nop			; (mov r8, r8)
 8006738:	46bd      	mov	sp, r7
 800673a:	b002      	add	sp, #8
 800673c:	bd80      	pop	{r7, pc}

0800673e <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800673e:	b580      	push	{r7, lr}
 8006740:	b082      	sub	sp, #8
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006746:	46c0      	nop			; (mov r8, r8)
 8006748:	46bd      	mov	sp, r7
 800674a:	b002      	add	sp, #8
 800674c:	bd80      	pop	{r7, pc}

0800674e <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b082      	sub	sp, #8
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006756:	46c0      	nop			; (mov r8, r8)
 8006758:	46bd      	mov	sp, r7
 800675a:	b002      	add	sp, #8
 800675c:	bd80      	pop	{r7, pc}

0800675e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800675e:	b580      	push	{r7, lr}
 8006760:	b082      	sub	sp, #8
 8006762:	af00      	add	r7, sp, #0
 8006764:	6078      	str	r0, [r7, #4]
 8006766:	000a      	movs	r2, r1
 8006768:	1cbb      	adds	r3, r7, #2
 800676a:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800676c:	46c0      	nop			; (mov r8, r8)
 800676e:	46bd      	mov	sp, r7
 8006770:	b002      	add	sp, #8
 8006772:	bd80      	pop	{r7, pc}

08006774 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800677c:	231a      	movs	r3, #26
 800677e:	18fb      	adds	r3, r7, r3
 8006780:	2200      	movs	r2, #0
 8006782:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	689a      	ldr	r2, [r3, #8]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	431a      	orrs	r2, r3
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	695b      	ldr	r3, [r3, #20]
 8006792:	431a      	orrs	r2, r3
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	69db      	ldr	r3, [r3, #28]
 8006798:	4313      	orrs	r3, r2
 800679a:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	4abc      	ldr	r2, [pc, #752]	; (8006a94 <UART_SetConfig+0x320>)
 80067a4:	4013      	ands	r3, r2
 80067a6:	0019      	movs	r1, r3
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	430a      	orrs	r2, r1
 80067b0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	685b      	ldr	r3, [r3, #4]
 80067b8:	4ab7      	ldr	r2, [pc, #732]	; (8006a98 <UART_SetConfig+0x324>)
 80067ba:	4013      	ands	r3, r2
 80067bc:	0019      	movs	r1, r3
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	430a      	orrs	r2, r1
 80067c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	699b      	ldr	r3, [r3, #24]
 80067ce:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	6a1b      	ldr	r3, [r3, #32]
 80067d4:	69fa      	ldr	r2, [r7, #28]
 80067d6:	4313      	orrs	r3, r2
 80067d8:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	4aae      	ldr	r2, [pc, #696]	; (8006a9c <UART_SetConfig+0x328>)
 80067e2:	4013      	ands	r3, r2
 80067e4:	0019      	movs	r1, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	69fa      	ldr	r2, [r7, #28]
 80067ec:	430a      	orrs	r2, r1
 80067ee:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067f6:	220f      	movs	r2, #15
 80067f8:	4393      	bics	r3, r2
 80067fa:	0019      	movs	r1, r3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	430a      	orrs	r2, r1
 8006806:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4aa4      	ldr	r2, [pc, #656]	; (8006aa0 <UART_SetConfig+0x32c>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d127      	bne.n	8006862 <UART_SetConfig+0xee>
 8006812:	4ba4      	ldr	r3, [pc, #656]	; (8006aa4 <UART_SetConfig+0x330>)
 8006814:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006816:	2203      	movs	r2, #3
 8006818:	4013      	ands	r3, r2
 800681a:	2b03      	cmp	r3, #3
 800681c:	d017      	beq.n	800684e <UART_SetConfig+0xda>
 800681e:	d81b      	bhi.n	8006858 <UART_SetConfig+0xe4>
 8006820:	2b02      	cmp	r3, #2
 8006822:	d00a      	beq.n	800683a <UART_SetConfig+0xc6>
 8006824:	d818      	bhi.n	8006858 <UART_SetConfig+0xe4>
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <UART_SetConfig+0xbc>
 800682a:	2b01      	cmp	r3, #1
 800682c:	d00a      	beq.n	8006844 <UART_SetConfig+0xd0>
 800682e:	e013      	b.n	8006858 <UART_SetConfig+0xe4>
 8006830:	231b      	movs	r3, #27
 8006832:	18fb      	adds	r3, r7, r3
 8006834:	2200      	movs	r2, #0
 8006836:	701a      	strb	r2, [r3, #0]
 8006838:	e058      	b.n	80068ec <UART_SetConfig+0x178>
 800683a:	231b      	movs	r3, #27
 800683c:	18fb      	adds	r3, r7, r3
 800683e:	2202      	movs	r2, #2
 8006840:	701a      	strb	r2, [r3, #0]
 8006842:	e053      	b.n	80068ec <UART_SetConfig+0x178>
 8006844:	231b      	movs	r3, #27
 8006846:	18fb      	adds	r3, r7, r3
 8006848:	2204      	movs	r2, #4
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e04e      	b.n	80068ec <UART_SetConfig+0x178>
 800684e:	231b      	movs	r3, #27
 8006850:	18fb      	adds	r3, r7, r3
 8006852:	2208      	movs	r2, #8
 8006854:	701a      	strb	r2, [r3, #0]
 8006856:	e049      	b.n	80068ec <UART_SetConfig+0x178>
 8006858:	231b      	movs	r3, #27
 800685a:	18fb      	adds	r3, r7, r3
 800685c:	2210      	movs	r2, #16
 800685e:	701a      	strb	r2, [r3, #0]
 8006860:	e044      	b.n	80068ec <UART_SetConfig+0x178>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a90      	ldr	r2, [pc, #576]	; (8006aa8 <UART_SetConfig+0x334>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d127      	bne.n	80068bc <UART_SetConfig+0x148>
 800686c:	4b8d      	ldr	r3, [pc, #564]	; (8006aa4 <UART_SetConfig+0x330>)
 800686e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006870:	220c      	movs	r2, #12
 8006872:	4013      	ands	r3, r2
 8006874:	2b0c      	cmp	r3, #12
 8006876:	d017      	beq.n	80068a8 <UART_SetConfig+0x134>
 8006878:	d81b      	bhi.n	80068b2 <UART_SetConfig+0x13e>
 800687a:	2b08      	cmp	r3, #8
 800687c:	d00a      	beq.n	8006894 <UART_SetConfig+0x120>
 800687e:	d818      	bhi.n	80068b2 <UART_SetConfig+0x13e>
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <UART_SetConfig+0x116>
 8006884:	2b04      	cmp	r3, #4
 8006886:	d00a      	beq.n	800689e <UART_SetConfig+0x12a>
 8006888:	e013      	b.n	80068b2 <UART_SetConfig+0x13e>
 800688a:	231b      	movs	r3, #27
 800688c:	18fb      	adds	r3, r7, r3
 800688e:	2200      	movs	r2, #0
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	e02b      	b.n	80068ec <UART_SetConfig+0x178>
 8006894:	231b      	movs	r3, #27
 8006896:	18fb      	adds	r3, r7, r3
 8006898:	2202      	movs	r2, #2
 800689a:	701a      	strb	r2, [r3, #0]
 800689c:	e026      	b.n	80068ec <UART_SetConfig+0x178>
 800689e:	231b      	movs	r3, #27
 80068a0:	18fb      	adds	r3, r7, r3
 80068a2:	2204      	movs	r2, #4
 80068a4:	701a      	strb	r2, [r3, #0]
 80068a6:	e021      	b.n	80068ec <UART_SetConfig+0x178>
 80068a8:	231b      	movs	r3, #27
 80068aa:	18fb      	adds	r3, r7, r3
 80068ac:	2208      	movs	r2, #8
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	e01c      	b.n	80068ec <UART_SetConfig+0x178>
 80068b2:	231b      	movs	r3, #27
 80068b4:	18fb      	adds	r3, r7, r3
 80068b6:	2210      	movs	r2, #16
 80068b8:	701a      	strb	r2, [r3, #0]
 80068ba:	e017      	b.n	80068ec <UART_SetConfig+0x178>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a7a      	ldr	r2, [pc, #488]	; (8006aac <UART_SetConfig+0x338>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d104      	bne.n	80068d0 <UART_SetConfig+0x15c>
 80068c6:	231b      	movs	r3, #27
 80068c8:	18fb      	adds	r3, r7, r3
 80068ca:	2200      	movs	r2, #0
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	e00d      	b.n	80068ec <UART_SetConfig+0x178>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a76      	ldr	r2, [pc, #472]	; (8006ab0 <UART_SetConfig+0x33c>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d104      	bne.n	80068e4 <UART_SetConfig+0x170>
 80068da:	231b      	movs	r3, #27
 80068dc:	18fb      	adds	r3, r7, r3
 80068de:	2200      	movs	r2, #0
 80068e0:	701a      	strb	r2, [r3, #0]
 80068e2:	e003      	b.n	80068ec <UART_SetConfig+0x178>
 80068e4:	231b      	movs	r3, #27
 80068e6:	18fb      	adds	r3, r7, r3
 80068e8:	2210      	movs	r2, #16
 80068ea:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	2380      	movs	r3, #128	; 0x80
 80068f2:	021b      	lsls	r3, r3, #8
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d000      	beq.n	80068fa <UART_SetConfig+0x186>
 80068f8:	e065      	b.n	80069c6 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80068fa:	231b      	movs	r3, #27
 80068fc:	18fb      	adds	r3, r7, r3
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d015      	beq.n	8006930 <UART_SetConfig+0x1bc>
 8006904:	dc18      	bgt.n	8006938 <UART_SetConfig+0x1c4>
 8006906:	2b04      	cmp	r3, #4
 8006908:	d00d      	beq.n	8006926 <UART_SetConfig+0x1b2>
 800690a:	dc15      	bgt.n	8006938 <UART_SetConfig+0x1c4>
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <UART_SetConfig+0x1a2>
 8006910:	2b02      	cmp	r3, #2
 8006912:	d005      	beq.n	8006920 <UART_SetConfig+0x1ac>
 8006914:	e010      	b.n	8006938 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006916:	f7fd fe1b 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 800691a:	0003      	movs	r3, r0
 800691c:	617b      	str	r3, [r7, #20]
        break;
 800691e:	e012      	b.n	8006946 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006920:	4b64      	ldr	r3, [pc, #400]	; (8006ab4 <UART_SetConfig+0x340>)
 8006922:	617b      	str	r3, [r7, #20]
        break;
 8006924:	e00f      	b.n	8006946 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006926:	f7fd fd89 	bl	800443c <HAL_RCC_GetSysClockFreq>
 800692a:	0003      	movs	r3, r0
 800692c:	617b      	str	r3, [r7, #20]
        break;
 800692e:	e00a      	b.n	8006946 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006930:	2380      	movs	r3, #128	; 0x80
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	617b      	str	r3, [r7, #20]
        break;
 8006936:	e006      	b.n	8006946 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006938:	2300      	movs	r3, #0
 800693a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800693c:	231a      	movs	r3, #26
 800693e:	18fb      	adds	r3, r7, r3
 8006940:	2201      	movs	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
        break;
 8006944:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d100      	bne.n	800694e <UART_SetConfig+0x1da>
 800694c:	e08d      	b.n	8006a6a <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006952:	4b59      	ldr	r3, [pc, #356]	; (8006ab8 <UART_SetConfig+0x344>)
 8006954:	0052      	lsls	r2, r2, #1
 8006956:	5ad3      	ldrh	r3, [r2, r3]
 8006958:	0019      	movs	r1, r3
 800695a:	6978      	ldr	r0, [r7, #20]
 800695c:	f7f9 fbde 	bl	800011c <__udivsi3>
 8006960:	0003      	movs	r3, r0
 8006962:	005a      	lsls	r2, r3, #1
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	085b      	lsrs	r3, r3, #1
 800696a:	18d2      	adds	r2, r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	685b      	ldr	r3, [r3, #4]
 8006970:	0019      	movs	r1, r3
 8006972:	0010      	movs	r0, r2
 8006974:	f7f9 fbd2 	bl	800011c <__udivsi3>
 8006978:	0003      	movs	r3, r0
 800697a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697c:	693b      	ldr	r3, [r7, #16]
 800697e:	2b0f      	cmp	r3, #15
 8006980:	d91c      	bls.n	80069bc <UART_SetConfig+0x248>
 8006982:	693a      	ldr	r2, [r7, #16]
 8006984:	2380      	movs	r3, #128	; 0x80
 8006986:	025b      	lsls	r3, r3, #9
 8006988:	429a      	cmp	r2, r3
 800698a:	d217      	bcs.n	80069bc <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	b29a      	uxth	r2, r3
 8006990:	200e      	movs	r0, #14
 8006992:	183b      	adds	r3, r7, r0
 8006994:	210f      	movs	r1, #15
 8006996:	438a      	bics	r2, r1
 8006998:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800699a:	693b      	ldr	r3, [r7, #16]
 800699c:	085b      	lsrs	r3, r3, #1
 800699e:	b29b      	uxth	r3, r3
 80069a0:	2207      	movs	r2, #7
 80069a2:	4013      	ands	r3, r2
 80069a4:	b299      	uxth	r1, r3
 80069a6:	183b      	adds	r3, r7, r0
 80069a8:	183a      	adds	r2, r7, r0
 80069aa:	8812      	ldrh	r2, [r2, #0]
 80069ac:	430a      	orrs	r2, r1
 80069ae:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	183a      	adds	r2, r7, r0
 80069b6:	8812      	ldrh	r2, [r2, #0]
 80069b8:	60da      	str	r2, [r3, #12]
 80069ba:	e056      	b.n	8006a6a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 80069bc:	231a      	movs	r3, #26
 80069be:	18fb      	adds	r3, r7, r3
 80069c0:	2201      	movs	r2, #1
 80069c2:	701a      	strb	r2, [r3, #0]
 80069c4:	e051      	b.n	8006a6a <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80069c6:	231b      	movs	r3, #27
 80069c8:	18fb      	adds	r3, r7, r3
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	2b08      	cmp	r3, #8
 80069ce:	d015      	beq.n	80069fc <UART_SetConfig+0x288>
 80069d0:	dc18      	bgt.n	8006a04 <UART_SetConfig+0x290>
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d00d      	beq.n	80069f2 <UART_SetConfig+0x27e>
 80069d6:	dc15      	bgt.n	8006a04 <UART_SetConfig+0x290>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d002      	beq.n	80069e2 <UART_SetConfig+0x26e>
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d005      	beq.n	80069ec <UART_SetConfig+0x278>
 80069e0:	e010      	b.n	8006a04 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069e2:	f7fd fdb5 	bl	8004550 <HAL_RCC_GetPCLK1Freq>
 80069e6:	0003      	movs	r3, r0
 80069e8:	617b      	str	r3, [r7, #20]
        break;
 80069ea:	e012      	b.n	8006a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069ec:	4b31      	ldr	r3, [pc, #196]	; (8006ab4 <UART_SetConfig+0x340>)
 80069ee:	617b      	str	r3, [r7, #20]
        break;
 80069f0:	e00f      	b.n	8006a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069f2:	f7fd fd23 	bl	800443c <HAL_RCC_GetSysClockFreq>
 80069f6:	0003      	movs	r3, r0
 80069f8:	617b      	str	r3, [r7, #20]
        break;
 80069fa:	e00a      	b.n	8006a12 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069fc:	2380      	movs	r3, #128	; 0x80
 80069fe:	021b      	lsls	r3, r3, #8
 8006a00:	617b      	str	r3, [r7, #20]
        break;
 8006a02:	e006      	b.n	8006a12 <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006a08:	231a      	movs	r3, #26
 8006a0a:	18fb      	adds	r3, r7, r3
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	701a      	strb	r2, [r3, #0]
        break;
 8006a10:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d028      	beq.n	8006a6a <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a1c:	4b26      	ldr	r3, [pc, #152]	; (8006ab8 <UART_SetConfig+0x344>)
 8006a1e:	0052      	lsls	r2, r2, #1
 8006a20:	5ad3      	ldrh	r3, [r2, r3]
 8006a22:	0019      	movs	r1, r3
 8006a24:	6978      	ldr	r0, [r7, #20]
 8006a26:	f7f9 fb79 	bl	800011c <__udivsi3>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	001a      	movs	r2, r3
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	685b      	ldr	r3, [r3, #4]
 8006a32:	085b      	lsrs	r3, r3, #1
 8006a34:	18d2      	adds	r2, r2, r3
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	685b      	ldr	r3, [r3, #4]
 8006a3a:	0019      	movs	r1, r3
 8006a3c:	0010      	movs	r0, r2
 8006a3e:	f7f9 fb6d 	bl	800011c <__udivsi3>
 8006a42:	0003      	movs	r3, r0
 8006a44:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	2b0f      	cmp	r3, #15
 8006a4a:	d90a      	bls.n	8006a62 <UART_SetConfig+0x2ee>
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	2380      	movs	r3, #128	; 0x80
 8006a50:	025b      	lsls	r3, r3, #9
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d205      	bcs.n	8006a62 <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	b29a      	uxth	r2, r3
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	60da      	str	r2, [r3, #12]
 8006a60:	e003      	b.n	8006a6a <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006a62:	231a      	movs	r3, #26
 8006a64:	18fb      	adds	r3, r7, r3
 8006a66:	2201      	movs	r2, #1
 8006a68:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	226a      	movs	r2, #106	; 0x6a
 8006a6e:	2101      	movs	r1, #1
 8006a70:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2268      	movs	r2, #104	; 0x68
 8006a76:	2101      	movs	r1, #1
 8006a78:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006a86:	231a      	movs	r3, #26
 8006a88:	18fb      	adds	r3, r7, r3
 8006a8a:	781b      	ldrb	r3, [r3, #0]
}
 8006a8c:	0018      	movs	r0, r3
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	b008      	add	sp, #32
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	cfff69f3 	.word	0xcfff69f3
 8006a98:	ffffcfff 	.word	0xffffcfff
 8006a9c:	11fff4ff 	.word	0x11fff4ff
 8006aa0:	40013800 	.word	0x40013800
 8006aa4:	40021000 	.word	0x40021000
 8006aa8:	40004400 	.word	0x40004400
 8006aac:	40004800 	.word	0x40004800
 8006ab0:	40004c00 	.word	0x40004c00
 8006ab4:	00f42400 	.word	0x00f42400
 8006ab8:	0800be94 	.word	0x0800be94

08006abc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ac8:	2201      	movs	r2, #1
 8006aca:	4013      	ands	r3, r2
 8006acc:	d00b      	beq.n	8006ae6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4a4a      	ldr	r2, [pc, #296]	; (8006c00 <UART_AdvFeatureConfig+0x144>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	0019      	movs	r1, r3
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	430a      	orrs	r2, r1
 8006ae4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	2202      	movs	r2, #2
 8006aec:	4013      	ands	r3, r2
 8006aee:	d00b      	beq.n	8006b08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	4a43      	ldr	r2, [pc, #268]	; (8006c04 <UART_AdvFeatureConfig+0x148>)
 8006af8:	4013      	ands	r3, r2
 8006afa:	0019      	movs	r1, r3
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	430a      	orrs	r2, r1
 8006b06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b0c:	2204      	movs	r2, #4
 8006b0e:	4013      	ands	r3, r2
 8006b10:	d00b      	beq.n	8006b2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	685b      	ldr	r3, [r3, #4]
 8006b18:	4a3b      	ldr	r2, [pc, #236]	; (8006c08 <UART_AdvFeatureConfig+0x14c>)
 8006b1a:	4013      	ands	r3, r2
 8006b1c:	0019      	movs	r1, r3
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	430a      	orrs	r2, r1
 8006b28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b2e:	2208      	movs	r2, #8
 8006b30:	4013      	ands	r3, r2
 8006b32:	d00b      	beq.n	8006b4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	4a34      	ldr	r2, [pc, #208]	; (8006c0c <UART_AdvFeatureConfig+0x150>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	0019      	movs	r1, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	430a      	orrs	r2, r1
 8006b4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b50:	2210      	movs	r2, #16
 8006b52:	4013      	ands	r3, r2
 8006b54:	d00b      	beq.n	8006b6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	689b      	ldr	r3, [r3, #8]
 8006b5c:	4a2c      	ldr	r2, [pc, #176]	; (8006c10 <UART_AdvFeatureConfig+0x154>)
 8006b5e:	4013      	ands	r3, r2
 8006b60:	0019      	movs	r1, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b72:	2220      	movs	r2, #32
 8006b74:	4013      	ands	r3, r2
 8006b76:	d00b      	beq.n	8006b90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	4a25      	ldr	r2, [pc, #148]	; (8006c14 <UART_AdvFeatureConfig+0x158>)
 8006b80:	4013      	ands	r3, r2
 8006b82:	0019      	movs	r1, r3
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	430a      	orrs	r2, r1
 8006b8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b94:	2240      	movs	r2, #64	; 0x40
 8006b96:	4013      	ands	r3, r2
 8006b98:	d01d      	beq.n	8006bd6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	4a1d      	ldr	r2, [pc, #116]	; (8006c18 <UART_AdvFeatureConfig+0x15c>)
 8006ba2:	4013      	ands	r3, r2
 8006ba4:	0019      	movs	r1, r3
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	430a      	orrs	r2, r1
 8006bb0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bb6:	2380      	movs	r3, #128	; 0x80
 8006bb8:	035b      	lsls	r3, r3, #13
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d10b      	bne.n	8006bd6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	4a15      	ldr	r2, [pc, #84]	; (8006c1c <UART_AdvFeatureConfig+0x160>)
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	0019      	movs	r1, r3
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	430a      	orrs	r2, r1
 8006bd4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	2280      	movs	r2, #128	; 0x80
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d00b      	beq.n	8006bf8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	4a0e      	ldr	r2, [pc, #56]	; (8006c20 <UART_AdvFeatureConfig+0x164>)
 8006be8:	4013      	ands	r3, r2
 8006bea:	0019      	movs	r1, r3
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	430a      	orrs	r2, r1
 8006bf6:	605a      	str	r2, [r3, #4]
  }
}
 8006bf8:	46c0      	nop			; (mov r8, r8)
 8006bfa:	46bd      	mov	sp, r7
 8006bfc:	b002      	add	sp, #8
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	fffdffff 	.word	0xfffdffff
 8006c04:	fffeffff 	.word	0xfffeffff
 8006c08:	fffbffff 	.word	0xfffbffff
 8006c0c:	ffff7fff 	.word	0xffff7fff
 8006c10:	ffffefff 	.word	0xffffefff
 8006c14:	ffffdfff 	.word	0xffffdfff
 8006c18:	ffefffff 	.word	0xffefffff
 8006c1c:	ff9fffff 	.word	0xff9fffff
 8006c20:	fff7ffff 	.word	0xfff7ffff

08006c24 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b086      	sub	sp, #24
 8006c28:	af02      	add	r7, sp, #8
 8006c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2290      	movs	r2, #144	; 0x90
 8006c30:	2100      	movs	r1, #0
 8006c32:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c34:	f7fb fe1c 	bl	8002870 <HAL_GetTick>
 8006c38:	0003      	movs	r3, r0
 8006c3a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	2208      	movs	r2, #8
 8006c44:	4013      	ands	r3, r2
 8006c46:	2b08      	cmp	r3, #8
 8006c48:	d10c      	bne.n	8006c64 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2280      	movs	r2, #128	; 0x80
 8006c4e:	0391      	lsls	r1, r2, #14
 8006c50:	6878      	ldr	r0, [r7, #4]
 8006c52:	4a1a      	ldr	r2, [pc, #104]	; (8006cbc <UART_CheckIdleState+0x98>)
 8006c54:	9200      	str	r2, [sp, #0]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f000 f832 	bl	8006cc0 <UART_WaitOnFlagUntilTimeout>
 8006c5c:	1e03      	subs	r3, r0, #0
 8006c5e:	d001      	beq.n	8006c64 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e026      	b.n	8006cb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2204      	movs	r2, #4
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	2b04      	cmp	r3, #4
 8006c70:	d10c      	bne.n	8006c8c <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2280      	movs	r2, #128	; 0x80
 8006c76:	03d1      	lsls	r1, r2, #15
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4a10      	ldr	r2, [pc, #64]	; (8006cbc <UART_CheckIdleState+0x98>)
 8006c7c:	9200      	str	r2, [sp, #0]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f000 f81e 	bl	8006cc0 <UART_WaitOnFlagUntilTimeout>
 8006c84:	1e03      	subs	r3, r0, #0
 8006c86:	d001      	beq.n	8006c8c <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c88:	2303      	movs	r3, #3
 8006c8a:	e012      	b.n	8006cb2 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2288      	movs	r2, #136	; 0x88
 8006c90:	2120      	movs	r1, #32
 8006c92:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	228c      	movs	r2, #140	; 0x8c
 8006c98:	2120      	movs	r1, #32
 8006c9a:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2284      	movs	r2, #132	; 0x84
 8006cac:	2100      	movs	r1, #0
 8006cae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	0018      	movs	r0, r3
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	b004      	add	sp, #16
 8006cb8:	bd80      	pop	{r7, pc}
 8006cba:	46c0      	nop			; (mov r8, r8)
 8006cbc:	01ffffff 	.word	0x01ffffff

08006cc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b094      	sub	sp, #80	; 0x50
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	60f8      	str	r0, [r7, #12]
 8006cc8:	60b9      	str	r1, [r7, #8]
 8006cca:	603b      	str	r3, [r7, #0]
 8006ccc:	1dfb      	adds	r3, r7, #7
 8006cce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd0:	e0a7      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	d100      	bne.n	8006cda <UART_WaitOnFlagUntilTimeout+0x1a>
 8006cd8:	e0a3      	b.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cda:	f7fb fdc9 	bl	8002870 <HAL_GetTick>
 8006cde:	0002      	movs	r2, r0
 8006ce0:	683b      	ldr	r3, [r7, #0]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <UART_WaitOnFlagUntilTimeout+0x30>
 8006cea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d13f      	bne.n	8006d70 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006cf0:	f3ef 8310 	mrs	r3, PRIMASK
 8006cf4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cf8:	647b      	str	r3, [r7, #68]	; 0x44
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006cfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d00:	f383 8810 	msr	PRIMASK, r3
}
 8006d04:	46c0      	nop			; (mov r8, r8)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	681a      	ldr	r2, [r3, #0]
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	494e      	ldr	r1, [pc, #312]	; (8006e4c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006d12:	400a      	ands	r2, r1
 8006d14:	601a      	str	r2, [r3, #0]
 8006d16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d1c:	f383 8810 	msr	PRIMASK, r3
}
 8006d20:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d22:	f3ef 8310 	mrs	r3, PRIMASK
 8006d26:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006d28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d2a:	643b      	str	r3, [r7, #64]	; 0x40
 8006d2c:	2301      	movs	r3, #1
 8006d2e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d32:	f383 8810 	msr	PRIMASK, r3
}
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	689a      	ldr	r2, [r3, #8]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2101      	movs	r1, #1
 8006d44:	438a      	bics	r2, r1
 8006d46:	609a      	str	r2, [r3, #8]
 8006d48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d4e:	f383 8810 	msr	PRIMASK, r3
}
 8006d52:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	2288      	movs	r2, #136	; 0x88
 8006d58:	2120      	movs	r1, #32
 8006d5a:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	228c      	movs	r2, #140	; 0x8c
 8006d60:	2120      	movs	r1, #32
 8006d62:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	2284      	movs	r2, #132	; 0x84
 8006d68:	2100      	movs	r1, #0
 8006d6a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006d6c:	2303      	movs	r3, #3
 8006d6e:	e069      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	2204      	movs	r2, #4
 8006d78:	4013      	ands	r3, r2
 8006d7a:	d052      	beq.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	69da      	ldr	r2, [r3, #28]
 8006d82:	2380      	movs	r3, #128	; 0x80
 8006d84:	011b      	lsls	r3, r3, #4
 8006d86:	401a      	ands	r2, r3
 8006d88:	2380      	movs	r3, #128	; 0x80
 8006d8a:	011b      	lsls	r3, r3, #4
 8006d8c:	429a      	cmp	r2, r3
 8006d8e:	d148      	bne.n	8006e22 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	2280      	movs	r2, #128	; 0x80
 8006d96:	0112      	lsls	r2, r2, #4
 8006d98:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d9a:	f3ef 8310 	mrs	r3, PRIMASK
 8006d9e:	613b      	str	r3, [r7, #16]
  return(result);
 8006da0:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006da2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006da4:	2301      	movs	r3, #1
 8006da6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f383 8810 	msr	PRIMASK, r3
}
 8006dae:	46c0      	nop			; (mov r8, r8)
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	681a      	ldr	r2, [r3, #0]
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4924      	ldr	r1, [pc, #144]	; (8006e4c <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006dbc:	400a      	ands	r2, r1
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dc2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dc4:	69bb      	ldr	r3, [r7, #24]
 8006dc6:	f383 8810 	msr	PRIMASK, r3
}
 8006dca:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dcc:	f3ef 8310 	mrs	r3, PRIMASK
 8006dd0:	61fb      	str	r3, [r7, #28]
  return(result);
 8006dd2:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dda:	6a3b      	ldr	r3, [r7, #32]
 8006ddc:	f383 8810 	msr	PRIMASK, r3
}
 8006de0:	46c0      	nop			; (mov r8, r8)
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689a      	ldr	r2, [r3, #8]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2101      	movs	r1, #1
 8006dee:	438a      	bics	r2, r1
 8006df0:	609a      	str	r2, [r3, #8]
 8006df2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006df4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df8:	f383 8810 	msr	PRIMASK, r3
}
 8006dfc:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	2288      	movs	r2, #136	; 0x88
 8006e02:	2120      	movs	r1, #32
 8006e04:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	228c      	movs	r2, #140	; 0x8c
 8006e0a:	2120      	movs	r1, #32
 8006e0c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	2290      	movs	r2, #144	; 0x90
 8006e12:	2120      	movs	r1, #32
 8006e14:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	2284      	movs	r2, #132	; 0x84
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006e1e:	2303      	movs	r3, #3
 8006e20:	e010      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	69db      	ldr	r3, [r3, #28]
 8006e28:	68ba      	ldr	r2, [r7, #8]
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	1ad3      	subs	r3, r2, r3
 8006e30:	425a      	negs	r2, r3
 8006e32:	4153      	adcs	r3, r2
 8006e34:	b2db      	uxtb	r3, r3
 8006e36:	001a      	movs	r2, r3
 8006e38:	1dfb      	adds	r3, r7, #7
 8006e3a:	781b      	ldrb	r3, [r3, #0]
 8006e3c:	429a      	cmp	r2, r3
 8006e3e:	d100      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x182>
 8006e40:	e747      	b.n	8006cd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	0018      	movs	r0, r3
 8006e46:	46bd      	mov	sp, r7
 8006e48:	b014      	add	sp, #80	; 0x50
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	fffffe5f 	.word	0xfffffe5f

08006e50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b098      	sub	sp, #96	; 0x60
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	60b9      	str	r1, [r7, #8]
 8006e5a:	1dbb      	adds	r3, r7, #6
 8006e5c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	1dba      	adds	r2, r7, #6
 8006e68:	215c      	movs	r1, #92	; 0x5c
 8006e6a:	8812      	ldrh	r2, [r2, #0]
 8006e6c:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	1dba      	adds	r2, r7, #6
 8006e72:	215e      	movs	r1, #94	; 0x5e
 8006e74:	8812      	ldrh	r2, [r2, #0]
 8006e76:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689a      	ldr	r2, [r3, #8]
 8006e82:	2380      	movs	r3, #128	; 0x80
 8006e84:	015b      	lsls	r3, r3, #5
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d10d      	bne.n	8006ea6 <UART_Start_Receive_IT+0x56>
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d104      	bne.n	8006e9c <UART_Start_Receive_IT+0x4c>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2260      	movs	r2, #96	; 0x60
 8006e96:	497b      	ldr	r1, [pc, #492]	; (8007084 <UART_Start_Receive_IT+0x234>)
 8006e98:	5299      	strh	r1, [r3, r2]
 8006e9a:	e02e      	b.n	8006efa <UART_Start_Receive_IT+0xaa>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	2260      	movs	r2, #96	; 0x60
 8006ea0:	21ff      	movs	r1, #255	; 0xff
 8006ea2:	5299      	strh	r1, [r3, r2]
 8006ea4:	e029      	b.n	8006efa <UART_Start_Receive_IT+0xaa>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10d      	bne.n	8006eca <UART_Start_Receive_IT+0x7a>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <UART_Start_Receive_IT+0x70>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	2260      	movs	r2, #96	; 0x60
 8006eba:	21ff      	movs	r1, #255	; 0xff
 8006ebc:	5299      	strh	r1, [r3, r2]
 8006ebe:	e01c      	b.n	8006efa <UART_Start_Receive_IT+0xaa>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2260      	movs	r2, #96	; 0x60
 8006ec4:	217f      	movs	r1, #127	; 0x7f
 8006ec6:	5299      	strh	r1, [r3, r2]
 8006ec8:	e017      	b.n	8006efa <UART_Start_Receive_IT+0xaa>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689a      	ldr	r2, [r3, #8]
 8006ece:	2380      	movs	r3, #128	; 0x80
 8006ed0:	055b      	lsls	r3, r3, #21
 8006ed2:	429a      	cmp	r2, r3
 8006ed4:	d10d      	bne.n	8006ef2 <UART_Start_Receive_IT+0xa2>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	691b      	ldr	r3, [r3, #16]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d104      	bne.n	8006ee8 <UART_Start_Receive_IT+0x98>
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2260      	movs	r2, #96	; 0x60
 8006ee2:	217f      	movs	r1, #127	; 0x7f
 8006ee4:	5299      	strh	r1, [r3, r2]
 8006ee6:	e008      	b.n	8006efa <UART_Start_Receive_IT+0xaa>
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2260      	movs	r2, #96	; 0x60
 8006eec:	213f      	movs	r1, #63	; 0x3f
 8006eee:	5299      	strh	r1, [r3, r2]
 8006ef0:	e003      	b.n	8006efa <UART_Start_Receive_IT+0xaa>
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	2260      	movs	r2, #96	; 0x60
 8006ef6:	2100      	movs	r1, #0
 8006ef8:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2290      	movs	r2, #144	; 0x90
 8006efe:	2100      	movs	r1, #0
 8006f00:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	228c      	movs	r2, #140	; 0x8c
 8006f06:	2122      	movs	r1, #34	; 0x22
 8006f08:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f0a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f0e:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006f10:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f14:	2301      	movs	r3, #1
 8006f16:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f1a:	f383 8810 	msr	PRIMASK, r3
}
 8006f1e:	46c0      	nop			; (mov r8, r8)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	689a      	ldr	r2, [r3, #8]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2101      	movs	r1, #1
 8006f2c:	430a      	orrs	r2, r1
 8006f2e:	609a      	str	r2, [r3, #8]
 8006f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f32:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f36:	f383 8810 	msr	PRIMASK, r3
}
 8006f3a:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006f40:	2380      	movs	r3, #128	; 0x80
 8006f42:	059b      	lsls	r3, r3, #22
 8006f44:	429a      	cmp	r2, r3
 8006f46:	d150      	bne.n	8006fea <UART_Start_Receive_IT+0x19a>
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2268      	movs	r2, #104	; 0x68
 8006f4c:	5a9b      	ldrh	r3, [r3, r2]
 8006f4e:	1dba      	adds	r2, r7, #6
 8006f50:	8812      	ldrh	r2, [r2, #0]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d349      	bcc.n	8006fea <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689a      	ldr	r2, [r3, #8]
 8006f5a:	2380      	movs	r3, #128	; 0x80
 8006f5c:	015b      	lsls	r3, r3, #5
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d107      	bne.n	8006f72 <UART_Start_Receive_IT+0x122>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a46      	ldr	r2, [pc, #280]	; (8007088 <UART_Start_Receive_IT+0x238>)
 8006f6e:	675a      	str	r2, [r3, #116]	; 0x74
 8006f70:	e002      	b.n	8006f78 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	4a45      	ldr	r2, [pc, #276]	; (800708c <UART_Start_Receive_IT+0x23c>)
 8006f76:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d019      	beq.n	8006fb4 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f80:	f3ef 8310 	mrs	r3, PRIMASK
 8006f84:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f88:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	2180      	movs	r1, #128	; 0x80
 8006fa2:	0049      	lsls	r1, r1, #1
 8006fa4:	430a      	orrs	r2, r1
 8006fa6:	601a      	str	r2, [r3, #0]
 8006fa8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006faa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fae:	f383 8810 	msr	PRIMASK, r3
}
 8006fb2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fb4:	f3ef 8310 	mrs	r3, PRIMASK
 8006fb8:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fbc:	657b      	str	r3, [r7, #84]	; 0x54
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fc4:	f383 8810 	msr	PRIMASK, r3
}
 8006fc8:	46c0      	nop			; (mov r8, r8)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	689a      	ldr	r2, [r3, #8]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	2180      	movs	r1, #128	; 0x80
 8006fd6:	0549      	lsls	r1, r1, #21
 8006fd8:	430a      	orrs	r2, r1
 8006fda:	609a      	str	r2, [r3, #8]
 8006fdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fde:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	f383 8810 	msr	PRIMASK, r3
}
 8006fe6:	46c0      	nop			; (mov r8, r8)
 8006fe8:	e047      	b.n	800707a <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	689a      	ldr	r2, [r3, #8]
 8006fee:	2380      	movs	r3, #128	; 0x80
 8006ff0:	015b      	lsls	r3, r3, #5
 8006ff2:	429a      	cmp	r2, r3
 8006ff4:	d107      	bne.n	8007006 <UART_Start_Receive_IT+0x1b6>
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d103      	bne.n	8007006 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	4a23      	ldr	r2, [pc, #140]	; (8007090 <UART_Start_Receive_IT+0x240>)
 8007002:	675a      	str	r2, [r3, #116]	; 0x74
 8007004:	e002      	b.n	800700c <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	4a22      	ldr	r2, [pc, #136]	; (8007094 <UART_Start_Receive_IT+0x244>)
 800700a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	691b      	ldr	r3, [r3, #16]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d019      	beq.n	8007048 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007014:	f3ef 8310 	mrs	r3, PRIMASK
 8007018:	61fb      	str	r3, [r7, #28]
  return(result);
 800701a:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800701c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800701e:	2301      	movs	r3, #1
 8007020:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	f383 8810 	msr	PRIMASK, r3
}
 8007028:	46c0      	nop			; (mov r8, r8)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2190      	movs	r1, #144	; 0x90
 8007036:	0049      	lsls	r1, r1, #1
 8007038:	430a      	orrs	r2, r1
 800703a:	601a      	str	r2, [r3, #0]
 800703c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800703e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007042:	f383 8810 	msr	PRIMASK, r3
}
 8007046:	e018      	b.n	800707a <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007048:	f3ef 8310 	mrs	r3, PRIMASK
 800704c:	613b      	str	r3, [r7, #16]
  return(result);
 800704e:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007050:	653b      	str	r3, [r7, #80]	; 0x50
 8007052:	2301      	movs	r3, #1
 8007054:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007056:	697b      	ldr	r3, [r7, #20]
 8007058:	f383 8810 	msr	PRIMASK, r3
}
 800705c:	46c0      	nop			; (mov r8, r8)
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681a      	ldr	r2, [r3, #0]
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2120      	movs	r1, #32
 800706a:	430a      	orrs	r2, r1
 800706c:	601a      	str	r2, [r3, #0]
 800706e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007070:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007072:	69bb      	ldr	r3, [r7, #24]
 8007074:	f383 8810 	msr	PRIMASK, r3
}
 8007078:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	0018      	movs	r0, r3
 800707e:	46bd      	mov	sp, r7
 8007080:	b018      	add	sp, #96	; 0x60
 8007082:	bd80      	pop	{r7, pc}
 8007084:	000001ff 	.word	0x000001ff
 8007088:	08007f09 	.word	0x08007f09
 800708c:	08007c1d 	.word	0x08007c1d
 8007090:	08007aa9 	.word	0x08007aa9
 8007094:	08007935 	.word	0x08007935

08007098 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b090      	sub	sp, #64	; 0x40
 800709c:	af00      	add	r7, sp, #0
 800709e:	60f8      	str	r0, [r7, #12]
 80070a0:	60b9      	str	r1, [r7, #8]
 80070a2:	1dbb      	adds	r3, r7, #6
 80070a4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	68ba      	ldr	r2, [r7, #8]
 80070aa:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	1dba      	adds	r2, r7, #6
 80070b0:	215c      	movs	r1, #92	; 0x5c
 80070b2:	8812      	ldrh	r2, [r2, #0]
 80070b4:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2290      	movs	r2, #144	; 0x90
 80070ba:	2100      	movs	r1, #0
 80070bc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	228c      	movs	r2, #140	; 0x8c
 80070c2:	2122      	movs	r1, #34	; 0x22
 80070c4:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	2280      	movs	r2, #128	; 0x80
 80070ca:	589b      	ldr	r3, [r3, r2]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d02d      	beq.n	800712c <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	2280      	movs	r2, #128	; 0x80
 80070d4:	589b      	ldr	r3, [r3, r2]
 80070d6:	4a40      	ldr	r2, [pc, #256]	; (80071d8 <UART_Start_Receive_DMA+0x140>)
 80070d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2280      	movs	r2, #128	; 0x80
 80070de:	589b      	ldr	r3, [r3, r2]
 80070e0:	4a3e      	ldr	r2, [pc, #248]	; (80071dc <UART_Start_Receive_DMA+0x144>)
 80070e2:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2280      	movs	r2, #128	; 0x80
 80070e8:	589b      	ldr	r3, [r3, r2]
 80070ea:	4a3d      	ldr	r2, [pc, #244]	; (80071e0 <UART_Start_Receive_DMA+0x148>)
 80070ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2280      	movs	r2, #128	; 0x80
 80070f2:	589b      	ldr	r3, [r3, r2]
 80070f4:	2200      	movs	r2, #0
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	2280      	movs	r2, #128	; 0x80
 80070fc:	5898      	ldr	r0, [r3, r2]
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3324      	adds	r3, #36	; 0x24
 8007104:	0019      	movs	r1, r3
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800710a:	001a      	movs	r2, r3
 800710c:	1dbb      	adds	r3, r7, #6
 800710e:	881b      	ldrh	r3, [r3, #0]
 8007110:	f7fc f9a8 	bl	8003464 <HAL_DMA_Start_IT>
 8007114:	1e03      	subs	r3, r0, #0
 8007116:	d009      	beq.n	800712c <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2290      	movs	r2, #144	; 0x90
 800711c:	2110      	movs	r1, #16
 800711e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	228c      	movs	r2, #140	; 0x8c
 8007124:	2120      	movs	r1, #32
 8007126:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e050      	b.n	80071ce <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	691b      	ldr	r3, [r3, #16]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d019      	beq.n	8007168 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007134:	f3ef 8310 	mrs	r3, PRIMASK
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800713a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800713e:	2301      	movs	r3, #1
 8007140:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007144:	f383 8810 	msr	PRIMASK, r3
}
 8007148:	46c0      	nop			; (mov r8, r8)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	681a      	ldr	r2, [r3, #0]
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	2180      	movs	r1, #128	; 0x80
 8007156:	0049      	lsls	r1, r1, #1
 8007158:	430a      	orrs	r2, r1
 800715a:	601a      	str	r2, [r3, #0]
 800715c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800715e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007160:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007162:	f383 8810 	msr	PRIMASK, r3
}
 8007166:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007168:	f3ef 8310 	mrs	r3, PRIMASK
 800716c:	613b      	str	r3, [r7, #16]
  return(result);
 800716e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007170:	63bb      	str	r3, [r7, #56]	; 0x38
 8007172:	2301      	movs	r3, #1
 8007174:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f383 8810 	msr	PRIMASK, r3
}
 800717c:	46c0      	nop			; (mov r8, r8)
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689a      	ldr	r2, [r3, #8]
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	2101      	movs	r1, #1
 800718a:	430a      	orrs	r2, r1
 800718c:	609a      	str	r2, [r3, #8]
 800718e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007190:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007192:	69bb      	ldr	r3, [r7, #24]
 8007194:	f383 8810 	msr	PRIMASK, r3
}
 8007198:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800719a:	f3ef 8310 	mrs	r3, PRIMASK
 800719e:	61fb      	str	r3, [r7, #28]
  return(result);
 80071a0:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80071a2:	637b      	str	r3, [r7, #52]	; 0x34
 80071a4:	2301      	movs	r3, #1
 80071a6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071a8:	6a3b      	ldr	r3, [r7, #32]
 80071aa:	f383 8810 	msr	PRIMASK, r3
}
 80071ae:	46c0      	nop			; (mov r8, r8)
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	689a      	ldr	r2, [r3, #8]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	2140      	movs	r1, #64	; 0x40
 80071bc:	430a      	orrs	r2, r1
 80071be:	609a      	str	r2, [r3, #8]
 80071c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c6:	f383 8810 	msr	PRIMASK, r3
}
 80071ca:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 80071cc:	2300      	movs	r3, #0
}
 80071ce:	0018      	movs	r0, r3
 80071d0:	46bd      	mov	sp, r7
 80071d2:	b010      	add	sp, #64	; 0x40
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	46c0      	nop			; (mov r8, r8)
 80071d8:	080073e9 	.word	0x080073e9
 80071dc:	08007519 	.word	0x08007519
 80071e0:	0800755b 	.word	0x0800755b

080071e4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b08a      	sub	sp, #40	; 0x28
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071ec:	f3ef 8310 	mrs	r3, PRIMASK
 80071f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80071f2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80071f4:	627b      	str	r3, [r7, #36]	; 0x24
 80071f6:	2301      	movs	r3, #1
 80071f8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	f383 8810 	msr	PRIMASK, r3
}
 8007200:	46c0      	nop			; (mov r8, r8)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	681a      	ldr	r2, [r3, #0]
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	21c0      	movs	r1, #192	; 0xc0
 800720e:	438a      	bics	r2, r1
 8007210:	601a      	str	r2, [r3, #0]
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007216:	693b      	ldr	r3, [r7, #16]
 8007218:	f383 8810 	msr	PRIMASK, r3
}
 800721c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800721e:	f3ef 8310 	mrs	r3, PRIMASK
 8007222:	617b      	str	r3, [r7, #20]
  return(result);
 8007224:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8007226:	623b      	str	r3, [r7, #32]
 8007228:	2301      	movs	r3, #1
 800722a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800722c:	69bb      	ldr	r3, [r7, #24]
 800722e:	f383 8810 	msr	PRIMASK, r3
}
 8007232:	46c0      	nop			; (mov r8, r8)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	4908      	ldr	r1, [pc, #32]	; (8007260 <UART_EndTxTransfer+0x7c>)
 8007240:	400a      	ands	r2, r1
 8007242:	609a      	str	r2, [r3, #8]
 8007244:	6a3b      	ldr	r3, [r7, #32]
 8007246:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f383 8810 	msr	PRIMASK, r3
}
 800724e:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2288      	movs	r2, #136	; 0x88
 8007254:	2120      	movs	r1, #32
 8007256:	5099      	str	r1, [r3, r2]
}
 8007258:	46c0      	nop			; (mov r8, r8)
 800725a:	46bd      	mov	sp, r7
 800725c:	b00a      	add	sp, #40	; 0x28
 800725e:	bd80      	pop	{r7, pc}
 8007260:	ff7fffff 	.word	0xff7fffff

08007264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b08e      	sub	sp, #56	; 0x38
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800726c:	f3ef 8310 	mrs	r3, PRIMASK
 8007270:	617b      	str	r3, [r7, #20]
  return(result);
 8007272:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007274:	637b      	str	r3, [r7, #52]	; 0x34
 8007276:	2301      	movs	r3, #1
 8007278:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	f383 8810 	msr	PRIMASK, r3
}
 8007280:	46c0      	nop			; (mov r8, r8)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4926      	ldr	r1, [pc, #152]	; (8007328 <UART_EndRxTransfer+0xc4>)
 800728e:	400a      	ands	r2, r1
 8007290:	601a      	str	r2, [r3, #0]
 8007292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007294:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007296:	69fb      	ldr	r3, [r7, #28]
 8007298:	f383 8810 	msr	PRIMASK, r3
}
 800729c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800729e:	f3ef 8310 	mrs	r3, PRIMASK
 80072a2:	623b      	str	r3, [r7, #32]
  return(result);
 80072a4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80072a6:	633b      	str	r3, [r7, #48]	; 0x30
 80072a8:	2301      	movs	r3, #1
 80072aa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ae:	f383 8810 	msr	PRIMASK, r3
}
 80072b2:	46c0      	nop			; (mov r8, r8)
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	491b      	ldr	r1, [pc, #108]	; (800732c <UART_EndRxTransfer+0xc8>)
 80072c0:	400a      	ands	r2, r1
 80072c2:	609a      	str	r2, [r3, #8]
 80072c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072c6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ca:	f383 8810 	msr	PRIMASK, r3
}
 80072ce:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d118      	bne.n	800730a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072d8:	f3ef 8310 	mrs	r3, PRIMASK
 80072dc:	60bb      	str	r3, [r7, #8]
  return(result);
 80072de:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80072e2:	2301      	movs	r3, #1
 80072e4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	f383 8810 	msr	PRIMASK, r3
}
 80072ec:	46c0      	nop			; (mov r8, r8)
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	681a      	ldr	r2, [r3, #0]
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2110      	movs	r1, #16
 80072fa:	438a      	bics	r2, r1
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	f383 8810 	msr	PRIMASK, r3
}
 8007308:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	228c      	movs	r2, #140	; 0x8c
 800730e:	2120      	movs	r1, #32
 8007310:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800731e:	46c0      	nop			; (mov r8, r8)
 8007320:	46bd      	mov	sp, r7
 8007322:	b00e      	add	sp, #56	; 0x38
 8007324:	bd80      	pop	{r7, pc}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	fffffedf 	.word	0xfffffedf
 800732c:	effffffe 	.word	0xeffffffe

08007330 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b08c      	sub	sp, #48	; 0x30
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800733c:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2220      	movs	r2, #32
 8007346:	4013      	ands	r3, r2
 8007348:	d135      	bne.n	80073b6 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800734a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800734c:	2256      	movs	r2, #86	; 0x56
 800734e:	2100      	movs	r1, #0
 8007350:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007352:	f3ef 8310 	mrs	r3, PRIMASK
 8007356:	60fb      	str	r3, [r7, #12]
  return(result);
 8007358:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800735a:	62bb      	str	r3, [r7, #40]	; 0x28
 800735c:	2301      	movs	r3, #1
 800735e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007360:	693b      	ldr	r3, [r7, #16]
 8007362:	f383 8810 	msr	PRIMASK, r3
}
 8007366:	46c0      	nop			; (mov r8, r8)
 8007368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	2180      	movs	r1, #128	; 0x80
 8007374:	438a      	bics	r2, r1
 8007376:	609a      	str	r2, [r3, #8]
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800737c:	697b      	ldr	r3, [r7, #20]
 800737e:	f383 8810 	msr	PRIMASK, r3
}
 8007382:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007384:	f3ef 8310 	mrs	r3, PRIMASK
 8007388:	61bb      	str	r3, [r7, #24]
  return(result);
 800738a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800738c:	627b      	str	r3, [r7, #36]	; 0x24
 800738e:	2301      	movs	r3, #1
 8007390:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007392:	69fb      	ldr	r3, [r7, #28]
 8007394:	f383 8810 	msr	PRIMASK, r3
}
 8007398:	46c0      	nop			; (mov r8, r8)
 800739a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2140      	movs	r1, #64	; 0x40
 80073a6:	430a      	orrs	r2, r1
 80073a8:	601a      	str	r2, [r3, #0]
 80073aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ac:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80073ae:	6a3b      	ldr	r3, [r7, #32]
 80073b0:	f383 8810 	msr	PRIMASK, r3
}
 80073b4:	e004      	b.n	80073c0 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 80073b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b8:	0018      	movs	r0, r3
 80073ba:	f7ff f9b8 	bl	800672e <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80073be:	46c0      	nop			; (mov r8, r8)
 80073c0:	46c0      	nop			; (mov r8, r8)
 80073c2:	46bd      	mov	sp, r7
 80073c4:	b00c      	add	sp, #48	; 0x30
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	0018      	movs	r0, r3
 80073da:	f7ff f9b0 	bl	800673e <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073de:	46c0      	nop			; (mov r8, r8)
 80073e0:	46bd      	mov	sp, r7
 80073e2:	b004      	add	sp, #16
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b094      	sub	sp, #80	; 0x50
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073f4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2220      	movs	r2, #32
 80073fe:	4013      	ands	r3, r2
 8007400:	d16f      	bne.n	80074e2 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8007402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007404:	225e      	movs	r2, #94	; 0x5e
 8007406:	2100      	movs	r1, #0
 8007408:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800740a:	f3ef 8310 	mrs	r3, PRIMASK
 800740e:	61bb      	str	r3, [r7, #24]
  return(result);
 8007410:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007412:	64bb      	str	r3, [r7, #72]	; 0x48
 8007414:	2301      	movs	r3, #1
 8007416:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	f383 8810 	msr	PRIMASK, r3
}
 800741e:	46c0      	nop			; (mov r8, r8)
 8007420:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	493a      	ldr	r1, [pc, #232]	; (8007514 <UART_DMAReceiveCplt+0x12c>)
 800742c:	400a      	ands	r2, r1
 800742e:	601a      	str	r2, [r3, #0]
 8007430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007432:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	f383 8810 	msr	PRIMASK, r3
}
 800743a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800743c:	f3ef 8310 	mrs	r3, PRIMASK
 8007440:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007444:	647b      	str	r3, [r7, #68]	; 0x44
 8007446:	2301      	movs	r3, #1
 8007448:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800744a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744c:	f383 8810 	msr	PRIMASK, r3
}
 8007450:	46c0      	nop			; (mov r8, r8)
 8007452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	689a      	ldr	r2, [r3, #8]
 8007458:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2101      	movs	r1, #1
 800745e:	438a      	bics	r2, r1
 8007460:	609a      	str	r2, [r3, #8]
 8007462:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007464:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007468:	f383 8810 	msr	PRIMASK, r3
}
 800746c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800746e:	f3ef 8310 	mrs	r3, PRIMASK
 8007472:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007474:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007476:	643b      	str	r3, [r7, #64]	; 0x40
 8007478:	2301      	movs	r3, #1
 800747a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800747c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800747e:	f383 8810 	msr	PRIMASK, r3
}
 8007482:	46c0      	nop			; (mov r8, r8)
 8007484:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	689a      	ldr	r2, [r3, #8]
 800748a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	2140      	movs	r1, #64	; 0x40
 8007490:	438a      	bics	r2, r1
 8007492:	609a      	str	r2, [r3, #8]
 8007494:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007496:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	f383 8810 	msr	PRIMASK, r3
}
 800749e:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074a2:	228c      	movs	r2, #140	; 0x8c
 80074a4:	2120      	movs	r1, #32
 80074a6:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ac:	2b01      	cmp	r3, #1
 80074ae:	d118      	bne.n	80074e2 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80074b0:	f3ef 8310 	mrs	r3, PRIMASK
 80074b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80074b6:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ba:	2301      	movs	r3, #1
 80074bc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f383 8810 	msr	PRIMASK, r3
}
 80074c4:	46c0      	nop			; (mov r8, r8)
 80074c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2110      	movs	r1, #16
 80074d2:	438a      	bics	r2, r1
 80074d4:	601a      	str	r2, [r3, #0]
 80074d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074d8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f383 8810 	msr	PRIMASK, r3
}
 80074e0:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80074e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074e4:	2200      	movs	r2, #0
 80074e6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80074ec:	2b01      	cmp	r3, #1
 80074ee:	d108      	bne.n	8007502 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80074f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f2:	225c      	movs	r2, #92	; 0x5c
 80074f4:	5a9a      	ldrh	r2, [r3, r2]
 80074f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80074f8:	0011      	movs	r1, r2
 80074fa:	0018      	movs	r0, r3
 80074fc:	f7ff f92f 	bl	800675e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007500:	e003      	b.n	800750a <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8007502:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007504:	0018      	movs	r0, r3
 8007506:	f7fa f8a1 	bl	800164c <HAL_UART_RxCpltCallback>
}
 800750a:	46c0      	nop			; (mov r8, r8)
 800750c:	46bd      	mov	sp, r7
 800750e:	b014      	add	sp, #80	; 0x50
 8007510:	bd80      	pop	{r7, pc}
 8007512:	46c0      	nop			; (mov r8, r8)
 8007514:	fffffeff 	.word	0xfffffeff

08007518 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b084      	sub	sp, #16
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007524:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007530:	2b01      	cmp	r3, #1
 8007532:	d10a      	bne.n	800754a <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	225c      	movs	r2, #92	; 0x5c
 8007538:	5a9b      	ldrh	r3, [r3, r2]
 800753a:	085b      	lsrs	r3, r3, #1
 800753c:	b29a      	uxth	r2, r3
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	0011      	movs	r1, r2
 8007542:	0018      	movs	r0, r3
 8007544:	f7ff f90b 	bl	800675e <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007548:	e003      	b.n	8007552 <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	0018      	movs	r0, r3
 800754e:	f7fa f85f 	bl	8001610 <HAL_UART_RxHalfCpltCallback>
}
 8007552:	46c0      	nop			; (mov r8, r8)
 8007554:	46bd      	mov	sp, r7
 8007556:	b004      	add	sp, #16
 8007558:	bd80      	pop	{r7, pc}

0800755a <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800755a:	b580      	push	{r7, lr}
 800755c:	b086      	sub	sp, #24
 800755e:	af00      	add	r7, sp, #0
 8007560:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007566:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	2288      	movs	r2, #136	; 0x88
 800756c:	589b      	ldr	r3, [r3, r2]
 800756e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	228c      	movs	r2, #140	; 0x8c
 8007574:	589b      	ldr	r3, [r3, r2]
 8007576:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007578:	697b      	ldr	r3, [r7, #20]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	689b      	ldr	r3, [r3, #8]
 800757e:	2280      	movs	r2, #128	; 0x80
 8007580:	4013      	ands	r3, r2
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d10a      	bne.n	800759c <UART_DMAError+0x42>
 8007586:	693b      	ldr	r3, [r7, #16]
 8007588:	2b21      	cmp	r3, #33	; 0x21
 800758a:	d107      	bne.n	800759c <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	2256      	movs	r2, #86	; 0x56
 8007590:	2100      	movs	r1, #0
 8007592:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8007594:	697b      	ldr	r3, [r7, #20]
 8007596:	0018      	movs	r0, r3
 8007598:	f7ff fe24 	bl	80071e4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800759c:	697b      	ldr	r3, [r7, #20]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689b      	ldr	r3, [r3, #8]
 80075a2:	2240      	movs	r2, #64	; 0x40
 80075a4:	4013      	ands	r3, r2
 80075a6:	2b40      	cmp	r3, #64	; 0x40
 80075a8:	d10a      	bne.n	80075c0 <UART_DMAError+0x66>
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b22      	cmp	r3, #34	; 0x22
 80075ae:	d107      	bne.n	80075c0 <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80075b0:	697b      	ldr	r3, [r7, #20]
 80075b2:	225e      	movs	r2, #94	; 0x5e
 80075b4:	2100      	movs	r1, #0
 80075b6:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	0018      	movs	r0, r3
 80075bc:	f7ff fe52 	bl	8007264 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	2290      	movs	r2, #144	; 0x90
 80075c4:	589b      	ldr	r3, [r3, r2]
 80075c6:	2210      	movs	r2, #16
 80075c8:	431a      	orrs	r2, r3
 80075ca:	697b      	ldr	r3, [r7, #20]
 80075cc:	2190      	movs	r1, #144	; 0x90
 80075ce:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	0018      	movs	r0, r3
 80075d4:	f7ff f8bb 	bl	800674e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d8:	46c0      	nop			; (mov r8, r8)
 80075da:	46bd      	mov	sp, r7
 80075dc:	b006      	add	sp, #24
 80075de:	bd80      	pop	{r7, pc}

080075e0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b08a      	sub	sp, #40	; 0x28
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2288      	movs	r2, #136	; 0x88
 80075ec:	589b      	ldr	r3, [r3, r2]
 80075ee:	2b21      	cmp	r3, #33	; 0x21
 80075f0:	d14c      	bne.n	800768c <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2256      	movs	r2, #86	; 0x56
 80075f6:	5a9b      	ldrh	r3, [r3, r2]
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d132      	bne.n	8007664 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007602:	60bb      	str	r3, [r7, #8]
  return(result);
 8007604:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8007606:	627b      	str	r3, [r7, #36]	; 0x24
 8007608:	2301      	movs	r3, #1
 800760a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	f383 8810 	msr	PRIMASK, r3
}
 8007612:	46c0      	nop			; (mov r8, r8)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2180      	movs	r1, #128	; 0x80
 8007620:	438a      	bics	r2, r1
 8007622:	601a      	str	r2, [r3, #0]
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	f383 8810 	msr	PRIMASK, r3
}
 800762e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007630:	f3ef 8310 	mrs	r3, PRIMASK
 8007634:	617b      	str	r3, [r7, #20]
  return(result);
 8007636:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007638:	623b      	str	r3, [r7, #32]
 800763a:	2301      	movs	r3, #1
 800763c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800763e:	69bb      	ldr	r3, [r7, #24]
 8007640:	f383 8810 	msr	PRIMASK, r3
}
 8007644:	46c0      	nop			; (mov r8, r8)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2140      	movs	r1, #64	; 0x40
 8007652:	430a      	orrs	r2, r1
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800765a:	69fb      	ldr	r3, [r7, #28]
 800765c:	f383 8810 	msr	PRIMASK, r3
}
 8007660:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8007662:	e013      	b.n	800768c <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007668:	781a      	ldrb	r2, [r3, #0]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007674:	1c5a      	adds	r2, r3, #1
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2256      	movs	r2, #86	; 0x56
 800767e:	5a9b      	ldrh	r3, [r3, r2]
 8007680:	b29b      	uxth	r3, r3
 8007682:	3b01      	subs	r3, #1
 8007684:	b299      	uxth	r1, r3
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2256      	movs	r2, #86	; 0x56
 800768a:	5299      	strh	r1, [r3, r2]
}
 800768c:	46c0      	nop			; (mov r8, r8)
 800768e:	46bd      	mov	sp, r7
 8007690:	b00a      	add	sp, #40	; 0x28
 8007692:	bd80      	pop	{r7, pc}

08007694 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b08c      	sub	sp, #48	; 0x30
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2288      	movs	r2, #136	; 0x88
 80076a0:	589b      	ldr	r3, [r3, r2]
 80076a2:	2b21      	cmp	r3, #33	; 0x21
 80076a4:	d151      	bne.n	800774a <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2256      	movs	r2, #86	; 0x56
 80076aa:	5a9b      	ldrh	r3, [r3, r2]
 80076ac:	b29b      	uxth	r3, r3
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d132      	bne.n	8007718 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076b2:	f3ef 8310 	mrs	r3, PRIMASK
 80076b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80076b8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80076ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80076bc:	2301      	movs	r3, #1
 80076be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	f383 8810 	msr	PRIMASK, r3
}
 80076c6:	46c0      	nop			; (mov r8, r8)
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	681a      	ldr	r2, [r3, #0]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	2180      	movs	r1, #128	; 0x80
 80076d4:	438a      	bics	r2, r1
 80076d6:	601a      	str	r2, [r3, #0]
 80076d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	f383 8810 	msr	PRIMASK, r3
}
 80076e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076e4:	f3ef 8310 	mrs	r3, PRIMASK
 80076e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80076ea:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80076ec:	627b      	str	r3, [r7, #36]	; 0x24
 80076ee:	2301      	movs	r3, #1
 80076f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	f383 8810 	msr	PRIMASK, r3
}
 80076f8:	46c0      	nop			; (mov r8, r8)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	681a      	ldr	r2, [r3, #0]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2140      	movs	r1, #64	; 0x40
 8007706:	430a      	orrs	r2, r1
 8007708:	601a      	str	r2, [r3, #0]
 800770a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	f383 8810 	msr	PRIMASK, r3
}
 8007714:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8007716:	e018      	b.n	800774a <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800771c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800771e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007720:	881b      	ldrh	r3, [r3, #0]
 8007722:	001a      	movs	r2, r3
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	05d2      	lsls	r2, r2, #23
 800772a:	0dd2      	lsrs	r2, r2, #23
 800772c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007732:	1c9a      	adds	r2, r3, #2
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2256      	movs	r2, #86	; 0x56
 800773c:	5a9b      	ldrh	r3, [r3, r2]
 800773e:	b29b      	uxth	r3, r3
 8007740:	3b01      	subs	r3, #1
 8007742:	b299      	uxth	r1, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2256      	movs	r2, #86	; 0x56
 8007748:	5299      	strh	r1, [r3, r2]
}
 800774a:	46c0      	nop			; (mov r8, r8)
 800774c:	46bd      	mov	sp, r7
 800774e:	b00c      	add	sp, #48	; 0x30
 8007750:	bd80      	pop	{r7, pc}
	...

08007754 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007754:	b580      	push	{r7, lr}
 8007756:	b08c      	sub	sp, #48	; 0x30
 8007758:	af00      	add	r7, sp, #0
 800775a:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	2288      	movs	r2, #136	; 0x88
 8007760:	589b      	ldr	r3, [r3, r2]
 8007762:	2b21      	cmp	r3, #33	; 0x21
 8007764:	d165      	bne.n	8007832 <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007766:	232e      	movs	r3, #46	; 0x2e
 8007768:	18fb      	adds	r3, r7, r3
 800776a:	687a      	ldr	r2, [r7, #4]
 800776c:	216a      	movs	r1, #106	; 0x6a
 800776e:	5a52      	ldrh	r2, [r2, r1]
 8007770:	801a      	strh	r2, [r3, #0]
 8007772:	e059      	b.n	8007828 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2256      	movs	r2, #86	; 0x56
 8007778:	5a9b      	ldrh	r3, [r3, r2]
 800777a:	b29b      	uxth	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d133      	bne.n	80077e8 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007780:	f3ef 8310 	mrs	r3, PRIMASK
 8007784:	60fb      	str	r3, [r7, #12]
  return(result);
 8007786:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007788:	62bb      	str	r3, [r7, #40]	; 0x28
 800778a:	2301      	movs	r3, #1
 800778c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f383 8810 	msr	PRIMASK, r3
}
 8007794:	46c0      	nop			; (mov r8, r8)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	689a      	ldr	r2, [r3, #8]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4926      	ldr	r1, [pc, #152]	; (800783c <UART_TxISR_8BIT_FIFOEN+0xe8>)
 80077a2:	400a      	ands	r2, r1
 80077a4:	609a      	str	r2, [r3, #8]
 80077a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f383 8810 	msr	PRIMASK, r3
}
 80077b0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80077b2:	f3ef 8310 	mrs	r3, PRIMASK
 80077b6:	61bb      	str	r3, [r7, #24]
  return(result);
 80077b8:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80077ba:	627b      	str	r3, [r7, #36]	; 0x24
 80077bc:	2301      	movs	r3, #1
 80077be:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077c0:	69fb      	ldr	r3, [r7, #28]
 80077c2:	f383 8810 	msr	PRIMASK, r3
}
 80077c6:	46c0      	nop			; (mov r8, r8)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	681a      	ldr	r2, [r3, #0]
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2140      	movs	r1, #64	; 0x40
 80077d4:	430a      	orrs	r2, r1
 80077d6:	601a      	str	r2, [r3, #0]
 80077d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	f383 8810 	msr	PRIMASK, r3
}
 80077e2:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80077e4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80077e6:	e024      	b.n	8007832 <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	2280      	movs	r2, #128	; 0x80
 80077f0:	4013      	ands	r3, r2
 80077f2:	d013      	beq.n	800781c <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80077f8:	781a      	ldrb	r2, [r3, #0]
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007804:	1c5a      	adds	r2, r3, #1
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	2256      	movs	r2, #86	; 0x56
 800780e:	5a9b      	ldrh	r3, [r3, r2]
 8007810:	b29b      	uxth	r3, r3
 8007812:	3b01      	subs	r3, #1
 8007814:	b299      	uxth	r1, r3
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	2256      	movs	r2, #86	; 0x56
 800781a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800781c:	212e      	movs	r1, #46	; 0x2e
 800781e:	187b      	adds	r3, r7, r1
 8007820:	881a      	ldrh	r2, [r3, #0]
 8007822:	187b      	adds	r3, r7, r1
 8007824:	3a01      	subs	r2, #1
 8007826:	801a      	strh	r2, [r3, #0]
 8007828:	232e      	movs	r3, #46	; 0x2e
 800782a:	18fb      	adds	r3, r7, r3
 800782c:	881b      	ldrh	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1a0      	bne.n	8007774 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8007832:	46c0      	nop			; (mov r8, r8)
 8007834:	46bd      	mov	sp, r7
 8007836:	b00c      	add	sp, #48	; 0x30
 8007838:	bd80      	pop	{r7, pc}
 800783a:	46c0      	nop			; (mov r8, r8)
 800783c:	ff7fffff 	.word	0xff7fffff

08007840 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b08c      	sub	sp, #48	; 0x30
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2288      	movs	r2, #136	; 0x88
 800784c:	589b      	ldr	r3, [r3, r2]
 800784e:	2b21      	cmp	r3, #33	; 0x21
 8007850:	d16a      	bne.n	8007928 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007852:	232e      	movs	r3, #46	; 0x2e
 8007854:	18fb      	adds	r3, r7, r3
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	216a      	movs	r1, #106	; 0x6a
 800785a:	5a52      	ldrh	r2, [r2, r1]
 800785c:	801a      	strh	r2, [r3, #0]
 800785e:	e05e      	b.n	800791e <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2256      	movs	r2, #86	; 0x56
 8007864:	5a9b      	ldrh	r3, [r3, r2]
 8007866:	b29b      	uxth	r3, r3
 8007868:	2b00      	cmp	r3, #0
 800786a:	d133      	bne.n	80078d4 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800786c:	f3ef 8310 	mrs	r3, PRIMASK
 8007870:	60bb      	str	r3, [r7, #8]
  return(result);
 8007872:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007874:	627b      	str	r3, [r7, #36]	; 0x24
 8007876:	2301      	movs	r3, #1
 8007878:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	f383 8810 	msr	PRIMASK, r3
}
 8007880:	46c0      	nop			; (mov r8, r8)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689a      	ldr	r2, [r3, #8]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4928      	ldr	r1, [pc, #160]	; (8007930 <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800788e:	400a      	ands	r2, r1
 8007890:	609a      	str	r2, [r3, #8]
 8007892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007894:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	f383 8810 	msr	PRIMASK, r3
}
 800789c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800789e:	f3ef 8310 	mrs	r3, PRIMASK
 80078a2:	617b      	str	r3, [r7, #20]
  return(result);
 80078a4:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80078a6:	623b      	str	r3, [r7, #32]
 80078a8:	2301      	movs	r3, #1
 80078aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ac:	69bb      	ldr	r3, [r7, #24]
 80078ae:	f383 8810 	msr	PRIMASK, r3
}
 80078b2:	46c0      	nop			; (mov r8, r8)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	2140      	movs	r1, #64	; 0x40
 80078c0:	430a      	orrs	r2, r1
 80078c2:	601a      	str	r2, [r3, #0]
 80078c4:	6a3b      	ldr	r3, [r7, #32]
 80078c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078c8:	69fb      	ldr	r3, [r7, #28]
 80078ca:	f383 8810 	msr	PRIMASK, r3
}
 80078ce:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 80078d0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80078d2:	e029      	b.n	8007928 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	69db      	ldr	r3, [r3, #28]
 80078da:	2280      	movs	r2, #128	; 0x80
 80078dc:	4013      	ands	r3, r2
 80078de:	d018      	beq.n	8007912 <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078e4:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80078e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078e8:	881b      	ldrh	r3, [r3, #0]
 80078ea:	001a      	movs	r2, r3
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	05d2      	lsls	r2, r2, #23
 80078f2:	0dd2      	lsrs	r2, r2, #23
 80078f4:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80078fa:	1c9a      	adds	r2, r3, #2
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2256      	movs	r2, #86	; 0x56
 8007904:	5a9b      	ldrh	r3, [r3, r2]
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b299      	uxth	r1, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2256      	movs	r2, #86	; 0x56
 8007910:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8007912:	212e      	movs	r1, #46	; 0x2e
 8007914:	187b      	adds	r3, r7, r1
 8007916:	881a      	ldrh	r2, [r3, #0]
 8007918:	187b      	adds	r3, r7, r1
 800791a:	3a01      	subs	r2, #1
 800791c:	801a      	strh	r2, [r3, #0]
 800791e:	232e      	movs	r3, #46	; 0x2e
 8007920:	18fb      	adds	r3, r7, r3
 8007922:	881b      	ldrh	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d19b      	bne.n	8007860 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 8007928:	46c0      	nop			; (mov r8, r8)
 800792a:	46bd      	mov	sp, r7
 800792c:	b00c      	add	sp, #48	; 0x30
 800792e:	bd80      	pop	{r7, pc}
 8007930:	ff7fffff 	.word	0xff7fffff

08007934 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b090      	sub	sp, #64	; 0x40
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800793c:	203e      	movs	r0, #62	; 0x3e
 800793e:	183b      	adds	r3, r7, r0
 8007940:	687a      	ldr	r2, [r7, #4]
 8007942:	2160      	movs	r1, #96	; 0x60
 8007944:	5a52      	ldrh	r2, [r2, r1]
 8007946:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	228c      	movs	r2, #140	; 0x8c
 800794c:	589b      	ldr	r3, [r3, r2]
 800794e:	2b22      	cmp	r3, #34	; 0x22
 8007950:	d000      	beq.n	8007954 <UART_RxISR_8BIT+0x20>
 8007952:	e09a      	b.n	8007a8a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800795a:	213c      	movs	r1, #60	; 0x3c
 800795c:	187b      	adds	r3, r7, r1
 800795e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007960:	187b      	adds	r3, r7, r1
 8007962:	881b      	ldrh	r3, [r3, #0]
 8007964:	b2da      	uxtb	r2, r3
 8007966:	183b      	adds	r3, r7, r0
 8007968:	881b      	ldrh	r3, [r3, #0]
 800796a:	b2d9      	uxtb	r1, r3
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007970:	400a      	ands	r2, r1
 8007972:	b2d2      	uxtb	r2, r2
 8007974:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800797a:	1c5a      	adds	r2, r3, #1
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	225e      	movs	r2, #94	; 0x5e
 8007984:	5a9b      	ldrh	r3, [r3, r2]
 8007986:	b29b      	uxth	r3, r3
 8007988:	3b01      	subs	r3, #1
 800798a:	b299      	uxth	r1, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	225e      	movs	r2, #94	; 0x5e
 8007990:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	225e      	movs	r2, #94	; 0x5e
 8007996:	5a9b      	ldrh	r3, [r3, r2]
 8007998:	b29b      	uxth	r3, r3
 800799a:	2b00      	cmp	r3, #0
 800799c:	d000      	beq.n	80079a0 <UART_RxISR_8BIT+0x6c>
 800799e:	e07c      	b.n	8007a9a <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079a0:	f3ef 8310 	mrs	r3, PRIMASK
 80079a4:	61bb      	str	r3, [r7, #24]
  return(result);
 80079a6:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80079a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80079aa:	2301      	movs	r3, #1
 80079ac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ae:	69fb      	ldr	r3, [r7, #28]
 80079b0:	f383 8810 	msr	PRIMASK, r3
}
 80079b4:	46c0      	nop			; (mov r8, r8)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681a      	ldr	r2, [r3, #0]
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4938      	ldr	r1, [pc, #224]	; (8007aa4 <UART_RxISR_8BIT+0x170>)
 80079c2:	400a      	ands	r2, r1
 80079c4:	601a      	str	r2, [r3, #0]
 80079c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079c8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	f383 8810 	msr	PRIMASK, r3
}
 80079d0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079d2:	f3ef 8310 	mrs	r3, PRIMASK
 80079d6:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80079d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079da:	637b      	str	r3, [r7, #52]	; 0x34
 80079dc:	2301      	movs	r3, #1
 80079de:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e2:	f383 8810 	msr	PRIMASK, r3
}
 80079e6:	46c0      	nop			; (mov r8, r8)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	689a      	ldr	r2, [r3, #8]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2101      	movs	r1, #1
 80079f4:	438a      	bics	r2, r1
 80079f6:	609a      	str	r2, [r3, #8]
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	f383 8810 	msr	PRIMASK, r3
}
 8007a02:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	228c      	movs	r2, #140	; 0x8c
 8007a08:	2120      	movs	r1, #32
 8007a0a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d12f      	bne.n	8007a80 <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007a26:	f3ef 8310 	mrs	r3, PRIMASK
 8007a2a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a2c:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a2e:	633b      	str	r3, [r7, #48]	; 0x30
 8007a30:	2301      	movs	r3, #1
 8007a32:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	f383 8810 	msr	PRIMASK, r3
}
 8007a3a:	46c0      	nop			; (mov r8, r8)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681a      	ldr	r2, [r3, #0]
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	2110      	movs	r1, #16
 8007a48:	438a      	bics	r2, r1
 8007a4a:	601a      	str	r2, [r3, #0]
 8007a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a4e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a50:	697b      	ldr	r3, [r7, #20]
 8007a52:	f383 8810 	msr	PRIMASK, r3
}
 8007a56:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69db      	ldr	r3, [r3, #28]
 8007a5e:	2210      	movs	r2, #16
 8007a60:	4013      	ands	r3, r2
 8007a62:	2b10      	cmp	r3, #16
 8007a64:	d103      	bne.n	8007a6e <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	2210      	movs	r2, #16
 8007a6c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	225c      	movs	r2, #92	; 0x5c
 8007a72:	5a9a      	ldrh	r2, [r3, r2]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	0011      	movs	r1, r2
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f7fe fe70 	bl	800675e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a7e:	e00c      	b.n	8007a9a <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	0018      	movs	r0, r3
 8007a84:	f7f9 fde2 	bl	800164c <HAL_UART_RxCpltCallback>
}
 8007a88:	e007      	b.n	8007a9a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	699a      	ldr	r2, [r3, #24]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	2108      	movs	r1, #8
 8007a96:	430a      	orrs	r2, r1
 8007a98:	619a      	str	r2, [r3, #24]
}
 8007a9a:	46c0      	nop			; (mov r8, r8)
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b010      	add	sp, #64	; 0x40
 8007aa0:	bd80      	pop	{r7, pc}
 8007aa2:	46c0      	nop			; (mov r8, r8)
 8007aa4:	fffffedf 	.word	0xfffffedf

08007aa8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b090      	sub	sp, #64	; 0x40
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007ab0:	203e      	movs	r0, #62	; 0x3e
 8007ab2:	183b      	adds	r3, r7, r0
 8007ab4:	687a      	ldr	r2, [r7, #4]
 8007ab6:	2160      	movs	r1, #96	; 0x60
 8007ab8:	5a52      	ldrh	r2, [r2, r1]
 8007aba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	228c      	movs	r2, #140	; 0x8c
 8007ac0:	589b      	ldr	r3, [r3, r2]
 8007ac2:	2b22      	cmp	r3, #34	; 0x22
 8007ac4:	d000      	beq.n	8007ac8 <UART_RxISR_16BIT+0x20>
 8007ac6:	e09a      	b.n	8007bfe <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ace:	213c      	movs	r1, #60	; 0x3c
 8007ad0:	187b      	adds	r3, r7, r1
 8007ad2:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ad8:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 8007ada:	187b      	adds	r3, r7, r1
 8007adc:	183a      	adds	r2, r7, r0
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	8812      	ldrh	r2, [r2, #0]
 8007ae2:	4013      	ands	r3, r2
 8007ae4:	b29a      	uxth	r2, r3
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ae8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007aee:	1c9a      	adds	r2, r3, #2
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	225e      	movs	r2, #94	; 0x5e
 8007af8:	5a9b      	ldrh	r3, [r3, r2]
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	3b01      	subs	r3, #1
 8007afe:	b299      	uxth	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	225e      	movs	r2, #94	; 0x5e
 8007b04:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	225e      	movs	r2, #94	; 0x5e
 8007b0a:	5a9b      	ldrh	r3, [r3, r2]
 8007b0c:	b29b      	uxth	r3, r3
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d000      	beq.n	8007b14 <UART_RxISR_16BIT+0x6c>
 8007b12:	e07c      	b.n	8007c0e <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b14:	f3ef 8310 	mrs	r3, PRIMASK
 8007b18:	617b      	str	r3, [r7, #20]
  return(result);
 8007b1a:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007b1e:	2301      	movs	r3, #1
 8007b20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	f383 8810 	msr	PRIMASK, r3
}
 8007b28:	46c0      	nop			; (mov r8, r8)
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	4938      	ldr	r1, [pc, #224]	; (8007c18 <UART_RxISR_16BIT+0x170>)
 8007b36:	400a      	ands	r2, r1
 8007b38:	601a      	str	r2, [r3, #0]
 8007b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b3e:	69fb      	ldr	r3, [r7, #28]
 8007b40:	f383 8810 	msr	PRIMASK, r3
}
 8007b44:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b46:	f3ef 8310 	mrs	r3, PRIMASK
 8007b4a:	623b      	str	r3, [r7, #32]
  return(result);
 8007b4c:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b4e:	633b      	str	r3, [r7, #48]	; 0x30
 8007b50:	2301      	movs	r3, #1
 8007b52:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b56:	f383 8810 	msr	PRIMASK, r3
}
 8007b5a:	46c0      	nop			; (mov r8, r8)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	689a      	ldr	r2, [r3, #8]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2101      	movs	r1, #1
 8007b68:	438a      	bics	r2, r1
 8007b6a:	609a      	str	r2, [r3, #8]
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b72:	f383 8810 	msr	PRIMASK, r3
}
 8007b76:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	228c      	movs	r2, #140	; 0x8c
 8007b7c:	2120      	movs	r1, #32
 8007b7e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007b90:	2b01      	cmp	r3, #1
 8007b92:	d12f      	bne.n	8007bf4 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2200      	movs	r2, #0
 8007b98:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b9a:	f3ef 8310 	mrs	r3, PRIMASK
 8007b9e:	60bb      	str	r3, [r7, #8]
  return(result);
 8007ba0:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f383 8810 	msr	PRIMASK, r3
}
 8007bae:	46c0      	nop			; (mov r8, r8)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2110      	movs	r1, #16
 8007bbc:	438a      	bics	r2, r1
 8007bbe:	601a      	str	r2, [r3, #0]
 8007bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bc2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	f383 8810 	msr	PRIMASK, r3
}
 8007bca:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	2210      	movs	r2, #16
 8007bd4:	4013      	ands	r3, r2
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d103      	bne.n	8007be2 <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	2210      	movs	r2, #16
 8007be0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	225c      	movs	r2, #92	; 0x5c
 8007be6:	5a9a      	ldrh	r2, [r3, r2]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	0011      	movs	r1, r2
 8007bec:	0018      	movs	r0, r3
 8007bee:	f7fe fdb6 	bl	800675e <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bf2:	e00c      	b.n	8007c0e <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	0018      	movs	r0, r3
 8007bf8:	f7f9 fd28 	bl	800164c <HAL_UART_RxCpltCallback>
}
 8007bfc:	e007      	b.n	8007c0e <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	699a      	ldr	r2, [r3, #24]
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	2108      	movs	r1, #8
 8007c0a:	430a      	orrs	r2, r1
 8007c0c:	619a      	str	r2, [r3, #24]
}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	46bd      	mov	sp, r7
 8007c12:	b010      	add	sp, #64	; 0x40
 8007c14:	bd80      	pop	{r7, pc}
 8007c16:	46c0      	nop			; (mov r8, r8)
 8007c18:	fffffedf 	.word	0xfffffedf

08007c1c <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b09c      	sub	sp, #112	; 0x70
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007c24:	236a      	movs	r3, #106	; 0x6a
 8007c26:	18fb      	adds	r3, r7, r3
 8007c28:	687a      	ldr	r2, [r7, #4]
 8007c2a:	2160      	movs	r1, #96	; 0x60
 8007c2c:	5a52      	ldrh	r2, [r2, r1]
 8007c2e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	69db      	ldr	r3, [r3, #28]
 8007c36:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	228c      	movs	r2, #140	; 0x8c
 8007c4c:	589b      	ldr	r3, [r3, r2]
 8007c4e:	2b22      	cmp	r3, #34	; 0x22
 8007c50:	d000      	beq.n	8007c54 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007c52:	e144      	b.n	8007ede <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007c54:	235e      	movs	r3, #94	; 0x5e
 8007c56:	18fb      	adds	r3, r7, r3
 8007c58:	687a      	ldr	r2, [r7, #4]
 8007c5a:	2168      	movs	r1, #104	; 0x68
 8007c5c:	5a52      	ldrh	r2, [r2, r1]
 8007c5e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007c60:	e0eb      	b.n	8007e3a <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c68:	215c      	movs	r1, #92	; 0x5c
 8007c6a:	187b      	adds	r3, r7, r1
 8007c6c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007c6e:	187b      	adds	r3, r7, r1
 8007c70:	881b      	ldrh	r3, [r3, #0]
 8007c72:	b2da      	uxtb	r2, r3
 8007c74:	236a      	movs	r3, #106	; 0x6a
 8007c76:	18fb      	adds	r3, r7, r3
 8007c78:	881b      	ldrh	r3, [r3, #0]
 8007c7a:	b2d9      	uxtb	r1, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c80:	400a      	ands	r2, r1
 8007c82:	b2d2      	uxtb	r2, r2
 8007c84:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c8a:	1c5a      	adds	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	225e      	movs	r2, #94	; 0x5e
 8007c94:	5a9b      	ldrh	r3, [r3, r2]
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	3b01      	subs	r3, #1
 8007c9a:	b299      	uxth	r1, r3
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	225e      	movs	r2, #94	; 0x5e
 8007ca0:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69db      	ldr	r3, [r3, #28]
 8007ca8:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007caa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cac:	2207      	movs	r2, #7
 8007cae:	4013      	ands	r3, r2
 8007cb0:	d049      	beq.n	8007d46 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007cb2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	4013      	ands	r3, r2
 8007cb8:	d010      	beq.n	8007cdc <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007cba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007cbc:	2380      	movs	r3, #128	; 0x80
 8007cbe:	005b      	lsls	r3, r3, #1
 8007cc0:	4013      	ands	r3, r2
 8007cc2:	d00b      	beq.n	8007cdc <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2290      	movs	r2, #144	; 0x90
 8007cd0:	589b      	ldr	r3, [r3, r2]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	431a      	orrs	r2, r3
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2190      	movs	r1, #144	; 0x90
 8007cda:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007cde:	2202      	movs	r2, #2
 8007ce0:	4013      	ands	r3, r2
 8007ce2:	d00f      	beq.n	8007d04 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007ce4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ce6:	2201      	movs	r2, #1
 8007ce8:	4013      	ands	r3, r2
 8007cea:	d00b      	beq.n	8007d04 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2202      	movs	r2, #2
 8007cf2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2290      	movs	r2, #144	; 0x90
 8007cf8:	589b      	ldr	r3, [r3, r2]
 8007cfa:	2204      	movs	r2, #4
 8007cfc:	431a      	orrs	r2, r3
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2190      	movs	r1, #144	; 0x90
 8007d02:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007d04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d06:	2204      	movs	r2, #4
 8007d08:	4013      	ands	r3, r2
 8007d0a:	d00f      	beq.n	8007d2c <UART_RxISR_8BIT_FIFOEN+0x110>
 8007d0c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d0e:	2201      	movs	r2, #1
 8007d10:	4013      	ands	r3, r2
 8007d12:	d00b      	beq.n	8007d2c <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	2204      	movs	r2, #4
 8007d1a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2290      	movs	r2, #144	; 0x90
 8007d20:	589b      	ldr	r3, [r3, r2]
 8007d22:	2202      	movs	r2, #2
 8007d24:	431a      	orrs	r2, r3
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2190      	movs	r1, #144	; 0x90
 8007d2a:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2290      	movs	r2, #144	; 0x90
 8007d30:	589b      	ldr	r3, [r3, r2]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d007      	beq.n	8007d46 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f7fe fd08 	bl	800674e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2290      	movs	r2, #144	; 0x90
 8007d42:	2100      	movs	r1, #0
 8007d44:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	225e      	movs	r2, #94	; 0x5e
 8007d4a:	5a9b      	ldrh	r3, [r3, r2]
 8007d4c:	b29b      	uxth	r3, r3
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d173      	bne.n	8007e3a <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d52:	f3ef 8310 	mrs	r3, PRIMASK
 8007d56:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d5a:	65bb      	str	r3, [r7, #88]	; 0x58
 8007d5c:	2301      	movs	r3, #1
 8007d5e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d62:	f383 8810 	msr	PRIMASK, r3
}
 8007d66:	46c0      	nop			; (mov r8, r8)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	4961      	ldr	r1, [pc, #388]	; (8007ef8 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007d74:	400a      	ands	r2, r1
 8007d76:	601a      	str	r2, [r3, #0]
 8007d78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007d7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7e:	f383 8810 	msr	PRIMASK, r3
}
 8007d82:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d84:	f3ef 8310 	mrs	r3, PRIMASK
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d8c:	657b      	str	r3, [r7, #84]	; 0x54
 8007d8e:	2301      	movs	r3, #1
 8007d90:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007d94:	f383 8810 	msr	PRIMASK, r3
}
 8007d98:	46c0      	nop			; (mov r8, r8)
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	689a      	ldr	r2, [r3, #8]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	4955      	ldr	r1, [pc, #340]	; (8007efc <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007da6:	400a      	ands	r2, r1
 8007da8:	609a      	str	r2, [r3, #8]
 8007daa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007dac:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007db0:	f383 8810 	msr	PRIMASK, r3
}
 8007db4:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	228c      	movs	r2, #140	; 0x8c
 8007dba:	2120      	movs	r1, #32
 8007dbc:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dce:	2b01      	cmp	r3, #1
 8007dd0:	d12f      	bne.n	8007e32 <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8007ddc:	623b      	str	r3, [r7, #32]
  return(result);
 8007dde:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007de0:	653b      	str	r3, [r7, #80]	; 0x50
 8007de2:	2301      	movs	r3, #1
 8007de4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007de8:	f383 8810 	msr	PRIMASK, r3
}
 8007dec:	46c0      	nop			; (mov r8, r8)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	2110      	movs	r1, #16
 8007dfa:	438a      	bics	r2, r1
 8007dfc:	601a      	str	r2, [r3, #0]
 8007dfe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e00:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e04:	f383 8810 	msr	PRIMASK, r3
}
 8007e08:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	2210      	movs	r2, #16
 8007e12:	4013      	ands	r3, r2
 8007e14:	2b10      	cmp	r3, #16
 8007e16:	d103      	bne.n	8007e20 <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	2210      	movs	r2, #16
 8007e1e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	225c      	movs	r2, #92	; 0x5c
 8007e24:	5a9a      	ldrh	r2, [r3, r2]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	0011      	movs	r1, r2
 8007e2a:	0018      	movs	r0, r3
 8007e2c:	f7fe fc97 	bl	800675e <HAL_UARTEx_RxEventCallback>
 8007e30:	e003      	b.n	8007e3a <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	0018      	movs	r0, r3
 8007e36:	f7f9 fc09 	bl	800164c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007e3a:	235e      	movs	r3, #94	; 0x5e
 8007e3c:	18fb      	adds	r3, r7, r3
 8007e3e:	881b      	ldrh	r3, [r3, #0]
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d004      	beq.n	8007e4e <UART_RxISR_8BIT_FIFOEN+0x232>
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	2220      	movs	r2, #32
 8007e48:	4013      	ands	r3, r2
 8007e4a:	d000      	beq.n	8007e4e <UART_RxISR_8BIT_FIFOEN+0x232>
 8007e4c:	e709      	b.n	8007c62 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007e4e:	204e      	movs	r0, #78	; 0x4e
 8007e50:	183b      	adds	r3, r7, r0
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	215e      	movs	r1, #94	; 0x5e
 8007e56:	5a52      	ldrh	r2, [r2, r1]
 8007e58:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007e5a:	0001      	movs	r1, r0
 8007e5c:	187b      	adds	r3, r7, r1
 8007e5e:	881b      	ldrh	r3, [r3, #0]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d044      	beq.n	8007eee <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2268      	movs	r2, #104	; 0x68
 8007e68:	5a9b      	ldrh	r3, [r3, r2]
 8007e6a:	187a      	adds	r2, r7, r1
 8007e6c:	8812      	ldrh	r2, [r2, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d23d      	bcs.n	8007eee <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e72:	f3ef 8310 	mrs	r3, PRIMASK
 8007e76:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e78:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007e7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8007e7c:	2301      	movs	r3, #1
 8007e7e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f383 8810 	msr	PRIMASK, r3
}
 8007e86:	46c0      	nop			; (mov r8, r8)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	491b      	ldr	r1, [pc, #108]	; (8007f00 <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007e94:	400a      	ands	r2, r1
 8007e96:	609a      	str	r2, [r3, #8]
 8007e98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	f383 8810 	msr	PRIMASK, r3
}
 8007ea2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	4a17      	ldr	r2, [pc, #92]	; (8007f04 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8007ea8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8007eae:	617b      	str	r3, [r7, #20]
  return(result);
 8007eb0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007eb2:	647b      	str	r3, [r7, #68]	; 0x44
 8007eb4:	2301      	movs	r3, #1
 8007eb6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eb8:	69bb      	ldr	r3, [r7, #24]
 8007eba:	f383 8810 	msr	PRIMASK, r3
}
 8007ebe:	46c0      	nop			; (mov r8, r8)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	2120      	movs	r1, #32
 8007ecc:	430a      	orrs	r2, r1
 8007ece:	601a      	str	r2, [r3, #0]
 8007ed0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ed2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	f383 8810 	msr	PRIMASK, r3
}
 8007eda:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007edc:	e007      	b.n	8007eee <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	699a      	ldr	r2, [r3, #24]
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	2108      	movs	r1, #8
 8007eea:	430a      	orrs	r2, r1
 8007eec:	619a      	str	r2, [r3, #24]
}
 8007eee:	46c0      	nop			; (mov r8, r8)
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	b01c      	add	sp, #112	; 0x70
 8007ef4:	bd80      	pop	{r7, pc}
 8007ef6:	46c0      	nop			; (mov r8, r8)
 8007ef8:	fffffeff 	.word	0xfffffeff
 8007efc:	effffffe 	.word	0xeffffffe
 8007f00:	efffffff 	.word	0xefffffff
 8007f04:	08007935 	.word	0x08007935

08007f08 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b09e      	sub	sp, #120	; 0x78
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007f10:	2372      	movs	r3, #114	; 0x72
 8007f12:	18fb      	adds	r3, r7, r3
 8007f14:	687a      	ldr	r2, [r7, #4]
 8007f16:	2160      	movs	r1, #96	; 0x60
 8007f18:	5a52      	ldrh	r2, [r2, r1]
 8007f1a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	69db      	ldr	r3, [r3, #28]
 8007f22:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	689b      	ldr	r3, [r3, #8]
 8007f32:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	228c      	movs	r2, #140	; 0x8c
 8007f38:	589b      	ldr	r3, [r3, r2]
 8007f3a:	2b22      	cmp	r3, #34	; 0x22
 8007f3c:	d000      	beq.n	8007f40 <UART_RxISR_16BIT_FIFOEN+0x38>
 8007f3e:	e144      	b.n	80081ca <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007f40:	2366      	movs	r3, #102	; 0x66
 8007f42:	18fb      	adds	r3, r7, r3
 8007f44:	687a      	ldr	r2, [r7, #4]
 8007f46:	2168      	movs	r1, #104	; 0x68
 8007f48:	5a52      	ldrh	r2, [r2, r1]
 8007f4a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007f4c:	e0eb      	b.n	8008126 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007f54:	2164      	movs	r1, #100	; 0x64
 8007f56:	187b      	adds	r3, r7, r1
 8007f58:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f5e:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 8007f60:	187b      	adds	r3, r7, r1
 8007f62:	2272      	movs	r2, #114	; 0x72
 8007f64:	18ba      	adds	r2, r7, r2
 8007f66:	881b      	ldrh	r3, [r3, #0]
 8007f68:	8812      	ldrh	r2, [r2, #0]
 8007f6a:	4013      	ands	r3, r2
 8007f6c:	b29a      	uxth	r2, r3
 8007f6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f76:	1c9a      	adds	r2, r3, #2
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	225e      	movs	r2, #94	; 0x5e
 8007f80:	5a9b      	ldrh	r3, [r3, r2]
 8007f82:	b29b      	uxth	r3, r3
 8007f84:	3b01      	subs	r3, #1
 8007f86:	b299      	uxth	r1, r3
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	225e      	movs	r2, #94	; 0x5e
 8007f8c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	69db      	ldr	r3, [r3, #28]
 8007f94:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007f96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f98:	2207      	movs	r2, #7
 8007f9a:	4013      	ands	r3, r2
 8007f9c:	d049      	beq.n	8008032 <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007f9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fa0:	2201      	movs	r2, #1
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	d010      	beq.n	8007fc8 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007fa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007fa8:	2380      	movs	r3, #128	; 0x80
 8007faa:	005b      	lsls	r3, r3, #1
 8007fac:	4013      	ands	r3, r2
 8007fae:	d00b      	beq.n	8007fc8 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2201      	movs	r2, #1
 8007fb6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2290      	movs	r2, #144	; 0x90
 8007fbc:	589b      	ldr	r3, [r3, r2]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2190      	movs	r1, #144	; 0x90
 8007fc6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fca:	2202      	movs	r2, #2
 8007fcc:	4013      	ands	r3, r2
 8007fce:	d00f      	beq.n	8007ff0 <UART_RxISR_16BIT_FIFOEN+0xe8>
 8007fd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	4013      	ands	r3, r2
 8007fd6:	d00b      	beq.n	8007ff0 <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2202      	movs	r2, #2
 8007fde:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2290      	movs	r2, #144	; 0x90
 8007fe4:	589b      	ldr	r3, [r3, r2]
 8007fe6:	2204      	movs	r2, #4
 8007fe8:	431a      	orrs	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	2190      	movs	r1, #144	; 0x90
 8007fee:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ff0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ff2:	2204      	movs	r2, #4
 8007ff4:	4013      	ands	r3, r2
 8007ff6:	d00f      	beq.n	8008018 <UART_RxISR_16BIT_FIFOEN+0x110>
 8007ff8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007ffa:	2201      	movs	r2, #1
 8007ffc:	4013      	ands	r3, r2
 8007ffe:	d00b      	beq.n	8008018 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2204      	movs	r2, #4
 8008006:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2290      	movs	r2, #144	; 0x90
 800800c:	589b      	ldr	r3, [r3, r2]
 800800e:	2202      	movs	r2, #2
 8008010:	431a      	orrs	r2, r3
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	2190      	movs	r1, #144	; 0x90
 8008016:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2290      	movs	r2, #144	; 0x90
 800801c:	589b      	ldr	r3, [r3, r2]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d007      	beq.n	8008032 <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	0018      	movs	r0, r3
 8008026:	f7fe fb92 	bl	800674e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	2290      	movs	r2, #144	; 0x90
 800802e:	2100      	movs	r1, #0
 8008030:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	225e      	movs	r2, #94	; 0x5e
 8008036:	5a9b      	ldrh	r3, [r3, r2]
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d173      	bne.n	8008126 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800803e:	f3ef 8310 	mrs	r3, PRIMASK
 8008042:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008044:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008046:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008048:	2301      	movs	r3, #1
 800804a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800804e:	f383 8810 	msr	PRIMASK, r3
}
 8008052:	46c0      	nop			; (mov r8, r8)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4961      	ldr	r1, [pc, #388]	; (80081e4 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 8008060:	400a      	ands	r2, r1
 8008062:	601a      	str	r2, [r3, #0]
 8008064:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008066:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	f383 8810 	msr	PRIMASK, r3
}
 800806e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008070:	f3ef 8310 	mrs	r3, PRIMASK
 8008074:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008076:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008078:	65bb      	str	r3, [r7, #88]	; 0x58
 800807a:	2301      	movs	r3, #1
 800807c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800807e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008080:	f383 8810 	msr	PRIMASK, r3
}
 8008084:	46c0      	nop			; (mov r8, r8)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	689a      	ldr	r2, [r3, #8]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4955      	ldr	r1, [pc, #340]	; (80081e8 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 8008092:	400a      	ands	r2, r1
 8008094:	609a      	str	r2, [r3, #8]
 8008096:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008098:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800809a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800809c:	f383 8810 	msr	PRIMASK, r3
}
 80080a0:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	228c      	movs	r2, #140	; 0x8c
 80080a6:	2120      	movs	r1, #32
 80080a8:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	2200      	movs	r2, #0
 80080ae:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2200      	movs	r2, #0
 80080b4:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d12f      	bne.n	800811e <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080c4:	f3ef 8310 	mrs	r3, PRIMASK
 80080c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80080ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080cc:	657b      	str	r3, [r7, #84]	; 0x54
 80080ce:	2301      	movs	r3, #1
 80080d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d4:	f383 8810 	msr	PRIMASK, r3
}
 80080d8:	46c0      	nop			; (mov r8, r8)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	681a      	ldr	r2, [r3, #0]
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2110      	movs	r1, #16
 80080e6:	438a      	bics	r2, r1
 80080e8:	601a      	str	r2, [r3, #0]
 80080ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080f0:	f383 8810 	msr	PRIMASK, r3
}
 80080f4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	69db      	ldr	r3, [r3, #28]
 80080fc:	2210      	movs	r2, #16
 80080fe:	4013      	ands	r3, r2
 8008100:	2b10      	cmp	r3, #16
 8008102:	d103      	bne.n	800810c <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	2210      	movs	r2, #16
 800810a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	225c      	movs	r2, #92	; 0x5c
 8008110:	5a9a      	ldrh	r2, [r3, r2]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	0011      	movs	r1, r2
 8008116:	0018      	movs	r0, r3
 8008118:	f7fe fb21 	bl	800675e <HAL_UARTEx_RxEventCallback>
 800811c:	e003      	b.n	8008126 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	0018      	movs	r0, r3
 8008122:	f7f9 fa93 	bl	800164c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008126:	2366      	movs	r3, #102	; 0x66
 8008128:	18fb      	adds	r3, r7, r3
 800812a:	881b      	ldrh	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d004      	beq.n	800813a <UART_RxISR_16BIT_FIFOEN+0x232>
 8008130:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008132:	2220      	movs	r2, #32
 8008134:	4013      	ands	r3, r2
 8008136:	d000      	beq.n	800813a <UART_RxISR_16BIT_FIFOEN+0x232>
 8008138:	e709      	b.n	8007f4e <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800813a:	2052      	movs	r0, #82	; 0x52
 800813c:	183b      	adds	r3, r7, r0
 800813e:	687a      	ldr	r2, [r7, #4]
 8008140:	215e      	movs	r1, #94	; 0x5e
 8008142:	5a52      	ldrh	r2, [r2, r1]
 8008144:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8008146:	0001      	movs	r1, r0
 8008148:	187b      	adds	r3, r7, r1
 800814a:	881b      	ldrh	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d044      	beq.n	80081da <UART_RxISR_16BIT_FIFOEN+0x2d2>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2268      	movs	r2, #104	; 0x68
 8008154:	5a9b      	ldrh	r3, [r3, r2]
 8008156:	187a      	adds	r2, r7, r1
 8008158:	8812      	ldrh	r2, [r2, #0]
 800815a:	429a      	cmp	r2, r3
 800815c:	d23d      	bcs.n	80081da <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800815e:	f3ef 8310 	mrs	r3, PRIMASK
 8008162:	60fb      	str	r3, [r7, #12]
  return(result);
 8008164:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008166:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008168:	2301      	movs	r3, #1
 800816a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800816c:	693b      	ldr	r3, [r7, #16]
 800816e:	f383 8810 	msr	PRIMASK, r3
}
 8008172:	46c0      	nop			; (mov r8, r8)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	689a      	ldr	r2, [r3, #8]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	491b      	ldr	r1, [pc, #108]	; (80081ec <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 8008180:	400a      	ands	r2, r1
 8008182:	609a      	str	r2, [r3, #8]
 8008184:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008186:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008188:	697b      	ldr	r3, [r7, #20]
 800818a:	f383 8810 	msr	PRIMASK, r3
}
 800818e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	4a17      	ldr	r2, [pc, #92]	; (80081f0 <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8008194:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008196:	f3ef 8310 	mrs	r3, PRIMASK
 800819a:	61bb      	str	r3, [r7, #24]
  return(result);
 800819c:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800819e:	64bb      	str	r3, [r7, #72]	; 0x48
 80081a0:	2301      	movs	r3, #1
 80081a2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081a4:	69fb      	ldr	r3, [r7, #28]
 80081a6:	f383 8810 	msr	PRIMASK, r3
}
 80081aa:	46c0      	nop			; (mov r8, r8)
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2120      	movs	r1, #32
 80081b8:	430a      	orrs	r2, r1
 80081ba:	601a      	str	r2, [r3, #0]
 80081bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80081be:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081c0:	6a3b      	ldr	r3, [r7, #32]
 80081c2:	f383 8810 	msr	PRIMASK, r3
}
 80081c6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081c8:	e007      	b.n	80081da <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	699a      	ldr	r2, [r3, #24]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2108      	movs	r1, #8
 80081d6:	430a      	orrs	r2, r1
 80081d8:	619a      	str	r2, [r3, #24]
}
 80081da:	46c0      	nop			; (mov r8, r8)
 80081dc:	46bd      	mov	sp, r7
 80081de:	b01e      	add	sp, #120	; 0x78
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	46c0      	nop			; (mov r8, r8)
 80081e4:	fffffeff 	.word	0xfffffeff
 80081e8:	effffffe 	.word	0xeffffffe
 80081ec:	efffffff 	.word	0xefffffff
 80081f0:	08007aa9 	.word	0x08007aa9

080081f4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80081f4:	b580      	push	{r7, lr}
 80081f6:	b084      	sub	sp, #16
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2284      	movs	r2, #132	; 0x84
 8008200:	5c9b      	ldrb	r3, [r3, r2]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d101      	bne.n	800820a <HAL_UARTEx_DisableFifoMode+0x16>
 8008206:	2302      	movs	r3, #2
 8008208:	e027      	b.n	800825a <HAL_UARTEx_DisableFifoMode+0x66>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2284      	movs	r2, #132	; 0x84
 800820e:	2101      	movs	r1, #1
 8008210:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	2288      	movs	r2, #136	; 0x88
 8008216:	2124      	movs	r1, #36	; 0x24
 8008218:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	681a      	ldr	r2, [r3, #0]
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2101      	movs	r1, #1
 800822e:	438a      	bics	r2, r1
 8008230:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	4a0b      	ldr	r2, [pc, #44]	; (8008264 <HAL_UARTEx_DisableFifoMode+0x70>)
 8008236:	4013      	ands	r3, r2
 8008238:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2200      	movs	r2, #0
 800823e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	68fa      	ldr	r2, [r7, #12]
 8008246:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2288      	movs	r2, #136	; 0x88
 800824c:	2120      	movs	r1, #32
 800824e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2284      	movs	r2, #132	; 0x84
 8008254:	2100      	movs	r1, #0
 8008256:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008258:	2300      	movs	r3, #0
}
 800825a:	0018      	movs	r0, r3
 800825c:	46bd      	mov	sp, r7
 800825e:	b004      	add	sp, #16
 8008260:	bd80      	pop	{r7, pc}
 8008262:	46c0      	nop			; (mov r8, r8)
 8008264:	dfffffff 	.word	0xdfffffff

08008268 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2284      	movs	r2, #132	; 0x84
 8008276:	5c9b      	ldrb	r3, [r3, r2]
 8008278:	2b01      	cmp	r3, #1
 800827a:	d101      	bne.n	8008280 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800827c:	2302      	movs	r3, #2
 800827e:	e02e      	b.n	80082de <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2284      	movs	r2, #132	; 0x84
 8008284:	2101      	movs	r1, #1
 8008286:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2288      	movs	r2, #136	; 0x88
 800828c:	2124      	movs	r1, #36	; 0x24
 800828e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	681a      	ldr	r2, [r3, #0]
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2101      	movs	r1, #1
 80082a4:	438a      	bics	r2, r1
 80082a6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	689b      	ldr	r3, [r3, #8]
 80082ae:	00db      	lsls	r3, r3, #3
 80082b0:	08d9      	lsrs	r1, r3, #3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	683a      	ldr	r2, [r7, #0]
 80082b8:	430a      	orrs	r2, r1
 80082ba:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	0018      	movs	r0, r3
 80082c0:	f000 f854 	bl	800836c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	68fa      	ldr	r2, [r7, #12]
 80082ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2288      	movs	r2, #136	; 0x88
 80082d0:	2120      	movs	r1, #32
 80082d2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	2284      	movs	r2, #132	; 0x84
 80082d8:	2100      	movs	r1, #0
 80082da:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80082dc:	2300      	movs	r3, #0
}
 80082de:	0018      	movs	r0, r3
 80082e0:	46bd      	mov	sp, r7
 80082e2:	b004      	add	sp, #16
 80082e4:	bd80      	pop	{r7, pc}
	...

080082e8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b084      	sub	sp, #16
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2284      	movs	r2, #132	; 0x84
 80082f6:	5c9b      	ldrb	r3, [r3, r2]
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d101      	bne.n	8008300 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80082fc:	2302      	movs	r3, #2
 80082fe:	e02f      	b.n	8008360 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2284      	movs	r2, #132	; 0x84
 8008304:	2101      	movs	r1, #1
 8008306:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2288      	movs	r2, #136	; 0x88
 800830c:	2124      	movs	r1, #36	; 0x24
 800830e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	681a      	ldr	r2, [r3, #0]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2101      	movs	r1, #1
 8008324:	438a      	bics	r2, r1
 8008326:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	689b      	ldr	r3, [r3, #8]
 800832e:	4a0e      	ldr	r2, [pc, #56]	; (8008368 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8008330:	4013      	ands	r3, r2
 8008332:	0019      	movs	r1, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	683a      	ldr	r2, [r7, #0]
 800833a:	430a      	orrs	r2, r1
 800833c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	0018      	movs	r0, r3
 8008342:	f000 f813 	bl	800836c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2288      	movs	r2, #136	; 0x88
 8008352:	2120      	movs	r1, #32
 8008354:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2284      	movs	r2, #132	; 0x84
 800835a:	2100      	movs	r1, #0
 800835c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	0018      	movs	r0, r3
 8008362:	46bd      	mov	sp, r7
 8008364:	b004      	add	sp, #16
 8008366:	bd80      	pop	{r7, pc}
 8008368:	f1ffffff 	.word	0xf1ffffff

0800836c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800836c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800836e:	b085      	sub	sp, #20
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008378:	2b00      	cmp	r3, #0
 800837a:	d108      	bne.n	800838e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	226a      	movs	r2, #106	; 0x6a
 8008380:	2101      	movs	r1, #1
 8008382:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2268      	movs	r2, #104	; 0x68
 8008388:	2101      	movs	r1, #1
 800838a:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800838c:	e043      	b.n	8008416 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800838e:	260f      	movs	r6, #15
 8008390:	19bb      	adds	r3, r7, r6
 8008392:	2208      	movs	r2, #8
 8008394:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008396:	200e      	movs	r0, #14
 8008398:	183b      	adds	r3, r7, r0
 800839a:	2208      	movs	r2, #8
 800839c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	689b      	ldr	r3, [r3, #8]
 80083a4:	0e5b      	lsrs	r3, r3, #25
 80083a6:	b2da      	uxtb	r2, r3
 80083a8:	240d      	movs	r4, #13
 80083aa:	193b      	adds	r3, r7, r4
 80083ac:	2107      	movs	r1, #7
 80083ae:	400a      	ands	r2, r1
 80083b0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	689b      	ldr	r3, [r3, #8]
 80083b8:	0f5b      	lsrs	r3, r3, #29
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	250c      	movs	r5, #12
 80083be:	197b      	adds	r3, r7, r5
 80083c0:	2107      	movs	r1, #7
 80083c2:	400a      	ands	r2, r1
 80083c4:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083c6:	183b      	adds	r3, r7, r0
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	197a      	adds	r2, r7, r5
 80083cc:	7812      	ldrb	r2, [r2, #0]
 80083ce:	4914      	ldr	r1, [pc, #80]	; (8008420 <UARTEx_SetNbDataToProcess+0xb4>)
 80083d0:	5c8a      	ldrb	r2, [r1, r2]
 80083d2:	435a      	muls	r2, r3
 80083d4:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 80083d6:	197b      	adds	r3, r7, r5
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	4a12      	ldr	r2, [pc, #72]	; (8008424 <UARTEx_SetNbDataToProcess+0xb8>)
 80083dc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80083de:	0019      	movs	r1, r3
 80083e0:	f7f7 ff26 	bl	8000230 <__divsi3>
 80083e4:	0003      	movs	r3, r0
 80083e6:	b299      	uxth	r1, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	226a      	movs	r2, #106	; 0x6a
 80083ec:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80083ee:	19bb      	adds	r3, r7, r6
 80083f0:	781b      	ldrb	r3, [r3, #0]
 80083f2:	193a      	adds	r2, r7, r4
 80083f4:	7812      	ldrb	r2, [r2, #0]
 80083f6:	490a      	ldr	r1, [pc, #40]	; (8008420 <UARTEx_SetNbDataToProcess+0xb4>)
 80083f8:	5c8a      	ldrb	r2, [r1, r2]
 80083fa:	435a      	muls	r2, r3
 80083fc:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 80083fe:	193b      	adds	r3, r7, r4
 8008400:	781b      	ldrb	r3, [r3, #0]
 8008402:	4a08      	ldr	r2, [pc, #32]	; (8008424 <UARTEx_SetNbDataToProcess+0xb8>)
 8008404:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008406:	0019      	movs	r1, r3
 8008408:	f7f7 ff12 	bl	8000230 <__divsi3>
 800840c:	0003      	movs	r3, r0
 800840e:	b299      	uxth	r1, r3
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2268      	movs	r2, #104	; 0x68
 8008414:	5299      	strh	r1, [r3, r2]
}
 8008416:	46c0      	nop			; (mov r8, r8)
 8008418:	46bd      	mov	sp, r7
 800841a:	b005      	add	sp, #20
 800841c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800841e:	46c0      	nop			; (mov r8, r8)
 8008420:	0800beac 	.word	0x0800beac
 8008424:	0800beb4 	.word	0x0800beb4

08008428 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	0002      	movs	r2, r0
 8008430:	1dbb      	adds	r3, r7, #6
 8008432:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008434:	2300      	movs	r3, #0
 8008436:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008438:	1dbb      	adds	r3, r7, #6
 800843a:	2200      	movs	r2, #0
 800843c:	5e9b      	ldrsh	r3, [r3, r2]
 800843e:	2b84      	cmp	r3, #132	; 0x84
 8008440:	d006      	beq.n	8008450 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8008442:	1dbb      	adds	r3, r7, #6
 8008444:	2200      	movs	r2, #0
 8008446:	5e9a      	ldrsh	r2, [r3, r2]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	18d3      	adds	r3, r2, r3
 800844c:	3303      	adds	r3, #3
 800844e:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008450:	68fb      	ldr	r3, [r7, #12]
}
 8008452:	0018      	movs	r0, r3
 8008454:	46bd      	mov	sp, r7
 8008456:	b004      	add	sp, #16
 8008458:	bd80      	pop	{r7, pc}

0800845a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800845e:	f000 fcab 	bl	8008db8 <vTaskStartScheduler>
  
  return osOK;
 8008462:	2300      	movs	r3, #0
}
 8008464:	0018      	movs	r0, r3
 8008466:	46bd      	mov	sp, r7
 8008468:	bd80      	pop	{r7, pc}

0800846a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800846a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800846c:	b087      	sub	sp, #28
 800846e:	af02      	add	r7, sp, #8
 8008470:	6078      	str	r0, [r7, #4]
 8008472:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	685c      	ldr	r4, [r3, #4]
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008480:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2208      	movs	r2, #8
 8008486:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008488:	0018      	movs	r0, r3
 800848a:	f7ff ffcd 	bl	8008428 <makeFreeRtosPriority>
 800848e:	0001      	movs	r1, r0
 8008490:	683a      	ldr	r2, [r7, #0]
 8008492:	230c      	movs	r3, #12
 8008494:	18fb      	adds	r3, r7, r3
 8008496:	9301      	str	r3, [sp, #4]
 8008498:	9100      	str	r1, [sp, #0]
 800849a:	0013      	movs	r3, r2
 800849c:	0032      	movs	r2, r6
 800849e:	0029      	movs	r1, r5
 80084a0:	0020      	movs	r0, r4
 80084a2:	f000 fb34 	bl	8008b0e <xTaskCreate>
 80084a6:	0003      	movs	r3, r0
 80084a8:	2b01      	cmp	r3, #1
 80084aa:	d001      	beq.n	80084b0 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	e000      	b.n	80084b2 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 80084b0:	68fb      	ldr	r3, [r7, #12]
}
 80084b2:	0018      	movs	r0, r3
 80084b4:	46bd      	mov	sp, r7
 80084b6:	b005      	add	sp, #20
 80084b8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080084ba <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80084ba:	b580      	push	{r7, lr}
 80084bc:	b084      	sub	sp, #16
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d001      	beq.n	80084d0 <osDelay+0x16>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	e000      	b.n	80084d2 <osDelay+0x18>
 80084d0:	2301      	movs	r3, #1
 80084d2:	0018      	movs	r0, r3
 80084d4:	f000 fc4a 	bl	8008d6c <vTaskDelay>
  
  return osOK;
 80084d8:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80084da:	0018      	movs	r0, r3
 80084dc:	46bd      	mov	sp, r7
 80084de:	b004      	add	sp, #16
 80084e0:	bd80      	pop	{r7, pc}

080084e2 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80084e2:	b580      	push	{r7, lr}
 80084e4:	b082      	sub	sp, #8
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	3308      	adds	r3, #8
 80084ee:	001a      	movs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	4252      	negs	r2, r2
 80084fa:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	3308      	adds	r3, #8
 8008500:	001a      	movs	r2, r3
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	3308      	adds	r3, #8
 800850a:	001a      	movs	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	2200      	movs	r2, #0
 8008514:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008516:	46c0      	nop			; (mov r8, r8)
 8008518:	46bd      	mov	sp, r7
 800851a:	b002      	add	sp, #8
 800851c:	bd80      	pop	{r7, pc}

0800851e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800851e:	b580      	push	{r7, lr}
 8008520:	b082      	sub	sp, #8
 8008522:	af00      	add	r7, sp, #0
 8008524:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	2200      	movs	r2, #0
 800852a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800852c:	46c0      	nop			; (mov r8, r8)
 800852e:	46bd      	mov	sp, r7
 8008530:	b002      	add	sp, #8
 8008532:	bd80      	pop	{r7, pc}

08008534 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
 800853c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008544:	683b      	ldr	r3, [r7, #0]
 8008546:	68fa      	ldr	r2, [r7, #12]
 8008548:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	689a      	ldr	r2, [r3, #8]
 800854e:	683b      	ldr	r3, [r7, #0]
 8008550:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	689b      	ldr	r3, [r3, #8]
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	1c5a      	adds	r2, r3, #1
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	601a      	str	r2, [r3, #0]
}
 8008570:	46c0      	nop			; (mov r8, r8)
 8008572:	46bd      	mov	sp, r7
 8008574:	b004      	add	sp, #16
 8008576:	bd80      	pop	{r7, pc}

08008578 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008578:	b580      	push	{r7, lr}
 800857a:	b084      	sub	sp, #16
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
 8008580:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008582:	683b      	ldr	r3, [r7, #0]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	3301      	adds	r3, #1
 800858c:	d103      	bne.n	8008596 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	691b      	ldr	r3, [r3, #16]
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	e00c      	b.n	80085b0 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3308      	adds	r3, #8
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	e002      	b.n	80085a4 <vListInsert+0x2c>
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d2f6      	bcs.n	800859e <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	685a      	ldr	r2, [r3, #4]
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	683a      	ldr	r2, [r7, #0]
 80085be:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	68fa      	ldr	r2, [r7, #12]
 80085c4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	683a      	ldr	r2, [r7, #0]
 80085ca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	687a      	ldr	r2, [r7, #4]
 80085d0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	1c5a      	adds	r2, r3, #1
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	601a      	str	r2, [r3, #0]
}
 80085dc:	46c0      	nop			; (mov r8, r8)
 80085de:	46bd      	mov	sp, r7
 80085e0:	b004      	add	sp, #16
 80085e2:	bd80      	pop	{r7, pc}

080085e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	687a      	ldr	r2, [r7, #4]
 80085f8:	6892      	ldr	r2, [r2, #8]
 80085fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	6852      	ldr	r2, [r2, #4]
 8008604:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	429a      	cmp	r2, r3
 800860e:	d103      	bne.n	8008618 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2200      	movs	r2, #0
 800861c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	1e5a      	subs	r2, r3, #1
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
}
 800862c:	0018      	movs	r0, r3
 800862e:	46bd      	mov	sp, r7
 8008630:	b004      	add	sp, #16
 8008632:	bd80      	pop	{r7, pc}

08008634 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008634:	b580      	push	{r7, lr}
 8008636:	b084      	sub	sp, #16
 8008638:	af00      	add	r7, sp, #0
 800863a:	6078      	str	r0, [r7, #4]
 800863c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d101      	bne.n	800864c <xQueueGenericReset+0x18>
 8008648:	b672      	cpsid	i
 800864a:	e7fe      	b.n	800864a <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800864c:	f001 f910 	bl	8009870 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	434b      	muls	r3, r1
 800865e:	18d2      	adds	r2, r2, r3
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2200      	movs	r2, #0
 8008668:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681a      	ldr	r2, [r3, #0]
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867a:	1e59      	subs	r1, r3, #1
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008680:	434b      	muls	r3, r1
 8008682:	18d2      	adds	r2, r2, r3
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2244      	movs	r2, #68	; 0x44
 800868c:	21ff      	movs	r1, #255	; 0xff
 800868e:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8008690:	68fb      	ldr	r3, [r7, #12]
 8008692:	2245      	movs	r2, #69	; 0x45
 8008694:	21ff      	movs	r1, #255	; 0xff
 8008696:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8008698:	683b      	ldr	r3, [r7, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10d      	bne.n	80086ba <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	691b      	ldr	r3, [r3, #16]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d013      	beq.n	80086ce <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	3310      	adds	r3, #16
 80086aa:	0018      	movs	r0, r3
 80086ac:	f000 fd72 	bl	8009194 <xTaskRemoveFromEventList>
 80086b0:	1e03      	subs	r3, r0, #0
 80086b2:	d00c      	beq.n	80086ce <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80086b4:	f001 f8cc 	bl	8009850 <vPortYield>
 80086b8:	e009      	b.n	80086ce <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	3310      	adds	r3, #16
 80086be:	0018      	movs	r0, r3
 80086c0:	f7ff ff0f 	bl	80084e2 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	3324      	adds	r3, #36	; 0x24
 80086c8:	0018      	movs	r0, r3
 80086ca:	f7ff ff0a 	bl	80084e2 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80086ce:	f001 f8e1 	bl	8009894 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80086d2:	2301      	movs	r3, #1
}
 80086d4:	0018      	movs	r0, r3
 80086d6:	46bd      	mov	sp, r7
 80086d8:	b004      	add	sp, #16
 80086da:	bd80      	pop	{r7, pc}

080086dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80086dc:	b590      	push	{r4, r7, lr}
 80086de:	b08b      	sub	sp, #44	; 0x2c
 80086e0:	af02      	add	r7, sp, #8
 80086e2:	60f8      	str	r0, [r7, #12]
 80086e4:	60b9      	str	r1, [r7, #8]
 80086e6:	1dfb      	adds	r3, r7, #7
 80086e8:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2b00      	cmp	r3, #0
 80086ee:	d101      	bne.n	80086f4 <xQueueGenericCreate+0x18>
 80086f0:	b672      	cpsid	i
 80086f2:	e7fe      	b.n	80086f2 <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	68ba      	ldr	r2, [r7, #8]
 80086f8:	4353      	muls	r3, r2
 80086fa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80086fc:	69fb      	ldr	r3, [r7, #28]
 80086fe:	3348      	adds	r3, #72	; 0x48
 8008700:	0018      	movs	r0, r3
 8008702:	f001 f94d 	bl	80099a0 <pvPortMalloc>
 8008706:	0003      	movs	r3, r0
 8008708:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 800870a:	69bb      	ldr	r3, [r7, #24]
 800870c:	2b00      	cmp	r3, #0
 800870e:	d00e      	beq.n	800872e <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008710:	69bb      	ldr	r3, [r7, #24]
 8008712:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	3348      	adds	r3, #72	; 0x48
 8008718:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800871a:	1dfb      	adds	r3, r7, #7
 800871c:	781c      	ldrb	r4, [r3, #0]
 800871e:	697a      	ldr	r2, [r7, #20]
 8008720:	68b9      	ldr	r1, [r7, #8]
 8008722:	68f8      	ldr	r0, [r7, #12]
 8008724:	69bb      	ldr	r3, [r7, #24]
 8008726:	9300      	str	r3, [sp, #0]
 8008728:	0023      	movs	r3, r4
 800872a:	f000 f805 	bl	8008738 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800872e:	69bb      	ldr	r3, [r7, #24]
	}
 8008730:	0018      	movs	r0, r3
 8008732:	46bd      	mov	sp, r7
 8008734:	b009      	add	sp, #36	; 0x24
 8008736:	bd90      	pop	{r4, r7, pc}

08008738 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008738:	b580      	push	{r7, lr}
 800873a:	b084      	sub	sp, #16
 800873c:	af00      	add	r7, sp, #0
 800873e:	60f8      	str	r0, [r7, #12]
 8008740:	60b9      	str	r1, [r7, #8]
 8008742:	607a      	str	r2, [r7, #4]
 8008744:	001a      	movs	r2, r3
 8008746:	1cfb      	adds	r3, r7, #3
 8008748:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800874a:	68bb      	ldr	r3, [r7, #8]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d103      	bne.n	8008758 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008750:	69bb      	ldr	r3, [r7, #24]
 8008752:	69ba      	ldr	r2, [r7, #24]
 8008754:	601a      	str	r2, [r3, #0]
 8008756:	e002      	b.n	800875e <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008758:	69bb      	ldr	r3, [r7, #24]
 800875a:	687a      	ldr	r2, [r7, #4]
 800875c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	68fa      	ldr	r2, [r7, #12]
 8008762:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	68ba      	ldr	r2, [r7, #8]
 8008768:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800876a:	69bb      	ldr	r3, [r7, #24]
 800876c:	2101      	movs	r1, #1
 800876e:	0018      	movs	r0, r3
 8008770:	f7ff ff60 	bl	8008634 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008774:	46c0      	nop			; (mov r8, r8)
 8008776:	46bd      	mov	sp, r7
 8008778:	b004      	add	sp, #16
 800877a:	bd80      	pop	{r7, pc}

0800877c <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800877c:	b580      	push	{r7, lr}
 800877e:	b088      	sub	sp, #32
 8008780:	af00      	add	r7, sp, #0
 8008782:	6078      	str	r0, [r7, #4]
 8008784:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800878a:	69bb      	ldr	r3, [r7, #24]
 800878c:	2b00      	cmp	r3, #0
 800878e:	d101      	bne.n	8008794 <xQueueGiveFromISR+0x18>
 8008790:	b672      	cpsid	i
 8008792:	e7fe      	b.n	8008792 <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008794:	69bb      	ldr	r3, [r7, #24]
 8008796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <xQueueGiveFromISR+0x24>
 800879c:	b672      	cpsid	i
 800879e:	e7fe      	b.n	800879e <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d103      	bne.n	80087b0 <xQueueGiveFromISR+0x34>
 80087a8:	69bb      	ldr	r3, [r7, #24]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d101      	bne.n	80087b4 <xQueueGiveFromISR+0x38>
 80087b0:	2301      	movs	r3, #1
 80087b2:	e000      	b.n	80087b6 <xQueueGiveFromISR+0x3a>
 80087b4:	2300      	movs	r3, #0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d101      	bne.n	80087be <xQueueGiveFromISR+0x42>
 80087ba:	b672      	cpsid	i
 80087bc:	e7fe      	b.n	80087bc <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087be:	f001 f881 	bl	80098c4 <ulSetInterruptMaskFromISR>
 80087c2:	0003      	movs	r3, r0
 80087c4:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80087c6:	69bb      	ldr	r3, [r7, #24]
 80087c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ca:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80087cc:	69bb      	ldr	r3, [r7, #24]
 80087ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087d0:	693a      	ldr	r2, [r7, #16]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d22c      	bcs.n	8008830 <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80087d6:	200f      	movs	r0, #15
 80087d8:	183b      	adds	r3, r7, r0
 80087da:	69ba      	ldr	r2, [r7, #24]
 80087dc:	2145      	movs	r1, #69	; 0x45
 80087de:	5c52      	ldrb	r2, [r2, r1]
 80087e0:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80087e2:	693b      	ldr	r3, [r7, #16]
 80087e4:	1c5a      	adds	r2, r3, #1
 80087e6:	69bb      	ldr	r3, [r7, #24]
 80087e8:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087ea:	183b      	adds	r3, r7, r0
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	b25b      	sxtb	r3, r3
 80087f0:	3301      	adds	r3, #1
 80087f2:	d111      	bne.n	8008818 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d016      	beq.n	800882a <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	3324      	adds	r3, #36	; 0x24
 8008800:	0018      	movs	r0, r3
 8008802:	f000 fcc7 	bl	8009194 <xTaskRemoveFromEventList>
 8008806:	1e03      	subs	r3, r0, #0
 8008808:	d00f      	beq.n	800882a <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d00c      	beq.n	800882a <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008810:	683b      	ldr	r3, [r7, #0]
 8008812:	2201      	movs	r2, #1
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	e008      	b.n	800882a <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008818:	230f      	movs	r3, #15
 800881a:	18fb      	adds	r3, r7, r3
 800881c:	781b      	ldrb	r3, [r3, #0]
 800881e:	3301      	adds	r3, #1
 8008820:	b2db      	uxtb	r3, r3
 8008822:	b259      	sxtb	r1, r3
 8008824:	69bb      	ldr	r3, [r7, #24]
 8008826:	2245      	movs	r2, #69	; 0x45
 8008828:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800882a:	2301      	movs	r3, #1
 800882c:	61fb      	str	r3, [r7, #28]
 800882e:	e001      	b.n	8008834 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008830:	2300      	movs	r3, #0
 8008832:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008834:	697b      	ldr	r3, [r7, #20]
 8008836:	0018      	movs	r0, r3
 8008838:	f001 f84a 	bl	80098d0 <vClearInterruptMaskFromISR>

	return xReturn;
 800883c:	69fb      	ldr	r3, [r7, #28]
}
 800883e:	0018      	movs	r0, r3
 8008840:	46bd      	mov	sp, r7
 8008842:	b008      	add	sp, #32
 8008844:	bd80      	pop	{r7, pc}

08008846 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b08a      	sub	sp, #40	; 0x28
 800884a:	af00      	add	r7, sp, #0
 800884c:	6078      	str	r0, [r7, #4]
 800884e:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8008850:	2300      	movs	r3, #0
 8008852:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008858:	2300      	movs	r3, #0
 800885a:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800885c:	69fb      	ldr	r3, [r7, #28]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d101      	bne.n	8008866 <xQueueSemaphoreTake+0x20>
 8008862:	b672      	cpsid	i
 8008864:	e7fe      	b.n	8008864 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008866:	69fb      	ldr	r3, [r7, #28]
 8008868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800886a:	2b00      	cmp	r3, #0
 800886c:	d001      	beq.n	8008872 <xQueueSemaphoreTake+0x2c>
 800886e:	b672      	cpsid	i
 8008870:	e7fe      	b.n	8008870 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008872:	f000 fe0b 	bl	800948c <xTaskGetSchedulerState>
 8008876:	1e03      	subs	r3, r0, #0
 8008878:	d102      	bne.n	8008880 <xQueueSemaphoreTake+0x3a>
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	2b00      	cmp	r3, #0
 800887e:	d101      	bne.n	8008884 <xQueueSemaphoreTake+0x3e>
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <xQueueSemaphoreTake+0x40>
 8008884:	2300      	movs	r3, #0
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <xQueueSemaphoreTake+0x48>
 800888a:	b672      	cpsid	i
 800888c:	e7fe      	b.n	800888c <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800888e:	f000 ffef 	bl	8009870 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008892:	69fb      	ldr	r3, [r7, #28]
 8008894:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008896:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d01d      	beq.n	80088da <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800889e:	69bb      	ldr	r3, [r7, #24]
 80088a0:	1e5a      	subs	r2, r3, #1
 80088a2:	69fb      	ldr	r3, [r7, #28]
 80088a4:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80088a6:	69fb      	ldr	r3, [r7, #28]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d104      	bne.n	80088b8 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80088ae:	f000 fee1 	bl	8009674 <pvTaskIncrementMutexHeldCount>
 80088b2:	0002      	movs	r2, r0
 80088b4:	69fb      	ldr	r3, [r7, #28]
 80088b6:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	691b      	ldr	r3, [r3, #16]
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d008      	beq.n	80088d2 <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088c0:	69fb      	ldr	r3, [r7, #28]
 80088c2:	3310      	adds	r3, #16
 80088c4:	0018      	movs	r0, r3
 80088c6:	f000 fc65 	bl	8009194 <xTaskRemoveFromEventList>
 80088ca:	1e03      	subs	r3, r0, #0
 80088cc:	d001      	beq.n	80088d2 <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088ce:	f000 ffbf 	bl	8009850 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088d2:	f000 ffdf 	bl	8009894 <vPortExitCritical>
				return pdPASS;
 80088d6:	2301      	movs	r3, #1
 80088d8:	e08b      	b.n	80089f2 <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088da:	683b      	ldr	r3, [r7, #0]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d108      	bne.n	80088f2 <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80088e0:	6a3b      	ldr	r3, [r7, #32]
 80088e2:	2b00      	cmp	r3, #0
 80088e4:	d001      	beq.n	80088ea <xQueueSemaphoreTake+0xa4>
 80088e6:	b672      	cpsid	i
 80088e8:	e7fe      	b.n	80088e8 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80088ea:	f000 ffd3 	bl	8009894 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088ee:	2300      	movs	r3, #0
 80088f0:	e07f      	b.n	80089f2 <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f4:	2b00      	cmp	r3, #0
 80088f6:	d106      	bne.n	8008906 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088f8:	230c      	movs	r3, #12
 80088fa:	18fb      	adds	r3, r7, r3
 80088fc:	0018      	movs	r0, r3
 80088fe:	f000 fca5 	bl	800924c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008902:	2301      	movs	r3, #1
 8008904:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008906:	f000 ffc5 	bl	8009894 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800890a:	f000 fa8b 	bl	8008e24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800890e:	f000 ffaf 	bl	8009870 <vPortEnterCritical>
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	2244      	movs	r2, #68	; 0x44
 8008916:	5c9b      	ldrb	r3, [r3, r2]
 8008918:	b25b      	sxtb	r3, r3
 800891a:	3301      	adds	r3, #1
 800891c:	d103      	bne.n	8008926 <xQueueSemaphoreTake+0xe0>
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2244      	movs	r2, #68	; 0x44
 8008922:	2100      	movs	r1, #0
 8008924:	5499      	strb	r1, [r3, r2]
 8008926:	69fb      	ldr	r3, [r7, #28]
 8008928:	2245      	movs	r2, #69	; 0x45
 800892a:	5c9b      	ldrb	r3, [r3, r2]
 800892c:	b25b      	sxtb	r3, r3
 800892e:	3301      	adds	r3, #1
 8008930:	d103      	bne.n	800893a <xQueueSemaphoreTake+0xf4>
 8008932:	69fb      	ldr	r3, [r7, #28]
 8008934:	2245      	movs	r2, #69	; 0x45
 8008936:	2100      	movs	r1, #0
 8008938:	5499      	strb	r1, [r3, r2]
 800893a:	f000 ffab 	bl	8009894 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800893e:	003a      	movs	r2, r7
 8008940:	230c      	movs	r3, #12
 8008942:	18fb      	adds	r3, r7, r3
 8008944:	0011      	movs	r1, r2
 8008946:	0018      	movs	r0, r3
 8008948:	f000 fc94 	bl	8009274 <xTaskCheckForTimeOut>
 800894c:	1e03      	subs	r3, r0, #0
 800894e:	d12e      	bne.n	80089ae <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008950:	69fb      	ldr	r3, [r7, #28]
 8008952:	0018      	movs	r0, r3
 8008954:	f000 f8c5 	bl	8008ae2 <prvIsQueueEmpty>
 8008958:	1e03      	subs	r3, r0, #0
 800895a:	d021      	beq.n	80089a0 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b00      	cmp	r3, #0
 8008962:	d10a      	bne.n	800897a <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8008964:	f000 ff84 	bl	8009870 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008968:	69fb      	ldr	r3, [r7, #28]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	0018      	movs	r0, r3
 800896e:	f000 fda9 	bl	80094c4 <xTaskPriorityInherit>
 8008972:	0003      	movs	r3, r0
 8008974:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8008976:	f000 ff8d 	bl	8009894 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	3324      	adds	r3, #36	; 0x24
 800897e:	683a      	ldr	r2, [r7, #0]
 8008980:	0011      	movs	r1, r2
 8008982:	0018      	movs	r0, r3
 8008984:	f000 fbe8 	bl	8009158 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008988:	69fb      	ldr	r3, [r7, #28]
 800898a:	0018      	movs	r0, r3
 800898c:	f000 f84b 	bl	8008a26 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008990:	f000 fa54 	bl	8008e3c <xTaskResumeAll>
 8008994:	1e03      	subs	r3, r0, #0
 8008996:	d000      	beq.n	800899a <xQueueSemaphoreTake+0x154>
 8008998:	e779      	b.n	800888e <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800899a:	f000 ff59 	bl	8009850 <vPortYield>
 800899e:	e776      	b.n	800888e <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80089a0:	69fb      	ldr	r3, [r7, #28]
 80089a2:	0018      	movs	r0, r3
 80089a4:	f000 f83f 	bl	8008a26 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089a8:	f000 fa48 	bl	8008e3c <xTaskResumeAll>
 80089ac:	e76f      	b.n	800888e <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	0018      	movs	r0, r3
 80089b2:	f000 f838 	bl	8008a26 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089b6:	f000 fa41 	bl	8008e3c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	0018      	movs	r0, r3
 80089be:	f000 f890 	bl	8008ae2 <prvIsQueueEmpty>
 80089c2:	1e03      	subs	r3, r0, #0
 80089c4:	d100      	bne.n	80089c8 <xQueueSemaphoreTake+0x182>
 80089c6:	e762      	b.n	800888e <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80089c8:	6a3b      	ldr	r3, [r7, #32]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d010      	beq.n	80089f0 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 80089ce:	f000 ff4f 	bl	8009870 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	0018      	movs	r0, r3
 80089d6:	f000 f810 	bl	80089fa <prvGetDisinheritPriorityAfterTimeout>
 80089da:	0003      	movs	r3, r0
 80089dc:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	697a      	ldr	r2, [r7, #20]
 80089e4:	0011      	movs	r1, r2
 80089e6:	0018      	movs	r0, r3
 80089e8:	f000 fdd4 	bl	8009594 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80089ec:	f000 ff52 	bl	8009894 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089f2:	0018      	movs	r0, r3
 80089f4:	46bd      	mov	sp, r7
 80089f6:	b00a      	add	sp, #40	; 0x28
 80089f8:	bd80      	pop	{r7, pc}

080089fa <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80089fa:	b580      	push	{r7, lr}
 80089fc:	b084      	sub	sp, #16
 80089fe:	af00      	add	r7, sp, #0
 8008a00:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d006      	beq.n	8008a18 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2207      	movs	r2, #7
 8008a12:	1ad3      	subs	r3, r2, r3
 8008a14:	60fb      	str	r3, [r7, #12]
 8008a16:	e001      	b.n	8008a1c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8008a18:	2300      	movs	r3, #0
 8008a1a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
	}
 8008a1e:	0018      	movs	r0, r3
 8008a20:	46bd      	mov	sp, r7
 8008a22:	b004      	add	sp, #16
 8008a24:	bd80      	pop	{r7, pc}

08008a26 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008a26:	b580      	push	{r7, lr}
 8008a28:	b084      	sub	sp, #16
 8008a2a:	af00      	add	r7, sp, #0
 8008a2c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008a2e:	f000 ff1f 	bl	8009870 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008a32:	230f      	movs	r3, #15
 8008a34:	18fb      	adds	r3, r7, r3
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	2145      	movs	r1, #69	; 0x45
 8008a3a:	5c52      	ldrb	r2, [r2, r1]
 8008a3c:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a3e:	e013      	b.n	8008a68 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d016      	beq.n	8008a76 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	3324      	adds	r3, #36	; 0x24
 8008a4c:	0018      	movs	r0, r3
 8008a4e:	f000 fba1 	bl	8009194 <xTaskRemoveFromEventList>
 8008a52:	1e03      	subs	r3, r0, #0
 8008a54:	d001      	beq.n	8008a5a <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008a56:	f000 fc5d 	bl	8009314 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008a5a:	210f      	movs	r1, #15
 8008a5c:	187b      	adds	r3, r7, r1
 8008a5e:	781b      	ldrb	r3, [r3, #0]
 8008a60:	3b01      	subs	r3, #1
 8008a62:	b2da      	uxtb	r2, r3
 8008a64:	187b      	adds	r3, r7, r1
 8008a66:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008a68:	230f      	movs	r3, #15
 8008a6a:	18fb      	adds	r3, r7, r3
 8008a6c:	781b      	ldrb	r3, [r3, #0]
 8008a6e:	b25b      	sxtb	r3, r3
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	dce5      	bgt.n	8008a40 <prvUnlockQueue+0x1a>
 8008a74:	e000      	b.n	8008a78 <prvUnlockQueue+0x52>
					break;
 8008a76:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2245      	movs	r2, #69	; 0x45
 8008a7c:	21ff      	movs	r1, #255	; 0xff
 8008a7e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008a80:	f000 ff08 	bl	8009894 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008a84:	f000 fef4 	bl	8009870 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008a88:	230e      	movs	r3, #14
 8008a8a:	18fb      	adds	r3, r7, r3
 8008a8c:	687a      	ldr	r2, [r7, #4]
 8008a8e:	2144      	movs	r1, #68	; 0x44
 8008a90:	5c52      	ldrb	r2, [r2, r1]
 8008a92:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a94:	e013      	b.n	8008abe <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	691b      	ldr	r3, [r3, #16]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d016      	beq.n	8008acc <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	3310      	adds	r3, #16
 8008aa2:	0018      	movs	r0, r3
 8008aa4:	f000 fb76 	bl	8009194 <xTaskRemoveFromEventList>
 8008aa8:	1e03      	subs	r3, r0, #0
 8008aaa:	d001      	beq.n	8008ab0 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008aac:	f000 fc32 	bl	8009314 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008ab0:	210e      	movs	r1, #14
 8008ab2:	187b      	adds	r3, r7, r1
 8008ab4:	781b      	ldrb	r3, [r3, #0]
 8008ab6:	3b01      	subs	r3, #1
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	187b      	adds	r3, r7, r1
 8008abc:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008abe:	230e      	movs	r3, #14
 8008ac0:	18fb      	adds	r3, r7, r3
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	dce5      	bgt.n	8008a96 <prvUnlockQueue+0x70>
 8008aca:	e000      	b.n	8008ace <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008acc:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2244      	movs	r2, #68	; 0x44
 8008ad2:	21ff      	movs	r1, #255	; 0xff
 8008ad4:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8008ad6:	f000 fedd 	bl	8009894 <vPortExitCritical>
}
 8008ada:	46c0      	nop			; (mov r8, r8)
 8008adc:	46bd      	mov	sp, r7
 8008ade:	b004      	add	sp, #16
 8008ae0:	bd80      	pop	{r7, pc}

08008ae2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008ae2:	b580      	push	{r7, lr}
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	af00      	add	r7, sp, #0
 8008ae8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008aea:	f000 fec1 	bl	8009870 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d102      	bne.n	8008afc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008af6:	2301      	movs	r3, #1
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	e001      	b.n	8008b00 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008afc:	2300      	movs	r3, #0
 8008afe:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008b00:	f000 fec8 	bl	8009894 <vPortExitCritical>

	return xReturn;
 8008b04:	68fb      	ldr	r3, [r7, #12]
}
 8008b06:	0018      	movs	r0, r3
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	b004      	add	sp, #16
 8008b0c:	bd80      	pop	{r7, pc}

08008b0e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008b0e:	b590      	push	{r4, r7, lr}
 8008b10:	b08d      	sub	sp, #52	; 0x34
 8008b12:	af04      	add	r7, sp, #16
 8008b14:	60f8      	str	r0, [r7, #12]
 8008b16:	60b9      	str	r1, [r7, #8]
 8008b18:	603b      	str	r3, [r7, #0]
 8008b1a:	1dbb      	adds	r3, r7, #6
 8008b1c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008b1e:	1dbb      	adds	r3, r7, #6
 8008b20:	881b      	ldrh	r3, [r3, #0]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	0018      	movs	r0, r3
 8008b26:	f000 ff3b 	bl	80099a0 <pvPortMalloc>
 8008b2a:	0003      	movs	r3, r0
 8008b2c:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d010      	beq.n	8008b56 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008b34:	2054      	movs	r0, #84	; 0x54
 8008b36:	f000 ff33 	bl	80099a0 <pvPortMalloc>
 8008b3a:	0003      	movs	r3, r0
 8008b3c:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008b3e:	69fb      	ldr	r3, [r7, #28]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d003      	beq.n	8008b4c <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008b44:	69fb      	ldr	r3, [r7, #28]
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	631a      	str	r2, [r3, #48]	; 0x30
 8008b4a:	e006      	b.n	8008b5a <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	0018      	movs	r0, r3
 8008b50:	f000 ffd2 	bl	8009af8 <vPortFree>
 8008b54:	e001      	b.n	8008b5a <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008b56:	2300      	movs	r3, #0
 8008b58:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008b5a:	69fb      	ldr	r3, [r7, #28]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d016      	beq.n	8008b8e <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008b60:	1dbb      	adds	r3, r7, #6
 8008b62:	881a      	ldrh	r2, [r3, #0]
 8008b64:	683c      	ldr	r4, [r7, #0]
 8008b66:	68b9      	ldr	r1, [r7, #8]
 8008b68:	68f8      	ldr	r0, [r7, #12]
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	9303      	str	r3, [sp, #12]
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	9302      	str	r3, [sp, #8]
 8008b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b78:	9300      	str	r3, [sp, #0]
 8008b7a:	0023      	movs	r3, r4
 8008b7c:	f000 f810 	bl	8008ba0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008b80:	69fb      	ldr	r3, [r7, #28]
 8008b82:	0018      	movs	r0, r3
 8008b84:	f000 f88e 	bl	8008ca4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008b88:	2301      	movs	r3, #1
 8008b8a:	61bb      	str	r3, [r7, #24]
 8008b8c:	e002      	b.n	8008b94 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008b8e:	2301      	movs	r3, #1
 8008b90:	425b      	negs	r3, r3
 8008b92:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008b94:	69bb      	ldr	r3, [r7, #24]
	}
 8008b96:	0018      	movs	r0, r3
 8008b98:	46bd      	mov	sp, r7
 8008b9a:	b009      	add	sp, #36	; 0x24
 8008b9c:	bd90      	pop	{r4, r7, pc}
	...

08008ba0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008ba0:	b580      	push	{r7, lr}
 8008ba2:	b086      	sub	sp, #24
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
 8008bac:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008bae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	493a      	ldr	r1, [pc, #232]	; (8008ca0 <prvInitialiseNewTask+0x100>)
 8008bb6:	468c      	mov	ip, r1
 8008bb8:	4463      	add	r3, ip
 8008bba:	009b      	lsls	r3, r3, #2
 8008bbc:	18d3      	adds	r3, r2, r3
 8008bbe:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	2207      	movs	r2, #7
 8008bc4:	4393      	bics	r3, r2
 8008bc6:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008bc8:	693b      	ldr	r3, [r7, #16]
 8008bca:	2207      	movs	r2, #7
 8008bcc:	4013      	ands	r3, r2
 8008bce:	d001      	beq.n	8008bd4 <prvInitialiseNewTask+0x34>
 8008bd0:	b672      	cpsid	i
 8008bd2:	e7fe      	b.n	8008bd2 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008bd4:	68bb      	ldr	r3, [r7, #8]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d020      	beq.n	8008c1c <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]
 8008bde:	e013      	b.n	8008c08 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008be0:	68ba      	ldr	r2, [r7, #8]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	18d3      	adds	r3, r2, r3
 8008be6:	7818      	ldrb	r0, [r3, #0]
 8008be8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008bea:	2134      	movs	r1, #52	; 0x34
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	18d3      	adds	r3, r2, r3
 8008bf0:	185b      	adds	r3, r3, r1
 8008bf2:	1c02      	adds	r2, r0, #0
 8008bf4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008bf6:	68ba      	ldr	r2, [r7, #8]
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	18d3      	adds	r3, r2, r3
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d006      	beq.n	8008c10 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	3301      	adds	r3, #1
 8008c06:	617b      	str	r3, [r7, #20]
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	2b0f      	cmp	r3, #15
 8008c0c:	d9e8      	bls.n	8008be0 <prvInitialiseNewTask+0x40>
 8008c0e:	e000      	b.n	8008c12 <prvInitialiseNewTask+0x72>
			{
				break;
 8008c10:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c14:	2243      	movs	r2, #67	; 0x43
 8008c16:	2100      	movs	r1, #0
 8008c18:	5499      	strb	r1, [r3, r2]
 8008c1a:	e003      	b.n	8008c24 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	2234      	movs	r2, #52	; 0x34
 8008c20:	2100      	movs	r1, #0
 8008c22:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008c24:	6a3b      	ldr	r3, [r7, #32]
 8008c26:	2b06      	cmp	r3, #6
 8008c28:	d901      	bls.n	8008c2e <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008c2a:	2306      	movs	r3, #6
 8008c2c:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c30:	6a3a      	ldr	r2, [r7, #32]
 8008c32:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008c34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c36:	6a3a      	ldr	r2, [r7, #32]
 8008c38:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c42:	3304      	adds	r3, #4
 8008c44:	0018      	movs	r0, r3
 8008c46:	f7ff fc6a 	bl	800851e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c4c:	3318      	adds	r3, #24
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f7ff fc65 	bl	800851e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c56:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c58:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008c5a:	6a3b      	ldr	r3, [r7, #32]
 8008c5c:	2207      	movs	r2, #7
 8008c5e:	1ad2      	subs	r2, r2, r3
 8008c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c62:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c66:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c68:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c72:	2250      	movs	r2, #80	; 0x50
 8008c74:	2100      	movs	r1, #0
 8008c76:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008c78:	683a      	ldr	r2, [r7, #0]
 8008c7a:	68f9      	ldr	r1, [r7, #12]
 8008c7c:	693b      	ldr	r3, [r7, #16]
 8008c7e:	0018      	movs	r0, r3
 8008c80:	f000 fd5e 	bl	8009740 <pxPortInitialiseStack>
 8008c84:	0002      	movs	r2, r0
 8008c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c88:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d002      	beq.n	8008c96 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c92:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008c94:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008c96:	46c0      	nop			; (mov r8, r8)
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	b006      	add	sp, #24
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	46c0      	nop			; (mov r8, r8)
 8008ca0:	3fffffff 	.word	0x3fffffff

08008ca4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b082      	sub	sp, #8
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008cac:	f000 fde0 	bl	8009870 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008cb0:	4b28      	ldr	r3, [pc, #160]	; (8008d54 <prvAddNewTaskToReadyList+0xb0>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	1c5a      	adds	r2, r3, #1
 8008cb6:	4b27      	ldr	r3, [pc, #156]	; (8008d54 <prvAddNewTaskToReadyList+0xb0>)
 8008cb8:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008cba:	4b27      	ldr	r3, [pc, #156]	; (8008d58 <prvAddNewTaskToReadyList+0xb4>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d109      	bne.n	8008cd6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008cc2:	4b25      	ldr	r3, [pc, #148]	; (8008d58 <prvAddNewTaskToReadyList+0xb4>)
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008cc8:	4b22      	ldr	r3, [pc, #136]	; (8008d54 <prvAddNewTaskToReadyList+0xb0>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b01      	cmp	r3, #1
 8008cce:	d110      	bne.n	8008cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008cd0:	f000 fb3a 	bl	8009348 <prvInitialiseTaskLists>
 8008cd4:	e00d      	b.n	8008cf2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008cd6:	4b21      	ldr	r3, [pc, #132]	; (8008d5c <prvAddNewTaskToReadyList+0xb8>)
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d109      	bne.n	8008cf2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008cde:	4b1e      	ldr	r3, [pc, #120]	; (8008d58 <prvAddNewTaskToReadyList+0xb4>)
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ce8:	429a      	cmp	r2, r3
 8008cea:	d802      	bhi.n	8008cf2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008cec:	4b1a      	ldr	r3, [pc, #104]	; (8008d58 <prvAddNewTaskToReadyList+0xb4>)
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008cf2:	4b1b      	ldr	r3, [pc, #108]	; (8008d60 <prvAddNewTaskToReadyList+0xbc>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	1c5a      	adds	r2, r3, #1
 8008cf8:	4b19      	ldr	r3, [pc, #100]	; (8008d60 <prvAddNewTaskToReadyList+0xbc>)
 8008cfa:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d00:	4b18      	ldr	r3, [pc, #96]	; (8008d64 <prvAddNewTaskToReadyList+0xc0>)
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	429a      	cmp	r2, r3
 8008d06:	d903      	bls.n	8008d10 <prvAddNewTaskToReadyList+0x6c>
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0c:	4b15      	ldr	r3, [pc, #84]	; (8008d64 <prvAddNewTaskToReadyList+0xc0>)
 8008d0e:	601a      	str	r2, [r3, #0]
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d14:	0013      	movs	r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	189b      	adds	r3, r3, r2
 8008d1a:	009b      	lsls	r3, r3, #2
 8008d1c:	4a12      	ldr	r2, [pc, #72]	; (8008d68 <prvAddNewTaskToReadyList+0xc4>)
 8008d1e:	189a      	adds	r2, r3, r2
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	3304      	adds	r3, #4
 8008d24:	0019      	movs	r1, r3
 8008d26:	0010      	movs	r0, r2
 8008d28:	f7ff fc04 	bl	8008534 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008d2c:	f000 fdb2 	bl	8009894 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008d30:	4b0a      	ldr	r3, [pc, #40]	; (8008d5c <prvAddNewTaskToReadyList+0xb8>)
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008d38:	4b07      	ldr	r3, [pc, #28]	; (8008d58 <prvAddNewTaskToReadyList+0xb4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d201      	bcs.n	8008d4a <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008d46:	f000 fd83 	bl	8009850 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008d4a:	46c0      	nop			; (mov r8, r8)
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	b002      	add	sp, #8
 8008d50:	bd80      	pop	{r7, pc}
 8008d52:	46c0      	nop			; (mov r8, r8)
 8008d54:	20003868 	.word	0x20003868
 8008d58:	20003768 	.word	0x20003768
 8008d5c:	20003874 	.word	0x20003874
 8008d60:	20003884 	.word	0x20003884
 8008d64:	20003870 	.word	0x20003870
 8008d68:	2000376c 	.word	0x2000376c

08008d6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d010      	beq.n	8008da0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008d7e:	4b0d      	ldr	r3, [pc, #52]	; (8008db4 <vTaskDelay+0x48>)
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <vTaskDelay+0x1e>
 8008d86:	b672      	cpsid	i
 8008d88:	e7fe      	b.n	8008d88 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008d8a:	f000 f84b 	bl	8008e24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2100      	movs	r1, #0
 8008d92:	0018      	movs	r0, r3
 8008d94:	f000 fc80 	bl	8009698 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008d98:	f000 f850 	bl	8008e3c <xTaskResumeAll>
 8008d9c:	0003      	movs	r3, r0
 8008d9e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8008da6:	f000 fd53 	bl	8009850 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b004      	add	sp, #16
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	20003890 	.word	0x20003890

08008db8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008dbe:	4913      	ldr	r1, [pc, #76]	; (8008e0c <vTaskStartScheduler+0x54>)
 8008dc0:	4813      	ldr	r0, [pc, #76]	; (8008e10 <vTaskStartScheduler+0x58>)
 8008dc2:	4b14      	ldr	r3, [pc, #80]	; (8008e14 <vTaskStartScheduler+0x5c>)
 8008dc4:	9301      	str	r3, [sp, #4]
 8008dc6:	2300      	movs	r3, #0
 8008dc8:	9300      	str	r3, [sp, #0]
 8008dca:	2300      	movs	r3, #0
 8008dcc:	2280      	movs	r2, #128	; 0x80
 8008dce:	f7ff fe9e 	bl	8008b0e <xTaskCreate>
 8008dd2:	0003      	movs	r3, r0
 8008dd4:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d10d      	bne.n	8008df8 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008ddc:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008dde:	4b0e      	ldr	r3, [pc, #56]	; (8008e18 <vTaskStartScheduler+0x60>)
 8008de0:	2201      	movs	r2, #1
 8008de2:	4252      	negs	r2, r2
 8008de4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008de6:	4b0d      	ldr	r3, [pc, #52]	; (8008e1c <vTaskStartScheduler+0x64>)
 8008de8:	2201      	movs	r2, #1
 8008dea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008dec:	4b0c      	ldr	r3, [pc, #48]	; (8008e20 <vTaskStartScheduler+0x68>)
 8008dee:	2200      	movs	r2, #0
 8008df0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008df2:	f000 fd09 	bl	8009808 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008df6:	e004      	b.n	8008e02 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	3301      	adds	r3, #1
 8008dfc:	d101      	bne.n	8008e02 <vTaskStartScheduler+0x4a>
 8008dfe:	b672      	cpsid	i
 8008e00:	e7fe      	b.n	8008e00 <vTaskStartScheduler+0x48>
}
 8008e02:	46c0      	nop			; (mov r8, r8)
 8008e04:	46bd      	mov	sp, r7
 8008e06:	b002      	add	sp, #8
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	46c0      	nop			; (mov r8, r8)
 8008e0c:	0800bdac 	.word	0x0800bdac
 8008e10:	08009329 	.word	0x08009329
 8008e14:	2000388c 	.word	0x2000388c
 8008e18:	20003888 	.word	0x20003888
 8008e1c:	20003874 	.word	0x20003874
 8008e20:	2000386c 	.word	0x2000386c

08008e24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008e28:	4b03      	ldr	r3, [pc, #12]	; (8008e38 <vTaskSuspendAll+0x14>)
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	1c5a      	adds	r2, r3, #1
 8008e2e:	4b02      	ldr	r3, [pc, #8]	; (8008e38 <vTaskSuspendAll+0x14>)
 8008e30:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}
 8008e38:	20003890 	.word	0x20003890

08008e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008e3c:	b580      	push	{r7, lr}
 8008e3e:	b084      	sub	sp, #16
 8008e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008e42:	2300      	movs	r3, #0
 8008e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008e46:	2300      	movs	r3, #0
 8008e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008e4a:	4b3a      	ldr	r3, [pc, #232]	; (8008f34 <xTaskResumeAll+0xf8>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d101      	bne.n	8008e56 <xTaskResumeAll+0x1a>
 8008e52:	b672      	cpsid	i
 8008e54:	e7fe      	b.n	8008e54 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008e56:	f000 fd0b 	bl	8009870 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008e5a:	4b36      	ldr	r3, [pc, #216]	; (8008f34 <xTaskResumeAll+0xf8>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	1e5a      	subs	r2, r3, #1
 8008e60:	4b34      	ldr	r3, [pc, #208]	; (8008f34 <xTaskResumeAll+0xf8>)
 8008e62:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e64:	4b33      	ldr	r3, [pc, #204]	; (8008f34 <xTaskResumeAll+0xf8>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d15b      	bne.n	8008f24 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008e6c:	4b32      	ldr	r3, [pc, #200]	; (8008f38 <xTaskResumeAll+0xfc>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d057      	beq.n	8008f24 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008e74:	e02f      	b.n	8008ed6 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e76:	4b31      	ldr	r3, [pc, #196]	; (8008f3c <xTaskResumeAll+0x100>)
 8008e78:	68db      	ldr	r3, [r3, #12]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3318      	adds	r3, #24
 8008e82:	0018      	movs	r0, r3
 8008e84:	f7ff fbae 	bl	80085e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3304      	adds	r3, #4
 8008e8c:	0018      	movs	r0, r3
 8008e8e:	f7ff fba9 	bl	80085e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e96:	4b2a      	ldr	r3, [pc, #168]	; (8008f40 <xTaskResumeAll+0x104>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	429a      	cmp	r2, r3
 8008e9c:	d903      	bls.n	8008ea6 <xTaskResumeAll+0x6a>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ea2:	4b27      	ldr	r3, [pc, #156]	; (8008f40 <xTaskResumeAll+0x104>)
 8008ea4:	601a      	str	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008eaa:	0013      	movs	r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	189b      	adds	r3, r3, r2
 8008eb0:	009b      	lsls	r3, r3, #2
 8008eb2:	4a24      	ldr	r2, [pc, #144]	; (8008f44 <xTaskResumeAll+0x108>)
 8008eb4:	189a      	adds	r2, r3, r2
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	3304      	adds	r3, #4
 8008eba:	0019      	movs	r1, r3
 8008ebc:	0010      	movs	r0, r2
 8008ebe:	f7ff fb39 	bl	8008534 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ec6:	4b20      	ldr	r3, [pc, #128]	; (8008f48 <xTaskResumeAll+0x10c>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ecc:	429a      	cmp	r2, r3
 8008ece:	d302      	bcc.n	8008ed6 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8008ed0:	4b1e      	ldr	r3, [pc, #120]	; (8008f4c <xTaskResumeAll+0x110>)
 8008ed2:	2201      	movs	r2, #1
 8008ed4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008ed6:	4b19      	ldr	r3, [pc, #100]	; (8008f3c <xTaskResumeAll+0x100>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d1cb      	bne.n	8008e76 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008ee4:	f000 fab4 	bl	8009450 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008ee8:	4b19      	ldr	r3, [pc, #100]	; (8008f50 <xTaskResumeAll+0x114>)
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d00f      	beq.n	8008f14 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008ef4:	f000 f82e 	bl	8008f54 <xTaskIncrementTick>
 8008ef8:	1e03      	subs	r3, r0, #0
 8008efa:	d002      	beq.n	8008f02 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008efc:	4b13      	ldr	r3, [pc, #76]	; (8008f4c <xTaskResumeAll+0x110>)
 8008efe:	2201      	movs	r2, #1
 8008f00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d1f2      	bne.n	8008ef4 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 8008f0e:	4b10      	ldr	r3, [pc, #64]	; (8008f50 <xTaskResumeAll+0x114>)
 8008f10:	2200      	movs	r2, #0
 8008f12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008f14:	4b0d      	ldr	r3, [pc, #52]	; (8008f4c <xTaskResumeAll+0x110>)
 8008f16:	681b      	ldr	r3, [r3, #0]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d003      	beq.n	8008f24 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008f20:	f000 fc96 	bl	8009850 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008f24:	f000 fcb6 	bl	8009894 <vPortExitCritical>

	return xAlreadyYielded;
 8008f28:	68bb      	ldr	r3, [r7, #8]
}
 8008f2a:	0018      	movs	r0, r3
 8008f2c:	46bd      	mov	sp, r7
 8008f2e:	b004      	add	sp, #16
 8008f30:	bd80      	pop	{r7, pc}
 8008f32:	46c0      	nop			; (mov r8, r8)
 8008f34:	20003890 	.word	0x20003890
 8008f38:	20003868 	.word	0x20003868
 8008f3c:	20003828 	.word	0x20003828
 8008f40:	20003870 	.word	0x20003870
 8008f44:	2000376c 	.word	0x2000376c
 8008f48:	20003768 	.word	0x20003768
 8008f4c:	2000387c 	.word	0x2000387c
 8008f50:	20003878 	.word	0x20003878

08008f54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008f54:	b580      	push	{r7, lr}
 8008f56:	b086      	sub	sp, #24
 8008f58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008f5e:	4b4a      	ldr	r3, [pc, #296]	; (8009088 <xTaskIncrementTick+0x134>)
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d000      	beq.n	8008f68 <xTaskIncrementTick+0x14>
 8008f66:	e084      	b.n	8009072 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008f68:	4b48      	ldr	r3, [pc, #288]	; (800908c <xTaskIncrementTick+0x138>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	3301      	adds	r3, #1
 8008f6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008f70:	4b46      	ldr	r3, [pc, #280]	; (800908c <xTaskIncrementTick+0x138>)
 8008f72:	693a      	ldr	r2, [r7, #16]
 8008f74:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d117      	bne.n	8008fac <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008f7c:	4b44      	ldr	r3, [pc, #272]	; (8009090 <xTaskIncrementTick+0x13c>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	2b00      	cmp	r3, #0
 8008f84:	d001      	beq.n	8008f8a <xTaskIncrementTick+0x36>
 8008f86:	b672      	cpsid	i
 8008f88:	e7fe      	b.n	8008f88 <xTaskIncrementTick+0x34>
 8008f8a:	4b41      	ldr	r3, [pc, #260]	; (8009090 <xTaskIncrementTick+0x13c>)
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	60fb      	str	r3, [r7, #12]
 8008f90:	4b40      	ldr	r3, [pc, #256]	; (8009094 <xTaskIncrementTick+0x140>)
 8008f92:	681a      	ldr	r2, [r3, #0]
 8008f94:	4b3e      	ldr	r3, [pc, #248]	; (8009090 <xTaskIncrementTick+0x13c>)
 8008f96:	601a      	str	r2, [r3, #0]
 8008f98:	4b3e      	ldr	r3, [pc, #248]	; (8009094 <xTaskIncrementTick+0x140>)
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	601a      	str	r2, [r3, #0]
 8008f9e:	4b3e      	ldr	r3, [pc, #248]	; (8009098 <xTaskIncrementTick+0x144>)
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	1c5a      	adds	r2, r3, #1
 8008fa4:	4b3c      	ldr	r3, [pc, #240]	; (8009098 <xTaskIncrementTick+0x144>)
 8008fa6:	601a      	str	r2, [r3, #0]
 8008fa8:	f000 fa52 	bl	8009450 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008fac:	4b3b      	ldr	r3, [pc, #236]	; (800909c <xTaskIncrementTick+0x148>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	693a      	ldr	r2, [r7, #16]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d349      	bcc.n	800904a <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fb6:	4b36      	ldr	r3, [pc, #216]	; (8009090 <xTaskIncrementTick+0x13c>)
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d104      	bne.n	8008fca <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008fc0:	4b36      	ldr	r3, [pc, #216]	; (800909c <xTaskIncrementTick+0x148>)
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	4252      	negs	r2, r2
 8008fc6:	601a      	str	r2, [r3, #0]
					break;
 8008fc8:	e03f      	b.n	800904a <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008fca:	4b31      	ldr	r3, [pc, #196]	; (8009090 <xTaskIncrementTick+0x13c>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	68db      	ldr	r3, [r3, #12]
 8008fd2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	685b      	ldr	r3, [r3, #4]
 8008fd8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008fda:	693a      	ldr	r2, [r7, #16]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d203      	bcs.n	8008fea <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008fe2:	4b2e      	ldr	r3, [pc, #184]	; (800909c <xTaskIncrementTick+0x148>)
 8008fe4:	687a      	ldr	r2, [r7, #4]
 8008fe6:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008fe8:	e02f      	b.n	800904a <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	3304      	adds	r3, #4
 8008fee:	0018      	movs	r0, r3
 8008ff0:	f7ff faf8 	bl	80085e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d004      	beq.n	8009006 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	3318      	adds	r3, #24
 8009000:	0018      	movs	r0, r3
 8009002:	f7ff faef 	bl	80085e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800900a:	4b25      	ldr	r3, [pc, #148]	; (80090a0 <xTaskIncrementTick+0x14c>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	429a      	cmp	r2, r3
 8009010:	d903      	bls.n	800901a <xTaskIncrementTick+0xc6>
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009016:	4b22      	ldr	r3, [pc, #136]	; (80090a0 <xTaskIncrementTick+0x14c>)
 8009018:	601a      	str	r2, [r3, #0]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800901e:	0013      	movs	r3, r2
 8009020:	009b      	lsls	r3, r3, #2
 8009022:	189b      	adds	r3, r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4a1f      	ldr	r2, [pc, #124]	; (80090a4 <xTaskIncrementTick+0x150>)
 8009028:	189a      	adds	r2, r3, r2
 800902a:	68bb      	ldr	r3, [r7, #8]
 800902c:	3304      	adds	r3, #4
 800902e:	0019      	movs	r1, r3
 8009030:	0010      	movs	r0, r2
 8009032:	f7ff fa7f 	bl	8008534 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800903a:	4b1b      	ldr	r3, [pc, #108]	; (80090a8 <xTaskIncrementTick+0x154>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009040:	429a      	cmp	r2, r3
 8009042:	d3b8      	bcc.n	8008fb6 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8009044:	2301      	movs	r3, #1
 8009046:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009048:	e7b5      	b.n	8008fb6 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800904a:	4b17      	ldr	r3, [pc, #92]	; (80090a8 <xTaskIncrementTick+0x154>)
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009050:	4914      	ldr	r1, [pc, #80]	; (80090a4 <xTaskIncrementTick+0x150>)
 8009052:	0013      	movs	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	189b      	adds	r3, r3, r2
 8009058:	009b      	lsls	r3, r3, #2
 800905a:	585b      	ldr	r3, [r3, r1]
 800905c:	2b01      	cmp	r3, #1
 800905e:	d901      	bls.n	8009064 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8009060:	2301      	movs	r3, #1
 8009062:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009064:	4b11      	ldr	r3, [pc, #68]	; (80090ac <xTaskIncrementTick+0x158>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d007      	beq.n	800907c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800906c:	2301      	movs	r3, #1
 800906e:	617b      	str	r3, [r7, #20]
 8009070:	e004      	b.n	800907c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009072:	4b0f      	ldr	r3, [pc, #60]	; (80090b0 <xTaskIncrementTick+0x15c>)
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	1c5a      	adds	r2, r3, #1
 8009078:	4b0d      	ldr	r3, [pc, #52]	; (80090b0 <xTaskIncrementTick+0x15c>)
 800907a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800907c:	697b      	ldr	r3, [r7, #20]
}
 800907e:	0018      	movs	r0, r3
 8009080:	46bd      	mov	sp, r7
 8009082:	b006      	add	sp, #24
 8009084:	bd80      	pop	{r7, pc}
 8009086:	46c0      	nop			; (mov r8, r8)
 8009088:	20003890 	.word	0x20003890
 800908c:	2000386c 	.word	0x2000386c
 8009090:	20003820 	.word	0x20003820
 8009094:	20003824 	.word	0x20003824
 8009098:	20003880 	.word	0x20003880
 800909c:	20003888 	.word	0x20003888
 80090a0:	20003870 	.word	0x20003870
 80090a4:	2000376c 	.word	0x2000376c
 80090a8:	20003768 	.word	0x20003768
 80090ac:	2000387c 	.word	0x2000387c
 80090b0:	20003878 	.word	0x20003878

080090b4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b082      	sub	sp, #8
 80090b8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80090ba:	4b22      	ldr	r3, [pc, #136]	; (8009144 <vTaskSwitchContext+0x90>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80090c2:	4b21      	ldr	r3, [pc, #132]	; (8009148 <vTaskSwitchContext+0x94>)
 80090c4:	2201      	movs	r2, #1
 80090c6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80090c8:	e037      	b.n	800913a <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 80090ca:	4b1f      	ldr	r3, [pc, #124]	; (8009148 <vTaskSwitchContext+0x94>)
 80090cc:	2200      	movs	r2, #0
 80090ce:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80090d0:	4b1e      	ldr	r3, [pc, #120]	; (800914c <vTaskSwitchContext+0x98>)
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	607b      	str	r3, [r7, #4]
 80090d6:	e007      	b.n	80090e8 <vTaskSwitchContext+0x34>
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <vTaskSwitchContext+0x2e>
 80090de:	b672      	cpsid	i
 80090e0:	e7fe      	b.n	80090e0 <vTaskSwitchContext+0x2c>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	3b01      	subs	r3, #1
 80090e6:	607b      	str	r3, [r7, #4]
 80090e8:	4919      	ldr	r1, [pc, #100]	; (8009150 <vTaskSwitchContext+0x9c>)
 80090ea:	687a      	ldr	r2, [r7, #4]
 80090ec:	0013      	movs	r3, r2
 80090ee:	009b      	lsls	r3, r3, #2
 80090f0:	189b      	adds	r3, r3, r2
 80090f2:	009b      	lsls	r3, r3, #2
 80090f4:	585b      	ldr	r3, [r3, r1]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0ee      	beq.n	80090d8 <vTaskSwitchContext+0x24>
 80090fa:	687a      	ldr	r2, [r7, #4]
 80090fc:	0013      	movs	r3, r2
 80090fe:	009b      	lsls	r3, r3, #2
 8009100:	189b      	adds	r3, r3, r2
 8009102:	009b      	lsls	r3, r3, #2
 8009104:	4a12      	ldr	r2, [pc, #72]	; (8009150 <vTaskSwitchContext+0x9c>)
 8009106:	189b      	adds	r3, r3, r2
 8009108:	603b      	str	r3, [r7, #0]
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	685b      	ldr	r3, [r3, #4]
 800910e:	685a      	ldr	r2, [r3, #4]
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	605a      	str	r2, [r3, #4]
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	685a      	ldr	r2, [r3, #4]
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	3308      	adds	r3, #8
 800911c:	429a      	cmp	r2, r3
 800911e:	d104      	bne.n	800912a <vTaskSwitchContext+0x76>
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	685b      	ldr	r3, [r3, #4]
 8009124:	685a      	ldr	r2, [r3, #4]
 8009126:	683b      	ldr	r3, [r7, #0]
 8009128:	605a      	str	r2, [r3, #4]
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685b      	ldr	r3, [r3, #4]
 800912e:	68da      	ldr	r2, [r3, #12]
 8009130:	4b08      	ldr	r3, [pc, #32]	; (8009154 <vTaskSwitchContext+0xa0>)
 8009132:	601a      	str	r2, [r3, #0]
 8009134:	4b05      	ldr	r3, [pc, #20]	; (800914c <vTaskSwitchContext+0x98>)
 8009136:	687a      	ldr	r2, [r7, #4]
 8009138:	601a      	str	r2, [r3, #0]
}
 800913a:	46c0      	nop			; (mov r8, r8)
 800913c:	46bd      	mov	sp, r7
 800913e:	b002      	add	sp, #8
 8009140:	bd80      	pop	{r7, pc}
 8009142:	46c0      	nop			; (mov r8, r8)
 8009144:	20003890 	.word	0x20003890
 8009148:	2000387c 	.word	0x2000387c
 800914c:	20003870 	.word	0x20003870
 8009150:	2000376c 	.word	0x2000376c
 8009154:	20003768 	.word	0x20003768

08009158 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009158:	b580      	push	{r7, lr}
 800915a:	b082      	sub	sp, #8
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d101      	bne.n	800916c <vTaskPlaceOnEventList+0x14>
 8009168:	b672      	cpsid	i
 800916a:	e7fe      	b.n	800916a <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800916c:	4b08      	ldr	r3, [pc, #32]	; (8009190 <vTaskPlaceOnEventList+0x38>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	3318      	adds	r3, #24
 8009172:	001a      	movs	r2, r3
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	0011      	movs	r1, r2
 8009178:	0018      	movs	r0, r3
 800917a:	f7ff f9fd 	bl	8008578 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	2101      	movs	r1, #1
 8009182:	0018      	movs	r0, r3
 8009184:	f000 fa88 	bl	8009698 <prvAddCurrentTaskToDelayedList>
}
 8009188:	46c0      	nop			; (mov r8, r8)
 800918a:	46bd      	mov	sp, r7
 800918c:	b002      	add	sp, #8
 800918e:	bd80      	pop	{r7, pc}
 8009190:	20003768 	.word	0x20003768

08009194 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b084      	sub	sp, #16
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d101      	bne.n	80091ae <xTaskRemoveFromEventList+0x1a>
 80091aa:	b672      	cpsid	i
 80091ac:	e7fe      	b.n	80091ac <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80091ae:	68bb      	ldr	r3, [r7, #8]
 80091b0:	3318      	adds	r3, #24
 80091b2:	0018      	movs	r0, r3
 80091b4:	f7ff fa16 	bl	80085e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091b8:	4b1e      	ldr	r3, [pc, #120]	; (8009234 <xTaskRemoveFromEventList+0xa0>)
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d11d      	bne.n	80091fc <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80091c0:	68bb      	ldr	r3, [r7, #8]
 80091c2:	3304      	adds	r3, #4
 80091c4:	0018      	movs	r0, r3
 80091c6:	f7ff fa0d 	bl	80085e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80091ca:	68bb      	ldr	r3, [r7, #8]
 80091cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091ce:	4b1a      	ldr	r3, [pc, #104]	; (8009238 <xTaskRemoveFromEventList+0xa4>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	429a      	cmp	r2, r3
 80091d4:	d903      	bls.n	80091de <xTaskRemoveFromEventList+0x4a>
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091da:	4b17      	ldr	r3, [pc, #92]	; (8009238 <xTaskRemoveFromEventList+0xa4>)
 80091dc:	601a      	str	r2, [r3, #0]
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80091e2:	0013      	movs	r3, r2
 80091e4:	009b      	lsls	r3, r3, #2
 80091e6:	189b      	adds	r3, r3, r2
 80091e8:	009b      	lsls	r3, r3, #2
 80091ea:	4a14      	ldr	r2, [pc, #80]	; (800923c <xTaskRemoveFromEventList+0xa8>)
 80091ec:	189a      	adds	r2, r3, r2
 80091ee:	68bb      	ldr	r3, [r7, #8]
 80091f0:	3304      	adds	r3, #4
 80091f2:	0019      	movs	r1, r3
 80091f4:	0010      	movs	r0, r2
 80091f6:	f7ff f99d 	bl	8008534 <vListInsertEnd>
 80091fa:	e007      	b.n	800920c <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80091fc:	68bb      	ldr	r3, [r7, #8]
 80091fe:	3318      	adds	r3, #24
 8009200:	001a      	movs	r2, r3
 8009202:	4b0f      	ldr	r3, [pc, #60]	; (8009240 <xTaskRemoveFromEventList+0xac>)
 8009204:	0011      	movs	r1, r2
 8009206:	0018      	movs	r0, r3
 8009208:	f7ff f994 	bl	8008534 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800920c:	68bb      	ldr	r3, [r7, #8]
 800920e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009210:	4b0c      	ldr	r3, [pc, #48]	; (8009244 <xTaskRemoveFromEventList+0xb0>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009216:	429a      	cmp	r2, r3
 8009218:	d905      	bls.n	8009226 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800921a:	2301      	movs	r3, #1
 800921c:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800921e:	4b0a      	ldr	r3, [pc, #40]	; (8009248 <xTaskRemoveFromEventList+0xb4>)
 8009220:	2201      	movs	r2, #1
 8009222:	601a      	str	r2, [r3, #0]
 8009224:	e001      	b.n	800922a <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8009226:	2300      	movs	r3, #0
 8009228:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800922a:	68fb      	ldr	r3, [r7, #12]
}
 800922c:	0018      	movs	r0, r3
 800922e:	46bd      	mov	sp, r7
 8009230:	b004      	add	sp, #16
 8009232:	bd80      	pop	{r7, pc}
 8009234:	20003890 	.word	0x20003890
 8009238:	20003870 	.word	0x20003870
 800923c:	2000376c 	.word	0x2000376c
 8009240:	20003828 	.word	0x20003828
 8009244:	20003768 	.word	0x20003768
 8009248:	2000387c 	.word	0x2000387c

0800924c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009254:	4b05      	ldr	r3, [pc, #20]	; (800926c <vTaskInternalSetTimeOutState+0x20>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800925c:	4b04      	ldr	r3, [pc, #16]	; (8009270 <vTaskInternalSetTimeOutState+0x24>)
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	605a      	str	r2, [r3, #4]
}
 8009264:	46c0      	nop			; (mov r8, r8)
 8009266:	46bd      	mov	sp, r7
 8009268:	b002      	add	sp, #8
 800926a:	bd80      	pop	{r7, pc}
 800926c:	20003880 	.word	0x20003880
 8009270:	2000386c 	.word	0x2000386c

08009274 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b086      	sub	sp, #24
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
 800927c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <xTaskCheckForTimeOut+0x14>
 8009284:	b672      	cpsid	i
 8009286:	e7fe      	b.n	8009286 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d101      	bne.n	8009292 <xTaskCheckForTimeOut+0x1e>
 800928e:	b672      	cpsid	i
 8009290:	e7fe      	b.n	8009290 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8009292:	f000 faed 	bl	8009870 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009296:	4b1d      	ldr	r3, [pc, #116]	; (800930c <xTaskCheckForTimeOut+0x98>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	693a      	ldr	r2, [r7, #16]
 80092a2:	1ad3      	subs	r3, r2, r3
 80092a4:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	3301      	adds	r3, #1
 80092ac:	d102      	bne.n	80092b4 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80092ae:	2300      	movs	r3, #0
 80092b0:	617b      	str	r3, [r7, #20]
 80092b2:	e024      	b.n	80092fe <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	4b15      	ldr	r3, [pc, #84]	; (8009310 <xTaskCheckForTimeOut+0x9c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	429a      	cmp	r2, r3
 80092be:	d007      	beq.n	80092d0 <xTaskCheckForTimeOut+0x5c>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	685b      	ldr	r3, [r3, #4]
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	429a      	cmp	r2, r3
 80092c8:	d302      	bcc.n	80092d0 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80092ca:	2301      	movs	r3, #1
 80092cc:	617b      	str	r3, [r7, #20]
 80092ce:	e016      	b.n	80092fe <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80092d0:	683b      	ldr	r3, [r7, #0]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	68fa      	ldr	r2, [r7, #12]
 80092d6:	429a      	cmp	r2, r3
 80092d8:	d20c      	bcs.n	80092f4 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	681a      	ldr	r2, [r3, #0]
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	1ad2      	subs	r2, r2, r3
 80092e2:	683b      	ldr	r3, [r7, #0]
 80092e4:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	0018      	movs	r0, r3
 80092ea:	f7ff ffaf 	bl	800924c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80092ee:	2300      	movs	r3, #0
 80092f0:	617b      	str	r3, [r7, #20]
 80092f2:	e004      	b.n	80092fe <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	2200      	movs	r2, #0
 80092f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80092fa:	2301      	movs	r3, #1
 80092fc:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80092fe:	f000 fac9 	bl	8009894 <vPortExitCritical>

	return xReturn;
 8009302:	697b      	ldr	r3, [r7, #20]
}
 8009304:	0018      	movs	r0, r3
 8009306:	46bd      	mov	sp, r7
 8009308:	b006      	add	sp, #24
 800930a:	bd80      	pop	{r7, pc}
 800930c:	2000386c 	.word	0x2000386c
 8009310:	20003880 	.word	0x20003880

08009314 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009318:	4b02      	ldr	r3, [pc, #8]	; (8009324 <vTaskMissedYield+0x10>)
 800931a:	2201      	movs	r2, #1
 800931c:	601a      	str	r2, [r3, #0]
}
 800931e:	46c0      	nop			; (mov r8, r8)
 8009320:	46bd      	mov	sp, r7
 8009322:	bd80      	pop	{r7, pc}
 8009324:	2000387c 	.word	0x2000387c

08009328 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009328:	b580      	push	{r7, lr}
 800932a:	b082      	sub	sp, #8
 800932c:	af00      	add	r7, sp, #0
 800932e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009330:	f000 f84e 	bl	80093d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009334:	4b03      	ldr	r3, [pc, #12]	; (8009344 <prvIdleTask+0x1c>)
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	2b01      	cmp	r3, #1
 800933a:	d9f9      	bls.n	8009330 <prvIdleTask+0x8>
			{
				taskYIELD();
 800933c:	f000 fa88 	bl	8009850 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009340:	e7f6      	b.n	8009330 <prvIdleTask+0x8>
 8009342:	46c0      	nop			; (mov r8, r8)
 8009344:	2000376c 	.word	0x2000376c

08009348 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800934e:	2300      	movs	r3, #0
 8009350:	607b      	str	r3, [r7, #4]
 8009352:	e00c      	b.n	800936e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	0013      	movs	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	189b      	adds	r3, r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4a14      	ldr	r2, [pc, #80]	; (80093b0 <prvInitialiseTaskLists+0x68>)
 8009360:	189b      	adds	r3, r3, r2
 8009362:	0018      	movs	r0, r3
 8009364:	f7ff f8bd 	bl	80084e2 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	3301      	adds	r3, #1
 800936c:	607b      	str	r3, [r7, #4]
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2b06      	cmp	r3, #6
 8009372:	d9ef      	bls.n	8009354 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009374:	4b0f      	ldr	r3, [pc, #60]	; (80093b4 <prvInitialiseTaskLists+0x6c>)
 8009376:	0018      	movs	r0, r3
 8009378:	f7ff f8b3 	bl	80084e2 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800937c:	4b0e      	ldr	r3, [pc, #56]	; (80093b8 <prvInitialiseTaskLists+0x70>)
 800937e:	0018      	movs	r0, r3
 8009380:	f7ff f8af 	bl	80084e2 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009384:	4b0d      	ldr	r3, [pc, #52]	; (80093bc <prvInitialiseTaskLists+0x74>)
 8009386:	0018      	movs	r0, r3
 8009388:	f7ff f8ab 	bl	80084e2 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800938c:	4b0c      	ldr	r3, [pc, #48]	; (80093c0 <prvInitialiseTaskLists+0x78>)
 800938e:	0018      	movs	r0, r3
 8009390:	f7ff f8a7 	bl	80084e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009394:	4b0b      	ldr	r3, [pc, #44]	; (80093c4 <prvInitialiseTaskLists+0x7c>)
 8009396:	0018      	movs	r0, r3
 8009398:	f7ff f8a3 	bl	80084e2 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800939c:	4b0a      	ldr	r3, [pc, #40]	; (80093c8 <prvInitialiseTaskLists+0x80>)
 800939e:	4a05      	ldr	r2, [pc, #20]	; (80093b4 <prvInitialiseTaskLists+0x6c>)
 80093a0:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80093a2:	4b0a      	ldr	r3, [pc, #40]	; (80093cc <prvInitialiseTaskLists+0x84>)
 80093a4:	4a04      	ldr	r2, [pc, #16]	; (80093b8 <prvInitialiseTaskLists+0x70>)
 80093a6:	601a      	str	r2, [r3, #0]
}
 80093a8:	46c0      	nop			; (mov r8, r8)
 80093aa:	46bd      	mov	sp, r7
 80093ac:	b002      	add	sp, #8
 80093ae:	bd80      	pop	{r7, pc}
 80093b0:	2000376c 	.word	0x2000376c
 80093b4:	200037f8 	.word	0x200037f8
 80093b8:	2000380c 	.word	0x2000380c
 80093bc:	20003828 	.word	0x20003828
 80093c0:	2000383c 	.word	0x2000383c
 80093c4:	20003854 	.word	0x20003854
 80093c8:	20003820 	.word	0x20003820
 80093cc:	20003824 	.word	0x20003824

080093d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b082      	sub	sp, #8
 80093d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80093d6:	e01a      	b.n	800940e <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80093d8:	f000 fa4a 	bl	8009870 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80093dc:	4b10      	ldr	r3, [pc, #64]	; (8009420 <prvCheckTasksWaitingTermination+0x50>)
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	3304      	adds	r3, #4
 80093e8:	0018      	movs	r0, r3
 80093ea:	f7ff f8fb 	bl	80085e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80093ee:	4b0d      	ldr	r3, [pc, #52]	; (8009424 <prvCheckTasksWaitingTermination+0x54>)
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	1e5a      	subs	r2, r3, #1
 80093f4:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <prvCheckTasksWaitingTermination+0x54>)
 80093f6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80093f8:	4b0b      	ldr	r3, [pc, #44]	; (8009428 <prvCheckTasksWaitingTermination+0x58>)
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	1e5a      	subs	r2, r3, #1
 80093fe:	4b0a      	ldr	r3, [pc, #40]	; (8009428 <prvCheckTasksWaitingTermination+0x58>)
 8009400:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8009402:	f000 fa47 	bl	8009894 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	0018      	movs	r0, r3
 800940a:	f000 f80f 	bl	800942c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800940e:	4b06      	ldr	r3, [pc, #24]	; (8009428 <prvCheckTasksWaitingTermination+0x58>)
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	d1e0      	bne.n	80093d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	46c0      	nop			; (mov r8, r8)
 800941a:	46bd      	mov	sp, r7
 800941c:	b002      	add	sp, #8
 800941e:	bd80      	pop	{r7, pc}
 8009420:	2000383c 	.word	0x2000383c
 8009424:	20003868 	.word	0x20003868
 8009428:	20003850 	.word	0x20003850

0800942c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800942c:	b580      	push	{r7, lr}
 800942e:	b082      	sub	sp, #8
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009438:	0018      	movs	r0, r3
 800943a:	f000 fb5d 	bl	8009af8 <vPortFree>
			vPortFree( pxTCB );
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	0018      	movs	r0, r3
 8009442:	f000 fb59 	bl	8009af8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009446:	46c0      	nop			; (mov r8, r8)
 8009448:	46bd      	mov	sp, r7
 800944a:	b002      	add	sp, #8
 800944c:	bd80      	pop	{r7, pc}
	...

08009450 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <prvResetNextTaskUnblockTime+0x34>)
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d104      	bne.n	800946a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009460:	4b09      	ldr	r3, [pc, #36]	; (8009488 <prvResetNextTaskUnblockTime+0x38>)
 8009462:	2201      	movs	r2, #1
 8009464:	4252      	negs	r2, r2
 8009466:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009468:	e008      	b.n	800947c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946a:	4b06      	ldr	r3, [pc, #24]	; (8009484 <prvResetNextTaskUnblockTime+0x34>)
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	685a      	ldr	r2, [r3, #4]
 8009478:	4b03      	ldr	r3, [pc, #12]	; (8009488 <prvResetNextTaskUnblockTime+0x38>)
 800947a:	601a      	str	r2, [r3, #0]
}
 800947c:	46c0      	nop			; (mov r8, r8)
 800947e:	46bd      	mov	sp, r7
 8009480:	b002      	add	sp, #8
 8009482:	bd80      	pop	{r7, pc}
 8009484:	20003820 	.word	0x20003820
 8009488:	20003888 	.word	0x20003888

0800948c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800948c:	b580      	push	{r7, lr}
 800948e:	b082      	sub	sp, #8
 8009490:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009492:	4b0a      	ldr	r3, [pc, #40]	; (80094bc <xTaskGetSchedulerState+0x30>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	2b00      	cmp	r3, #0
 8009498:	d102      	bne.n	80094a0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800949a:	2301      	movs	r3, #1
 800949c:	607b      	str	r3, [r7, #4]
 800949e:	e008      	b.n	80094b2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80094a0:	4b07      	ldr	r3, [pc, #28]	; (80094c0 <xTaskGetSchedulerState+0x34>)
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d102      	bne.n	80094ae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80094a8:	2302      	movs	r3, #2
 80094aa:	607b      	str	r3, [r7, #4]
 80094ac:	e001      	b.n	80094b2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80094ae:	2300      	movs	r3, #0
 80094b0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80094b2:	687b      	ldr	r3, [r7, #4]
	}
 80094b4:	0018      	movs	r0, r3
 80094b6:	46bd      	mov	sp, r7
 80094b8:	b002      	add	sp, #8
 80094ba:	bd80      	pop	{r7, pc}
 80094bc:	20003874 	.word	0x20003874
 80094c0:	20003890 	.word	0x20003890

080094c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80094d0:	2300      	movs	r3, #0
 80094d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d051      	beq.n	800957e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80094de:	4b2a      	ldr	r3, [pc, #168]	; (8009588 <xTaskPriorityInherit+0xc4>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e4:	429a      	cmp	r2, r3
 80094e6:	d241      	bcs.n	800956c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	699b      	ldr	r3, [r3, #24]
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	db06      	blt.n	80094fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094f0:	4b25      	ldr	r3, [pc, #148]	; (8009588 <xTaskPriorityInherit+0xc4>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094f6:	2207      	movs	r2, #7
 80094f8:	1ad2      	subs	r2, r2, r3
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	6959      	ldr	r1, [r3, #20]
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009506:	0013      	movs	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	189b      	adds	r3, r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	4a1f      	ldr	r2, [pc, #124]	; (800958c <xTaskPriorityInherit+0xc8>)
 8009510:	189b      	adds	r3, r3, r2
 8009512:	4299      	cmp	r1, r3
 8009514:	d122      	bne.n	800955c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009516:	68bb      	ldr	r3, [r7, #8]
 8009518:	3304      	adds	r3, #4
 800951a:	0018      	movs	r0, r3
 800951c:	f7ff f862 	bl	80085e4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009520:	4b19      	ldr	r3, [pc, #100]	; (8009588 <xTaskPriorityInherit+0xc4>)
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009526:	68bb      	ldr	r3, [r7, #8]
 8009528:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800952e:	4b18      	ldr	r3, [pc, #96]	; (8009590 <xTaskPriorityInherit+0xcc>)
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	429a      	cmp	r2, r3
 8009534:	d903      	bls.n	800953e <xTaskPriorityInherit+0x7a>
 8009536:	68bb      	ldr	r3, [r7, #8]
 8009538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800953a:	4b15      	ldr	r3, [pc, #84]	; (8009590 <xTaskPriorityInherit+0xcc>)
 800953c:	601a      	str	r2, [r3, #0]
 800953e:	68bb      	ldr	r3, [r7, #8]
 8009540:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009542:	0013      	movs	r3, r2
 8009544:	009b      	lsls	r3, r3, #2
 8009546:	189b      	adds	r3, r3, r2
 8009548:	009b      	lsls	r3, r3, #2
 800954a:	4a10      	ldr	r2, [pc, #64]	; (800958c <xTaskPriorityInherit+0xc8>)
 800954c:	189a      	adds	r2, r3, r2
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	3304      	adds	r3, #4
 8009552:	0019      	movs	r1, r3
 8009554:	0010      	movs	r0, r2
 8009556:	f7fe ffed 	bl	8008534 <vListInsertEnd>
 800955a:	e004      	b.n	8009566 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800955c:	4b0a      	ldr	r3, [pc, #40]	; (8009588 <xTaskPriorityInherit+0xc4>)
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8009566:	2301      	movs	r3, #1
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	e008      	b.n	800957e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009570:	4b05      	ldr	r3, [pc, #20]	; (8009588 <xTaskPriorityInherit+0xc4>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009576:	429a      	cmp	r2, r3
 8009578:	d201      	bcs.n	800957e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800957a:	2301      	movs	r3, #1
 800957c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800957e:	68fb      	ldr	r3, [r7, #12]
	}
 8009580:	0018      	movs	r0, r3
 8009582:	46bd      	mov	sp, r7
 8009584:	b004      	add	sp, #16
 8009586:	bd80      	pop	{r7, pc}
 8009588:	20003768 	.word	0x20003768
 800958c:	2000376c 	.word	0x2000376c
 8009590:	20003870 	.word	0x20003870

08009594 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8009594:	b580      	push	{r7, lr}
 8009596:	b086      	sub	sp, #24
 8009598:	af00      	add	r7, sp, #0
 800959a:	6078      	str	r0, [r7, #4]
 800959c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80095a2:	2301      	movs	r3, #1
 80095a4:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d058      	beq.n	800965e <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80095ac:	693b      	ldr	r3, [r7, #16]
 80095ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095b0:	2b00      	cmp	r3, #0
 80095b2:	d101      	bne.n	80095b8 <vTaskPriorityDisinheritAfterTimeout+0x24>
 80095b4:	b672      	cpsid	i
 80095b6:	e7fe      	b.n	80095b6 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80095b8:	693b      	ldr	r3, [r7, #16]
 80095ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095bc:	683a      	ldr	r2, [r7, #0]
 80095be:	429a      	cmp	r2, r3
 80095c0:	d902      	bls.n	80095c8 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	617b      	str	r3, [r7, #20]
 80095c6:	e002      	b.n	80095ce <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80095c8:	693b      	ldr	r3, [r7, #16]
 80095ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095cc:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095d2:	697a      	ldr	r2, [r7, #20]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d042      	beq.n	800965e <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095dc:	68fa      	ldr	r2, [r7, #12]
 80095de:	429a      	cmp	r2, r3
 80095e0:	d13d      	bne.n	800965e <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80095e2:	4b21      	ldr	r3, [pc, #132]	; (8009668 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	693a      	ldr	r2, [r7, #16]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d101      	bne.n	80095f0 <vTaskPriorityDisinheritAfterTimeout+0x5c>
 80095ec:	b672      	cpsid	i
 80095ee:	e7fe      	b.n	80095ee <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095f4:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 80095f6:	693b      	ldr	r3, [r7, #16]
 80095f8:	697a      	ldr	r2, [r7, #20]
 80095fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	699b      	ldr	r3, [r3, #24]
 8009600:	2b00      	cmp	r3, #0
 8009602:	db04      	blt.n	800960e <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009604:	697b      	ldr	r3, [r7, #20]
 8009606:	2207      	movs	r2, #7
 8009608:	1ad2      	subs	r2, r2, r3
 800960a:	693b      	ldr	r3, [r7, #16]
 800960c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	6959      	ldr	r1, [r3, #20]
 8009612:	68ba      	ldr	r2, [r7, #8]
 8009614:	0013      	movs	r3, r2
 8009616:	009b      	lsls	r3, r3, #2
 8009618:	189b      	adds	r3, r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4a13      	ldr	r2, [pc, #76]	; (800966c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800961e:	189b      	adds	r3, r3, r2
 8009620:	4299      	cmp	r1, r3
 8009622:	d11c      	bne.n	800965e <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	3304      	adds	r3, #4
 8009628:	0018      	movs	r0, r3
 800962a:	f7fe ffdb 	bl	80085e4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800962e:	693b      	ldr	r3, [r7, #16]
 8009630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009632:	4b0f      	ldr	r3, [pc, #60]	; (8009670 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d903      	bls.n	8009642 <vTaskPriorityDisinheritAfterTimeout+0xae>
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800963e:	4b0c      	ldr	r3, [pc, #48]	; (8009670 <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009646:	0013      	movs	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	189b      	adds	r3, r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	4a07      	ldr	r2, [pc, #28]	; (800966c <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8009650:	189a      	adds	r2, r3, r2
 8009652:	693b      	ldr	r3, [r7, #16]
 8009654:	3304      	adds	r3, #4
 8009656:	0019      	movs	r1, r3
 8009658:	0010      	movs	r0, r2
 800965a:	f7fe ff6b 	bl	8008534 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800965e:	46c0      	nop			; (mov r8, r8)
 8009660:	46bd      	mov	sp, r7
 8009662:	b006      	add	sp, #24
 8009664:	bd80      	pop	{r7, pc}
 8009666:	46c0      	nop			; (mov r8, r8)
 8009668:	20003768 	.word	0x20003768
 800966c:	2000376c 	.word	0x2000376c
 8009670:	20003870 	.word	0x20003870

08009674 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8009674:	b580      	push	{r7, lr}
 8009676:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8009678:	4b06      	ldr	r3, [pc, #24]	; (8009694 <pvTaskIncrementMutexHeldCount+0x20>)
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	2b00      	cmp	r3, #0
 800967e:	d004      	beq.n	800968a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8009680:	4b04      	ldr	r3, [pc, #16]	; (8009694 <pvTaskIncrementMutexHeldCount+0x20>)
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009686:	3201      	adds	r2, #1
 8009688:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800968a:	4b02      	ldr	r3, [pc, #8]	; (8009694 <pvTaskIncrementMutexHeldCount+0x20>)
 800968c:	681b      	ldr	r3, [r3, #0]
	}
 800968e:	0018      	movs	r0, r3
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}
 8009694:	20003768 	.word	0x20003768

08009698 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009698:	b580      	push	{r7, lr}
 800969a:	b084      	sub	sp, #16
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
 80096a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096a2:	4b21      	ldr	r3, [pc, #132]	; (8009728 <prvAddCurrentTaskToDelayedList+0x90>)
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096a8:	4b20      	ldr	r3, [pc, #128]	; (800972c <prvAddCurrentTaskToDelayedList+0x94>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	3304      	adds	r3, #4
 80096ae:	0018      	movs	r0, r3
 80096b0:	f7fe ff98 	bl	80085e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	3301      	adds	r3, #1
 80096b8:	d10b      	bne.n	80096d2 <prvAddCurrentTaskToDelayedList+0x3a>
 80096ba:	683b      	ldr	r3, [r7, #0]
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d008      	beq.n	80096d2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096c0:	4b1a      	ldr	r3, [pc, #104]	; (800972c <prvAddCurrentTaskToDelayedList+0x94>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	1d1a      	adds	r2, r3, #4
 80096c6:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <prvAddCurrentTaskToDelayedList+0x98>)
 80096c8:	0011      	movs	r1, r2
 80096ca:	0018      	movs	r0, r3
 80096cc:	f7fe ff32 	bl	8008534 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80096d0:	e026      	b.n	8009720 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80096d2:	68fa      	ldr	r2, [r7, #12]
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	18d3      	adds	r3, r2, r3
 80096d8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80096da:	4b14      	ldr	r3, [pc, #80]	; (800972c <prvAddCurrentTaskToDelayedList+0x94>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	68ba      	ldr	r2, [r7, #8]
 80096e0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	429a      	cmp	r2, r3
 80096e8:	d209      	bcs.n	80096fe <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096ea:	4b12      	ldr	r3, [pc, #72]	; (8009734 <prvAddCurrentTaskToDelayedList+0x9c>)
 80096ec:	681a      	ldr	r2, [r3, #0]
 80096ee:	4b0f      	ldr	r3, [pc, #60]	; (800972c <prvAddCurrentTaskToDelayedList+0x94>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	3304      	adds	r3, #4
 80096f4:	0019      	movs	r1, r3
 80096f6:	0010      	movs	r0, r2
 80096f8:	f7fe ff3e 	bl	8008578 <vListInsert>
}
 80096fc:	e010      	b.n	8009720 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096fe:	4b0e      	ldr	r3, [pc, #56]	; (8009738 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	4b0a      	ldr	r3, [pc, #40]	; (800972c <prvAddCurrentTaskToDelayedList+0x94>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	3304      	adds	r3, #4
 8009708:	0019      	movs	r1, r3
 800970a:	0010      	movs	r0, r2
 800970c:	f7fe ff34 	bl	8008578 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009710:	4b0a      	ldr	r3, [pc, #40]	; (800973c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68ba      	ldr	r2, [r7, #8]
 8009716:	429a      	cmp	r2, r3
 8009718:	d202      	bcs.n	8009720 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800971a:	4b08      	ldr	r3, [pc, #32]	; (800973c <prvAddCurrentTaskToDelayedList+0xa4>)
 800971c:	68ba      	ldr	r2, [r7, #8]
 800971e:	601a      	str	r2, [r3, #0]
}
 8009720:	46c0      	nop			; (mov r8, r8)
 8009722:	46bd      	mov	sp, r7
 8009724:	b004      	add	sp, #16
 8009726:	bd80      	pop	{r7, pc}
 8009728:	2000386c 	.word	0x2000386c
 800972c:	20003768 	.word	0x20003768
 8009730:	20003854 	.word	0x20003854
 8009734:	20003824 	.word	0x20003824
 8009738:	20003820 	.word	0x20003820
 800973c:	20003888 	.word	0x20003888

08009740 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	3b04      	subs	r3, #4
 8009750:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009752:	68fb      	ldr	r3, [r7, #12]
 8009754:	2280      	movs	r2, #128	; 0x80
 8009756:	0452      	lsls	r2, r2, #17
 8009758:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800975a:	68fb      	ldr	r3, [r7, #12]
 800975c:	3b04      	subs	r3, #4
 800975e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009760:	68ba      	ldr	r2, [r7, #8]
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	3b04      	subs	r3, #4
 800976a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800976c:	4a08      	ldr	r2, [pc, #32]	; (8009790 <pxPortInitialiseStack+0x50>)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	3b14      	subs	r3, #20
 8009776:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009778:	687a      	ldr	r2, [r7, #4]
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	3b20      	subs	r3, #32
 8009782:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009784:	68fb      	ldr	r3, [r7, #12]
}
 8009786:	0018      	movs	r0, r3
 8009788:	46bd      	mov	sp, r7
 800978a:	b004      	add	sp, #16
 800978c:	bd80      	pop	{r7, pc}
 800978e:	46c0      	nop			; (mov r8, r8)
 8009790:	08009795 	.word	0x08009795

08009794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009794:	b580      	push	{r7, lr}
 8009796:	b082      	sub	sp, #8
 8009798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800979a:	2300      	movs	r3, #0
 800979c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800979e:	4b08      	ldr	r3, [pc, #32]	; (80097c0 <prvTaskExitError+0x2c>)
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	3301      	adds	r3, #1
 80097a4:	d001      	beq.n	80097aa <prvTaskExitError+0x16>
 80097a6:	b672      	cpsid	i
 80097a8:	e7fe      	b.n	80097a8 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80097aa:	b672      	cpsid	i
	while( ulDummy == 0 )
 80097ac:	46c0      	nop			; (mov r8, r8)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d0fc      	beq.n	80097ae <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097b4:	46c0      	nop			; (mov r8, r8)
 80097b6:	46c0      	nop			; (mov r8, r8)
 80097b8:	46bd      	mov	sp, r7
 80097ba:	b002      	add	sp, #8
 80097bc:	bd80      	pop	{r7, pc}
 80097be:	46c0      	nop			; (mov r8, r8)
 80097c0:	2000000c 	.word	0x2000000c

080097c4 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80097c4:	b580      	push	{r7, lr}
 80097c6:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80097c8:	46c0      	nop			; (mov r8, r8)
 80097ca:	46bd      	mov	sp, r7
 80097cc:	bd80      	pop	{r7, pc}
	...

080097d0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 80097d0:	4a0b      	ldr	r2, [pc, #44]	; (8009800 <pxCurrentTCBConst2>)
 80097d2:	6813      	ldr	r3, [r2, #0]
 80097d4:	6818      	ldr	r0, [r3, #0]
 80097d6:	3020      	adds	r0, #32
 80097d8:	f380 8809 	msr	PSP, r0
 80097dc:	2002      	movs	r0, #2
 80097de:	f380 8814 	msr	CONTROL, r0
 80097e2:	f3bf 8f6f 	isb	sy
 80097e6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 80097e8:	46ae      	mov	lr, r5
 80097ea:	bc08      	pop	{r3}
 80097ec:	bc04      	pop	{r2}
 80097ee:	b662      	cpsie	i
 80097f0:	4718      	bx	r3
 80097f2:	46c0      	nop			; (mov r8, r8)
 80097f4:	46c0      	nop			; (mov r8, r8)
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	46c0      	nop			; (mov r8, r8)
 80097fa:	46c0      	nop			; (mov r8, r8)
 80097fc:	46c0      	nop			; (mov r8, r8)
 80097fe:	46c0      	nop			; (mov r8, r8)

08009800 <pxCurrentTCBConst2>:
 8009800:	20003768 	.word	0x20003768
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009804:	46c0      	nop			; (mov r8, r8)
 8009806:	46c0      	nop			; (mov r8, r8)

08009808 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009808:	b580      	push	{r7, lr}
 800980a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800980c:	4b0e      	ldr	r3, [pc, #56]	; (8009848 <xPortStartScheduler+0x40>)
 800980e:	681a      	ldr	r2, [r3, #0]
 8009810:	4b0d      	ldr	r3, [pc, #52]	; (8009848 <xPortStartScheduler+0x40>)
 8009812:	21ff      	movs	r1, #255	; 0xff
 8009814:	0409      	lsls	r1, r1, #16
 8009816:	430a      	orrs	r2, r1
 8009818:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800981a:	4b0b      	ldr	r3, [pc, #44]	; (8009848 <xPortStartScheduler+0x40>)
 800981c:	681a      	ldr	r2, [r3, #0]
 800981e:	4b0a      	ldr	r3, [pc, #40]	; (8009848 <xPortStartScheduler+0x40>)
 8009820:	21ff      	movs	r1, #255	; 0xff
 8009822:	0609      	lsls	r1, r1, #24
 8009824:	430a      	orrs	r2, r1
 8009826:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009828:	f000 f898 	bl	800995c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800982c:	4b07      	ldr	r3, [pc, #28]	; (800984c <xPortStartScheduler+0x44>)
 800982e:	2200      	movs	r2, #0
 8009830:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009832:	f7ff ffcd 	bl	80097d0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009836:	f7ff fc3d 	bl	80090b4 <vTaskSwitchContext>
	prvTaskExitError();
 800983a:	f7ff ffab 	bl	8009794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800983e:	2300      	movs	r3, #0
}
 8009840:	0018      	movs	r0, r3
 8009842:	46bd      	mov	sp, r7
 8009844:	bd80      	pop	{r7, pc}
 8009846:	46c0      	nop			; (mov r8, r8)
 8009848:	e000ed20 	.word	0xe000ed20
 800984c:	2000000c 	.word	0x2000000c

08009850 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009850:	b580      	push	{r7, lr}
 8009852:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009854:	4b05      	ldr	r3, [pc, #20]	; (800986c <vPortYield+0x1c>)
 8009856:	2280      	movs	r2, #128	; 0x80
 8009858:	0552      	lsls	r2, r2, #21
 800985a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800985c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009860:	f3bf 8f6f 	isb	sy
}
 8009864:	46c0      	nop			; (mov r8, r8)
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	46c0      	nop			; (mov r8, r8)
 800986c:	e000ed04 	.word	0xe000ed04

08009870 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009870:	b580      	push	{r7, lr}
 8009872:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8009874:	b672      	cpsid	i
	uxCriticalNesting++;
 8009876:	4b06      	ldr	r3, [pc, #24]	; (8009890 <vPortEnterCritical+0x20>)
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	4b04      	ldr	r3, [pc, #16]	; (8009890 <vPortEnterCritical+0x20>)
 800987e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009880:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009884:	f3bf 8f6f 	isb	sy
}
 8009888:	46c0      	nop			; (mov r8, r8)
 800988a:	46bd      	mov	sp, r7
 800988c:	bd80      	pop	{r7, pc}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	2000000c 	.word	0x2000000c

08009894 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009894:	b580      	push	{r7, lr}
 8009896:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009898:	4b09      	ldr	r3, [pc, #36]	; (80098c0 <vPortExitCritical+0x2c>)
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	2b00      	cmp	r3, #0
 800989e:	d101      	bne.n	80098a4 <vPortExitCritical+0x10>
 80098a0:	b672      	cpsid	i
 80098a2:	e7fe      	b.n	80098a2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80098a4:	4b06      	ldr	r3, [pc, #24]	; (80098c0 <vPortExitCritical+0x2c>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	1e5a      	subs	r2, r3, #1
 80098aa:	4b05      	ldr	r3, [pc, #20]	; (80098c0 <vPortExitCritical+0x2c>)
 80098ac:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80098ae:	4b04      	ldr	r3, [pc, #16]	; (80098c0 <vPortExitCritical+0x2c>)
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d100      	bne.n	80098b8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80098b6:	b662      	cpsie	i
	}
}
 80098b8:	46c0      	nop			; (mov r8, r8)
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}
 80098be:	46c0      	nop			; (mov r8, r8)
 80098c0:	2000000c 	.word	0x2000000c

080098c4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 80098c4:	f3ef 8010 	mrs	r0, PRIMASK
 80098c8:	b672      	cpsid	i
 80098ca:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80098cc:	46c0      	nop			; (mov r8, r8)
 80098ce:	0018      	movs	r0, r3

080098d0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80098d0:	f380 8810 	msr	PRIMASK, r0
 80098d4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80098d6:	46c0      	nop			; (mov r8, r8)
	...

080098e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80098e0:	f3ef 8009 	mrs	r0, PSP
 80098e4:	4b0e      	ldr	r3, [pc, #56]	; (8009920 <pxCurrentTCBConst>)
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	3820      	subs	r0, #32
 80098ea:	6010      	str	r0, [r2, #0]
 80098ec:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80098ee:	4644      	mov	r4, r8
 80098f0:	464d      	mov	r5, r9
 80098f2:	4656      	mov	r6, sl
 80098f4:	465f      	mov	r7, fp
 80098f6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80098f8:	b508      	push	{r3, lr}
 80098fa:	b672      	cpsid	i
 80098fc:	f7ff fbda 	bl	80090b4 <vTaskSwitchContext>
 8009900:	b662      	cpsie	i
 8009902:	bc0c      	pop	{r2, r3}
 8009904:	6811      	ldr	r1, [r2, #0]
 8009906:	6808      	ldr	r0, [r1, #0]
 8009908:	3010      	adds	r0, #16
 800990a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800990c:	46a0      	mov	r8, r4
 800990e:	46a9      	mov	r9, r5
 8009910:	46b2      	mov	sl, r6
 8009912:	46bb      	mov	fp, r7
 8009914:	f380 8809 	msr	PSP, r0
 8009918:	3820      	subs	r0, #32
 800991a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800991c:	4718      	bx	r3
 800991e:	46c0      	nop			; (mov r8, r8)

08009920 <pxCurrentTCBConst>:
 8009920:	20003768 	.word	0x20003768
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009924:	46c0      	nop			; (mov r8, r8)
 8009926:	46c0      	nop			; (mov r8, r8)

08009928 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b082      	sub	sp, #8
 800992c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800992e:	f7ff ffc9 	bl	80098c4 <ulSetInterruptMaskFromISR>
 8009932:	0003      	movs	r3, r0
 8009934:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009936:	f7ff fb0d 	bl	8008f54 <xTaskIncrementTick>
 800993a:	1e03      	subs	r3, r0, #0
 800993c:	d003      	beq.n	8009946 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800993e:	4b06      	ldr	r3, [pc, #24]	; (8009958 <SysTick_Handler+0x30>)
 8009940:	2280      	movs	r2, #128	; 0x80
 8009942:	0552      	lsls	r2, r2, #21
 8009944:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	0018      	movs	r0, r3
 800994a:	f7ff ffc1 	bl	80098d0 <vClearInterruptMaskFromISR>
}
 800994e:	46c0      	nop			; (mov r8, r8)
 8009950:	46bd      	mov	sp, r7
 8009952:	b002      	add	sp, #8
 8009954:	bd80      	pop	{r7, pc}
 8009956:	46c0      	nop			; (mov r8, r8)
 8009958:	e000ed04 	.word	0xe000ed04

0800995c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800995c:	b580      	push	{r7, lr}
 800995e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009960:	4b0b      	ldr	r3, [pc, #44]	; (8009990 <vPortSetupTimerInterrupt+0x34>)
 8009962:	2200      	movs	r2, #0
 8009964:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009966:	4b0b      	ldr	r3, [pc, #44]	; (8009994 <vPortSetupTimerInterrupt+0x38>)
 8009968:	2200      	movs	r2, #0
 800996a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800996c:	4b0a      	ldr	r3, [pc, #40]	; (8009998 <vPortSetupTimerInterrupt+0x3c>)
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	22fa      	movs	r2, #250	; 0xfa
 8009972:	0091      	lsls	r1, r2, #2
 8009974:	0018      	movs	r0, r3
 8009976:	f7f6 fbd1 	bl	800011c <__udivsi3>
 800997a:	0003      	movs	r3, r0
 800997c:	001a      	movs	r2, r3
 800997e:	4b07      	ldr	r3, [pc, #28]	; (800999c <vPortSetupTimerInterrupt+0x40>)
 8009980:	3a01      	subs	r2, #1
 8009982:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009984:	4b02      	ldr	r3, [pc, #8]	; (8009990 <vPortSetupTimerInterrupt+0x34>)
 8009986:	2207      	movs	r2, #7
 8009988:	601a      	str	r2, [r3, #0]
}
 800998a:	46c0      	nop			; (mov r8, r8)
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	e000e010 	.word	0xe000e010
 8009994:	e000e018 	.word	0xe000e018
 8009998:	20000000 	.word	0x20000000
 800999c:	e000e014 	.word	0xe000e014

080099a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099a0:	b580      	push	{r7, lr}
 80099a2:	b086      	sub	sp, #24
 80099a4:	af00      	add	r7, sp, #0
 80099a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099a8:	2300      	movs	r3, #0
 80099aa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80099ac:	f7ff fa3a 	bl	8008e24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099b0:	4b4b      	ldr	r3, [pc, #300]	; (8009ae0 <pvPortMalloc+0x140>)
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d101      	bne.n	80099bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099b8:	f000 f8ec 	bl	8009b94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099bc:	4b49      	ldr	r3, [pc, #292]	; (8009ae4 <pvPortMalloc+0x144>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	4013      	ands	r3, r2
 80099c4:	d000      	beq.n	80099c8 <pvPortMalloc+0x28>
 80099c6:	e07e      	b.n	8009ac6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d012      	beq.n	80099f4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 80099ce:	2208      	movs	r2, #8
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	189b      	adds	r3, r3, r2
 80099d4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2207      	movs	r2, #7
 80099da:	4013      	ands	r3, r2
 80099dc:	d00a      	beq.n	80099f4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2207      	movs	r2, #7
 80099e2:	4393      	bics	r3, r2
 80099e4:	3308      	adds	r3, #8
 80099e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2207      	movs	r2, #7
 80099ec:	4013      	ands	r3, r2
 80099ee:	d001      	beq.n	80099f4 <pvPortMalloc+0x54>
 80099f0:	b672      	cpsid	i
 80099f2:	e7fe      	b.n	80099f2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d065      	beq.n	8009ac6 <pvPortMalloc+0x126>
 80099fa:	4b3b      	ldr	r3, [pc, #236]	; (8009ae8 <pvPortMalloc+0x148>)
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	429a      	cmp	r2, r3
 8009a02:	d860      	bhi.n	8009ac6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a04:	4b39      	ldr	r3, [pc, #228]	; (8009aec <pvPortMalloc+0x14c>)
 8009a06:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009a08:	4b38      	ldr	r3, [pc, #224]	; (8009aec <pvPortMalloc+0x14c>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a0e:	e004      	b.n	8009a1a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009a10:	697b      	ldr	r3, [r7, #20]
 8009a12:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	685b      	ldr	r3, [r3, #4]
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	429a      	cmp	r2, r3
 8009a22:	d903      	bls.n	8009a2c <pvPortMalloc+0x8c>
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d1f1      	bne.n	8009a10 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a2c:	4b2c      	ldr	r3, [pc, #176]	; (8009ae0 <pvPortMalloc+0x140>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	429a      	cmp	r2, r3
 8009a34:	d047      	beq.n	8009ac6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a36:	693b      	ldr	r3, [r7, #16]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	2208      	movs	r2, #8
 8009a3c:	189b      	adds	r3, r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a40:	697b      	ldr	r3, [r7, #20]
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a48:	697b      	ldr	r3, [r7, #20]
 8009a4a:	685a      	ldr	r2, [r3, #4]
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	1ad2      	subs	r2, r2, r3
 8009a50:	2308      	movs	r3, #8
 8009a52:	005b      	lsls	r3, r3, #1
 8009a54:	429a      	cmp	r2, r3
 8009a56:	d916      	bls.n	8009a86 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	18d3      	adds	r3, r2, r3
 8009a5e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	2207      	movs	r2, #7
 8009a64:	4013      	ands	r3, r2
 8009a66:	d001      	beq.n	8009a6c <pvPortMalloc+0xcc>
 8009a68:	b672      	cpsid	i
 8009a6a:	e7fe      	b.n	8009a6a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	685a      	ldr	r2, [r3, #4]
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	1ad2      	subs	r2, r2, r3
 8009a74:	68bb      	ldr	r3, [r7, #8]
 8009a76:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009a78:	697b      	ldr	r3, [r7, #20]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	0018      	movs	r0, r3
 8009a82:	f000 f8e7 	bl	8009c54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009a86:	4b18      	ldr	r3, [pc, #96]	; (8009ae8 <pvPortMalloc+0x148>)
 8009a88:	681a      	ldr	r2, [r3, #0]
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	685b      	ldr	r3, [r3, #4]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <pvPortMalloc+0x148>)
 8009a92:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009a94:	4b14      	ldr	r3, [pc, #80]	; (8009ae8 <pvPortMalloc+0x148>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	4b15      	ldr	r3, [pc, #84]	; (8009af0 <pvPortMalloc+0x150>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	429a      	cmp	r2, r3
 8009a9e:	d203      	bcs.n	8009aa8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009aa0:	4b11      	ldr	r3, [pc, #68]	; (8009ae8 <pvPortMalloc+0x148>)
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	4b12      	ldr	r3, [pc, #72]	; (8009af0 <pvPortMalloc+0x150>)
 8009aa6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	685a      	ldr	r2, [r3, #4]
 8009aac:	4b0d      	ldr	r3, [pc, #52]	; (8009ae4 <pvPortMalloc+0x144>)
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	431a      	orrs	r2, r3
 8009ab2:	697b      	ldr	r3, [r7, #20]
 8009ab4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009abc:	4b0d      	ldr	r3, [pc, #52]	; (8009af4 <pvPortMalloc+0x154>)
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	1c5a      	adds	r2, r3, #1
 8009ac2:	4b0c      	ldr	r3, [pc, #48]	; (8009af4 <pvPortMalloc+0x154>)
 8009ac4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009ac6:	f7ff f9b9 	bl	8008e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	2207      	movs	r2, #7
 8009ace:	4013      	ands	r3, r2
 8009ad0:	d001      	beq.n	8009ad6 <pvPortMalloc+0x136>
 8009ad2:	b672      	cpsid	i
 8009ad4:	e7fe      	b.n	8009ad4 <pvPortMalloc+0x134>
	return pvReturn;
 8009ad6:	68fb      	ldr	r3, [r7, #12]
}
 8009ad8:	0018      	movs	r0, r3
 8009ada:	46bd      	mov	sp, r7
 8009adc:	b006      	add	sp, #24
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	200086bc 	.word	0x200086bc
 8009ae4:	200086d0 	.word	0x200086d0
 8009ae8:	200086c0 	.word	0x200086c0
 8009aec:	200086b4 	.word	0x200086b4
 8009af0:	200086c4 	.word	0x200086c4
 8009af4:	200086c8 	.word	0x200086c8

08009af8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009af8:	b580      	push	{r7, lr}
 8009afa:	b084      	sub	sp, #16
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d03a      	beq.n	8009b80 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b0a:	2308      	movs	r3, #8
 8009b0c:	425b      	negs	r3, r3
 8009b0e:	68fa      	ldr	r2, [r7, #12]
 8009b10:	18d3      	adds	r3, r2, r3
 8009b12:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	685a      	ldr	r2, [r3, #4]
 8009b1c:	4b1a      	ldr	r3, [pc, #104]	; (8009b88 <vPortFree+0x90>)
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	4013      	ands	r3, r2
 8009b22:	d101      	bne.n	8009b28 <vPortFree+0x30>
 8009b24:	b672      	cpsid	i
 8009b26:	e7fe      	b.n	8009b26 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	2b00      	cmp	r3, #0
 8009b2e:	d001      	beq.n	8009b34 <vPortFree+0x3c>
 8009b30:	b672      	cpsid	i
 8009b32:	e7fe      	b.n	8009b32 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b34:	68bb      	ldr	r3, [r7, #8]
 8009b36:	685a      	ldr	r2, [r3, #4]
 8009b38:	4b13      	ldr	r3, [pc, #76]	; (8009b88 <vPortFree+0x90>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	4013      	ands	r3, r2
 8009b3e:	d01f      	beq.n	8009b80 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d11b      	bne.n	8009b80 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	685a      	ldr	r2, [r3, #4]
 8009b4c:	4b0e      	ldr	r3, [pc, #56]	; (8009b88 <vPortFree+0x90>)
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	43db      	mvns	r3, r3
 8009b52:	401a      	ands	r2, r3
 8009b54:	68bb      	ldr	r3, [r7, #8]
 8009b56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b58:	f7ff f964 	bl	8008e24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	4b0a      	ldr	r3, [pc, #40]	; (8009b8c <vPortFree+0x94>)
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	18d2      	adds	r2, r2, r3
 8009b66:	4b09      	ldr	r3, [pc, #36]	; (8009b8c <vPortFree+0x94>)
 8009b68:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009b6a:	68bb      	ldr	r3, [r7, #8]
 8009b6c:	0018      	movs	r0, r3
 8009b6e:	f000 f871 	bl	8009c54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009b72:	4b07      	ldr	r3, [pc, #28]	; (8009b90 <vPortFree+0x98>)
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	1c5a      	adds	r2, r3, #1
 8009b78:	4b05      	ldr	r3, [pc, #20]	; (8009b90 <vPortFree+0x98>)
 8009b7a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8009b7c:	f7ff f95e 	bl	8008e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009b80:	46c0      	nop			; (mov r8, r8)
 8009b82:	46bd      	mov	sp, r7
 8009b84:	b004      	add	sp, #16
 8009b86:	bd80      	pop	{r7, pc}
 8009b88:	200086d0 	.word	0x200086d0
 8009b8c:	200086c0 	.word	0x200086c0
 8009b90:	200086cc 	.word	0x200086cc

08009b94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b084      	sub	sp, #16
 8009b98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009b9a:	4b27      	ldr	r3, [pc, #156]	; (8009c38 <prvHeapInit+0xa4>)
 8009b9c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009b9e:	4b27      	ldr	r3, [pc, #156]	; (8009c3c <prvHeapInit+0xa8>)
 8009ba0:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	2207      	movs	r2, #7
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	d00c      	beq.n	8009bc4 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	3307      	adds	r3, #7
 8009bae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	2207      	movs	r2, #7
 8009bb4:	4393      	bics	r3, r2
 8009bb6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bb8:	68ba      	ldr	r2, [r7, #8]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	1ad2      	subs	r2, r2, r3
 8009bbe:	4b1f      	ldr	r3, [pc, #124]	; (8009c3c <prvHeapInit+0xa8>)
 8009bc0:	18d3      	adds	r3, r2, r3
 8009bc2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009bc8:	4b1d      	ldr	r3, [pc, #116]	; (8009c40 <prvHeapInit+0xac>)
 8009bca:	687a      	ldr	r2, [r7, #4]
 8009bcc:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009bce:	4b1c      	ldr	r3, [pc, #112]	; (8009c40 <prvHeapInit+0xac>)
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	18d3      	adds	r3, r2, r3
 8009bda:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009bdc:	2208      	movs	r2, #8
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	1a9b      	subs	r3, r3, r2
 8009be2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2207      	movs	r2, #7
 8009be8:	4393      	bics	r3, r2
 8009bea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009bec:	68fa      	ldr	r2, [r7, #12]
 8009bee:	4b15      	ldr	r3, [pc, #84]	; (8009c44 <prvHeapInit+0xb0>)
 8009bf0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009bf2:	4b14      	ldr	r3, [pc, #80]	; (8009c44 <prvHeapInit+0xb0>)
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	2200      	movs	r2, #0
 8009bf8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009bfa:	4b12      	ldr	r3, [pc, #72]	; (8009c44 <prvHeapInit+0xb0>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c06:	683b      	ldr	r3, [r7, #0]
 8009c08:	68fa      	ldr	r2, [r7, #12]
 8009c0a:	1ad2      	subs	r2, r2, r3
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c10:	4b0c      	ldr	r3, [pc, #48]	; (8009c44 <prvHeapInit+0xb0>)
 8009c12:	681a      	ldr	r2, [r3, #0]
 8009c14:	683b      	ldr	r3, [r7, #0]
 8009c16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	685a      	ldr	r2, [r3, #4]
 8009c1c:	4b0a      	ldr	r3, [pc, #40]	; (8009c48 <prvHeapInit+0xb4>)
 8009c1e:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c20:	683b      	ldr	r3, [r7, #0]
 8009c22:	685a      	ldr	r2, [r3, #4]
 8009c24:	4b09      	ldr	r3, [pc, #36]	; (8009c4c <prvHeapInit+0xb8>)
 8009c26:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c28:	4b09      	ldr	r3, [pc, #36]	; (8009c50 <prvHeapInit+0xbc>)
 8009c2a:	2280      	movs	r2, #128	; 0x80
 8009c2c:	0612      	lsls	r2, r2, #24
 8009c2e:	601a      	str	r2, [r3, #0]
}
 8009c30:	46c0      	nop			; (mov r8, r8)
 8009c32:	46bd      	mov	sp, r7
 8009c34:	b004      	add	sp, #16
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	00004e20 	.word	0x00004e20
 8009c3c:	20003894 	.word	0x20003894
 8009c40:	200086b4 	.word	0x200086b4
 8009c44:	200086bc 	.word	0x200086bc
 8009c48:	200086c4 	.word	0x200086c4
 8009c4c:	200086c0 	.word	0x200086c0
 8009c50:	200086d0 	.word	0x200086d0

08009c54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b084      	sub	sp, #16
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c5c:	4b27      	ldr	r3, [pc, #156]	; (8009cfc <prvInsertBlockIntoFreeList+0xa8>)
 8009c5e:	60fb      	str	r3, [r7, #12]
 8009c60:	e002      	b.n	8009c68 <prvInsertBlockIntoFreeList+0x14>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	60fb      	str	r3, [r7, #12]
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	687a      	ldr	r2, [r7, #4]
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d8f7      	bhi.n	8009c62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	685b      	ldr	r3, [r3, #4]
 8009c7a:	68ba      	ldr	r2, [r7, #8]
 8009c7c:	18d3      	adds	r3, r2, r3
 8009c7e:	687a      	ldr	r2, [r7, #4]
 8009c80:	429a      	cmp	r2, r3
 8009c82:	d108      	bne.n	8009c96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	685a      	ldr	r2, [r3, #4]
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	685b      	ldr	r3, [r3, #4]
 8009c8c:	18d2      	adds	r2, r2, r3
 8009c8e:	68fb      	ldr	r3, [r7, #12]
 8009c90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	685b      	ldr	r3, [r3, #4]
 8009c9e:	68ba      	ldr	r2, [r7, #8]
 8009ca0:	18d2      	adds	r2, r2, r3
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	429a      	cmp	r2, r3
 8009ca8:	d118      	bne.n	8009cdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681a      	ldr	r2, [r3, #0]
 8009cae:	4b14      	ldr	r3, [pc, #80]	; (8009d00 <prvInsertBlockIntoFreeList+0xac>)
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	429a      	cmp	r2, r3
 8009cb4:	d00d      	beq.n	8009cd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	685a      	ldr	r2, [r3, #4]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	685b      	ldr	r3, [r3, #4]
 8009cc0:	18d2      	adds	r2, r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	681a      	ldr	r2, [r3, #0]
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	601a      	str	r2, [r3, #0]
 8009cd0:	e008      	b.n	8009ce4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009cd2:	4b0b      	ldr	r3, [pc, #44]	; (8009d00 <prvInsertBlockIntoFreeList+0xac>)
 8009cd4:	681a      	ldr	r2, [r3, #0]
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	e003      	b.n	8009ce4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681a      	ldr	r2, [r3, #0]
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ce4:	68fa      	ldr	r2, [r7, #12]
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	429a      	cmp	r2, r3
 8009cea:	d002      	beq.n	8009cf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009cf2:	46c0      	nop			; (mov r8, r8)
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	b004      	add	sp, #16
 8009cf8:	bd80      	pop	{r7, pc}
 8009cfa:	46c0      	nop			; (mov r8, r8)
 8009cfc:	200086b4 	.word	0x200086b4
 8009d00:	200086bc 	.word	0x200086bc

08009d04 <LIDAR_start>:
#include "drv_LIDAR.h"
#include "stdio.h"

//Start scanning and export point cloud data
//Sustained response
int LIDAR_start(h_LIDAR_t * h_LIDAR){
 8009d04:	b590      	push	{r4, r7, lr}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_START};
 8009d0c:	240c      	movs	r4, #12
 8009d0e:	193b      	adds	r3, r7, r4
 8009d10:	4a0a      	ldr	r2, [pc, #40]	; (8009d3c <LIDAR_start+0x38>)
 8009d12:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.dma_receive(h_LIDAR->data_buff,DATA_BUFF_SIZE);
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	687a      	ldr	r2, [r7, #4]
 8009d1a:	3271      	adds	r2, #113	; 0x71
 8009d1c:	21fa      	movs	r1, #250	; 0xfa
 8009d1e:	0109      	lsls	r1, r1, #4
 8009d20:	0010      	movs	r0, r2
 8009d22:	4798      	blx	r3
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	193a      	adds	r2, r7, r4
 8009d2a:	2102      	movs	r1, #2
 8009d2c:	0010      	movs	r0, r2
 8009d2e:	4798      	blx	r3
	return 0;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	0018      	movs	r0, r3
 8009d34:	46bd      	mov	sp, r7
 8009d36:	b005      	add	sp, #20
 8009d38:	bd90      	pop	{r4, r7, pc}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	000060a5 	.word	0x000060a5

08009d40 <LIDAR_stop>:

//Stop and stop scanning
//No answer
int LIDAR_stop(h_LIDAR_t * h_LIDAR){
 8009d40:	b580      	push	{r7, lr}
 8009d42:	b084      	sub	sp, #16
 8009d44:	af00      	add	r7, sp, #0
 8009d46:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_STOP};
 8009d48:	210c      	movs	r1, #12
 8009d4a:	187b      	adds	r3, r7, r1
 8009d4c:	4a06      	ldr	r2, [pc, #24]	; (8009d68 <LIDAR_stop+0x28>)
 8009d4e:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	187a      	adds	r2, r7, r1
 8009d56:	2102      	movs	r1, #2
 8009d58:	0010      	movs	r0, r2
 8009d5a:	4798      	blx	r3
	return 0;
 8009d5c:	2300      	movs	r3, #0
}
 8009d5e:	0018      	movs	r0, r3
 8009d60:	46bd      	mov	sp, r7
 8009d62:	b004      	add	sp, #16
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	46c0      	nop			; (mov r8, r8)
 8009d68:	000065a5 	.word	0x000065a5

08009d6c <LIDAR_get_info>:

//Get device information
//Single response
int LIDAR_get_info(h_LIDAR_t * h_LIDAR){
 8009d6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009d6e:	46de      	mov	lr, fp
 8009d70:	4657      	mov	r7, sl
 8009d72:	464e      	mov	r6, r9
 8009d74:	4645      	mov	r5, r8
 8009d76:	b5e0      	push	{r5, r6, r7, lr}
 8009d78:	b09b      	sub	sp, #108	; 0x6c
 8009d7a:	af10      	add	r7, sp, #64	; 0x40
 8009d7c:	61f8      	str	r0, [r7, #28]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_INFO}; //Buffer de commande
 8009d7e:	210c      	movs	r1, #12
 8009d80:	2018      	movs	r0, #24
 8009d82:	180b      	adds	r3, r1, r0
 8009d84:	19db      	adds	r3, r3, r7
 8009d86:	4a61      	ldr	r2, [pc, #388]	; (8009f0c <LIDAR_get_info+0x1a0>)
 8009d88:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	180a      	adds	r2, r1, r0
 8009d90:	19d2      	adds	r2, r2, r7
 8009d92:	2102      	movs	r1, #2
 8009d94:	0010      	movs	r0, r2
 8009d96:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->info_buff,INFO_BUFF_SIZE);
 8009d98:	69fb      	ldr	r3, [r7, #28]
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	69fa      	ldr	r2, [r7, #28]
 8009d9e:	324c      	adds	r2, #76	; 0x4c
 8009da0:	211b      	movs	r1, #27
 8009da2:	0010      	movs	r0, r2
 8009da4:	4798      	blx	r3

	h_LIDAR->device_info.start_sign=(h_LIDAR->info_buff[0]<<8)|h_LIDAR->info_buff[1];
 8009da6:	69fb      	ldr	r3, [r7, #28]
 8009da8:	224c      	movs	r2, #76	; 0x4c
 8009daa:	5c9b      	ldrb	r3, [r3, r2]
 8009dac:	021b      	lsls	r3, r3, #8
 8009dae:	b21a      	sxth	r2, r3
 8009db0:	69fb      	ldr	r3, [r7, #28]
 8009db2:	214d      	movs	r1, #77	; 0x4d
 8009db4:	5c5b      	ldrb	r3, [r3, r1]
 8009db6:	b21b      	sxth	r3, r3
 8009db8:	4313      	orrs	r3, r2
 8009dba:	b21b      	sxth	r3, r3
 8009dbc:	b29a      	uxth	r2, r3
 8009dbe:	69fb      	ldr	r3, [r7, #28]
 8009dc0:	851a      	strh	r2, [r3, #40]	; 0x28
	h_LIDAR->device_info.lenght=(h_LIDAR->info_buff[2])|(h_LIDAR->info_buff[3]<<8)|(h_LIDAR->info_buff[4]<<16);
 8009dc2:	69fb      	ldr	r3, [r7, #28]
 8009dc4:	224e      	movs	r2, #78	; 0x4e
 8009dc6:	5c9b      	ldrb	r3, [r3, r2]
 8009dc8:	0019      	movs	r1, r3
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	224f      	movs	r2, #79	; 0x4f
 8009dce:	5c9b      	ldrb	r3, [r3, r2]
 8009dd0:	021b      	lsls	r3, r3, #8
 8009dd2:	000a      	movs	r2, r1
 8009dd4:	431a      	orrs	r2, r3
 8009dd6:	69fb      	ldr	r3, [r7, #28]
 8009dd8:	2150      	movs	r1, #80	; 0x50
 8009dda:	5c5b      	ldrb	r3, [r3, r1]
 8009ddc:	041b      	lsls	r3, r3, #16
 8009dde:	4313      	orrs	r3, r2
 8009de0:	001a      	movs	r2, r3
 8009de2:	69fb      	ldr	r3, [r7, #28]
 8009de4:	62da      	str	r2, [r3, #44]	; 0x2c
	h_LIDAR->device_info.mode=h_LIDAR->info_buff[5];
 8009de6:	69fb      	ldr	r3, [r7, #28]
 8009de8:	2251      	movs	r2, #81	; 0x51
 8009dea:	5c99      	ldrb	r1, [r3, r2]
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	2230      	movs	r2, #48	; 0x30
 8009df0:	5499      	strb	r1, [r3, r2]
	h_LIDAR->device_info.type_code=h_LIDAR->info_buff[6];
 8009df2:	69fb      	ldr	r3, [r7, #28]
 8009df4:	2252      	movs	r2, #82	; 0x52
 8009df6:	5c99      	ldrb	r1, [r3, r2]
 8009df8:	69fb      	ldr	r3, [r7, #28]
 8009dfa:	2231      	movs	r2, #49	; 0x31
 8009dfc:	5499      	strb	r1, [r3, r2]
	h_LIDAR->device_info.model=h_LIDAR->info_buff[7];
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	2253      	movs	r2, #83	; 0x53
 8009e02:	5c99      	ldrb	r1, [r3, r2]
 8009e04:	69fb      	ldr	r3, [r7, #28]
 8009e06:	2232      	movs	r2, #50	; 0x32
 8009e08:	5499      	strb	r1, [r3, r2]
	snprintf(h_LIDAR->device_info.firmware,6,"%d.%d",h_LIDAR->info_buff[8],h_LIDAR->info_buff[9]);
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	3333      	adds	r3, #51	; 0x33
 8009e0e:	0018      	movs	r0, r3
 8009e10:	69fb      	ldr	r3, [r7, #28]
 8009e12:	2254      	movs	r2, #84	; 0x54
 8009e14:	5c9b      	ldrb	r3, [r3, r2]
 8009e16:	0019      	movs	r1, r3
 8009e18:	69fb      	ldr	r3, [r7, #28]
 8009e1a:	2255      	movs	r2, #85	; 0x55
 8009e1c:	5c9b      	ldrb	r3, [r3, r2]
 8009e1e:	4a3c      	ldr	r2, [pc, #240]	; (8009f10 <LIDAR_get_info+0x1a4>)
 8009e20:	9300      	str	r3, [sp, #0]
 8009e22:	000b      	movs	r3, r1
 8009e24:	2106      	movs	r1, #6
 8009e26:	f000 fecd 	bl	800abc4 <sniprintf>
	h_LIDAR->device_info.hardware=h_LIDAR->info_buff[10];
 8009e2a:	69fb      	ldr	r3, [r7, #28]
 8009e2c:	2256      	movs	r2, #86	; 0x56
 8009e2e:	5c99      	ldrb	r1, [r3, r2]
 8009e30:	69fb      	ldr	r3, [r7, #28]
 8009e32:	2239      	movs	r2, #57	; 0x39
 8009e34:	5499      	strb	r1, [r3, r2]
	snprintf(h_LIDAR->device_info.serial,17,"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",h_LIDAR->info_buff[11],h_LIDAR->info_buff[12],h_LIDAR->info_buff[13],h_LIDAR->info_buff[14],h_LIDAR->info_buff[15],h_LIDAR->info_buff[16],h_LIDAR->info_buff[17],h_LIDAR->info_buff[18],h_LIDAR->info_buff[19],h_LIDAR->info_buff[20],h_LIDAR->info_buff[21],h_LIDAR->info_buff[22],h_LIDAR->info_buff[23],h_LIDAR->info_buff[24],h_LIDAR->info_buff[25],h_LIDAR->info_buff[26]);
 8009e36:	69fb      	ldr	r3, [r7, #28]
 8009e38:	333a      	adds	r3, #58	; 0x3a
 8009e3a:	001d      	movs	r5, r3
 8009e3c:	69fb      	ldr	r3, [r7, #28]
 8009e3e:	2257      	movs	r2, #87	; 0x57
 8009e40:	5c9b      	ldrb	r3, [r3, r2]
 8009e42:	61bb      	str	r3, [r7, #24]
 8009e44:	69fb      	ldr	r3, [r7, #28]
 8009e46:	2258      	movs	r2, #88	; 0x58
 8009e48:	5c9b      	ldrb	r3, [r3, r2]
 8009e4a:	4698      	mov	r8, r3
 8009e4c:	69fb      	ldr	r3, [r7, #28]
 8009e4e:	2259      	movs	r2, #89	; 0x59
 8009e50:	5c9b      	ldrb	r3, [r3, r2]
 8009e52:	4699      	mov	r9, r3
 8009e54:	69fb      	ldr	r3, [r7, #28]
 8009e56:	225a      	movs	r2, #90	; 0x5a
 8009e58:	5c9b      	ldrb	r3, [r3, r2]
 8009e5a:	469a      	mov	sl, r3
 8009e5c:	69fb      	ldr	r3, [r7, #28]
 8009e5e:	225b      	movs	r2, #91	; 0x5b
 8009e60:	5c9b      	ldrb	r3, [r3, r2]
 8009e62:	469b      	mov	fp, r3
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	225c      	movs	r2, #92	; 0x5c
 8009e68:	5c9b      	ldrb	r3, [r3, r2]
 8009e6a:	617b      	str	r3, [r7, #20]
 8009e6c:	69fb      	ldr	r3, [r7, #28]
 8009e6e:	225d      	movs	r2, #93	; 0x5d
 8009e70:	5c9b      	ldrb	r3, [r3, r2]
 8009e72:	613b      	str	r3, [r7, #16]
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	225e      	movs	r2, #94	; 0x5e
 8009e78:	5c9b      	ldrb	r3, [r3, r2]
 8009e7a:	60fb      	str	r3, [r7, #12]
 8009e7c:	69fb      	ldr	r3, [r7, #28]
 8009e7e:	225f      	movs	r2, #95	; 0x5f
 8009e80:	5c9b      	ldrb	r3, [r3, r2]
 8009e82:	60bb      	str	r3, [r7, #8]
 8009e84:	69fb      	ldr	r3, [r7, #28]
 8009e86:	2260      	movs	r2, #96	; 0x60
 8009e88:	5c9b      	ldrb	r3, [r3, r2]
 8009e8a:	607b      	str	r3, [r7, #4]
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	2261      	movs	r2, #97	; 0x61
 8009e90:	5c9b      	ldrb	r3, [r3, r2]
 8009e92:	469c      	mov	ip, r3
 8009e94:	69fa      	ldr	r2, [r7, #28]
 8009e96:	2362      	movs	r3, #98	; 0x62
 8009e98:	5cd3      	ldrb	r3, [r2, r3]
 8009e9a:	001e      	movs	r6, r3
 8009e9c:	69fa      	ldr	r2, [r7, #28]
 8009e9e:	2363      	movs	r3, #99	; 0x63
 8009ea0:	5cd3      	ldrb	r3, [r2, r3]
 8009ea2:	001c      	movs	r4, r3
 8009ea4:	69fa      	ldr	r2, [r7, #28]
 8009ea6:	2364      	movs	r3, #100	; 0x64
 8009ea8:	5cd3      	ldrb	r3, [r2, r3]
 8009eaa:	0018      	movs	r0, r3
 8009eac:	69fa      	ldr	r2, [r7, #28]
 8009eae:	2365      	movs	r3, #101	; 0x65
 8009eb0:	5cd3      	ldrb	r3, [r2, r3]
 8009eb2:	0019      	movs	r1, r3
 8009eb4:	69fa      	ldr	r2, [r7, #28]
 8009eb6:	2366      	movs	r3, #102	; 0x66
 8009eb8:	5cd3      	ldrb	r3, [r2, r3]
 8009eba:	4a16      	ldr	r2, [pc, #88]	; (8009f14 <LIDAR_get_info+0x1a8>)
 8009ebc:	930e      	str	r3, [sp, #56]	; 0x38
 8009ebe:	910d      	str	r1, [sp, #52]	; 0x34
 8009ec0:	900c      	str	r0, [sp, #48]	; 0x30
 8009ec2:	940b      	str	r4, [sp, #44]	; 0x2c
 8009ec4:	960a      	str	r6, [sp, #40]	; 0x28
 8009ec6:	4661      	mov	r1, ip
 8009ec8:	9109      	str	r1, [sp, #36]	; 0x24
 8009eca:	6879      	ldr	r1, [r7, #4]
 8009ecc:	9108      	str	r1, [sp, #32]
 8009ece:	68b9      	ldr	r1, [r7, #8]
 8009ed0:	9107      	str	r1, [sp, #28]
 8009ed2:	68f9      	ldr	r1, [r7, #12]
 8009ed4:	9106      	str	r1, [sp, #24]
 8009ed6:	6939      	ldr	r1, [r7, #16]
 8009ed8:	9105      	str	r1, [sp, #20]
 8009eda:	6979      	ldr	r1, [r7, #20]
 8009edc:	9104      	str	r1, [sp, #16]
 8009ede:	4659      	mov	r1, fp
 8009ee0:	9103      	str	r1, [sp, #12]
 8009ee2:	4651      	mov	r1, sl
 8009ee4:	9102      	str	r1, [sp, #8]
 8009ee6:	4649      	mov	r1, r9
 8009ee8:	9101      	str	r1, [sp, #4]
 8009eea:	4641      	mov	r1, r8
 8009eec:	9100      	str	r1, [sp, #0]
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	2111      	movs	r1, #17
 8009ef2:	0028      	movs	r0, r5
 8009ef4:	f000 fe66 	bl	800abc4 <sniprintf>
//	printf("Model %x\r\n",h_LIDAR->device_info.model);
//	printf("Firmware version : %s\r\n",h_LIDAR->device_info.firmware);
//	printf("Hardware version : %d\r\n",h_LIDAR->device_info.hardware);
//	printf("Serial number : %s\r\n",h_LIDAR->device_info.serial);

	return 0;
 8009ef8:	2300      	movs	r3, #0
}
 8009efa:	0018      	movs	r0, r3
 8009efc:	46bd      	mov	sp, r7
 8009efe:	b00b      	add	sp, #44	; 0x2c
 8009f00:	bcf0      	pop	{r4, r5, r6, r7}
 8009f02:	46bb      	mov	fp, r7
 8009f04:	46b2      	mov	sl, r6
 8009f06:	46a9      	mov	r9, r5
 8009f08:	46a0      	mov	r8, r4
 8009f0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f0c:	ffff90a5 	.word	0xffff90a5
 8009f10:	0800bdb4 	.word	0x0800bdb4
 8009f14:	0800bdbc 	.word	0x0800bdbc

08009f18 <LIDAR_get_health_stat>:

//Get device health status
//Single response
int LIDAR_get_health_stat(h_LIDAR_t * h_LIDAR){
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_HEALTH}; //Buffer de commande
 8009f20:	210c      	movs	r1, #12
 8009f22:	187b      	adds	r3, r7, r1
 8009f24:	4a29      	ldr	r2, [pc, #164]	; (8009fcc <LIDAR_get_health_stat+0xb4>)
 8009f26:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,2);
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	187a      	adds	r2, r7, r1
 8009f2e:	2102      	movs	r1, #2
 8009f30:	0010      	movs	r0, r2
 8009f32:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->health_buff,HEALTH_BUFF_SIZE);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	68db      	ldr	r3, [r3, #12]
 8009f38:	687a      	ldr	r2, [r7, #4]
 8009f3a:	3267      	adds	r2, #103	; 0x67
 8009f3c:	210a      	movs	r1, #10
 8009f3e:	0010      	movs	r0, r2
 8009f40:	4798      	blx	r3

	h_LIDAR->health_stat.start_sign=(h_LIDAR->health_buff[0]<<8)|h_LIDAR->health_buff[1];
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	2267      	movs	r2, #103	; 0x67
 8009f46:	5c9b      	ldrb	r3, [r3, r2]
 8009f48:	021b      	lsls	r3, r3, #8
 8009f4a:	b21a      	sxth	r2, r3
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	2168      	movs	r1, #104	; 0x68
 8009f50:	5c5b      	ldrb	r3, [r3, r1]
 8009f52:	b21b      	sxth	r3, r3
 8009f54:	4313      	orrs	r3, r2
 8009f56:	b21b      	sxth	r3, r3
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	831a      	strh	r2, [r3, #24]
	h_LIDAR->health_stat.lenght=(h_LIDAR->health_buff[2])|(h_LIDAR->health_buff[3]<<8)|(h_LIDAR->health_buff[4]<<16);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	2269      	movs	r2, #105	; 0x69
 8009f62:	5c9b      	ldrb	r3, [r3, r2]
 8009f64:	0019      	movs	r1, r3
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	226a      	movs	r2, #106	; 0x6a
 8009f6a:	5c9b      	ldrb	r3, [r3, r2]
 8009f6c:	021b      	lsls	r3, r3, #8
 8009f6e:	000a      	movs	r2, r1
 8009f70:	431a      	orrs	r2, r3
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	216b      	movs	r1, #107	; 0x6b
 8009f76:	5c5b      	ldrb	r3, [r3, r1]
 8009f78:	041b      	lsls	r3, r3, #16
 8009f7a:	4313      	orrs	r3, r2
 8009f7c:	001a      	movs	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	61da      	str	r2, [r3, #28]
	h_LIDAR->health_stat.mode=h_LIDAR->health_buff[5];
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	226c      	movs	r2, #108	; 0x6c
 8009f86:	5c99      	ldrb	r1, [r3, r2]
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2220      	movs	r2, #32
 8009f8c:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.type_code=h_LIDAR->health_buff[6];
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	226d      	movs	r2, #109	; 0x6d
 8009f92:	5c99      	ldrb	r1, [r3, r2]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2221      	movs	r2, #33	; 0x21
 8009f98:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.status_code=h_LIDAR->health_buff[7];
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	226e      	movs	r2, #110	; 0x6e
 8009f9e:	5c99      	ldrb	r1, [r3, r2]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2222      	movs	r2, #34	; 0x22
 8009fa4:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.error_code=h_LIDAR->health_buff[8]|(h_LIDAR->health_buff[9]<<8);
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	226f      	movs	r2, #111	; 0x6f
 8009faa:	5c9b      	ldrb	r3, [r3, r2]
 8009fac:	b21a      	sxth	r2, r3
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2170      	movs	r1, #112	; 0x70
 8009fb2:	5c5b      	ldrb	r3, [r3, r1]
 8009fb4:	021b      	lsls	r3, r3, #8
 8009fb6:	b21b      	sxth	r3, r3
 8009fb8:	4313      	orrs	r3, r2
 8009fba:	b21b      	sxth	r3, r3
 8009fbc:	b29a      	uxth	r2, r3
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	849a      	strh	r2, [r3, #36]	; 0x24
//	printf("Mode : %x\r\n",h_LIDAR->health_stat.mode);
//	printf("Type code : %x\r\n",h_LIDAR->health_stat.type_code);
//	printf("Status code : %x\r\n",h_LIDAR->health_stat.status_code);
//	printf("Error code : %x\r\n",h_LIDAR->health_stat.error_code);

	return 0;
 8009fc2:	2300      	movs	r3, #0
}
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	b004      	add	sp, #16
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	ffff91a5 	.word	0xffff91a5

08009fd0 <LIDAR_process_frame>:
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_RESTART};
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
	return 0;
}

void LIDAR_process_frame(h_LIDAR_t * LIDAR){
 8009fd0:	b590      	push	{r4, r7, lr}
 8009fd2:	b08b      	sub	sp, #44	; 0x2c
 8009fd4:	af00      	add	r7, sp, #0
 8009fd6:	6078      	str	r0, [r7, #4]
	uint16_t Si;
	int Di;
	int Ai;
	int AngleFSA=(LIDAR->processing.FSA>>1); //64
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	4a43      	ldr	r2, [pc, #268]	; (800a0e8 <LIDAR_process_frame+0x118>)
 8009fdc:	5a9b      	ldrh	r3, [r3, r2]
 8009fde:	085b      	lsrs	r3, r3, #1
 8009fe0:	b29b      	uxth	r3, r3
 8009fe2:	623b      	str	r3, [r7, #32]
	int AngleLSA=(LIDAR->processing.LSA>>1);
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a41      	ldr	r2, [pc, #260]	; (800a0ec <LIDAR_process_frame+0x11c>)
 8009fe8:	5a9b      	ldrh	r3, [r3, r2]
 8009fea:	085b      	lsrs	r3, r3, #1
 8009fec:	b29b      	uxth	r3, r3
 8009fee:	61fb      	str	r3, [r7, #28]
	int index;
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 8009ff0:	2300      	movs	r3, #0
 8009ff2:	627b      	str	r3, [r7, #36]	; 0x24
 8009ff4:	e06a      	b.n	800a0cc <LIDAR_process_frame+0xfc>
		Si=LIDAR->processing.frame_buff[2*i]|(LIDAR->processing.frame_buff[2*i+1]<<8);
 8009ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ff8:	005b      	lsls	r3, r3, #1
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	493c      	ldr	r1, [pc, #240]	; (800a0f0 <LIDAR_process_frame+0x120>)
 8009ffe:	18d3      	adds	r3, r2, r3
 800a000:	185b      	adds	r3, r3, r1
 800a002:	781b      	ldrb	r3, [r3, #0]
 800a004:	b21a      	sxth	r2, r3
 800a006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a008:	005b      	lsls	r3, r3, #1
 800a00a:	3301      	adds	r3, #1
 800a00c:	6879      	ldr	r1, [r7, #4]
 800a00e:	4838      	ldr	r0, [pc, #224]	; (800a0f0 <LIDAR_process_frame+0x120>)
 800a010:	18cb      	adds	r3, r1, r3
 800a012:	181b      	adds	r3, r3, r0
 800a014:	781b      	ldrb	r3, [r3, #0]
 800a016:	021b      	lsls	r3, r3, #8
 800a018:	b21b      	sxth	r3, r3
 800a01a:	4313      	orrs	r3, r2
 800a01c:	b21a      	sxth	r2, r3
 800a01e:	211a      	movs	r1, #26
 800a020:	187b      	adds	r3, r7, r1
 800a022:	801a      	strh	r2, [r3, #0]
		Di=Si/4; //Distance du point i
 800a024:	187b      	adds	r3, r7, r1
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	089b      	lsrs	r3, r3, #2
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	617b      	str	r3, [r7, #20]
		Ai=AngleFSA/64+i*(AngleLSA-AngleFSA)/64/(LIDAR->processing.LSN-1);
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	2b00      	cmp	r3, #0
 800a032:	da00      	bge.n	800a036 <LIDAR_process_frame+0x66>
 800a034:	333f      	adds	r3, #63	; 0x3f
 800a036:	119b      	asrs	r3, r3, #6
 800a038:	001c      	movs	r4, r3
 800a03a:	69fa      	ldr	r2, [r7, #28]
 800a03c:	6a3b      	ldr	r3, [r7, #32]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a042:	4353      	muls	r3, r2
 800a044:	2b00      	cmp	r3, #0
 800a046:	da00      	bge.n	800a04a <LIDAR_process_frame+0x7a>
 800a048:	333f      	adds	r3, #63	; 0x3f
 800a04a:	119b      	asrs	r3, r3, #6
 800a04c:	0018      	movs	r0, r3
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	4a28      	ldr	r2, [pc, #160]	; (800a0f4 <LIDAR_process_frame+0x124>)
 800a052:	5c9b      	ldrb	r3, [r3, r2]
 800a054:	3b01      	subs	r3, #1
 800a056:	0019      	movs	r1, r3
 800a058:	f7f6 f8ea 	bl	8000230 <__divsi3>
 800a05c:	0003      	movs	r3, r0
 800a05e:	18e3      	adds	r3, r4, r3
 800a060:	613b      	str	r3, [r7, #16]
		index = round(Ai);
 800a062:	6938      	ldr	r0, [r7, #16]
 800a064:	f7f6 fb50 	bl	8000708 <__aeabi_i2d>
 800a068:	0002      	movs	r2, r0
 800a06a:	000b      	movs	r3, r1
 800a06c:	0010      	movs	r0, r2
 800a06e:	0019      	movs	r1, r3
 800a070:	f7f6 fb14 	bl	800069c <__aeabi_d2iz>
 800a074:	0003      	movs	r3, r0
 800a076:	60fb      	str	r3, [r7, #12]

		if(Di>1500){ //On affiche pas les points trop loin
 800a078:	697b      	ldr	r3, [r7, #20]
 800a07a:	4a1f      	ldr	r2, [pc, #124]	; (800a0f8 <LIDAR_process_frame+0x128>)
 800a07c:	4293      	cmp	r3, r2
 800a07e:	dd0a      	ble.n	800a096 <LIDAR_process_frame+0xc6>
			LIDAR->processing.point_buff[index]=0;
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	491d      	ldr	r1, [pc, #116]	; (800a0fc <LIDAR_process_frame+0x12c>)
 800a086:	468c      	mov	ip, r1
 800a088:	4463      	add	r3, ip
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	18d3      	adds	r3, r2, r3
 800a08e:	3304      	adds	r3, #4
 800a090:	2200      	movs	r2, #0
 800a092:	601a      	str	r2, [r3, #0]
 800a094:	e017      	b.n	800a0c6 <LIDAR_process_frame+0xf6>
		}
		else if(Di<40){
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	2b27      	cmp	r3, #39	; 0x27
 800a09a:	dc0a      	bgt.n	800a0b2 <LIDAR_process_frame+0xe2>
			LIDAR->processing.point_buff[index]=0;
 800a09c:	687a      	ldr	r2, [r7, #4]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	4916      	ldr	r1, [pc, #88]	; (800a0fc <LIDAR_process_frame+0x12c>)
 800a0a2:	468c      	mov	ip, r1
 800a0a4:	4463      	add	r3, ip
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	18d3      	adds	r3, r2, r3
 800a0aa:	3304      	adds	r3, #4
 800a0ac:	2200      	movs	r2, #0
 800a0ae:	601a      	str	r2, [r3, #0]
 800a0b0:	e009      	b.n	800a0c6 <LIDAR_process_frame+0xf6>
		}
		else{
			LIDAR->processing.point_buff[index]=Di;
 800a0b2:	687a      	ldr	r2, [r7, #4]
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	4911      	ldr	r1, [pc, #68]	; (800a0fc <LIDAR_process_frame+0x12c>)
 800a0b8:	468c      	mov	ip, r1
 800a0ba:	4463      	add	r3, ip
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	18d3      	adds	r3, r2, r3
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	697a      	ldr	r2, [r7, #20]
 800a0c4:	601a      	str	r2, [r3, #0]
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 800a0c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0c8:	3301      	adds	r3, #1
 800a0ca:	627b      	str	r3, [r7, #36]	; 0x24
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a0c      	ldr	r2, [pc, #48]	; (800a100 <LIDAR_process_frame+0x130>)
 800a0d0:	5c9b      	ldrb	r3, [r3, r2]
 800a0d2:	085b      	lsrs	r3, r3, #1
 800a0d4:	b2db      	uxtb	r3, r3
 800a0d6:	001a      	movs	r2, r3
 800a0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	db8b      	blt.n	8009ff6 <LIDAR_process_frame+0x26>
		}
	}
}
 800a0de:	46c0      	nop			; (mov r8, r8)
 800a0e0:	46c0      	nop			; (mov r8, r8)
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	b00b      	add	sp, #44	; 0x2c
 800a0e6:	bd90      	pop	{r4, r7, pc}
 800a0e8:	00001018 	.word	0x00001018
 800a0ec:	0000101a 	.word	0x0000101a
 800a0f0:	00001fbf 	.word	0x00001fbf
 800a0f4:	00001017 	.word	0x00001017
 800a0f8:	000005dc 	.word	0x000005dc
 800a0fc:	00000806 	.word	0x00000806
 800a100:	0000101e 	.word	0x0000101e

0800a104 <calculer_distance_moyenne>:

// Fonction pour calculer la distance moyenne
int calculer_distance_moyenne(int distances[], int debut, int fin) {
 800a104:	b580      	push	{r7, lr}
 800a106:	b086      	sub	sp, #24
 800a108:	af00      	add	r7, sp, #0
 800a10a:	60f8      	str	r0, [r7, #12]
 800a10c:	60b9      	str	r1, [r7, #8]
 800a10e:	607a      	str	r2, [r7, #4]
	int somme = 0;
 800a110:	2300      	movs	r3, #0
 800a112:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	613b      	str	r3, [r7, #16]
 800a118:	e00a      	b.n	800a130 <calculer_distance_moyenne+0x2c>
		somme += distances[i];
 800a11a:	693b      	ldr	r3, [r7, #16]
 800a11c:	009b      	lsls	r3, r3, #2
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	18d3      	adds	r3, r2, r3
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	697a      	ldr	r2, [r7, #20]
 800a126:	18d3      	adds	r3, r2, r3
 800a128:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	3301      	adds	r3, #1
 800a12e:	613b      	str	r3, [r7, #16]
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	429a      	cmp	r2, r3
 800a136:	ddf0      	ble.n	800a11a <calculer_distance_moyenne+0x16>
	}
	return somme / (fin - debut + 1);
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	1ad3      	subs	r3, r2, r3
 800a13e:	3301      	adds	r3, #1
 800a140:	0019      	movs	r1, r3
 800a142:	6978      	ldr	r0, [r7, #20]
 800a144:	f7f6 f874 	bl	8000230 <__divsi3>
 800a148:	0003      	movs	r3, r0
}
 800a14a:	0018      	movs	r0, r3
 800a14c:	46bd      	mov	sp, r7
 800a14e:	b006      	add	sp, #24
 800a150:	bd80      	pop	{r7, pc}
	...

0800a154 <find_clusters>:

//Fonction pour regrouper les points proches en clusters
void find_clusters(h_LIDAR_t * LIDAR) {
 800a154:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a156:	b08b      	sub	sp, #44	; 0x2c
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]

	int * distances=LIDAR->processing.filtred_buff;
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a56      	ldr	r2, [pc, #344]	; (800a2b8 <find_clusters+0x164>)
 800a160:	4694      	mov	ip, r2
 800a162:	4463      	add	r3, ip
 800a164:	61bb      	str	r3, [r7, #24]
	int cluster_count = 0;
 800a166:	2300      	movs	r3, #0
 800a168:	627b      	str	r3, [r7, #36]	; 0x24

	// Parcourir les 360 degrés pour regrouper les valeurs en clusters
	int debut_cluster = 0;
 800a16a:	2300      	movs	r3, #0
 800a16c:	623b      	str	r3, [r7, #32]
	for (int i = 1; i < NB_DEGRES; i++) {
 800a16e:	2301      	movs	r3, #1
 800a170:	61fb      	str	r3, [r7, #28]
 800a172:	e05b      	b.n	800a22c <find_clusters+0xd8>
		if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	69ba      	ldr	r2, [r7, #24]
 800a17a:	18d3      	adds	r3, r2, r3
 800a17c:	681a      	ldr	r2, [r3, #0]
 800a17e:	69fb      	ldr	r3, [r7, #28]
 800a180:	494e      	ldr	r1, [pc, #312]	; (800a2bc <find_clusters+0x168>)
 800a182:	468c      	mov	ip, r1
 800a184:	4463      	add	r3, ip
 800a186:	009b      	lsls	r3, r3, #2
 800a188:	69b9      	ldr	r1, [r7, #24]
 800a18a:	18cb      	adds	r3, r1, r3
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	1ad3      	subs	r3, r2, r3
 800a190:	0018      	movs	r0, r3
 800a192:	f7f6 fab9 	bl	8000708 <__aeabi_i2d>
 800a196:	0002      	movs	r2, r0
 800a198:	000b      	movs	r3, r1
 800a19a:	0011      	movs	r1, r2
 800a19c:	000c      	movs	r4, r1
 800a19e:	005b      	lsls	r3, r3, #1
 800a1a0:	085d      	lsrs	r5, r3, #1
 800a1a2:	2200      	movs	r2, #0
 800a1a4:	4b46      	ldr	r3, [pc, #280]	; (800a2c0 <find_clusters+0x16c>)
 800a1a6:	0020      	movs	r0, r4
 800a1a8:	0029      	movs	r1, r5
 800a1aa:	f7f6 f957 	bl	800045c <__aeabi_dcmpgt>
 800a1ae:	1e03      	subs	r3, r0, #0
 800a1b0:	d039      	beq.n	800a226 <find_clusters+0xd2>
			// Calcul de la distance moyenne pour le cluster
			int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, i - 1);
 800a1b2:	69fb      	ldr	r3, [r7, #28]
 800a1b4:	1e5a      	subs	r2, r3, #1
 800a1b6:	6a39      	ldr	r1, [r7, #32]
 800a1b8:	69bb      	ldr	r3, [r7, #24]
 800a1ba:	0018      	movs	r0, r3
 800a1bc:	f7ff ffa2 	bl	800a104 <calculer_distance_moyenne>
 800a1c0:	0003      	movs	r3, r0
 800a1c2:	60fb      	str	r3, [r7, #12]

			// Calcul de l'angle moyen pour le cluster
			int angle_moyen = (debut_cluster + i - 1) / 2;
 800a1c4:	6a3a      	ldr	r2, [r7, #32]
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	18d3      	adds	r3, r2, r3
 800a1ca:	3b01      	subs	r3, #1
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	da00      	bge.n	800a1d2 <find_clusters+0x7e>
 800a1d0:	3301      	adds	r3, #1
 800a1d2:	105b      	asrs	r3, r3, #1
 800a1d4:	60bb      	str	r3, [r7, #8]

			// Stockage des valeurs du cluster dans la structure
			LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 800a1d6:	6879      	ldr	r1, [r7, #4]
 800a1d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1da:	483a      	ldr	r0, [pc, #232]	; (800a2c4 <find_clusters+0x170>)
 800a1dc:	0013      	movs	r3, r2
 800a1de:	005b      	lsls	r3, r3, #1
 800a1e0:	189b      	adds	r3, r3, r2
 800a1e2:	009b      	lsls	r3, r3, #2
 800a1e4:	18cb      	adds	r3, r1, r3
 800a1e6:	181b      	adds	r3, r3, r0
 800a1e8:	68ba      	ldr	r2, [r7, #8]
 800a1ea:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 800a1ec:	6879      	ldr	r1, [r7, #4]
 800a1ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a1f0:	4835      	ldr	r0, [pc, #212]	; (800a2c8 <find_clusters+0x174>)
 800a1f2:	0013      	movs	r3, r2
 800a1f4:	005b      	lsls	r3, r3, #1
 800a1f6:	189b      	adds	r3, r3, r2
 800a1f8:	009b      	lsls	r3, r3, #2
 800a1fa:	18cb      	adds	r3, r1, r3
 800a1fc:	181b      	adds	r3, r3, r0
 800a1fe:	68fa      	ldr	r2, [r7, #12]
 800a200:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 800a202:	69fa      	ldr	r2, [r7, #28]
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	1ad1      	subs	r1, r2, r3
 800a208:	6878      	ldr	r0, [r7, #4]
 800a20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20c:	4e2f      	ldr	r6, [pc, #188]	; (800a2cc <find_clusters+0x178>)
 800a20e:	0013      	movs	r3, r2
 800a210:	005b      	lsls	r3, r3, #1
 800a212:	189b      	adds	r3, r3, r2
 800a214:	009b      	lsls	r3, r3, #2
 800a216:	18c3      	adds	r3, r0, r3
 800a218:	199b      	adds	r3, r3, r6
 800a21a:	6019      	str	r1, [r3, #0]

			debut_cluster = i;
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	623b      	str	r3, [r7, #32]
			cluster_count++;
 800a220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a222:	3301      	adds	r3, #1
 800a224:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 1; i < NB_DEGRES; i++) {
 800a226:	69fb      	ldr	r3, [r7, #28]
 800a228:	3301      	adds	r3, #1
 800a22a:	61fb      	str	r3, [r7, #28]
 800a22c:	69fa      	ldr	r2, [r7, #28]
 800a22e:	23b4      	movs	r3, #180	; 0xb4
 800a230:	005b      	lsls	r3, r3, #1
 800a232:	429a      	cmp	r2, r3
 800a234:	db9e      	blt.n	800a174 <find_clusters+0x20>
		}
	}

	// Traitement du dernier cluster
	int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 800a236:	2368      	movs	r3, #104	; 0x68
 800a238:	33ff      	adds	r3, #255	; 0xff
 800a23a:	001a      	movs	r2, r3
 800a23c:	6a39      	ldr	r1, [r7, #32]
 800a23e:	69bb      	ldr	r3, [r7, #24]
 800a240:	0018      	movs	r0, r3
 800a242:	f7ff ff5f 	bl	800a104 <calculer_distance_moyenne>
 800a246:	0003      	movs	r3, r0
 800a248:	617b      	str	r3, [r7, #20]
	int angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 800a24a:	6a3b      	ldr	r3, [r7, #32]
 800a24c:	3368      	adds	r3, #104	; 0x68
 800a24e:	33ff      	adds	r3, #255	; 0xff
 800a250:	2b00      	cmp	r3, #0
 800a252:	da00      	bge.n	800a256 <find_clusters+0x102>
 800a254:	3301      	adds	r3, #1
 800a256:	105b      	asrs	r3, r3, #1
 800a258:	613b      	str	r3, [r7, #16]
	LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 800a25a:	6879      	ldr	r1, [r7, #4]
 800a25c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a25e:	4819      	ldr	r0, [pc, #100]	; (800a2c4 <find_clusters+0x170>)
 800a260:	0013      	movs	r3, r2
 800a262:	005b      	lsls	r3, r3, #1
 800a264:	189b      	adds	r3, r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	18cb      	adds	r3, r1, r3
 800a26a:	181b      	adds	r3, r3, r0
 800a26c:	693a      	ldr	r2, [r7, #16]
 800a26e:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 800a270:	6879      	ldr	r1, [r7, #4]
 800a272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a274:	4814      	ldr	r0, [pc, #80]	; (800a2c8 <find_clusters+0x174>)
 800a276:	0013      	movs	r3, r2
 800a278:	005b      	lsls	r3, r3, #1
 800a27a:	189b      	adds	r3, r3, r2
 800a27c:	009b      	lsls	r3, r3, #2
 800a27e:	18cb      	adds	r3, r1, r3
 800a280:	181b      	adds	r3, r3, r0
 800a282:	697a      	ldr	r2, [r7, #20]
 800a284:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 800a286:	6a3b      	ldr	r3, [r7, #32]
 800a288:	22b4      	movs	r2, #180	; 0xb4
 800a28a:	0052      	lsls	r2, r2, #1
 800a28c:	1ad1      	subs	r1, r2, r3
 800a28e:	6878      	ldr	r0, [r7, #4]
 800a290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a292:	4c0e      	ldr	r4, [pc, #56]	; (800a2cc <find_clusters+0x178>)
 800a294:	0013      	movs	r3, r2
 800a296:	005b      	lsls	r3, r3, #1
 800a298:	189b      	adds	r3, r3, r2
 800a29a:	009b      	lsls	r3, r3, #2
 800a29c:	18c3      	adds	r3, r0, r3
 800a29e:	191b      	adds	r3, r3, r4
 800a2a0:	6019      	str	r1, [r3, #0]
	cluster_count++;
 800a2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	627b      	str	r3, [r7, #36]	; 0x24
	LIDAR->processing.cluster_cnt=cluster_count;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	4909      	ldr	r1, [pc, #36]	; (800a2d0 <find_clusters+0x17c>)
 800a2ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2ae:	505a      	str	r2, [r3, r1]
}
 800a2b0:	46c0      	nop			; (mov r8, r8)
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	b00b      	add	sp, #44	; 0x2c
 800a2b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a2b8:	000025bc 	.word	0x000025bc
 800a2bc:	3fffffff 	.word	0x3fffffff
 800a2c0:	4062c000 	.word	0x4062c000
 800a2c4:	00002b5c 	.word	0x00002b5c
 800a2c8:	00002b60 	.word	0x00002b60
 800a2cc:	00002b64 	.word	0x00002b64
 800a2d0:	0000300c 	.word	0x0000300c

0800a2d4 <medianFilter>:

void medianFilter(h_LIDAR_t * LIDAR) {
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b090      	sub	sp, #64	; 0x40
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	6078      	str	r0, [r7, #4]
	int * signal=LIDAR->processing.point_buff; //points non filtrés
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	4a3d      	ldr	r2, [pc, #244]	; (800a3d4 <medianFilter+0x100>)
 800a2e0:	4694      	mov	ip, r2
 800a2e2:	4463      	add	r3, ip
 800a2e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	int signal_length=NB_DEGRES;
 800a2e6:	23b4      	movs	r3, #180	; 0xb4
 800a2e8:	005b      	lsls	r3, r3, #1
 800a2ea:	62bb      	str	r3, [r7, #40]	; 0x28
	int window[5];
	int i, j, k, middle;

	// La médiane se trouve au milieu de la fenêtre triée
	middle = 5 / 2;
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < signal_length; i++) {
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a2f4:	e065      	b.n	800a3c2 <medianFilter+0xee>
		// Construire la fenêtre avec les données autour du point i
		for (j = 0; j < 5; j++) {
 800a2f6:	2300      	movs	r3, #0
 800a2f8:	63bb      	str	r3, [r7, #56]	; 0x38
 800a2fa:	e01e      	b.n	800a33a <medianFilter+0x66>
			int index = i - middle + j;
 800a2fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a2fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a300:	1ad3      	subs	r3, r2, r3
 800a302:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a304:	18d3      	adds	r3, r2, r3
 800a306:	633b      	str	r3, [r7, #48]	; 0x30
			// Gérer les bords du signal
			if (index < 0) index = 0;
 800a308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	da01      	bge.n	800a312 <medianFilter+0x3e>
 800a30e:	2300      	movs	r3, #0
 800a310:	633b      	str	r3, [r7, #48]	; 0x30
			if (index >= signal_length) index = signal_length - 1;
 800a312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a316:	429a      	cmp	r2, r3
 800a318:	db02      	blt.n	800a320 <medianFilter+0x4c>
 800a31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31c:	3b01      	subs	r3, #1
 800a31e:	633b      	str	r3, [r7, #48]	; 0x30
			window[j] = signal[index];
 800a320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a322:	009b      	lsls	r3, r3, #2
 800a324:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a326:	18d3      	adds	r3, r2, r3
 800a328:	6819      	ldr	r1, [r3, #0]
 800a32a:	230c      	movs	r3, #12
 800a32c:	18fb      	adds	r3, r7, r3
 800a32e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a330:	0092      	lsls	r2, r2, #2
 800a332:	50d1      	str	r1, [r2, r3]
		for (j = 0; j < 5; j++) {
 800a334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a336:	3301      	adds	r3, #1
 800a338:	63bb      	str	r3, [r7, #56]	; 0x38
 800a33a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33c:	2b04      	cmp	r3, #4
 800a33e:	dddd      	ble.n	800a2fc <medianFilter+0x28>
		}

		// Trier la fenêtre pour trouver la valeur médiane
		for (j = 0; j < 5; j++) {
 800a340:	2300      	movs	r3, #0
 800a342:	63bb      	str	r3, [r7, #56]	; 0x38
 800a344:	e029      	b.n	800a39a <medianFilter+0xc6>
			for (k = j + 1; k < 5; k++) {
 800a346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a348:	3301      	adds	r3, #1
 800a34a:	637b      	str	r3, [r7, #52]	; 0x34
 800a34c:	e01f      	b.n	800a38e <medianFilter+0xba>
				if (window[j] > window[k]) {
 800a34e:	200c      	movs	r0, #12
 800a350:	183b      	adds	r3, r7, r0
 800a352:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a354:	0092      	lsls	r2, r2, #2
 800a356:	58d2      	ldr	r2, [r2, r3]
 800a358:	183b      	adds	r3, r7, r0
 800a35a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a35c:	0089      	lsls	r1, r1, #2
 800a35e:	58cb      	ldr	r3, [r1, r3]
 800a360:	429a      	cmp	r2, r3
 800a362:	dd11      	ble.n	800a388 <medianFilter+0xb4>
					// Échange simple pour le tri
					int temp = window[j];
 800a364:	183b      	adds	r3, r7, r0
 800a366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a368:	0092      	lsls	r2, r2, #2
 800a36a:	58d3      	ldr	r3, [r2, r3]
 800a36c:	623b      	str	r3, [r7, #32]
					window[j] = window[k];
 800a36e:	183b      	adds	r3, r7, r0
 800a370:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a372:	0092      	lsls	r2, r2, #2
 800a374:	58d1      	ldr	r1, [r2, r3]
 800a376:	183b      	adds	r3, r7, r0
 800a378:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a37a:	0092      	lsls	r2, r2, #2
 800a37c:	50d1      	str	r1, [r2, r3]
					window[k] = temp;
 800a37e:	183b      	adds	r3, r7, r0
 800a380:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a382:	0092      	lsls	r2, r2, #2
 800a384:	6a39      	ldr	r1, [r7, #32]
 800a386:	50d1      	str	r1, [r2, r3]
			for (k = j + 1; k < 5; k++) {
 800a388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a38a:	3301      	adds	r3, #1
 800a38c:	637b      	str	r3, [r7, #52]	; 0x34
 800a38e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a390:	2b04      	cmp	r3, #4
 800a392:	dddc      	ble.n	800a34e <medianFilter+0x7a>
		for (j = 0; j < 5; j++) {
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	3301      	adds	r3, #1
 800a398:	63bb      	str	r3, [r7, #56]	; 0x38
 800a39a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a39c:	2b04      	cmp	r3, #4
 800a39e:	ddd2      	ble.n	800a346 <medianFilter+0x72>
				}
			}
		}

		// Stocker la médiane dans le signal filtré
		LIDAR->processing.filtred_buff[i] = window[middle];
 800a3a0:	230c      	movs	r3, #12
 800a3a2:	18fb      	adds	r3, r7, r3
 800a3a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3a6:	0092      	lsls	r2, r2, #2
 800a3a8:	58d2      	ldr	r2, [r2, r3]
 800a3aa:	6879      	ldr	r1, [r7, #4]
 800a3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3ae:	480a      	ldr	r0, [pc, #40]	; (800a3d8 <medianFilter+0x104>)
 800a3b0:	4684      	mov	ip, r0
 800a3b2:	4463      	add	r3, ip
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	18cb      	adds	r3, r1, r3
 800a3b8:	3304      	adds	r3, #4
 800a3ba:	601a      	str	r2, [r3, #0]
	for (i = 0; i < signal_length; i++) {
 800a3bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a3be:	3301      	adds	r3, #1
 800a3c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a3c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a3c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	db95      	blt.n	800a2f6 <medianFilter+0x22>
	}
}
 800a3ca:	46c0      	nop			; (mov r8, r8)
 800a3cc:	46c0      	nop			; (mov r8, r8)
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	b010      	add	sp, #64	; 0x40
 800a3d2:	bd80      	pop	{r7, pc}
 800a3d4:	0000201c 	.word	0x0000201c
 800a3d8:	0000096e 	.word	0x0000096e

0800a3dc <pwm_start>:
#include "pwm.h"


//Gestion de l'allumage des moteurs
int pwm_start(TIM_HandleTypeDef htim, int Channel)
{
 800a3dc:	b084      	sub	sp, #16
 800a3de:	b5b0      	push	{r4, r5, r7, lr}
 800a3e0:	af00      	add	r7, sp, #0
 800a3e2:	2510      	movs	r5, #16
 800a3e4:	197c      	adds	r4, r7, r5
 800a3e6:	6020      	str	r0, [r4, #0]
 800a3e8:	6061      	str	r1, [r4, #4]
 800a3ea:	60a2      	str	r2, [r4, #8]
 800a3ec:	60e3      	str	r3, [r4, #12]
	return HAL_TIM_PWM_Start(&htim, Channel);
 800a3ee:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a3f0:	197b      	adds	r3, r7, r5
 800a3f2:	0011      	movs	r1, r2
 800a3f4:	0018      	movs	r0, r3
 800a3f6:	f7fa fc2b 	bl	8004c50 <HAL_TIM_PWM_Start>
 800a3fa:	0003      	movs	r3, r0
}
 800a3fc:	0018      	movs	r0, r3
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bcb0      	pop	{r4, r5, r7}
 800a402:	bc08      	pop	{r3}
 800a404:	b004      	add	sp, #16
 800a406:	4718      	bx	r3

0800a408 <pwm_stop>:

int pwm_stop(TIM_HandleTypeDef htim, int Channel)
{
 800a408:	b084      	sub	sp, #16
 800a40a:	b5b0      	push	{r4, r5, r7, lr}
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	2510      	movs	r5, #16
 800a410:	197c      	adds	r4, r7, r5
 800a412:	6020      	str	r0, [r4, #0]
 800a414:	6061      	str	r1, [r4, #4]
 800a416:	60a2      	str	r2, [r4, #8]
 800a418:	60e3      	str	r3, [r4, #12]
	return HAL_TIM_PWM_Stop(&htim, Channel);
 800a41a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a41c:	197b      	adds	r3, r7, r5
 800a41e:	0011      	movs	r1, r2
 800a420:	0018      	movs	r0, r3
 800a422:	f7fa fcf9 	bl	8004e18 <HAL_TIM_PWM_Stop>
 800a426:	0003      	movs	r3, r0
}
 800a428:	0018      	movs	r0, r3
 800a42a:	46bd      	mov	sp, r7
 800a42c:	bcb0      	pop	{r4, r5, r7}
 800a42e:	bc08      	pop	{r3}
 800a430:	b004      	add	sp, #16
 800a432:	4718      	bx	r3

0800a434 <motor_Init>:

//Initialisation des moteurs
void motor_Init(struct Motor_drv_struct *moteur1, struct Motor_drv_struct *moteur2){
 800a434:	b580      	push	{r7, lr}
 800a436:	b082      	sub	sp, #8
 800a438:	af00      	add	r7, sp, #0
 800a43a:	6078      	str	r0, [r7, #4]
 800a43c:	6039      	str	r1, [r7, #0]

	moteur1->Channel_Backward = TIM_CHANNEL_1;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	2200      	movs	r2, #0
 800a442:	605a      	str	r2, [r3, #4]
	moteur1->Channel_Forward = TIM_CHANNEL_2;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2204      	movs	r2, #4
 800a448:	601a      	str	r2, [r3, #0]
	moteur1->Timer_Backward = htim15;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	4a23      	ldr	r2, [pc, #140]	; (800a4dc <motor_Init+0xa8>)
 800a44e:	336c      	adds	r3, #108	; 0x6c
 800a450:	0011      	movs	r1, r2
 800a452:	224c      	movs	r2, #76	; 0x4c
 800a454:	0018      	movs	r0, r3
 800a456:	f000 fd5e 	bl	800af16 <memcpy>
	moteur1->Timer_Forward = htim15;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	4a1f      	ldr	r2, [pc, #124]	; (800a4dc <motor_Init+0xa8>)
 800a45e:	3320      	adds	r3, #32
 800a460:	0011      	movs	r1, r2
 800a462:	224c      	movs	r2, #76	; 0x4c
 800a464:	0018      	movs	r0, r3
 800a466:	f000 fd56 	bl	800af16 <memcpy>
	moteur1->pwm_start = pwm_start;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	21b8      	movs	r1, #184	; 0xb8
 800a46e:	4a1c      	ldr	r2, [pc, #112]	; (800a4e0 <motor_Init+0xac>)
 800a470:	505a      	str	r2, [r3, r1]
	moteur1->pwm_stop = pwm_stop;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	21bc      	movs	r1, #188	; 0xbc
 800a476:	4a1b      	ldr	r2, [pc, #108]	; (800a4e4 <motor_Init+0xb0>)
 800a478:	505a      	str	r2, [r3, r1]
	moteur1->update = update_motor;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	21c0      	movs	r1, #192	; 0xc0
 800a47e:	4a1a      	ldr	r2, [pc, #104]	; (800a4e8 <motor_Init+0xb4>)
 800a480:	505a      	str	r2, [r3, r1]
	moteur1->old_alpha =0;
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	2200      	movs	r2, #0
 800a486:	611a      	str	r2, [r3, #16]

	moteur2->Channel_Backward = TIM_CHANNEL_1;
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	2200      	movs	r2, #0
 800a48c:	605a      	str	r2, [r3, #4]
	moteur2->Channel_Forward = TIM_CHANNEL_1;
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	2200      	movs	r2, #0
 800a492:	601a      	str	r2, [r3, #0]
	moteur2->Timer_Backward = htim16;
 800a494:	683b      	ldr	r3, [r7, #0]
 800a496:	4a15      	ldr	r2, [pc, #84]	; (800a4ec <motor_Init+0xb8>)
 800a498:	336c      	adds	r3, #108	; 0x6c
 800a49a:	0011      	movs	r1, r2
 800a49c:	224c      	movs	r2, #76	; 0x4c
 800a49e:	0018      	movs	r0, r3
 800a4a0:	f000 fd39 	bl	800af16 <memcpy>
	moteur2->Timer_Forward = htim17;
 800a4a4:	683b      	ldr	r3, [r7, #0]
 800a4a6:	4a12      	ldr	r2, [pc, #72]	; (800a4f0 <motor_Init+0xbc>)
 800a4a8:	3320      	adds	r3, #32
 800a4aa:	0011      	movs	r1, r2
 800a4ac:	224c      	movs	r2, #76	; 0x4c
 800a4ae:	0018      	movs	r0, r3
 800a4b0:	f000 fd31 	bl	800af16 <memcpy>
	moteur2->pwm_start = pwm_start;
 800a4b4:	683b      	ldr	r3, [r7, #0]
 800a4b6:	21b8      	movs	r1, #184	; 0xb8
 800a4b8:	4a09      	ldr	r2, [pc, #36]	; (800a4e0 <motor_Init+0xac>)
 800a4ba:	505a      	str	r2, [r3, r1]
	moteur2->pwm_stop = pwm_stop;
 800a4bc:	683b      	ldr	r3, [r7, #0]
 800a4be:	21bc      	movs	r1, #188	; 0xbc
 800a4c0:	4a08      	ldr	r2, [pc, #32]	; (800a4e4 <motor_Init+0xb0>)
 800a4c2:	505a      	str	r2, [r3, r1]
	moteur2->update = update_motor;
 800a4c4:	683b      	ldr	r3, [r7, #0]
 800a4c6:	21c0      	movs	r1, #192	; 0xc0
 800a4c8:	4a07      	ldr	r2, [pc, #28]	; (800a4e8 <motor_Init+0xb4>)
 800a4ca:	505a      	str	r2, [r3, r1]
	moteur2->old_alpha =0;
 800a4cc:	683b      	ldr	r3, [r7, #0]
 800a4ce:	2200      	movs	r2, #0
 800a4d0:	611a      	str	r2, [r3, #16]
}
 800a4d2:	46c0      	nop			; (mov r8, r8)
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	b002      	add	sp, #8
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	46c0      	nop			; (mov r8, r8)
 800a4dc:	200034fc 	.word	0x200034fc
 800a4e0:	0800a3dd 	.word	0x0800a3dd
 800a4e4:	0800a409 	.word	0x0800a409
 800a4e8:	0800a4f5 	.word	0x0800a4f5
 800a4ec:	20003548 	.word	0x20003548
 800a4f0:	20003594 	.word	0x20003594

0800a4f4 <update_motor>:

//Update alpha du moteur
void update_motor(struct Motor_drv_struct motor)
{
 800a4f4:	b084      	sub	sp, #16
 800a4f6:	b5b0      	push	{r4, r5, r7, lr}
 800a4f8:	b082      	sub	sp, #8
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	2518      	movs	r5, #24
 800a4fe:	197c      	adds	r4, r7, r5
 800a500:	6020      	str	r0, [r4, #0]
 800a502:	6061      	str	r1, [r4, #4]
 800a504:	60a2      	str	r2, [r4, #8]
 800a506:	60e3      	str	r3, [r4, #12]

	if (motor.old_alpha <= motor.alpha)	//permet de faire une rampe sur le pwm
 800a508:	0029      	movs	r1, r5
 800a50a:	187b      	adds	r3, r7, r1
 800a50c:	691a      	ldr	r2, [r3, #16]
 800a50e:	187b      	adds	r3, r7, r1
 800a510:	68db      	ldr	r3, [r3, #12]
 800a512:	429a      	cmp	r2, r3
 800a514:	dd00      	ble.n	800a518 <update_motor+0x24>
 800a516:	e0f4      	b.n	800a702 <update_motor+0x20e>
	{
		for (int i = motor.old_alpha; i<=motor.alpha;i++){	//application de la rampe
 800a518:	187b      	adds	r3, r7, r1
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	607b      	str	r3, [r7, #4]
 800a51e:	e0e8      	b.n	800a6f2 <update_motor+0x1fe>
			if (motor.sens == 1)
 800a520:	2218      	movs	r2, #24
 800a522:	18bb      	adds	r3, r7, r2
 800a524:	689b      	ldr	r3, [r3, #8]
 800a526:	2b01      	cmp	r3, #1
 800a528:	d000      	beq.n	800a52c <update_motor+0x38>
 800a52a:	e06c      	b.n	800a606 <update_motor+0x112>
			{
				__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,i);
 800a52c:	18bb      	adds	r3, r7, r2
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d104      	bne.n	800a53e <update_motor+0x4a>
 800a534:	18bb      	adds	r3, r7, r2
 800a536:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a538:	687a      	ldr	r2, [r7, #4]
 800a53a:	635a      	str	r2, [r3, #52]	; 0x34
 800a53c:	e02c      	b.n	800a598 <update_motor+0xa4>
 800a53e:	2218      	movs	r2, #24
 800a540:	18bb      	adds	r3, r7, r2
 800a542:	685b      	ldr	r3, [r3, #4]
 800a544:	2b04      	cmp	r3, #4
 800a546:	d104      	bne.n	800a552 <update_motor+0x5e>
 800a548:	18bb      	adds	r3, r7, r2
 800a54a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6393      	str	r3, [r2, #56]	; 0x38
 800a550:	e022      	b.n	800a598 <update_motor+0xa4>
 800a552:	2218      	movs	r2, #24
 800a554:	18bb      	adds	r3, r7, r2
 800a556:	685b      	ldr	r3, [r3, #4]
 800a558:	2b08      	cmp	r3, #8
 800a55a:	d104      	bne.n	800a566 <update_motor+0x72>
 800a55c:	18bb      	adds	r3, r7, r2
 800a55e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a564:	e018      	b.n	800a598 <update_motor+0xa4>
 800a566:	2218      	movs	r2, #24
 800a568:	18bb      	adds	r3, r7, r2
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	2b0c      	cmp	r3, #12
 800a56e:	d104      	bne.n	800a57a <update_motor+0x86>
 800a570:	18bb      	adds	r3, r7, r2
 800a572:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6413      	str	r3, [r2, #64]	; 0x40
 800a578:	e00e      	b.n	800a598 <update_motor+0xa4>
 800a57a:	2218      	movs	r2, #24
 800a57c:	18bb      	adds	r3, r7, r2
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	2b10      	cmp	r3, #16
 800a582:	d104      	bne.n	800a58e <update_motor+0x9a>
 800a584:	18bb      	adds	r3, r7, r2
 800a586:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6593      	str	r3, [r2, #88]	; 0x58
 800a58c:	e004      	b.n	800a598 <update_motor+0xa4>
 800a58e:	2318      	movs	r3, #24
 800a590:	18fb      	adds	r3, r7, r3
 800a592:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	65d3      	str	r3, [r2, #92]	; 0x5c
				__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,0);
 800a598:	2218      	movs	r2, #24
 800a59a:	18bb      	adds	r3, r7, r2
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d104      	bne.n	800a5ac <update_motor+0xb8>
 800a5a2:	18bb      	adds	r3, r7, r2
 800a5a4:	6a1b      	ldr	r3, [r3, #32]
 800a5a6:	2200      	movs	r2, #0
 800a5a8:	635a      	str	r2, [r3, #52]	; 0x34
 800a5aa:	e02c      	b.n	800a606 <update_motor+0x112>
 800a5ac:	2218      	movs	r2, #24
 800a5ae:	18bb      	adds	r3, r7, r2
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	2b04      	cmp	r3, #4
 800a5b4:	d104      	bne.n	800a5c0 <update_motor+0xcc>
 800a5b6:	18bb      	adds	r3, r7, r2
 800a5b8:	6a1a      	ldr	r2, [r3, #32]
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	6393      	str	r3, [r2, #56]	; 0x38
 800a5be:	e022      	b.n	800a606 <update_motor+0x112>
 800a5c0:	2218      	movs	r2, #24
 800a5c2:	18bb      	adds	r3, r7, r2
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	2b08      	cmp	r3, #8
 800a5c8:	d104      	bne.n	800a5d4 <update_motor+0xe0>
 800a5ca:	18bb      	adds	r3, r7, r2
 800a5cc:	6a1a      	ldr	r2, [r3, #32]
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a5d2:	e018      	b.n	800a606 <update_motor+0x112>
 800a5d4:	2218      	movs	r2, #24
 800a5d6:	18bb      	adds	r3, r7, r2
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	2b0c      	cmp	r3, #12
 800a5dc:	d104      	bne.n	800a5e8 <update_motor+0xf4>
 800a5de:	18bb      	adds	r3, r7, r2
 800a5e0:	6a1a      	ldr	r2, [r3, #32]
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	6413      	str	r3, [r2, #64]	; 0x40
 800a5e6:	e00e      	b.n	800a606 <update_motor+0x112>
 800a5e8:	2218      	movs	r2, #24
 800a5ea:	18bb      	adds	r3, r7, r2
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	2b10      	cmp	r3, #16
 800a5f0:	d104      	bne.n	800a5fc <update_motor+0x108>
 800a5f2:	18bb      	adds	r3, r7, r2
 800a5f4:	6a1a      	ldr	r2, [r3, #32]
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	6593      	str	r3, [r2, #88]	; 0x58
 800a5fa:	e004      	b.n	800a606 <update_motor+0x112>
 800a5fc:	2318      	movs	r3, #24
 800a5fe:	18fb      	adds	r3, r7, r3
 800a600:	6a1a      	ldr	r2, [r3, #32]
 800a602:	2300      	movs	r3, #0
 800a604:	65d3      	str	r3, [r2, #92]	; 0x5c
			}
			if (motor.sens == 2)
 800a606:	2218      	movs	r2, #24
 800a608:	18bb      	adds	r3, r7, r2
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	2b02      	cmp	r3, #2
 800a60e:	d000      	beq.n	800a612 <update_motor+0x11e>
 800a610:	e06c      	b.n	800a6ec <update_motor+0x1f8>
			{
				__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,0);
 800a612:	18bb      	adds	r3, r7, r2
 800a614:	685b      	ldr	r3, [r3, #4]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d104      	bne.n	800a624 <update_motor+0x130>
 800a61a:	18bb      	adds	r3, r7, r2
 800a61c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a61e:	2200      	movs	r2, #0
 800a620:	635a      	str	r2, [r3, #52]	; 0x34
 800a622:	e02c      	b.n	800a67e <update_motor+0x18a>
 800a624:	2218      	movs	r2, #24
 800a626:	18bb      	adds	r3, r7, r2
 800a628:	685b      	ldr	r3, [r3, #4]
 800a62a:	2b04      	cmp	r3, #4
 800a62c:	d104      	bne.n	800a638 <update_motor+0x144>
 800a62e:	18bb      	adds	r3, r7, r2
 800a630:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a632:	2300      	movs	r3, #0
 800a634:	6393      	str	r3, [r2, #56]	; 0x38
 800a636:	e022      	b.n	800a67e <update_motor+0x18a>
 800a638:	2218      	movs	r2, #24
 800a63a:	18bb      	adds	r3, r7, r2
 800a63c:	685b      	ldr	r3, [r3, #4]
 800a63e:	2b08      	cmp	r3, #8
 800a640:	d104      	bne.n	800a64c <update_motor+0x158>
 800a642:	18bb      	adds	r3, r7, r2
 800a644:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a646:	2300      	movs	r3, #0
 800a648:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a64a:	e018      	b.n	800a67e <update_motor+0x18a>
 800a64c:	2218      	movs	r2, #24
 800a64e:	18bb      	adds	r3, r7, r2
 800a650:	685b      	ldr	r3, [r3, #4]
 800a652:	2b0c      	cmp	r3, #12
 800a654:	d104      	bne.n	800a660 <update_motor+0x16c>
 800a656:	18bb      	adds	r3, r7, r2
 800a658:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a65a:	2300      	movs	r3, #0
 800a65c:	6413      	str	r3, [r2, #64]	; 0x40
 800a65e:	e00e      	b.n	800a67e <update_motor+0x18a>
 800a660:	2218      	movs	r2, #24
 800a662:	18bb      	adds	r3, r7, r2
 800a664:	685b      	ldr	r3, [r3, #4]
 800a666:	2b10      	cmp	r3, #16
 800a668:	d104      	bne.n	800a674 <update_motor+0x180>
 800a66a:	18bb      	adds	r3, r7, r2
 800a66c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a66e:	2300      	movs	r3, #0
 800a670:	6593      	str	r3, [r2, #88]	; 0x58
 800a672:	e004      	b.n	800a67e <update_motor+0x18a>
 800a674:	2318      	movs	r3, #24
 800a676:	18fb      	adds	r3, r7, r3
 800a678:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a67a:	2300      	movs	r3, #0
 800a67c:	65d3      	str	r3, [r2, #92]	; 0x5c
				__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,i);
 800a67e:	2218      	movs	r2, #24
 800a680:	18bb      	adds	r3, r7, r2
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	2b00      	cmp	r3, #0
 800a686:	d104      	bne.n	800a692 <update_motor+0x19e>
 800a688:	18bb      	adds	r3, r7, r2
 800a68a:	6a1b      	ldr	r3, [r3, #32]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	635a      	str	r2, [r3, #52]	; 0x34
 800a690:	e02c      	b.n	800a6ec <update_motor+0x1f8>
 800a692:	2218      	movs	r2, #24
 800a694:	18bb      	adds	r3, r7, r2
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	2b04      	cmp	r3, #4
 800a69a:	d104      	bne.n	800a6a6 <update_motor+0x1b2>
 800a69c:	18bb      	adds	r3, r7, r2
 800a69e:	6a1a      	ldr	r2, [r3, #32]
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6393      	str	r3, [r2, #56]	; 0x38
 800a6a4:	e022      	b.n	800a6ec <update_motor+0x1f8>
 800a6a6:	2218      	movs	r2, #24
 800a6a8:	18bb      	adds	r3, r7, r2
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	2b08      	cmp	r3, #8
 800a6ae:	d104      	bne.n	800a6ba <update_motor+0x1c6>
 800a6b0:	18bb      	adds	r3, r7, r2
 800a6b2:	6a1a      	ldr	r2, [r3, #32]
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a6b8:	e018      	b.n	800a6ec <update_motor+0x1f8>
 800a6ba:	2218      	movs	r2, #24
 800a6bc:	18bb      	adds	r3, r7, r2
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	2b0c      	cmp	r3, #12
 800a6c2:	d104      	bne.n	800a6ce <update_motor+0x1da>
 800a6c4:	18bb      	adds	r3, r7, r2
 800a6c6:	6a1a      	ldr	r2, [r3, #32]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	6413      	str	r3, [r2, #64]	; 0x40
 800a6cc:	e00e      	b.n	800a6ec <update_motor+0x1f8>
 800a6ce:	2218      	movs	r2, #24
 800a6d0:	18bb      	adds	r3, r7, r2
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b10      	cmp	r3, #16
 800a6d6:	d104      	bne.n	800a6e2 <update_motor+0x1ee>
 800a6d8:	18bb      	adds	r3, r7, r2
 800a6da:	6a1a      	ldr	r2, [r3, #32]
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6593      	str	r3, [r2, #88]	; 0x58
 800a6e0:	e004      	b.n	800a6ec <update_motor+0x1f8>
 800a6e2:	2318      	movs	r3, #24
 800a6e4:	18fb      	adds	r3, r7, r3
 800a6e6:	6a1a      	ldr	r2, [r3, #32]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	65d3      	str	r3, [r2, #92]	; 0x5c
		for (int i = motor.old_alpha; i<=motor.alpha;i++){	//application de la rampe
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	3301      	adds	r3, #1
 800a6f0:	607b      	str	r3, [r7, #4]
 800a6f2:	2318      	movs	r3, #24
 800a6f4:	18fb      	adds	r3, r7, r3
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	687a      	ldr	r2, [r7, #4]
 800a6fa:	429a      	cmp	r2, r3
 800a6fc:	dc00      	bgt.n	800a700 <update_motor+0x20c>
 800a6fe:	e70f      	b.n	800a520 <update_motor+0x2c>
 800a700:	e0fb      	b.n	800a8fa <update_motor+0x406>
			}
		}
	}
	else if (motor.old_alpha >= motor.alpha)
 800a702:	2118      	movs	r1, #24
 800a704:	187b      	adds	r3, r7, r1
 800a706:	691a      	ldr	r2, [r3, #16]
 800a708:	187b      	adds	r3, r7, r1
 800a70a:	68db      	ldr	r3, [r3, #12]
 800a70c:	429a      	cmp	r2, r3
 800a70e:	da00      	bge.n	800a712 <update_motor+0x21e>
 800a710:	e0f3      	b.n	800a8fa <update_motor+0x406>
	{
		for (int i = motor.old_alpha; i>=motor.alpha;i--){	//application de la rampe
 800a712:	187b      	adds	r3, r7, r1
 800a714:	691b      	ldr	r3, [r3, #16]
 800a716:	603b      	str	r3, [r7, #0]
 800a718:	e0e8      	b.n	800a8ec <update_motor+0x3f8>
			if (motor.sens == 1)
 800a71a:	2218      	movs	r2, #24
 800a71c:	18bb      	adds	r3, r7, r2
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	2b01      	cmp	r3, #1
 800a722:	d000      	beq.n	800a726 <update_motor+0x232>
 800a724:	e06c      	b.n	800a800 <update_motor+0x30c>
			{
				__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,i);
 800a726:	18bb      	adds	r3, r7, r2
 800a728:	685b      	ldr	r3, [r3, #4]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d104      	bne.n	800a738 <update_motor+0x244>
 800a72e:	18bb      	adds	r3, r7, r2
 800a730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a732:	683a      	ldr	r2, [r7, #0]
 800a734:	635a      	str	r2, [r3, #52]	; 0x34
 800a736:	e02c      	b.n	800a792 <update_motor+0x29e>
 800a738:	2218      	movs	r2, #24
 800a73a:	18bb      	adds	r3, r7, r2
 800a73c:	685b      	ldr	r3, [r3, #4]
 800a73e:	2b04      	cmp	r3, #4
 800a740:	d104      	bne.n	800a74c <update_motor+0x258>
 800a742:	18bb      	adds	r3, r7, r2
 800a744:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a746:	683b      	ldr	r3, [r7, #0]
 800a748:	6393      	str	r3, [r2, #56]	; 0x38
 800a74a:	e022      	b.n	800a792 <update_motor+0x29e>
 800a74c:	2218      	movs	r2, #24
 800a74e:	18bb      	adds	r3, r7, r2
 800a750:	685b      	ldr	r3, [r3, #4]
 800a752:	2b08      	cmp	r3, #8
 800a754:	d104      	bne.n	800a760 <update_motor+0x26c>
 800a756:	18bb      	adds	r3, r7, r2
 800a758:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a75e:	e018      	b.n	800a792 <update_motor+0x29e>
 800a760:	2218      	movs	r2, #24
 800a762:	18bb      	adds	r3, r7, r2
 800a764:	685b      	ldr	r3, [r3, #4]
 800a766:	2b0c      	cmp	r3, #12
 800a768:	d104      	bne.n	800a774 <update_motor+0x280>
 800a76a:	18bb      	adds	r3, r7, r2
 800a76c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	6413      	str	r3, [r2, #64]	; 0x40
 800a772:	e00e      	b.n	800a792 <update_motor+0x29e>
 800a774:	2218      	movs	r2, #24
 800a776:	18bb      	adds	r3, r7, r2
 800a778:	685b      	ldr	r3, [r3, #4]
 800a77a:	2b10      	cmp	r3, #16
 800a77c:	d104      	bne.n	800a788 <update_motor+0x294>
 800a77e:	18bb      	adds	r3, r7, r2
 800a780:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	6593      	str	r3, [r2, #88]	; 0x58
 800a786:	e004      	b.n	800a792 <update_motor+0x29e>
 800a788:	2318      	movs	r3, #24
 800a78a:	18fb      	adds	r3, r7, r3
 800a78c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a78e:	683b      	ldr	r3, [r7, #0]
 800a790:	65d3      	str	r3, [r2, #92]	; 0x5c
				__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,0);
 800a792:	2218      	movs	r2, #24
 800a794:	18bb      	adds	r3, r7, r2
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d104      	bne.n	800a7a6 <update_motor+0x2b2>
 800a79c:	18bb      	adds	r3, r7, r2
 800a79e:	6a1b      	ldr	r3, [r3, #32]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	635a      	str	r2, [r3, #52]	; 0x34
 800a7a4:	e02c      	b.n	800a800 <update_motor+0x30c>
 800a7a6:	2218      	movs	r2, #24
 800a7a8:	18bb      	adds	r3, r7, r2
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	2b04      	cmp	r3, #4
 800a7ae:	d104      	bne.n	800a7ba <update_motor+0x2c6>
 800a7b0:	18bb      	adds	r3, r7, r2
 800a7b2:	6a1a      	ldr	r2, [r3, #32]
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	6393      	str	r3, [r2, #56]	; 0x38
 800a7b8:	e022      	b.n	800a800 <update_motor+0x30c>
 800a7ba:	2218      	movs	r2, #24
 800a7bc:	18bb      	adds	r3, r7, r2
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d104      	bne.n	800a7ce <update_motor+0x2da>
 800a7c4:	18bb      	adds	r3, r7, r2
 800a7c6:	6a1a      	ldr	r2, [r3, #32]
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a7cc:	e018      	b.n	800a800 <update_motor+0x30c>
 800a7ce:	2218      	movs	r2, #24
 800a7d0:	18bb      	adds	r3, r7, r2
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	2b0c      	cmp	r3, #12
 800a7d6:	d104      	bne.n	800a7e2 <update_motor+0x2ee>
 800a7d8:	18bb      	adds	r3, r7, r2
 800a7da:	6a1a      	ldr	r2, [r3, #32]
 800a7dc:	2300      	movs	r3, #0
 800a7de:	6413      	str	r3, [r2, #64]	; 0x40
 800a7e0:	e00e      	b.n	800a800 <update_motor+0x30c>
 800a7e2:	2218      	movs	r2, #24
 800a7e4:	18bb      	adds	r3, r7, r2
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	2b10      	cmp	r3, #16
 800a7ea:	d104      	bne.n	800a7f6 <update_motor+0x302>
 800a7ec:	18bb      	adds	r3, r7, r2
 800a7ee:	6a1a      	ldr	r2, [r3, #32]
 800a7f0:	2300      	movs	r3, #0
 800a7f2:	6593      	str	r3, [r2, #88]	; 0x58
 800a7f4:	e004      	b.n	800a800 <update_motor+0x30c>
 800a7f6:	2318      	movs	r3, #24
 800a7f8:	18fb      	adds	r3, r7, r3
 800a7fa:	6a1a      	ldr	r2, [r3, #32]
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	65d3      	str	r3, [r2, #92]	; 0x5c
			}
			if (motor.sens == 2)
 800a800:	2218      	movs	r2, #24
 800a802:	18bb      	adds	r3, r7, r2
 800a804:	689b      	ldr	r3, [r3, #8]
 800a806:	2b02      	cmp	r3, #2
 800a808:	d000      	beq.n	800a80c <update_motor+0x318>
 800a80a:	e06c      	b.n	800a8e6 <update_motor+0x3f2>
			{
				__HAL_TIM_SetCompare(&motor.Timer_Backward,motor.Channel_Backward,0);
 800a80c:	18bb      	adds	r3, r7, r2
 800a80e:	685b      	ldr	r3, [r3, #4]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d104      	bne.n	800a81e <update_motor+0x32a>
 800a814:	18bb      	adds	r3, r7, r2
 800a816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a818:	2200      	movs	r2, #0
 800a81a:	635a      	str	r2, [r3, #52]	; 0x34
 800a81c:	e02c      	b.n	800a878 <update_motor+0x384>
 800a81e:	2218      	movs	r2, #24
 800a820:	18bb      	adds	r3, r7, r2
 800a822:	685b      	ldr	r3, [r3, #4]
 800a824:	2b04      	cmp	r3, #4
 800a826:	d104      	bne.n	800a832 <update_motor+0x33e>
 800a828:	18bb      	adds	r3, r7, r2
 800a82a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a82c:	2300      	movs	r3, #0
 800a82e:	6393      	str	r3, [r2, #56]	; 0x38
 800a830:	e022      	b.n	800a878 <update_motor+0x384>
 800a832:	2218      	movs	r2, #24
 800a834:	18bb      	adds	r3, r7, r2
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	2b08      	cmp	r3, #8
 800a83a:	d104      	bne.n	800a846 <update_motor+0x352>
 800a83c:	18bb      	adds	r3, r7, r2
 800a83e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a840:	2300      	movs	r3, #0
 800a842:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a844:	e018      	b.n	800a878 <update_motor+0x384>
 800a846:	2218      	movs	r2, #24
 800a848:	18bb      	adds	r3, r7, r2
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	2b0c      	cmp	r3, #12
 800a84e:	d104      	bne.n	800a85a <update_motor+0x366>
 800a850:	18bb      	adds	r3, r7, r2
 800a852:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a854:	2300      	movs	r3, #0
 800a856:	6413      	str	r3, [r2, #64]	; 0x40
 800a858:	e00e      	b.n	800a878 <update_motor+0x384>
 800a85a:	2218      	movs	r2, #24
 800a85c:	18bb      	adds	r3, r7, r2
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	2b10      	cmp	r3, #16
 800a862:	d104      	bne.n	800a86e <update_motor+0x37a>
 800a864:	18bb      	adds	r3, r7, r2
 800a866:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a868:	2300      	movs	r3, #0
 800a86a:	6593      	str	r3, [r2, #88]	; 0x58
 800a86c:	e004      	b.n	800a878 <update_motor+0x384>
 800a86e:	2318      	movs	r3, #24
 800a870:	18fb      	adds	r3, r7, r3
 800a872:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a874:	2300      	movs	r3, #0
 800a876:	65d3      	str	r3, [r2, #92]	; 0x5c
				__HAL_TIM_SetCompare(&motor.Timer_Forward,motor.Channel_Forward,i);
 800a878:	2218      	movs	r2, #24
 800a87a:	18bb      	adds	r3, r7, r2
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d104      	bne.n	800a88c <update_motor+0x398>
 800a882:	18bb      	adds	r3, r7, r2
 800a884:	6a1b      	ldr	r3, [r3, #32]
 800a886:	683a      	ldr	r2, [r7, #0]
 800a888:	635a      	str	r2, [r3, #52]	; 0x34
 800a88a:	e02c      	b.n	800a8e6 <update_motor+0x3f2>
 800a88c:	2218      	movs	r2, #24
 800a88e:	18bb      	adds	r3, r7, r2
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2b04      	cmp	r3, #4
 800a894:	d104      	bne.n	800a8a0 <update_motor+0x3ac>
 800a896:	18bb      	adds	r3, r7, r2
 800a898:	6a1a      	ldr	r2, [r3, #32]
 800a89a:	683b      	ldr	r3, [r7, #0]
 800a89c:	6393      	str	r3, [r2, #56]	; 0x38
 800a89e:	e022      	b.n	800a8e6 <update_motor+0x3f2>
 800a8a0:	2218      	movs	r2, #24
 800a8a2:	18bb      	adds	r3, r7, r2
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	2b08      	cmp	r3, #8
 800a8a8:	d104      	bne.n	800a8b4 <update_motor+0x3c0>
 800a8aa:	18bb      	adds	r3, r7, r2
 800a8ac:	6a1a      	ldr	r2, [r3, #32]
 800a8ae:	683b      	ldr	r3, [r7, #0]
 800a8b0:	63d3      	str	r3, [r2, #60]	; 0x3c
 800a8b2:	e018      	b.n	800a8e6 <update_motor+0x3f2>
 800a8b4:	2218      	movs	r2, #24
 800a8b6:	18bb      	adds	r3, r7, r2
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	2b0c      	cmp	r3, #12
 800a8bc:	d104      	bne.n	800a8c8 <update_motor+0x3d4>
 800a8be:	18bb      	adds	r3, r7, r2
 800a8c0:	6a1a      	ldr	r2, [r3, #32]
 800a8c2:	683b      	ldr	r3, [r7, #0]
 800a8c4:	6413      	str	r3, [r2, #64]	; 0x40
 800a8c6:	e00e      	b.n	800a8e6 <update_motor+0x3f2>
 800a8c8:	2218      	movs	r2, #24
 800a8ca:	18bb      	adds	r3, r7, r2
 800a8cc:	681b      	ldr	r3, [r3, #0]
 800a8ce:	2b10      	cmp	r3, #16
 800a8d0:	d104      	bne.n	800a8dc <update_motor+0x3e8>
 800a8d2:	18bb      	adds	r3, r7, r2
 800a8d4:	6a1a      	ldr	r2, [r3, #32]
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	6593      	str	r3, [r2, #88]	; 0x58
 800a8da:	e004      	b.n	800a8e6 <update_motor+0x3f2>
 800a8dc:	2318      	movs	r3, #24
 800a8de:	18fb      	adds	r3, r7, r3
 800a8e0:	6a1a      	ldr	r2, [r3, #32]
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	65d3      	str	r3, [r2, #92]	; 0x5c
		for (int i = motor.old_alpha; i>=motor.alpha;i--){	//application de la rampe
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	603b      	str	r3, [r7, #0]
 800a8ec:	2318      	movs	r3, #24
 800a8ee:	18fb      	adds	r3, r7, r3
 800a8f0:	68db      	ldr	r3, [r3, #12]
 800a8f2:	683a      	ldr	r2, [r7, #0]
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	db00      	blt.n	800a8fa <update_motor+0x406>
 800a8f8:	e70f      	b.n	800a71a <update_motor+0x226>
			}
		}
	}

	motor.old_alpha = motor.alpha;	//permet de stocker l'ancien alpha pour réaliser la futur rampe
 800a8fa:	2118      	movs	r1, #24
 800a8fc:	187b      	adds	r3, r7, r1
 800a8fe:	68da      	ldr	r2, [r3, #12]
 800a900:	187b      	adds	r3, r7, r1
 800a902:	611a      	str	r2, [r3, #16]
}
 800a904:	46c0      	nop			; (mov r8, r8)
 800a906:	46bd      	mov	sp, r7
 800a908:	b002      	add	sp, #8
 800a90a:	bcb0      	pop	{r4, r5, r7}
 800a90c:	bc08      	pop	{r3}
 800a90e:	b004      	add	sp, #16
 800a910:	4718      	bx	r3
	...

0800a914 <codeur_init>:
 */

#include "sensor.h"


void codeur_init(Codeur_HandleTypeDef *hcodeur, TIM_HandleTypeDef *htimEncodeur, int frequency){
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	60f8      	str	r0, [r7, #12]
 800a91c:	60b9      	str	r1, [r7, #8]
 800a91e:	607a      	str	r2, [r7, #4]
	HAL_TIM_Encoder_Start_IT(&htim3,TIM_CHANNEL_ALL);
 800a920:	4b0c      	ldr	r3, [pc, #48]	; (800a954 <codeur_init+0x40>)
 800a922:	213c      	movs	r1, #60	; 0x3c
 800a924:	0018      	movs	r0, r3
 800a926:	f7fa fbab 	bl	8005080 <HAL_TIM_Encoder_Start_IT>
	HAL_TIM_Encoder_Start_IT(&htim1,TIM_CHANNEL_ALL);
 800a92a:	4b0b      	ldr	r3, [pc, #44]	; (800a958 <codeur_init+0x44>)
 800a92c:	213c      	movs	r1, #60	; 0x3c
 800a92e:	0018      	movs	r0, r3
 800a930:	f7fa fba6 	bl	8005080 <HAL_TIM_Encoder_Start_IT>
	hcodeur->htimEncodeur = htimEncodeur;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	68ba      	ldr	r2, [r7, #8]
 800a938:	601a      	str	r2, [r3, #0]
	hcodeur->frequency = frequency;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	687a      	ldr	r2, [r7, #4]
 800a93e:	605a      	str	r2, [r3, #4]
	HAL_TIM_Base_Start(hcodeur->htimEncodeur);
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	0018      	movs	r0, r3
 800a946:	f7fa f887 	bl	8004a58 <HAL_TIM_Base_Start>
}
 800a94a:	46c0      	nop			; (mov r8, r8)
 800a94c:	46bd      	mov	sp, r7
 800a94e:	b004      	add	sp, #16
 800a950:	bd80      	pop	{r7, pc}
 800a952:	46c0      	nop			; (mov r8, r8)
 800a954:	20003418 	.word	0x20003418
 800a958:	200033cc 	.word	0x200033cc

0800a95c <std>:
 800a95c:	2300      	movs	r3, #0
 800a95e:	b510      	push	{r4, lr}
 800a960:	0004      	movs	r4, r0
 800a962:	6003      	str	r3, [r0, #0]
 800a964:	6043      	str	r3, [r0, #4]
 800a966:	6083      	str	r3, [r0, #8]
 800a968:	8181      	strh	r1, [r0, #12]
 800a96a:	6643      	str	r3, [r0, #100]	; 0x64
 800a96c:	81c2      	strh	r2, [r0, #14]
 800a96e:	6103      	str	r3, [r0, #16]
 800a970:	6143      	str	r3, [r0, #20]
 800a972:	6183      	str	r3, [r0, #24]
 800a974:	0019      	movs	r1, r3
 800a976:	2208      	movs	r2, #8
 800a978:	305c      	adds	r0, #92	; 0x5c
 800a97a:	f000 fa49 	bl	800ae10 <memset>
 800a97e:	4b0b      	ldr	r3, [pc, #44]	; (800a9ac <std+0x50>)
 800a980:	6224      	str	r4, [r4, #32]
 800a982:	6263      	str	r3, [r4, #36]	; 0x24
 800a984:	4b0a      	ldr	r3, [pc, #40]	; (800a9b0 <std+0x54>)
 800a986:	62a3      	str	r3, [r4, #40]	; 0x28
 800a988:	4b0a      	ldr	r3, [pc, #40]	; (800a9b4 <std+0x58>)
 800a98a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a98c:	4b0a      	ldr	r3, [pc, #40]	; (800a9b8 <std+0x5c>)
 800a98e:	6323      	str	r3, [r4, #48]	; 0x30
 800a990:	4b0a      	ldr	r3, [pc, #40]	; (800a9bc <std+0x60>)
 800a992:	429c      	cmp	r4, r3
 800a994:	d005      	beq.n	800a9a2 <std+0x46>
 800a996:	4b0a      	ldr	r3, [pc, #40]	; (800a9c0 <std+0x64>)
 800a998:	429c      	cmp	r4, r3
 800a99a:	d002      	beq.n	800a9a2 <std+0x46>
 800a99c:	4b09      	ldr	r3, [pc, #36]	; (800a9c4 <std+0x68>)
 800a99e:	429c      	cmp	r4, r3
 800a9a0:	d103      	bne.n	800a9aa <std+0x4e>
 800a9a2:	0020      	movs	r0, r4
 800a9a4:	3058      	adds	r0, #88	; 0x58
 800a9a6:	f000 fab3 	bl	800af10 <__retarget_lock_init_recursive>
 800a9aa:	bd10      	pop	{r4, pc}
 800a9ac:	0800ac2d 	.word	0x0800ac2d
 800a9b0:	0800ac55 	.word	0x0800ac55
 800a9b4:	0800ac8d 	.word	0x0800ac8d
 800a9b8:	0800acb9 	.word	0x0800acb9
 800a9bc:	200086d4 	.word	0x200086d4
 800a9c0:	2000873c 	.word	0x2000873c
 800a9c4:	200087a4 	.word	0x200087a4

0800a9c8 <stdio_exit_handler>:
 800a9c8:	b510      	push	{r4, lr}
 800a9ca:	4a03      	ldr	r2, [pc, #12]	; (800a9d8 <stdio_exit_handler+0x10>)
 800a9cc:	4903      	ldr	r1, [pc, #12]	; (800a9dc <stdio_exit_handler+0x14>)
 800a9ce:	4804      	ldr	r0, [pc, #16]	; (800a9e0 <stdio_exit_handler+0x18>)
 800a9d0:	f000 f86c 	bl	800aaac <_fwalk_sglue>
 800a9d4:	bd10      	pop	{r4, pc}
 800a9d6:	46c0      	nop			; (mov r8, r8)
 800a9d8:	20000010 	.word	0x20000010
 800a9dc:	0800ba85 	.word	0x0800ba85
 800a9e0:	2000001c 	.word	0x2000001c

0800a9e4 <cleanup_stdio>:
 800a9e4:	6841      	ldr	r1, [r0, #4]
 800a9e6:	4b0b      	ldr	r3, [pc, #44]	; (800aa14 <cleanup_stdio+0x30>)
 800a9e8:	b510      	push	{r4, lr}
 800a9ea:	0004      	movs	r4, r0
 800a9ec:	4299      	cmp	r1, r3
 800a9ee:	d001      	beq.n	800a9f4 <cleanup_stdio+0x10>
 800a9f0:	f001 f848 	bl	800ba84 <_fflush_r>
 800a9f4:	68a1      	ldr	r1, [r4, #8]
 800a9f6:	4b08      	ldr	r3, [pc, #32]	; (800aa18 <cleanup_stdio+0x34>)
 800a9f8:	4299      	cmp	r1, r3
 800a9fa:	d002      	beq.n	800aa02 <cleanup_stdio+0x1e>
 800a9fc:	0020      	movs	r0, r4
 800a9fe:	f001 f841 	bl	800ba84 <_fflush_r>
 800aa02:	68e1      	ldr	r1, [r4, #12]
 800aa04:	4b05      	ldr	r3, [pc, #20]	; (800aa1c <cleanup_stdio+0x38>)
 800aa06:	4299      	cmp	r1, r3
 800aa08:	d002      	beq.n	800aa10 <cleanup_stdio+0x2c>
 800aa0a:	0020      	movs	r0, r4
 800aa0c:	f001 f83a 	bl	800ba84 <_fflush_r>
 800aa10:	bd10      	pop	{r4, pc}
 800aa12:	46c0      	nop			; (mov r8, r8)
 800aa14:	200086d4 	.word	0x200086d4
 800aa18:	2000873c 	.word	0x2000873c
 800aa1c:	200087a4 	.word	0x200087a4

0800aa20 <global_stdio_init.part.0>:
 800aa20:	b510      	push	{r4, lr}
 800aa22:	4b09      	ldr	r3, [pc, #36]	; (800aa48 <global_stdio_init.part.0+0x28>)
 800aa24:	4a09      	ldr	r2, [pc, #36]	; (800aa4c <global_stdio_init.part.0+0x2c>)
 800aa26:	2104      	movs	r1, #4
 800aa28:	601a      	str	r2, [r3, #0]
 800aa2a:	4809      	ldr	r0, [pc, #36]	; (800aa50 <global_stdio_init.part.0+0x30>)
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	f7ff ff95 	bl	800a95c <std>
 800aa32:	2201      	movs	r2, #1
 800aa34:	2109      	movs	r1, #9
 800aa36:	4807      	ldr	r0, [pc, #28]	; (800aa54 <global_stdio_init.part.0+0x34>)
 800aa38:	f7ff ff90 	bl	800a95c <std>
 800aa3c:	2202      	movs	r2, #2
 800aa3e:	2112      	movs	r1, #18
 800aa40:	4805      	ldr	r0, [pc, #20]	; (800aa58 <global_stdio_init.part.0+0x38>)
 800aa42:	f7ff ff8b 	bl	800a95c <std>
 800aa46:	bd10      	pop	{r4, pc}
 800aa48:	2000880c 	.word	0x2000880c
 800aa4c:	0800a9c9 	.word	0x0800a9c9
 800aa50:	200086d4 	.word	0x200086d4
 800aa54:	2000873c 	.word	0x2000873c
 800aa58:	200087a4 	.word	0x200087a4

0800aa5c <__sfp_lock_acquire>:
 800aa5c:	b510      	push	{r4, lr}
 800aa5e:	4802      	ldr	r0, [pc, #8]	; (800aa68 <__sfp_lock_acquire+0xc>)
 800aa60:	f000 fa57 	bl	800af12 <__retarget_lock_acquire_recursive>
 800aa64:	bd10      	pop	{r4, pc}
 800aa66:	46c0      	nop			; (mov r8, r8)
 800aa68:	20008815 	.word	0x20008815

0800aa6c <__sfp_lock_release>:
 800aa6c:	b510      	push	{r4, lr}
 800aa6e:	4802      	ldr	r0, [pc, #8]	; (800aa78 <__sfp_lock_release+0xc>)
 800aa70:	f000 fa50 	bl	800af14 <__retarget_lock_release_recursive>
 800aa74:	bd10      	pop	{r4, pc}
 800aa76:	46c0      	nop			; (mov r8, r8)
 800aa78:	20008815 	.word	0x20008815

0800aa7c <__sinit>:
 800aa7c:	b510      	push	{r4, lr}
 800aa7e:	0004      	movs	r4, r0
 800aa80:	f7ff ffec 	bl	800aa5c <__sfp_lock_acquire>
 800aa84:	6a23      	ldr	r3, [r4, #32]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d002      	beq.n	800aa90 <__sinit+0x14>
 800aa8a:	f7ff ffef 	bl	800aa6c <__sfp_lock_release>
 800aa8e:	bd10      	pop	{r4, pc}
 800aa90:	4b04      	ldr	r3, [pc, #16]	; (800aaa4 <__sinit+0x28>)
 800aa92:	6223      	str	r3, [r4, #32]
 800aa94:	4b04      	ldr	r3, [pc, #16]	; (800aaa8 <__sinit+0x2c>)
 800aa96:	681b      	ldr	r3, [r3, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d1f6      	bne.n	800aa8a <__sinit+0xe>
 800aa9c:	f7ff ffc0 	bl	800aa20 <global_stdio_init.part.0>
 800aaa0:	e7f3      	b.n	800aa8a <__sinit+0xe>
 800aaa2:	46c0      	nop			; (mov r8, r8)
 800aaa4:	0800a9e5 	.word	0x0800a9e5
 800aaa8:	2000880c 	.word	0x2000880c

0800aaac <_fwalk_sglue>:
 800aaac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aaae:	0014      	movs	r4, r2
 800aab0:	2600      	movs	r6, #0
 800aab2:	9000      	str	r0, [sp, #0]
 800aab4:	9101      	str	r1, [sp, #4]
 800aab6:	68a5      	ldr	r5, [r4, #8]
 800aab8:	6867      	ldr	r7, [r4, #4]
 800aaba:	3f01      	subs	r7, #1
 800aabc:	d504      	bpl.n	800aac8 <_fwalk_sglue+0x1c>
 800aabe:	6824      	ldr	r4, [r4, #0]
 800aac0:	2c00      	cmp	r4, #0
 800aac2:	d1f8      	bne.n	800aab6 <_fwalk_sglue+0xa>
 800aac4:	0030      	movs	r0, r6
 800aac6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aac8:	89ab      	ldrh	r3, [r5, #12]
 800aaca:	2b01      	cmp	r3, #1
 800aacc:	d908      	bls.n	800aae0 <_fwalk_sglue+0x34>
 800aace:	220e      	movs	r2, #14
 800aad0:	5eab      	ldrsh	r3, [r5, r2]
 800aad2:	3301      	adds	r3, #1
 800aad4:	d004      	beq.n	800aae0 <_fwalk_sglue+0x34>
 800aad6:	0029      	movs	r1, r5
 800aad8:	9800      	ldr	r0, [sp, #0]
 800aada:	9b01      	ldr	r3, [sp, #4]
 800aadc:	4798      	blx	r3
 800aade:	4306      	orrs	r6, r0
 800aae0:	3568      	adds	r5, #104	; 0x68
 800aae2:	e7ea      	b.n	800aaba <_fwalk_sglue+0xe>

0800aae4 <iprintf>:
 800aae4:	b40f      	push	{r0, r1, r2, r3}
 800aae6:	b507      	push	{r0, r1, r2, lr}
 800aae8:	4905      	ldr	r1, [pc, #20]	; (800ab00 <iprintf+0x1c>)
 800aaea:	ab04      	add	r3, sp, #16
 800aaec:	6808      	ldr	r0, [r1, #0]
 800aaee:	cb04      	ldmia	r3!, {r2}
 800aaf0:	6881      	ldr	r1, [r0, #8]
 800aaf2:	9301      	str	r3, [sp, #4]
 800aaf4:	f000 fca0 	bl	800b438 <_vfiprintf_r>
 800aaf8:	b003      	add	sp, #12
 800aafa:	bc08      	pop	{r3}
 800aafc:	b004      	add	sp, #16
 800aafe:	4718      	bx	r3
 800ab00:	20000068 	.word	0x20000068

0800ab04 <_puts_r>:
 800ab04:	6a03      	ldr	r3, [r0, #32]
 800ab06:	b570      	push	{r4, r5, r6, lr}
 800ab08:	0005      	movs	r5, r0
 800ab0a:	000e      	movs	r6, r1
 800ab0c:	6884      	ldr	r4, [r0, #8]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d101      	bne.n	800ab16 <_puts_r+0x12>
 800ab12:	f7ff ffb3 	bl	800aa7c <__sinit>
 800ab16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab18:	07db      	lsls	r3, r3, #31
 800ab1a:	d405      	bmi.n	800ab28 <_puts_r+0x24>
 800ab1c:	89a3      	ldrh	r3, [r4, #12]
 800ab1e:	059b      	lsls	r3, r3, #22
 800ab20:	d402      	bmi.n	800ab28 <_puts_r+0x24>
 800ab22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab24:	f000 f9f5 	bl	800af12 <__retarget_lock_acquire_recursive>
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	071b      	lsls	r3, r3, #28
 800ab2c:	d502      	bpl.n	800ab34 <_puts_r+0x30>
 800ab2e:	6923      	ldr	r3, [r4, #16]
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d11f      	bne.n	800ab74 <_puts_r+0x70>
 800ab34:	0021      	movs	r1, r4
 800ab36:	0028      	movs	r0, r5
 800ab38:	f000 f906 	bl	800ad48 <__swsetup_r>
 800ab3c:	2800      	cmp	r0, #0
 800ab3e:	d019      	beq.n	800ab74 <_puts_r+0x70>
 800ab40:	2501      	movs	r5, #1
 800ab42:	426d      	negs	r5, r5
 800ab44:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ab46:	07db      	lsls	r3, r3, #31
 800ab48:	d405      	bmi.n	800ab56 <_puts_r+0x52>
 800ab4a:	89a3      	ldrh	r3, [r4, #12]
 800ab4c:	059b      	lsls	r3, r3, #22
 800ab4e:	d402      	bmi.n	800ab56 <_puts_r+0x52>
 800ab50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ab52:	f000 f9df 	bl	800af14 <__retarget_lock_release_recursive>
 800ab56:	0028      	movs	r0, r5
 800ab58:	bd70      	pop	{r4, r5, r6, pc}
 800ab5a:	3601      	adds	r6, #1
 800ab5c:	60a3      	str	r3, [r4, #8]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	da04      	bge.n	800ab6c <_puts_r+0x68>
 800ab62:	69a2      	ldr	r2, [r4, #24]
 800ab64:	429a      	cmp	r2, r3
 800ab66:	dc16      	bgt.n	800ab96 <_puts_r+0x92>
 800ab68:	290a      	cmp	r1, #10
 800ab6a:	d014      	beq.n	800ab96 <_puts_r+0x92>
 800ab6c:	6823      	ldr	r3, [r4, #0]
 800ab6e:	1c5a      	adds	r2, r3, #1
 800ab70:	6022      	str	r2, [r4, #0]
 800ab72:	7019      	strb	r1, [r3, #0]
 800ab74:	68a3      	ldr	r3, [r4, #8]
 800ab76:	7831      	ldrb	r1, [r6, #0]
 800ab78:	3b01      	subs	r3, #1
 800ab7a:	2900      	cmp	r1, #0
 800ab7c:	d1ed      	bne.n	800ab5a <_puts_r+0x56>
 800ab7e:	60a3      	str	r3, [r4, #8]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	da0f      	bge.n	800aba4 <_puts_r+0xa0>
 800ab84:	0028      	movs	r0, r5
 800ab86:	0022      	movs	r2, r4
 800ab88:	310a      	adds	r1, #10
 800ab8a:	f000 f89b 	bl	800acc4 <__swbuf_r>
 800ab8e:	250a      	movs	r5, #10
 800ab90:	3001      	adds	r0, #1
 800ab92:	d1d7      	bne.n	800ab44 <_puts_r+0x40>
 800ab94:	e7d4      	b.n	800ab40 <_puts_r+0x3c>
 800ab96:	0022      	movs	r2, r4
 800ab98:	0028      	movs	r0, r5
 800ab9a:	f000 f893 	bl	800acc4 <__swbuf_r>
 800ab9e:	3001      	adds	r0, #1
 800aba0:	d1e8      	bne.n	800ab74 <_puts_r+0x70>
 800aba2:	e7cd      	b.n	800ab40 <_puts_r+0x3c>
 800aba4:	250a      	movs	r5, #10
 800aba6:	6823      	ldr	r3, [r4, #0]
 800aba8:	1c5a      	adds	r2, r3, #1
 800abaa:	6022      	str	r2, [r4, #0]
 800abac:	701d      	strb	r5, [r3, #0]
 800abae:	e7c9      	b.n	800ab44 <_puts_r+0x40>

0800abb0 <puts>:
 800abb0:	b510      	push	{r4, lr}
 800abb2:	4b03      	ldr	r3, [pc, #12]	; (800abc0 <puts+0x10>)
 800abb4:	0001      	movs	r1, r0
 800abb6:	6818      	ldr	r0, [r3, #0]
 800abb8:	f7ff ffa4 	bl	800ab04 <_puts_r>
 800abbc:	bd10      	pop	{r4, pc}
 800abbe:	46c0      	nop			; (mov r8, r8)
 800abc0:	20000068 	.word	0x20000068

0800abc4 <sniprintf>:
 800abc4:	b40c      	push	{r2, r3}
 800abc6:	b530      	push	{r4, r5, lr}
 800abc8:	4b17      	ldr	r3, [pc, #92]	; (800ac28 <sniprintf+0x64>)
 800abca:	000c      	movs	r4, r1
 800abcc:	681d      	ldr	r5, [r3, #0]
 800abce:	b09d      	sub	sp, #116	; 0x74
 800abd0:	2900      	cmp	r1, #0
 800abd2:	da08      	bge.n	800abe6 <sniprintf+0x22>
 800abd4:	238b      	movs	r3, #139	; 0x8b
 800abd6:	2001      	movs	r0, #1
 800abd8:	602b      	str	r3, [r5, #0]
 800abda:	4240      	negs	r0, r0
 800abdc:	b01d      	add	sp, #116	; 0x74
 800abde:	bc30      	pop	{r4, r5}
 800abe0:	bc08      	pop	{r3}
 800abe2:	b002      	add	sp, #8
 800abe4:	4718      	bx	r3
 800abe6:	2382      	movs	r3, #130	; 0x82
 800abe8:	466a      	mov	r2, sp
 800abea:	009b      	lsls	r3, r3, #2
 800abec:	8293      	strh	r3, [r2, #20]
 800abee:	2300      	movs	r3, #0
 800abf0:	9002      	str	r0, [sp, #8]
 800abf2:	9006      	str	r0, [sp, #24]
 800abf4:	4299      	cmp	r1, r3
 800abf6:	d000      	beq.n	800abfa <sniprintf+0x36>
 800abf8:	1e4b      	subs	r3, r1, #1
 800abfa:	9304      	str	r3, [sp, #16]
 800abfc:	9307      	str	r3, [sp, #28]
 800abfe:	2301      	movs	r3, #1
 800ac00:	466a      	mov	r2, sp
 800ac02:	425b      	negs	r3, r3
 800ac04:	82d3      	strh	r3, [r2, #22]
 800ac06:	0028      	movs	r0, r5
 800ac08:	ab21      	add	r3, sp, #132	; 0x84
 800ac0a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ac0c:	a902      	add	r1, sp, #8
 800ac0e:	9301      	str	r3, [sp, #4]
 800ac10:	f000 faea 	bl	800b1e8 <_svfiprintf_r>
 800ac14:	1c43      	adds	r3, r0, #1
 800ac16:	da01      	bge.n	800ac1c <sniprintf+0x58>
 800ac18:	238b      	movs	r3, #139	; 0x8b
 800ac1a:	602b      	str	r3, [r5, #0]
 800ac1c:	2c00      	cmp	r4, #0
 800ac1e:	d0dd      	beq.n	800abdc <sniprintf+0x18>
 800ac20:	2200      	movs	r2, #0
 800ac22:	9b02      	ldr	r3, [sp, #8]
 800ac24:	701a      	strb	r2, [r3, #0]
 800ac26:	e7d9      	b.n	800abdc <sniprintf+0x18>
 800ac28:	20000068 	.word	0x20000068

0800ac2c <__sread>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	000c      	movs	r4, r1
 800ac30:	250e      	movs	r5, #14
 800ac32:	5f49      	ldrsh	r1, [r1, r5]
 800ac34:	f000 f91a 	bl	800ae6c <_read_r>
 800ac38:	2800      	cmp	r0, #0
 800ac3a:	db03      	blt.n	800ac44 <__sread+0x18>
 800ac3c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800ac3e:	181b      	adds	r3, r3, r0
 800ac40:	6563      	str	r3, [r4, #84]	; 0x54
 800ac42:	bd70      	pop	{r4, r5, r6, pc}
 800ac44:	89a3      	ldrh	r3, [r4, #12]
 800ac46:	4a02      	ldr	r2, [pc, #8]	; (800ac50 <__sread+0x24>)
 800ac48:	4013      	ands	r3, r2
 800ac4a:	81a3      	strh	r3, [r4, #12]
 800ac4c:	e7f9      	b.n	800ac42 <__sread+0x16>
 800ac4e:	46c0      	nop			; (mov r8, r8)
 800ac50:	ffffefff 	.word	0xffffefff

0800ac54 <__swrite>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	001f      	movs	r7, r3
 800ac58:	898b      	ldrh	r3, [r1, #12]
 800ac5a:	0005      	movs	r5, r0
 800ac5c:	000c      	movs	r4, r1
 800ac5e:	0016      	movs	r6, r2
 800ac60:	05db      	lsls	r3, r3, #23
 800ac62:	d505      	bpl.n	800ac70 <__swrite+0x1c>
 800ac64:	230e      	movs	r3, #14
 800ac66:	5ec9      	ldrsh	r1, [r1, r3]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	2302      	movs	r3, #2
 800ac6c:	f000 f8ea 	bl	800ae44 <_lseek_r>
 800ac70:	89a3      	ldrh	r3, [r4, #12]
 800ac72:	4a05      	ldr	r2, [pc, #20]	; (800ac88 <__swrite+0x34>)
 800ac74:	0028      	movs	r0, r5
 800ac76:	4013      	ands	r3, r2
 800ac78:	81a3      	strh	r3, [r4, #12]
 800ac7a:	0032      	movs	r2, r6
 800ac7c:	230e      	movs	r3, #14
 800ac7e:	5ee1      	ldrsh	r1, [r4, r3]
 800ac80:	003b      	movs	r3, r7
 800ac82:	f000 f907 	bl	800ae94 <_write_r>
 800ac86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac88:	ffffefff 	.word	0xffffefff

0800ac8c <__sseek>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	000c      	movs	r4, r1
 800ac90:	250e      	movs	r5, #14
 800ac92:	5f49      	ldrsh	r1, [r1, r5]
 800ac94:	f000 f8d6 	bl	800ae44 <_lseek_r>
 800ac98:	89a3      	ldrh	r3, [r4, #12]
 800ac9a:	1c42      	adds	r2, r0, #1
 800ac9c:	d103      	bne.n	800aca6 <__sseek+0x1a>
 800ac9e:	4a05      	ldr	r2, [pc, #20]	; (800acb4 <__sseek+0x28>)
 800aca0:	4013      	ands	r3, r2
 800aca2:	81a3      	strh	r3, [r4, #12]
 800aca4:	bd70      	pop	{r4, r5, r6, pc}
 800aca6:	2280      	movs	r2, #128	; 0x80
 800aca8:	0152      	lsls	r2, r2, #5
 800acaa:	4313      	orrs	r3, r2
 800acac:	81a3      	strh	r3, [r4, #12]
 800acae:	6560      	str	r0, [r4, #84]	; 0x54
 800acb0:	e7f8      	b.n	800aca4 <__sseek+0x18>
 800acb2:	46c0      	nop			; (mov r8, r8)
 800acb4:	ffffefff 	.word	0xffffefff

0800acb8 <__sclose>:
 800acb8:	b510      	push	{r4, lr}
 800acba:	230e      	movs	r3, #14
 800acbc:	5ec9      	ldrsh	r1, [r1, r3]
 800acbe:	f000 f8af 	bl	800ae20 <_close_r>
 800acc2:	bd10      	pop	{r4, pc}

0800acc4 <__swbuf_r>:
 800acc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acc6:	0006      	movs	r6, r0
 800acc8:	000d      	movs	r5, r1
 800acca:	0014      	movs	r4, r2
 800accc:	2800      	cmp	r0, #0
 800acce:	d004      	beq.n	800acda <__swbuf_r+0x16>
 800acd0:	6a03      	ldr	r3, [r0, #32]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d101      	bne.n	800acda <__swbuf_r+0x16>
 800acd6:	f7ff fed1 	bl	800aa7c <__sinit>
 800acda:	69a3      	ldr	r3, [r4, #24]
 800acdc:	60a3      	str	r3, [r4, #8]
 800acde:	89a3      	ldrh	r3, [r4, #12]
 800ace0:	071b      	lsls	r3, r3, #28
 800ace2:	d528      	bpl.n	800ad36 <__swbuf_r+0x72>
 800ace4:	6923      	ldr	r3, [r4, #16]
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d025      	beq.n	800ad36 <__swbuf_r+0x72>
 800acea:	6923      	ldr	r3, [r4, #16]
 800acec:	6820      	ldr	r0, [r4, #0]
 800acee:	b2ef      	uxtb	r7, r5
 800acf0:	1ac0      	subs	r0, r0, r3
 800acf2:	6963      	ldr	r3, [r4, #20]
 800acf4:	b2ed      	uxtb	r5, r5
 800acf6:	4283      	cmp	r3, r0
 800acf8:	dc05      	bgt.n	800ad06 <__swbuf_r+0x42>
 800acfa:	0021      	movs	r1, r4
 800acfc:	0030      	movs	r0, r6
 800acfe:	f000 fec1 	bl	800ba84 <_fflush_r>
 800ad02:	2800      	cmp	r0, #0
 800ad04:	d11d      	bne.n	800ad42 <__swbuf_r+0x7e>
 800ad06:	68a3      	ldr	r3, [r4, #8]
 800ad08:	3001      	adds	r0, #1
 800ad0a:	3b01      	subs	r3, #1
 800ad0c:	60a3      	str	r3, [r4, #8]
 800ad0e:	6823      	ldr	r3, [r4, #0]
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	6022      	str	r2, [r4, #0]
 800ad14:	701f      	strb	r7, [r3, #0]
 800ad16:	6963      	ldr	r3, [r4, #20]
 800ad18:	4283      	cmp	r3, r0
 800ad1a:	d004      	beq.n	800ad26 <__swbuf_r+0x62>
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	07db      	lsls	r3, r3, #31
 800ad20:	d507      	bpl.n	800ad32 <__swbuf_r+0x6e>
 800ad22:	2d0a      	cmp	r5, #10
 800ad24:	d105      	bne.n	800ad32 <__swbuf_r+0x6e>
 800ad26:	0021      	movs	r1, r4
 800ad28:	0030      	movs	r0, r6
 800ad2a:	f000 feab 	bl	800ba84 <_fflush_r>
 800ad2e:	2800      	cmp	r0, #0
 800ad30:	d107      	bne.n	800ad42 <__swbuf_r+0x7e>
 800ad32:	0028      	movs	r0, r5
 800ad34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ad36:	0021      	movs	r1, r4
 800ad38:	0030      	movs	r0, r6
 800ad3a:	f000 f805 	bl	800ad48 <__swsetup_r>
 800ad3e:	2800      	cmp	r0, #0
 800ad40:	d0d3      	beq.n	800acea <__swbuf_r+0x26>
 800ad42:	2501      	movs	r5, #1
 800ad44:	426d      	negs	r5, r5
 800ad46:	e7f4      	b.n	800ad32 <__swbuf_r+0x6e>

0800ad48 <__swsetup_r>:
 800ad48:	4b30      	ldr	r3, [pc, #192]	; (800ae0c <__swsetup_r+0xc4>)
 800ad4a:	b570      	push	{r4, r5, r6, lr}
 800ad4c:	0005      	movs	r5, r0
 800ad4e:	6818      	ldr	r0, [r3, #0]
 800ad50:	000c      	movs	r4, r1
 800ad52:	2800      	cmp	r0, #0
 800ad54:	d004      	beq.n	800ad60 <__swsetup_r+0x18>
 800ad56:	6a03      	ldr	r3, [r0, #32]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d101      	bne.n	800ad60 <__swsetup_r+0x18>
 800ad5c:	f7ff fe8e 	bl	800aa7c <__sinit>
 800ad60:	230c      	movs	r3, #12
 800ad62:	5ee2      	ldrsh	r2, [r4, r3]
 800ad64:	b293      	uxth	r3, r2
 800ad66:	0711      	lsls	r1, r2, #28
 800ad68:	d423      	bmi.n	800adb2 <__swsetup_r+0x6a>
 800ad6a:	06d9      	lsls	r1, r3, #27
 800ad6c:	d407      	bmi.n	800ad7e <__swsetup_r+0x36>
 800ad6e:	2309      	movs	r3, #9
 800ad70:	2001      	movs	r0, #1
 800ad72:	602b      	str	r3, [r5, #0]
 800ad74:	3337      	adds	r3, #55	; 0x37
 800ad76:	4313      	orrs	r3, r2
 800ad78:	81a3      	strh	r3, [r4, #12]
 800ad7a:	4240      	negs	r0, r0
 800ad7c:	bd70      	pop	{r4, r5, r6, pc}
 800ad7e:	075b      	lsls	r3, r3, #29
 800ad80:	d513      	bpl.n	800adaa <__swsetup_r+0x62>
 800ad82:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad84:	2900      	cmp	r1, #0
 800ad86:	d008      	beq.n	800ad9a <__swsetup_r+0x52>
 800ad88:	0023      	movs	r3, r4
 800ad8a:	3344      	adds	r3, #68	; 0x44
 800ad8c:	4299      	cmp	r1, r3
 800ad8e:	d002      	beq.n	800ad96 <__swsetup_r+0x4e>
 800ad90:	0028      	movs	r0, r5
 800ad92:	f000 f8c9 	bl	800af28 <_free_r>
 800ad96:	2300      	movs	r3, #0
 800ad98:	6363      	str	r3, [r4, #52]	; 0x34
 800ad9a:	2224      	movs	r2, #36	; 0x24
 800ad9c:	89a3      	ldrh	r3, [r4, #12]
 800ad9e:	4393      	bics	r3, r2
 800ada0:	81a3      	strh	r3, [r4, #12]
 800ada2:	2300      	movs	r3, #0
 800ada4:	6063      	str	r3, [r4, #4]
 800ada6:	6923      	ldr	r3, [r4, #16]
 800ada8:	6023      	str	r3, [r4, #0]
 800adaa:	2308      	movs	r3, #8
 800adac:	89a2      	ldrh	r2, [r4, #12]
 800adae:	4313      	orrs	r3, r2
 800adb0:	81a3      	strh	r3, [r4, #12]
 800adb2:	6923      	ldr	r3, [r4, #16]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d10b      	bne.n	800add0 <__swsetup_r+0x88>
 800adb8:	21a0      	movs	r1, #160	; 0xa0
 800adba:	2280      	movs	r2, #128	; 0x80
 800adbc:	89a3      	ldrh	r3, [r4, #12]
 800adbe:	0089      	lsls	r1, r1, #2
 800adc0:	0092      	lsls	r2, r2, #2
 800adc2:	400b      	ands	r3, r1
 800adc4:	4293      	cmp	r3, r2
 800adc6:	d003      	beq.n	800add0 <__swsetup_r+0x88>
 800adc8:	0021      	movs	r1, r4
 800adca:	0028      	movs	r0, r5
 800adcc:	f000 feae 	bl	800bb2c <__smakebuf_r>
 800add0:	220c      	movs	r2, #12
 800add2:	5ea3      	ldrsh	r3, [r4, r2]
 800add4:	2001      	movs	r0, #1
 800add6:	001a      	movs	r2, r3
 800add8:	b299      	uxth	r1, r3
 800adda:	4002      	ands	r2, r0
 800addc:	4203      	tst	r3, r0
 800adde:	d00f      	beq.n	800ae00 <__swsetup_r+0xb8>
 800ade0:	2200      	movs	r2, #0
 800ade2:	60a2      	str	r2, [r4, #8]
 800ade4:	6962      	ldr	r2, [r4, #20]
 800ade6:	4252      	negs	r2, r2
 800ade8:	61a2      	str	r2, [r4, #24]
 800adea:	2000      	movs	r0, #0
 800adec:	6922      	ldr	r2, [r4, #16]
 800adee:	4282      	cmp	r2, r0
 800adf0:	d1c4      	bne.n	800ad7c <__swsetup_r+0x34>
 800adf2:	0609      	lsls	r1, r1, #24
 800adf4:	d5c2      	bpl.n	800ad7c <__swsetup_r+0x34>
 800adf6:	2240      	movs	r2, #64	; 0x40
 800adf8:	4313      	orrs	r3, r2
 800adfa:	81a3      	strh	r3, [r4, #12]
 800adfc:	3801      	subs	r0, #1
 800adfe:	e7bd      	b.n	800ad7c <__swsetup_r+0x34>
 800ae00:	0788      	lsls	r0, r1, #30
 800ae02:	d400      	bmi.n	800ae06 <__swsetup_r+0xbe>
 800ae04:	6962      	ldr	r2, [r4, #20]
 800ae06:	60a2      	str	r2, [r4, #8]
 800ae08:	e7ef      	b.n	800adea <__swsetup_r+0xa2>
 800ae0a:	46c0      	nop			; (mov r8, r8)
 800ae0c:	20000068 	.word	0x20000068

0800ae10 <memset>:
 800ae10:	0003      	movs	r3, r0
 800ae12:	1882      	adds	r2, r0, r2
 800ae14:	4293      	cmp	r3, r2
 800ae16:	d100      	bne.n	800ae1a <memset+0xa>
 800ae18:	4770      	bx	lr
 800ae1a:	7019      	strb	r1, [r3, #0]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	e7f9      	b.n	800ae14 <memset+0x4>

0800ae20 <_close_r>:
 800ae20:	2300      	movs	r3, #0
 800ae22:	b570      	push	{r4, r5, r6, lr}
 800ae24:	4d06      	ldr	r5, [pc, #24]	; (800ae40 <_close_r+0x20>)
 800ae26:	0004      	movs	r4, r0
 800ae28:	0008      	movs	r0, r1
 800ae2a:	602b      	str	r3, [r5, #0]
 800ae2c:	f7f6 fe31 	bl	8001a92 <_close>
 800ae30:	1c43      	adds	r3, r0, #1
 800ae32:	d103      	bne.n	800ae3c <_close_r+0x1c>
 800ae34:	682b      	ldr	r3, [r5, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d000      	beq.n	800ae3c <_close_r+0x1c>
 800ae3a:	6023      	str	r3, [r4, #0]
 800ae3c:	bd70      	pop	{r4, r5, r6, pc}
 800ae3e:	46c0      	nop			; (mov r8, r8)
 800ae40:	20008810 	.word	0x20008810

0800ae44 <_lseek_r>:
 800ae44:	b570      	push	{r4, r5, r6, lr}
 800ae46:	0004      	movs	r4, r0
 800ae48:	0008      	movs	r0, r1
 800ae4a:	0011      	movs	r1, r2
 800ae4c:	001a      	movs	r2, r3
 800ae4e:	2300      	movs	r3, #0
 800ae50:	4d05      	ldr	r5, [pc, #20]	; (800ae68 <_lseek_r+0x24>)
 800ae52:	602b      	str	r3, [r5, #0]
 800ae54:	f7f6 fe3e 	bl	8001ad4 <_lseek>
 800ae58:	1c43      	adds	r3, r0, #1
 800ae5a:	d103      	bne.n	800ae64 <_lseek_r+0x20>
 800ae5c:	682b      	ldr	r3, [r5, #0]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d000      	beq.n	800ae64 <_lseek_r+0x20>
 800ae62:	6023      	str	r3, [r4, #0]
 800ae64:	bd70      	pop	{r4, r5, r6, pc}
 800ae66:	46c0      	nop			; (mov r8, r8)
 800ae68:	20008810 	.word	0x20008810

0800ae6c <_read_r>:
 800ae6c:	b570      	push	{r4, r5, r6, lr}
 800ae6e:	0004      	movs	r4, r0
 800ae70:	0008      	movs	r0, r1
 800ae72:	0011      	movs	r1, r2
 800ae74:	001a      	movs	r2, r3
 800ae76:	2300      	movs	r3, #0
 800ae78:	4d05      	ldr	r5, [pc, #20]	; (800ae90 <_read_r+0x24>)
 800ae7a:	602b      	str	r3, [r5, #0]
 800ae7c:	f7f6 fdd0 	bl	8001a20 <_read>
 800ae80:	1c43      	adds	r3, r0, #1
 800ae82:	d103      	bne.n	800ae8c <_read_r+0x20>
 800ae84:	682b      	ldr	r3, [r5, #0]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d000      	beq.n	800ae8c <_read_r+0x20>
 800ae8a:	6023      	str	r3, [r4, #0]
 800ae8c:	bd70      	pop	{r4, r5, r6, pc}
 800ae8e:	46c0      	nop			; (mov r8, r8)
 800ae90:	20008810 	.word	0x20008810

0800ae94 <_write_r>:
 800ae94:	b570      	push	{r4, r5, r6, lr}
 800ae96:	0004      	movs	r4, r0
 800ae98:	0008      	movs	r0, r1
 800ae9a:	0011      	movs	r1, r2
 800ae9c:	001a      	movs	r2, r3
 800ae9e:	2300      	movs	r3, #0
 800aea0:	4d05      	ldr	r5, [pc, #20]	; (800aeb8 <_write_r+0x24>)
 800aea2:	602b      	str	r3, [r5, #0]
 800aea4:	f7f6 fdd9 	bl	8001a5a <_write>
 800aea8:	1c43      	adds	r3, r0, #1
 800aeaa:	d103      	bne.n	800aeb4 <_write_r+0x20>
 800aeac:	682b      	ldr	r3, [r5, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d000      	beq.n	800aeb4 <_write_r+0x20>
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	bd70      	pop	{r4, r5, r6, pc}
 800aeb6:	46c0      	nop			; (mov r8, r8)
 800aeb8:	20008810 	.word	0x20008810

0800aebc <__errno>:
 800aebc:	4b01      	ldr	r3, [pc, #4]	; (800aec4 <__errno+0x8>)
 800aebe:	6818      	ldr	r0, [r3, #0]
 800aec0:	4770      	bx	lr
 800aec2:	46c0      	nop			; (mov r8, r8)
 800aec4:	20000068 	.word	0x20000068

0800aec8 <__libc_init_array>:
 800aec8:	b570      	push	{r4, r5, r6, lr}
 800aeca:	2600      	movs	r6, #0
 800aecc:	4c0c      	ldr	r4, [pc, #48]	; (800af00 <__libc_init_array+0x38>)
 800aece:	4d0d      	ldr	r5, [pc, #52]	; (800af04 <__libc_init_array+0x3c>)
 800aed0:	1b64      	subs	r4, r4, r5
 800aed2:	10a4      	asrs	r4, r4, #2
 800aed4:	42a6      	cmp	r6, r4
 800aed6:	d109      	bne.n	800aeec <__libc_init_array+0x24>
 800aed8:	2600      	movs	r6, #0
 800aeda:	f000 fef1 	bl	800bcc0 <_init>
 800aede:	4c0a      	ldr	r4, [pc, #40]	; (800af08 <__libc_init_array+0x40>)
 800aee0:	4d0a      	ldr	r5, [pc, #40]	; (800af0c <__libc_init_array+0x44>)
 800aee2:	1b64      	subs	r4, r4, r5
 800aee4:	10a4      	asrs	r4, r4, #2
 800aee6:	42a6      	cmp	r6, r4
 800aee8:	d105      	bne.n	800aef6 <__libc_init_array+0x2e>
 800aeea:	bd70      	pop	{r4, r5, r6, pc}
 800aeec:	00b3      	lsls	r3, r6, #2
 800aeee:	58eb      	ldr	r3, [r5, r3]
 800aef0:	4798      	blx	r3
 800aef2:	3601      	adds	r6, #1
 800aef4:	e7ee      	b.n	800aed4 <__libc_init_array+0xc>
 800aef6:	00b3      	lsls	r3, r6, #2
 800aef8:	58eb      	ldr	r3, [r5, r3]
 800aefa:	4798      	blx	r3
 800aefc:	3601      	adds	r6, #1
 800aefe:	e7f2      	b.n	800aee6 <__libc_init_array+0x1e>
 800af00:	0800bef0 	.word	0x0800bef0
 800af04:	0800bef0 	.word	0x0800bef0
 800af08:	0800bef4 	.word	0x0800bef4
 800af0c:	0800bef0 	.word	0x0800bef0

0800af10 <__retarget_lock_init_recursive>:
 800af10:	4770      	bx	lr

0800af12 <__retarget_lock_acquire_recursive>:
 800af12:	4770      	bx	lr

0800af14 <__retarget_lock_release_recursive>:
 800af14:	4770      	bx	lr

0800af16 <memcpy>:
 800af16:	2300      	movs	r3, #0
 800af18:	b510      	push	{r4, lr}
 800af1a:	429a      	cmp	r2, r3
 800af1c:	d100      	bne.n	800af20 <memcpy+0xa>
 800af1e:	bd10      	pop	{r4, pc}
 800af20:	5ccc      	ldrb	r4, [r1, r3]
 800af22:	54c4      	strb	r4, [r0, r3]
 800af24:	3301      	adds	r3, #1
 800af26:	e7f8      	b.n	800af1a <memcpy+0x4>

0800af28 <_free_r>:
 800af28:	b570      	push	{r4, r5, r6, lr}
 800af2a:	0005      	movs	r5, r0
 800af2c:	2900      	cmp	r1, #0
 800af2e:	d010      	beq.n	800af52 <_free_r+0x2a>
 800af30:	1f0c      	subs	r4, r1, #4
 800af32:	6823      	ldr	r3, [r4, #0]
 800af34:	2b00      	cmp	r3, #0
 800af36:	da00      	bge.n	800af3a <_free_r+0x12>
 800af38:	18e4      	adds	r4, r4, r3
 800af3a:	0028      	movs	r0, r5
 800af3c:	f000 f8e2 	bl	800b104 <__malloc_lock>
 800af40:	4a1d      	ldr	r2, [pc, #116]	; (800afb8 <_free_r+0x90>)
 800af42:	6813      	ldr	r3, [r2, #0]
 800af44:	2b00      	cmp	r3, #0
 800af46:	d105      	bne.n	800af54 <_free_r+0x2c>
 800af48:	6063      	str	r3, [r4, #4]
 800af4a:	6014      	str	r4, [r2, #0]
 800af4c:	0028      	movs	r0, r5
 800af4e:	f000 f8e1 	bl	800b114 <__malloc_unlock>
 800af52:	bd70      	pop	{r4, r5, r6, pc}
 800af54:	42a3      	cmp	r3, r4
 800af56:	d908      	bls.n	800af6a <_free_r+0x42>
 800af58:	6820      	ldr	r0, [r4, #0]
 800af5a:	1821      	adds	r1, r4, r0
 800af5c:	428b      	cmp	r3, r1
 800af5e:	d1f3      	bne.n	800af48 <_free_r+0x20>
 800af60:	6819      	ldr	r1, [r3, #0]
 800af62:	685b      	ldr	r3, [r3, #4]
 800af64:	1809      	adds	r1, r1, r0
 800af66:	6021      	str	r1, [r4, #0]
 800af68:	e7ee      	b.n	800af48 <_free_r+0x20>
 800af6a:	001a      	movs	r2, r3
 800af6c:	685b      	ldr	r3, [r3, #4]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <_free_r+0x4e>
 800af72:	42a3      	cmp	r3, r4
 800af74:	d9f9      	bls.n	800af6a <_free_r+0x42>
 800af76:	6811      	ldr	r1, [r2, #0]
 800af78:	1850      	adds	r0, r2, r1
 800af7a:	42a0      	cmp	r0, r4
 800af7c:	d10b      	bne.n	800af96 <_free_r+0x6e>
 800af7e:	6820      	ldr	r0, [r4, #0]
 800af80:	1809      	adds	r1, r1, r0
 800af82:	1850      	adds	r0, r2, r1
 800af84:	6011      	str	r1, [r2, #0]
 800af86:	4283      	cmp	r3, r0
 800af88:	d1e0      	bne.n	800af4c <_free_r+0x24>
 800af8a:	6818      	ldr	r0, [r3, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	1841      	adds	r1, r0, r1
 800af90:	6011      	str	r1, [r2, #0]
 800af92:	6053      	str	r3, [r2, #4]
 800af94:	e7da      	b.n	800af4c <_free_r+0x24>
 800af96:	42a0      	cmp	r0, r4
 800af98:	d902      	bls.n	800afa0 <_free_r+0x78>
 800af9a:	230c      	movs	r3, #12
 800af9c:	602b      	str	r3, [r5, #0]
 800af9e:	e7d5      	b.n	800af4c <_free_r+0x24>
 800afa0:	6820      	ldr	r0, [r4, #0]
 800afa2:	1821      	adds	r1, r4, r0
 800afa4:	428b      	cmp	r3, r1
 800afa6:	d103      	bne.n	800afb0 <_free_r+0x88>
 800afa8:	6819      	ldr	r1, [r3, #0]
 800afaa:	685b      	ldr	r3, [r3, #4]
 800afac:	1809      	adds	r1, r1, r0
 800afae:	6021      	str	r1, [r4, #0]
 800afb0:	6063      	str	r3, [r4, #4]
 800afb2:	6054      	str	r4, [r2, #4]
 800afb4:	e7ca      	b.n	800af4c <_free_r+0x24>
 800afb6:	46c0      	nop			; (mov r8, r8)
 800afb8:	20008818 	.word	0x20008818

0800afbc <sbrk_aligned>:
 800afbc:	b570      	push	{r4, r5, r6, lr}
 800afbe:	4e0f      	ldr	r6, [pc, #60]	; (800affc <sbrk_aligned+0x40>)
 800afc0:	000d      	movs	r5, r1
 800afc2:	6831      	ldr	r1, [r6, #0]
 800afc4:	0004      	movs	r4, r0
 800afc6:	2900      	cmp	r1, #0
 800afc8:	d102      	bne.n	800afd0 <sbrk_aligned+0x14>
 800afca:	f000 fe25 	bl	800bc18 <_sbrk_r>
 800afce:	6030      	str	r0, [r6, #0]
 800afd0:	0029      	movs	r1, r5
 800afd2:	0020      	movs	r0, r4
 800afd4:	f000 fe20 	bl	800bc18 <_sbrk_r>
 800afd8:	1c43      	adds	r3, r0, #1
 800afda:	d00a      	beq.n	800aff2 <sbrk_aligned+0x36>
 800afdc:	2303      	movs	r3, #3
 800afde:	1cc5      	adds	r5, r0, #3
 800afe0:	439d      	bics	r5, r3
 800afe2:	42a8      	cmp	r0, r5
 800afe4:	d007      	beq.n	800aff6 <sbrk_aligned+0x3a>
 800afe6:	1a29      	subs	r1, r5, r0
 800afe8:	0020      	movs	r0, r4
 800afea:	f000 fe15 	bl	800bc18 <_sbrk_r>
 800afee:	3001      	adds	r0, #1
 800aff0:	d101      	bne.n	800aff6 <sbrk_aligned+0x3a>
 800aff2:	2501      	movs	r5, #1
 800aff4:	426d      	negs	r5, r5
 800aff6:	0028      	movs	r0, r5
 800aff8:	bd70      	pop	{r4, r5, r6, pc}
 800affa:	46c0      	nop			; (mov r8, r8)
 800affc:	2000881c 	.word	0x2000881c

0800b000 <_malloc_r>:
 800b000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b002:	2203      	movs	r2, #3
 800b004:	1ccb      	adds	r3, r1, #3
 800b006:	4393      	bics	r3, r2
 800b008:	3308      	adds	r3, #8
 800b00a:	0006      	movs	r6, r0
 800b00c:	001f      	movs	r7, r3
 800b00e:	2b0c      	cmp	r3, #12
 800b010:	d238      	bcs.n	800b084 <_malloc_r+0x84>
 800b012:	270c      	movs	r7, #12
 800b014:	42b9      	cmp	r1, r7
 800b016:	d837      	bhi.n	800b088 <_malloc_r+0x88>
 800b018:	0030      	movs	r0, r6
 800b01a:	f000 f873 	bl	800b104 <__malloc_lock>
 800b01e:	4b38      	ldr	r3, [pc, #224]	; (800b100 <_malloc_r+0x100>)
 800b020:	9300      	str	r3, [sp, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	001c      	movs	r4, r3
 800b026:	2c00      	cmp	r4, #0
 800b028:	d133      	bne.n	800b092 <_malloc_r+0x92>
 800b02a:	0039      	movs	r1, r7
 800b02c:	0030      	movs	r0, r6
 800b02e:	f7ff ffc5 	bl	800afbc <sbrk_aligned>
 800b032:	0004      	movs	r4, r0
 800b034:	1c43      	adds	r3, r0, #1
 800b036:	d15e      	bne.n	800b0f6 <_malloc_r+0xf6>
 800b038:	9b00      	ldr	r3, [sp, #0]
 800b03a:	681c      	ldr	r4, [r3, #0]
 800b03c:	0025      	movs	r5, r4
 800b03e:	2d00      	cmp	r5, #0
 800b040:	d14e      	bne.n	800b0e0 <_malloc_r+0xe0>
 800b042:	2c00      	cmp	r4, #0
 800b044:	d051      	beq.n	800b0ea <_malloc_r+0xea>
 800b046:	6823      	ldr	r3, [r4, #0]
 800b048:	0029      	movs	r1, r5
 800b04a:	18e3      	adds	r3, r4, r3
 800b04c:	0030      	movs	r0, r6
 800b04e:	9301      	str	r3, [sp, #4]
 800b050:	f000 fde2 	bl	800bc18 <_sbrk_r>
 800b054:	9b01      	ldr	r3, [sp, #4]
 800b056:	4283      	cmp	r3, r0
 800b058:	d147      	bne.n	800b0ea <_malloc_r+0xea>
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	0030      	movs	r0, r6
 800b05e:	1aff      	subs	r7, r7, r3
 800b060:	0039      	movs	r1, r7
 800b062:	f7ff ffab 	bl	800afbc <sbrk_aligned>
 800b066:	3001      	adds	r0, #1
 800b068:	d03f      	beq.n	800b0ea <_malloc_r+0xea>
 800b06a:	6823      	ldr	r3, [r4, #0]
 800b06c:	19db      	adds	r3, r3, r7
 800b06e:	6023      	str	r3, [r4, #0]
 800b070:	9b00      	ldr	r3, [sp, #0]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d040      	beq.n	800b0fa <_malloc_r+0xfa>
 800b078:	685a      	ldr	r2, [r3, #4]
 800b07a:	42a2      	cmp	r2, r4
 800b07c:	d133      	bne.n	800b0e6 <_malloc_r+0xe6>
 800b07e:	2200      	movs	r2, #0
 800b080:	605a      	str	r2, [r3, #4]
 800b082:	e014      	b.n	800b0ae <_malloc_r+0xae>
 800b084:	2b00      	cmp	r3, #0
 800b086:	dac5      	bge.n	800b014 <_malloc_r+0x14>
 800b088:	230c      	movs	r3, #12
 800b08a:	2500      	movs	r5, #0
 800b08c:	6033      	str	r3, [r6, #0]
 800b08e:	0028      	movs	r0, r5
 800b090:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b092:	6821      	ldr	r1, [r4, #0]
 800b094:	1bc9      	subs	r1, r1, r7
 800b096:	d420      	bmi.n	800b0da <_malloc_r+0xda>
 800b098:	290b      	cmp	r1, #11
 800b09a:	d918      	bls.n	800b0ce <_malloc_r+0xce>
 800b09c:	19e2      	adds	r2, r4, r7
 800b09e:	6027      	str	r7, [r4, #0]
 800b0a0:	42a3      	cmp	r3, r4
 800b0a2:	d112      	bne.n	800b0ca <_malloc_r+0xca>
 800b0a4:	9b00      	ldr	r3, [sp, #0]
 800b0a6:	601a      	str	r2, [r3, #0]
 800b0a8:	6863      	ldr	r3, [r4, #4]
 800b0aa:	6011      	str	r1, [r2, #0]
 800b0ac:	6053      	str	r3, [r2, #4]
 800b0ae:	0030      	movs	r0, r6
 800b0b0:	0025      	movs	r5, r4
 800b0b2:	f000 f82f 	bl	800b114 <__malloc_unlock>
 800b0b6:	2207      	movs	r2, #7
 800b0b8:	350b      	adds	r5, #11
 800b0ba:	1d23      	adds	r3, r4, #4
 800b0bc:	4395      	bics	r5, r2
 800b0be:	1aea      	subs	r2, r5, r3
 800b0c0:	429d      	cmp	r5, r3
 800b0c2:	d0e4      	beq.n	800b08e <_malloc_r+0x8e>
 800b0c4:	1b5b      	subs	r3, r3, r5
 800b0c6:	50a3      	str	r3, [r4, r2]
 800b0c8:	e7e1      	b.n	800b08e <_malloc_r+0x8e>
 800b0ca:	605a      	str	r2, [r3, #4]
 800b0cc:	e7ec      	b.n	800b0a8 <_malloc_r+0xa8>
 800b0ce:	6862      	ldr	r2, [r4, #4]
 800b0d0:	42a3      	cmp	r3, r4
 800b0d2:	d1d5      	bne.n	800b080 <_malloc_r+0x80>
 800b0d4:	9b00      	ldr	r3, [sp, #0]
 800b0d6:	601a      	str	r2, [r3, #0]
 800b0d8:	e7e9      	b.n	800b0ae <_malloc_r+0xae>
 800b0da:	0023      	movs	r3, r4
 800b0dc:	6864      	ldr	r4, [r4, #4]
 800b0de:	e7a2      	b.n	800b026 <_malloc_r+0x26>
 800b0e0:	002c      	movs	r4, r5
 800b0e2:	686d      	ldr	r5, [r5, #4]
 800b0e4:	e7ab      	b.n	800b03e <_malloc_r+0x3e>
 800b0e6:	0013      	movs	r3, r2
 800b0e8:	e7c4      	b.n	800b074 <_malloc_r+0x74>
 800b0ea:	230c      	movs	r3, #12
 800b0ec:	0030      	movs	r0, r6
 800b0ee:	6033      	str	r3, [r6, #0]
 800b0f0:	f000 f810 	bl	800b114 <__malloc_unlock>
 800b0f4:	e7cb      	b.n	800b08e <_malloc_r+0x8e>
 800b0f6:	6027      	str	r7, [r4, #0]
 800b0f8:	e7d9      	b.n	800b0ae <_malloc_r+0xae>
 800b0fa:	605b      	str	r3, [r3, #4]
 800b0fc:	deff      	udf	#255	; 0xff
 800b0fe:	46c0      	nop			; (mov r8, r8)
 800b100:	20008818 	.word	0x20008818

0800b104 <__malloc_lock>:
 800b104:	b510      	push	{r4, lr}
 800b106:	4802      	ldr	r0, [pc, #8]	; (800b110 <__malloc_lock+0xc>)
 800b108:	f7ff ff03 	bl	800af12 <__retarget_lock_acquire_recursive>
 800b10c:	bd10      	pop	{r4, pc}
 800b10e:	46c0      	nop			; (mov r8, r8)
 800b110:	20008814 	.word	0x20008814

0800b114 <__malloc_unlock>:
 800b114:	b510      	push	{r4, lr}
 800b116:	4802      	ldr	r0, [pc, #8]	; (800b120 <__malloc_unlock+0xc>)
 800b118:	f7ff fefc 	bl	800af14 <__retarget_lock_release_recursive>
 800b11c:	bd10      	pop	{r4, pc}
 800b11e:	46c0      	nop			; (mov r8, r8)
 800b120:	20008814 	.word	0x20008814

0800b124 <__ssputs_r>:
 800b124:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b126:	b085      	sub	sp, #20
 800b128:	9301      	str	r3, [sp, #4]
 800b12a:	9203      	str	r2, [sp, #12]
 800b12c:	688e      	ldr	r6, [r1, #8]
 800b12e:	9a01      	ldr	r2, [sp, #4]
 800b130:	0007      	movs	r7, r0
 800b132:	000c      	movs	r4, r1
 800b134:	680b      	ldr	r3, [r1, #0]
 800b136:	4296      	cmp	r6, r2
 800b138:	d831      	bhi.n	800b19e <__ssputs_r+0x7a>
 800b13a:	898a      	ldrh	r2, [r1, #12]
 800b13c:	2190      	movs	r1, #144	; 0x90
 800b13e:	00c9      	lsls	r1, r1, #3
 800b140:	420a      	tst	r2, r1
 800b142:	d029      	beq.n	800b198 <__ssputs_r+0x74>
 800b144:	2003      	movs	r0, #3
 800b146:	6921      	ldr	r1, [r4, #16]
 800b148:	1a5b      	subs	r3, r3, r1
 800b14a:	9302      	str	r3, [sp, #8]
 800b14c:	6963      	ldr	r3, [r4, #20]
 800b14e:	4343      	muls	r3, r0
 800b150:	0fdd      	lsrs	r5, r3, #31
 800b152:	18ed      	adds	r5, r5, r3
 800b154:	9b01      	ldr	r3, [sp, #4]
 800b156:	9802      	ldr	r0, [sp, #8]
 800b158:	3301      	adds	r3, #1
 800b15a:	181b      	adds	r3, r3, r0
 800b15c:	106d      	asrs	r5, r5, #1
 800b15e:	42ab      	cmp	r3, r5
 800b160:	d900      	bls.n	800b164 <__ssputs_r+0x40>
 800b162:	001d      	movs	r5, r3
 800b164:	0552      	lsls	r2, r2, #21
 800b166:	d529      	bpl.n	800b1bc <__ssputs_r+0x98>
 800b168:	0029      	movs	r1, r5
 800b16a:	0038      	movs	r0, r7
 800b16c:	f7ff ff48 	bl	800b000 <_malloc_r>
 800b170:	1e06      	subs	r6, r0, #0
 800b172:	d02d      	beq.n	800b1d0 <__ssputs_r+0xac>
 800b174:	9a02      	ldr	r2, [sp, #8]
 800b176:	6921      	ldr	r1, [r4, #16]
 800b178:	f7ff fecd 	bl	800af16 <memcpy>
 800b17c:	89a2      	ldrh	r2, [r4, #12]
 800b17e:	4b19      	ldr	r3, [pc, #100]	; (800b1e4 <__ssputs_r+0xc0>)
 800b180:	401a      	ands	r2, r3
 800b182:	2380      	movs	r3, #128	; 0x80
 800b184:	4313      	orrs	r3, r2
 800b186:	81a3      	strh	r3, [r4, #12]
 800b188:	9b02      	ldr	r3, [sp, #8]
 800b18a:	6126      	str	r6, [r4, #16]
 800b18c:	18f6      	adds	r6, r6, r3
 800b18e:	6026      	str	r6, [r4, #0]
 800b190:	6165      	str	r5, [r4, #20]
 800b192:	9e01      	ldr	r6, [sp, #4]
 800b194:	1aed      	subs	r5, r5, r3
 800b196:	60a5      	str	r5, [r4, #8]
 800b198:	9b01      	ldr	r3, [sp, #4]
 800b19a:	429e      	cmp	r6, r3
 800b19c:	d900      	bls.n	800b1a0 <__ssputs_r+0x7c>
 800b19e:	9e01      	ldr	r6, [sp, #4]
 800b1a0:	0032      	movs	r2, r6
 800b1a2:	9903      	ldr	r1, [sp, #12]
 800b1a4:	6820      	ldr	r0, [r4, #0]
 800b1a6:	f000 fcff 	bl	800bba8 <memmove>
 800b1aa:	2000      	movs	r0, #0
 800b1ac:	68a3      	ldr	r3, [r4, #8]
 800b1ae:	1b9b      	subs	r3, r3, r6
 800b1b0:	60a3      	str	r3, [r4, #8]
 800b1b2:	6823      	ldr	r3, [r4, #0]
 800b1b4:	199b      	adds	r3, r3, r6
 800b1b6:	6023      	str	r3, [r4, #0]
 800b1b8:	b005      	add	sp, #20
 800b1ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1bc:	002a      	movs	r2, r5
 800b1be:	0038      	movs	r0, r7
 800b1c0:	f000 fd47 	bl	800bc52 <_realloc_r>
 800b1c4:	1e06      	subs	r6, r0, #0
 800b1c6:	d1df      	bne.n	800b188 <__ssputs_r+0x64>
 800b1c8:	0038      	movs	r0, r7
 800b1ca:	6921      	ldr	r1, [r4, #16]
 800b1cc:	f7ff feac 	bl	800af28 <_free_r>
 800b1d0:	230c      	movs	r3, #12
 800b1d2:	2001      	movs	r0, #1
 800b1d4:	603b      	str	r3, [r7, #0]
 800b1d6:	89a2      	ldrh	r2, [r4, #12]
 800b1d8:	3334      	adds	r3, #52	; 0x34
 800b1da:	4313      	orrs	r3, r2
 800b1dc:	81a3      	strh	r3, [r4, #12]
 800b1de:	4240      	negs	r0, r0
 800b1e0:	e7ea      	b.n	800b1b8 <__ssputs_r+0x94>
 800b1e2:	46c0      	nop			; (mov r8, r8)
 800b1e4:	fffffb7f 	.word	0xfffffb7f

0800b1e8 <_svfiprintf_r>:
 800b1e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b1ea:	b0a1      	sub	sp, #132	; 0x84
 800b1ec:	9003      	str	r0, [sp, #12]
 800b1ee:	001d      	movs	r5, r3
 800b1f0:	898b      	ldrh	r3, [r1, #12]
 800b1f2:	000f      	movs	r7, r1
 800b1f4:	0016      	movs	r6, r2
 800b1f6:	061b      	lsls	r3, r3, #24
 800b1f8:	d511      	bpl.n	800b21e <_svfiprintf_r+0x36>
 800b1fa:	690b      	ldr	r3, [r1, #16]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d10e      	bne.n	800b21e <_svfiprintf_r+0x36>
 800b200:	2140      	movs	r1, #64	; 0x40
 800b202:	f7ff fefd 	bl	800b000 <_malloc_r>
 800b206:	6038      	str	r0, [r7, #0]
 800b208:	6138      	str	r0, [r7, #16]
 800b20a:	2800      	cmp	r0, #0
 800b20c:	d105      	bne.n	800b21a <_svfiprintf_r+0x32>
 800b20e:	230c      	movs	r3, #12
 800b210:	9a03      	ldr	r2, [sp, #12]
 800b212:	3801      	subs	r0, #1
 800b214:	6013      	str	r3, [r2, #0]
 800b216:	b021      	add	sp, #132	; 0x84
 800b218:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b21a:	2340      	movs	r3, #64	; 0x40
 800b21c:	617b      	str	r3, [r7, #20]
 800b21e:	2300      	movs	r3, #0
 800b220:	ac08      	add	r4, sp, #32
 800b222:	6163      	str	r3, [r4, #20]
 800b224:	3320      	adds	r3, #32
 800b226:	7663      	strb	r3, [r4, #25]
 800b228:	3310      	adds	r3, #16
 800b22a:	76a3      	strb	r3, [r4, #26]
 800b22c:	9507      	str	r5, [sp, #28]
 800b22e:	0035      	movs	r5, r6
 800b230:	782b      	ldrb	r3, [r5, #0]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d001      	beq.n	800b23a <_svfiprintf_r+0x52>
 800b236:	2b25      	cmp	r3, #37	; 0x25
 800b238:	d148      	bne.n	800b2cc <_svfiprintf_r+0xe4>
 800b23a:	1bab      	subs	r3, r5, r6
 800b23c:	9305      	str	r3, [sp, #20]
 800b23e:	42b5      	cmp	r5, r6
 800b240:	d00b      	beq.n	800b25a <_svfiprintf_r+0x72>
 800b242:	0032      	movs	r2, r6
 800b244:	0039      	movs	r1, r7
 800b246:	9803      	ldr	r0, [sp, #12]
 800b248:	f7ff ff6c 	bl	800b124 <__ssputs_r>
 800b24c:	3001      	adds	r0, #1
 800b24e:	d100      	bne.n	800b252 <_svfiprintf_r+0x6a>
 800b250:	e0af      	b.n	800b3b2 <_svfiprintf_r+0x1ca>
 800b252:	6963      	ldr	r3, [r4, #20]
 800b254:	9a05      	ldr	r2, [sp, #20]
 800b256:	189b      	adds	r3, r3, r2
 800b258:	6163      	str	r3, [r4, #20]
 800b25a:	782b      	ldrb	r3, [r5, #0]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d100      	bne.n	800b262 <_svfiprintf_r+0x7a>
 800b260:	e0a7      	b.n	800b3b2 <_svfiprintf_r+0x1ca>
 800b262:	2201      	movs	r2, #1
 800b264:	2300      	movs	r3, #0
 800b266:	4252      	negs	r2, r2
 800b268:	6062      	str	r2, [r4, #4]
 800b26a:	a904      	add	r1, sp, #16
 800b26c:	3254      	adds	r2, #84	; 0x54
 800b26e:	1852      	adds	r2, r2, r1
 800b270:	1c6e      	adds	r6, r5, #1
 800b272:	6023      	str	r3, [r4, #0]
 800b274:	60e3      	str	r3, [r4, #12]
 800b276:	60a3      	str	r3, [r4, #8]
 800b278:	7013      	strb	r3, [r2, #0]
 800b27a:	65a3      	str	r3, [r4, #88]	; 0x58
 800b27c:	4b55      	ldr	r3, [pc, #340]	; (800b3d4 <_svfiprintf_r+0x1ec>)
 800b27e:	2205      	movs	r2, #5
 800b280:	0018      	movs	r0, r3
 800b282:	7831      	ldrb	r1, [r6, #0]
 800b284:	9305      	str	r3, [sp, #20]
 800b286:	f000 fcd9 	bl	800bc3c <memchr>
 800b28a:	1c75      	adds	r5, r6, #1
 800b28c:	2800      	cmp	r0, #0
 800b28e:	d11f      	bne.n	800b2d0 <_svfiprintf_r+0xe8>
 800b290:	6822      	ldr	r2, [r4, #0]
 800b292:	06d3      	lsls	r3, r2, #27
 800b294:	d504      	bpl.n	800b2a0 <_svfiprintf_r+0xb8>
 800b296:	2353      	movs	r3, #83	; 0x53
 800b298:	a904      	add	r1, sp, #16
 800b29a:	185b      	adds	r3, r3, r1
 800b29c:	2120      	movs	r1, #32
 800b29e:	7019      	strb	r1, [r3, #0]
 800b2a0:	0713      	lsls	r3, r2, #28
 800b2a2:	d504      	bpl.n	800b2ae <_svfiprintf_r+0xc6>
 800b2a4:	2353      	movs	r3, #83	; 0x53
 800b2a6:	a904      	add	r1, sp, #16
 800b2a8:	185b      	adds	r3, r3, r1
 800b2aa:	212b      	movs	r1, #43	; 0x2b
 800b2ac:	7019      	strb	r1, [r3, #0]
 800b2ae:	7833      	ldrb	r3, [r6, #0]
 800b2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800b2b2:	d016      	beq.n	800b2e2 <_svfiprintf_r+0xfa>
 800b2b4:	0035      	movs	r5, r6
 800b2b6:	2100      	movs	r1, #0
 800b2b8:	200a      	movs	r0, #10
 800b2ba:	68e3      	ldr	r3, [r4, #12]
 800b2bc:	782a      	ldrb	r2, [r5, #0]
 800b2be:	1c6e      	adds	r6, r5, #1
 800b2c0:	3a30      	subs	r2, #48	; 0x30
 800b2c2:	2a09      	cmp	r2, #9
 800b2c4:	d94e      	bls.n	800b364 <_svfiprintf_r+0x17c>
 800b2c6:	2900      	cmp	r1, #0
 800b2c8:	d111      	bne.n	800b2ee <_svfiprintf_r+0x106>
 800b2ca:	e017      	b.n	800b2fc <_svfiprintf_r+0x114>
 800b2cc:	3501      	adds	r5, #1
 800b2ce:	e7af      	b.n	800b230 <_svfiprintf_r+0x48>
 800b2d0:	9b05      	ldr	r3, [sp, #20]
 800b2d2:	6822      	ldr	r2, [r4, #0]
 800b2d4:	1ac0      	subs	r0, r0, r3
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	4083      	lsls	r3, r0
 800b2da:	4313      	orrs	r3, r2
 800b2dc:	002e      	movs	r6, r5
 800b2de:	6023      	str	r3, [r4, #0]
 800b2e0:	e7cc      	b.n	800b27c <_svfiprintf_r+0x94>
 800b2e2:	9b07      	ldr	r3, [sp, #28]
 800b2e4:	1d19      	adds	r1, r3, #4
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	9107      	str	r1, [sp, #28]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	db01      	blt.n	800b2f2 <_svfiprintf_r+0x10a>
 800b2ee:	930b      	str	r3, [sp, #44]	; 0x2c
 800b2f0:	e004      	b.n	800b2fc <_svfiprintf_r+0x114>
 800b2f2:	425b      	negs	r3, r3
 800b2f4:	60e3      	str	r3, [r4, #12]
 800b2f6:	2302      	movs	r3, #2
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	6023      	str	r3, [r4, #0]
 800b2fc:	782b      	ldrb	r3, [r5, #0]
 800b2fe:	2b2e      	cmp	r3, #46	; 0x2e
 800b300:	d10a      	bne.n	800b318 <_svfiprintf_r+0x130>
 800b302:	786b      	ldrb	r3, [r5, #1]
 800b304:	2b2a      	cmp	r3, #42	; 0x2a
 800b306:	d135      	bne.n	800b374 <_svfiprintf_r+0x18c>
 800b308:	9b07      	ldr	r3, [sp, #28]
 800b30a:	3502      	adds	r5, #2
 800b30c:	1d1a      	adds	r2, r3, #4
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	9207      	str	r2, [sp, #28]
 800b312:	2b00      	cmp	r3, #0
 800b314:	db2b      	blt.n	800b36e <_svfiprintf_r+0x186>
 800b316:	9309      	str	r3, [sp, #36]	; 0x24
 800b318:	4e2f      	ldr	r6, [pc, #188]	; (800b3d8 <_svfiprintf_r+0x1f0>)
 800b31a:	2203      	movs	r2, #3
 800b31c:	0030      	movs	r0, r6
 800b31e:	7829      	ldrb	r1, [r5, #0]
 800b320:	f000 fc8c 	bl	800bc3c <memchr>
 800b324:	2800      	cmp	r0, #0
 800b326:	d006      	beq.n	800b336 <_svfiprintf_r+0x14e>
 800b328:	2340      	movs	r3, #64	; 0x40
 800b32a:	1b80      	subs	r0, r0, r6
 800b32c:	4083      	lsls	r3, r0
 800b32e:	6822      	ldr	r2, [r4, #0]
 800b330:	3501      	adds	r5, #1
 800b332:	4313      	orrs	r3, r2
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	7829      	ldrb	r1, [r5, #0]
 800b338:	2206      	movs	r2, #6
 800b33a:	4828      	ldr	r0, [pc, #160]	; (800b3dc <_svfiprintf_r+0x1f4>)
 800b33c:	1c6e      	adds	r6, r5, #1
 800b33e:	7621      	strb	r1, [r4, #24]
 800b340:	f000 fc7c 	bl	800bc3c <memchr>
 800b344:	2800      	cmp	r0, #0
 800b346:	d03c      	beq.n	800b3c2 <_svfiprintf_r+0x1da>
 800b348:	4b25      	ldr	r3, [pc, #148]	; (800b3e0 <_svfiprintf_r+0x1f8>)
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d125      	bne.n	800b39a <_svfiprintf_r+0x1b2>
 800b34e:	2207      	movs	r2, #7
 800b350:	9b07      	ldr	r3, [sp, #28]
 800b352:	3307      	adds	r3, #7
 800b354:	4393      	bics	r3, r2
 800b356:	3308      	adds	r3, #8
 800b358:	9307      	str	r3, [sp, #28]
 800b35a:	6963      	ldr	r3, [r4, #20]
 800b35c:	9a04      	ldr	r2, [sp, #16]
 800b35e:	189b      	adds	r3, r3, r2
 800b360:	6163      	str	r3, [r4, #20]
 800b362:	e764      	b.n	800b22e <_svfiprintf_r+0x46>
 800b364:	4343      	muls	r3, r0
 800b366:	0035      	movs	r5, r6
 800b368:	2101      	movs	r1, #1
 800b36a:	189b      	adds	r3, r3, r2
 800b36c:	e7a6      	b.n	800b2bc <_svfiprintf_r+0xd4>
 800b36e:	2301      	movs	r3, #1
 800b370:	425b      	negs	r3, r3
 800b372:	e7d0      	b.n	800b316 <_svfiprintf_r+0x12e>
 800b374:	2300      	movs	r3, #0
 800b376:	200a      	movs	r0, #10
 800b378:	001a      	movs	r2, r3
 800b37a:	3501      	adds	r5, #1
 800b37c:	6063      	str	r3, [r4, #4]
 800b37e:	7829      	ldrb	r1, [r5, #0]
 800b380:	1c6e      	adds	r6, r5, #1
 800b382:	3930      	subs	r1, #48	; 0x30
 800b384:	2909      	cmp	r1, #9
 800b386:	d903      	bls.n	800b390 <_svfiprintf_r+0x1a8>
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0c5      	beq.n	800b318 <_svfiprintf_r+0x130>
 800b38c:	9209      	str	r2, [sp, #36]	; 0x24
 800b38e:	e7c3      	b.n	800b318 <_svfiprintf_r+0x130>
 800b390:	4342      	muls	r2, r0
 800b392:	0035      	movs	r5, r6
 800b394:	2301      	movs	r3, #1
 800b396:	1852      	adds	r2, r2, r1
 800b398:	e7f1      	b.n	800b37e <_svfiprintf_r+0x196>
 800b39a:	aa07      	add	r2, sp, #28
 800b39c:	9200      	str	r2, [sp, #0]
 800b39e:	0021      	movs	r1, r4
 800b3a0:	003a      	movs	r2, r7
 800b3a2:	4b10      	ldr	r3, [pc, #64]	; (800b3e4 <_svfiprintf_r+0x1fc>)
 800b3a4:	9803      	ldr	r0, [sp, #12]
 800b3a6:	e000      	b.n	800b3aa <_svfiprintf_r+0x1c2>
 800b3a8:	bf00      	nop
 800b3aa:	9004      	str	r0, [sp, #16]
 800b3ac:	9b04      	ldr	r3, [sp, #16]
 800b3ae:	3301      	adds	r3, #1
 800b3b0:	d1d3      	bne.n	800b35a <_svfiprintf_r+0x172>
 800b3b2:	89bb      	ldrh	r3, [r7, #12]
 800b3b4:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b3b6:	065b      	lsls	r3, r3, #25
 800b3b8:	d400      	bmi.n	800b3bc <_svfiprintf_r+0x1d4>
 800b3ba:	e72c      	b.n	800b216 <_svfiprintf_r+0x2e>
 800b3bc:	2001      	movs	r0, #1
 800b3be:	4240      	negs	r0, r0
 800b3c0:	e729      	b.n	800b216 <_svfiprintf_r+0x2e>
 800b3c2:	aa07      	add	r2, sp, #28
 800b3c4:	9200      	str	r2, [sp, #0]
 800b3c6:	0021      	movs	r1, r4
 800b3c8:	003a      	movs	r2, r7
 800b3ca:	4b06      	ldr	r3, [pc, #24]	; (800b3e4 <_svfiprintf_r+0x1fc>)
 800b3cc:	9803      	ldr	r0, [sp, #12]
 800b3ce:	f000 f9bf 	bl	800b750 <_printf_i>
 800b3d2:	e7ea      	b.n	800b3aa <_svfiprintf_r+0x1c2>
 800b3d4:	0800bebc 	.word	0x0800bebc
 800b3d8:	0800bec2 	.word	0x0800bec2
 800b3dc:	0800bec6 	.word	0x0800bec6
 800b3e0:	00000000 	.word	0x00000000
 800b3e4:	0800b125 	.word	0x0800b125

0800b3e8 <__sfputc_r>:
 800b3e8:	6893      	ldr	r3, [r2, #8]
 800b3ea:	b510      	push	{r4, lr}
 800b3ec:	3b01      	subs	r3, #1
 800b3ee:	6093      	str	r3, [r2, #8]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	da04      	bge.n	800b3fe <__sfputc_r+0x16>
 800b3f4:	6994      	ldr	r4, [r2, #24]
 800b3f6:	42a3      	cmp	r3, r4
 800b3f8:	db07      	blt.n	800b40a <__sfputc_r+0x22>
 800b3fa:	290a      	cmp	r1, #10
 800b3fc:	d005      	beq.n	800b40a <__sfputc_r+0x22>
 800b3fe:	6813      	ldr	r3, [r2, #0]
 800b400:	1c58      	adds	r0, r3, #1
 800b402:	6010      	str	r0, [r2, #0]
 800b404:	7019      	strb	r1, [r3, #0]
 800b406:	0008      	movs	r0, r1
 800b408:	bd10      	pop	{r4, pc}
 800b40a:	f7ff fc5b 	bl	800acc4 <__swbuf_r>
 800b40e:	0001      	movs	r1, r0
 800b410:	e7f9      	b.n	800b406 <__sfputc_r+0x1e>

0800b412 <__sfputs_r>:
 800b412:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b414:	0006      	movs	r6, r0
 800b416:	000f      	movs	r7, r1
 800b418:	0014      	movs	r4, r2
 800b41a:	18d5      	adds	r5, r2, r3
 800b41c:	42ac      	cmp	r4, r5
 800b41e:	d101      	bne.n	800b424 <__sfputs_r+0x12>
 800b420:	2000      	movs	r0, #0
 800b422:	e007      	b.n	800b434 <__sfputs_r+0x22>
 800b424:	7821      	ldrb	r1, [r4, #0]
 800b426:	003a      	movs	r2, r7
 800b428:	0030      	movs	r0, r6
 800b42a:	f7ff ffdd 	bl	800b3e8 <__sfputc_r>
 800b42e:	3401      	adds	r4, #1
 800b430:	1c43      	adds	r3, r0, #1
 800b432:	d1f3      	bne.n	800b41c <__sfputs_r+0xa>
 800b434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b438 <_vfiprintf_r>:
 800b438:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b43a:	b0a1      	sub	sp, #132	; 0x84
 800b43c:	000f      	movs	r7, r1
 800b43e:	0015      	movs	r5, r2
 800b440:	001e      	movs	r6, r3
 800b442:	9003      	str	r0, [sp, #12]
 800b444:	2800      	cmp	r0, #0
 800b446:	d004      	beq.n	800b452 <_vfiprintf_r+0x1a>
 800b448:	6a03      	ldr	r3, [r0, #32]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d101      	bne.n	800b452 <_vfiprintf_r+0x1a>
 800b44e:	f7ff fb15 	bl	800aa7c <__sinit>
 800b452:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b454:	07db      	lsls	r3, r3, #31
 800b456:	d405      	bmi.n	800b464 <_vfiprintf_r+0x2c>
 800b458:	89bb      	ldrh	r3, [r7, #12]
 800b45a:	059b      	lsls	r3, r3, #22
 800b45c:	d402      	bmi.n	800b464 <_vfiprintf_r+0x2c>
 800b45e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b460:	f7ff fd57 	bl	800af12 <__retarget_lock_acquire_recursive>
 800b464:	89bb      	ldrh	r3, [r7, #12]
 800b466:	071b      	lsls	r3, r3, #28
 800b468:	d502      	bpl.n	800b470 <_vfiprintf_r+0x38>
 800b46a:	693b      	ldr	r3, [r7, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d113      	bne.n	800b498 <_vfiprintf_r+0x60>
 800b470:	0039      	movs	r1, r7
 800b472:	9803      	ldr	r0, [sp, #12]
 800b474:	f7ff fc68 	bl	800ad48 <__swsetup_r>
 800b478:	2800      	cmp	r0, #0
 800b47a:	d00d      	beq.n	800b498 <_vfiprintf_r+0x60>
 800b47c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b47e:	07db      	lsls	r3, r3, #31
 800b480:	d503      	bpl.n	800b48a <_vfiprintf_r+0x52>
 800b482:	2001      	movs	r0, #1
 800b484:	4240      	negs	r0, r0
 800b486:	b021      	add	sp, #132	; 0x84
 800b488:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b48a:	89bb      	ldrh	r3, [r7, #12]
 800b48c:	059b      	lsls	r3, r3, #22
 800b48e:	d4f8      	bmi.n	800b482 <_vfiprintf_r+0x4a>
 800b490:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b492:	f7ff fd3f 	bl	800af14 <__retarget_lock_release_recursive>
 800b496:	e7f4      	b.n	800b482 <_vfiprintf_r+0x4a>
 800b498:	2300      	movs	r3, #0
 800b49a:	ac08      	add	r4, sp, #32
 800b49c:	6163      	str	r3, [r4, #20]
 800b49e:	3320      	adds	r3, #32
 800b4a0:	7663      	strb	r3, [r4, #25]
 800b4a2:	3310      	adds	r3, #16
 800b4a4:	76a3      	strb	r3, [r4, #26]
 800b4a6:	9607      	str	r6, [sp, #28]
 800b4a8:	002e      	movs	r6, r5
 800b4aa:	7833      	ldrb	r3, [r6, #0]
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <_vfiprintf_r+0x7c>
 800b4b0:	2b25      	cmp	r3, #37	; 0x25
 800b4b2:	d148      	bne.n	800b546 <_vfiprintf_r+0x10e>
 800b4b4:	1b73      	subs	r3, r6, r5
 800b4b6:	9305      	str	r3, [sp, #20]
 800b4b8:	42ae      	cmp	r6, r5
 800b4ba:	d00b      	beq.n	800b4d4 <_vfiprintf_r+0x9c>
 800b4bc:	002a      	movs	r2, r5
 800b4be:	0039      	movs	r1, r7
 800b4c0:	9803      	ldr	r0, [sp, #12]
 800b4c2:	f7ff ffa6 	bl	800b412 <__sfputs_r>
 800b4c6:	3001      	adds	r0, #1
 800b4c8:	d100      	bne.n	800b4cc <_vfiprintf_r+0x94>
 800b4ca:	e0af      	b.n	800b62c <_vfiprintf_r+0x1f4>
 800b4cc:	6963      	ldr	r3, [r4, #20]
 800b4ce:	9a05      	ldr	r2, [sp, #20]
 800b4d0:	189b      	adds	r3, r3, r2
 800b4d2:	6163      	str	r3, [r4, #20]
 800b4d4:	7833      	ldrb	r3, [r6, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d100      	bne.n	800b4dc <_vfiprintf_r+0xa4>
 800b4da:	e0a7      	b.n	800b62c <_vfiprintf_r+0x1f4>
 800b4dc:	2201      	movs	r2, #1
 800b4de:	2300      	movs	r3, #0
 800b4e0:	4252      	negs	r2, r2
 800b4e2:	6062      	str	r2, [r4, #4]
 800b4e4:	a904      	add	r1, sp, #16
 800b4e6:	3254      	adds	r2, #84	; 0x54
 800b4e8:	1852      	adds	r2, r2, r1
 800b4ea:	1c75      	adds	r5, r6, #1
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	60e3      	str	r3, [r4, #12]
 800b4f0:	60a3      	str	r3, [r4, #8]
 800b4f2:	7013      	strb	r3, [r2, #0]
 800b4f4:	65a3      	str	r3, [r4, #88]	; 0x58
 800b4f6:	4b59      	ldr	r3, [pc, #356]	; (800b65c <_vfiprintf_r+0x224>)
 800b4f8:	2205      	movs	r2, #5
 800b4fa:	0018      	movs	r0, r3
 800b4fc:	7829      	ldrb	r1, [r5, #0]
 800b4fe:	9305      	str	r3, [sp, #20]
 800b500:	f000 fb9c 	bl	800bc3c <memchr>
 800b504:	1c6e      	adds	r6, r5, #1
 800b506:	2800      	cmp	r0, #0
 800b508:	d11f      	bne.n	800b54a <_vfiprintf_r+0x112>
 800b50a:	6822      	ldr	r2, [r4, #0]
 800b50c:	06d3      	lsls	r3, r2, #27
 800b50e:	d504      	bpl.n	800b51a <_vfiprintf_r+0xe2>
 800b510:	2353      	movs	r3, #83	; 0x53
 800b512:	a904      	add	r1, sp, #16
 800b514:	185b      	adds	r3, r3, r1
 800b516:	2120      	movs	r1, #32
 800b518:	7019      	strb	r1, [r3, #0]
 800b51a:	0713      	lsls	r3, r2, #28
 800b51c:	d504      	bpl.n	800b528 <_vfiprintf_r+0xf0>
 800b51e:	2353      	movs	r3, #83	; 0x53
 800b520:	a904      	add	r1, sp, #16
 800b522:	185b      	adds	r3, r3, r1
 800b524:	212b      	movs	r1, #43	; 0x2b
 800b526:	7019      	strb	r1, [r3, #0]
 800b528:	782b      	ldrb	r3, [r5, #0]
 800b52a:	2b2a      	cmp	r3, #42	; 0x2a
 800b52c:	d016      	beq.n	800b55c <_vfiprintf_r+0x124>
 800b52e:	002e      	movs	r6, r5
 800b530:	2100      	movs	r1, #0
 800b532:	200a      	movs	r0, #10
 800b534:	68e3      	ldr	r3, [r4, #12]
 800b536:	7832      	ldrb	r2, [r6, #0]
 800b538:	1c75      	adds	r5, r6, #1
 800b53a:	3a30      	subs	r2, #48	; 0x30
 800b53c:	2a09      	cmp	r2, #9
 800b53e:	d94e      	bls.n	800b5de <_vfiprintf_r+0x1a6>
 800b540:	2900      	cmp	r1, #0
 800b542:	d111      	bne.n	800b568 <_vfiprintf_r+0x130>
 800b544:	e017      	b.n	800b576 <_vfiprintf_r+0x13e>
 800b546:	3601      	adds	r6, #1
 800b548:	e7af      	b.n	800b4aa <_vfiprintf_r+0x72>
 800b54a:	9b05      	ldr	r3, [sp, #20]
 800b54c:	6822      	ldr	r2, [r4, #0]
 800b54e:	1ac0      	subs	r0, r0, r3
 800b550:	2301      	movs	r3, #1
 800b552:	4083      	lsls	r3, r0
 800b554:	4313      	orrs	r3, r2
 800b556:	0035      	movs	r5, r6
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	e7cc      	b.n	800b4f6 <_vfiprintf_r+0xbe>
 800b55c:	9b07      	ldr	r3, [sp, #28]
 800b55e:	1d19      	adds	r1, r3, #4
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	9107      	str	r1, [sp, #28]
 800b564:	2b00      	cmp	r3, #0
 800b566:	db01      	blt.n	800b56c <_vfiprintf_r+0x134>
 800b568:	930b      	str	r3, [sp, #44]	; 0x2c
 800b56a:	e004      	b.n	800b576 <_vfiprintf_r+0x13e>
 800b56c:	425b      	negs	r3, r3
 800b56e:	60e3      	str	r3, [r4, #12]
 800b570:	2302      	movs	r3, #2
 800b572:	4313      	orrs	r3, r2
 800b574:	6023      	str	r3, [r4, #0]
 800b576:	7833      	ldrb	r3, [r6, #0]
 800b578:	2b2e      	cmp	r3, #46	; 0x2e
 800b57a:	d10a      	bne.n	800b592 <_vfiprintf_r+0x15a>
 800b57c:	7873      	ldrb	r3, [r6, #1]
 800b57e:	2b2a      	cmp	r3, #42	; 0x2a
 800b580:	d135      	bne.n	800b5ee <_vfiprintf_r+0x1b6>
 800b582:	9b07      	ldr	r3, [sp, #28]
 800b584:	3602      	adds	r6, #2
 800b586:	1d1a      	adds	r2, r3, #4
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	9207      	str	r2, [sp, #28]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	db2b      	blt.n	800b5e8 <_vfiprintf_r+0x1b0>
 800b590:	9309      	str	r3, [sp, #36]	; 0x24
 800b592:	4d33      	ldr	r5, [pc, #204]	; (800b660 <_vfiprintf_r+0x228>)
 800b594:	2203      	movs	r2, #3
 800b596:	0028      	movs	r0, r5
 800b598:	7831      	ldrb	r1, [r6, #0]
 800b59a:	f000 fb4f 	bl	800bc3c <memchr>
 800b59e:	2800      	cmp	r0, #0
 800b5a0:	d006      	beq.n	800b5b0 <_vfiprintf_r+0x178>
 800b5a2:	2340      	movs	r3, #64	; 0x40
 800b5a4:	1b40      	subs	r0, r0, r5
 800b5a6:	4083      	lsls	r3, r0
 800b5a8:	6822      	ldr	r2, [r4, #0]
 800b5aa:	3601      	adds	r6, #1
 800b5ac:	4313      	orrs	r3, r2
 800b5ae:	6023      	str	r3, [r4, #0]
 800b5b0:	7831      	ldrb	r1, [r6, #0]
 800b5b2:	2206      	movs	r2, #6
 800b5b4:	482b      	ldr	r0, [pc, #172]	; (800b664 <_vfiprintf_r+0x22c>)
 800b5b6:	1c75      	adds	r5, r6, #1
 800b5b8:	7621      	strb	r1, [r4, #24]
 800b5ba:	f000 fb3f 	bl	800bc3c <memchr>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d043      	beq.n	800b64a <_vfiprintf_r+0x212>
 800b5c2:	4b29      	ldr	r3, [pc, #164]	; (800b668 <_vfiprintf_r+0x230>)
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d125      	bne.n	800b614 <_vfiprintf_r+0x1dc>
 800b5c8:	2207      	movs	r2, #7
 800b5ca:	9b07      	ldr	r3, [sp, #28]
 800b5cc:	3307      	adds	r3, #7
 800b5ce:	4393      	bics	r3, r2
 800b5d0:	3308      	adds	r3, #8
 800b5d2:	9307      	str	r3, [sp, #28]
 800b5d4:	6963      	ldr	r3, [r4, #20]
 800b5d6:	9a04      	ldr	r2, [sp, #16]
 800b5d8:	189b      	adds	r3, r3, r2
 800b5da:	6163      	str	r3, [r4, #20]
 800b5dc:	e764      	b.n	800b4a8 <_vfiprintf_r+0x70>
 800b5de:	4343      	muls	r3, r0
 800b5e0:	002e      	movs	r6, r5
 800b5e2:	2101      	movs	r1, #1
 800b5e4:	189b      	adds	r3, r3, r2
 800b5e6:	e7a6      	b.n	800b536 <_vfiprintf_r+0xfe>
 800b5e8:	2301      	movs	r3, #1
 800b5ea:	425b      	negs	r3, r3
 800b5ec:	e7d0      	b.n	800b590 <_vfiprintf_r+0x158>
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	200a      	movs	r0, #10
 800b5f2:	001a      	movs	r2, r3
 800b5f4:	3601      	adds	r6, #1
 800b5f6:	6063      	str	r3, [r4, #4]
 800b5f8:	7831      	ldrb	r1, [r6, #0]
 800b5fa:	1c75      	adds	r5, r6, #1
 800b5fc:	3930      	subs	r1, #48	; 0x30
 800b5fe:	2909      	cmp	r1, #9
 800b600:	d903      	bls.n	800b60a <_vfiprintf_r+0x1d2>
 800b602:	2b00      	cmp	r3, #0
 800b604:	d0c5      	beq.n	800b592 <_vfiprintf_r+0x15a>
 800b606:	9209      	str	r2, [sp, #36]	; 0x24
 800b608:	e7c3      	b.n	800b592 <_vfiprintf_r+0x15a>
 800b60a:	4342      	muls	r2, r0
 800b60c:	002e      	movs	r6, r5
 800b60e:	2301      	movs	r3, #1
 800b610:	1852      	adds	r2, r2, r1
 800b612:	e7f1      	b.n	800b5f8 <_vfiprintf_r+0x1c0>
 800b614:	aa07      	add	r2, sp, #28
 800b616:	9200      	str	r2, [sp, #0]
 800b618:	0021      	movs	r1, r4
 800b61a:	003a      	movs	r2, r7
 800b61c:	4b13      	ldr	r3, [pc, #76]	; (800b66c <_vfiprintf_r+0x234>)
 800b61e:	9803      	ldr	r0, [sp, #12]
 800b620:	e000      	b.n	800b624 <_vfiprintf_r+0x1ec>
 800b622:	bf00      	nop
 800b624:	9004      	str	r0, [sp, #16]
 800b626:	9b04      	ldr	r3, [sp, #16]
 800b628:	3301      	adds	r3, #1
 800b62a:	d1d3      	bne.n	800b5d4 <_vfiprintf_r+0x19c>
 800b62c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b62e:	07db      	lsls	r3, r3, #31
 800b630:	d405      	bmi.n	800b63e <_vfiprintf_r+0x206>
 800b632:	89bb      	ldrh	r3, [r7, #12]
 800b634:	059b      	lsls	r3, r3, #22
 800b636:	d402      	bmi.n	800b63e <_vfiprintf_r+0x206>
 800b638:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800b63a:	f7ff fc6b 	bl	800af14 <__retarget_lock_release_recursive>
 800b63e:	89bb      	ldrh	r3, [r7, #12]
 800b640:	065b      	lsls	r3, r3, #25
 800b642:	d500      	bpl.n	800b646 <_vfiprintf_r+0x20e>
 800b644:	e71d      	b.n	800b482 <_vfiprintf_r+0x4a>
 800b646:	980d      	ldr	r0, [sp, #52]	; 0x34
 800b648:	e71d      	b.n	800b486 <_vfiprintf_r+0x4e>
 800b64a:	aa07      	add	r2, sp, #28
 800b64c:	9200      	str	r2, [sp, #0]
 800b64e:	0021      	movs	r1, r4
 800b650:	003a      	movs	r2, r7
 800b652:	4b06      	ldr	r3, [pc, #24]	; (800b66c <_vfiprintf_r+0x234>)
 800b654:	9803      	ldr	r0, [sp, #12]
 800b656:	f000 f87b 	bl	800b750 <_printf_i>
 800b65a:	e7e3      	b.n	800b624 <_vfiprintf_r+0x1ec>
 800b65c:	0800bebc 	.word	0x0800bebc
 800b660:	0800bec2 	.word	0x0800bec2
 800b664:	0800bec6 	.word	0x0800bec6
 800b668:	00000000 	.word	0x00000000
 800b66c:	0800b413 	.word	0x0800b413

0800b670 <_printf_common>:
 800b670:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b672:	0016      	movs	r6, r2
 800b674:	9301      	str	r3, [sp, #4]
 800b676:	688a      	ldr	r2, [r1, #8]
 800b678:	690b      	ldr	r3, [r1, #16]
 800b67a:	000c      	movs	r4, r1
 800b67c:	9000      	str	r0, [sp, #0]
 800b67e:	4293      	cmp	r3, r2
 800b680:	da00      	bge.n	800b684 <_printf_common+0x14>
 800b682:	0013      	movs	r3, r2
 800b684:	0022      	movs	r2, r4
 800b686:	6033      	str	r3, [r6, #0]
 800b688:	3243      	adds	r2, #67	; 0x43
 800b68a:	7812      	ldrb	r2, [r2, #0]
 800b68c:	2a00      	cmp	r2, #0
 800b68e:	d001      	beq.n	800b694 <_printf_common+0x24>
 800b690:	3301      	adds	r3, #1
 800b692:	6033      	str	r3, [r6, #0]
 800b694:	6823      	ldr	r3, [r4, #0]
 800b696:	069b      	lsls	r3, r3, #26
 800b698:	d502      	bpl.n	800b6a0 <_printf_common+0x30>
 800b69a:	6833      	ldr	r3, [r6, #0]
 800b69c:	3302      	adds	r3, #2
 800b69e:	6033      	str	r3, [r6, #0]
 800b6a0:	6822      	ldr	r2, [r4, #0]
 800b6a2:	2306      	movs	r3, #6
 800b6a4:	0015      	movs	r5, r2
 800b6a6:	401d      	ands	r5, r3
 800b6a8:	421a      	tst	r2, r3
 800b6aa:	d027      	beq.n	800b6fc <_printf_common+0x8c>
 800b6ac:	0023      	movs	r3, r4
 800b6ae:	3343      	adds	r3, #67	; 0x43
 800b6b0:	781b      	ldrb	r3, [r3, #0]
 800b6b2:	1e5a      	subs	r2, r3, #1
 800b6b4:	4193      	sbcs	r3, r2
 800b6b6:	6822      	ldr	r2, [r4, #0]
 800b6b8:	0692      	lsls	r2, r2, #26
 800b6ba:	d430      	bmi.n	800b71e <_printf_common+0xae>
 800b6bc:	0022      	movs	r2, r4
 800b6be:	9901      	ldr	r1, [sp, #4]
 800b6c0:	9800      	ldr	r0, [sp, #0]
 800b6c2:	9d08      	ldr	r5, [sp, #32]
 800b6c4:	3243      	adds	r2, #67	; 0x43
 800b6c6:	47a8      	blx	r5
 800b6c8:	3001      	adds	r0, #1
 800b6ca:	d025      	beq.n	800b718 <_printf_common+0xa8>
 800b6cc:	2206      	movs	r2, #6
 800b6ce:	6823      	ldr	r3, [r4, #0]
 800b6d0:	2500      	movs	r5, #0
 800b6d2:	4013      	ands	r3, r2
 800b6d4:	2b04      	cmp	r3, #4
 800b6d6:	d105      	bne.n	800b6e4 <_printf_common+0x74>
 800b6d8:	6833      	ldr	r3, [r6, #0]
 800b6da:	68e5      	ldr	r5, [r4, #12]
 800b6dc:	1aed      	subs	r5, r5, r3
 800b6de:	43eb      	mvns	r3, r5
 800b6e0:	17db      	asrs	r3, r3, #31
 800b6e2:	401d      	ands	r5, r3
 800b6e4:	68a3      	ldr	r3, [r4, #8]
 800b6e6:	6922      	ldr	r2, [r4, #16]
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	dd01      	ble.n	800b6f0 <_printf_common+0x80>
 800b6ec:	1a9b      	subs	r3, r3, r2
 800b6ee:	18ed      	adds	r5, r5, r3
 800b6f0:	2600      	movs	r6, #0
 800b6f2:	42b5      	cmp	r5, r6
 800b6f4:	d120      	bne.n	800b738 <_printf_common+0xc8>
 800b6f6:	2000      	movs	r0, #0
 800b6f8:	e010      	b.n	800b71c <_printf_common+0xac>
 800b6fa:	3501      	adds	r5, #1
 800b6fc:	68e3      	ldr	r3, [r4, #12]
 800b6fe:	6832      	ldr	r2, [r6, #0]
 800b700:	1a9b      	subs	r3, r3, r2
 800b702:	42ab      	cmp	r3, r5
 800b704:	ddd2      	ble.n	800b6ac <_printf_common+0x3c>
 800b706:	0022      	movs	r2, r4
 800b708:	2301      	movs	r3, #1
 800b70a:	9901      	ldr	r1, [sp, #4]
 800b70c:	9800      	ldr	r0, [sp, #0]
 800b70e:	9f08      	ldr	r7, [sp, #32]
 800b710:	3219      	adds	r2, #25
 800b712:	47b8      	blx	r7
 800b714:	3001      	adds	r0, #1
 800b716:	d1f0      	bne.n	800b6fa <_printf_common+0x8a>
 800b718:	2001      	movs	r0, #1
 800b71a:	4240      	negs	r0, r0
 800b71c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b71e:	2030      	movs	r0, #48	; 0x30
 800b720:	18e1      	adds	r1, r4, r3
 800b722:	3143      	adds	r1, #67	; 0x43
 800b724:	7008      	strb	r0, [r1, #0]
 800b726:	0021      	movs	r1, r4
 800b728:	1c5a      	adds	r2, r3, #1
 800b72a:	3145      	adds	r1, #69	; 0x45
 800b72c:	7809      	ldrb	r1, [r1, #0]
 800b72e:	18a2      	adds	r2, r4, r2
 800b730:	3243      	adds	r2, #67	; 0x43
 800b732:	3302      	adds	r3, #2
 800b734:	7011      	strb	r1, [r2, #0]
 800b736:	e7c1      	b.n	800b6bc <_printf_common+0x4c>
 800b738:	0022      	movs	r2, r4
 800b73a:	2301      	movs	r3, #1
 800b73c:	9901      	ldr	r1, [sp, #4]
 800b73e:	9800      	ldr	r0, [sp, #0]
 800b740:	9f08      	ldr	r7, [sp, #32]
 800b742:	321a      	adds	r2, #26
 800b744:	47b8      	blx	r7
 800b746:	3001      	adds	r0, #1
 800b748:	d0e6      	beq.n	800b718 <_printf_common+0xa8>
 800b74a:	3601      	adds	r6, #1
 800b74c:	e7d1      	b.n	800b6f2 <_printf_common+0x82>
	...

0800b750 <_printf_i>:
 800b750:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b752:	b08b      	sub	sp, #44	; 0x2c
 800b754:	9206      	str	r2, [sp, #24]
 800b756:	000a      	movs	r2, r1
 800b758:	3243      	adds	r2, #67	; 0x43
 800b75a:	9307      	str	r3, [sp, #28]
 800b75c:	9005      	str	r0, [sp, #20]
 800b75e:	9204      	str	r2, [sp, #16]
 800b760:	7e0a      	ldrb	r2, [r1, #24]
 800b762:	000c      	movs	r4, r1
 800b764:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b766:	2a78      	cmp	r2, #120	; 0x78
 800b768:	d809      	bhi.n	800b77e <_printf_i+0x2e>
 800b76a:	2a62      	cmp	r2, #98	; 0x62
 800b76c:	d80b      	bhi.n	800b786 <_printf_i+0x36>
 800b76e:	2a00      	cmp	r2, #0
 800b770:	d100      	bne.n	800b774 <_printf_i+0x24>
 800b772:	e0be      	b.n	800b8f2 <_printf_i+0x1a2>
 800b774:	497c      	ldr	r1, [pc, #496]	; (800b968 <_printf_i+0x218>)
 800b776:	9103      	str	r1, [sp, #12]
 800b778:	2a58      	cmp	r2, #88	; 0x58
 800b77a:	d100      	bne.n	800b77e <_printf_i+0x2e>
 800b77c:	e093      	b.n	800b8a6 <_printf_i+0x156>
 800b77e:	0026      	movs	r6, r4
 800b780:	3642      	adds	r6, #66	; 0x42
 800b782:	7032      	strb	r2, [r6, #0]
 800b784:	e022      	b.n	800b7cc <_printf_i+0x7c>
 800b786:	0010      	movs	r0, r2
 800b788:	3863      	subs	r0, #99	; 0x63
 800b78a:	2815      	cmp	r0, #21
 800b78c:	d8f7      	bhi.n	800b77e <_printf_i+0x2e>
 800b78e:	f7f4 fcbb 	bl	8000108 <__gnu_thumb1_case_shi>
 800b792:	0016      	.short	0x0016
 800b794:	fff6001f 	.word	0xfff6001f
 800b798:	fff6fff6 	.word	0xfff6fff6
 800b79c:	001ffff6 	.word	0x001ffff6
 800b7a0:	fff6fff6 	.word	0xfff6fff6
 800b7a4:	fff6fff6 	.word	0xfff6fff6
 800b7a8:	003600a3 	.word	0x003600a3
 800b7ac:	fff60083 	.word	0xfff60083
 800b7b0:	00b4fff6 	.word	0x00b4fff6
 800b7b4:	0036fff6 	.word	0x0036fff6
 800b7b8:	fff6fff6 	.word	0xfff6fff6
 800b7bc:	0087      	.short	0x0087
 800b7be:	0026      	movs	r6, r4
 800b7c0:	681a      	ldr	r2, [r3, #0]
 800b7c2:	3642      	adds	r6, #66	; 0x42
 800b7c4:	1d11      	adds	r1, r2, #4
 800b7c6:	6019      	str	r1, [r3, #0]
 800b7c8:	6813      	ldr	r3, [r2, #0]
 800b7ca:	7033      	strb	r3, [r6, #0]
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e0a2      	b.n	800b916 <_printf_i+0x1c6>
 800b7d0:	6818      	ldr	r0, [r3, #0]
 800b7d2:	6809      	ldr	r1, [r1, #0]
 800b7d4:	1d02      	adds	r2, r0, #4
 800b7d6:	060d      	lsls	r5, r1, #24
 800b7d8:	d50b      	bpl.n	800b7f2 <_printf_i+0xa2>
 800b7da:	6805      	ldr	r5, [r0, #0]
 800b7dc:	601a      	str	r2, [r3, #0]
 800b7de:	2d00      	cmp	r5, #0
 800b7e0:	da03      	bge.n	800b7ea <_printf_i+0x9a>
 800b7e2:	232d      	movs	r3, #45	; 0x2d
 800b7e4:	9a04      	ldr	r2, [sp, #16]
 800b7e6:	426d      	negs	r5, r5
 800b7e8:	7013      	strb	r3, [r2, #0]
 800b7ea:	4b5f      	ldr	r3, [pc, #380]	; (800b968 <_printf_i+0x218>)
 800b7ec:	270a      	movs	r7, #10
 800b7ee:	9303      	str	r3, [sp, #12]
 800b7f0:	e01b      	b.n	800b82a <_printf_i+0xda>
 800b7f2:	6805      	ldr	r5, [r0, #0]
 800b7f4:	601a      	str	r2, [r3, #0]
 800b7f6:	0649      	lsls	r1, r1, #25
 800b7f8:	d5f1      	bpl.n	800b7de <_printf_i+0x8e>
 800b7fa:	b22d      	sxth	r5, r5
 800b7fc:	e7ef      	b.n	800b7de <_printf_i+0x8e>
 800b7fe:	680d      	ldr	r5, [r1, #0]
 800b800:	6819      	ldr	r1, [r3, #0]
 800b802:	1d08      	adds	r0, r1, #4
 800b804:	6018      	str	r0, [r3, #0]
 800b806:	062e      	lsls	r6, r5, #24
 800b808:	d501      	bpl.n	800b80e <_printf_i+0xbe>
 800b80a:	680d      	ldr	r5, [r1, #0]
 800b80c:	e003      	b.n	800b816 <_printf_i+0xc6>
 800b80e:	066d      	lsls	r5, r5, #25
 800b810:	d5fb      	bpl.n	800b80a <_printf_i+0xba>
 800b812:	680d      	ldr	r5, [r1, #0]
 800b814:	b2ad      	uxth	r5, r5
 800b816:	4b54      	ldr	r3, [pc, #336]	; (800b968 <_printf_i+0x218>)
 800b818:	2708      	movs	r7, #8
 800b81a:	9303      	str	r3, [sp, #12]
 800b81c:	2a6f      	cmp	r2, #111	; 0x6f
 800b81e:	d000      	beq.n	800b822 <_printf_i+0xd2>
 800b820:	3702      	adds	r7, #2
 800b822:	0023      	movs	r3, r4
 800b824:	2200      	movs	r2, #0
 800b826:	3343      	adds	r3, #67	; 0x43
 800b828:	701a      	strb	r2, [r3, #0]
 800b82a:	6863      	ldr	r3, [r4, #4]
 800b82c:	60a3      	str	r3, [r4, #8]
 800b82e:	2b00      	cmp	r3, #0
 800b830:	db03      	blt.n	800b83a <_printf_i+0xea>
 800b832:	2104      	movs	r1, #4
 800b834:	6822      	ldr	r2, [r4, #0]
 800b836:	438a      	bics	r2, r1
 800b838:	6022      	str	r2, [r4, #0]
 800b83a:	2d00      	cmp	r5, #0
 800b83c:	d102      	bne.n	800b844 <_printf_i+0xf4>
 800b83e:	9e04      	ldr	r6, [sp, #16]
 800b840:	2b00      	cmp	r3, #0
 800b842:	d00c      	beq.n	800b85e <_printf_i+0x10e>
 800b844:	9e04      	ldr	r6, [sp, #16]
 800b846:	0028      	movs	r0, r5
 800b848:	0039      	movs	r1, r7
 800b84a:	f7f4 fced 	bl	8000228 <__aeabi_uidivmod>
 800b84e:	9b03      	ldr	r3, [sp, #12]
 800b850:	3e01      	subs	r6, #1
 800b852:	5c5b      	ldrb	r3, [r3, r1]
 800b854:	7033      	strb	r3, [r6, #0]
 800b856:	002b      	movs	r3, r5
 800b858:	0005      	movs	r5, r0
 800b85a:	429f      	cmp	r7, r3
 800b85c:	d9f3      	bls.n	800b846 <_printf_i+0xf6>
 800b85e:	2f08      	cmp	r7, #8
 800b860:	d109      	bne.n	800b876 <_printf_i+0x126>
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	07db      	lsls	r3, r3, #31
 800b866:	d506      	bpl.n	800b876 <_printf_i+0x126>
 800b868:	6862      	ldr	r2, [r4, #4]
 800b86a:	6923      	ldr	r3, [r4, #16]
 800b86c:	429a      	cmp	r2, r3
 800b86e:	dc02      	bgt.n	800b876 <_printf_i+0x126>
 800b870:	2330      	movs	r3, #48	; 0x30
 800b872:	3e01      	subs	r6, #1
 800b874:	7033      	strb	r3, [r6, #0]
 800b876:	9b04      	ldr	r3, [sp, #16]
 800b878:	1b9b      	subs	r3, r3, r6
 800b87a:	6123      	str	r3, [r4, #16]
 800b87c:	9b07      	ldr	r3, [sp, #28]
 800b87e:	0021      	movs	r1, r4
 800b880:	9300      	str	r3, [sp, #0]
 800b882:	9805      	ldr	r0, [sp, #20]
 800b884:	9b06      	ldr	r3, [sp, #24]
 800b886:	aa09      	add	r2, sp, #36	; 0x24
 800b888:	f7ff fef2 	bl	800b670 <_printf_common>
 800b88c:	3001      	adds	r0, #1
 800b88e:	d147      	bne.n	800b920 <_printf_i+0x1d0>
 800b890:	2001      	movs	r0, #1
 800b892:	4240      	negs	r0, r0
 800b894:	b00b      	add	sp, #44	; 0x2c
 800b896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b898:	2220      	movs	r2, #32
 800b89a:	6809      	ldr	r1, [r1, #0]
 800b89c:	430a      	orrs	r2, r1
 800b89e:	6022      	str	r2, [r4, #0]
 800b8a0:	2278      	movs	r2, #120	; 0x78
 800b8a2:	4932      	ldr	r1, [pc, #200]	; (800b96c <_printf_i+0x21c>)
 800b8a4:	9103      	str	r1, [sp, #12]
 800b8a6:	0021      	movs	r1, r4
 800b8a8:	3145      	adds	r1, #69	; 0x45
 800b8aa:	700a      	strb	r2, [r1, #0]
 800b8ac:	6819      	ldr	r1, [r3, #0]
 800b8ae:	6822      	ldr	r2, [r4, #0]
 800b8b0:	c920      	ldmia	r1!, {r5}
 800b8b2:	0610      	lsls	r0, r2, #24
 800b8b4:	d402      	bmi.n	800b8bc <_printf_i+0x16c>
 800b8b6:	0650      	lsls	r0, r2, #25
 800b8b8:	d500      	bpl.n	800b8bc <_printf_i+0x16c>
 800b8ba:	b2ad      	uxth	r5, r5
 800b8bc:	6019      	str	r1, [r3, #0]
 800b8be:	07d3      	lsls	r3, r2, #31
 800b8c0:	d502      	bpl.n	800b8c8 <_printf_i+0x178>
 800b8c2:	2320      	movs	r3, #32
 800b8c4:	4313      	orrs	r3, r2
 800b8c6:	6023      	str	r3, [r4, #0]
 800b8c8:	2710      	movs	r7, #16
 800b8ca:	2d00      	cmp	r5, #0
 800b8cc:	d1a9      	bne.n	800b822 <_printf_i+0xd2>
 800b8ce:	2220      	movs	r2, #32
 800b8d0:	6823      	ldr	r3, [r4, #0]
 800b8d2:	4393      	bics	r3, r2
 800b8d4:	6023      	str	r3, [r4, #0]
 800b8d6:	e7a4      	b.n	800b822 <_printf_i+0xd2>
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	680d      	ldr	r5, [r1, #0]
 800b8dc:	1d10      	adds	r0, r2, #4
 800b8de:	6949      	ldr	r1, [r1, #20]
 800b8e0:	6018      	str	r0, [r3, #0]
 800b8e2:	6813      	ldr	r3, [r2, #0]
 800b8e4:	062e      	lsls	r6, r5, #24
 800b8e6:	d501      	bpl.n	800b8ec <_printf_i+0x19c>
 800b8e8:	6019      	str	r1, [r3, #0]
 800b8ea:	e002      	b.n	800b8f2 <_printf_i+0x1a2>
 800b8ec:	066d      	lsls	r5, r5, #25
 800b8ee:	d5fb      	bpl.n	800b8e8 <_printf_i+0x198>
 800b8f0:	8019      	strh	r1, [r3, #0]
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	9e04      	ldr	r6, [sp, #16]
 800b8f6:	6123      	str	r3, [r4, #16]
 800b8f8:	e7c0      	b.n	800b87c <_printf_i+0x12c>
 800b8fa:	681a      	ldr	r2, [r3, #0]
 800b8fc:	1d11      	adds	r1, r2, #4
 800b8fe:	6019      	str	r1, [r3, #0]
 800b900:	6816      	ldr	r6, [r2, #0]
 800b902:	2100      	movs	r1, #0
 800b904:	0030      	movs	r0, r6
 800b906:	6862      	ldr	r2, [r4, #4]
 800b908:	f000 f998 	bl	800bc3c <memchr>
 800b90c:	2800      	cmp	r0, #0
 800b90e:	d001      	beq.n	800b914 <_printf_i+0x1c4>
 800b910:	1b80      	subs	r0, r0, r6
 800b912:	6060      	str	r0, [r4, #4]
 800b914:	6863      	ldr	r3, [r4, #4]
 800b916:	6123      	str	r3, [r4, #16]
 800b918:	2300      	movs	r3, #0
 800b91a:	9a04      	ldr	r2, [sp, #16]
 800b91c:	7013      	strb	r3, [r2, #0]
 800b91e:	e7ad      	b.n	800b87c <_printf_i+0x12c>
 800b920:	0032      	movs	r2, r6
 800b922:	6923      	ldr	r3, [r4, #16]
 800b924:	9906      	ldr	r1, [sp, #24]
 800b926:	9805      	ldr	r0, [sp, #20]
 800b928:	9d07      	ldr	r5, [sp, #28]
 800b92a:	47a8      	blx	r5
 800b92c:	3001      	adds	r0, #1
 800b92e:	d0af      	beq.n	800b890 <_printf_i+0x140>
 800b930:	6823      	ldr	r3, [r4, #0]
 800b932:	079b      	lsls	r3, r3, #30
 800b934:	d415      	bmi.n	800b962 <_printf_i+0x212>
 800b936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b938:	68e0      	ldr	r0, [r4, #12]
 800b93a:	4298      	cmp	r0, r3
 800b93c:	daaa      	bge.n	800b894 <_printf_i+0x144>
 800b93e:	0018      	movs	r0, r3
 800b940:	e7a8      	b.n	800b894 <_printf_i+0x144>
 800b942:	0022      	movs	r2, r4
 800b944:	2301      	movs	r3, #1
 800b946:	9906      	ldr	r1, [sp, #24]
 800b948:	9805      	ldr	r0, [sp, #20]
 800b94a:	9e07      	ldr	r6, [sp, #28]
 800b94c:	3219      	adds	r2, #25
 800b94e:	47b0      	blx	r6
 800b950:	3001      	adds	r0, #1
 800b952:	d09d      	beq.n	800b890 <_printf_i+0x140>
 800b954:	3501      	adds	r5, #1
 800b956:	68e3      	ldr	r3, [r4, #12]
 800b958:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b95a:	1a9b      	subs	r3, r3, r2
 800b95c:	42ab      	cmp	r3, r5
 800b95e:	dcf0      	bgt.n	800b942 <_printf_i+0x1f2>
 800b960:	e7e9      	b.n	800b936 <_printf_i+0x1e6>
 800b962:	2500      	movs	r5, #0
 800b964:	e7f7      	b.n	800b956 <_printf_i+0x206>
 800b966:	46c0      	nop			; (mov r8, r8)
 800b968:	0800becd 	.word	0x0800becd
 800b96c:	0800bede 	.word	0x0800bede

0800b970 <__sflush_r>:
 800b970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b972:	898b      	ldrh	r3, [r1, #12]
 800b974:	0005      	movs	r5, r0
 800b976:	000c      	movs	r4, r1
 800b978:	071a      	lsls	r2, r3, #28
 800b97a:	d45c      	bmi.n	800ba36 <__sflush_r+0xc6>
 800b97c:	684a      	ldr	r2, [r1, #4]
 800b97e:	2a00      	cmp	r2, #0
 800b980:	dc04      	bgt.n	800b98c <__sflush_r+0x1c>
 800b982:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800b984:	2a00      	cmp	r2, #0
 800b986:	dc01      	bgt.n	800b98c <__sflush_r+0x1c>
 800b988:	2000      	movs	r0, #0
 800b98a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800b98c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b98e:	2f00      	cmp	r7, #0
 800b990:	d0fa      	beq.n	800b988 <__sflush_r+0x18>
 800b992:	2200      	movs	r2, #0
 800b994:	2080      	movs	r0, #128	; 0x80
 800b996:	682e      	ldr	r6, [r5, #0]
 800b998:	602a      	str	r2, [r5, #0]
 800b99a:	001a      	movs	r2, r3
 800b99c:	0140      	lsls	r0, r0, #5
 800b99e:	6a21      	ldr	r1, [r4, #32]
 800b9a0:	4002      	ands	r2, r0
 800b9a2:	4203      	tst	r3, r0
 800b9a4:	d034      	beq.n	800ba10 <__sflush_r+0xa0>
 800b9a6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b9a8:	89a3      	ldrh	r3, [r4, #12]
 800b9aa:	075b      	lsls	r3, r3, #29
 800b9ac:	d506      	bpl.n	800b9bc <__sflush_r+0x4c>
 800b9ae:	6863      	ldr	r3, [r4, #4]
 800b9b0:	1ac0      	subs	r0, r0, r3
 800b9b2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d001      	beq.n	800b9bc <__sflush_r+0x4c>
 800b9b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b9ba:	1ac0      	subs	r0, r0, r3
 800b9bc:	0002      	movs	r2, r0
 800b9be:	2300      	movs	r3, #0
 800b9c0:	0028      	movs	r0, r5
 800b9c2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800b9c4:	6a21      	ldr	r1, [r4, #32]
 800b9c6:	47b8      	blx	r7
 800b9c8:	89a2      	ldrh	r2, [r4, #12]
 800b9ca:	1c43      	adds	r3, r0, #1
 800b9cc:	d106      	bne.n	800b9dc <__sflush_r+0x6c>
 800b9ce:	6829      	ldr	r1, [r5, #0]
 800b9d0:	291d      	cmp	r1, #29
 800b9d2:	d82c      	bhi.n	800ba2e <__sflush_r+0xbe>
 800b9d4:	4b2a      	ldr	r3, [pc, #168]	; (800ba80 <__sflush_r+0x110>)
 800b9d6:	410b      	asrs	r3, r1
 800b9d8:	07db      	lsls	r3, r3, #31
 800b9da:	d428      	bmi.n	800ba2e <__sflush_r+0xbe>
 800b9dc:	2300      	movs	r3, #0
 800b9de:	6063      	str	r3, [r4, #4]
 800b9e0:	6923      	ldr	r3, [r4, #16]
 800b9e2:	6023      	str	r3, [r4, #0]
 800b9e4:	04d2      	lsls	r2, r2, #19
 800b9e6:	d505      	bpl.n	800b9f4 <__sflush_r+0x84>
 800b9e8:	1c43      	adds	r3, r0, #1
 800b9ea:	d102      	bne.n	800b9f2 <__sflush_r+0x82>
 800b9ec:	682b      	ldr	r3, [r5, #0]
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d100      	bne.n	800b9f4 <__sflush_r+0x84>
 800b9f2:	6560      	str	r0, [r4, #84]	; 0x54
 800b9f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9f6:	602e      	str	r6, [r5, #0]
 800b9f8:	2900      	cmp	r1, #0
 800b9fa:	d0c5      	beq.n	800b988 <__sflush_r+0x18>
 800b9fc:	0023      	movs	r3, r4
 800b9fe:	3344      	adds	r3, #68	; 0x44
 800ba00:	4299      	cmp	r1, r3
 800ba02:	d002      	beq.n	800ba0a <__sflush_r+0x9a>
 800ba04:	0028      	movs	r0, r5
 800ba06:	f7ff fa8f 	bl	800af28 <_free_r>
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	6360      	str	r0, [r4, #52]	; 0x34
 800ba0e:	e7bc      	b.n	800b98a <__sflush_r+0x1a>
 800ba10:	2301      	movs	r3, #1
 800ba12:	0028      	movs	r0, r5
 800ba14:	47b8      	blx	r7
 800ba16:	1c43      	adds	r3, r0, #1
 800ba18:	d1c6      	bne.n	800b9a8 <__sflush_r+0x38>
 800ba1a:	682b      	ldr	r3, [r5, #0]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0c3      	beq.n	800b9a8 <__sflush_r+0x38>
 800ba20:	2b1d      	cmp	r3, #29
 800ba22:	d001      	beq.n	800ba28 <__sflush_r+0xb8>
 800ba24:	2b16      	cmp	r3, #22
 800ba26:	d101      	bne.n	800ba2c <__sflush_r+0xbc>
 800ba28:	602e      	str	r6, [r5, #0]
 800ba2a:	e7ad      	b.n	800b988 <__sflush_r+0x18>
 800ba2c:	89a2      	ldrh	r2, [r4, #12]
 800ba2e:	2340      	movs	r3, #64	; 0x40
 800ba30:	4313      	orrs	r3, r2
 800ba32:	81a3      	strh	r3, [r4, #12]
 800ba34:	e7a9      	b.n	800b98a <__sflush_r+0x1a>
 800ba36:	690e      	ldr	r6, [r1, #16]
 800ba38:	2e00      	cmp	r6, #0
 800ba3a:	d0a5      	beq.n	800b988 <__sflush_r+0x18>
 800ba3c:	680f      	ldr	r7, [r1, #0]
 800ba3e:	600e      	str	r6, [r1, #0]
 800ba40:	1bba      	subs	r2, r7, r6
 800ba42:	9201      	str	r2, [sp, #4]
 800ba44:	2200      	movs	r2, #0
 800ba46:	079b      	lsls	r3, r3, #30
 800ba48:	d100      	bne.n	800ba4c <__sflush_r+0xdc>
 800ba4a:	694a      	ldr	r2, [r1, #20]
 800ba4c:	60a2      	str	r2, [r4, #8]
 800ba4e:	9b01      	ldr	r3, [sp, #4]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	dd99      	ble.n	800b988 <__sflush_r+0x18>
 800ba54:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ba56:	0032      	movs	r2, r6
 800ba58:	001f      	movs	r7, r3
 800ba5a:	0028      	movs	r0, r5
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	6a21      	ldr	r1, [r4, #32]
 800ba60:	47b8      	blx	r7
 800ba62:	2800      	cmp	r0, #0
 800ba64:	dc06      	bgt.n	800ba74 <__sflush_r+0x104>
 800ba66:	2340      	movs	r3, #64	; 0x40
 800ba68:	2001      	movs	r0, #1
 800ba6a:	89a2      	ldrh	r2, [r4, #12]
 800ba6c:	4240      	negs	r0, r0
 800ba6e:	4313      	orrs	r3, r2
 800ba70:	81a3      	strh	r3, [r4, #12]
 800ba72:	e78a      	b.n	800b98a <__sflush_r+0x1a>
 800ba74:	9b01      	ldr	r3, [sp, #4]
 800ba76:	1836      	adds	r6, r6, r0
 800ba78:	1a1b      	subs	r3, r3, r0
 800ba7a:	9301      	str	r3, [sp, #4]
 800ba7c:	e7e7      	b.n	800ba4e <__sflush_r+0xde>
 800ba7e:	46c0      	nop			; (mov r8, r8)
 800ba80:	dfbffffe 	.word	0xdfbffffe

0800ba84 <_fflush_r>:
 800ba84:	690b      	ldr	r3, [r1, #16]
 800ba86:	b570      	push	{r4, r5, r6, lr}
 800ba88:	0005      	movs	r5, r0
 800ba8a:	000c      	movs	r4, r1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d102      	bne.n	800ba96 <_fflush_r+0x12>
 800ba90:	2500      	movs	r5, #0
 800ba92:	0028      	movs	r0, r5
 800ba94:	bd70      	pop	{r4, r5, r6, pc}
 800ba96:	2800      	cmp	r0, #0
 800ba98:	d004      	beq.n	800baa4 <_fflush_r+0x20>
 800ba9a:	6a03      	ldr	r3, [r0, #32]
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d101      	bne.n	800baa4 <_fflush_r+0x20>
 800baa0:	f7fe ffec 	bl	800aa7c <__sinit>
 800baa4:	220c      	movs	r2, #12
 800baa6:	5ea3      	ldrsh	r3, [r4, r2]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d0f1      	beq.n	800ba90 <_fflush_r+0xc>
 800baac:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800baae:	07d2      	lsls	r2, r2, #31
 800bab0:	d404      	bmi.n	800babc <_fflush_r+0x38>
 800bab2:	059b      	lsls	r3, r3, #22
 800bab4:	d402      	bmi.n	800babc <_fflush_r+0x38>
 800bab6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bab8:	f7ff fa2b 	bl	800af12 <__retarget_lock_acquire_recursive>
 800babc:	0028      	movs	r0, r5
 800babe:	0021      	movs	r1, r4
 800bac0:	f7ff ff56 	bl	800b970 <__sflush_r>
 800bac4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bac6:	0005      	movs	r5, r0
 800bac8:	07db      	lsls	r3, r3, #31
 800baca:	d4e2      	bmi.n	800ba92 <_fflush_r+0xe>
 800bacc:	89a3      	ldrh	r3, [r4, #12]
 800bace:	059b      	lsls	r3, r3, #22
 800bad0:	d4df      	bmi.n	800ba92 <_fflush_r+0xe>
 800bad2:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bad4:	f7ff fa1e 	bl	800af14 <__retarget_lock_release_recursive>
 800bad8:	e7db      	b.n	800ba92 <_fflush_r+0xe>
	...

0800badc <__swhatbuf_r>:
 800badc:	b570      	push	{r4, r5, r6, lr}
 800bade:	000e      	movs	r6, r1
 800bae0:	001d      	movs	r5, r3
 800bae2:	230e      	movs	r3, #14
 800bae4:	5ec9      	ldrsh	r1, [r1, r3]
 800bae6:	0014      	movs	r4, r2
 800bae8:	b096      	sub	sp, #88	; 0x58
 800baea:	2900      	cmp	r1, #0
 800baec:	da0c      	bge.n	800bb08 <__swhatbuf_r+0x2c>
 800baee:	89b2      	ldrh	r2, [r6, #12]
 800baf0:	2380      	movs	r3, #128	; 0x80
 800baf2:	0011      	movs	r1, r2
 800baf4:	4019      	ands	r1, r3
 800baf6:	421a      	tst	r2, r3
 800baf8:	d013      	beq.n	800bb22 <__swhatbuf_r+0x46>
 800bafa:	2100      	movs	r1, #0
 800bafc:	3b40      	subs	r3, #64	; 0x40
 800bafe:	2000      	movs	r0, #0
 800bb00:	6029      	str	r1, [r5, #0]
 800bb02:	6023      	str	r3, [r4, #0]
 800bb04:	b016      	add	sp, #88	; 0x58
 800bb06:	bd70      	pop	{r4, r5, r6, pc}
 800bb08:	466a      	mov	r2, sp
 800bb0a:	f000 f861 	bl	800bbd0 <_fstat_r>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	dbed      	blt.n	800baee <__swhatbuf_r+0x12>
 800bb12:	23f0      	movs	r3, #240	; 0xf0
 800bb14:	9901      	ldr	r1, [sp, #4]
 800bb16:	021b      	lsls	r3, r3, #8
 800bb18:	4019      	ands	r1, r3
 800bb1a:	4b03      	ldr	r3, [pc, #12]	; (800bb28 <__swhatbuf_r+0x4c>)
 800bb1c:	18c9      	adds	r1, r1, r3
 800bb1e:	424b      	negs	r3, r1
 800bb20:	4159      	adcs	r1, r3
 800bb22:	2380      	movs	r3, #128	; 0x80
 800bb24:	00db      	lsls	r3, r3, #3
 800bb26:	e7ea      	b.n	800bafe <__swhatbuf_r+0x22>
 800bb28:	ffffe000 	.word	0xffffe000

0800bb2c <__smakebuf_r>:
 800bb2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bb2e:	2602      	movs	r6, #2
 800bb30:	898b      	ldrh	r3, [r1, #12]
 800bb32:	0005      	movs	r5, r0
 800bb34:	000c      	movs	r4, r1
 800bb36:	4233      	tst	r3, r6
 800bb38:	d006      	beq.n	800bb48 <__smakebuf_r+0x1c>
 800bb3a:	0023      	movs	r3, r4
 800bb3c:	3347      	adds	r3, #71	; 0x47
 800bb3e:	6023      	str	r3, [r4, #0]
 800bb40:	6123      	str	r3, [r4, #16]
 800bb42:	2301      	movs	r3, #1
 800bb44:	6163      	str	r3, [r4, #20]
 800bb46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800bb48:	466a      	mov	r2, sp
 800bb4a:	ab01      	add	r3, sp, #4
 800bb4c:	f7ff ffc6 	bl	800badc <__swhatbuf_r>
 800bb50:	9900      	ldr	r1, [sp, #0]
 800bb52:	0007      	movs	r7, r0
 800bb54:	0028      	movs	r0, r5
 800bb56:	f7ff fa53 	bl	800b000 <_malloc_r>
 800bb5a:	2800      	cmp	r0, #0
 800bb5c:	d108      	bne.n	800bb70 <__smakebuf_r+0x44>
 800bb5e:	220c      	movs	r2, #12
 800bb60:	5ea3      	ldrsh	r3, [r4, r2]
 800bb62:	059a      	lsls	r2, r3, #22
 800bb64:	d4ef      	bmi.n	800bb46 <__smakebuf_r+0x1a>
 800bb66:	2203      	movs	r2, #3
 800bb68:	4393      	bics	r3, r2
 800bb6a:	431e      	orrs	r6, r3
 800bb6c:	81a6      	strh	r6, [r4, #12]
 800bb6e:	e7e4      	b.n	800bb3a <__smakebuf_r+0xe>
 800bb70:	2380      	movs	r3, #128	; 0x80
 800bb72:	89a2      	ldrh	r2, [r4, #12]
 800bb74:	6020      	str	r0, [r4, #0]
 800bb76:	4313      	orrs	r3, r2
 800bb78:	81a3      	strh	r3, [r4, #12]
 800bb7a:	9b00      	ldr	r3, [sp, #0]
 800bb7c:	6120      	str	r0, [r4, #16]
 800bb7e:	6163      	str	r3, [r4, #20]
 800bb80:	9b01      	ldr	r3, [sp, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d00c      	beq.n	800bba0 <__smakebuf_r+0x74>
 800bb86:	0028      	movs	r0, r5
 800bb88:	230e      	movs	r3, #14
 800bb8a:	5ee1      	ldrsh	r1, [r4, r3]
 800bb8c:	f000 f832 	bl	800bbf4 <_isatty_r>
 800bb90:	2800      	cmp	r0, #0
 800bb92:	d005      	beq.n	800bba0 <__smakebuf_r+0x74>
 800bb94:	2303      	movs	r3, #3
 800bb96:	89a2      	ldrh	r2, [r4, #12]
 800bb98:	439a      	bics	r2, r3
 800bb9a:	3b02      	subs	r3, #2
 800bb9c:	4313      	orrs	r3, r2
 800bb9e:	81a3      	strh	r3, [r4, #12]
 800bba0:	89a3      	ldrh	r3, [r4, #12]
 800bba2:	433b      	orrs	r3, r7
 800bba4:	81a3      	strh	r3, [r4, #12]
 800bba6:	e7ce      	b.n	800bb46 <__smakebuf_r+0x1a>

0800bba8 <memmove>:
 800bba8:	b510      	push	{r4, lr}
 800bbaa:	4288      	cmp	r0, r1
 800bbac:	d902      	bls.n	800bbb4 <memmove+0xc>
 800bbae:	188b      	adds	r3, r1, r2
 800bbb0:	4298      	cmp	r0, r3
 800bbb2:	d303      	bcc.n	800bbbc <memmove+0x14>
 800bbb4:	2300      	movs	r3, #0
 800bbb6:	e007      	b.n	800bbc8 <memmove+0x20>
 800bbb8:	5c8b      	ldrb	r3, [r1, r2]
 800bbba:	5483      	strb	r3, [r0, r2]
 800bbbc:	3a01      	subs	r2, #1
 800bbbe:	d2fb      	bcs.n	800bbb8 <memmove+0x10>
 800bbc0:	bd10      	pop	{r4, pc}
 800bbc2:	5ccc      	ldrb	r4, [r1, r3]
 800bbc4:	54c4      	strb	r4, [r0, r3]
 800bbc6:	3301      	adds	r3, #1
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	d1fa      	bne.n	800bbc2 <memmove+0x1a>
 800bbcc:	e7f8      	b.n	800bbc0 <memmove+0x18>
	...

0800bbd0 <_fstat_r>:
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	b570      	push	{r4, r5, r6, lr}
 800bbd4:	4d06      	ldr	r5, [pc, #24]	; (800bbf0 <_fstat_r+0x20>)
 800bbd6:	0004      	movs	r4, r0
 800bbd8:	0008      	movs	r0, r1
 800bbda:	0011      	movs	r1, r2
 800bbdc:	602b      	str	r3, [r5, #0]
 800bbde:	f7f5 ff62 	bl	8001aa6 <_fstat>
 800bbe2:	1c43      	adds	r3, r0, #1
 800bbe4:	d103      	bne.n	800bbee <_fstat_r+0x1e>
 800bbe6:	682b      	ldr	r3, [r5, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d000      	beq.n	800bbee <_fstat_r+0x1e>
 800bbec:	6023      	str	r3, [r4, #0]
 800bbee:	bd70      	pop	{r4, r5, r6, pc}
 800bbf0:	20008810 	.word	0x20008810

0800bbf4 <_isatty_r>:
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	b570      	push	{r4, r5, r6, lr}
 800bbf8:	4d06      	ldr	r5, [pc, #24]	; (800bc14 <_isatty_r+0x20>)
 800bbfa:	0004      	movs	r4, r0
 800bbfc:	0008      	movs	r0, r1
 800bbfe:	602b      	str	r3, [r5, #0]
 800bc00:	f7f5 ff5f 	bl	8001ac2 <_isatty>
 800bc04:	1c43      	adds	r3, r0, #1
 800bc06:	d103      	bne.n	800bc10 <_isatty_r+0x1c>
 800bc08:	682b      	ldr	r3, [r5, #0]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d000      	beq.n	800bc10 <_isatty_r+0x1c>
 800bc0e:	6023      	str	r3, [r4, #0]
 800bc10:	bd70      	pop	{r4, r5, r6, pc}
 800bc12:	46c0      	nop			; (mov r8, r8)
 800bc14:	20008810 	.word	0x20008810

0800bc18 <_sbrk_r>:
 800bc18:	2300      	movs	r3, #0
 800bc1a:	b570      	push	{r4, r5, r6, lr}
 800bc1c:	4d06      	ldr	r5, [pc, #24]	; (800bc38 <_sbrk_r+0x20>)
 800bc1e:	0004      	movs	r4, r0
 800bc20:	0008      	movs	r0, r1
 800bc22:	602b      	str	r3, [r5, #0]
 800bc24:	f7f5 ff62 	bl	8001aec <_sbrk>
 800bc28:	1c43      	adds	r3, r0, #1
 800bc2a:	d103      	bne.n	800bc34 <_sbrk_r+0x1c>
 800bc2c:	682b      	ldr	r3, [r5, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d000      	beq.n	800bc34 <_sbrk_r+0x1c>
 800bc32:	6023      	str	r3, [r4, #0]
 800bc34:	bd70      	pop	{r4, r5, r6, pc}
 800bc36:	46c0      	nop			; (mov r8, r8)
 800bc38:	20008810 	.word	0x20008810

0800bc3c <memchr>:
 800bc3c:	b2c9      	uxtb	r1, r1
 800bc3e:	1882      	adds	r2, r0, r2
 800bc40:	4290      	cmp	r0, r2
 800bc42:	d101      	bne.n	800bc48 <memchr+0xc>
 800bc44:	2000      	movs	r0, #0
 800bc46:	4770      	bx	lr
 800bc48:	7803      	ldrb	r3, [r0, #0]
 800bc4a:	428b      	cmp	r3, r1
 800bc4c:	d0fb      	beq.n	800bc46 <memchr+0xa>
 800bc4e:	3001      	adds	r0, #1
 800bc50:	e7f6      	b.n	800bc40 <memchr+0x4>

0800bc52 <_realloc_r>:
 800bc52:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc54:	0007      	movs	r7, r0
 800bc56:	000e      	movs	r6, r1
 800bc58:	0014      	movs	r4, r2
 800bc5a:	2900      	cmp	r1, #0
 800bc5c:	d105      	bne.n	800bc6a <_realloc_r+0x18>
 800bc5e:	0011      	movs	r1, r2
 800bc60:	f7ff f9ce 	bl	800b000 <_malloc_r>
 800bc64:	0005      	movs	r5, r0
 800bc66:	0028      	movs	r0, r5
 800bc68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bc6a:	2a00      	cmp	r2, #0
 800bc6c:	d103      	bne.n	800bc76 <_realloc_r+0x24>
 800bc6e:	f7ff f95b 	bl	800af28 <_free_r>
 800bc72:	0025      	movs	r5, r4
 800bc74:	e7f7      	b.n	800bc66 <_realloc_r+0x14>
 800bc76:	f000 f81b 	bl	800bcb0 <_malloc_usable_size_r>
 800bc7a:	9001      	str	r0, [sp, #4]
 800bc7c:	4284      	cmp	r4, r0
 800bc7e:	d803      	bhi.n	800bc88 <_realloc_r+0x36>
 800bc80:	0035      	movs	r5, r6
 800bc82:	0843      	lsrs	r3, r0, #1
 800bc84:	42a3      	cmp	r3, r4
 800bc86:	d3ee      	bcc.n	800bc66 <_realloc_r+0x14>
 800bc88:	0021      	movs	r1, r4
 800bc8a:	0038      	movs	r0, r7
 800bc8c:	f7ff f9b8 	bl	800b000 <_malloc_r>
 800bc90:	1e05      	subs	r5, r0, #0
 800bc92:	d0e8      	beq.n	800bc66 <_realloc_r+0x14>
 800bc94:	9b01      	ldr	r3, [sp, #4]
 800bc96:	0022      	movs	r2, r4
 800bc98:	429c      	cmp	r4, r3
 800bc9a:	d900      	bls.n	800bc9e <_realloc_r+0x4c>
 800bc9c:	001a      	movs	r2, r3
 800bc9e:	0031      	movs	r1, r6
 800bca0:	0028      	movs	r0, r5
 800bca2:	f7ff f938 	bl	800af16 <memcpy>
 800bca6:	0031      	movs	r1, r6
 800bca8:	0038      	movs	r0, r7
 800bcaa:	f7ff f93d 	bl	800af28 <_free_r>
 800bcae:	e7da      	b.n	800bc66 <_realloc_r+0x14>

0800bcb0 <_malloc_usable_size_r>:
 800bcb0:	1f0b      	subs	r3, r1, #4
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	1f18      	subs	r0, r3, #4
 800bcb6:	2b00      	cmp	r3, #0
 800bcb8:	da01      	bge.n	800bcbe <_malloc_usable_size_r+0xe>
 800bcba:	580b      	ldr	r3, [r1, r0]
 800bcbc:	18c0      	adds	r0, r0, r3
 800bcbe:	4770      	bx	lr

0800bcc0 <_init>:
 800bcc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcc2:	46c0      	nop			; (mov r8, r8)
 800bcc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcc6:	bc08      	pop	{r3}
 800bcc8:	469e      	mov	lr, r3
 800bcca:	4770      	bx	lr

0800bccc <_fini>:
 800bccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bcce:	46c0      	nop			; (mov r8, r8)
 800bcd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bcd2:	bc08      	pop	{r3}
 800bcd4:	469e      	mov	lr, r3
 800bcd6:	4770      	bx	lr
