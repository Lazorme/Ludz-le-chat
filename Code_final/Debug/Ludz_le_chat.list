
Ludz_le_chat.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af68  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  0800b028  0800b028  0001b028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b2c4  0800b2c4  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  0800b2c4  0800b2c4  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800b2c4  0800b2c4  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b2c4  0800b2c4  0001b2c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b2c8  0800b2c8  0001b2c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800b2cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008608  2000006c  0800b338  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008674  0800b338  00028674  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c3b2  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004804  00000000  00000000  0003c489  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a48  00000000  00000000  00040c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001458  00000000  00000000  000426d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bab6  00000000  00000000  00043b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00020a3d  00000000  00000000  0005f5e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a569d  00000000  00000000  00080023  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006764  00000000  00000000  001256c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  0012be24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800b010 	.word	0x0800b010

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	0800b010 	.word	0x0800b010

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_cdrcmple>:
 8000408:	4684      	mov	ip, r0
 800040a:	0010      	movs	r0, r2
 800040c:	4662      	mov	r2, ip
 800040e:	468c      	mov	ip, r1
 8000410:	0019      	movs	r1, r3
 8000412:	4663      	mov	r3, ip
 8000414:	e000      	b.n	8000418 <__aeabi_cdcmpeq>
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdcmpeq>:
 8000418:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800041a:	f000 f8db 	bl	80005d4 <__ledf2>
 800041e:	2800      	cmp	r0, #0
 8000420:	d401      	bmi.n	8000426 <__aeabi_cdcmpeq+0xe>
 8000422:	2100      	movs	r1, #0
 8000424:	42c8      	cmn	r0, r1
 8000426:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000428 <__aeabi_dcmpeq>:
 8000428:	b510      	push	{r4, lr}
 800042a:	f000 f82b 	bl	8000484 <__eqdf2>
 800042e:	4240      	negs	r0, r0
 8000430:	3001      	adds	r0, #1
 8000432:	bd10      	pop	{r4, pc}

08000434 <__aeabi_dcmplt>:
 8000434:	b510      	push	{r4, lr}
 8000436:	f000 f8cd 	bl	80005d4 <__ledf2>
 800043a:	2800      	cmp	r0, #0
 800043c:	db01      	blt.n	8000442 <__aeabi_dcmplt+0xe>
 800043e:	2000      	movs	r0, #0
 8000440:	bd10      	pop	{r4, pc}
 8000442:	2001      	movs	r0, #1
 8000444:	bd10      	pop	{r4, pc}
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__aeabi_dcmple>:
 8000448:	b510      	push	{r4, lr}
 800044a:	f000 f8c3 	bl	80005d4 <__ledf2>
 800044e:	2800      	cmp	r0, #0
 8000450:	dd01      	ble.n	8000456 <__aeabi_dcmple+0xe>
 8000452:	2000      	movs	r0, #0
 8000454:	bd10      	pop	{r4, pc}
 8000456:	2001      	movs	r0, #1
 8000458:	bd10      	pop	{r4, pc}
 800045a:	46c0      	nop			; (mov r8, r8)

0800045c <__aeabi_dcmpgt>:
 800045c:	b510      	push	{r4, lr}
 800045e:	f000 f853 	bl	8000508 <__gedf2>
 8000462:	2800      	cmp	r0, #0
 8000464:	dc01      	bgt.n	800046a <__aeabi_dcmpgt+0xe>
 8000466:	2000      	movs	r0, #0
 8000468:	bd10      	pop	{r4, pc}
 800046a:	2001      	movs	r0, #1
 800046c:	bd10      	pop	{r4, pc}
 800046e:	46c0      	nop			; (mov r8, r8)

08000470 <__aeabi_dcmpge>:
 8000470:	b510      	push	{r4, lr}
 8000472:	f000 f849 	bl	8000508 <__gedf2>
 8000476:	2800      	cmp	r0, #0
 8000478:	da01      	bge.n	800047e <__aeabi_dcmpge+0xe>
 800047a:	2000      	movs	r0, #0
 800047c:	bd10      	pop	{r4, pc}
 800047e:	2001      	movs	r0, #1
 8000480:	bd10      	pop	{r4, pc}
 8000482:	46c0      	nop			; (mov r8, r8)

08000484 <__eqdf2>:
 8000484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000486:	464e      	mov	r6, r9
 8000488:	4645      	mov	r5, r8
 800048a:	46de      	mov	lr, fp
 800048c:	4657      	mov	r7, sl
 800048e:	4690      	mov	r8, r2
 8000490:	b5e0      	push	{r5, r6, r7, lr}
 8000492:	0017      	movs	r7, r2
 8000494:	031a      	lsls	r2, r3, #12
 8000496:	0b12      	lsrs	r2, r2, #12
 8000498:	0005      	movs	r5, r0
 800049a:	4684      	mov	ip, r0
 800049c:	4819      	ldr	r0, [pc, #100]	; (8000504 <__eqdf2+0x80>)
 800049e:	030e      	lsls	r6, r1, #12
 80004a0:	004c      	lsls	r4, r1, #1
 80004a2:	4691      	mov	r9, r2
 80004a4:	005a      	lsls	r2, r3, #1
 80004a6:	0fdb      	lsrs	r3, r3, #31
 80004a8:	469b      	mov	fp, r3
 80004aa:	0b36      	lsrs	r6, r6, #12
 80004ac:	0d64      	lsrs	r4, r4, #21
 80004ae:	0fc9      	lsrs	r1, r1, #31
 80004b0:	0d52      	lsrs	r2, r2, #21
 80004b2:	4284      	cmp	r4, r0
 80004b4:	d019      	beq.n	80004ea <__eqdf2+0x66>
 80004b6:	4282      	cmp	r2, r0
 80004b8:	d010      	beq.n	80004dc <__eqdf2+0x58>
 80004ba:	2001      	movs	r0, #1
 80004bc:	4294      	cmp	r4, r2
 80004be:	d10e      	bne.n	80004de <__eqdf2+0x5a>
 80004c0:	454e      	cmp	r6, r9
 80004c2:	d10c      	bne.n	80004de <__eqdf2+0x5a>
 80004c4:	2001      	movs	r0, #1
 80004c6:	45c4      	cmp	ip, r8
 80004c8:	d109      	bne.n	80004de <__eqdf2+0x5a>
 80004ca:	4559      	cmp	r1, fp
 80004cc:	d017      	beq.n	80004fe <__eqdf2+0x7a>
 80004ce:	2c00      	cmp	r4, #0
 80004d0:	d105      	bne.n	80004de <__eqdf2+0x5a>
 80004d2:	0030      	movs	r0, r6
 80004d4:	4328      	orrs	r0, r5
 80004d6:	1e43      	subs	r3, r0, #1
 80004d8:	4198      	sbcs	r0, r3
 80004da:	e000      	b.n	80004de <__eqdf2+0x5a>
 80004dc:	2001      	movs	r0, #1
 80004de:	bcf0      	pop	{r4, r5, r6, r7}
 80004e0:	46bb      	mov	fp, r7
 80004e2:	46b2      	mov	sl, r6
 80004e4:	46a9      	mov	r9, r5
 80004e6:	46a0      	mov	r8, r4
 80004e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004ea:	0033      	movs	r3, r6
 80004ec:	2001      	movs	r0, #1
 80004ee:	432b      	orrs	r3, r5
 80004f0:	d1f5      	bne.n	80004de <__eqdf2+0x5a>
 80004f2:	42a2      	cmp	r2, r4
 80004f4:	d1f3      	bne.n	80004de <__eqdf2+0x5a>
 80004f6:	464b      	mov	r3, r9
 80004f8:	433b      	orrs	r3, r7
 80004fa:	d1f0      	bne.n	80004de <__eqdf2+0x5a>
 80004fc:	e7e2      	b.n	80004c4 <__eqdf2+0x40>
 80004fe:	2000      	movs	r0, #0
 8000500:	e7ed      	b.n	80004de <__eqdf2+0x5a>
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	000007ff 	.word	0x000007ff

08000508 <__gedf2>:
 8000508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800050a:	4647      	mov	r7, r8
 800050c:	46ce      	mov	lr, r9
 800050e:	0004      	movs	r4, r0
 8000510:	0018      	movs	r0, r3
 8000512:	0016      	movs	r6, r2
 8000514:	031b      	lsls	r3, r3, #12
 8000516:	0b1b      	lsrs	r3, r3, #12
 8000518:	4d2d      	ldr	r5, [pc, #180]	; (80005d0 <__gedf2+0xc8>)
 800051a:	004a      	lsls	r2, r1, #1
 800051c:	4699      	mov	r9, r3
 800051e:	b580      	push	{r7, lr}
 8000520:	0043      	lsls	r3, r0, #1
 8000522:	030f      	lsls	r7, r1, #12
 8000524:	46a4      	mov	ip, r4
 8000526:	46b0      	mov	r8, r6
 8000528:	0b3f      	lsrs	r7, r7, #12
 800052a:	0d52      	lsrs	r2, r2, #21
 800052c:	0fc9      	lsrs	r1, r1, #31
 800052e:	0d5b      	lsrs	r3, r3, #21
 8000530:	0fc0      	lsrs	r0, r0, #31
 8000532:	42aa      	cmp	r2, r5
 8000534:	d021      	beq.n	800057a <__gedf2+0x72>
 8000536:	42ab      	cmp	r3, r5
 8000538:	d013      	beq.n	8000562 <__gedf2+0x5a>
 800053a:	2a00      	cmp	r2, #0
 800053c:	d122      	bne.n	8000584 <__gedf2+0x7c>
 800053e:	433c      	orrs	r4, r7
 8000540:	2b00      	cmp	r3, #0
 8000542:	d102      	bne.n	800054a <__gedf2+0x42>
 8000544:	464d      	mov	r5, r9
 8000546:	432e      	orrs	r6, r5
 8000548:	d022      	beq.n	8000590 <__gedf2+0x88>
 800054a:	2c00      	cmp	r4, #0
 800054c:	d010      	beq.n	8000570 <__gedf2+0x68>
 800054e:	4281      	cmp	r1, r0
 8000550:	d022      	beq.n	8000598 <__gedf2+0x90>
 8000552:	2002      	movs	r0, #2
 8000554:	3901      	subs	r1, #1
 8000556:	4008      	ands	r0, r1
 8000558:	3801      	subs	r0, #1
 800055a:	bcc0      	pop	{r6, r7}
 800055c:	46b9      	mov	r9, r7
 800055e:	46b0      	mov	r8, r6
 8000560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000562:	464d      	mov	r5, r9
 8000564:	432e      	orrs	r6, r5
 8000566:	d129      	bne.n	80005bc <__gedf2+0xb4>
 8000568:	2a00      	cmp	r2, #0
 800056a:	d1f0      	bne.n	800054e <__gedf2+0x46>
 800056c:	433c      	orrs	r4, r7
 800056e:	d1ee      	bne.n	800054e <__gedf2+0x46>
 8000570:	2800      	cmp	r0, #0
 8000572:	d1f2      	bne.n	800055a <__gedf2+0x52>
 8000574:	2001      	movs	r0, #1
 8000576:	4240      	negs	r0, r0
 8000578:	e7ef      	b.n	800055a <__gedf2+0x52>
 800057a:	003d      	movs	r5, r7
 800057c:	4325      	orrs	r5, r4
 800057e:	d11d      	bne.n	80005bc <__gedf2+0xb4>
 8000580:	4293      	cmp	r3, r2
 8000582:	d0ee      	beq.n	8000562 <__gedf2+0x5a>
 8000584:	2b00      	cmp	r3, #0
 8000586:	d1e2      	bne.n	800054e <__gedf2+0x46>
 8000588:	464c      	mov	r4, r9
 800058a:	4326      	orrs	r6, r4
 800058c:	d1df      	bne.n	800054e <__gedf2+0x46>
 800058e:	e7e0      	b.n	8000552 <__gedf2+0x4a>
 8000590:	2000      	movs	r0, #0
 8000592:	2c00      	cmp	r4, #0
 8000594:	d0e1      	beq.n	800055a <__gedf2+0x52>
 8000596:	e7dc      	b.n	8000552 <__gedf2+0x4a>
 8000598:	429a      	cmp	r2, r3
 800059a:	dc0a      	bgt.n	80005b2 <__gedf2+0xaa>
 800059c:	dbe8      	blt.n	8000570 <__gedf2+0x68>
 800059e:	454f      	cmp	r7, r9
 80005a0:	d8d7      	bhi.n	8000552 <__gedf2+0x4a>
 80005a2:	d00e      	beq.n	80005c2 <__gedf2+0xba>
 80005a4:	2000      	movs	r0, #0
 80005a6:	454f      	cmp	r7, r9
 80005a8:	d2d7      	bcs.n	800055a <__gedf2+0x52>
 80005aa:	2900      	cmp	r1, #0
 80005ac:	d0e2      	beq.n	8000574 <__gedf2+0x6c>
 80005ae:	0008      	movs	r0, r1
 80005b0:	e7d3      	b.n	800055a <__gedf2+0x52>
 80005b2:	4243      	negs	r3, r0
 80005b4:	4158      	adcs	r0, r3
 80005b6:	0040      	lsls	r0, r0, #1
 80005b8:	3801      	subs	r0, #1
 80005ba:	e7ce      	b.n	800055a <__gedf2+0x52>
 80005bc:	2002      	movs	r0, #2
 80005be:	4240      	negs	r0, r0
 80005c0:	e7cb      	b.n	800055a <__gedf2+0x52>
 80005c2:	45c4      	cmp	ip, r8
 80005c4:	d8c5      	bhi.n	8000552 <__gedf2+0x4a>
 80005c6:	2000      	movs	r0, #0
 80005c8:	45c4      	cmp	ip, r8
 80005ca:	d2c6      	bcs.n	800055a <__gedf2+0x52>
 80005cc:	e7ed      	b.n	80005aa <__gedf2+0xa2>
 80005ce:	46c0      	nop			; (mov r8, r8)
 80005d0:	000007ff 	.word	0x000007ff

080005d4 <__ledf2>:
 80005d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005d6:	4647      	mov	r7, r8
 80005d8:	46ce      	mov	lr, r9
 80005da:	0004      	movs	r4, r0
 80005dc:	0018      	movs	r0, r3
 80005de:	0016      	movs	r6, r2
 80005e0:	031b      	lsls	r3, r3, #12
 80005e2:	0b1b      	lsrs	r3, r3, #12
 80005e4:	4d2c      	ldr	r5, [pc, #176]	; (8000698 <__ledf2+0xc4>)
 80005e6:	004a      	lsls	r2, r1, #1
 80005e8:	4699      	mov	r9, r3
 80005ea:	b580      	push	{r7, lr}
 80005ec:	0043      	lsls	r3, r0, #1
 80005ee:	030f      	lsls	r7, r1, #12
 80005f0:	46a4      	mov	ip, r4
 80005f2:	46b0      	mov	r8, r6
 80005f4:	0b3f      	lsrs	r7, r7, #12
 80005f6:	0d52      	lsrs	r2, r2, #21
 80005f8:	0fc9      	lsrs	r1, r1, #31
 80005fa:	0d5b      	lsrs	r3, r3, #21
 80005fc:	0fc0      	lsrs	r0, r0, #31
 80005fe:	42aa      	cmp	r2, r5
 8000600:	d00d      	beq.n	800061e <__ledf2+0x4a>
 8000602:	42ab      	cmp	r3, r5
 8000604:	d010      	beq.n	8000628 <__ledf2+0x54>
 8000606:	2a00      	cmp	r2, #0
 8000608:	d127      	bne.n	800065a <__ledf2+0x86>
 800060a:	433c      	orrs	r4, r7
 800060c:	2b00      	cmp	r3, #0
 800060e:	d111      	bne.n	8000634 <__ledf2+0x60>
 8000610:	464d      	mov	r5, r9
 8000612:	432e      	orrs	r6, r5
 8000614:	d10e      	bne.n	8000634 <__ledf2+0x60>
 8000616:	2000      	movs	r0, #0
 8000618:	2c00      	cmp	r4, #0
 800061a:	d015      	beq.n	8000648 <__ledf2+0x74>
 800061c:	e00e      	b.n	800063c <__ledf2+0x68>
 800061e:	003d      	movs	r5, r7
 8000620:	4325      	orrs	r5, r4
 8000622:	d110      	bne.n	8000646 <__ledf2+0x72>
 8000624:	4293      	cmp	r3, r2
 8000626:	d118      	bne.n	800065a <__ledf2+0x86>
 8000628:	464d      	mov	r5, r9
 800062a:	432e      	orrs	r6, r5
 800062c:	d10b      	bne.n	8000646 <__ledf2+0x72>
 800062e:	2a00      	cmp	r2, #0
 8000630:	d102      	bne.n	8000638 <__ledf2+0x64>
 8000632:	433c      	orrs	r4, r7
 8000634:	2c00      	cmp	r4, #0
 8000636:	d00b      	beq.n	8000650 <__ledf2+0x7c>
 8000638:	4281      	cmp	r1, r0
 800063a:	d014      	beq.n	8000666 <__ledf2+0x92>
 800063c:	2002      	movs	r0, #2
 800063e:	3901      	subs	r1, #1
 8000640:	4008      	ands	r0, r1
 8000642:	3801      	subs	r0, #1
 8000644:	e000      	b.n	8000648 <__ledf2+0x74>
 8000646:	2002      	movs	r0, #2
 8000648:	bcc0      	pop	{r6, r7}
 800064a:	46b9      	mov	r9, r7
 800064c:	46b0      	mov	r8, r6
 800064e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000650:	2800      	cmp	r0, #0
 8000652:	d1f9      	bne.n	8000648 <__ledf2+0x74>
 8000654:	2001      	movs	r0, #1
 8000656:	4240      	negs	r0, r0
 8000658:	e7f6      	b.n	8000648 <__ledf2+0x74>
 800065a:	2b00      	cmp	r3, #0
 800065c:	d1ec      	bne.n	8000638 <__ledf2+0x64>
 800065e:	464c      	mov	r4, r9
 8000660:	4326      	orrs	r6, r4
 8000662:	d1e9      	bne.n	8000638 <__ledf2+0x64>
 8000664:	e7ea      	b.n	800063c <__ledf2+0x68>
 8000666:	429a      	cmp	r2, r3
 8000668:	dd04      	ble.n	8000674 <__ledf2+0xa0>
 800066a:	4243      	negs	r3, r0
 800066c:	4158      	adcs	r0, r3
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	3801      	subs	r0, #1
 8000672:	e7e9      	b.n	8000648 <__ledf2+0x74>
 8000674:	429a      	cmp	r2, r3
 8000676:	dbeb      	blt.n	8000650 <__ledf2+0x7c>
 8000678:	454f      	cmp	r7, r9
 800067a:	d8df      	bhi.n	800063c <__ledf2+0x68>
 800067c:	d006      	beq.n	800068c <__ledf2+0xb8>
 800067e:	2000      	movs	r0, #0
 8000680:	454f      	cmp	r7, r9
 8000682:	d2e1      	bcs.n	8000648 <__ledf2+0x74>
 8000684:	2900      	cmp	r1, #0
 8000686:	d0e5      	beq.n	8000654 <__ledf2+0x80>
 8000688:	0008      	movs	r0, r1
 800068a:	e7dd      	b.n	8000648 <__ledf2+0x74>
 800068c:	45c4      	cmp	ip, r8
 800068e:	d8d5      	bhi.n	800063c <__ledf2+0x68>
 8000690:	2000      	movs	r0, #0
 8000692:	45c4      	cmp	ip, r8
 8000694:	d2d8      	bcs.n	8000648 <__ledf2+0x74>
 8000696:	e7f5      	b.n	8000684 <__ledf2+0xb0>
 8000698:	000007ff 	.word	0x000007ff

0800069c <__aeabi_d2iz>:
 800069c:	000a      	movs	r2, r1
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	4c13      	ldr	r4, [pc, #76]	; (80006f0 <__aeabi_d2iz+0x54>)
 80006a2:	0053      	lsls	r3, r2, #1
 80006a4:	0309      	lsls	r1, r1, #12
 80006a6:	0005      	movs	r5, r0
 80006a8:	0b09      	lsrs	r1, r1, #12
 80006aa:	2000      	movs	r0, #0
 80006ac:	0d5b      	lsrs	r3, r3, #21
 80006ae:	0fd2      	lsrs	r2, r2, #31
 80006b0:	42a3      	cmp	r3, r4
 80006b2:	dd04      	ble.n	80006be <__aeabi_d2iz+0x22>
 80006b4:	480f      	ldr	r0, [pc, #60]	; (80006f4 <__aeabi_d2iz+0x58>)
 80006b6:	4283      	cmp	r3, r0
 80006b8:	dd02      	ble.n	80006c0 <__aeabi_d2iz+0x24>
 80006ba:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <__aeabi_d2iz+0x5c>)
 80006bc:	18d0      	adds	r0, r2, r3
 80006be:	bd30      	pop	{r4, r5, pc}
 80006c0:	2080      	movs	r0, #128	; 0x80
 80006c2:	0340      	lsls	r0, r0, #13
 80006c4:	4301      	orrs	r1, r0
 80006c6:	480d      	ldr	r0, [pc, #52]	; (80006fc <__aeabi_d2iz+0x60>)
 80006c8:	1ac0      	subs	r0, r0, r3
 80006ca:	281f      	cmp	r0, #31
 80006cc:	dd08      	ble.n	80006e0 <__aeabi_d2iz+0x44>
 80006ce:	480c      	ldr	r0, [pc, #48]	; (8000700 <__aeabi_d2iz+0x64>)
 80006d0:	1ac3      	subs	r3, r0, r3
 80006d2:	40d9      	lsrs	r1, r3
 80006d4:	000b      	movs	r3, r1
 80006d6:	4258      	negs	r0, r3
 80006d8:	2a00      	cmp	r2, #0
 80006da:	d1f0      	bne.n	80006be <__aeabi_d2iz+0x22>
 80006dc:	0018      	movs	r0, r3
 80006de:	e7ee      	b.n	80006be <__aeabi_d2iz+0x22>
 80006e0:	4c08      	ldr	r4, [pc, #32]	; (8000704 <__aeabi_d2iz+0x68>)
 80006e2:	40c5      	lsrs	r5, r0
 80006e4:	46a4      	mov	ip, r4
 80006e6:	4463      	add	r3, ip
 80006e8:	4099      	lsls	r1, r3
 80006ea:	000b      	movs	r3, r1
 80006ec:	432b      	orrs	r3, r5
 80006ee:	e7f2      	b.n	80006d6 <__aeabi_d2iz+0x3a>
 80006f0:	000003fe 	.word	0x000003fe
 80006f4:	0000041d 	.word	0x0000041d
 80006f8:	7fffffff 	.word	0x7fffffff
 80006fc:	00000433 	.word	0x00000433
 8000700:	00000413 	.word	0x00000413
 8000704:	fffffbed 	.word	0xfffffbed

08000708 <__aeabi_i2d>:
 8000708:	b570      	push	{r4, r5, r6, lr}
 800070a:	2800      	cmp	r0, #0
 800070c:	d016      	beq.n	800073c <__aeabi_i2d+0x34>
 800070e:	17c3      	asrs	r3, r0, #31
 8000710:	18c5      	adds	r5, r0, r3
 8000712:	405d      	eors	r5, r3
 8000714:	0fc4      	lsrs	r4, r0, #31
 8000716:	0028      	movs	r0, r5
 8000718:	f000 f826 	bl	8000768 <__clzsi2>
 800071c:	4b11      	ldr	r3, [pc, #68]	; (8000764 <__aeabi_i2d+0x5c>)
 800071e:	1a1b      	subs	r3, r3, r0
 8000720:	280a      	cmp	r0, #10
 8000722:	dc16      	bgt.n	8000752 <__aeabi_i2d+0x4a>
 8000724:	0002      	movs	r2, r0
 8000726:	002e      	movs	r6, r5
 8000728:	3215      	adds	r2, #21
 800072a:	4096      	lsls	r6, r2
 800072c:	220b      	movs	r2, #11
 800072e:	1a12      	subs	r2, r2, r0
 8000730:	40d5      	lsrs	r5, r2
 8000732:	055b      	lsls	r3, r3, #21
 8000734:	032d      	lsls	r5, r5, #12
 8000736:	0b2d      	lsrs	r5, r5, #12
 8000738:	0d5b      	lsrs	r3, r3, #21
 800073a:	e003      	b.n	8000744 <__aeabi_i2d+0x3c>
 800073c:	2400      	movs	r4, #0
 800073e:	2300      	movs	r3, #0
 8000740:	2500      	movs	r5, #0
 8000742:	2600      	movs	r6, #0
 8000744:	051b      	lsls	r3, r3, #20
 8000746:	432b      	orrs	r3, r5
 8000748:	07e4      	lsls	r4, r4, #31
 800074a:	4323      	orrs	r3, r4
 800074c:	0030      	movs	r0, r6
 800074e:	0019      	movs	r1, r3
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	380b      	subs	r0, #11
 8000754:	4085      	lsls	r5, r0
 8000756:	055b      	lsls	r3, r3, #21
 8000758:	032d      	lsls	r5, r5, #12
 800075a:	2600      	movs	r6, #0
 800075c:	0b2d      	lsrs	r5, r5, #12
 800075e:	0d5b      	lsrs	r3, r3, #21
 8000760:	e7f0      	b.n	8000744 <__aeabi_i2d+0x3c>
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	0000041e 	.word	0x0000041e

08000768 <__clzsi2>:
 8000768:	211c      	movs	r1, #28
 800076a:	2301      	movs	r3, #1
 800076c:	041b      	lsls	r3, r3, #16
 800076e:	4298      	cmp	r0, r3
 8000770:	d301      	bcc.n	8000776 <__clzsi2+0xe>
 8000772:	0c00      	lsrs	r0, r0, #16
 8000774:	3910      	subs	r1, #16
 8000776:	0a1b      	lsrs	r3, r3, #8
 8000778:	4298      	cmp	r0, r3
 800077a:	d301      	bcc.n	8000780 <__clzsi2+0x18>
 800077c:	0a00      	lsrs	r0, r0, #8
 800077e:	3908      	subs	r1, #8
 8000780:	091b      	lsrs	r3, r3, #4
 8000782:	4298      	cmp	r0, r3
 8000784:	d301      	bcc.n	800078a <__clzsi2+0x22>
 8000786:	0900      	lsrs	r0, r0, #4
 8000788:	3904      	subs	r1, #4
 800078a:	a202      	add	r2, pc, #8	; (adr r2, 8000794 <__clzsi2+0x2c>)
 800078c:	5c10      	ldrb	r0, [r2, r0]
 800078e:	1840      	adds	r0, r0, r1
 8000790:	4770      	bx	lr
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	02020304 	.word	0x02020304
 8000798:	01010101 	.word	0x01010101
	...

080007a4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b084      	sub	sp, #16
 80007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80007aa:	1d3b      	adds	r3, r7, #4
 80007ac:	0018      	movs	r0, r3
 80007ae:	230c      	movs	r3, #12
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f009 fcd4 	bl	800a160 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80007b8:	4b34      	ldr	r3, [pc, #208]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ba:	4a35      	ldr	r2, [pc, #212]	; (8000890 <MX_ADC1_Init+0xec>)
 80007bc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80007be:	4b33      	ldr	r3, [pc, #204]	; (800088c <MX_ADC1_Init+0xe8>)
 80007c0:	2280      	movs	r2, #128	; 0x80
 80007c2:	05d2      	lsls	r2, r2, #23
 80007c4:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80007c6:	4b31      	ldr	r3, [pc, #196]	; (800088c <MX_ADC1_Init+0xe8>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80007d2:	4b2e      	ldr	r3, [pc, #184]	; (800088c <MX_ADC1_Init+0xe8>)
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	0392      	lsls	r2, r2, #14
 80007d8:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007da:	4b2c      	ldr	r3, [pc, #176]	; (800088c <MX_ADC1_Init+0xe8>)
 80007dc:	2204      	movs	r2, #4
 80007de:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80007e0:	4b2a      	ldr	r3, [pc, #168]	; (800088c <MX_ADC1_Init+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80007e6:	4b29      	ldr	r3, [pc, #164]	; (800088c <MX_ADC1_Init+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007ec:	4b27      	ldr	r3, [pc, #156]	; (800088c <MX_ADC1_Init+0xe8>)
 80007ee:	2201      	movs	r2, #1
 80007f0:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 2;
 80007f2:	4b26      	ldr	r3, [pc, #152]	; (800088c <MX_ADC1_Init+0xe8>)
 80007f4:	2202      	movs	r2, #2
 80007f6:	61da      	str	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007f8:	4b24      	ldr	r3, [pc, #144]	; (800088c <MX_ADC1_Init+0xe8>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007fe:	4b23      	ldr	r3, [pc, #140]	; (800088c <MX_ADC1_Init+0xe8>)
 8000800:	2200      	movs	r2, #0
 8000802:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000804:	4b21      	ldr	r3, [pc, #132]	; (800088c <MX_ADC1_Init+0xe8>)
 8000806:	222c      	movs	r2, #44	; 0x2c
 8000808:	2100      	movs	r1, #0
 800080a:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800080c:	4b1f      	ldr	r3, [pc, #124]	; (800088c <MX_ADC1_Init+0xe8>)
 800080e:	2200      	movs	r2, #0
 8000810:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_79CYCLES_5;
 8000812:	4b1e      	ldr	r3, [pc, #120]	; (800088c <MX_ADC1_Init+0xe8>)
 8000814:	2206      	movs	r2, #6
 8000816:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_79CYCLES_5;
 8000818:	4b1c      	ldr	r3, [pc, #112]	; (800088c <MX_ADC1_Init+0xe8>)
 800081a:	2206      	movs	r2, #6
 800081c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 800081e:	4b1b      	ldr	r3, [pc, #108]	; (800088c <MX_ADC1_Init+0xe8>)
 8000820:	223c      	movs	r2, #60	; 0x3c
 8000822:	2100      	movs	r1, #0
 8000824:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000826:	4b19      	ldr	r3, [pc, #100]	; (800088c <MX_ADC1_Init+0xe8>)
 8000828:	2200      	movs	r2, #0
 800082a:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800082c:	4b17      	ldr	r3, [pc, #92]	; (800088c <MX_ADC1_Init+0xe8>)
 800082e:	0018      	movs	r0, r3
 8000830:	f001 ffec 	bl	800280c <HAL_ADC_Init>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000838:	f000 fdc4 	bl	80013c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800083c:	1d3b      	adds	r3, r7, #4
 800083e:	2201      	movs	r2, #1
 8000840:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000848:	1d3b      	adds	r3, r7, #4
 800084a:	2200      	movs	r2, #0
 800084c:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800084e:	1d3a      	adds	r2, r7, #4
 8000850:	4b0e      	ldr	r3, [pc, #56]	; (800088c <MX_ADC1_Init+0xe8>)
 8000852:	0011      	movs	r1, r2
 8000854:	0018      	movs	r0, r3
 8000856:	f002 f981 	bl	8002b5c <HAL_ADC_ConfigChannel>
 800085a:	1e03      	subs	r3, r0, #0
 800085c:	d001      	beq.n	8000862 <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 800085e:	f000 fdb1 	bl	80013c4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000862:	1d3b      	adds	r3, r7, #4
 8000864:	4a0b      	ldr	r2, [pc, #44]	; (8000894 <MX_ADC1_Init+0xf0>)
 8000866:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000868:	1d3b      	adds	r3, r7, #4
 800086a:	2204      	movs	r2, #4
 800086c:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800086e:	1d3a      	adds	r2, r7, #4
 8000870:	4b06      	ldr	r3, [pc, #24]	; (800088c <MX_ADC1_Init+0xe8>)
 8000872:	0011      	movs	r1, r2
 8000874:	0018      	movs	r0, r3
 8000876:	f002 f971 	bl	8002b5c <HAL_ADC_ConfigChannel>
 800087a:	1e03      	subs	r3, r0, #0
 800087c:	d001      	beq.n	8000882 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800087e:	f000 fda1 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000882:	46c0      	nop			; (mov r8, r8)
 8000884:	46bd      	mov	sp, r7
 8000886:	b004      	add	sp, #16
 8000888:	bd80      	pop	{r7, pc}
 800088a:	46c0      	nop			; (mov r8, r8)
 800088c:	20000088 	.word	0x20000088
 8000890:	40012400 	.word	0x40012400
 8000894:	04000002 	.word	0x04000002

08000898 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000898:	b590      	push	{r4, r7, lr}
 800089a:	b08b      	sub	sp, #44	; 0x2c
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a0:	2414      	movs	r4, #20
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	2314      	movs	r3, #20
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f009 fc58 	bl	800a160 <memset>
  if(adcHandle->Instance==ADC1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a2d      	ldr	r2, [pc, #180]	; (800096c <HAL_ADC_MspInit+0xd4>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d154      	bne.n	8000964 <HAL_ADC_MspInit+0xcc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008ba:	4b2d      	ldr	r3, [pc, #180]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008be:	4b2c      	ldr	r3, [pc, #176]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0349      	lsls	r1, r1, #13
 80008c4:	430a      	orrs	r2, r1
 80008c6:	641a      	str	r2, [r3, #64]	; 0x40
 80008c8:	4b29      	ldr	r3, [pc, #164]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	035b      	lsls	r3, r3, #13
 80008d0:	4013      	ands	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
 80008d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008d6:	4b26      	ldr	r3, [pc, #152]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008da:	4b25      	ldr	r3, [pc, #148]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008dc:	2101      	movs	r1, #1
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
 80008e2:	4b23      	ldr	r3, [pc, #140]	; (8000970 <HAL_ADC_MspInit+0xd8>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e6:	2201      	movs	r2, #1
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = ADC_Shunt1_Pin|ADC_Shunt2_Pin;
 80008ee:	193b      	adds	r3, r7, r4
 80008f0:	2203      	movs	r2, #3
 80008f2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008f4:	193b      	adds	r3, r7, r4
 80008f6:	2203      	movs	r2, #3
 80008f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	193b      	adds	r3, r7, r4
 80008fc:	2200      	movs	r2, #0
 80008fe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000900:	193a      	adds	r2, r7, r4
 8000902:	23a0      	movs	r3, #160	; 0xa0
 8000904:	05db      	lsls	r3, r3, #23
 8000906:	0011      	movs	r1, r2
 8000908:	0018      	movs	r0, r3
 800090a:	f002 fdff 	bl	800350c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 800090e:	4b19      	ldr	r3, [pc, #100]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000910:	4a19      	ldr	r2, [pc, #100]	; (8000978 <HAL_ADC_MspInit+0xe0>)
 8000912:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000914:	4b17      	ldr	r3, [pc, #92]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000916:	2205      	movs	r2, #5
 8000918:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800091a:	4b16      	ldr	r3, [pc, #88]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800091c:	2200      	movs	r2, #0
 800091e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000920:	4b14      	ldr	r3, [pc, #80]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000922:	2200      	movs	r2, #0
 8000924:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000926:	4b13      	ldr	r3, [pc, #76]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800092c:	4b11      	ldr	r3, [pc, #68]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800092e:	2280      	movs	r2, #128	; 0x80
 8000930:	0052      	lsls	r2, r2, #1
 8000932:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000934:	4b0f      	ldr	r3, [pc, #60]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000936:	2280      	movs	r2, #128	; 0x80
 8000938:	00d2      	lsls	r2, r2, #3
 800093a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800093c:	4b0d      	ldr	r3, [pc, #52]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000944:	2200      	movs	r2, #0
 8000946:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000948:	4b0a      	ldr	r3, [pc, #40]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800094a:	0018      	movs	r0, r3
 800094c:	f002 fb8c 	bl	8003068 <HAL_DMA_Init>
 8000950:	1e03      	subs	r3, r0, #0
 8000952:	d001      	beq.n	8000958 <HAL_ADC_MspInit+0xc0>
    {
      Error_Handler();
 8000954:	f000 fd36 	bl	80013c4 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4a06      	ldr	r2, [pc, #24]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 800095c:	651a      	str	r2, [r3, #80]	; 0x50
 800095e:	4b05      	ldr	r3, [pc, #20]	; (8000974 <HAL_ADC_MspInit+0xdc>)
 8000960:	687a      	ldr	r2, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000964:	46c0      	nop			; (mov r8, r8)
 8000966:	46bd      	mov	sp, r7
 8000968:	b00b      	add	sp, #44	; 0x2c
 800096a:	bd90      	pop	{r4, r7, pc}
 800096c:	40012400 	.word	0x40012400
 8000970:	40021000 	.word	0x40021000
 8000974:	200000ec 	.word	0x200000ec
 8000978:	40020008 	.word	0x40020008

0800097c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800097c:	b590      	push	{r4, r7, lr}
 800097e:	b087      	sub	sp, #28
 8000980:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4a08      	ldr	r2, [pc, #32]	; (80009a8 <MX_FREERTOS_Init+0x2c>)
 8000986:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000988:	c313      	stmia	r3!, {r0, r1, r4}
 800098a:	ca03      	ldmia	r2!, {r0, r1}
 800098c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800098e:	1d3b      	adds	r3, r7, #4
 8000990:	2100      	movs	r1, #0
 8000992:	0018      	movs	r0, r3
 8000994:	f007 f94f 	bl	8007c36 <osThreadCreate>
 8000998:	0002      	movs	r2, r0
 800099a:	4b04      	ldr	r3, [pc, #16]	; (80009ac <MX_FREERTOS_Init+0x30>)
 800099c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b007      	add	sp, #28
 80009a4:	bd90      	pop	{r4, r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	0800b034 	.word	0x0800b034
 80009ac:	20000148 	.word	0x20000148

080009b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80009b8:	2001      	movs	r0, #1
 80009ba:	f007 f964 	bl	8007c86 <osDelay>
 80009be:	e7fb      	b.n	80009b8 <StartDefaultTask+0x8>

080009c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009c6:	4b10      	ldr	r3, [pc, #64]	; (8000a08 <MX_DMA_Init+0x48>)
 80009c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80009ca:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <MX_DMA_Init+0x48>)
 80009cc:	2101      	movs	r1, #1
 80009ce:	430a      	orrs	r2, r1
 80009d0:	639a      	str	r2, [r3, #56]	; 0x38
 80009d2:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <MX_DMA_Init+0x48>)
 80009d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009d6:	2201      	movs	r2, #1
 80009d8:	4013      	ands	r3, r2
 80009da:	607b      	str	r3, [r7, #4]
 80009dc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 80009de:	2200      	movs	r2, #0
 80009e0:	2103      	movs	r1, #3
 80009e2:	2009      	movs	r0, #9
 80009e4:	f002 fb1a 	bl	800301c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80009e8:	2009      	movs	r0, #9
 80009ea:	f002 fb2c 	bl	8003046 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 3, 0);
 80009ee:	2200      	movs	r2, #0
 80009f0:	2103      	movs	r1, #3
 80009f2:	200a      	movs	r0, #10
 80009f4:	f002 fb12 	bl	800301c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80009f8:	200a      	movs	r0, #10
 80009fa:	f002 fb24 	bl	8003046 <HAL_NVIC_EnableIRQ>

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b002      	add	sp, #8
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40021000 	.word	0x40021000

08000a0c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	2414      	movs	r4, #20
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	0018      	movs	r0, r3
 8000a18:	2314      	movs	r3, #20
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f009 fb9f 	bl	800a160 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b75      	ldr	r3, [pc, #468]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a26:	4b74      	ldr	r3, [pc, #464]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2e:	4b72      	ldr	r3, [pc, #456]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2204      	movs	r2, #4
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b6f      	ldr	r3, [pc, #444]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b6e      	ldr	r3, [pc, #440]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b6c      	ldr	r3, [pc, #432]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b69      	ldr	r3, [pc, #420]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b68      	ldr	r3, [pc, #416]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b66      	ldr	r3, [pc, #408]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b63      	ldr	r3, [pc, #396]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b62      	ldr	r3, [pc, #392]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a70:	2102      	movs	r1, #2
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b60      	ldr	r3, [pc, #384]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b5d      	ldr	r3, [pc, #372]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b5c      	ldr	r3, [pc, #368]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a88:	2108      	movs	r1, #8
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b5a      	ldr	r3, [pc, #360]	; (8000bf8 <MX_GPIO_Init+0x1ec>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2208      	movs	r2, #8
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000a9a:	2380      	movs	r3, #128	; 0x80
 8000a9c:	00d9      	lsls	r1, r3, #3
 8000a9e:	23a0      	movs	r3, #160	; 0xa0
 8000aa0:	05db      	lsls	r3, r3, #23
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0018      	movs	r0, r3
 8000aa6:	f002 fe95 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000aaa:	4b54      	ldr	r3, [pc, #336]	; (8000bfc <MX_GPIO_Init+0x1f0>)
 8000aac:	2200      	movs	r2, #0
 8000aae:	213f      	movs	r1, #63	; 0x3f
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	f002 fe8f 	bl	80037d4 <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|Buzzer_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, DEV_EN_Pin|M_EN_Pin, GPIO_PIN_RESET);
 8000ab6:	4b52      	ldr	r3, [pc, #328]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	2118      	movs	r1, #24
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 fe89 	bl	80037d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Bouton1_Pin|Bouton2_Pin;
 8000ac2:	193b      	adds	r3, r7, r4
 8000ac4:	2209      	movs	r2, #9
 8000ac6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ac8:	193b      	adds	r3, r7, r4
 8000aca:	2288      	movs	r2, #136	; 0x88
 8000acc:	0352      	lsls	r2, r2, #13
 8000ace:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ad0:	193b      	adds	r3, r7, r4
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	4a4a      	ldr	r2, [pc, #296]	; (8000c04 <MX_GPIO_Init+0x1f8>)
 8000ada:	0019      	movs	r1, r3
 8000adc:	0010      	movs	r0, r2
 8000ade:	f002 fd15 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bouton3_Pin;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2210      	movs	r2, #16
 8000ae6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ae8:	193b      	adds	r3, r7, r4
 8000aea:	2288      	movs	r2, #136	; 0x88
 8000aec:	0352      	lsls	r2, r2, #13
 8000aee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000af0:	193b      	adds	r3, r7, r4
 8000af2:	2201      	movs	r2, #1
 8000af4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bouton3_GPIO_Port, &GPIO_InitStruct);
 8000af6:	193a      	adds	r2, r7, r4
 8000af8:	23a0      	movs	r3, #160	; 0xa0
 8000afa:	05db      	lsls	r3, r3, #23
 8000afc:	0011      	movs	r1, r2
 8000afe:	0018      	movs	r0, r3
 8000b00:	f002 fd04 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = Contact1_Pin|Contact2_Pin|Contact3_Pin|Contact4_Pin
 8000b04:	0021      	movs	r1, r4
 8000b06:	187b      	adds	r3, r7, r1
 8000b08:	4a3f      	ldr	r2, [pc, #252]	; (8000c08 <MX_GPIO_Init+0x1fc>)
 8000b0a:	601a      	str	r2, [r3, #0]
                          |Bordure2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b0c:	187b      	adds	r3, r7, r1
 8000b0e:	2288      	movs	r2, #136	; 0x88
 8000b10:	0352      	lsls	r2, r2, #13
 8000b12:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b14:	187b      	adds	r3, r7, r1
 8000b16:	2202      	movs	r2, #2
 8000b18:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b1a:	000c      	movs	r4, r1
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	4a38      	ldr	r2, [pc, #224]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000b20:	0019      	movs	r1, r3
 8000b22:	0010      	movs	r0, r2
 8000b24:	f002 fcf2 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	2280      	movs	r2, #128	; 0x80
 8000b2e:	00d2      	lsls	r2, r2, #3
 8000b30:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b32:	000c      	movs	r4, r1
 8000b34:	193b      	adds	r3, r7, r4
 8000b36:	2201      	movs	r2, #1
 8000b38:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2200      	movs	r2, #0
 8000b44:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000b46:	193a      	adds	r2, r7, r4
 8000b48:	23a0      	movs	r3, #160	; 0xa0
 8000b4a:	05db      	lsls	r3, r3, #23
 8000b4c:	0011      	movs	r1, r2
 8000b4e:	0018      	movs	r0, r3
 8000b50:	f002 fcdc 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PDPin */
  GPIO_InitStruct.Pin = LED_RED_Pin|LED_YELLOW_Pin|LED_WHITE_Pin|LED_BLUE_Pin
 8000b54:	193b      	adds	r3, r7, r4
 8000b56:	223f      	movs	r2, #63	; 0x3f
 8000b58:	601a      	str	r2, [r3, #0]
                          |LED_GREEN_Pin|Buzzer_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b5a:	193b      	adds	r3, r7, r4
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	193b      	adds	r3, r7, r4
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	193b      	adds	r3, r7, r4
 8000b68:	2200      	movs	r2, #0
 8000b6a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b6c:	193b      	adds	r3, r7, r4
 8000b6e:	4a23      	ldr	r2, [pc, #140]	; (8000bfc <MX_GPIO_Init+0x1f0>)
 8000b70:	0019      	movs	r1, r3
 8000b72:	0010      	movs	r0, r2
 8000b74:	f002 fcca 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = DEV_EN_Pin|M_EN_Pin;
 8000b78:	193b      	adds	r3, r7, r4
 8000b7a:	2218      	movs	r2, #24
 8000b7c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7e:	193b      	adds	r3, r7, r4
 8000b80:	2201      	movs	r2, #1
 8000b82:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	193b      	adds	r3, r7, r4
 8000b86:	2200      	movs	r2, #0
 8000b88:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	193b      	adds	r3, r7, r4
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b90:	193b      	adds	r3, r7, r4
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000b94:	0019      	movs	r1, r3
 8000b96:	0010      	movs	r0, r2
 8000b98:	f002 fcb8 	bl	800350c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Bordure1_Pin;
 8000b9c:	0021      	movs	r1, r4
 8000b9e:	187b      	adds	r3, r7, r1
 8000ba0:	2280      	movs	r2, #128	; 0x80
 8000ba2:	0052      	lsls	r2, r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	187b      	adds	r3, r7, r1
 8000ba8:	2288      	movs	r2, #136	; 0x88
 8000baa:	0352      	lsls	r2, r2, #13
 8000bac:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bae:	187b      	adds	r3, r7, r1
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Bordure1_GPIO_Port, &GPIO_InitStruct);
 8000bb4:	187b      	adds	r3, r7, r1
 8000bb6:	4a12      	ldr	r2, [pc, #72]	; (8000c00 <MX_GPIO_Init+0x1f4>)
 8000bb8:	0019      	movs	r1, r3
 8000bba:	0010      	movs	r0, r2
 8000bbc:	f002 fca6 	bl	800350c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_1_IRQn, 3, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2103      	movs	r1, #3
 8000bc4:	2005      	movs	r0, #5
 8000bc6:	f002 fa29 	bl	800301c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_1_IRQn);
 8000bca:	2005      	movs	r0, #5
 8000bcc:	f002 fa3b 	bl	8003046 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 3, 0);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	2006      	movs	r0, #6
 8000bd6:	f002 fa21 	bl	800301c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8000bda:	2006      	movs	r0, #6
 8000bdc:	f002 fa33 	bl	8003046 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8000be0:	2200      	movs	r2, #0
 8000be2:	2103      	movs	r1, #3
 8000be4:	2007      	movs	r0, #7
 8000be6:	f002 fa19 	bl	800301c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000bea:	2007      	movs	r0, #7
 8000bec:	f002 fa2b 	bl	8003046 <HAL_NVIC_EnableIRQ>

}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b00b      	add	sp, #44	; 0x2c
 8000bf6:	bd90      	pop	{r4, r7, pc}
 8000bf8:	40021000 	.word	0x40021000
 8000bfc:	50000c00 	.word	0x50000c00
 8000c00:	50000400 	.word	0x50000400
 8000c04:	50000800 	.word	0x50000800
 8000c08:	0000e220 	.word	0x0000e220

08000c0c <__io_putchar>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */
int __io_putchar(int chr)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000c14:	2301      	movs	r3, #1
 8000c16:	425b      	negs	r3, r3
 8000c18:	1d39      	adds	r1, r7, #4
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <__io_putchar+0x20>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f004 fe05 	bl	800582c <HAL_UART_Transmit>
	return chr;
 8000c22:	687b      	ldr	r3, [r7, #4]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b002      	add	sp, #8
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	20003434 	.word	0x20003434

08000c30 <uart_transmit>:
int uart_transmit(uint8_t *p_data, uint16_t size){
 8000c30:	b590      	push	{r4, r7, lr}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	000a      	movs	r2, r1
 8000c3a:	1cbb      	adds	r3, r7, #2
 8000c3c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart4, p_data, size, HAL_MAX_DELAY);
 8000c3e:	2301      	movs	r3, #1
 8000c40:	425c      	negs	r4, r3
 8000c42:	1cbb      	adds	r3, r7, #2
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	4804      	ldr	r0, [pc, #16]	; (8000c5c <uart_transmit+0x2c>)
 8000c4a:	0023      	movs	r3, r4
 8000c4c:	f004 fdee 	bl	800582c <HAL_UART_Transmit>
	return 0;
 8000c50:	2300      	movs	r3, #0
}
 8000c52:	0018      	movs	r0, r3
 8000c54:	46bd      	mov	sp, r7
 8000c56:	b003      	add	sp, #12
 8000c58:	bd90      	pop	{r4, r7, pc}
 8000c5a:	46c0      	nop			; (mov r8, r8)
 8000c5c:	200034c8 	.word	0x200034c8

08000c60 <uart_it_transmit>:
int uart_it_transmit(uint8_t *p_data, uint16_t size){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
 8000c68:	000a      	movs	r2, r1
 8000c6a:	1cbb      	adds	r3, r7, #2
 8000c6c:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_IT(&huart4, p_data, size);
 8000c6e:	1cbb      	adds	r3, r7, #2
 8000c70:	881a      	ldrh	r2, [r3, #0]
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <uart_it_transmit+0x28>)
 8000c76:	0018      	movs	r0, r3
 8000c78:	f004 ff56 	bl	8005b28 <HAL_UART_Transmit_IT>
	return 0;
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	200034c8 	.word	0x200034c8

08000c8c <uart_dma_transmit>:
int uart_dma_transmit(uint8_t *p_data, uint16_t size){
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	000a      	movs	r2, r1
 8000c96:	1cbb      	adds	r3, r7, #2
 8000c98:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit_DMA(&huart4, p_data, size);
 8000c9a:	1cbb      	adds	r3, r7, #2
 8000c9c:	881a      	ldrh	r2, [r3, #0]
 8000c9e:	6879      	ldr	r1, [r7, #4]
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <uart_dma_transmit+0x28>)
 8000ca2:	0018      	movs	r0, r3
 8000ca4:	f005 f840 	bl	8005d28 <HAL_UART_Transmit_DMA>
	return 0;
 8000ca8:	2300      	movs	r3, #0
}
 8000caa:	0018      	movs	r0, r3
 8000cac:	46bd      	mov	sp, r7
 8000cae:	b002      	add	sp, #8
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	46c0      	nop			; (mov r8, r8)
 8000cb4:	200034c8 	.word	0x200034c8

08000cb8 <uart_poll_receive>:
int uart_poll_receive(uint8_t *p_data, uint16_t size){
 8000cb8:	b590      	push	{r4, r7, lr}
 8000cba:	b083      	sub	sp, #12
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	000a      	movs	r2, r1
 8000cc2:	1cbb      	adds	r3, r7, #2
 8000cc4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive(&huart4, p_data, size, HAL_MAX_DELAY);
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	425c      	negs	r4, r3
 8000cca:	1cbb      	adds	r3, r7, #2
 8000ccc:	881a      	ldrh	r2, [r3, #0]
 8000cce:	6879      	ldr	r1, [r7, #4]
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <uart_poll_receive+0x2c>)
 8000cd2:	0023      	movs	r3, r4
 8000cd4:	f004 fe46 	bl	8005964 <HAL_UART_Receive>
	return 0;
 8000cd8:	2300      	movs	r3, #0
}
 8000cda:	0018      	movs	r0, r3
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	b003      	add	sp, #12
 8000ce0:	bd90      	pop	{r4, r7, pc}
 8000ce2:	46c0      	nop			; (mov r8, r8)
 8000ce4:	200034c8 	.word	0x200034c8

08000ce8 <uart_it_receive>:
int uart_it_receive(uint8_t *p_data, uint16_t size){
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	1cbb      	adds	r3, r7, #2
 8000cf4:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart4, p_data, size);
 8000cf6:	1cbb      	adds	r3, r7, #2
 8000cf8:	881a      	ldrh	r2, [r3, #0]
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	4b04      	ldr	r3, [pc, #16]	; (8000d10 <uart_it_receive+0x28>)
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f004 ffba 	bl	8005c78 <HAL_UART_Receive_IT>
	return 0;
 8000d04:	2300      	movs	r3, #0
}
 8000d06:	0018      	movs	r0, r3
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	b002      	add	sp, #8
 8000d0c:	bd80      	pop	{r7, pc}
 8000d0e:	46c0      	nop			; (mov r8, r8)
 8000d10:	200034c8 	.word	0x200034c8

08000d14 <uart_dma_receive>:
int uart_dma_receive(uint8_t *p_data, uint16_t size){
 8000d14:	b580      	push	{r7, lr}
 8000d16:	b082      	sub	sp, #8
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	000a      	movs	r2, r1
 8000d1e:	1cbb      	adds	r3, r7, #2
 8000d20:	801a      	strh	r2, [r3, #0]
	HAL_UART_Receive_DMA(&huart4, p_data, size);
 8000d22:	1cbb      	adds	r3, r7, #2
 8000d24:	881a      	ldrh	r2, [r3, #0]
 8000d26:	6879      	ldr	r1, [r7, #4]
 8000d28:	4b04      	ldr	r3, [pc, #16]	; (8000d3c <uart_dma_receive+0x28>)
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f005 f88e 	bl	8005e4c <HAL_UART_Receive_DMA>
	return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	0018      	movs	r0, r3
 8000d34:	46bd      	mov	sp, r7
 8000d36:	b002      	add	sp, #8
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	46c0      	nop			; (mov r8, r8)
 8000d3c:	200034c8 	.word	0x200034c8

08000d40 <TaskLIDAR>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void TaskLIDAR (void * pvParameters){
 8000d40:	b590      	push	{r4, r7, lr}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
	for(;;){
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8000d48:	4bd5      	ldr	r3, [pc, #852]	; (80010a0 <TaskLIDAR+0x360>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	4252      	negs	r2, r2
 8000d50:	0011      	movs	r1, r2
 8000d52:	0018      	movs	r0, r3
 8000d54:	f007 f95d 	bl	8008012 <xQueueSemaphoreTake>
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	e188      	b.n	8001070 <TaskLIDAR+0x330>
			if(i==DATA_BUFF_SIZE/2){
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	23fa      	movs	r3, #250	; 0xfa
 8000d62:	00db      	lsls	r3, r3, #3
 8000d64:	429a      	cmp	r2, r3
 8000d66:	d107      	bne.n	8000d78 <TaskLIDAR+0x38>
				xSemaphoreTake(SemClpCallBack, portMAX_DELAY);
 8000d68:	4bce      	ldr	r3, [pc, #824]	; (80010a4 <TaskLIDAR+0x364>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4252      	negs	r2, r2
 8000d70:	0011      	movs	r1, r2
 8000d72:	0018      	movs	r0, r3
 8000d74:	f007 f94d 	bl	8008012 <xQueueSemaphoreTake>
			}
			//Réponce à la commande Scan
			if(i==0){
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d14f      	bne.n	8000e1e <TaskLIDAR+0xde>
				if((h_LIDAR.data_buff[i]==0xA5) && (h_LIDAR.data_buff[i+1]==0x5A) && (h_LIDAR.data_buff[i+2]==0x05) && (h_LIDAR.data_buff[i+3]==0x00) && (h_LIDAR.data_buff[i+4]==0x00) && (h_LIDAR.data_buff[i+5]==0x40) && (h_LIDAR.data_buff[i+6]==0x81)){
 8000d7e:	4aca      	ldr	r2, [pc, #808]	; (80010a8 <TaskLIDAR+0x368>)
 8000d80:	2171      	movs	r1, #113	; 0x71
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	18d3      	adds	r3, r2, r3
 8000d86:	185b      	adds	r3, r3, r1
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	2ba5      	cmp	r3, #165	; 0xa5
 8000d8c:	d147      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000d8e:	68fb      	ldr	r3, [r7, #12]
 8000d90:	3301      	adds	r3, #1
 8000d92:	4ac5      	ldr	r2, [pc, #788]	; (80010a8 <TaskLIDAR+0x368>)
 8000d94:	2171      	movs	r1, #113	; 0x71
 8000d96:	18d3      	adds	r3, r2, r3
 8000d98:	185b      	adds	r3, r3, r1
 8000d9a:	781b      	ldrb	r3, [r3, #0]
 8000d9c:	2b5a      	cmp	r3, #90	; 0x5a
 8000d9e:	d13e      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	3302      	adds	r3, #2
 8000da4:	4ac0      	ldr	r2, [pc, #768]	; (80010a8 <TaskLIDAR+0x368>)
 8000da6:	2171      	movs	r1, #113	; 0x71
 8000da8:	18d3      	adds	r3, r2, r3
 8000daa:	185b      	adds	r3, r3, r1
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	2b05      	cmp	r3, #5
 8000db0:	d135      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	3303      	adds	r3, #3
 8000db6:	4abc      	ldr	r2, [pc, #752]	; (80010a8 <TaskLIDAR+0x368>)
 8000db8:	2171      	movs	r1, #113	; 0x71
 8000dba:	18d3      	adds	r3, r2, r3
 8000dbc:	185b      	adds	r3, r3, r1
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d12c      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	3304      	adds	r3, #4
 8000dc8:	4ab7      	ldr	r2, [pc, #732]	; (80010a8 <TaskLIDAR+0x368>)
 8000dca:	2171      	movs	r1, #113	; 0x71
 8000dcc:	18d3      	adds	r3, r2, r3
 8000dce:	185b      	adds	r3, r3, r1
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d123      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	3305      	adds	r3, #5
 8000dda:	4ab3      	ldr	r2, [pc, #716]	; (80010a8 <TaskLIDAR+0x368>)
 8000ddc:	2171      	movs	r1, #113	; 0x71
 8000dde:	18d3      	adds	r3, r2, r3
 8000de0:	185b      	adds	r3, r3, r1
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b40      	cmp	r3, #64	; 0x40
 8000de6:	d11a      	bne.n	8000e1e <TaskLIDAR+0xde>
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	3306      	adds	r3, #6
 8000dec:	4aae      	ldr	r2, [pc, #696]	; (80010a8 <TaskLIDAR+0x368>)
 8000dee:	2171      	movs	r1, #113	; 0x71
 8000df0:	18d3      	adds	r3, r2, r3
 8000df2:	185b      	adds	r3, r3, r1
 8000df4:	781b      	ldrb	r3, [r3, #0]
 8000df6:	2b81      	cmp	r3, #129	; 0x81
 8000df8:	d111      	bne.n	8000e1e <TaskLIDAR+0xde>
					printf("Scan Command Reply\r\n");
 8000dfa:	4bac      	ldr	r3, [pc, #688]	; (80010ac <TaskLIDAR+0x36c>)
 8000dfc:	0018      	movs	r0, r3
 8000dfe:	f009 f87f 	bl	8009f00 <puts>
					h_LIDAR.processing.idx=0;
 8000e02:	4ba9      	ldr	r3, [pc, #676]	; (80010a8 <TaskLIDAR+0x368>)
 8000e04:	4aaa      	ldr	r2, [pc, #680]	; (80010b0 <TaskLIDAR+0x370>)
 8000e06:	2100      	movs	r1, #0
 8000e08:	5499      	strb	r1, [r3, r2]
					i=6;
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	60fb      	str	r3, [r7, #12]
					frame_start=7;
 8000e0e:	4ba9      	ldr	r3, [pc, #676]	; (80010b4 <TaskLIDAR+0x374>)
 8000e10:	2207      	movs	r2, #7
 8000e12:	601a      	str	r2, [r3, #0]
					frame_end=frame_start+4;
 8000e14:	4ba7      	ldr	r3, [pc, #668]	; (80010b4 <TaskLIDAR+0x374>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1d1a      	adds	r2, r3, #4
 8000e1a:	4ba7      	ldr	r3, [pc, #668]	; (80010b8 <TaskLIDAR+0x378>)
 8000e1c:	601a      	str	r2, [r3, #0]
				}
			}

			if(i==frame_start){
 8000e1e:	4ba5      	ldr	r3, [pc, #660]	; (80010b4 <TaskLIDAR+0x374>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	68fa      	ldr	r2, [r7, #12]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d10a      	bne.n	8000e3e <TaskLIDAR+0xfe>
				h_LIDAR.processing.PH=h_LIDAR.data_buff[i];
 8000e28:	4a9f      	ldr	r2, [pc, #636]	; (80010a8 <TaskLIDAR+0x368>)
 8000e2a:	2171      	movs	r1, #113	; 0x71
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	185b      	adds	r3, r3, r1
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	b299      	uxth	r1, r3
 8000e36:	4b9c      	ldr	r3, [pc, #624]	; (80010a8 <TaskLIDAR+0x368>)
 8000e38:	4aa0      	ldr	r2, [pc, #640]	; (80010bc <TaskLIDAR+0x37c>)
 8000e3a:	5299      	strh	r1, [r3, r2]
 8000e3c:	e115      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+1){
 8000e3e:	4b9d      	ldr	r3, [pc, #628]	; (80010b4 <TaskLIDAR+0x374>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	3301      	adds	r3, #1
 8000e44:	68fa      	ldr	r2, [r7, #12]
 8000e46:	429a      	cmp	r2, r3
 8000e48:	d112      	bne.n	8000e70 <TaskLIDAR+0x130>
				h_LIDAR.processing.PH=h_LIDAR.processing.PH|(h_LIDAR.data_buff[i]<<8);
 8000e4a:	4b97      	ldr	r3, [pc, #604]	; (80010a8 <TaskLIDAR+0x368>)
 8000e4c:	4a9b      	ldr	r2, [pc, #620]	; (80010bc <TaskLIDAR+0x37c>)
 8000e4e:	5a9b      	ldrh	r3, [r3, r2]
 8000e50:	b21a      	sxth	r2, r3
 8000e52:	4995      	ldr	r1, [pc, #596]	; (80010a8 <TaskLIDAR+0x368>)
 8000e54:	2071      	movs	r0, #113	; 0x71
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	18cb      	adds	r3, r1, r3
 8000e5a:	181b      	adds	r3, r3, r0
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	021b      	lsls	r3, r3, #8
 8000e60:	b21b      	sxth	r3, r3
 8000e62:	4313      	orrs	r3, r2
 8000e64:	b21b      	sxth	r3, r3
 8000e66:	b299      	uxth	r1, r3
 8000e68:	4b8f      	ldr	r3, [pc, #572]	; (80010a8 <TaskLIDAR+0x368>)
 8000e6a:	4a94      	ldr	r2, [pc, #592]	; (80010bc <TaskLIDAR+0x37c>)
 8000e6c:	5299      	strh	r1, [r3, r2]
 8000e6e:	e0fc      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+2){
 8000e70:	4b90      	ldr	r3, [pc, #576]	; (80010b4 <TaskLIDAR+0x374>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	3302      	adds	r3, #2
 8000e76:	68fa      	ldr	r2, [r7, #12]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d109      	bne.n	8000e90 <TaskLIDAR+0x150>
				h_LIDAR.processing.CT=h_LIDAR.data_buff[i];
 8000e7c:	4a8a      	ldr	r2, [pc, #552]	; (80010a8 <TaskLIDAR+0x368>)
 8000e7e:	2171      	movs	r1, #113	; 0x71
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	18d3      	adds	r3, r2, r3
 8000e84:	185b      	adds	r3, r3, r1
 8000e86:	7819      	ldrb	r1, [r3, #0]
 8000e88:	4b87      	ldr	r3, [pc, #540]	; (80010a8 <TaskLIDAR+0x368>)
 8000e8a:	4a8d      	ldr	r2, [pc, #564]	; (80010c0 <TaskLIDAR+0x380>)
 8000e8c:	5499      	strb	r1, [r3, r2]
 8000e8e:	e0ec      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+3){
 8000e90:	4b88      	ldr	r3, [pc, #544]	; (80010b4 <TaskLIDAR+0x374>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	3303      	adds	r3, #3
 8000e96:	68fa      	ldr	r2, [r7, #12]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	d117      	bne.n	8000ecc <TaskLIDAR+0x18c>
				frame_end=frame_start+9+2*h_LIDAR.data_buff[i];
 8000e9c:	4b85      	ldr	r3, [pc, #532]	; (80010b4 <TaskLIDAR+0x374>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	3309      	adds	r3, #9
 8000ea2:	001a      	movs	r2, r3
 8000ea4:	4980      	ldr	r1, [pc, #512]	; (80010a8 <TaskLIDAR+0x368>)
 8000ea6:	2071      	movs	r0, #113	; 0x71
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	18cb      	adds	r3, r1, r3
 8000eac:	181b      	adds	r3, r3, r0
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	18d2      	adds	r2, r2, r3
 8000eb4:	4b80      	ldr	r3, [pc, #512]	; (80010b8 <TaskLIDAR+0x378>)
 8000eb6:	601a      	str	r2, [r3, #0]
				h_LIDAR.processing.LSN=h_LIDAR.data_buff[i];
 8000eb8:	4a7b      	ldr	r2, [pc, #492]	; (80010a8 <TaskLIDAR+0x368>)
 8000eba:	2171      	movs	r1, #113	; 0x71
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	18d3      	adds	r3, r2, r3
 8000ec0:	185b      	adds	r3, r3, r1
 8000ec2:	7819      	ldrb	r1, [r3, #0]
 8000ec4:	4b78      	ldr	r3, [pc, #480]	; (80010a8 <TaskLIDAR+0x368>)
 8000ec6:	4a7f      	ldr	r2, [pc, #508]	; (80010c4 <TaskLIDAR+0x384>)
 8000ec8:	5499      	strb	r1, [r3, r2]
 8000eca:	e0ce      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+4){
 8000ecc:	4b79      	ldr	r3, [pc, #484]	; (80010b4 <TaskLIDAR+0x374>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	3304      	adds	r3, #4
 8000ed2:	68fa      	ldr	r2, [r7, #12]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	d10a      	bne.n	8000eee <TaskLIDAR+0x1ae>
				h_LIDAR.processing.FSA=h_LIDAR.data_buff[i];
 8000ed8:	4a73      	ldr	r2, [pc, #460]	; (80010a8 <TaskLIDAR+0x368>)
 8000eda:	2171      	movs	r1, #113	; 0x71
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	18d3      	adds	r3, r2, r3
 8000ee0:	185b      	adds	r3, r3, r1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	b299      	uxth	r1, r3
 8000ee6:	4b70      	ldr	r3, [pc, #448]	; (80010a8 <TaskLIDAR+0x368>)
 8000ee8:	4a77      	ldr	r2, [pc, #476]	; (80010c8 <TaskLIDAR+0x388>)
 8000eea:	5299      	strh	r1, [r3, r2]
 8000eec:	e0bd      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+5){
 8000eee:	4b71      	ldr	r3, [pc, #452]	; (80010b4 <TaskLIDAR+0x374>)
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	3305      	adds	r3, #5
 8000ef4:	68fa      	ldr	r2, [r7, #12]
 8000ef6:	429a      	cmp	r2, r3
 8000ef8:	d112      	bne.n	8000f20 <TaskLIDAR+0x1e0>
				h_LIDAR.processing.FSA=h_LIDAR.processing.FSA|(h_LIDAR.data_buff[i]<<8);
 8000efa:	4b6b      	ldr	r3, [pc, #428]	; (80010a8 <TaskLIDAR+0x368>)
 8000efc:	4a72      	ldr	r2, [pc, #456]	; (80010c8 <TaskLIDAR+0x388>)
 8000efe:	5a9b      	ldrh	r3, [r3, r2]
 8000f00:	b21a      	sxth	r2, r3
 8000f02:	4969      	ldr	r1, [pc, #420]	; (80010a8 <TaskLIDAR+0x368>)
 8000f04:	2071      	movs	r0, #113	; 0x71
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	18cb      	adds	r3, r1, r3
 8000f0a:	181b      	adds	r3, r3, r0
 8000f0c:	781b      	ldrb	r3, [r3, #0]
 8000f0e:	021b      	lsls	r3, r3, #8
 8000f10:	b21b      	sxth	r3, r3
 8000f12:	4313      	orrs	r3, r2
 8000f14:	b21b      	sxth	r3, r3
 8000f16:	b299      	uxth	r1, r3
 8000f18:	4b63      	ldr	r3, [pc, #396]	; (80010a8 <TaskLIDAR+0x368>)
 8000f1a:	4a6b      	ldr	r2, [pc, #428]	; (80010c8 <TaskLIDAR+0x388>)
 8000f1c:	5299      	strh	r1, [r3, r2]
 8000f1e:	e0a4      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+6){
 8000f20:	4b64      	ldr	r3, [pc, #400]	; (80010b4 <TaskLIDAR+0x374>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	3306      	adds	r3, #6
 8000f26:	68fa      	ldr	r2, [r7, #12]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d10a      	bne.n	8000f42 <TaskLIDAR+0x202>
				h_LIDAR.processing.LSA=h_LIDAR.data_buff[i];
 8000f2c:	4a5e      	ldr	r2, [pc, #376]	; (80010a8 <TaskLIDAR+0x368>)
 8000f2e:	2171      	movs	r1, #113	; 0x71
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	18d3      	adds	r3, r2, r3
 8000f34:	185b      	adds	r3, r3, r1
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	b299      	uxth	r1, r3
 8000f3a:	4b5b      	ldr	r3, [pc, #364]	; (80010a8 <TaskLIDAR+0x368>)
 8000f3c:	4a63      	ldr	r2, [pc, #396]	; (80010cc <TaskLIDAR+0x38c>)
 8000f3e:	5299      	strh	r1, [r3, r2]
 8000f40:	e093      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+7){
 8000f42:	4b5c      	ldr	r3, [pc, #368]	; (80010b4 <TaskLIDAR+0x374>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3307      	adds	r3, #7
 8000f48:	68fa      	ldr	r2, [r7, #12]
 8000f4a:	429a      	cmp	r2, r3
 8000f4c:	d112      	bne.n	8000f74 <TaskLIDAR+0x234>
				h_LIDAR.processing.LSA=h_LIDAR.processing.LSA|(h_LIDAR.data_buff[i]<<8);
 8000f4e:	4b56      	ldr	r3, [pc, #344]	; (80010a8 <TaskLIDAR+0x368>)
 8000f50:	4a5e      	ldr	r2, [pc, #376]	; (80010cc <TaskLIDAR+0x38c>)
 8000f52:	5a9b      	ldrh	r3, [r3, r2]
 8000f54:	b21a      	sxth	r2, r3
 8000f56:	4954      	ldr	r1, [pc, #336]	; (80010a8 <TaskLIDAR+0x368>)
 8000f58:	2071      	movs	r0, #113	; 0x71
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	18cb      	adds	r3, r1, r3
 8000f5e:	181b      	adds	r3, r3, r0
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	021b      	lsls	r3, r3, #8
 8000f64:	b21b      	sxth	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b21b      	sxth	r3, r3
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	4b4e      	ldr	r3, [pc, #312]	; (80010a8 <TaskLIDAR+0x368>)
 8000f6e:	4a57      	ldr	r2, [pc, #348]	; (80010cc <TaskLIDAR+0x38c>)
 8000f70:	5299      	strh	r1, [r3, r2]
 8000f72:	e07a      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+8){
 8000f74:	4b4f      	ldr	r3, [pc, #316]	; (80010b4 <TaskLIDAR+0x374>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3308      	adds	r3, #8
 8000f7a:	68fa      	ldr	r2, [r7, #12]
 8000f7c:	429a      	cmp	r2, r3
 8000f7e:	d10a      	bne.n	8000f96 <TaskLIDAR+0x256>
				h_LIDAR.processing.CS=h_LIDAR.data_buff[i];
 8000f80:	4a49      	ldr	r2, [pc, #292]	; (80010a8 <TaskLIDAR+0x368>)
 8000f82:	2171      	movs	r1, #113	; 0x71
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	18d3      	adds	r3, r2, r3
 8000f88:	185b      	adds	r3, r3, r1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b299      	uxth	r1, r3
 8000f8e:	4b46      	ldr	r3, [pc, #280]	; (80010a8 <TaskLIDAR+0x368>)
 8000f90:	4a4f      	ldr	r2, [pc, #316]	; (80010d0 <TaskLIDAR+0x390>)
 8000f92:	5299      	strh	r1, [r3, r2]
 8000f94:	e069      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_start+9){
 8000f96:	4b47      	ldr	r3, [pc, #284]	; (80010b4 <TaskLIDAR+0x374>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	3309      	adds	r3, #9
 8000f9c:	68fa      	ldr	r2, [r7, #12]
 8000f9e:	429a      	cmp	r2, r3
 8000fa0:	d112      	bne.n	8000fc8 <TaskLIDAR+0x288>
				h_LIDAR.processing.CS=h_LIDAR.processing.CS|(h_LIDAR.data_buff[i]<<8);
 8000fa2:	4b41      	ldr	r3, [pc, #260]	; (80010a8 <TaskLIDAR+0x368>)
 8000fa4:	4a4a      	ldr	r2, [pc, #296]	; (80010d0 <TaskLIDAR+0x390>)
 8000fa6:	5a9b      	ldrh	r3, [r3, r2]
 8000fa8:	b21a      	sxth	r2, r3
 8000faa:	493f      	ldr	r1, [pc, #252]	; (80010a8 <TaskLIDAR+0x368>)
 8000fac:	2071      	movs	r0, #113	; 0x71
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	18cb      	adds	r3, r1, r3
 8000fb2:	181b      	adds	r3, r3, r0
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	b21b      	sxth	r3, r3
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	b21b      	sxth	r3, r3
 8000fbe:	b299      	uxth	r1, r3
 8000fc0:	4b39      	ldr	r3, [pc, #228]	; (80010a8 <TaskLIDAR+0x368>)
 8000fc2:	4a43      	ldr	r2, [pc, #268]	; (80010d0 <TaskLIDAR+0x390>)
 8000fc4:	5299      	strh	r1, [r3, r2]
 8000fc6:	e050      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else if(i==frame_end){
 8000fc8:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <TaskLIDAR+0x378>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	68fa      	ldr	r2, [r7, #12]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	d136      	bne.n	8001040 <TaskLIDAR+0x300>
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8000fd2:	4b35      	ldr	r3, [pc, #212]	; (80010a8 <TaskLIDAR+0x368>)
 8000fd4:	4a36      	ldr	r2, [pc, #216]	; (80010b0 <TaskLIDAR+0x370>)
 8000fd6:	5c9b      	ldrb	r3, [r3, r2]
 8000fd8:	1c5a      	adds	r2, r3, #1
 8000fda:	b2d0      	uxtb	r0, r2
 8000fdc:	4a32      	ldr	r2, [pc, #200]	; (80010a8 <TaskLIDAR+0x368>)
 8000fde:	4934      	ldr	r1, [pc, #208]	; (80010b0 <TaskLIDAR+0x370>)
 8000fe0:	5450      	strb	r0, [r2, r1]
 8000fe2:	0018      	movs	r0, r3
 8000fe4:	4a30      	ldr	r2, [pc, #192]	; (80010a8 <TaskLIDAR+0x368>)
 8000fe6:	2171      	movs	r1, #113	; 0x71
 8000fe8:	68fb      	ldr	r3, [r7, #12]
 8000fea:	18d3      	adds	r3, r2, r3
 8000fec:	185b      	adds	r3, r3, r1
 8000fee:	7819      	ldrb	r1, [r3, #0]
 8000ff0:	4b2d      	ldr	r3, [pc, #180]	; (80010a8 <TaskLIDAR+0x368>)
 8000ff2:	4a38      	ldr	r2, [pc, #224]	; (80010d4 <TaskLIDAR+0x394>)
 8000ff4:	181b      	adds	r3, r3, r0
 8000ff6:	189b      	adds	r3, r3, r2
 8000ff8:	1c0a      	adds	r2, r1, #0
 8000ffa:	701a      	strb	r2, [r3, #0]
				if(frame_end-frame_start>11){
 8000ffc:	4b2e      	ldr	r3, [pc, #184]	; (80010b8 <TaskLIDAR+0x378>)
 8000ffe:	681a      	ldr	r2, [r3, #0]
 8001000:	4b2c      	ldr	r3, [pc, #176]	; (80010b4 <TaskLIDAR+0x374>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	1ad3      	subs	r3, r2, r3
 8001006:	2b0b      	cmp	r3, #11
 8001008:	dd0b      	ble.n	8001022 <TaskLIDAR+0x2e2>
					LIDAR_process_frame(&h_LIDAR); //On récupère les différents points
 800100a:	4b27      	ldr	r3, [pc, #156]	; (80010a8 <TaskLIDAR+0x368>)
 800100c:	0018      	movs	r0, r3
 800100e:	f008 fc59 	bl	80098c4 <LIDAR_process_frame>
					medianFilter(&h_LIDAR); //On filtre ces points
 8001012:	4b25      	ldr	r3, [pc, #148]	; (80010a8 <TaskLIDAR+0x368>)
 8001014:	0018      	movs	r0, r3
 8001016:	f008 fdd7 	bl	8009bc8 <medianFilter>
					find_clusters(&h_LIDAR); //On regroupe ces points
 800101a:	4b23      	ldr	r3, [pc, #140]	; (80010a8 <TaskLIDAR+0x368>)
 800101c:	0018      	movs	r0, r3
 800101e:	f008 fd13 	bl	8009a48 <find_clusters>
				}
				h_LIDAR.processing.idx=0;
 8001022:	4b21      	ldr	r3, [pc, #132]	; (80010a8 <TaskLIDAR+0x368>)
 8001024:	4a22      	ldr	r2, [pc, #136]	; (80010b0 <TaskLIDAR+0x370>)
 8001026:	2100      	movs	r1, #0
 8001028:	5499      	strb	r1, [r3, r2]
				frame_start=frame_end+1;
 800102a:	4b23      	ldr	r3, [pc, #140]	; (80010b8 <TaskLIDAR+0x378>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	1c5a      	adds	r2, r3, #1
 8001030:	4b20      	ldr	r3, [pc, #128]	; (80010b4 <TaskLIDAR+0x374>)
 8001032:	601a      	str	r2, [r3, #0]
				frame_end=frame_start+5;
 8001034:	4b1f      	ldr	r3, [pc, #124]	; (80010b4 <TaskLIDAR+0x374>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	1d5a      	adds	r2, r3, #5
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <TaskLIDAR+0x378>)
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	e014      	b.n	800106a <TaskLIDAR+0x32a>
			}
			else{
				h_LIDAR.processing.frame_buff[h_LIDAR.processing.idx++]=h_LIDAR.data_buff[i];
 8001040:	4b19      	ldr	r3, [pc, #100]	; (80010a8 <TaskLIDAR+0x368>)
 8001042:	4a1b      	ldr	r2, [pc, #108]	; (80010b0 <TaskLIDAR+0x370>)
 8001044:	5c9b      	ldrb	r3, [r3, r2]
 8001046:	1c5a      	adds	r2, r3, #1
 8001048:	b2d0      	uxtb	r0, r2
 800104a:	4a17      	ldr	r2, [pc, #92]	; (80010a8 <TaskLIDAR+0x368>)
 800104c:	4918      	ldr	r1, [pc, #96]	; (80010b0 <TaskLIDAR+0x370>)
 800104e:	5450      	strb	r0, [r2, r1]
 8001050:	0018      	movs	r0, r3
 8001052:	4a15      	ldr	r2, [pc, #84]	; (80010a8 <TaskLIDAR+0x368>)
 8001054:	2171      	movs	r1, #113	; 0x71
 8001056:	68fb      	ldr	r3, [r7, #12]
 8001058:	18d3      	adds	r3, r2, r3
 800105a:	185b      	adds	r3, r3, r1
 800105c:	7819      	ldrb	r1, [r3, #0]
 800105e:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <TaskLIDAR+0x368>)
 8001060:	4a1c      	ldr	r2, [pc, #112]	; (80010d4 <TaskLIDAR+0x394>)
 8001062:	181b      	adds	r3, r3, r0
 8001064:	189b      	adds	r3, r3, r2
 8001066:	1c0a      	adds	r2, r1, #0
 8001068:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<DATA_BUFF_SIZE; i++){
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	23fa      	movs	r3, #250	; 0xfa
 8001074:	011b      	lsls	r3, r3, #4
 8001076:	429a      	cmp	r2, r3
 8001078:	da00      	bge.n	800107c <TaskLIDAR+0x33c>
 800107a:	e670      	b.n	8000d5e <TaskLIDAR+0x1e>
			}
		}
		frame_start=frame_start-DATA_BUFF_SIZE;
 800107c:	4b0d      	ldr	r3, [pc, #52]	; (80010b4 <TaskLIDAR+0x374>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4915      	ldr	r1, [pc, #84]	; (80010d8 <TaskLIDAR+0x398>)
 8001082:	185a      	adds	r2, r3, r1
 8001084:	4b0b      	ldr	r3, [pc, #44]	; (80010b4 <TaskLIDAR+0x374>)
 8001086:	601a      	str	r2, [r3, #0]
		frame_end=frame_end-DATA_BUFF_SIZE;
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <TaskLIDAR+0x378>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	185a      	adds	r2, r3, r1
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <TaskLIDAR+0x378>)
 8001090:	601a      	str	r2, [r3, #0]
		//		printf("#\r\n");
		//		for(int i=0 ; i<360/2 ; i++){
		//			//printf("%d\r\n",h_LIDAR.processing.point_buff[2*i]); //On envoi les valeurs
		//			//printf("%d\r\n",h_LIDAR.processing.filtred_buff[2*i]); //On envoi les valeurs filtrées
		//		}
		printf("#\r\n"); //Envoi des clusters
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <TaskLIDAR+0x39c>)
 8001094:	0018      	movs	r0, r3
 8001096:	f008 ff33 	bl	8009f00 <puts>
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 800109a:	2300      	movs	r3, #0
 800109c:	60bb      	str	r3, [r7, #8]
 800109e:	e03b      	b.n	8001118 <TaskLIDAR+0x3d8>
 80010a0:	20003164 	.word	0x20003164
 80010a4:	20003168 	.word	0x20003168
 80010a8:	2000014c 	.word	0x2000014c
 80010ac:	0800b048 	.word	0x0800b048
 80010b0:	0000101e 	.word	0x0000101e
 80010b4:	2000315c 	.word	0x2000315c
 80010b8:	20003160 	.word	0x20003160
 80010bc:	00001014 	.word	0x00001014
 80010c0:	00001016 	.word	0x00001016
 80010c4:	00001017 	.word	0x00001017
 80010c8:	00001018 	.word	0x00001018
 80010cc:	0000101a 	.word	0x0000101a
 80010d0:	0000101c 	.word	0x0000101c
 80010d4:	00001fbf 	.word	0x00001fbf
 80010d8:	fffff060 	.word	0xfffff060
 80010dc:	0800b05c 	.word	0x0800b05c
			printf("%d,%d\r\n",h_LIDAR.processing.clusters[i].angle_moyen,h_LIDAR.processing.clusters[i].distance_moyenne); //On envoi les valeurs
 80010e0:	4911      	ldr	r1, [pc, #68]	; (8001128 <TaskLIDAR+0x3e8>)
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	4811      	ldr	r0, [pc, #68]	; (800112c <TaskLIDAR+0x3ec>)
 80010e6:	0013      	movs	r3, r2
 80010e8:	005b      	lsls	r3, r3, #1
 80010ea:	189b      	adds	r3, r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	18cb      	adds	r3, r1, r3
 80010f0:	181b      	adds	r3, r3, r0
 80010f2:	6818      	ldr	r0, [r3, #0]
 80010f4:	490c      	ldr	r1, [pc, #48]	; (8001128 <TaskLIDAR+0x3e8>)
 80010f6:	68ba      	ldr	r2, [r7, #8]
 80010f8:	4c0d      	ldr	r4, [pc, #52]	; (8001130 <TaskLIDAR+0x3f0>)
 80010fa:	0013      	movs	r3, r2
 80010fc:	005b      	lsls	r3, r3, #1
 80010fe:	189b      	adds	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	18cb      	adds	r3, r1, r3
 8001104:	191b      	adds	r3, r3, r4
 8001106:	681a      	ldr	r2, [r3, #0]
 8001108:	4b0a      	ldr	r3, [pc, #40]	; (8001134 <TaskLIDAR+0x3f4>)
 800110a:	0001      	movs	r1, r0
 800110c:	0018      	movs	r0, r3
 800110e:	f008 fe91 	bl	8009e34 <iprintf>
		for(int i=0 ; i<h_LIDAR.processing.cluster_cnt ; i++){
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3301      	adds	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
 8001118:	4b03      	ldr	r3, [pc, #12]	; (8001128 <TaskLIDAR+0x3e8>)
 800111a:	4a07      	ldr	r2, [pc, #28]	; (8001138 <TaskLIDAR+0x3f8>)
 800111c:	589b      	ldr	r3, [r3, r2]
 800111e:	68ba      	ldr	r2, [r7, #8]
 8001120:	429a      	cmp	r2, r3
 8001122:	dbdd      	blt.n	80010e0 <TaskLIDAR+0x3a0>
		xSemaphoreTake(SemHalfCallBack, portMAX_DELAY);
 8001124:	e610      	b.n	8000d48 <TaskLIDAR+0x8>
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	2000014c 	.word	0x2000014c
 800112c:	00002b5c 	.word	0x00002b5c
 8001130:	00002b60 	.word	0x00002b60
 8001134:	0800b060 	.word	0x0800b060
 8001138:	0000300c 	.word	0x0000300c

0800113c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	TaskHandle_t xHandleLIDAR = NULL;
 8001142:	2300      	movs	r3, #0
 8001144:	603b      	str	r3, [r7, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f001 f9ed 	bl	8002524 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f893 	bl	8001274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f7ff fc5d 	bl	8000a0c <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f7ff fc35 	bl	80009c0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001156:	f7ff fb25 	bl	80007a4 <MX_ADC1_Init>
  MX_TIM1_Init();
 800115a:	f000 fb8f 	bl	800187c <MX_TIM1_Init>
  MX_TIM3_Init();
 800115e:	f000 fbf7 	bl	8001950 <MX_TIM3_Init>
  MX_TIM14_Init();
 8001162:	f000 fc95 	bl	8001a90 <MX_TIM14_Init>
  MX_TIM15_Init();
 8001166:	f000 fce3 	bl	8001b30 <MX_TIM15_Init>
  MX_TIM16_Init();
 800116a:	f000 fd85 	bl	8001c78 <MX_TIM16_Init>
  MX_TIM17_Init();
 800116e:	f000 fe0b 	bl	8001d88 <MX_TIM17_Init>
  MX_USART1_UART_Init();
 8001172:	f001 f863 	bl	800223c <MX_USART1_UART_Init>
  MX_USART4_UART_Init();
 8001176:	f001 f8af 	bl	80022d8 <MX_USART4_UART_Init>
  MX_SPI1_Init();
 800117a:	f000 f929 	bl	80013d0 <MX_SPI1_Init>
  MX_TIM6_Init();
 800117e:	f000 fc4b 	bl	8001a18 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	h_LIDAR.serial_drv.transmit=uart_transmit;
 8001182:	4b2e      	ldr	r3, [pc, #184]	; (800123c <main+0x100>)
 8001184:	4a2e      	ldr	r2, [pc, #184]	; (8001240 <main+0x104>)
 8001186:	601a      	str	r2, [r3, #0]
	h_LIDAR.serial_drv.it_transmit=uart_it_transmit;
 8001188:	4b2c      	ldr	r3, [pc, #176]	; (800123c <main+0x100>)
 800118a:	4a2e      	ldr	r2, [pc, #184]	; (8001244 <main+0x108>)
 800118c:	605a      	str	r2, [r3, #4]
	h_LIDAR.serial_drv.dma_transmit=uart_dma_transmit;
 800118e:	4b2b      	ldr	r3, [pc, #172]	; (800123c <main+0x100>)
 8001190:	4a2d      	ldr	r2, [pc, #180]	; (8001248 <main+0x10c>)
 8001192:	609a      	str	r2, [r3, #8]
	h_LIDAR.serial_drv.poll_receive=uart_poll_receive;
 8001194:	4b29      	ldr	r3, [pc, #164]	; (800123c <main+0x100>)
 8001196:	4a2d      	ldr	r2, [pc, #180]	; (800124c <main+0x110>)
 8001198:	60da      	str	r2, [r3, #12]
	h_LIDAR.serial_drv.it_receive=uart_it_receive;
 800119a:	4b28      	ldr	r3, [pc, #160]	; (800123c <main+0x100>)
 800119c:	4a2c      	ldr	r2, [pc, #176]	; (8001250 <main+0x114>)
 800119e:	611a      	str	r2, [r3, #16]
	h_LIDAR.serial_drv.dma_receive=uart_dma_receive;
 80011a0:	4b26      	ldr	r3, [pc, #152]	; (800123c <main+0x100>)
 80011a2:	4a2c      	ldr	r2, [pc, #176]	; (8001254 <main+0x118>)
 80011a4:	615a      	str	r2, [r3, #20]

	printf("\r\n===== Driver_LIDAR =====\r\n");
 80011a6:	4b2c      	ldr	r3, [pc, #176]	; (8001258 <main+0x11c>)
 80011a8:	0018      	movs	r0, r3
 80011aa:	f008 fea9 	bl	8009f00 <puts>

	LIDAR_stop(&h_LIDAR);
 80011ae:	4b23      	ldr	r3, [pc, #140]	; (800123c <main+0x100>)
 80011b0:	0018      	movs	r0, r3
 80011b2:	f008 f9ad 	bl	8009510 <LIDAR_stop>
	HAL_Delay(1000);
 80011b6:	23fa      	movs	r3, #250	; 0xfa
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	0018      	movs	r0, r3
 80011bc:	f001 f9ee 	bl	800259c <HAL_Delay>
	LIDAR_get_info(&h_LIDAR);
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <main+0x100>)
 80011c2:	0018      	movs	r0, r3
 80011c4:	f008 f9ba 	bl	800953c <LIDAR_get_info>
	LIDAR_get_health_stat(&h_LIDAR);
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <main+0x100>)
 80011ca:	0018      	movs	r0, r3
 80011cc:	f008 fae0 	bl	8009790 <LIDAR_get_health_stat>

	ret = xTaskCreate(TaskLIDAR,"TaskLIDAR",STACK_SIZE,(void *) NULL,1,&xHandleLIDAR);
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	005a      	lsls	r2, r3, #1
 80011d4:	4921      	ldr	r1, [pc, #132]	; (800125c <main+0x120>)
 80011d6:	4822      	ldr	r0, [pc, #136]	; (8001260 <main+0x124>)
 80011d8:	003b      	movs	r3, r7
 80011da:	9301      	str	r3, [sp, #4]
 80011dc:	2301      	movs	r3, #1
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2300      	movs	r3, #0
 80011e2:	f007 f87a 	bl	80082da <xTaskCreate>
 80011e6:	0003      	movs	r3, r0
 80011e8:	607b      	str	r3, [r7, #4]
	if (ret != pdPASS)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d005      	beq.n	80011fc <main+0xc0>
	{
		printf("Error creating TaskLIDAR\r\n");
 80011f0:	4b1c      	ldr	r3, [pc, #112]	; (8001264 <main+0x128>)
 80011f2:	0018      	movs	r0, r3
 80011f4:	f008 fe84 	bl	8009f00 <puts>
		Error_Handler();
 80011f8:	f000 f8e4 	bl	80013c4 <Error_Handler>
	}
	printf("Task LIDAR created\r\n");
 80011fc:	4b1a      	ldr	r3, [pc, #104]	; (8001268 <main+0x12c>)
 80011fe:	0018      	movs	r0, r3
 8001200:	f008 fe7e 	bl	8009f00 <puts>

	SemHalfCallBack = xSemaphoreCreateBinary();
 8001204:	2203      	movs	r2, #3
 8001206:	2100      	movs	r1, #0
 8001208:	2001      	movs	r0, #1
 800120a:	f006 fe4d 	bl	8007ea8 <xQueueGenericCreate>
 800120e:	0002      	movs	r2, r0
 8001210:	4b16      	ldr	r3, [pc, #88]	; (800126c <main+0x130>)
 8001212:	601a      	str	r2, [r3, #0]
	SemClpCallBack = xSemaphoreCreateBinary();
 8001214:	2203      	movs	r2, #3
 8001216:	2100      	movs	r1, #0
 8001218:	2001      	movs	r0, #1
 800121a:	f006 fe45 	bl	8007ea8 <xQueueGenericCreate>
 800121e:	0002      	movs	r2, r0
 8001220:	4b13      	ldr	r3, [pc, #76]	; (8001270 <main+0x134>)
 8001222:	601a      	str	r2, [r3, #0]

	LIDAR_start(&h_LIDAR);
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <main+0x100>)
 8001226:	0018      	movs	r0, r3
 8001228:	f008 f954 	bl	80094d4 <LIDAR_start>
	vTaskStartScheduler();
 800122c:	f007 f9aa 	bl	8008584 <vTaskStartScheduler>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001230:	f7ff fba4 	bl	800097c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001234:	f006 fcf7 	bl	8007c26 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8001238:	e7fe      	b.n	8001238 <main+0xfc>
 800123a:	46c0      	nop			; (mov r8, r8)
 800123c:	2000014c 	.word	0x2000014c
 8001240:	08000c31 	.word	0x08000c31
 8001244:	08000c61 	.word	0x08000c61
 8001248:	08000c8d 	.word	0x08000c8d
 800124c:	08000cb9 	.word	0x08000cb9
 8001250:	08000ce9 	.word	0x08000ce9
 8001254:	08000d15 	.word	0x08000d15
 8001258:	0800b068 	.word	0x0800b068
 800125c:	0800b084 	.word	0x0800b084
 8001260:	08000d41 	.word	0x08000d41
 8001264:	0800b090 	.word	0x0800b090
 8001268:	0800b0ac 	.word	0x0800b0ac
 800126c:	20003164 	.word	0x20003164
 8001270:	20003168 	.word	0x20003168

08001274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001274:	b590      	push	{r4, r7, lr}
 8001276:	b093      	sub	sp, #76	; 0x4c
 8001278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800127a:	2414      	movs	r4, #20
 800127c:	193b      	adds	r3, r7, r4
 800127e:	0018      	movs	r0, r3
 8001280:	2334      	movs	r3, #52	; 0x34
 8001282:	001a      	movs	r2, r3
 8001284:	2100      	movs	r1, #0
 8001286:	f008 ff6b 	bl	800a160 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	0018      	movs	r0, r3
 800128e:	2310      	movs	r3, #16
 8001290:	001a      	movs	r2, r3
 8001292:	2100      	movs	r1, #0
 8001294:	f008 ff64 	bl	800a160 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2380      	movs	r3, #128	; 0x80
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	0018      	movs	r0, r3
 800129e:	f002 faf5 	bl	800388c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012a2:	193b      	adds	r3, r7, r4
 80012a4:	2202      	movs	r2, #2
 80012a6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012a8:	193b      	adds	r3, r7, r4
 80012aa:	2280      	movs	r2, #128	; 0x80
 80012ac:	0052      	lsls	r2, r2, #1
 80012ae:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80012b0:	0021      	movs	r1, r4
 80012b2:	187b      	adds	r3, r7, r1
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012b8:	187b      	adds	r3, r7, r1
 80012ba:	2240      	movs	r2, #64	; 0x40
 80012bc:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012be:	187b      	adds	r3, r7, r1
 80012c0:	2202      	movs	r2, #2
 80012c2:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c4:	187b      	adds	r3, r7, r1
 80012c6:	2202      	movs	r2, #2
 80012c8:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80012ca:	187b      	adds	r3, r7, r1
 80012cc:	2200      	movs	r2, #0
 80012ce:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 80012d0:	187b      	adds	r3, r7, r1
 80012d2:	2208      	movs	r2, #8
 80012d4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d6:	187b      	adds	r3, r7, r1
 80012d8:	2280      	movs	r2, #128	; 0x80
 80012da:	0292      	lsls	r2, r2, #10
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80012de:	187b      	adds	r3, r7, r1
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	0592      	lsls	r2, r2, #22
 80012e4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012e6:	187b      	adds	r3, r7, r1
 80012e8:	0018      	movs	r0, r3
 80012ea:	f002 fb1b 	bl	8003924 <HAL_RCC_OscConfig>
 80012ee:	1e03      	subs	r3, r0, #0
 80012f0:	d001      	beq.n	80012f6 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80012f2:	f000 f867 	bl	80013c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2207      	movs	r2, #7
 80012fa:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	2202      	movs	r2, #2
 8001300:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	2200      	movs	r2, #0
 8001306:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	2200      	movs	r2, #0
 800130c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130e:	1d3b      	adds	r3, r7, #4
 8001310:	2102      	movs	r1, #2
 8001312:	0018      	movs	r0, r3
 8001314:	f002 fe16 	bl	8003f44 <HAL_RCC_ClockConfig>
 8001318:	1e03      	subs	r3, r0, #0
 800131a:	d001      	beq.n	8001320 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800131c:	f000 f852 	bl	80013c4 <Error_Handler>
  }
}
 8001320:	46c0      	nop			; (mov r8, r8)
 8001322:	46bd      	mov	sp, r7
 8001324:	b013      	add	sp, #76	; 0x4c
 8001326:	bd90      	pop	{r4, r7, pc}

08001328 <HAL_UART_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 8001330:	2300      	movs	r3, #0
 8001332:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemHalfCallBack,&higher_priority_task_woken);
 8001334:	4b09      	ldr	r3, [pc, #36]	; (800135c <HAL_UART_RxHalfCpltCallback+0x34>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	220c      	movs	r2, #12
 800133a:	18ba      	adds	r2, r7, r2
 800133c:	0011      	movs	r1, r2
 800133e:	0018      	movs	r0, r3
 8001340:	f006 fe02 	bl	8007f48 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_UART_RxHalfCpltCallback+0x2a>
 800134a:	4b05      	ldr	r3, [pc, #20]	; (8001360 <HAL_UART_RxHalfCpltCallback+0x38>)
 800134c:	2280      	movs	r2, #128	; 0x80
 800134e:	0552      	lsls	r2, r2, #21
 8001350:	601a      	str	r2, [r3, #0]
}
 8001352:	46c0      	nop			; (mov r8, r8)
 8001354:	46bd      	mov	sp, r7
 8001356:	b004      	add	sp, #16
 8001358:	bd80      	pop	{r7, pc}
 800135a:	46c0      	nop			; (mov r8, r8)
 800135c:	20003164 	.word	0x20003164
 8001360:	e000ed04 	.word	0xe000ed04

08001364 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	BaseType_t higher_priority_task_woken = pdFALSE;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]
	xSemaphoreGiveFromISR(SemClpCallBack,&higher_priority_task_woken);
 8001370:	4b09      	ldr	r3, [pc, #36]	; (8001398 <HAL_UART_RxCpltCallback+0x34>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	220c      	movs	r2, #12
 8001376:	18ba      	adds	r2, r7, r2
 8001378:	0011      	movs	r1, r2
 800137a:	0018      	movs	r0, r3
 800137c:	f006 fde4 	bl	8007f48 <xQueueGiveFromISR>
	portYIELD_FROM_ISR(higher_priority_task_woken);
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d003      	beq.n	800138e <HAL_UART_RxCpltCallback+0x2a>
 8001386:	4b05      	ldr	r3, [pc, #20]	; (800139c <HAL_UART_RxCpltCallback+0x38>)
 8001388:	2280      	movs	r2, #128	; 0x80
 800138a:	0552      	lsls	r2, r2, #21
 800138c:	601a      	str	r2, [r3, #0]
}
 800138e:	46c0      	nop			; (mov r8, r8)
 8001390:	46bd      	mov	sp, r7
 8001392:	b004      	add	sp, #16
 8001394:	bd80      	pop	{r7, pc}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	20003168 	.word	0x20003168
 800139c:	e000ed04 	.word	0xe000ed04

080013a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a04      	ldr	r2, [pc, #16]	; (80013c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80013b2:	f001 f8d7 	bl	8002564 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80013b6:	46c0      	nop			; (mov r8, r8)
 80013b8:	46bd      	mov	sp, r7
 80013ba:	b002      	add	sp, #8
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	46c0      	nop			; (mov r8, r8)
 80013c0:	40001400 	.word	0x40001400

080013c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c8:	b672      	cpsid	i
}
 80013ca:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80013cc:	e7fe      	b.n	80013cc <Error_Handler+0x8>
	...

080013d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80013d4:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_SPI1_Init+0x74>)
 80013d6:	4a1c      	ldr	r2, [pc, #112]	; (8001448 <MX_SPI1_Init+0x78>)
 80013d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_SPI1_Init+0x74>)
 80013dc:	2282      	movs	r2, #130	; 0x82
 80013de:	0052      	lsls	r2, r2, #1
 80013e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_SPI1_Init+0x74>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80013e8:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_SPI1_Init+0x74>)
 80013ea:	22c0      	movs	r2, #192	; 0xc0
 80013ec:	0092      	lsls	r2, r2, #2
 80013ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013f0:	4b14      	ldr	r3, [pc, #80]	; (8001444 <MX_SPI1_Init+0x74>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f6:	4b13      	ldr	r3, [pc, #76]	; (8001444 <MX_SPI1_Init+0x74>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013fc:	4b11      	ldr	r3, [pc, #68]	; (8001444 <MX_SPI1_Init+0x74>)
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	0092      	lsls	r2, r2, #2
 8001402:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001404:	4b0f      	ldr	r3, [pc, #60]	; (8001444 <MX_SPI1_Init+0x74>)
 8001406:	2210      	movs	r2, #16
 8001408:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800140a:	4b0e      	ldr	r3, [pc, #56]	; (8001444 <MX_SPI1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001410:	4b0c      	ldr	r3, [pc, #48]	; (8001444 <MX_SPI1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001416:	4b0b      	ldr	r3, [pc, #44]	; (8001444 <MX_SPI1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800141c:	4b09      	ldr	r3, [pc, #36]	; (8001444 <MX_SPI1_Init+0x74>)
 800141e:	2207      	movs	r2, #7
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001422:	4b08      	ldr	r3, [pc, #32]	; (8001444 <MX_SPI1_Init+0x74>)
 8001424:	2200      	movs	r2, #0
 8001426:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <MX_SPI1_Init+0x74>)
 800142a:	2208      	movs	r2, #8
 800142c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800142e:	4b05      	ldr	r3, [pc, #20]	; (8001444 <MX_SPI1_Init+0x74>)
 8001430:	0018      	movs	r0, r3
 8001432:	f003 f88d 	bl	8004550 <HAL_SPI_Init>
 8001436:	1e03      	subs	r3, r0, #0
 8001438:	d001      	beq.n	800143e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800143a:	f7ff ffc3 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800143e:	46c0      	nop			; (mov r8, r8)
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000316c 	.word	0x2000316c
 8001448:	40013000 	.word	0x40013000

0800144c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800144c:	b590      	push	{r4, r7, lr}
 800144e:	b08b      	sub	sp, #44	; 0x2c
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	2414      	movs	r4, #20
 8001456:	193b      	adds	r3, r7, r4
 8001458:	0018      	movs	r0, r3
 800145a:	2314      	movs	r3, #20
 800145c:	001a      	movs	r2, r3
 800145e:	2100      	movs	r1, #0
 8001460:	f008 fe7e 	bl	800a160 <memset>
  if(spiHandle->Instance==SPI1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a1b      	ldr	r2, [pc, #108]	; (80014d8 <HAL_SPI_MspInit+0x8c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d130      	bne.n	80014d0 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800146e:	4b1b      	ldr	r3, [pc, #108]	; (80014dc <HAL_SPI_MspInit+0x90>)
 8001470:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001472:	4b1a      	ldr	r3, [pc, #104]	; (80014dc <HAL_SPI_MspInit+0x90>)
 8001474:	2180      	movs	r1, #128	; 0x80
 8001476:	0149      	lsls	r1, r1, #5
 8001478:	430a      	orrs	r2, r1
 800147a:	641a      	str	r2, [r3, #64]	; 0x40
 800147c:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_SPI_MspInit+0x90>)
 800147e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001480:	2380      	movs	r3, #128	; 0x80
 8001482:	015b      	lsls	r3, r3, #5
 8001484:	4013      	ands	r3, r2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b14      	ldr	r3, [pc, #80]	; (80014dc <HAL_SPI_MspInit+0x90>)
 800148c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148e:	4b13      	ldr	r3, [pc, #76]	; (80014dc <HAL_SPI_MspInit+0x90>)
 8001490:	2101      	movs	r1, #1
 8001492:	430a      	orrs	r2, r1
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_SPI_MspInit+0x90>)
 8001498:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800149a:	2201      	movs	r2, #1
 800149c:	4013      	ands	r3, r2
 800149e:	60fb      	str	r3, [r7, #12]
 80014a0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA2     ------> SPI1_MOSI
    PA5     ------> SPI1_SCK
    PA11 [PA9]     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_11;
 80014a2:	0021      	movs	r1, r4
 80014a4:	187b      	adds	r3, r7, r1
 80014a6:	4a0e      	ldr	r2, [pc, #56]	; (80014e0 <HAL_SPI_MspInit+0x94>)
 80014a8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	187b      	adds	r3, r7, r1
 80014ac:	2202      	movs	r2, #2
 80014ae:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b0:	187b      	adds	r3, r7, r1
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014b6:	187b      	adds	r3, r7, r1
 80014b8:	2200      	movs	r2, #0
 80014ba:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80014bc:	187b      	adds	r3, r7, r1
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c2:	187a      	adds	r2, r7, r1
 80014c4:	23a0      	movs	r3, #160	; 0xa0
 80014c6:	05db      	lsls	r3, r3, #23
 80014c8:	0011      	movs	r1, r2
 80014ca:	0018      	movs	r0, r3
 80014cc:	f002 f81e 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80014d0:	46c0      	nop			; (mov r8, r8)
 80014d2:	46bd      	mov	sp, r7
 80014d4:	b00b      	add	sp, #44	; 0x2c
 80014d6:	bd90      	pop	{r4, r7, pc}
 80014d8:	40013000 	.word	0x40013000
 80014dc:	40021000 	.word	0x40021000
 80014e0:	00000824 	.word	0x00000824

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <HAL_MspInit+0x5c>)
 80014ec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80014ee:	4b14      	ldr	r3, [pc, #80]	; (8001540 <HAL_MspInit+0x5c>)
 80014f0:	2101      	movs	r1, #1
 80014f2:	430a      	orrs	r2, r1
 80014f4:	641a      	str	r2, [r3, #64]	; 0x40
 80014f6:	4b12      	ldr	r3, [pc, #72]	; (8001540 <HAL_MspInit+0x5c>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	2201      	movs	r2, #1
 80014fc:	4013      	ands	r3, r2
 80014fe:	607b      	str	r3, [r7, #4]
 8001500:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001502:	4b0f      	ldr	r3, [pc, #60]	; (8001540 <HAL_MspInit+0x5c>)
 8001504:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <HAL_MspInit+0x5c>)
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0549      	lsls	r1, r1, #21
 800150c:	430a      	orrs	r2, r1
 800150e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001510:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <HAL_MspInit+0x5c>)
 8001512:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001514:	2380      	movs	r3, #128	; 0x80
 8001516:	055b      	lsls	r3, r3, #21
 8001518:	4013      	ands	r3, r2
 800151a:	603b      	str	r3, [r7, #0]
 800151c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 800151e:	2302      	movs	r3, #2
 8001520:	425b      	negs	r3, r3
 8001522:	2200      	movs	r2, #0
 8001524:	2103      	movs	r1, #3
 8001526:	0018      	movs	r0, r3
 8001528:	f001 fd78 	bl	800301c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 800152c:	23c0      	movs	r3, #192	; 0xc0
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	0018      	movs	r0, r3
 8001532:	f001 f857 	bl	80025e4 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001536:	46c0      	nop			; (mov r8, r8)
 8001538:	46bd      	mov	sp, r7
 800153a:	b002      	add	sp, #8
 800153c:	bd80      	pop	{r7, pc}
 800153e:	46c0      	nop			; (mov r8, r8)
 8001540:	40021000 	.word	0x40021000

08001544 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001544:	b5b0      	push	{r4, r5, r7, lr}
 8001546:	b08c      	sub	sp, #48	; 0x30
 8001548:	af00      	add	r7, sp, #0
 800154a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800154c:	232b      	movs	r3, #43	; 0x2b
 800154e:	18fb      	adds	r3, r7, r3
 8001550:	2200      	movs	r2, #0
 8001552:	701a      	strb	r2, [r3, #0]

  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_InitTick+0xf0>)
 8001556:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001558:	4b36      	ldr	r3, [pc, #216]	; (8001634 <HAL_InitTick+0xf0>)
 800155a:	2120      	movs	r1, #32
 800155c:	430a      	orrs	r2, r1
 800155e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001560:	4b34      	ldr	r3, [pc, #208]	; (8001634 <HAL_InitTick+0xf0>)
 8001562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001564:	2220      	movs	r2, #32
 8001566:	4013      	ands	r3, r2
 8001568:	60bb      	str	r3, [r7, #8]
 800156a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800156c:	230c      	movs	r3, #12
 800156e:	18fa      	adds	r2, r7, r3
 8001570:	2410      	movs	r4, #16
 8001572:	193b      	adds	r3, r7, r4
 8001574:	0011      	movs	r1, r2
 8001576:	0018      	movs	r0, r3
 8001578:	f002 fe8c 	bl	8004294 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800157c:	193b      	adds	r3, r7, r4
 800157e:	68db      	ldr	r3, [r3, #12]
 8001580:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM7 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001584:	2b00      	cmp	r3, #0
 8001586:	d104      	bne.n	8001592 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001588:	f002 fe6e 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 800158c:	0003      	movs	r3, r0
 800158e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001590:	e004      	b.n	800159c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001592:	f002 fe69 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 8001596:	0003      	movs	r3, r0
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800159c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800159e:	4926      	ldr	r1, [pc, #152]	; (8001638 <HAL_InitTick+0xf4>)
 80015a0:	0018      	movs	r0, r3
 80015a2:	f7fe fdbb 	bl	800011c <__udivsi3>
 80015a6:	0003      	movs	r3, r0
 80015a8:	3b01      	subs	r3, #1
 80015aa:	623b      	str	r3, [r7, #32]

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80015ac:	4b23      	ldr	r3, [pc, #140]	; (800163c <HAL_InitTick+0xf8>)
 80015ae:	4a24      	ldr	r2, [pc, #144]	; (8001640 <HAL_InitTick+0xfc>)
 80015b0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80015b2:	4b22      	ldr	r3, [pc, #136]	; (800163c <HAL_InitTick+0xf8>)
 80015b4:	4a23      	ldr	r2, [pc, #140]	; (8001644 <HAL_InitTick+0x100>)
 80015b6:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 80015b8:	4b20      	ldr	r3, [pc, #128]	; (800163c <HAL_InitTick+0xf8>)
 80015ba:	6a3a      	ldr	r2, [r7, #32]
 80015bc:	605a      	str	r2, [r3, #4]
  htim7.Init.ClockDivision = 0;
 80015be:	4b1f      	ldr	r3, [pc, #124]	; (800163c <HAL_InitTick+0xf8>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c4:	4b1d      	ldr	r3, [pc, #116]	; (800163c <HAL_InitTick+0xf8>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b1c      	ldr	r3, [pc, #112]	; (800163c <HAL_InitTick+0xf8>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim7);
 80015d0:	252b      	movs	r5, #43	; 0x2b
 80015d2:	197c      	adds	r4, r7, r5
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_InitTick+0xf8>)
 80015d6:	0018      	movs	r0, r3
 80015d8:	f003 f872 	bl	80046c0 <HAL_TIM_Base_Init>
 80015dc:	0003      	movs	r3, r0
 80015de:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 80015e0:	197b      	adds	r3, r7, r5
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11e      	bne.n	8001626 <HAL_InitTick+0xe2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim7);
 80015e8:	197c      	adds	r4, r7, r5
 80015ea:	4b14      	ldr	r3, [pc, #80]	; (800163c <HAL_InitTick+0xf8>)
 80015ec:	0018      	movs	r0, r3
 80015ee:	f003 f8bf 	bl	8004770 <HAL_TIM_Base_Start_IT>
 80015f2:	0003      	movs	r3, r0
 80015f4:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 80015f6:	197b      	adds	r3, r7, r5
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d113      	bne.n	8001626 <HAL_InitTick+0xe2>
    {
    /* Enable the TIM7 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80015fe:	2012      	movs	r0, #18
 8001600:	f001 fd21 	bl	8003046 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b03      	cmp	r3, #3
 8001608:	d809      	bhi.n	800161e <HAL_InitTick+0xda>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority, 0U);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2200      	movs	r2, #0
 800160e:	0019      	movs	r1, r3
 8001610:	2012      	movs	r0, #18
 8001612:	f001 fd03 	bl	800301c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001616:	4b0c      	ldr	r3, [pc, #48]	; (8001648 <HAL_InitTick+0x104>)
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	601a      	str	r2, [r3, #0]
 800161c:	e003      	b.n	8001626 <HAL_InitTick+0xe2>
      }
      else
      {
        status = HAL_ERROR;
 800161e:	232b      	movs	r3, #43	; 0x2b
 8001620:	18fb      	adds	r3, r7, r3
 8001622:	2201      	movs	r2, #1
 8001624:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8001626:	232b      	movs	r3, #43	; 0x2b
 8001628:	18fb      	adds	r3, r7, r3
 800162a:	781b      	ldrb	r3, [r3, #0]
}
 800162c:	0018      	movs	r0, r3
 800162e:	46bd      	mov	sp, r7
 8001630:	b00c      	add	sp, #48	; 0x30
 8001632:	bdb0      	pop	{r4, r5, r7, pc}
 8001634:	40021000 	.word	0x40021000
 8001638:	000f4240 	.word	0x000f4240
 800163c:	200031d0 	.word	0x200031d0
 8001640:	40001400 	.word	0x40001400
 8001644:	000003e7 	.word	0x000003e7
 8001648:	20000004 	.word	0x20000004

0800164c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001650:	e7fe      	b.n	8001650 <NMI_Handler+0x4>

08001652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001656:	e7fe      	b.n	8001656 <HardFault_Handler+0x4>

08001658 <EXTI0_1_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 and line 1 interrupts.
  */
void EXTI0_1_IRQHandler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_1_IRQn 0 */

  /* USER CODE END EXTI0_1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton1_Pin);
 800165c:	2001      	movs	r0, #1
 800165e:	f002 f8d7 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_1_IRQn 1 */

  /* USER CODE END EXTI0_1_IRQn 1 */
}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}

08001668 <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton2_Pin);
 800166c:	2008      	movs	r0, #8
 800166e:	f002 f8cf 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Bouton3_Pin);
 800167c:	2010      	movs	r0, #16
 800167e:	f002 f8c7 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact4_Pin);
 8001682:	2020      	movs	r0, #32
 8001684:	f002 f8c4 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure1_Pin);
 8001688:	2380      	movs	r3, #128	; 0x80
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	0018      	movs	r0, r3
 800168e:	f002 f8bf 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Bordure2_Pin);
 8001692:	2380      	movs	r3, #128	; 0x80
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	0018      	movs	r0, r3
 8001698:	f002 f8ba 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact1_Pin);
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	019b      	lsls	r3, r3, #6
 80016a0:	0018      	movs	r0, r3
 80016a2:	f002 f8b5 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact2_Pin);
 80016a6:	2380      	movs	r3, #128	; 0x80
 80016a8:	01db      	lsls	r3, r3, #7
 80016aa:	0018      	movs	r0, r3
 80016ac:	f002 f8b0 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Contact3_Pin);
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	021b      	lsls	r3, r3, #8
 80016b4:	0018      	movs	r0, r3
 80016b6:	f002 f8ab 	bl	8003810 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <DMA1_Channel1_IRQHandler+0x14>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f001 fdde 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	200000ec 	.word	0x200000ec

080016d8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <DMA1_Channel2_3_IRQHandler+0x14>)
 80016de:	0018      	movs	r0, r3
 80016e0:	f001 fdd2 	bl	8003288 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	2000355c 	.word	0x2000355c

080016f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <TIM1_CC_IRQHandler+0x14>)
 80016f6:	0018      	movs	r0, r3
 80016f8:	f003 f990 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	20003220 	.word	0x20003220

08001708 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <TIM3_IRQHandler+0x14>)
 800170e:	0018      	movs	r0, r3
 8001710:	f003 f984 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	2000326c 	.word	0x2000326c

08001720 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <TIM7_IRQHandler+0x14>)
 8001726:	0018      	movs	r0, r3
 8001728:	f003 f978 	bl	8004a1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	200031d0 	.word	0x200031d0

08001738 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	60f8      	str	r0, [r7, #12]
 8001740:	60b9      	str	r1, [r7, #8]
 8001742:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]
 8001748:	e00a      	b.n	8001760 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800174a:	e000      	b.n	800174e <_read+0x16>
 800174c:	bf00      	nop
 800174e:	0001      	movs	r1, r0
 8001750:	68bb      	ldr	r3, [r7, #8]
 8001752:	1c5a      	adds	r2, r3, #1
 8001754:	60ba      	str	r2, [r7, #8]
 8001756:	b2ca      	uxtb	r2, r1
 8001758:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	3301      	adds	r3, #1
 800175e:	617b      	str	r3, [r7, #20]
 8001760:	697a      	ldr	r2, [r7, #20]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	429a      	cmp	r2, r3
 8001766:	dbf0      	blt.n	800174a <_read+0x12>
  }

  return len;
 8001768:	687b      	ldr	r3, [r7, #4]
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b006      	add	sp, #24
 8001770:	bd80      	pop	{r7, pc}

08001772 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001772:	b580      	push	{r7, lr}
 8001774:	b086      	sub	sp, #24
 8001776:	af00      	add	r7, sp, #0
 8001778:	60f8      	str	r0, [r7, #12]
 800177a:	60b9      	str	r1, [r7, #8]
 800177c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	e009      	b.n	8001798 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	60ba      	str	r2, [r7, #8]
 800178a:	781b      	ldrb	r3, [r3, #0]
 800178c:	0018      	movs	r0, r3
 800178e:	f7ff fa3d 	bl	8000c0c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	3301      	adds	r3, #1
 8001796:	617b      	str	r3, [r7, #20]
 8001798:	697a      	ldr	r2, [r7, #20]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	429a      	cmp	r2, r3
 800179e:	dbf1      	blt.n	8001784 <_write+0x12>
  }
  return len;
 80017a0:	687b      	ldr	r3, [r7, #4]
}
 80017a2:	0018      	movs	r0, r3
 80017a4:	46bd      	mov	sp, r7
 80017a6:	b006      	add	sp, #24
 80017a8:	bd80      	pop	{r7, pc}

080017aa <_close>:

int _close(int file)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80017b2:	2301      	movs	r3, #1
 80017b4:	425b      	negs	r3, r3
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}

080017be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b082      	sub	sp, #8
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	6078      	str	r0, [r7, #4]
 80017c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	2280      	movs	r2, #128	; 0x80
 80017cc:	0192      	lsls	r2, r2, #6
 80017ce:	605a      	str	r2, [r3, #4]
  return 0;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	0018      	movs	r0, r3
 80017d4:	46bd      	mov	sp, r7
 80017d6:	b002      	add	sp, #8
 80017d8:	bd80      	pop	{r7, pc}

080017da <_isatty>:

int _isatty(int file)
{
 80017da:	b580      	push	{r7, lr}
 80017dc:	b082      	sub	sp, #8
 80017de:	af00      	add	r7, sp, #0
 80017e0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80017e2:	2301      	movs	r3, #1
}
 80017e4:	0018      	movs	r0, r3
 80017e6:	46bd      	mov	sp, r7
 80017e8:	b002      	add	sp, #8
 80017ea:	bd80      	pop	{r7, pc}

080017ec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	60f8      	str	r0, [r7, #12]
 80017f4:	60b9      	str	r1, [r7, #8]
 80017f6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	0018      	movs	r0, r3
 80017fc:	46bd      	mov	sp, r7
 80017fe:	b004      	add	sp, #16
 8001800:	bd80      	pop	{r7, pc}
	...

08001804 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b086      	sub	sp, #24
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800180c:	4a14      	ldr	r2, [pc, #80]	; (8001860 <_sbrk+0x5c>)
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <_sbrk+0x60>)
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001814:	697b      	ldr	r3, [r7, #20]
 8001816:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001818:	4b13      	ldr	r3, [pc, #76]	; (8001868 <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d102      	bne.n	8001826 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001820:	4b11      	ldr	r3, [pc, #68]	; (8001868 <_sbrk+0x64>)
 8001822:	4a12      	ldr	r2, [pc, #72]	; (800186c <_sbrk+0x68>)
 8001824:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001826:	4b10      	ldr	r3, [pc, #64]	; (8001868 <_sbrk+0x64>)
 8001828:	681a      	ldr	r2, [r3, #0]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	18d3      	adds	r3, r2, r3
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	429a      	cmp	r2, r3
 8001832:	d207      	bcs.n	8001844 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001834:	f008 fcea 	bl	800a20c <__errno>
 8001838:	0003      	movs	r3, r0
 800183a:	220c      	movs	r2, #12
 800183c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800183e:	2301      	movs	r3, #1
 8001840:	425b      	negs	r3, r3
 8001842:	e009      	b.n	8001858 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <_sbrk+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <_sbrk+0x64>)
 800184c:	681a      	ldr	r2, [r3, #0]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	18d2      	adds	r2, r2, r3
 8001852:	4b05      	ldr	r3, [pc, #20]	; (8001868 <_sbrk+0x64>)
 8001854:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8001856:	68fb      	ldr	r3, [r7, #12]
}
 8001858:	0018      	movs	r0, r3
 800185a:	46bd      	mov	sp, r7
 800185c:	b006      	add	sp, #24
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20009000 	.word	0x20009000
 8001864:	00000400 	.word	0x00000400
 8001868:	2000321c 	.word	0x2000321c
 800186c:	20008678 	.word	0x20008678

08001870 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	46c0      	nop			; (mov r8, r8)
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
	...

0800187c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800187c:	b590      	push	{r4, r7, lr}
 800187e:	b08d      	sub	sp, #52	; 0x34
 8001880:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001882:	240c      	movs	r4, #12
 8001884:	193b      	adds	r3, r7, r4
 8001886:	0018      	movs	r0, r3
 8001888:	2324      	movs	r3, #36	; 0x24
 800188a:	001a      	movs	r2, r3
 800188c:	2100      	movs	r1, #0
 800188e:	f008 fc67 	bl	800a160 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001892:	003b      	movs	r3, r7
 8001894:	0018      	movs	r0, r3
 8001896:	230c      	movs	r3, #12
 8001898:	001a      	movs	r2, r3
 800189a:	2100      	movs	r1, #0
 800189c:	f008 fc60 	bl	800a160 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80018a0:	4b28      	ldr	r3, [pc, #160]	; (8001944 <MX_TIM1_Init+0xc8>)
 80018a2:	4a29      	ldr	r2, [pc, #164]	; (8001948 <MX_TIM1_Init+0xcc>)
 80018a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80018a6:	4b27      	ldr	r3, [pc, #156]	; (8001944 <MX_TIM1_Init+0xc8>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ac:	4b25      	ldr	r3, [pc, #148]	; (8001944 <MX_TIM1_Init+0xc8>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80018b2:	4b24      	ldr	r3, [pc, #144]	; (8001944 <MX_TIM1_Init+0xc8>)
 80018b4:	4a25      	ldr	r2, [pc, #148]	; (800194c <MX_TIM1_Init+0xd0>)
 80018b6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018b8:	4b22      	ldr	r3, [pc, #136]	; (8001944 <MX_TIM1_Init+0xc8>)
 80018ba:	2200      	movs	r2, #0
 80018bc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018be:	4b21      	ldr	r3, [pc, #132]	; (8001944 <MX_TIM1_Init+0xc8>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018c4:	4b1f      	ldr	r3, [pc, #124]	; (8001944 <MX_TIM1_Init+0xc8>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80018ca:	0021      	movs	r1, r4
 80018cc:	187b      	adds	r3, r7, r1
 80018ce:	2203      	movs	r2, #3
 80018d0:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80018d2:	187b      	adds	r3, r7, r1
 80018d4:	2202      	movs	r2, #2
 80018d6:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80018d8:	187b      	adds	r3, r7, r1
 80018da:	2201      	movs	r2, #1
 80018dc:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80018de:	187b      	adds	r3, r7, r1
 80018e0:	2200      	movs	r2, #0
 80018e2:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80018e4:	187b      	adds	r3, r7, r1
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80018ea:	187b      	adds	r3, r7, r1
 80018ec:	2202      	movs	r2, #2
 80018ee:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	2201      	movs	r2, #1
 80018f4:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80018f6:	187b      	adds	r3, r7, r1
 80018f8:	2200      	movs	r2, #0
 80018fa:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80018fc:	187b      	adds	r3, r7, r1
 80018fe:	2200      	movs	r2, #0
 8001900:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001902:	187a      	adds	r2, r7, r1
 8001904:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <MX_TIM1_Init+0xc8>)
 8001906:	0011      	movs	r1, r2
 8001908:	0018      	movs	r0, r3
 800190a:	f002 ffdf 	bl	80048cc <HAL_TIM_Encoder_Init>
 800190e:	1e03      	subs	r3, r0, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8001912:	f7ff fd57 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001916:	003b      	movs	r3, r7
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800191c:	003b      	movs	r3, r7
 800191e:	2200      	movs	r2, #0
 8001920:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001922:	003b      	movs	r3, r7
 8001924:	2200      	movs	r2, #0
 8001926:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001928:	003a      	movs	r2, r7
 800192a:	4b06      	ldr	r3, [pc, #24]	; (8001944 <MX_TIM1_Init+0xc8>)
 800192c:	0011      	movs	r1, r2
 800192e:	0018      	movs	r0, r3
 8001930:	f003 fe00 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8001934:	1e03      	subs	r3, r0, #0
 8001936:	d001      	beq.n	800193c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001938:	f7ff fd44 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800193c:	46c0      	nop			; (mov r8, r8)
 800193e:	46bd      	mov	sp, r7
 8001940:	b00d      	add	sp, #52	; 0x34
 8001942:	bd90      	pop	{r4, r7, pc}
 8001944:	20003220 	.word	0x20003220
 8001948:	40012c00 	.word	0x40012c00
 800194c:	0000ffff 	.word	0x0000ffff

08001950 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001950:	b590      	push	{r4, r7, lr}
 8001952:	b08d      	sub	sp, #52	; 0x34
 8001954:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001956:	240c      	movs	r4, #12
 8001958:	193b      	adds	r3, r7, r4
 800195a:	0018      	movs	r0, r3
 800195c:	2324      	movs	r3, #36	; 0x24
 800195e:	001a      	movs	r2, r3
 8001960:	2100      	movs	r1, #0
 8001962:	f008 fbfd 	bl	800a160 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001966:	003b      	movs	r3, r7
 8001968:	0018      	movs	r0, r3
 800196a:	230c      	movs	r3, #12
 800196c:	001a      	movs	r2, r3
 800196e:	2100      	movs	r1, #0
 8001970:	f008 fbf6 	bl	800a160 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <MX_TIM3_Init+0xbc>)
 8001976:	4a26      	ldr	r2, [pc, #152]	; (8001a10 <MX_TIM3_Init+0xc0>)
 8001978:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800197a:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <MX_TIM3_Init+0xbc>)
 800197c:	2200      	movs	r2, #0
 800197e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001980:	4b22      	ldr	r3, [pc, #136]	; (8001a0c <MX_TIM3_Init+0xbc>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001986:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <MX_TIM3_Init+0xbc>)
 8001988:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <MX_TIM3_Init+0xc4>)
 800198a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800198c:	4b1f      	ldr	r3, [pc, #124]	; (8001a0c <MX_TIM3_Init+0xbc>)
 800198e:	2200      	movs	r2, #0
 8001990:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001992:	4b1e      	ldr	r3, [pc, #120]	; (8001a0c <MX_TIM3_Init+0xbc>)
 8001994:	2200      	movs	r2, #0
 8001996:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001998:	0021      	movs	r1, r4
 800199a:	187b      	adds	r3, r7, r1
 800199c:	2203      	movs	r2, #3
 800199e:	601a      	str	r2, [r3, #0]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80019a0:	187b      	adds	r3, r7, r1
 80019a2:	2202      	movs	r2, #2
 80019a4:	605a      	str	r2, [r3, #4]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80019a6:	187b      	adds	r3, r7, r1
 80019a8:	2201      	movs	r2, #1
 80019aa:	609a      	str	r2, [r3, #8]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80019ac:	187b      	adds	r3, r7, r1
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
  sConfig.IC1Filter = 0;
 80019b2:	187b      	adds	r3, r7, r1
 80019b4:	2200      	movs	r2, #0
 80019b6:	611a      	str	r2, [r3, #16]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80019b8:	187b      	adds	r3, r7, r1
 80019ba:	2202      	movs	r2, #2
 80019bc:	615a      	str	r2, [r3, #20]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80019be:	187b      	adds	r3, r7, r1
 80019c0:	2201      	movs	r2, #1
 80019c2:	619a      	str	r2, [r3, #24]
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80019c4:	187b      	adds	r3, r7, r1
 80019c6:	2200      	movs	r2, #0
 80019c8:	61da      	str	r2, [r3, #28]
  sConfig.IC2Filter = 0;
 80019ca:	187b      	adds	r3, r7, r1
 80019cc:	2200      	movs	r2, #0
 80019ce:	621a      	str	r2, [r3, #32]
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80019d0:	187a      	adds	r2, r7, r1
 80019d2:	4b0e      	ldr	r3, [pc, #56]	; (8001a0c <MX_TIM3_Init+0xbc>)
 80019d4:	0011      	movs	r1, r2
 80019d6:	0018      	movs	r0, r3
 80019d8:	f002 ff78 	bl	80048cc <HAL_TIM_Encoder_Init>
 80019dc:	1e03      	subs	r3, r0, #0
 80019de:	d001      	beq.n	80019e4 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80019e0:	f7ff fcf0 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019e4:	003b      	movs	r3, r7
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019ea:	003b      	movs	r3, r7
 80019ec:	2200      	movs	r2, #0
 80019ee:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019f0:	003a      	movs	r2, r7
 80019f2:	4b06      	ldr	r3, [pc, #24]	; (8001a0c <MX_TIM3_Init+0xbc>)
 80019f4:	0011      	movs	r1, r2
 80019f6:	0018      	movs	r0, r3
 80019f8:	f003 fd9c 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 80019fc:	1e03      	subs	r3, r0, #0
 80019fe:	d001      	beq.n	8001a04 <MX_TIM3_Init+0xb4>
  {
    Error_Handler();
 8001a00:	f7ff fce0 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001a04:	46c0      	nop			; (mov r8, r8)
 8001a06:	46bd      	mov	sp, r7
 8001a08:	b00d      	add	sp, #52	; 0x34
 8001a0a:	bd90      	pop	{r4, r7, pc}
 8001a0c:	2000326c 	.word	0x2000326c
 8001a10:	40000400 	.word	0x40000400
 8001a14:	0000ffff 	.word	0x0000ffff

08001a18 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b084      	sub	sp, #16
 8001a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a1e:	1d3b      	adds	r3, r7, #4
 8001a20:	0018      	movs	r0, r3
 8001a22:	230c      	movs	r3, #12
 8001a24:	001a      	movs	r2, r3
 8001a26:	2100      	movs	r1, #0
 8001a28:	f008 fb9a 	bl	800a160 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a2c:	4b15      	ldr	r3, [pc, #84]	; (8001a84 <MX_TIM6_Init+0x6c>)
 8001a2e:	4a16      	ldr	r2, [pc, #88]	; (8001a88 <MX_TIM6_Init+0x70>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 63999;
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <MX_TIM6_Init+0x6c>)
 8001a34:	4a15      	ldr	r2, [pc, #84]	; (8001a8c <MX_TIM6_Init+0x74>)
 8001a36:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_TIM6_Init+0x6c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_TIM6_Init+0x6c>)
 8001a40:	2263      	movs	r2, #99	; 0x63
 8001a42:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_TIM6_Init+0x6c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_TIM6_Init+0x6c>)
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	f002 fe37 	bl	80046c0 <HAL_TIM_Base_Init>
 8001a52:	1e03      	subs	r3, r0, #0
 8001a54:	d001      	beq.n	8001a5a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8001a56:	f7ff fcb5 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001a5a:	1d3b      	adds	r3, r7, #4
 8001a5c:	2220      	movs	r2, #32
 8001a5e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a60:	1d3b      	adds	r3, r7, #4
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001a66:	1d3a      	adds	r2, r7, #4
 8001a68:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_TIM6_Init+0x6c>)
 8001a6a:	0011      	movs	r1, r2
 8001a6c:	0018      	movs	r0, r3
 8001a6e:	f003 fd61 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8001a72:	1e03      	subs	r3, r0, #0
 8001a74:	d001      	beq.n	8001a7a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8001a76:	f7ff fca5 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	b004      	add	sp, #16
 8001a80:	bd80      	pop	{r7, pc}
 8001a82:	46c0      	nop			; (mov r8, r8)
 8001a84:	200032b8 	.word	0x200032b8
 8001a88:	40001000 	.word	0x40001000
 8001a8c:	0000f9ff 	.word	0x0000f9ff

08001a90 <MX_TIM14_Init>:
/* TIM14 init function */
void MX_TIM14_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b088      	sub	sp, #32
 8001a94:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM14_Init 0 */

  /* USER CODE END TIM14_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	0018      	movs	r0, r3
 8001a9a:	231c      	movs	r3, #28
 8001a9c:	001a      	movs	r2, r3
 8001a9e:	2100      	movs	r1, #0
 8001aa0:	f008 fb5e 	bl	800a160 <memset>

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8001aa4:	4b1f      	ldr	r3, [pc, #124]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001aa6:	4a20      	ldr	r2, [pc, #128]	; (8001b28 <MX_TIM14_Init+0x98>)
 8001aa8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 0;
 8001aaa:	4b1e      	ldr	r3, [pc, #120]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab0:	4b1c      	ldr	r3, [pc, #112]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8001ab6:	4b1b      	ldr	r3, [pc, #108]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001ab8:	4a1c      	ldr	r2, [pc, #112]	; (8001b2c <MX_TIM14_Init+0x9c>)
 8001aba:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001abc:	4b19      	ldr	r3, [pc, #100]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac2:	4b18      	ldr	r3, [pc, #96]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8001ac8:	4b16      	ldr	r3, [pc, #88]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001aca:	0018      	movs	r0, r3
 8001acc:	f002 fdf8 	bl	80046c0 <HAL_TIM_Base_Init>
 8001ad0:	1e03      	subs	r3, r0, #0
 8001ad2:	d001      	beq.n	8001ad8 <MX_TIM14_Init+0x48>
  {
    Error_Handler();
 8001ad4:	f7ff fc76 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim14) != HAL_OK)
 8001ad8:	4b12      	ldr	r3, [pc, #72]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001ada:	0018      	movs	r0, r3
 8001adc:	f002 fe9e 	bl	800481c <HAL_TIM_PWM_Init>
 8001ae0:	1e03      	subs	r3, r0, #0
 8001ae2:	d001      	beq.n	8001ae8 <MX_TIM14_Init+0x58>
  {
    Error_Handler();
 8001ae4:	f7ff fc6e 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ae8:	1d3b      	adds	r3, r7, #4
 8001aea:	2260      	movs	r2, #96	; 0x60
 8001aec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001aee:	1d3b      	adds	r3, r7, #4
 8001af0:	2200      	movs	r2, #0
 8001af2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	2200      	movs	r2, #0
 8001af8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim14, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b00:	1d39      	adds	r1, r7, #4
 8001b02:	4b08      	ldr	r3, [pc, #32]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	0018      	movs	r0, r3
 8001b08:	f003 f8ba 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001b0c:	1e03      	subs	r3, r0, #0
 8001b0e:	d001      	beq.n	8001b14 <MX_TIM14_Init+0x84>
  {
    Error_Handler();
 8001b10:	f7ff fc58 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */
  HAL_TIM_MspPostInit(&htim14);
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <MX_TIM14_Init+0x94>)
 8001b16:	0018      	movs	r0, r3
 8001b18:	f000 fad2 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001b1c:	46c0      	nop			; (mov r8, r8)
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	b008      	add	sp, #32
 8001b22:	bd80      	pop	{r7, pc}
 8001b24:	20003304 	.word	0x20003304
 8001b28:	40002000 	.word	0x40002000
 8001b2c:	0000ffff 	.word	0x0000ffff

08001b30 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b098      	sub	sp, #96	; 0x60
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b36:	2354      	movs	r3, #84	; 0x54
 8001b38:	18fb      	adds	r3, r7, r3
 8001b3a:	0018      	movs	r0, r3
 8001b3c:	230c      	movs	r3, #12
 8001b3e:	001a      	movs	r2, r3
 8001b40:	2100      	movs	r1, #0
 8001b42:	f008 fb0d 	bl	800a160 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b46:	2338      	movs	r3, #56	; 0x38
 8001b48:	18fb      	adds	r3, r7, r3
 8001b4a:	0018      	movs	r0, r3
 8001b4c:	231c      	movs	r3, #28
 8001b4e:	001a      	movs	r2, r3
 8001b50:	2100      	movs	r1, #0
 8001b52:	f008 fb05 	bl	800a160 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b56:	1d3b      	adds	r3, r7, #4
 8001b58:	0018      	movs	r0, r3
 8001b5a:	2334      	movs	r3, #52	; 0x34
 8001b5c:	001a      	movs	r2, r3
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f008 fafe 	bl	800a160 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8001b64:	4b41      	ldr	r3, [pc, #260]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001b66:	4a42      	ldr	r2, [pc, #264]	; (8001c70 <MX_TIM15_Init+0x140>)
 8001b68:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 19;
 8001b6a:	4b40      	ldr	r3, [pc, #256]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001b6c:	2213      	movs	r2, #19
 8001b6e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b70:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 999;
 8001b76:	4b3d      	ldr	r3, [pc, #244]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001b78:	4a3e      	ldr	r2, [pc, #248]	; (8001c74 <MX_TIM15_Init+0x144>)
 8001b7a:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8001b82:	4b3a      	ldr	r3, [pc, #232]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b88:	4b38      	ldr	r3, [pc, #224]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8001b8e:	4b37      	ldr	r3, [pc, #220]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001b90:	0018      	movs	r0, r3
 8001b92:	f002 fe43 	bl	800481c <HAL_TIM_PWM_Init>
 8001b96:	1e03      	subs	r3, r0, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8001b9a:	f7ff fc13 	bl	80013c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2154      	movs	r1, #84	; 0x54
 8001ba0:	187b      	adds	r3, r7, r1
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	187b      	adds	r3, r7, r1
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8001bac:	187a      	adds	r2, r7, r1
 8001bae:	4b2f      	ldr	r3, [pc, #188]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001bb0:	0011      	movs	r1, r2
 8001bb2:	0018      	movs	r0, r3
 8001bb4:	f003 fcbe 	bl	8005534 <HAL_TIMEx_MasterConfigSynchronization>
 8001bb8:	1e03      	subs	r3, r0, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM15_Init+0x90>
  {
    Error_Handler();
 8001bbc:	f7ff fc02 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc0:	2138      	movs	r1, #56	; 0x38
 8001bc2:	187b      	adds	r3, r7, r1
 8001bc4:	2260      	movs	r2, #96	; 0x60
 8001bc6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001bc8:	187b      	adds	r3, r7, r1
 8001bca:	2200      	movs	r2, #0
 8001bcc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bce:	187b      	adds	r3, r7, r1
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bd4:	187b      	adds	r3, r7, r1
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bda:	187b      	adds	r3, r7, r1
 8001bdc:	2200      	movs	r2, #0
 8001bde:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001be0:	187b      	adds	r3, r7, r1
 8001be2:	2200      	movs	r2, #0
 8001be4:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001be6:	187b      	adds	r3, r7, r1
 8001be8:	2200      	movs	r2, #0
 8001bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bec:	1879      	adds	r1, r7, r1
 8001bee:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	0018      	movs	r0, r3
 8001bf4:	f003 f844 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001bf8:	1e03      	subs	r3, r0, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_TIM15_Init+0xd0>
  {
    Error_Handler();
 8001bfc:	f7ff fbe2 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c00:	2338      	movs	r3, #56	; 0x38
 8001c02:	18f9      	adds	r1, r7, r3
 8001c04:	4b19      	ldr	r3, [pc, #100]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001c06:	2204      	movs	r2, #4
 8001c08:	0018      	movs	r0, r3
 8001c0a:	f003 f839 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001c0e:	1e03      	subs	r3, r0, #0
 8001c10:	d001      	beq.n	8001c16 <MX_TIM15_Init+0xe6>
  {
    Error_Handler();
 8001c12:	f7ff fbd7 	bl	80013c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c16:	1d3b      	adds	r3, r7, #4
 8001c18:	2200      	movs	r2, #0
 8001c1a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	2200      	movs	r2, #0
 8001c20:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c28:	1d3b      	adds	r3, r7, #4
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c2e:	1d3b      	adds	r3, r7, #4
 8001c30:	2200      	movs	r2, #0
 8001c32:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c34:	1d3b      	adds	r3, r7, #4
 8001c36:	2280      	movs	r2, #128	; 0x80
 8001c38:	0192      	lsls	r2, r2, #6
 8001c3a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c42:	1d3b      	adds	r3, r7, #4
 8001c44:	2200      	movs	r2, #0
 8001c46:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8001c48:	1d3a      	adds	r2, r7, #4
 8001c4a:	4b08      	ldr	r3, [pc, #32]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001c4c:	0011      	movs	r1, r2
 8001c4e:	0018      	movs	r0, r3
 8001c50:	f003 fcd8 	bl	8005604 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c54:	1e03      	subs	r3, r0, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM15_Init+0x12c>
  {
    Error_Handler();
 8001c58:	f7ff fbb4 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8001c5c:	4b03      	ldr	r3, [pc, #12]	; (8001c6c <MX_TIM15_Init+0x13c>)
 8001c5e:	0018      	movs	r0, r3
 8001c60:	f000 fa2e 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001c64:	46c0      	nop			; (mov r8, r8)
 8001c66:	46bd      	mov	sp, r7
 8001c68:	b018      	add	sp, #96	; 0x60
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20003350 	.word	0x20003350
 8001c70:	40014000 	.word	0x40014000
 8001c74:	000003e7 	.word	0x000003e7

08001c78 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b094      	sub	sp, #80	; 0x50
 8001c7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c7e:	2334      	movs	r3, #52	; 0x34
 8001c80:	18fb      	adds	r3, r7, r3
 8001c82:	0018      	movs	r0, r3
 8001c84:	231c      	movs	r3, #28
 8001c86:	001a      	movs	r2, r3
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f008 fa69 	bl	800a160 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c8e:	003b      	movs	r3, r7
 8001c90:	0018      	movs	r0, r3
 8001c92:	2334      	movs	r3, #52	; 0x34
 8001c94:	001a      	movs	r2, r3
 8001c96:	2100      	movs	r1, #0
 8001c98:	f008 fa62 	bl	800a160 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8001c9c:	4b37      	ldr	r3, [pc, #220]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001c9e:	4a38      	ldr	r2, [pc, #224]	; (8001d80 <MX_TIM16_Init+0x108>)
 8001ca0:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 19;
 8001ca2:	4b36      	ldr	r3, [pc, #216]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001ca4:	2213      	movs	r2, #19
 8001ca6:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca8:	4b34      	ldr	r3, [pc, #208]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 999;
 8001cae:	4b33      	ldr	r3, [pc, #204]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001cb0:	4a34      	ldr	r2, [pc, #208]	; (8001d84 <MX_TIM16_Init+0x10c>)
 8001cb2:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b31      	ldr	r3, [pc, #196]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cc0:	4b2e      	ldr	r3, [pc, #184]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001cc8:	0018      	movs	r0, r3
 8001cca:	f002 fcf9 	bl	80046c0 <HAL_TIM_Base_Init>
 8001cce:	1e03      	subs	r3, r0, #0
 8001cd0:	d001      	beq.n	8001cd6 <MX_TIM16_Init+0x5e>
  {
    Error_Handler();
 8001cd2:	f7ff fb77 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 8001cd6:	4b29      	ldr	r3, [pc, #164]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001cd8:	0018      	movs	r0, r3
 8001cda:	f002 fd9f 	bl	800481c <HAL_TIM_PWM_Init>
 8001cde:	1e03      	subs	r3, r0, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM16_Init+0x6e>
  {
    Error_Handler();
 8001ce2:	f7ff fb6f 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce6:	2134      	movs	r1, #52	; 0x34
 8001ce8:	187b      	adds	r3, r7, r1
 8001cea:	2260      	movs	r2, #96	; 0x60
 8001cec:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001cee:	187b      	adds	r3, r7, r1
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf4:	187b      	adds	r3, r7, r1
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cfa:	187b      	adds	r3, r7, r1
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d00:	187b      	adds	r3, r7, r1
 8001d02:	2200      	movs	r2, #0
 8001d04:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d06:	187b      	adds	r3, r7, r1
 8001d08:	2200      	movs	r2, #0
 8001d0a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d0c:	187b      	adds	r3, r7, r1
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d12:	1879      	adds	r1, r7, r1
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	0018      	movs	r0, r3
 8001d1a:	f002 ffb1 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001d1e:	1e03      	subs	r3, r0, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM16_Init+0xae>
  {
    Error_Handler();
 8001d22:	f7ff fb4f 	bl	80013c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d26:	003b      	movs	r3, r7
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d2c:	003b      	movs	r3, r7
 8001d2e:	2200      	movs	r2, #0
 8001d30:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d32:	003b      	movs	r3, r7
 8001d34:	2200      	movs	r2, #0
 8001d36:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d38:	003b      	movs	r3, r7
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d3e:	003b      	movs	r3, r7
 8001d40:	2200      	movs	r2, #0
 8001d42:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d44:	003b      	movs	r3, r7
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	0192      	lsls	r2, r2, #6
 8001d4a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d4c:	003b      	movs	r3, r7
 8001d4e:	2200      	movs	r2, #0
 8001d50:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d52:	003b      	movs	r3, r7
 8001d54:	2200      	movs	r2, #0
 8001d56:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 8001d58:	003a      	movs	r2, r7
 8001d5a:	4b08      	ldr	r3, [pc, #32]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001d5c:	0011      	movs	r1, r2
 8001d5e:	0018      	movs	r0, r3
 8001d60:	f003 fc50 	bl	8005604 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d64:	1e03      	subs	r3, r0, #0
 8001d66:	d001      	beq.n	8001d6c <MX_TIM16_Init+0xf4>
  {
    Error_Handler();
 8001d68:	f7ff fb2c 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 8001d6c:	4b03      	ldr	r3, [pc, #12]	; (8001d7c <MX_TIM16_Init+0x104>)
 8001d6e:	0018      	movs	r0, r3
 8001d70:	f000 f9a6 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001d74:	46c0      	nop			; (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b014      	add	sp, #80	; 0x50
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000339c 	.word	0x2000339c
 8001d80:	40014400 	.word	0x40014400
 8001d84:	000003e7 	.word	0x000003e7

08001d88 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b094      	sub	sp, #80	; 0x50
 8001d8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d8e:	2334      	movs	r3, #52	; 0x34
 8001d90:	18fb      	adds	r3, r7, r3
 8001d92:	0018      	movs	r0, r3
 8001d94:	231c      	movs	r3, #28
 8001d96:	001a      	movs	r2, r3
 8001d98:	2100      	movs	r1, #0
 8001d9a:	f008 f9e1 	bl	800a160 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001d9e:	003b      	movs	r3, r7
 8001da0:	0018      	movs	r0, r3
 8001da2:	2334      	movs	r3, #52	; 0x34
 8001da4:	001a      	movs	r2, r3
 8001da6:	2100      	movs	r1, #0
 8001da8:	f008 f9da 	bl	800a160 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8001dac:	4b37      	ldr	r3, [pc, #220]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001dae:	4a38      	ldr	r2, [pc, #224]	; (8001e90 <MX_TIM17_Init+0x108>)
 8001db0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 19;
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001db4:	2213      	movs	r2, #19
 8001db6:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001db8:	4b34      	ldr	r3, [pc, #208]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 999;
 8001dbe:	4b33      	ldr	r3, [pc, #204]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001dc0:	4a34      	ldr	r2, [pc, #208]	; (8001e94 <MX_TIM17_Init+0x10c>)
 8001dc2:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dc4:	4b31      	ldr	r3, [pc, #196]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8001dca:	4b30      	ldr	r3, [pc, #192]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8001dd6:	4b2d      	ldr	r3, [pc, #180]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001dd8:	0018      	movs	r0, r3
 8001dda:	f002 fc71 	bl	80046c0 <HAL_TIM_Base_Init>
 8001dde:	1e03      	subs	r3, r0, #0
 8001de0:	d001      	beq.n	8001de6 <MX_TIM17_Init+0x5e>
  {
    Error_Handler();
 8001de2:	f7ff faef 	bl	80013c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8001de6:	4b29      	ldr	r3, [pc, #164]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001de8:	0018      	movs	r0, r3
 8001dea:	f002 fd17 	bl	800481c <HAL_TIM_PWM_Init>
 8001dee:	1e03      	subs	r3, r0, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM17_Init+0x6e>
  {
    Error_Handler();
 8001df2:	f7ff fae7 	bl	80013c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df6:	2134      	movs	r1, #52	; 0x34
 8001df8:	187b      	adds	r3, r7, r1
 8001dfa:	2260      	movs	r2, #96	; 0x60
 8001dfc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8001dfe:	187b      	adds	r3, r7, r1
 8001e00:	2200      	movs	r2, #0
 8001e02:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e04:	187b      	adds	r3, r7, r1
 8001e06:	2200      	movs	r2, #0
 8001e08:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001e0a:	187b      	adds	r3, r7, r1
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e10:	187b      	adds	r3, r7, r1
 8001e12:	2200      	movs	r2, #0
 8001e14:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001e16:	187b      	adds	r3, r7, r1
 8001e18:	2200      	movs	r2, #0
 8001e1a:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001e1c:	187b      	adds	r3, r7, r1
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e22:	1879      	adds	r1, r7, r1
 8001e24:	4b19      	ldr	r3, [pc, #100]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f002 ff29 	bl	8004c80 <HAL_TIM_PWM_ConfigChannel>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM17_Init+0xae>
  {
    Error_Handler();
 8001e32:	f7ff fac7 	bl	80013c4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001e36:	003b      	movs	r3, r7
 8001e38:	2200      	movs	r2, #0
 8001e3a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001e3c:	003b      	movs	r3, r7
 8001e3e:	2200      	movs	r2, #0
 8001e40:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001e42:	003b      	movs	r3, r7
 8001e44:	2200      	movs	r2, #0
 8001e46:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001e48:	003b      	movs	r3, r7
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001e4e:	003b      	movs	r3, r7
 8001e50:	2200      	movs	r2, #0
 8001e52:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001e54:	003b      	movs	r3, r7
 8001e56:	2280      	movs	r2, #128	; 0x80
 8001e58:	0192      	lsls	r2, r2, #6
 8001e5a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001e5c:	003b      	movs	r3, r7
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001e62:	003b      	movs	r3, r7
 8001e64:	2200      	movs	r2, #0
 8001e66:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001e68:	003a      	movs	r2, r7
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001e6c:	0011      	movs	r1, r2
 8001e6e:	0018      	movs	r0, r3
 8001e70:	f003 fbc8 	bl	8005604 <HAL_TIMEx_ConfigBreakDeadTime>
 8001e74:	1e03      	subs	r3, r0, #0
 8001e76:	d001      	beq.n	8001e7c <MX_TIM17_Init+0xf4>
  {
    Error_Handler();
 8001e78:	f7ff faa4 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001e7c:	4b03      	ldr	r3, [pc, #12]	; (8001e8c <MX_TIM17_Init+0x104>)
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f000 f91e 	bl	80020c0 <HAL_TIM_MspPostInit>

}
 8001e84:	46c0      	nop			; (mov r8, r8)
 8001e86:	46bd      	mov	sp, r7
 8001e88:	b014      	add	sp, #80	; 0x50
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200033e8 	.word	0x200033e8
 8001e90:	40014800 	.word	0x40014800
 8001e94:	000003e7 	.word	0x000003e7

08001e98 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001e98:	b590      	push	{r4, r7, lr}
 8001e9a:	b08d      	sub	sp, #52	; 0x34
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	241c      	movs	r4, #28
 8001ea2:	193b      	adds	r3, r7, r4
 8001ea4:	0018      	movs	r0, r3
 8001ea6:	2314      	movs	r3, #20
 8001ea8:	001a      	movs	r2, r3
 8001eaa:	2100      	movs	r1, #0
 8001eac:	f008 f958 	bl	800a160 <memset>
  if(tim_encoderHandle->Instance==TIM1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a3e      	ldr	r2, [pc, #248]	; (8001fb0 <HAL_TIM_Encoder_MspInit+0x118>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d13a      	bne.n	8001f30 <HAL_TIM_Encoder_MspInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eba:	4b3e      	ldr	r3, [pc, #248]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001ebc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001ec0:	2180      	movs	r1, #128	; 0x80
 8001ec2:	0109      	lsls	r1, r1, #4
 8001ec4:	430a      	orrs	r2, r1
 8001ec6:	641a      	str	r2, [r3, #64]	; 0x40
 8001ec8:	4b3a      	ldr	r3, [pc, #232]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	011b      	lsls	r3, r3, #4
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	4b37      	ldr	r3, [pc, #220]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001ed8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eda:	4b36      	ldr	r3, [pc, #216]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001edc:	2101      	movs	r1, #1
 8001ede:	430a      	orrs	r2, r1
 8001ee0:	635a      	str	r2, [r3, #52]	; 0x34
 8001ee2:	4b34      	ldr	r3, [pc, #208]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001ee4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4013      	ands	r3, r2
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = CODEUR1_PH1_Pin|CODEUR1_PH2_Pin;
 8001eee:	193b      	adds	r3, r7, r4
 8001ef0:	22c0      	movs	r2, #192	; 0xc0
 8001ef2:	0092      	lsls	r2, r2, #2
 8001ef4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef6:	0021      	movs	r1, r4
 8001ef8:	187b      	adds	r3, r7, r1
 8001efa:	2202      	movs	r2, #2
 8001efc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efe:	187b      	adds	r3, r7, r1
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f04:	187b      	adds	r3, r7, r1
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001f0a:	187b      	adds	r3, r7, r1
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f10:	187a      	adds	r2, r7, r1
 8001f12:	23a0      	movs	r3, #160	; 0xa0
 8001f14:	05db      	lsls	r3, r3, #23
 8001f16:	0011      	movs	r1, r2
 8001f18:	0018      	movs	r0, r3
 8001f1a:	f001 faf7 	bl	800350c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 3, 0);
 8001f1e:	2200      	movs	r2, #0
 8001f20:	2103      	movs	r1, #3
 8001f22:	200e      	movs	r0, #14
 8001f24:	f001 f87a 	bl	800301c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001f28:	200e      	movs	r0, #14
 8001f2a:	f001 f88c 	bl	8003046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001f2e:	e03a      	b.n	8001fa6 <HAL_TIM_Encoder_MspInit+0x10e>
  else if(tim_encoderHandle->Instance==TIM3)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a20      	ldr	r2, [pc, #128]	; (8001fb8 <HAL_TIM_Encoder_MspInit+0x120>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d135      	bne.n	8001fa6 <HAL_TIM_Encoder_MspInit+0x10e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f3a:	4b1e      	ldr	r3, [pc, #120]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f3e:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f40:	2102      	movs	r1, #2
 8001f42:	430a      	orrs	r2, r1
 8001f44:	63da      	str	r2, [r3, #60]	; 0x3c
 8001f46:	4b1b      	ldr	r3, [pc, #108]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]
 8001f50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f52:	4b18      	ldr	r3, [pc, #96]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f56:	4b17      	ldr	r3, [pc, #92]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f58:	2104      	movs	r1, #4
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	635a      	str	r2, [r3, #52]	; 0x34
 8001f5e:	4b15      	ldr	r3, [pc, #84]	; (8001fb4 <HAL_TIM_Encoder_MspInit+0x11c>)
 8001f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f62:	2204      	movs	r2, #4
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
 8001f68:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = CODEUR2_PH1_Pin|CODEUR2_PH2_Pin;
 8001f6a:	211c      	movs	r1, #28
 8001f6c:	187b      	adds	r3, r7, r1
 8001f6e:	22c0      	movs	r2, #192	; 0xc0
 8001f70:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	187b      	adds	r3, r7, r1
 8001f74:	2202      	movs	r2, #2
 8001f76:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f78:	187b      	adds	r3, r7, r1
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7e:	187b      	adds	r3, r7, r1
 8001f80:	2200      	movs	r2, #0
 8001f82:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM3;
 8001f84:	187b      	adds	r3, r7, r1
 8001f86:	2201      	movs	r2, #1
 8001f88:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f8a:	187b      	adds	r3, r7, r1
 8001f8c:	4a0b      	ldr	r2, [pc, #44]	; (8001fbc <HAL_TIM_Encoder_MspInit+0x124>)
 8001f8e:	0019      	movs	r1, r3
 8001f90:	0010      	movs	r0, r2
 8001f92:	f001 fabb 	bl	800350c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 3, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2103      	movs	r1, #3
 8001f9a:	2010      	movs	r0, #16
 8001f9c:	f001 f83e 	bl	800301c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fa0:	2010      	movs	r0, #16
 8001fa2:	f001 f850 	bl	8003046 <HAL_NVIC_EnableIRQ>
}
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	b00d      	add	sp, #52	; 0x34
 8001fac:	bd90      	pop	{r4, r7, pc}
 8001fae:	46c0      	nop			; (mov r8, r8)
 8001fb0:	40012c00 	.word	0x40012c00
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40000400 	.word	0x40000400
 8001fbc:	50000800 	.word	0x50000800

08001fc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b086      	sub	sp, #24
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	4a27      	ldr	r2, [pc, #156]	; (800206c <HAL_TIM_Base_MspInit+0xac>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d10c      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001fd2:	4b27      	ldr	r3, [pc, #156]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8001fd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd6:	4b26      	ldr	r3, [pc, #152]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8001fd8:	2110      	movs	r1, #16
 8001fda:	430a      	orrs	r2, r1
 8001fdc:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	2210      	movs	r2, #16
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	617b      	str	r3, [r7, #20]
 8001fe8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM17_CLK_ENABLE();
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8001fea:	e03a      	b.n	8002062 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM14)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4a20      	ldr	r2, [pc, #128]	; (8002074 <HAL_TIM_Base_MspInit+0xb4>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d10e      	bne.n	8002014 <HAL_TIM_Base_MspInit+0x54>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001ff6:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8001ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001ffa:	4b1d      	ldr	r3, [pc, #116]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8001ffc:	2180      	movs	r1, #128	; 0x80
 8001ffe:	0209      	lsls	r1, r1, #8
 8002000:	430a      	orrs	r2, r1
 8002002:	641a      	str	r2, [r3, #64]	; 0x40
 8002004:	4b1a      	ldr	r3, [pc, #104]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8002006:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002008:	2380      	movs	r3, #128	; 0x80
 800200a:	021b      	lsls	r3, r3, #8
 800200c:	4013      	ands	r3, r2
 800200e:	613b      	str	r3, [r7, #16]
 8002010:	693b      	ldr	r3, [r7, #16]
}
 8002012:	e026      	b.n	8002062 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM16)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a17      	ldr	r2, [pc, #92]	; (8002078 <HAL_TIM_Base_MspInit+0xb8>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d10e      	bne.n	800203c <HAL_TIM_Base_MspInit+0x7c>
    __HAL_RCC_TIM16_CLK_ENABLE();
 800201e:	4b14      	ldr	r3, [pc, #80]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8002020:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002022:	4b13      	ldr	r3, [pc, #76]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8002024:	2180      	movs	r1, #128	; 0x80
 8002026:	0289      	lsls	r1, r1, #10
 8002028:	430a      	orrs	r2, r1
 800202a:	641a      	str	r2, [r3, #64]	; 0x40
 800202c:	4b10      	ldr	r3, [pc, #64]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 800202e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	029b      	lsls	r3, r3, #10
 8002034:	4013      	ands	r3, r2
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	68fb      	ldr	r3, [r7, #12]
}
 800203a:	e012      	b.n	8002062 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM17)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a0e      	ldr	r2, [pc, #56]	; (800207c <HAL_TIM_Base_MspInit+0xbc>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d10d      	bne.n	8002062 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8002046:	4b0a      	ldr	r3, [pc, #40]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8002048:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800204a:	4b09      	ldr	r3, [pc, #36]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 800204c:	2180      	movs	r1, #128	; 0x80
 800204e:	02c9      	lsls	r1, r1, #11
 8002050:	430a      	orrs	r2, r1
 8002052:	641a      	str	r2, [r3, #64]	; 0x40
 8002054:	4b06      	ldr	r3, [pc, #24]	; (8002070 <HAL_TIM_Base_MspInit+0xb0>)
 8002056:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002058:	2380      	movs	r3, #128	; 0x80
 800205a:	02db      	lsls	r3, r3, #11
 800205c:	4013      	ands	r3, r2
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	46bd      	mov	sp, r7
 8002066:	b006      	add	sp, #24
 8002068:	bd80      	pop	{r7, pc}
 800206a:	46c0      	nop			; (mov r8, r8)
 800206c:	40001000 	.word	0x40001000
 8002070:	40021000 	.word	0x40021000
 8002074:	40002000 	.word	0x40002000
 8002078:	40014400 	.word	0x40014400
 800207c:	40014800 	.word	0x40014800

08002080 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM15)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_TIM_PWM_MspInit+0x38>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d10d      	bne.n	80020ae <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* TIM15 clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8002092:	4b0a      	ldr	r3, [pc, #40]	; (80020bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <HAL_TIM_PWM_MspInit+0x3c>)
 8002098:	2180      	movs	r1, #128	; 0x80
 800209a:	0249      	lsls	r1, r1, #9
 800209c:	430a      	orrs	r2, r1
 800209e:	641a      	str	r2, [r3, #64]	; 0x40
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <HAL_TIM_PWM_MspInit+0x3c>)
 80020a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020a4:	2380      	movs	r3, #128	; 0x80
 80020a6:	025b      	lsls	r3, r3, #9
 80020a8:	4013      	ands	r3, r2
 80020aa:	60fb      	str	r3, [r7, #12]
 80020ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }
}
 80020ae:	46c0      	nop			; (mov r8, r8)
 80020b0:	46bd      	mov	sp, r7
 80020b2:	b004      	add	sp, #16
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	46c0      	nop			; (mov r8, r8)
 80020b8:	40014000 	.word	0x40014000
 80020bc:	40021000 	.word	0x40021000

080020c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020c0:	b590      	push	{r4, r7, lr}
 80020c2:	b08d      	sub	sp, #52	; 0x34
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020c8:	241c      	movs	r4, #28
 80020ca:	193b      	adds	r3, r7, r4
 80020cc:	0018      	movs	r0, r3
 80020ce:	2314      	movs	r3, #20
 80020d0:	001a      	movs	r2, r3
 80020d2:	2100      	movs	r1, #0
 80020d4:	f008 f844 	bl	800a160 <memset>
  if(timHandle->Instance==TIM14)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_TIM_MspPostInit+0x164>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d123      	bne.n	800212a <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM14_MspPostInit 0 */

  /* USER CODE END TIM14_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 80020e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e6:	4b50      	ldr	r3, [pc, #320]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 80020e8:	2104      	movs	r1, #4
 80020ea:	430a      	orrs	r2, r1
 80020ec:	635a      	str	r2, [r3, #52]	; 0x34
 80020ee:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 80020f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020f2:	2204      	movs	r2, #4
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	69bb      	ldr	r3, [r7, #24]
    /**TIM14 GPIO Configuration
    PC12     ------> TIM14_CH1
    */
    GPIO_InitStruct.Pin = PWM_MOT_LIDAR_Pin;
 80020fa:	193b      	adds	r3, r7, r4
 80020fc:	2280      	movs	r2, #128	; 0x80
 80020fe:	0152      	lsls	r2, r2, #5
 8002100:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002102:	0021      	movs	r1, r4
 8002104:	187b      	adds	r3, r7, r1
 8002106:	2202      	movs	r2, #2
 8002108:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2200      	movs	r2, #0
 800210e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002110:	187b      	adds	r3, r7, r1
 8002112:	2200      	movs	r2, #0
 8002114:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM14;
 8002116:	187b      	adds	r3, r7, r1
 8002118:	2202      	movs	r2, #2
 800211a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT_LIDAR_GPIO_Port, &GPIO_InitStruct);
 800211c:	187b      	adds	r3, r7, r1
 800211e:	4a43      	ldr	r2, [pc, #268]	; (800222c <HAL_TIM_MspPostInit+0x16c>)
 8002120:	0019      	movs	r1, r3
 8002122:	0010      	movs	r0, r2
 8002124:	f001 f9f2 	bl	800350c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8002128:	e078      	b.n	800221c <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM15)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a40      	ldr	r2, [pc, #256]	; (8002230 <HAL_TIM_MspPostInit+0x170>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d122      	bne.n	800217a <HAL_TIM_MspPostInit+0xba>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002134:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 8002136:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002138:	4b3b      	ldr	r3, [pc, #236]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 800213a:	2104      	movs	r1, #4
 800213c:	430a      	orrs	r2, r1
 800213e:	635a      	str	r2, [r3, #52]	; 0x34
 8002140:	4b39      	ldr	r3, [pc, #228]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 8002142:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002144:	2204      	movs	r2, #4
 8002146:	4013      	ands	r3, r2
 8002148:	617b      	str	r3, [r7, #20]
 800214a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = PWM_MOT2_PH1_Pin|PWM_MOT2_PH2_Pin;
 800214c:	211c      	movs	r1, #28
 800214e:	187b      	adds	r3, r7, r1
 8002150:	2206      	movs	r2, #6
 8002152:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002154:	187b      	adds	r3, r7, r1
 8002156:	2202      	movs	r2, #2
 8002158:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800215a:	187b      	adds	r3, r7, r1
 800215c:	2200      	movs	r2, #0
 800215e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002160:	187b      	adds	r3, r7, r1
 8002162:	2200      	movs	r2, #0
 8002164:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM15;
 8002166:	187b      	adds	r3, r7, r1
 8002168:	2202      	movs	r2, #2
 800216a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800216c:	187b      	adds	r3, r7, r1
 800216e:	4a2f      	ldr	r2, [pc, #188]	; (800222c <HAL_TIM_MspPostInit+0x16c>)
 8002170:	0019      	movs	r1, r3
 8002172:	0010      	movs	r0, r2
 8002174:	f001 f9ca 	bl	800350c <HAL_GPIO_Init>
}
 8002178:	e050      	b.n	800221c <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM16)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <HAL_TIM_MspPostInit+0x174>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d123      	bne.n	80021cc <HAL_TIM_MspPostInit+0x10c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 8002186:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002188:	4b27      	ldr	r3, [pc, #156]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 800218a:	2101      	movs	r1, #1
 800218c:	430a      	orrs	r2, r1
 800218e:	635a      	str	r2, [r3, #52]	; 0x34
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 8002192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002194:	2201      	movs	r2, #1
 8002196:	4013      	ands	r3, r2
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = PWM_MOT1_PH1_Pin;
 800219c:	211c      	movs	r1, #28
 800219e:	187b      	adds	r3, r7, r1
 80021a0:	2240      	movs	r2, #64	; 0x40
 80021a2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a4:	187b      	adds	r3, r7, r1
 80021a6:	2202      	movs	r2, #2
 80021a8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	187b      	adds	r3, r7, r1
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b0:	187b      	adds	r3, r7, r1
 80021b2:	2200      	movs	r2, #0
 80021b4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM16;
 80021b6:	187b      	adds	r3, r7, r1
 80021b8:	2205      	movs	r2, #5
 80021ba:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH1_GPIO_Port, &GPIO_InitStruct);
 80021bc:	187a      	adds	r2, r7, r1
 80021be:	23a0      	movs	r3, #160	; 0xa0
 80021c0:	05db      	lsls	r3, r3, #23
 80021c2:	0011      	movs	r1, r2
 80021c4:	0018      	movs	r0, r3
 80021c6:	f001 f9a1 	bl	800350c <HAL_GPIO_Init>
}
 80021ca:	e027      	b.n	800221c <HAL_TIM_MspPostInit+0x15c>
  else if(timHandle->Instance==TIM17)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	4a19      	ldr	r2, [pc, #100]	; (8002238 <HAL_TIM_MspPostInit+0x178>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d122      	bne.n	800221c <HAL_TIM_MspPostInit+0x15c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d6:	4b14      	ldr	r3, [pc, #80]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 80021d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 80021dc:	2101      	movs	r1, #1
 80021de:	430a      	orrs	r2, r1
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <HAL_TIM_MspPostInit+0x168>)
 80021e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e6:	2201      	movs	r2, #1
 80021e8:	4013      	ands	r3, r2
 80021ea:	60fb      	str	r3, [r7, #12]
 80021ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_MOT1_PH2_Pin;
 80021ee:	211c      	movs	r1, #28
 80021f0:	187b      	adds	r3, r7, r1
 80021f2:	2280      	movs	r2, #128	; 0x80
 80021f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f6:	187b      	adds	r3, r7, r1
 80021f8:	2202      	movs	r2, #2
 80021fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	187b      	adds	r3, r7, r1
 80021fe:	2200      	movs	r2, #0
 8002200:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	187b      	adds	r3, r7, r1
 8002204:	2200      	movs	r2, #0
 8002206:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM17;
 8002208:	187b      	adds	r3, r7, r1
 800220a:	2205      	movs	r2, #5
 800220c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(PWM_MOT1_PH2_GPIO_Port, &GPIO_InitStruct);
 800220e:	187a      	adds	r2, r7, r1
 8002210:	23a0      	movs	r3, #160	; 0xa0
 8002212:	05db      	lsls	r3, r3, #23
 8002214:	0011      	movs	r1, r2
 8002216:	0018      	movs	r0, r3
 8002218:	f001 f978 	bl	800350c <HAL_GPIO_Init>
}
 800221c:	46c0      	nop			; (mov r8, r8)
 800221e:	46bd      	mov	sp, r7
 8002220:	b00d      	add	sp, #52	; 0x34
 8002222:	bd90      	pop	{r4, r7, pc}
 8002224:	40002000 	.word	0x40002000
 8002228:	40021000 	.word	0x40021000
 800222c:	50000800 	.word	0x50000800
 8002230:	40014000 	.word	0x40014000
 8002234:	40014400 	.word	0x40014400
 8002238:	40014800 	.word	0x40014800

0800223c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002240:	4b23      	ldr	r3, [pc, #140]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002242:	4a24      	ldr	r2, [pc, #144]	; (80022d4 <MX_USART1_UART_Init+0x98>)
 8002244:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002248:	22e1      	movs	r2, #225	; 0xe1
 800224a:	0292      	lsls	r2, r2, #10
 800224c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800224e:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002254:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800225a:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002260:	4b1b      	ldr	r3, [pc, #108]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002262:	220c      	movs	r2, #12
 8002264:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800226c:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002272:	4b17      	ldr	r3, [pc, #92]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002278:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 800227a:	2200      	movs	r2, #0
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002280:	2200      	movs	r2, #0
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002286:	0018      	movs	r0, r3
 8002288:	f003 fa7a 	bl	8005780 <HAL_UART_Init>
 800228c:	1e03      	subs	r3, r0, #0
 800228e:	d001      	beq.n	8002294 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8002290:	f7ff f898 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002294:	4b0e      	ldr	r3, [pc, #56]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 8002296:	2100      	movs	r1, #0
 8002298:	0018      	movs	r0, r3
 800229a:	f005 fbcb 	bl	8007a34 <HAL_UARTEx_SetTxFifoThreshold>
 800229e:	1e03      	subs	r3, r0, #0
 80022a0:	d001      	beq.n	80022a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80022a2:	f7ff f88f 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022a6:	4b0a      	ldr	r3, [pc, #40]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 80022a8:	2100      	movs	r1, #0
 80022aa:	0018      	movs	r0, r3
 80022ac:	f005 fc02 	bl	8007ab4 <HAL_UARTEx_SetRxFifoThreshold>
 80022b0:	1e03      	subs	r3, r0, #0
 80022b2:	d001      	beq.n	80022b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80022b4:	f7ff f886 	bl	80013c4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80022b8:	4b05      	ldr	r3, [pc, #20]	; (80022d0 <MX_USART1_UART_Init+0x94>)
 80022ba:	0018      	movs	r0, r3
 80022bc:	f005 fb80 	bl	80079c0 <HAL_UARTEx_DisableFifoMode>
 80022c0:	1e03      	subs	r3, r0, #0
 80022c2:	d001      	beq.n	80022c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80022c4:	f7ff f87e 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022c8:	46c0      	nop			; (mov r8, r8)
 80022ca:	46bd      	mov	sp, r7
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	20003434 	.word	0x20003434
 80022d4:	40013800 	.word	0x40013800

080022d8 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80022dc:	4b16      	ldr	r3, [pc, #88]	; (8002338 <MX_USART4_UART_Init+0x60>)
 80022de:	4a17      	ldr	r2, [pc, #92]	; (800233c <MX_USART4_UART_Init+0x64>)
 80022e0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 128000;
 80022e2:	4b15      	ldr	r3, [pc, #84]	; (8002338 <MX_USART4_UART_Init+0x60>)
 80022e4:	22fa      	movs	r2, #250	; 0xfa
 80022e6:	0252      	lsls	r2, r2, #9
 80022e8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80022ea:	4b13      	ldr	r3, [pc, #76]	; (8002338 <MX_USART4_UART_Init+0x60>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80022f0:	4b11      	ldr	r3, [pc, #68]	; (8002338 <MX_USART4_UART_Init+0x60>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <MX_USART4_UART_Init+0x60>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80022fc:	4b0e      	ldr	r3, [pc, #56]	; (8002338 <MX_USART4_UART_Init+0x60>)
 80022fe:	220c      	movs	r2, #12
 8002300:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <MX_USART4_UART_Init+0x60>)
 8002304:	2200      	movs	r2, #0
 8002306:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002308:	4b0b      	ldr	r3, [pc, #44]	; (8002338 <MX_USART4_UART_Init+0x60>)
 800230a:	2200      	movs	r2, #0
 800230c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800230e:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <MX_USART4_UART_Init+0x60>)
 8002310:	2200      	movs	r2, #0
 8002312:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002314:	4b08      	ldr	r3, [pc, #32]	; (8002338 <MX_USART4_UART_Init+0x60>)
 8002316:	2200      	movs	r2, #0
 8002318:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231a:	4b07      	ldr	r3, [pc, #28]	; (8002338 <MX_USART4_UART_Init+0x60>)
 800231c:	2200      	movs	r2, #0
 800231e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002320:	4b05      	ldr	r3, [pc, #20]	; (8002338 <MX_USART4_UART_Init+0x60>)
 8002322:	0018      	movs	r0, r3
 8002324:	f003 fa2c 	bl	8005780 <HAL_UART_Init>
 8002328:	1e03      	subs	r3, r0, #0
 800232a:	d001      	beq.n	8002330 <MX_USART4_UART_Init+0x58>
  {
    Error_Handler();
 800232c:	f7ff f84a 	bl	80013c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8002330:	46c0      	nop			; (mov r8, r8)
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	46c0      	nop			; (mov r8, r8)
 8002338:	200034c8 	.word	0x200034c8
 800233c:	40004c00 	.word	0x40004c00

08002340 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b093      	sub	sp, #76	; 0x4c
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	2334      	movs	r3, #52	; 0x34
 800234a:	18fb      	adds	r3, r7, r3
 800234c:	0018      	movs	r0, r3
 800234e:	2314      	movs	r3, #20
 8002350:	001a      	movs	r2, r3
 8002352:	2100      	movs	r1, #0
 8002354:	f007 ff04 	bl	800a160 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002358:	2418      	movs	r4, #24
 800235a:	193b      	adds	r3, r7, r4
 800235c:	0018      	movs	r0, r3
 800235e:	231c      	movs	r3, #28
 8002360:	001a      	movs	r2, r3
 8002362:	2100      	movs	r1, #0
 8002364:	f007 fefc 	bl	800a160 <memset>
  if(uartHandle->Instance==USART1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a52      	ldr	r2, [pc, #328]	; (80024b8 <HAL_UART_MspInit+0x178>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d13e      	bne.n	80023f0 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002372:	193b      	adds	r3, r7, r4
 8002374:	2201      	movs	r2, #1
 8002376:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8002378:	193b      	adds	r3, r7, r4
 800237a:	2200      	movs	r2, #0
 800237c:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800237e:	193b      	adds	r3, r7, r4
 8002380:	0018      	movs	r0, r3
 8002382:	f001 ffb1 	bl	80042e8 <HAL_RCCEx_PeriphCLKConfig>
 8002386:	1e03      	subs	r3, r0, #0
 8002388:	d001      	beq.n	800238e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800238a:	f7ff f81b 	bl	80013c4 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800238e:	4b4b      	ldr	r3, [pc, #300]	; (80024bc <HAL_UART_MspInit+0x17c>)
 8002390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002392:	4b4a      	ldr	r3, [pc, #296]	; (80024bc <HAL_UART_MspInit+0x17c>)
 8002394:	2180      	movs	r1, #128	; 0x80
 8002396:	01c9      	lsls	r1, r1, #7
 8002398:	430a      	orrs	r2, r1
 800239a:	641a      	str	r2, [r3, #64]	; 0x40
 800239c:	4b47      	ldr	r3, [pc, #284]	; (80024bc <HAL_UART_MspInit+0x17c>)
 800239e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80023a0:	2380      	movs	r3, #128	; 0x80
 80023a2:	01db      	lsls	r3, r3, #7
 80023a4:	4013      	ands	r3, r2
 80023a6:	617b      	str	r3, [r7, #20]
 80023a8:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80023aa:	4b44      	ldr	r3, [pc, #272]	; (80024bc <HAL_UART_MspInit+0x17c>)
 80023ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80023ae:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_UART_MspInit+0x17c>)
 80023b0:	2104      	movs	r1, #4
 80023b2:	430a      	orrs	r2, r1
 80023b4:	635a      	str	r2, [r3, #52]	; 0x34
 80023b6:	4b41      	ldr	r3, [pc, #260]	; (80024bc <HAL_UART_MspInit+0x17c>)
 80023b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023ba:	2204      	movs	r2, #4
 80023bc:	4013      	ands	r3, r2
 80023be:	613b      	str	r3, [r7, #16]
 80023c0:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Debug_Pin|USART1_RX_Debug_Pin;
 80023c2:	2134      	movs	r1, #52	; 0x34
 80023c4:	187b      	adds	r3, r7, r1
 80023c6:	2230      	movs	r2, #48	; 0x30
 80023c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ca:	187b      	adds	r3, r7, r1
 80023cc:	2202      	movs	r2, #2
 80023ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d0:	187b      	adds	r3, r7, r1
 80023d2:	2200      	movs	r2, #0
 80023d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	187b      	adds	r3, r7, r1
 80023d8:	2200      	movs	r2, #0
 80023da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80023dc:	187b      	adds	r3, r7, r1
 80023de:	2201      	movs	r2, #1
 80023e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023e2:	187b      	adds	r3, r7, r1
 80023e4:	4a36      	ldr	r2, [pc, #216]	; (80024c0 <HAL_UART_MspInit+0x180>)
 80023e6:	0019      	movs	r1, r3
 80023e8:	0010      	movs	r0, r2
 80023ea:	f001 f88f 	bl	800350c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 80023ee:	e05f      	b.n	80024b0 <HAL_UART_MspInit+0x170>
  else if(uartHandle->Instance==USART4)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a33      	ldr	r2, [pc, #204]	; (80024c4 <HAL_UART_MspInit+0x184>)
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d15a      	bne.n	80024b0 <HAL_UART_MspInit+0x170>
    __HAL_RCC_USART4_CLK_ENABLE();
 80023fa:	4b30      	ldr	r3, [pc, #192]	; (80024bc <HAL_UART_MspInit+0x17c>)
 80023fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fe:	4b2f      	ldr	r3, [pc, #188]	; (80024bc <HAL_UART_MspInit+0x17c>)
 8002400:	2180      	movs	r1, #128	; 0x80
 8002402:	0309      	lsls	r1, r1, #12
 8002404:	430a      	orrs	r2, r1
 8002406:	63da      	str	r2, [r3, #60]	; 0x3c
 8002408:	4b2c      	ldr	r3, [pc, #176]	; (80024bc <HAL_UART_MspInit+0x17c>)
 800240a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	031b      	lsls	r3, r3, #12
 8002410:	4013      	ands	r3, r2
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002416:	4b29      	ldr	r3, [pc, #164]	; (80024bc <HAL_UART_MspInit+0x17c>)
 8002418:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800241a:	4b28      	ldr	r3, [pc, #160]	; (80024bc <HAL_UART_MspInit+0x17c>)
 800241c:	2104      	movs	r1, #4
 800241e:	430a      	orrs	r2, r1
 8002420:	635a      	str	r2, [r3, #52]	; 0x34
 8002422:	4b26      	ldr	r3, [pc, #152]	; (80024bc <HAL_UART_MspInit+0x17c>)
 8002424:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002426:	2204      	movs	r2, #4
 8002428:	4013      	ands	r3, r2
 800242a:	60bb      	str	r3, [r7, #8]
 800242c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART4_RX_LIDAR_Pin|USART4_TX_LIDAR_Pin;
 800242e:	2134      	movs	r1, #52	; 0x34
 8002430:	187b      	adds	r3, r7, r1
 8002432:	22c0      	movs	r2, #192	; 0xc0
 8002434:	0112      	lsls	r2, r2, #4
 8002436:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	187b      	adds	r3, r7, r1
 800243a:	2202      	movs	r2, #2
 800243c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243e:	187b      	adds	r3, r7, r1
 8002440:	2200      	movs	r2, #0
 8002442:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002444:	187b      	adds	r3, r7, r1
 8002446:	2200      	movs	r2, #0
 8002448:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART4;
 800244a:	187b      	adds	r3, r7, r1
 800244c:	2201      	movs	r2, #1
 800244e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002450:	187b      	adds	r3, r7, r1
 8002452:	4a1b      	ldr	r2, [pc, #108]	; (80024c0 <HAL_UART_MspInit+0x180>)
 8002454:	0019      	movs	r1, r3
 8002456:	0010      	movs	r0, r2
 8002458:	f001 f858 	bl	800350c <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel2;
 800245c:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <HAL_UART_MspInit+0x188>)
 800245e:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <HAL_UART_MspInit+0x18c>)
 8002460:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_USART4_RX;
 8002462:	4b19      	ldr	r3, [pc, #100]	; (80024c8 <HAL_UART_MspInit+0x188>)
 8002464:	2238      	movs	r2, #56	; 0x38
 8002466:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <HAL_UART_MspInit+0x188>)
 800246a:	2200      	movs	r2, #0
 800246c:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800246e:	4b16      	ldr	r3, [pc, #88]	; (80024c8 <HAL_UART_MspInit+0x188>)
 8002470:	2200      	movs	r2, #0
 8002472:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002474:	4b14      	ldr	r3, [pc, #80]	; (80024c8 <HAL_UART_MspInit+0x188>)
 8002476:	2280      	movs	r2, #128	; 0x80
 8002478:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800247a:	4b13      	ldr	r3, [pc, #76]	; (80024c8 <HAL_UART_MspInit+0x188>)
 800247c:	2200      	movs	r2, #0
 800247e:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002480:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <HAL_UART_MspInit+0x188>)
 8002482:	2200      	movs	r2, #0
 8002484:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8002486:	4b10      	ldr	r3, [pc, #64]	; (80024c8 <HAL_UART_MspInit+0x188>)
 8002488:	2220      	movs	r2, #32
 800248a:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800248c:	4b0e      	ldr	r3, [pc, #56]	; (80024c8 <HAL_UART_MspInit+0x188>)
 800248e:	2200      	movs	r2, #0
 8002490:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8002492:	4b0d      	ldr	r3, [pc, #52]	; (80024c8 <HAL_UART_MspInit+0x188>)
 8002494:	0018      	movs	r0, r3
 8002496:	f000 fde7 	bl	8003068 <HAL_DMA_Init>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d001      	beq.n	80024a2 <HAL_UART_MspInit+0x162>
      Error_Handler();
 800249e:	f7fe ff91 	bl	80013c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2180      	movs	r1, #128	; 0x80
 80024a6:	4a08      	ldr	r2, [pc, #32]	; (80024c8 <HAL_UART_MspInit+0x188>)
 80024a8:	505a      	str	r2, [r3, r1]
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <HAL_UART_MspInit+0x188>)
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024b0:	46c0      	nop			; (mov r8, r8)
 80024b2:	46bd      	mov	sp, r7
 80024b4:	b013      	add	sp, #76	; 0x4c
 80024b6:	bd90      	pop	{r4, r7, pc}
 80024b8:	40013800 	.word	0x40013800
 80024bc:	40021000 	.word	0x40021000
 80024c0:	50000800 	.word	0x50000800
 80024c4:	40004c00 	.word	0x40004c00
 80024c8:	2000355c 	.word	0x2000355c
 80024cc:	4002001c 	.word	0x4002001c

080024d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80024d0:	480d      	ldr	r0, [pc, #52]	; (8002508 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80024d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024d4:	f7ff f9cc 	bl	8001870 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024d8:	480c      	ldr	r0, [pc, #48]	; (800250c <LoopForever+0x6>)
  ldr r1, =_edata
 80024da:	490d      	ldr	r1, [pc, #52]	; (8002510 <LoopForever+0xa>)
  ldr r2, =_sidata
 80024dc:	4a0d      	ldr	r2, [pc, #52]	; (8002514 <LoopForever+0xe>)
  movs r3, #0
 80024de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024e0:	e002      	b.n	80024e8 <LoopCopyDataInit>

080024e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024e6:	3304      	adds	r3, #4

080024e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024ec:	d3f9      	bcc.n	80024e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ee:	4a0a      	ldr	r2, [pc, #40]	; (8002518 <LoopForever+0x12>)
  ldr r4, =_ebss
 80024f0:	4c0a      	ldr	r4, [pc, #40]	; (800251c <LoopForever+0x16>)
  movs r3, #0
 80024f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024f4:	e001      	b.n	80024fa <LoopFillZerobss>

080024f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024f8:	3204      	adds	r2, #4

080024fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024fc:	d3fb      	bcc.n	80024f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80024fe:	f007 fe8b 	bl	800a218 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8002502:	f7fe fe1b 	bl	800113c <main>

08002506 <LoopForever>:

LoopForever:
  b LoopForever
 8002506:	e7fe      	b.n	8002506 <LoopForever>
  ldr   r0, =_estack
 8002508:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800250c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002510:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002514:	0800b2cc 	.word	0x0800b2cc
  ldr r2, =_sbss
 8002518:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800251c:	20008674 	.word	0x20008674

08002520 <ADC1_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002520:	e7fe      	b.n	8002520 <ADC1_IRQHandler>
	...

08002524 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800252a:	1dfb      	adds	r3, r7, #7
 800252c:	2200      	movs	r2, #0
 800252e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_Init+0x3c>)
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	4b0a      	ldr	r3, [pc, #40]	; (8002560 <HAL_Init+0x3c>)
 8002536:	2180      	movs	r1, #128	; 0x80
 8002538:	0049      	lsls	r1, r1, #1
 800253a:	430a      	orrs	r2, r1
 800253c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800253e:	2003      	movs	r0, #3
 8002540:	f7ff f800 	bl	8001544 <HAL_InitTick>
 8002544:	1e03      	subs	r3, r0, #0
 8002546:	d003      	beq.n	8002550 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8002548:	1dfb      	adds	r3, r7, #7
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]
 800254e:	e001      	b.n	8002554 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8002550:	f7fe ffc8 	bl	80014e4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002554:	1dfb      	adds	r3, r7, #7
 8002556:	781b      	ldrb	r3, [r3, #0]
}
 8002558:	0018      	movs	r0, r3
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40022000 	.word	0x40022000

08002564 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002568:	4b05      	ldr	r3, [pc, #20]	; (8002580 <HAL_IncTick+0x1c>)
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	001a      	movs	r2, r3
 800256e:	4b05      	ldr	r3, [pc, #20]	; (8002584 <HAL_IncTick+0x20>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	18d2      	adds	r2, r2, r3
 8002574:	4b03      	ldr	r3, [pc, #12]	; (8002584 <HAL_IncTick+0x20>)
 8002576:	601a      	str	r2, [r3, #0]
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	46c0      	nop			; (mov r8, r8)
 8002580:	20000008 	.word	0x20000008
 8002584:	200035b8 	.word	0x200035b8

08002588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	af00      	add	r7, sp, #0
  return uwTick;
 800258c:	4b02      	ldr	r3, [pc, #8]	; (8002598 <HAL_GetTick+0x10>)
 800258e:	681b      	ldr	r3, [r3, #0]
}
 8002590:	0018      	movs	r0, r3
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	46c0      	nop			; (mov r8, r8)
 8002598:	200035b8 	.word	0x200035b8

0800259c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80025a4:	f7ff fff0 	bl	8002588 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	d005      	beq.n	80025c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80025b6:	4b0a      	ldr	r3, [pc, #40]	; (80025e0 <HAL_Delay+0x44>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	001a      	movs	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	189b      	adds	r3, r3, r2
 80025c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025c2:	46c0      	nop			; (mov r8, r8)
 80025c4:	f7ff ffe0 	bl	8002588 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	429a      	cmp	r2, r3
 80025d2:	d8f7      	bhi.n	80025c4 <HAL_Delay+0x28>
  {
  }
}
 80025d4:	46c0      	nop			; (mov r8, r8)
 80025d6:	46c0      	nop			; (mov r8, r8)
 80025d8:	46bd      	mov	sp, r7
 80025da:	b004      	add	sp, #16
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	46c0      	nop			; (mov r8, r8)
 80025e0:	20000008 	.word	0x20000008

080025e4 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b082      	sub	sp, #8
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80025ec:	4b06      	ldr	r3, [pc, #24]	; (8002608 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a06      	ldr	r2, [pc, #24]	; (800260c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80025f2:	4013      	ands	r3, r2
 80025f4:	0019      	movs	r1, r3
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	430a      	orrs	r2, r1
 80025fc:	601a      	str	r2, [r3, #0]
}
 80025fe:	46c0      	nop			; (mov r8, r8)
 8002600:	46bd      	mov	sp, r7
 8002602:	b002      	add	sp, #8
 8002604:	bd80      	pop	{r7, pc}
 8002606:	46c0      	nop			; (mov r8, r8)
 8002608:	40010000 	.word	0x40010000
 800260c:	fffff9ff 	.word	0xfffff9ff

08002610 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a05      	ldr	r2, [pc, #20]	; (8002634 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8002620:	401a      	ands	r2, r3
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	431a      	orrs	r2, r3
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	601a      	str	r2, [r3, #0]
}
 800262a:	46c0      	nop			; (mov r8, r8)
 800262c:	46bd      	mov	sp, r7
 800262e:	b002      	add	sp, #8
 8002630:	bd80      	pop	{r7, pc}
 8002632:	46c0      	nop			; (mov r8, r8)
 8002634:	fe3fffff 	.word	0xfe3fffff

08002638 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	23e0      	movs	r3, #224	; 0xe0
 8002646:	045b      	lsls	r3, r3, #17
 8002648:	4013      	ands	r3, r2
}
 800264a:	0018      	movs	r0, r3
 800264c:	46bd      	mov	sp, r7
 800264e:	b002      	add	sp, #8
 8002650:	bd80      	pop	{r7, pc}

08002652 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	60f8      	str	r0, [r7, #12]
 800265a:	60b9      	str	r1, [r7, #8]
 800265c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	68ba      	ldr	r2, [r7, #8]
 8002664:	2104      	movs	r1, #4
 8002666:	400a      	ands	r2, r1
 8002668:	2107      	movs	r1, #7
 800266a:	4091      	lsls	r1, r2
 800266c:	000a      	movs	r2, r1
 800266e:	43d2      	mvns	r2, r2
 8002670:	401a      	ands	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	2104      	movs	r1, #4
 8002676:	400b      	ands	r3, r1
 8002678:	6879      	ldr	r1, [r7, #4]
 800267a:	4099      	lsls	r1, r3
 800267c:	000b      	movs	r3, r1
 800267e:	431a      	orrs	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8002684:	46c0      	nop			; (mov r8, r8)
 8002686:	46bd      	mov	sp, r7
 8002688:	b004      	add	sp, #16
 800268a:	bd80      	pop	{r7, pc}

0800268c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b082      	sub	sp, #8
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	695b      	ldr	r3, [r3, #20]
 800269a:	683a      	ldr	r2, [r7, #0]
 800269c:	2104      	movs	r1, #4
 800269e:	400a      	ands	r2, r1
 80026a0:	2107      	movs	r1, #7
 80026a2:	4091      	lsls	r1, r2
 80026a4:	000a      	movs	r2, r1
 80026a6:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2104      	movs	r1, #4
 80026ac:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80026ae:	40da      	lsrs	r2, r3
 80026b0:	0013      	movs	r3, r2
}
 80026b2:	0018      	movs	r0, r3
 80026b4:	46bd      	mov	sp, r7
 80026b6:	b002      	add	sp, #8
 80026b8:	bd80      	pop	{r7, pc}

080026ba <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80026ba:	b580      	push	{r7, lr}
 80026bc:	b084      	sub	sp, #16
 80026be:	af00      	add	r7, sp, #0
 80026c0:	60f8      	str	r0, [r7, #12]
 80026c2:	60b9      	str	r1, [r7, #8]
 80026c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	211f      	movs	r1, #31
 80026ce:	400a      	ands	r2, r1
 80026d0:	210f      	movs	r1, #15
 80026d2:	4091      	lsls	r1, r2
 80026d4:	000a      	movs	r2, r1
 80026d6:	43d2      	mvns	r2, r2
 80026d8:	401a      	ands	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	0e9b      	lsrs	r3, r3, #26
 80026de:	210f      	movs	r1, #15
 80026e0:	4019      	ands	r1, r3
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	201f      	movs	r0, #31
 80026e6:	4003      	ands	r3, r0
 80026e8:	4099      	lsls	r1, r3
 80026ea:	000b      	movs	r3, r1
 80026ec:	431a      	orrs	r2, r3
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
              << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	46bd      	mov	sp, r7
 80026f6:	b004      	add	sp, #16
 80026f8:	bd80      	pop	{r7, pc}

080026fa <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	6078      	str	r0, [r7, #4]
 8002702:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	035b      	lsls	r3, r3, #13
 800270c:	0b5b      	lsrs	r3, r3, #13
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002714:	46c0      	nop			; (mov r8, r8)
 8002716:	46bd      	mov	sp, r7
 8002718:	b002      	add	sp, #8
 800271a:	bd80      	pop	{r7, pc}

0800271c <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	0352      	lsls	r2, r2, #13
 800272e:	0b52      	lsrs	r2, r2, #13
 8002730:	43d2      	mvns	r2, r2
 8002732:	401a      	ands	r2, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}

08002740 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	60f8      	str	r0, [r7, #12]
 8002748:	60b9      	str	r1, [r7, #8]
 800274a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	695b      	ldr	r3, [r3, #20]
 8002750:	68ba      	ldr	r2, [r7, #8]
 8002752:	0212      	lsls	r2, r2, #8
 8002754:	43d2      	mvns	r2, r2
 8002756:	401a      	ands	r2, r3
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	021b      	lsls	r3, r3, #8
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	400b      	ands	r3, r1
 8002760:	4904      	ldr	r1, [pc, #16]	; (8002774 <LL_ADC_SetChannelSamplingTime+0x34>)
 8002762:	400b      	ands	r3, r1
 8002764:	431a      	orrs	r2, r3
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800276a:	46c0      	nop			; (mov r8, r8)
 800276c:	46bd      	mov	sp, r7
 800276e:	b004      	add	sp, #16
 8002770:	bd80      	pop	{r7, pc}
 8002772:	46c0      	nop			; (mov r8, r8)
 8002774:	07ffff00 	.word	0x07ffff00

08002778 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	4a05      	ldr	r2, [pc, #20]	; (800279c <LL_ADC_EnableInternalRegulator+0x24>)
 8002786:	4013      	ands	r3, r2
 8002788:	2280      	movs	r2, #128	; 0x80
 800278a:	0552      	lsls	r2, r2, #21
 800278c:	431a      	orrs	r2, r3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	46bd      	mov	sp, r7
 8002796:	b002      	add	sp, #8
 8002798:	bd80      	pop	{r7, pc}
 800279a:	46c0      	nop			; (mov r8, r8)
 800279c:	6fffffe8 	.word	0x6fffffe8

080027a0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	2380      	movs	r3, #128	; 0x80
 80027ae:	055b      	lsls	r3, r3, #21
 80027b0:	401a      	ands	r2, r3
 80027b2:	2380      	movs	r3, #128	; 0x80
 80027b4:	055b      	lsls	r3, r3, #21
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d101      	bne.n	80027be <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80027be:	2300      	movs	r3, #0
}
 80027c0:	0018      	movs	r0, r3
 80027c2:	46bd      	mov	sp, r7
 80027c4:	b002      	add	sp, #8
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	2201      	movs	r2, #1
 80027d6:	4013      	ands	r3, r2
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d101      	bne.n	80027e0 <LL_ADC_IsEnabled+0x18>
 80027dc:	2301      	movs	r3, #1
 80027de:	e000      	b.n	80027e2 <LL_ADC_IsEnabled+0x1a>
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	0018      	movs	r0, r3
 80027e4:	46bd      	mov	sp, r7
 80027e6:	b002      	add	sp, #8
 80027e8:	bd80      	pop	{r7, pc}

080027ea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b082      	sub	sp, #8
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	2204      	movs	r2, #4
 80027f8:	4013      	ands	r3, r2
 80027fa:	2b04      	cmp	r3, #4
 80027fc:	d101      	bne.n	8002802 <LL_ADC_REG_IsConversionOngoing+0x18>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002802:	2300      	movs	r3, #0
}
 8002804:	0018      	movs	r0, r3
 8002806:	46bd      	mov	sp, r7
 8002808:	b002      	add	sp, #8
 800280a:	bd80      	pop	{r7, pc}

0800280c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b088      	sub	sp, #32
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002814:	231f      	movs	r3, #31
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	2200      	movs	r2, #0
 800281a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800281c:	2300      	movs	r3, #0
 800281e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002824:	2300      	movs	r3, #0
 8002826:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e17f      	b.n	8002b32 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002836:	2b00      	cmp	r3, #0
 8002838:	d10a      	bne.n	8002850 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f7fe f82b 	bl	8000898 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2200      	movs	r2, #0
 8002846:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2254      	movs	r2, #84	; 0x54
 800284c:	2100      	movs	r1, #0
 800284e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	0018      	movs	r0, r3
 8002856:	f7ff ffa3 	bl	80027a0 <LL_ADC_IsInternalRegulatorEnabled>
 800285a:	1e03      	subs	r3, r0, #0
 800285c:	d115      	bne.n	800288a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0018      	movs	r0, r3
 8002864:	f7ff ff88 	bl	8002778 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002868:	4bb4      	ldr	r3, [pc, #720]	; (8002b3c <HAL_ADC_Init+0x330>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	49b4      	ldr	r1, [pc, #720]	; (8002b40 <HAL_ADC_Init+0x334>)
 800286e:	0018      	movs	r0, r3
 8002870:	f7fd fc54 	bl	800011c <__udivsi3>
 8002874:	0003      	movs	r3, r0
 8002876:	3301      	adds	r3, #1
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800287c:	e002      	b.n	8002884 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3b01      	subs	r3, #1
 8002882:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1f9      	bne.n	800287e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	0018      	movs	r0, r3
 8002890:	f7ff ff86 	bl	80027a0 <LL_ADC_IsInternalRegulatorEnabled>
 8002894:	1e03      	subs	r3, r0, #0
 8002896:	d10f      	bne.n	80028b8 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289c:	2210      	movs	r2, #16
 800289e:	431a      	orrs	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	2201      	movs	r2, #1
 80028aa:	431a      	orrs	r2, r3
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b0:	231f      	movs	r3, #31
 80028b2:	18fb      	adds	r3, r7, r3
 80028b4:	2201      	movs	r2, #1
 80028b6:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	0018      	movs	r0, r3
 80028be:	f7ff ff94 	bl	80027ea <LL_ADC_REG_IsConversionOngoing>
 80028c2:	0003      	movs	r3, r0
 80028c4:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ca:	2210      	movs	r2, #16
 80028cc:	4013      	ands	r3, r2
 80028ce:	d000      	beq.n	80028d2 <HAL_ADC_Init+0xc6>
 80028d0:	e122      	b.n	8002b18 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d000      	beq.n	80028da <HAL_ADC_Init+0xce>
 80028d8:	e11e      	b.n	8002b18 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028de:	4a99      	ldr	r2, [pc, #612]	; (8002b44 <HAL_ADC_Init+0x338>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	2202      	movs	r2, #2
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	0018      	movs	r0, r3
 80028f0:	f7ff ff6a 	bl	80027c8 <LL_ADC_IsEnabled>
 80028f4:	1e03      	subs	r3, r0, #0
 80028f6:	d000      	beq.n	80028fa <HAL_ADC_Init+0xee>
 80028f8:	e0ad      	b.n	8002a56 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	7e1b      	ldrb	r3, [r3, #24]
 8002902:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002904:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	7e5b      	ldrb	r3, [r3, #25]
 800290a:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800290c:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	7e9b      	ldrb	r3, [r3, #26]
 8002912:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8002914:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_ADC_Init+0x118>
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	015b      	lsls	r3, r3, #5
 8002922:	e000      	b.n	8002926 <HAL_ADC_Init+0x11a>
 8002924:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8002926:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800292c:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	2b00      	cmp	r3, #0
 8002934:	da04      	bge.n	8002940 <HAL_ADC_Init+0x134>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	085b      	lsrs	r3, r3, #1
 800293e:	e001      	b.n	8002944 <HAL_ADC_Init+0x138>
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8002944:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	212c      	movs	r1, #44	; 0x2c
 800294a:	5c5b      	ldrb	r3, [r3, r1]
 800294c:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800294e:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8002950:	69ba      	ldr	r2, [r7, #24]
 8002952:	4313      	orrs	r3, r2
 8002954:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2220      	movs	r2, #32
 800295a:	5c9b      	ldrb	r3, [r3, r2]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d115      	bne.n	800298c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	7e9b      	ldrb	r3, [r3, #26]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d105      	bne.n	8002974 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	0252      	lsls	r2, r2, #9
 800296e:	4313      	orrs	r3, r2
 8002970:	61bb      	str	r3, [r7, #24]
 8002972:	e00b      	b.n	800298c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002978:	2220      	movs	r2, #32
 800297a:	431a      	orrs	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002984:	2201      	movs	r2, #1
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d00a      	beq.n	80029aa <HAL_ADC_Init+0x19e>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002998:	23e0      	movs	r3, #224	; 0xe0
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80029a2:	4313      	orrs	r3, r2
 80029a4:	69ba      	ldr	r2, [r7, #24]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a65      	ldr	r2, [pc, #404]	; (8002b48 <HAL_ADC_Init+0x33c>)
 80029b2:	4013      	ands	r3, r2
 80029b4:	0019      	movs	r1, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	69ba      	ldr	r2, [r7, #24]
 80029bc:	430a      	orrs	r2, r1
 80029be:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	0f9b      	lsrs	r3, r3, #30
 80029c6:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029cc:	4313      	orrs	r3, r2
 80029ce:	697a      	ldr	r2, [r7, #20]
 80029d0:	4313      	orrs	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	223c      	movs	r2, #60	; 0x3c
 80029d8:	5c9b      	ldrb	r3, [r3, r2]
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d111      	bne.n	8002a02 <HAL_ADC_Init+0x1f6>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	0f9b      	lsrs	r3, r3, #30
 80029e4:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80029ea:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 80029f0:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 80029f6:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	2201      	movs	r2, #1
 80029fe:	4313      	orrs	r3, r2
 8002a00:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	691b      	ldr	r3, [r3, #16]
 8002a08:	4a50      	ldr	r2, [pc, #320]	; (8002b4c <HAL_ADC_Init+0x340>)
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	0019      	movs	r1, r3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	697a      	ldr	r2, [r7, #20]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	23c0      	movs	r3, #192	; 0xc0
 8002a1e:	061b      	lsls	r3, r3, #24
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d018      	beq.n	8002a56 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8002a28:	2380      	movs	r3, #128	; 0x80
 8002a2a:	05db      	lsls	r3, r3, #23
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d012      	beq.n	8002a56 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8002a34:	2380      	movs	r3, #128	; 0x80
 8002a36:	061b      	lsls	r3, r3, #24
 8002a38:	429a      	cmp	r2, r3
 8002a3a:	d00c      	beq.n	8002a56 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8002a3c:	4b44      	ldr	r3, [pc, #272]	; (8002b50 <HAL_ADC_Init+0x344>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a44      	ldr	r2, [pc, #272]	; (8002b54 <HAL_ADC_Init+0x348>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	0019      	movs	r1, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	23f0      	movs	r3, #240	; 0xf0
 8002a4c:	039b      	lsls	r3, r3, #14
 8002a4e:	401a      	ands	r2, r3
 8002a50:	4b3f      	ldr	r3, [pc, #252]	; (8002b50 <HAL_ADC_Init+0x344>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6818      	ldr	r0, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5e:	001a      	movs	r2, r3
 8002a60:	2100      	movs	r1, #0
 8002a62:	f7ff fdf6 	bl	8002652 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6818      	ldr	r0, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6e:	493a      	ldr	r1, [pc, #232]	; (8002b58 <HAL_ADC_Init+0x34c>)
 8002a70:	001a      	movs	r2, r3
 8002a72:	f7ff fdee 	bl	8002652 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2110      	movs	r1, #16
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	430a      	orrs	r2, r1
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a90:	e018      	b.n	8002ac4 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	691a      	ldr	r2, [r3, #16]
 8002a96:	2380      	movs	r3, #128	; 0x80
 8002a98:	039b      	lsls	r3, r3, #14
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d112      	bne.n	8002ac4 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	69db      	ldr	r3, [r3, #28]
 8002aa8:	3b01      	subs	r3, #1
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	221c      	movs	r2, #28
 8002aae:	4013      	ands	r3, r2
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	4252      	negs	r2, r2
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	0011      	movs	r1, r2
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2100      	movs	r1, #0
 8002aca:	0018      	movs	r0, r3
 8002acc:	f7ff fdde 	bl	800268c <LL_ADC_GetSamplingTimeCommonChannels>
 8002ad0:	0002      	movs	r2, r0
      == hadc->Init.SamplingTimeCommon1)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002ad6:	429a      	cmp	r2, r3
 8002ad8:	d10b      	bne.n	8002af2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae4:	2203      	movs	r2, #3
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	2201      	movs	r2, #1
 8002aea:	431a      	orrs	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	659a      	str	r2, [r3, #88]	; 0x58
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002af0:	e01c      	b.n	8002b2c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002af6:	2212      	movs	r2, #18
 8002af8:	4393      	bics	r3, r2
 8002afa:	2210      	movs	r2, #16
 8002afc:	431a      	orrs	r2, r3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b06:	2201      	movs	r2, #1
 8002b08:	431a      	orrs	r2, r3
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8002b0e:	231f      	movs	r3, #31
 8002b10:	18fb      	adds	r3, r7, r3
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
    if(LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8002b16:	e009      	b.n	8002b2c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b1c:	2210      	movs	r2, #16
 8002b1e:	431a      	orrs	r2, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002b24:	231f      	movs	r3, #31
 8002b26:	18fb      	adds	r3, r7, r3
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8002b2c:	231f      	movs	r3, #31
 8002b2e:	18fb      	adds	r3, r7, r3
 8002b30:	781b      	ldrb	r3, [r3, #0]
}
 8002b32:	0018      	movs	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	b008      	add	sp, #32
 8002b38:	bd80      	pop	{r7, pc}
 8002b3a:	46c0      	nop			; (mov r8, r8)
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	00030d40 	.word	0x00030d40
 8002b44:	fffffefd 	.word	0xfffffefd
 8002b48:	fffe0201 	.word	0xfffe0201
 8002b4c:	1ffffc02 	.word	0x1ffffc02
 8002b50:	40012708 	.word	0x40012708
 8002b54:	ffc3ffff 	.word	0xffc3ffff
 8002b58:	07ffff04 	.word	0x07ffff04

08002b5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *pConfig)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b086      	sub	sp, #24
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
 8002b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b66:	2317      	movs	r3, #23
 8002b68:	18fb      	adds	r3, r7, r3
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002b6e:	2300      	movs	r3, #0
 8002b70:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2254      	movs	r2, #84	; 0x54
 8002b76:	5c9b      	ldrb	r3, [r3, r2]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d101      	bne.n	8002b80 <HAL_ADC_ConfigChannel+0x24>
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	e1c0      	b.n	8002f02 <HAL_ADC_ConfigChannel+0x3a6>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2254      	movs	r2, #84	; 0x54
 8002b84:	2101      	movs	r1, #1
 8002b86:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	0018      	movs	r0, r3
 8002b8e:	f7ff fe2c 	bl	80027ea <LL_ADC_REG_IsConversionOngoing>
 8002b92:	1e03      	subs	r3, r0, #0
 8002b94:	d000      	beq.n	8002b98 <HAL_ADC_ConfigChannel+0x3c>
 8002b96:	e1a3      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d100      	bne.n	8002ba2 <HAL_ADC_ConfigChannel+0x46>
 8002ba0:	e143      	b.n	8002e2a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	2380      	movs	r3, #128	; 0x80
 8002ba8:	061b      	lsls	r3, r3, #24
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d004      	beq.n	8002bb8 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002bb2:	4ac1      	ldr	r2, [pc, #772]	; (8002eb8 <HAL_ADC_ConfigChannel+0x35c>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d108      	bne.n	8002bca <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	0019      	movs	r1, r3
 8002bc2:	0010      	movs	r0, r2
 8002bc4:	f7ff fd99 	bl	80026fa <LL_ADC_REG_SetSequencerChAdd>
 8002bc8:	e0c9      	b.n	8002d5e <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	211f      	movs	r1, #31
 8002bd4:	400b      	ands	r3, r1
 8002bd6:	210f      	movs	r1, #15
 8002bd8:	4099      	lsls	r1, r3
 8002bda:	000b      	movs	r3, r1
 8002bdc:	43db      	mvns	r3, r3
 8002bde:	4013      	ands	r3, r2
 8002be0:	0019      	movs	r1, r3
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	035b      	lsls	r3, r3, #13
 8002be8:	0b5b      	lsrs	r3, r3, #13
 8002bea:	d105      	bne.n	8002bf8 <HAL_ADC_ConfigChannel+0x9c>
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	0e9b      	lsrs	r3, r3, #26
 8002bf2:	221f      	movs	r2, #31
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	e098      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	4013      	ands	r3, r2
 8002c00:	d000      	beq.n	8002c04 <HAL_ADC_ConfigChannel+0xa8>
 8002c02:	e091      	b.n	8002d28 <HAL_ADC_ConfigChannel+0x1cc>
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2202      	movs	r2, #2
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	d000      	beq.n	8002c10 <HAL_ADC_ConfigChannel+0xb4>
 8002c0e:	e089      	b.n	8002d24 <HAL_ADC_ConfigChannel+0x1c8>
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2204      	movs	r2, #4
 8002c16:	4013      	ands	r3, r2
 8002c18:	d000      	beq.n	8002c1c <HAL_ADC_ConfigChannel+0xc0>
 8002c1a:	e081      	b.n	8002d20 <HAL_ADC_ConfigChannel+0x1c4>
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2208      	movs	r2, #8
 8002c22:	4013      	ands	r3, r2
 8002c24:	d000      	beq.n	8002c28 <HAL_ADC_ConfigChannel+0xcc>
 8002c26:	e079      	b.n	8002d1c <HAL_ADC_ConfigChannel+0x1c0>
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2210      	movs	r2, #16
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d000      	beq.n	8002c34 <HAL_ADC_ConfigChannel+0xd8>
 8002c32:	e071      	b.n	8002d18 <HAL_ADC_ConfigChannel+0x1bc>
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d000      	beq.n	8002c40 <HAL_ADC_ConfigChannel+0xe4>
 8002c3e:	e069      	b.n	8002d14 <HAL_ADC_ConfigChannel+0x1b8>
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2240      	movs	r2, #64	; 0x40
 8002c46:	4013      	ands	r3, r2
 8002c48:	d000      	beq.n	8002c4c <HAL_ADC_ConfigChannel+0xf0>
 8002c4a:	e061      	b.n	8002d10 <HAL_ADC_ConfigChannel+0x1b4>
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2280      	movs	r2, #128	; 0x80
 8002c52:	4013      	ands	r3, r2
 8002c54:	d000      	beq.n	8002c58 <HAL_ADC_ConfigChannel+0xfc>
 8002c56:	e059      	b.n	8002d0c <HAL_ADC_ConfigChannel+0x1b0>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4013      	ands	r3, r2
 8002c62:	d151      	bne.n	8002d08 <HAL_ADC_ConfigChannel+0x1ac>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d149      	bne.n	8002d04 <HAL_ADC_ConfigChannel+0x1a8>
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	00db      	lsls	r3, r3, #3
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d141      	bne.n	8002d00 <HAL_ADC_ConfigChannel+0x1a4>
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681a      	ldr	r2, [r3, #0]
 8002c80:	2380      	movs	r3, #128	; 0x80
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	4013      	ands	r3, r2
 8002c86:	d139      	bne.n	8002cfc <HAL_ADC_ConfigChannel+0x1a0>
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	681a      	ldr	r2, [r3, #0]
 8002c8c:	2380      	movs	r3, #128	; 0x80
 8002c8e:	015b      	lsls	r3, r3, #5
 8002c90:	4013      	ands	r3, r2
 8002c92:	d131      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x19c>
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	681a      	ldr	r2, [r3, #0]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	019b      	lsls	r3, r3, #6
 8002c9c:	4013      	ands	r3, r2
 8002c9e:	d129      	bne.n	8002cf4 <HAL_ADC_ConfigChannel+0x198>
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	2380      	movs	r3, #128	; 0x80
 8002ca6:	01db      	lsls	r3, r3, #7
 8002ca8:	4013      	ands	r3, r2
 8002caa:	d121      	bne.n	8002cf0 <HAL_ADC_ConfigChannel+0x194>
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2380      	movs	r3, #128	; 0x80
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	d119      	bne.n	8002cec <HAL_ADC_ConfigChannel+0x190>
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	2380      	movs	r3, #128	; 0x80
 8002cbe:	025b      	lsls	r3, r3, #9
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	d111      	bne.n	8002ce8 <HAL_ADC_ConfigChannel+0x18c>
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	2380      	movs	r3, #128	; 0x80
 8002cca:	029b      	lsls	r3, r3, #10
 8002ccc:	4013      	ands	r3, r2
 8002cce:	d109      	bne.n	8002ce4 <HAL_ADC_ConfigChannel+0x188>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	2380      	movs	r3, #128	; 0x80
 8002cd6:	02db      	lsls	r3, r3, #11
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d001      	beq.n	8002ce0 <HAL_ADC_ConfigChannel+0x184>
 8002cdc:	2312      	movs	r3, #18
 8002cde:	e024      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	e022      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002ce4:	2311      	movs	r3, #17
 8002ce6:	e020      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002ce8:	2310      	movs	r3, #16
 8002cea:	e01e      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002cec:	230f      	movs	r3, #15
 8002cee:	e01c      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002cf0:	230e      	movs	r3, #14
 8002cf2:	e01a      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002cf4:	230d      	movs	r3, #13
 8002cf6:	e018      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002cf8:	230c      	movs	r3, #12
 8002cfa:	e016      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002cfc:	230b      	movs	r3, #11
 8002cfe:	e014      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d00:	230a      	movs	r3, #10
 8002d02:	e012      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d04:	2309      	movs	r3, #9
 8002d06:	e010      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d08:	2308      	movs	r3, #8
 8002d0a:	e00e      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d0c:	2307      	movs	r3, #7
 8002d0e:	e00c      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d10:	2306      	movs	r3, #6
 8002d12:	e00a      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d14:	2305      	movs	r3, #5
 8002d16:	e008      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d18:	2304      	movs	r3, #4
 8002d1a:	e006      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d1c:	2303      	movs	r3, #3
 8002d1e:	e004      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e002      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_ADC_ConfigChannel+0x1ce>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	683a      	ldr	r2, [r7, #0]
 8002d2c:	6852      	ldr	r2, [r2, #4]
 8002d2e:	201f      	movs	r0, #31
 8002d30:	4002      	ands	r2, r0
 8002d32:	4093      	lsls	r3, r2
 8002d34:	000a      	movs	r2, r1
 8002d36:	431a      	orrs	r2, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	089b      	lsrs	r3, r3, #2
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	69db      	ldr	r3, [r3, #28]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d808      	bhi.n	8002d5e <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6818      	ldr	r0, [r3, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	6859      	ldr	r1, [r3, #4]
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	001a      	movs	r2, r3
 8002d5a:	f7ff fcae 	bl	80026ba <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6818      	ldr	r0, [r3, #0]
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	6819      	ldr	r1, [r3, #0]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	001a      	movs	r2, r3
 8002d6c:	f7ff fce8 	bl	8002740 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	db00      	blt.n	8002d7a <HAL_ADC_ConfigChannel+0x21e>
 8002d78:	e0bc      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002d7a:	4b50      	ldr	r3, [pc, #320]	; (8002ebc <HAL_ADC_ConfigChannel+0x360>)
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f7ff fc5b 	bl	8002638 <LL_ADC_GetCommonPathInternalCh>
 8002d82:	0003      	movs	r3, r0
 8002d84:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a4d      	ldr	r2, [pc, #308]	; (8002ec0 <HAL_ADC_ConfigChannel+0x364>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d122      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	2380      	movs	r3, #128	; 0x80
 8002d94:	041b      	lsls	r3, r3, #16
 8002d96:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002d98:	d11d      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	2280      	movs	r2, #128	; 0x80
 8002d9e:	0412      	lsls	r2, r2, #16
 8002da0:	4313      	orrs	r3, r2
 8002da2:	4a46      	ldr	r2, [pc, #280]	; (8002ebc <HAL_ADC_ConfigChannel+0x360>)
 8002da4:	0019      	movs	r1, r3
 8002da6:	0010      	movs	r0, r2
 8002da8:	f7ff fc32 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002dac:	4b45      	ldr	r3, [pc, #276]	; (8002ec4 <HAL_ADC_ConfigChannel+0x368>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4945      	ldr	r1, [pc, #276]	; (8002ec8 <HAL_ADC_ConfigChannel+0x36c>)
 8002db2:	0018      	movs	r0, r3
 8002db4:	f7fd f9b2 	bl	800011c <__udivsi3>
 8002db8:	0003      	movs	r3, r0
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	0013      	movs	r3, r2
 8002dbe:	005b      	lsls	r3, r3, #1
 8002dc0:	189b      	adds	r3, r3, r2
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dc6:	e002      	b.n	8002dce <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	3b01      	subs	r3, #1
 8002dcc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1f9      	bne.n	8002dc8 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002dd4:	e08e      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a3c      	ldr	r2, [pc, #240]	; (8002ecc <HAL_ADC_ConfigChannel+0x370>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d10e      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	2380      	movs	r3, #128	; 0x80
 8002de4:	045b      	lsls	r3, r3, #17
 8002de6:	4013      	ands	r3, r2
 8002de8:	d109      	bne.n	8002dfe <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	2280      	movs	r2, #128	; 0x80
 8002dee:	0452      	lsls	r2, r2, #17
 8002df0:	4313      	orrs	r3, r2
 8002df2:	4a32      	ldr	r2, [pc, #200]	; (8002ebc <HAL_ADC_ConfigChannel+0x360>)
 8002df4:	0019      	movs	r1, r3
 8002df6:	0010      	movs	r0, r2
 8002df8:	f7ff fc0a 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002dfc:	e07a      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a33      	ldr	r2, [pc, #204]	; (8002ed0 <HAL_ADC_ConfigChannel+0x374>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d000      	beq.n	8002e0a <HAL_ADC_ConfigChannel+0x2ae>
 8002e08:	e074      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002e0a:	693a      	ldr	r2, [r7, #16]
 8002e0c:	2380      	movs	r3, #128	; 0x80
 8002e0e:	03db      	lsls	r3, r3, #15
 8002e10:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8002e12:	d000      	beq.n	8002e16 <HAL_ADC_ConfigChannel+0x2ba>
 8002e14:	e06e      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	2280      	movs	r2, #128	; 0x80
 8002e1a:	03d2      	lsls	r2, r2, #15
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_ADC_ConfigChannel+0x360>)
 8002e20:	0019      	movs	r1, r3
 8002e22:	0010      	movs	r0, r2
 8002e24:	f7ff fbf4 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002e28:	e064      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691a      	ldr	r2, [r3, #16]
 8002e2e:	2380      	movs	r3, #128	; 0x80
 8002e30:	061b      	lsls	r3, r3, #24
 8002e32:	429a      	cmp	r2, r3
 8002e34:	d004      	beq.n	8002e40 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002e3a:	4a1f      	ldr	r2, [pc, #124]	; (8002eb8 <HAL_ADC_ConfigChannel+0x35c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d107      	bne.n	8002e50 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681a      	ldr	r2, [r3, #0]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	0019      	movs	r1, r3
 8002e4a:	0010      	movs	r0, r2
 8002e4c:	f7ff fc66 	bl	800271c <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	da4d      	bge.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e58:	4b18      	ldr	r3, [pc, #96]	; (8002ebc <HAL_ADC_ConfigChannel+0x360>)
 8002e5a:	0018      	movs	r0, r3
 8002e5c:	f7ff fbec 	bl	8002638 <LL_ADC_GetCommonPathInternalCh>
 8002e60:	0003      	movs	r3, r0
 8002e62:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a15      	ldr	r2, [pc, #84]	; (8002ec0 <HAL_ADC_ConfigChannel+0x364>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d108      	bne.n	8002e80 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4a18      	ldr	r2, [pc, #96]	; (8002ed4 <HAL_ADC_ConfigChannel+0x378>)
 8002e72:	4013      	ands	r3, r2
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_ADC_ConfigChannel+0x360>)
 8002e76:	0019      	movs	r1, r3
 8002e78:	0010      	movs	r0, r2
 8002e7a:	f7ff fbc9 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002e7e:	e039      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a11      	ldr	r2, [pc, #68]	; (8002ecc <HAL_ADC_ConfigChannel+0x370>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d108      	bne.n	8002e9c <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	4a12      	ldr	r2, [pc, #72]	; (8002ed8 <HAL_ADC_ConfigChannel+0x37c>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	4a0a      	ldr	r2, [pc, #40]	; (8002ebc <HAL_ADC_ConfigChannel+0x360>)
 8002e92:	0019      	movs	r1, r3
 8002e94:	0010      	movs	r0, r2
 8002e96:	f7ff fbbb 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002e9a:	e02b      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a0b      	ldr	r2, [pc, #44]	; (8002ed0 <HAL_ADC_ConfigChannel+0x374>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d126      	bne.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <HAL_ADC_ConfigChannel+0x380>)
 8002eaa:	4013      	ands	r3, r2
 8002eac:	4a03      	ldr	r2, [pc, #12]	; (8002ebc <HAL_ADC_ConfigChannel+0x360>)
 8002eae:	0019      	movs	r1, r3
 8002eb0:	0010      	movs	r0, r2
 8002eb2:	f7ff fbad 	bl	8002610 <LL_ADC_SetCommonPathInternalCh>
 8002eb6:	e01d      	b.n	8002ef4 <HAL_ADC_ConfigChannel+0x398>
 8002eb8:	80000004 	.word	0x80000004
 8002ebc:	40012708 	.word	0x40012708
 8002ec0:	b0001000 	.word	0xb0001000
 8002ec4:	20000000 	.word	0x20000000
 8002ec8:	00030d40 	.word	0x00030d40
 8002ecc:	b8004000 	.word	0xb8004000
 8002ed0:	b4002000 	.word	0xb4002000
 8002ed4:	ff7fffff 	.word	0xff7fffff
 8002ed8:	feffffff 	.word	0xfeffffff
 8002edc:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	2220      	movs	r2, #32
 8002ee6:	431a      	orrs	r2, r3
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002eec:	2317      	movs	r3, #23
 8002eee:	18fb      	adds	r3, r7, r3
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2254      	movs	r2, #84	; 0x54
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8002efc:	2317      	movs	r3, #23
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	781b      	ldrb	r3, [r3, #0]
}
 8002f02:	0018      	movs	r0, r3
 8002f04:	46bd      	mov	sp, r7
 8002f06:	b006      	add	sp, #24
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	46c0      	nop			; (mov r8, r8)

08002f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	0002      	movs	r2, r0
 8002f14:	1dfb      	adds	r3, r7, #7
 8002f16:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	1dfb      	adds	r3, r7, #7
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	2b7f      	cmp	r3, #127	; 0x7f
 8002f1e:	d809      	bhi.n	8002f34 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f20:	1dfb      	adds	r3, r7, #7
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	001a      	movs	r2, r3
 8002f26:	231f      	movs	r3, #31
 8002f28:	401a      	ands	r2, r3
 8002f2a:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <__NVIC_EnableIRQ+0x30>)
 8002f2c:	2101      	movs	r1, #1
 8002f2e:	4091      	lsls	r1, r2
 8002f30:	000a      	movs	r2, r1
 8002f32:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	46bd      	mov	sp, r7
 8002f38:	b002      	add	sp, #8
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	e000e100 	.word	0xe000e100

08002f40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f40:	b590      	push	{r4, r7, lr}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	0002      	movs	r2, r0
 8002f48:	6039      	str	r1, [r7, #0]
 8002f4a:	1dfb      	adds	r3, r7, #7
 8002f4c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002f4e:	1dfb      	adds	r3, r7, #7
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b7f      	cmp	r3, #127	; 0x7f
 8002f54:	d828      	bhi.n	8002fa8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f56:	4a2f      	ldr	r2, [pc, #188]	; (8003014 <__NVIC_SetPriority+0xd4>)
 8002f58:	1dfb      	adds	r3, r7, #7
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	b25b      	sxtb	r3, r3
 8002f5e:	089b      	lsrs	r3, r3, #2
 8002f60:	33c0      	adds	r3, #192	; 0xc0
 8002f62:	009b      	lsls	r3, r3, #2
 8002f64:	589b      	ldr	r3, [r3, r2]
 8002f66:	1dfa      	adds	r2, r7, #7
 8002f68:	7812      	ldrb	r2, [r2, #0]
 8002f6a:	0011      	movs	r1, r2
 8002f6c:	2203      	movs	r2, #3
 8002f6e:	400a      	ands	r2, r1
 8002f70:	00d2      	lsls	r2, r2, #3
 8002f72:	21ff      	movs	r1, #255	; 0xff
 8002f74:	4091      	lsls	r1, r2
 8002f76:	000a      	movs	r2, r1
 8002f78:	43d2      	mvns	r2, r2
 8002f7a:	401a      	ands	r2, r3
 8002f7c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	019b      	lsls	r3, r3, #6
 8002f82:	22ff      	movs	r2, #255	; 0xff
 8002f84:	401a      	ands	r2, r3
 8002f86:	1dfb      	adds	r3, r7, #7
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	4003      	ands	r3, r0
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002f94:	481f      	ldr	r0, [pc, #124]	; (8003014 <__NVIC_SetPriority+0xd4>)
 8002f96:	1dfb      	adds	r3, r7, #7
 8002f98:	781b      	ldrb	r3, [r3, #0]
 8002f9a:	b25b      	sxtb	r3, r3
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	33c0      	adds	r3, #192	; 0xc0
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002fa6:	e031      	b.n	800300c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002fa8:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <__NVIC_SetPriority+0xd8>)
 8002faa:	1dfb      	adds	r3, r7, #7
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	0019      	movs	r1, r3
 8002fb0:	230f      	movs	r3, #15
 8002fb2:	400b      	ands	r3, r1
 8002fb4:	3b08      	subs	r3, #8
 8002fb6:	089b      	lsrs	r3, r3, #2
 8002fb8:	3306      	adds	r3, #6
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	18d3      	adds	r3, r2, r3
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	1dfa      	adds	r2, r7, #7
 8002fc4:	7812      	ldrb	r2, [r2, #0]
 8002fc6:	0011      	movs	r1, r2
 8002fc8:	2203      	movs	r2, #3
 8002fca:	400a      	ands	r2, r1
 8002fcc:	00d2      	lsls	r2, r2, #3
 8002fce:	21ff      	movs	r1, #255	; 0xff
 8002fd0:	4091      	lsls	r1, r2
 8002fd2:	000a      	movs	r2, r1
 8002fd4:	43d2      	mvns	r2, r2
 8002fd6:	401a      	ands	r2, r3
 8002fd8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002fda:	683b      	ldr	r3, [r7, #0]
 8002fdc:	019b      	lsls	r3, r3, #6
 8002fde:	22ff      	movs	r2, #255	; 0xff
 8002fe0:	401a      	ands	r2, r3
 8002fe2:	1dfb      	adds	r3, r7, #7
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	0018      	movs	r0, r3
 8002fe8:	2303      	movs	r3, #3
 8002fea:	4003      	ands	r3, r0
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ff0:	4809      	ldr	r0, [pc, #36]	; (8003018 <__NVIC_SetPriority+0xd8>)
 8002ff2:	1dfb      	adds	r3, r7, #7
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	001c      	movs	r4, r3
 8002ff8:	230f      	movs	r3, #15
 8002ffa:	4023      	ands	r3, r4
 8002ffc:	3b08      	subs	r3, #8
 8002ffe:	089b      	lsrs	r3, r3, #2
 8003000:	430a      	orrs	r2, r1
 8003002:	3306      	adds	r3, #6
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	18c3      	adds	r3, r0, r3
 8003008:	3304      	adds	r3, #4
 800300a:	601a      	str	r2, [r3, #0]
}
 800300c:	46c0      	nop			; (mov r8, r8)
 800300e:	46bd      	mov	sp, r7
 8003010:	b003      	add	sp, #12
 8003012:	bd90      	pop	{r4, r7, pc}
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
 8003026:	210f      	movs	r1, #15
 8003028:	187b      	adds	r3, r7, r1
 800302a:	1c02      	adds	r2, r0, #0
 800302c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800302e:	68ba      	ldr	r2, [r7, #8]
 8003030:	187b      	adds	r3, r7, r1
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	b25b      	sxtb	r3, r3
 8003036:	0011      	movs	r1, r2
 8003038:	0018      	movs	r0, r3
 800303a:	f7ff ff81 	bl	8002f40 <__NVIC_SetPriority>
}
 800303e:	46c0      	nop			; (mov r8, r8)
 8003040:	46bd      	mov	sp, r7
 8003042:	b004      	add	sp, #16
 8003044:	bd80      	pop	{r7, pc}

08003046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003046:	b580      	push	{r7, lr}
 8003048:	b082      	sub	sp, #8
 800304a:	af00      	add	r7, sp, #0
 800304c:	0002      	movs	r2, r0
 800304e:	1dfb      	adds	r3, r7, #7
 8003050:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003052:	1dfb      	adds	r3, r7, #7
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	b25b      	sxtb	r3, r3
 8003058:	0018      	movs	r0, r3
 800305a:	f7ff ff57 	bl	8002f0c <__NVIC_EnableIRQ>
}
 800305e:	46c0      	nop			; (mov r8, r8)
 8003060:	46bd      	mov	sp, r7
 8003062:	b002      	add	sp, #8
 8003064:	bd80      	pop	{r7, pc}
	...

08003068 <HAL_DMA_Init>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003068:	b580      	push	{r7, lr}
 800306a:	b082      	sub	sp, #8
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e077      	b.n	800316a <HAL_DMA_Init+0x102>
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a3d      	ldr	r2, [pc, #244]	; (8003174 <HAL_DMA_Init+0x10c>)
 8003080:	4694      	mov	ip, r2
 8003082:	4463      	add	r3, ip
 8003084:	2114      	movs	r1, #20
 8003086:	0018      	movs	r0, r3
 8003088:	f7fd f848 	bl	800011c <__udivsi3>
 800308c:	0003      	movs	r3, r0
 800308e:	009a      	lsls	r2, r3, #2
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	641a      	str	r2, [r3, #64]	; 0x40
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2225      	movs	r2, #37	; 0x25
 8003098:	2102      	movs	r1, #2
 800309a:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4934      	ldr	r1, [pc, #208]	; (8003178 <HAL_DMA_Init+0x110>)
 80030a8:	400a      	ands	r2, r1
 80030aa:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	6819      	ldr	r1, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	689a      	ldr	r2, [r3, #8]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	431a      	orrs	r2, r3
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	431a      	orrs	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	699b      	ldr	r3, [r3, #24]
 80030cc:	431a      	orrs	r2, r3
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	431a      	orrs	r2, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	431a      	orrs	r2, r3
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	0018      	movs	r0, r3
 80030e6:	f000 f9c1 	bl	800346c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	2380      	movs	r3, #128	; 0x80
 80030f0:	01db      	lsls	r3, r3, #7
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d102      	bne.n	80030fc <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	2200      	movs	r2, #0
 80030fa:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685a      	ldr	r2, [r3, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003104:	213f      	movs	r1, #63	; 0x3f
 8003106:	400a      	ands	r2, r1
 8003108:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800310e:	687a      	ldr	r2, [r7, #4]
 8003110:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003112:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d011      	beq.n	8003140 <HAL_DMA_Init+0xd8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	2b04      	cmp	r3, #4
 8003122:	d80d      	bhi.n	8003140 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	0018      	movs	r0, r3
 8003128:	f000 f9cc 	bl	80034c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003130:	2200      	movs	r2, #0
 8003132:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003138:	687a      	ldr	r2, [r7, #4]
 800313a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800313c:	605a      	str	r2, [r3, #4]
 800313e:	e008      	b.n	8003152 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2200      	movs	r2, #0
 8003150:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2225      	movs	r2, #37	; 0x25
 800315c:	2101      	movs	r1, #1
 800315e:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2224      	movs	r2, #36	; 0x24
 8003164:	2100      	movs	r1, #0
 8003166:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	0018      	movs	r0, r3
 800316c:	46bd      	mov	sp, r7
 800316e:	b002      	add	sp, #8
 8003170:	bd80      	pop	{r7, pc}
 8003172:	46c0      	nop			; (mov r8, r8)
 8003174:	bffdfff8 	.word	0xbffdfff8
 8003178:	ffff800f 	.word	0xffff800f

0800317c <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b086      	sub	sp, #24
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	60b9      	str	r1, [r7, #8]
 8003186:	607a      	str	r2, [r7, #4]
 8003188:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800318a:	2317      	movs	r3, #23
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	2200      	movs	r2, #0
 8003190:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2224      	movs	r2, #36	; 0x24
 8003196:	5c9b      	ldrb	r3, [r3, r2]
 8003198:	2b01      	cmp	r3, #1
 800319a:	d101      	bne.n	80031a0 <HAL_DMA_Start_IT+0x24>
 800319c:	2302      	movs	r3, #2
 800319e:	e06f      	b.n	8003280 <HAL_DMA_Start_IT+0x104>
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	2224      	movs	r2, #36	; 0x24
 80031a4:	2101      	movs	r1, #1
 80031a6:	5499      	strb	r1, [r3, r2]

  if (hdma->State == HAL_DMA_STATE_READY)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2225      	movs	r2, #37	; 0x25
 80031ac:	5c9b      	ldrb	r3, [r3, r2]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	2b01      	cmp	r3, #1
 80031b2:	d157      	bne.n	8003264 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	2225      	movs	r2, #37	; 0x25
 80031b8:	2102      	movs	r1, #2
 80031ba:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2200      	movs	r2, #0
 80031c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	681a      	ldr	r2, [r3, #0]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	2101      	movs	r1, #1
 80031ce:	438a      	bics	r2, r1
 80031d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68b9      	ldr	r1, [r7, #8]
 80031d8:	68f8      	ldr	r0, [r7, #12]
 80031da:	f000 f907 	bl	80033ec <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d008      	beq.n	80031f8 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	210e      	movs	r1, #14
 80031f2:	430a      	orrs	r2, r1
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	e00f      	b.n	8003218 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	2104      	movs	r1, #4
 8003204:	438a      	bics	r2, r1
 8003206:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	210a      	movs	r1, #10
 8003214:	430a      	orrs	r2, r1
 8003216:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	2380      	movs	r3, #128	; 0x80
 8003220:	025b      	lsls	r3, r3, #9
 8003222:	4013      	ands	r3, r2
 8003224:	d008      	beq.n	8003238 <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	0049      	lsls	r1, r1, #1
 8003234:	430a      	orrs	r2, r1
 8003236:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800323c:	2b00      	cmp	r3, #0
 800323e:	d008      	beq.n	8003252 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800324a:	2180      	movs	r1, #128	; 0x80
 800324c:	0049      	lsls	r1, r1, #1
 800324e:	430a      	orrs	r2, r1
 8003250:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2101      	movs	r1, #1
 800325e:	430a      	orrs	r2, r1
 8003260:	601a      	str	r2, [r3, #0]
 8003262:	e00a      	b.n	800327a <HAL_DMA_Start_IT+0xfe>
  }
  else
  {
    /* Change the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	2280      	movs	r2, #128	; 0x80
 8003268:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2224      	movs	r2, #36	; 0x24
 800326e:	2100      	movs	r1, #0
 8003270:	5499      	strb	r1, [r3, r2]

    /* Return error status */
    status = HAL_ERROR;
 8003272:	2317      	movs	r3, #23
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800327a:	2317      	movs	r3, #23
 800327c:	18fb      	adds	r3, r7, r3
 800327e:	781b      	ldrb	r3, [r3, #0]
}
 8003280:	0018      	movs	r0, r3
 8003282:	46bd      	mov	sp, r7
 8003284:	b006      	add	sp, #24
 8003286:	bd80      	pop	{r7, pc}

08003288 <HAL_DMA_IRQHandler>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
#if defined(DMA2)
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
#else
  uint32_t flag_it = DMA1->ISR;
 8003290:	4b55      	ldr	r3, [pc, #340]	; (80033e8 <HAL_DMA_IRQHandler+0x160>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */
  uint32_t source_it = hdma->Instance->CCR;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	221c      	movs	r2, #28
 80032a4:	4013      	ands	r3, r2
 80032a6:	2204      	movs	r2, #4
 80032a8:	409a      	lsls	r2, r3
 80032aa:	0013      	movs	r3, r2
 80032ac:	68fa      	ldr	r2, [r7, #12]
 80032ae:	4013      	ands	r3, r2
 80032b0:	d027      	beq.n	8003302 <HAL_DMA_IRQHandler+0x7a>
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	2204      	movs	r2, #4
 80032b6:	4013      	ands	r3, r2
 80032b8:	d023      	beq.n	8003302 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2220      	movs	r2, #32
 80032c2:	4013      	ands	r3, r2
 80032c4:	d107      	bne.n	80032d6 <HAL_DMA_IRQHandler+0x4e>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	681a      	ldr	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	2104      	movs	r1, #4
 80032d2:	438a      	bics	r2, r1
 80032d4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
#if defined(DMA2)
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
#else
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU)));
 80032d6:	4b44      	ldr	r3, [pc, #272]	; (80033e8 <HAL_DMA_IRQHandler+0x160>)
 80032d8:	6859      	ldr	r1, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	221c      	movs	r2, #28
 80032e0:	4013      	ands	r3, r2
 80032e2:	2204      	movs	r2, #4
 80032e4:	409a      	lsls	r2, r3
 80032e6:	4b40      	ldr	r3, [pc, #256]	; (80033e8 <HAL_DMA_IRQHandler+0x160>)
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if (hdma->XferHalfCpltCallback != NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d100      	bne.n	80032f6 <HAL_DMA_IRQHandler+0x6e>
 80032f4:	e073      	b.n	80033de <HAL_DMA_IRQHandler+0x156>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	0010      	movs	r0, r2
 80032fe:	4798      	blx	r3
      if (hdma->XferHalfCpltCallback != NULL)
 8003300:	e06d      	b.n	80033de <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)))) && (0U != (source_it & DMA_IT_TC)))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003306:	221c      	movs	r2, #28
 8003308:	4013      	ands	r3, r2
 800330a:	2202      	movs	r2, #2
 800330c:	409a      	lsls	r2, r3
 800330e:	0013      	movs	r3, r2
 8003310:	68fa      	ldr	r2, [r7, #12]
 8003312:	4013      	ands	r3, r2
 8003314:	d02e      	beq.n	8003374 <HAL_DMA_IRQHandler+0xec>
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2202      	movs	r2, #2
 800331a:	4013      	ands	r3, r2
 800331c:	d02a      	beq.n	8003374 <HAL_DMA_IRQHandler+0xec>
  {
      if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	2220      	movs	r2, #32
 8003326:	4013      	ands	r3, r2
 8003328:	d10b      	bne.n	8003342 <HAL_DMA_IRQHandler+0xba>
      {
        /* Disable the transfer complete and error interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	210a      	movs	r1, #10
 8003336:	438a      	bics	r2, r1
 8003338:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2225      	movs	r2, #37	; 0x25
 800333e:	2101      	movs	r1, #1
 8003340:	5499      	strb	r1, [r3, r2]
      }
      /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU)));
 8003342:	4b29      	ldr	r3, [pc, #164]	; (80033e8 <HAL_DMA_IRQHandler+0x160>)
 8003344:	6859      	ldr	r1, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800334a:	221c      	movs	r2, #28
 800334c:	4013      	ands	r3, r2
 800334e:	2202      	movs	r2, #2
 8003350:	409a      	lsls	r2, r3
 8003352:	4b25      	ldr	r3, [pc, #148]	; (80033e8 <HAL_DMA_IRQHandler+0x160>)
 8003354:	430a      	orrs	r2, r1
 8003356:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2224      	movs	r2, #36	; 0x24
 800335c:	2100      	movs	r1, #0
 800335e:	5499      	strb	r1, [r3, r2]

      if (hdma->XferCpltCallback != NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d03a      	beq.n	80033de <HAL_DMA_IRQHandler+0x156>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	0010      	movs	r0, r2
 8003370:	4798      	blx	r3
      if (hdma->XferCpltCallback != NULL)
 8003372:	e034      	b.n	80033de <HAL_DMA_IRQHandler+0x156>
      }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	221c      	movs	r2, #28
 800337a:	4013      	ands	r3, r2
 800337c:	2208      	movs	r2, #8
 800337e:	409a      	lsls	r2, r3
 8003380:	0013      	movs	r3, r2
 8003382:	68fa      	ldr	r2, [r7, #12]
 8003384:	4013      	ands	r3, r2
 8003386:	d02b      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x158>
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	2208      	movs	r2, #8
 800338c:	4013      	ands	r3, r2
 800338e:	d027      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	210e      	movs	r1, #14
 800339c:	438a      	bics	r2, r1
 800339e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 80033a0:	4b11      	ldr	r3, [pc, #68]	; (80033e8 <HAL_DMA_IRQHandler+0x160>)
 80033a2:	6859      	ldr	r1, [r3, #4]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033a8:	221c      	movs	r2, #28
 80033aa:	4013      	ands	r3, r2
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	4b0d      	ldr	r3, [pc, #52]	; (80033e8 <HAL_DMA_IRQHandler+0x160>)
 80033b2:	430a      	orrs	r2, r1
 80033b4:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2201      	movs	r2, #1
 80033ba:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2225      	movs	r2, #37	; 0x25
 80033c0:	2101      	movs	r1, #1
 80033c2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2224      	movs	r2, #36	; 0x24
 80033c8:	2100      	movs	r1, #0
 80033ca:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	0010      	movs	r0, r2
 80033dc:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80033de:	46c0      	nop			; (mov r8, r8)
 80033e0:	46c0      	nop			; (mov r8, r8)
}
 80033e2:	46bd      	mov	sp, r7
 80033e4:	b004      	add	sp, #16
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40020000 	.word	0x40020000

080033ec <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60f8      	str	r0, [r7, #12]
 80033f4:	60b9      	str	r1, [r7, #8]
 80033f6:	607a      	str	r2, [r7, #4]
 80033f8:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033fe:	68fa      	ldr	r2, [r7, #12]
 8003400:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8003402:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003408:	2b00      	cmp	r3, #0
 800340a:	d004      	beq.n	8003416 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8003414:	605a      	str	r2, [r3, #4]

  /* Clear all flags */
#if defined(DMA2)
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1CU)));
 8003416:	4b14      	ldr	r3, [pc, #80]	; (8003468 <DMA_SetConfig+0x7c>)
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341e:	221c      	movs	r2, #28
 8003420:	4013      	ands	r3, r2
 8003422:	2201      	movs	r2, #1
 8003424:	409a      	lsls	r2, r3
 8003426:	4b10      	ldr	r3, [pc, #64]	; (8003468 <DMA_SetConfig+0x7c>)
 8003428:	430a      	orrs	r2, r1
 800342a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	2b10      	cmp	r3, #16
 800343a:	d108      	bne.n	800344e <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68ba      	ldr	r2, [r7, #8]
 800344a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800344c:	e007      	b.n	800345e <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	60da      	str	r2, [r3, #12]
}
 800345e:	46c0      	nop			; (mov r8, r8)
 8003460:	46bd      	mov	sp, r7
 8003462:	b004      	add	sp, #16
 8003464:	bd80      	pop	{r7, pc}
 8003466:	46c0      	nop			; (mov r8, r8)
 8003468:	40020000 	.word	0x40020000

0800346c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
    /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
    channel_number = (((((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U) + 7U);
  }
#else
  /* Associate a DMA Channel to a DMAMUX channel */
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	089b      	lsrs	r3, r3, #2
 800347a:	4a10      	ldr	r2, [pc, #64]	; (80034bc <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 800347c:	4694      	mov	ip, r2
 800347e:	4463      	add	r3, ip
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	001a      	movs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	645a      	str	r2, [r3, #68]	; 0x44

  /* Prepare channel_number used for DMAmuxChannelStatusMask computation */
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	001a      	movs	r2, r3
 800348e:	23ff      	movs	r3, #255	; 0xff
 8003490:	4013      	ands	r3, r2
 8003492:	3b08      	subs	r3, #8
 8003494:	2114      	movs	r1, #20
 8003496:	0018      	movs	r0, r3
 8003498:	f7fc fe40 	bl	800011c <__udivsi3>
 800349c:	0003      	movs	r3, r0
 800349e:	60fb      	str	r3, [r7, #12]
#endif /* DMA2 */

  /* Initialize the field DMAmuxChannelStatus to DMAMUX1_ChannelStatus base */
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a07      	ldr	r2, [pc, #28]	; (80034c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80034a4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Initialize the field DMAmuxChannelStatusMask with the corresponding index of the DMAMUX channel selected for the current ChannelIndex */
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	221f      	movs	r2, #31
 80034aa:	4013      	ands	r3, r2
 80034ac:	2201      	movs	r2, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80034b4:	46c0      	nop			; (mov r8, r8)
 80034b6:	46bd      	mov	sp, r7
 80034b8:	b004      	add	sp, #16
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	10008200 	.word	0x10008200
 80034c0:	40020880 	.word	0x40020880

080034c4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *             the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	223f      	movs	r2, #63	; 0x3f
 80034d2:	4013      	ands	r3, r2
 80034d4:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	4a0a      	ldr	r2, [pc, #40]	; (8003504 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80034da:	4694      	mov	ip, r2
 80034dc:	4463      	add	r3, ip
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	001a      	movs	r2, r3
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a07      	ldr	r2, [pc, #28]	; (8003508 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	3b01      	subs	r3, #1
 80034f0:	2203      	movs	r2, #3
 80034f2:	4013      	ands	r3, r2
 80034f4:	2201      	movs	r2, #1
 80034f6:	409a      	lsls	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80034fc:	46c0      	nop			; (mov r8, r8)
 80034fe:	46bd      	mov	sp, r7
 8003500:	b004      	add	sp, #16
 8003502:	bd80      	pop	{r7, pc}
 8003504:	1000823f 	.word	0x1000823f
 8003508:	40020940 	.word	0x40020940

0800350c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b086      	sub	sp, #24
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003516:	2300      	movs	r3, #0
 8003518:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800351a:	e147      	b.n	80037ac <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2101      	movs	r1, #1
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4091      	lsls	r1, r2
 8003526:	000a      	movs	r2, r1
 8003528:	4013      	ands	r3, r2
 800352a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d100      	bne.n	8003534 <HAL_GPIO_Init+0x28>
 8003532:	e138      	b.n	80037a6 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	2203      	movs	r2, #3
 800353a:	4013      	ands	r3, r2
 800353c:	2b01      	cmp	r3, #1
 800353e:	d005      	beq.n	800354c <HAL_GPIO_Init+0x40>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2203      	movs	r2, #3
 8003546:	4013      	ands	r3, r2
 8003548:	2b02      	cmp	r3, #2
 800354a:	d130      	bne.n	80035ae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	2203      	movs	r2, #3
 8003558:	409a      	lsls	r2, r3
 800355a:	0013      	movs	r3, r2
 800355c:	43da      	mvns	r2, r3
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	4013      	ands	r3, r2
 8003562:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	68da      	ldr	r2, [r3, #12]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	409a      	lsls	r2, r3
 800356e:	0013      	movs	r3, r2
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	4313      	orrs	r3, r2
 8003574:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	693a      	ldr	r2, [r7, #16]
 800357a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003582:	2201      	movs	r2, #1
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	409a      	lsls	r2, r3
 8003588:	0013      	movs	r3, r2
 800358a:	43da      	mvns	r2, r3
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	4013      	ands	r3, r2
 8003590:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	091b      	lsrs	r3, r3, #4
 8003598:	2201      	movs	r2, #1
 800359a:	401a      	ands	r2, r3
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	409a      	lsls	r2, r3
 80035a0:	0013      	movs	r3, r2
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	693a      	ldr	r2, [r7, #16]
 80035ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	2203      	movs	r2, #3
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b03      	cmp	r3, #3
 80035b8:	d017      	beq.n	80035ea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	68db      	ldr	r3, [r3, #12]
 80035be:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	005b      	lsls	r3, r3, #1
 80035c4:	2203      	movs	r2, #3
 80035c6:	409a      	lsls	r2, r3
 80035c8:	0013      	movs	r3, r2
 80035ca:	43da      	mvns	r2, r3
 80035cc:	693b      	ldr	r3, [r7, #16]
 80035ce:	4013      	ands	r3, r2
 80035d0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	697b      	ldr	r3, [r7, #20]
 80035d8:	005b      	lsls	r3, r3, #1
 80035da:	409a      	lsls	r2, r3
 80035dc:	0013      	movs	r3, r2
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	693a      	ldr	r2, [r7, #16]
 80035e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	2203      	movs	r2, #3
 80035f0:	4013      	ands	r3, r2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d123      	bne.n	800363e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	08da      	lsrs	r2, r3, #3
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	3208      	adds	r2, #8
 80035fe:	0092      	lsls	r2, r2, #2
 8003600:	58d3      	ldr	r3, [r2, r3]
 8003602:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2207      	movs	r2, #7
 8003608:	4013      	ands	r3, r2
 800360a:	009b      	lsls	r3, r3, #2
 800360c:	220f      	movs	r2, #15
 800360e:	409a      	lsls	r2, r3
 8003610:	0013      	movs	r3, r2
 8003612:	43da      	mvns	r2, r3
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	4013      	ands	r3, r2
 8003618:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	691a      	ldr	r2, [r3, #16]
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2107      	movs	r1, #7
 8003622:	400b      	ands	r3, r1
 8003624:	009b      	lsls	r3, r3, #2
 8003626:	409a      	lsls	r2, r3
 8003628:	0013      	movs	r3, r2
 800362a:	693a      	ldr	r2, [r7, #16]
 800362c:	4313      	orrs	r3, r2
 800362e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	08da      	lsrs	r2, r3, #3
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	3208      	adds	r2, #8
 8003638:	0092      	lsls	r2, r2, #2
 800363a:	6939      	ldr	r1, [r7, #16]
 800363c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	2203      	movs	r2, #3
 800364a:	409a      	lsls	r2, r3
 800364c:	0013      	movs	r3, r2
 800364e:	43da      	mvns	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4013      	ands	r3, r2
 8003654:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	2203      	movs	r2, #3
 800365c:	401a      	ands	r2, r3
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	005b      	lsls	r3, r3, #1
 8003662:	409a      	lsls	r2, r3
 8003664:	0013      	movs	r3, r2
 8003666:	693a      	ldr	r2, [r7, #16]
 8003668:	4313      	orrs	r3, r2
 800366a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	693a      	ldr	r2, [r7, #16]
 8003670:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	685a      	ldr	r2, [r3, #4]
 8003676:	23c0      	movs	r3, #192	; 0xc0
 8003678:	029b      	lsls	r3, r3, #10
 800367a:	4013      	ands	r3, r2
 800367c:	d100      	bne.n	8003680 <HAL_GPIO_Init+0x174>
 800367e:	e092      	b.n	80037a6 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8003680:	4a50      	ldr	r2, [pc, #320]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	089b      	lsrs	r3, r3, #2
 8003686:	3318      	adds	r3, #24
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	589b      	ldr	r3, [r3, r2]
 800368c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800368e:	697b      	ldr	r3, [r7, #20]
 8003690:	2203      	movs	r2, #3
 8003692:	4013      	ands	r3, r2
 8003694:	00db      	lsls	r3, r3, #3
 8003696:	220f      	movs	r2, #15
 8003698:	409a      	lsls	r2, r3
 800369a:	0013      	movs	r3, r2
 800369c:	43da      	mvns	r2, r3
 800369e:	693b      	ldr	r3, [r7, #16]
 80036a0:	4013      	ands	r3, r2
 80036a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80036a4:	687a      	ldr	r2, [r7, #4]
 80036a6:	23a0      	movs	r3, #160	; 0xa0
 80036a8:	05db      	lsls	r3, r3, #23
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d013      	beq.n	80036d6 <HAL_GPIO_Init+0x1ca>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a45      	ldr	r2, [pc, #276]	; (80037c8 <HAL_GPIO_Init+0x2bc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d00d      	beq.n	80036d2 <HAL_GPIO_Init+0x1c6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a44      	ldr	r2, [pc, #272]	; (80037cc <HAL_GPIO_Init+0x2c0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d007      	beq.n	80036ce <HAL_GPIO_Init+0x1c2>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a43      	ldr	r2, [pc, #268]	; (80037d0 <HAL_GPIO_Init+0x2c4>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d101      	bne.n	80036ca <HAL_GPIO_Init+0x1be>
 80036c6:	2303      	movs	r3, #3
 80036c8:	e006      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036ca:	2305      	movs	r3, #5
 80036cc:	e004      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e002      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <HAL_GPIO_Init+0x1cc>
 80036d6:	2300      	movs	r3, #0
 80036d8:	697a      	ldr	r2, [r7, #20]
 80036da:	2103      	movs	r1, #3
 80036dc:	400a      	ands	r2, r1
 80036de:	00d2      	lsls	r2, r2, #3
 80036e0:	4093      	lsls	r3, r2
 80036e2:	693a      	ldr	r2, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80036e8:	4936      	ldr	r1, [pc, #216]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	089b      	lsrs	r3, r3, #2
 80036ee:	3318      	adds	r3, #24
 80036f0:	009b      	lsls	r3, r3, #2
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80036f6:	4b33      	ldr	r3, [pc, #204]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	43da      	mvns	r2, r3
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	4013      	ands	r3, r2
 8003704:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	685a      	ldr	r2, [r3, #4]
 800370a:	2380      	movs	r3, #128	; 0x80
 800370c:	035b      	lsls	r3, r3, #13
 800370e:	4013      	ands	r3, r2
 8003710:	d003      	beq.n	800371a <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800371a:	4b2a      	ldr	r3, [pc, #168]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800371c:	693a      	ldr	r2, [r7, #16]
 800371e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8003720:	4b28      	ldr	r3, [pc, #160]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	43da      	mvns	r2, r3
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4013      	ands	r3, r2
 800372e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	685a      	ldr	r2, [r3, #4]
 8003734:	2380      	movs	r3, #128	; 0x80
 8003736:	039b      	lsls	r3, r3, #14
 8003738:	4013      	ands	r3, r2
 800373a:	d003      	beq.n	8003744 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 800373c:	693a      	ldr	r2, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	4313      	orrs	r3, r2
 8003742:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003744:	4b1f      	ldr	r3, [pc, #124]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003746:	693a      	ldr	r2, [r7, #16]
 8003748:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800374a:	4a1e      	ldr	r2, [pc, #120]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800374c:	2384      	movs	r3, #132	; 0x84
 800374e:	58d3      	ldr	r3, [r2, r3]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	43da      	mvns	r2, r3
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4013      	ands	r3, r2
 800375a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	2380      	movs	r3, #128	; 0x80
 8003762:	029b      	lsls	r3, r3, #10
 8003764:	4013      	ands	r3, r2
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8003768:	693a      	ldr	r2, [r7, #16]
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	4313      	orrs	r3, r2
 800376e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003770:	4914      	ldr	r1, [pc, #80]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 8003772:	2284      	movs	r2, #132	; 0x84
 8003774:	693b      	ldr	r3, [r7, #16]
 8003776:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8003778:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 800377a:	2380      	movs	r3, #128	; 0x80
 800377c:	58d3      	ldr	r3, [r2, r3]
 800377e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	43da      	mvns	r2, r3
 8003784:	693b      	ldr	r3, [r7, #16]
 8003786:	4013      	ands	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	2380      	movs	r3, #128	; 0x80
 8003790:	025b      	lsls	r3, r3, #9
 8003792:	4013      	ands	r3, r2
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8003796:	693a      	ldr	r2, [r7, #16]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4313      	orrs	r3, r2
 800379c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800379e:	4909      	ldr	r1, [pc, #36]	; (80037c4 <HAL_GPIO_Init+0x2b8>)
 80037a0:	2280      	movs	r2, #128	; 0x80
 80037a2:	693b      	ldr	r3, [r7, #16]
 80037a4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	3301      	adds	r3, #1
 80037aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	697b      	ldr	r3, [r7, #20]
 80037b2:	40da      	lsrs	r2, r3
 80037b4:	1e13      	subs	r3, r2, #0
 80037b6:	d000      	beq.n	80037ba <HAL_GPIO_Init+0x2ae>
 80037b8:	e6b0      	b.n	800351c <HAL_GPIO_Init+0x10>
  }
}
 80037ba:	46c0      	nop			; (mov r8, r8)
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46bd      	mov	sp, r7
 80037c0:	b006      	add	sp, #24
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	40021800 	.word	0x40021800
 80037c8:	50000400 	.word	0x50000400
 80037cc:	50000800 	.word	0x50000800
 80037d0:	50000c00 	.word	0x50000c00

080037d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b082      	sub	sp, #8
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	0008      	movs	r0, r1
 80037de:	0011      	movs	r1, r2
 80037e0:	1cbb      	adds	r3, r7, #2
 80037e2:	1c02      	adds	r2, r0, #0
 80037e4:	801a      	strh	r2, [r3, #0]
 80037e6:	1c7b      	adds	r3, r7, #1
 80037e8:	1c0a      	adds	r2, r1, #0
 80037ea:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80037ec:	1c7b      	adds	r3, r7, #1
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d004      	beq.n	80037fe <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80037f4:	1cbb      	adds	r3, r7, #2
 80037f6:	881a      	ldrh	r2, [r3, #0]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80037fc:	e003      	b.n	8003806 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80037fe:	1cbb      	adds	r3, r7, #2
 8003800:	881a      	ldrh	r2, [r3, #0]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	46bd      	mov	sp, r7
 800380a:	b002      	add	sp, #8
 800380c:	bd80      	pop	{r7, pc}
	...

08003810 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	0002      	movs	r2, r0
 8003818:	1dbb      	adds	r3, r7, #6
 800381a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 800381c:	4b10      	ldr	r3, [pc, #64]	; (8003860 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800381e:	68db      	ldr	r3, [r3, #12]
 8003820:	1dba      	adds	r2, r7, #6
 8003822:	8812      	ldrh	r2, [r2, #0]
 8003824:	4013      	ands	r3, r2
 8003826:	d008      	beq.n	800383a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8003828:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800382a:	1dba      	adds	r2, r7, #6
 800382c:	8812      	ldrh	r2, [r2, #0]
 800382e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8003830:	1dbb      	adds	r3, r7, #6
 8003832:	881b      	ldrh	r3, [r3, #0]
 8003834:	0018      	movs	r0, r3
 8003836:	f000 f815 	bl	8003864 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 800383a:	4b09      	ldr	r3, [pc, #36]	; (8003860 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	1dba      	adds	r2, r7, #6
 8003840:	8812      	ldrh	r2, [r2, #0]
 8003842:	4013      	ands	r3, r2
 8003844:	d008      	beq.n	8003858 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8003846:	4b06      	ldr	r3, [pc, #24]	; (8003860 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8003848:	1dba      	adds	r2, r7, #6
 800384a:	8812      	ldrh	r2, [r2, #0]
 800384c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 800384e:	1dbb      	adds	r3, r7, #6
 8003850:	881b      	ldrh	r3, [r3, #0]
 8003852:	0018      	movs	r0, r3
 8003854:	f000 f810 	bl	8003878 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8003858:	46c0      	nop			; (mov r8, r8)
 800385a:	46bd      	mov	sp, r7
 800385c:	b002      	add	sp, #8
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40021800 	.word	0x40021800

08003864 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	0002      	movs	r2, r0
 800386c:	1dbb      	adds	r3, r7, #6
 800386e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8003870:	46c0      	nop			; (mov r8, r8)
 8003872:	46bd      	mov	sp, r7
 8003874:	b002      	add	sp, #8
 8003876:	bd80      	pop	{r7, pc}

08003878 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b082      	sub	sp, #8
 800387c:	af00      	add	r7, sp, #0
 800387e:	0002      	movs	r2, r0
 8003880:	1dbb      	adds	r3, r7, #6
 8003882:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8003884:	46c0      	nop			; (mov r8, r8)
 8003886:	46bd      	mov	sp, r7
 8003888:	b002      	add	sp, #8
 800388a:	bd80      	pop	{r7, pc}

0800388c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b084      	sub	sp, #16
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003894:	4b19      	ldr	r3, [pc, #100]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	4a19      	ldr	r2, [pc, #100]	; (8003900 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800389a:	4013      	ands	r3, r2
 800389c:	0019      	movs	r1, r3
 800389e:	4b17      	ldr	r3, [pc, #92]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80038a6:	687a      	ldr	r2, [r7, #4]
 80038a8:	2380      	movs	r3, #128	; 0x80
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d11f      	bne.n	80038f0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 80038b0:	4b14      	ldr	r3, [pc, #80]	; (8003904 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	0013      	movs	r3, r2
 80038b6:	005b      	lsls	r3, r3, #1
 80038b8:	189b      	adds	r3, r3, r2
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	4912      	ldr	r1, [pc, #72]	; (8003908 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80038be:	0018      	movs	r0, r3
 80038c0:	f7fc fc2c 	bl	800011c <__udivsi3>
 80038c4:	0003      	movs	r3, r0
 80038c6:	3301      	adds	r3, #1
 80038c8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038ca:	e008      	b.n	80038de <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	3b01      	subs	r3, #1
 80038d6:	60fb      	str	r3, [r7, #12]
 80038d8:	e001      	b.n	80038de <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80038da:	2303      	movs	r3, #3
 80038dc:	e009      	b.n	80038f2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80038de:	4b07      	ldr	r3, [pc, #28]	; (80038fc <HAL_PWREx_ControlVoltageScaling+0x70>)
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	2380      	movs	r3, #128	; 0x80
 80038e4:	00db      	lsls	r3, r3, #3
 80038e6:	401a      	ands	r2, r3
 80038e8:	2380      	movs	r3, #128	; 0x80
 80038ea:	00db      	lsls	r3, r3, #3
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d0ed      	beq.n	80038cc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80038f0:	2300      	movs	r3, #0
}
 80038f2:	0018      	movs	r0, r3
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b004      	add	sp, #16
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	40007000 	.word	0x40007000
 8003900:	fffff9ff 	.word	0xfffff9ff
 8003904:	20000000 	.word	0x20000000
 8003908:	000f4240 	.word	0x000f4240

0800390c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8003910:	4b03      	ldr	r3, [pc, #12]	; (8003920 <LL_RCC_GetAPB1Prescaler+0x14>)
 8003912:	689a      	ldr	r2, [r3, #8]
 8003914:	23e0      	movs	r3, #224	; 0xe0
 8003916:	01db      	lsls	r3, r3, #7
 8003918:	4013      	ands	r3, r2
}
 800391a:	0018      	movs	r0, r3
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}
 8003920:	40021000 	.word	0x40021000

08003924 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b088      	sub	sp, #32
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d101      	bne.n	8003936 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e2f3      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2201      	movs	r2, #1
 800393c:	4013      	ands	r3, r2
 800393e:	d100      	bne.n	8003942 <HAL_RCC_OscConfig+0x1e>
 8003940:	e07c      	b.n	8003a3c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003942:	4bc3      	ldr	r3, [pc, #780]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	2238      	movs	r2, #56	; 0x38
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800394c:	4bc0      	ldr	r3, [pc, #768]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	2203      	movs	r2, #3
 8003952:	4013      	ands	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8003956:	69bb      	ldr	r3, [r7, #24]
 8003958:	2b10      	cmp	r3, #16
 800395a:	d102      	bne.n	8003962 <HAL_RCC_OscConfig+0x3e>
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	2b03      	cmp	r3, #3
 8003960:	d002      	beq.n	8003968 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	2b08      	cmp	r3, #8
 8003966:	d10b      	bne.n	8003980 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003968:	4bb9      	ldr	r3, [pc, #740]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	029b      	lsls	r3, r3, #10
 8003970:	4013      	ands	r3, r2
 8003972:	d062      	beq.n	8003a3a <HAL_RCC_OscConfig+0x116>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d15e      	bne.n	8003a3a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	e2ce      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	2380      	movs	r3, #128	; 0x80
 8003986:	025b      	lsls	r3, r3, #9
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x78>
 800398c:	4bb0      	ldr	r3, [pc, #704]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	4baf      	ldr	r3, [pc, #700]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003992:	2180      	movs	r1, #128	; 0x80
 8003994:	0249      	lsls	r1, r1, #9
 8003996:	430a      	orrs	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	e020      	b.n	80039de <HAL_RCC_OscConfig+0xba>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685a      	ldr	r2, [r3, #4]
 80039a0:	23a0      	movs	r3, #160	; 0xa0
 80039a2:	02db      	lsls	r3, r3, #11
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d10e      	bne.n	80039c6 <HAL_RCC_OscConfig+0xa2>
 80039a8:	4ba9      	ldr	r3, [pc, #676]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	4ba8      	ldr	r3, [pc, #672]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 80039ae:	2180      	movs	r1, #128	; 0x80
 80039b0:	02c9      	lsls	r1, r1, #11
 80039b2:	430a      	orrs	r2, r1
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	4ba6      	ldr	r3, [pc, #664]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	4ba5      	ldr	r3, [pc, #660]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 80039bc:	2180      	movs	r1, #128	; 0x80
 80039be:	0249      	lsls	r1, r1, #9
 80039c0:	430a      	orrs	r2, r1
 80039c2:	601a      	str	r2, [r3, #0]
 80039c4:	e00b      	b.n	80039de <HAL_RCC_OscConfig+0xba>
 80039c6:	4ba2      	ldr	r3, [pc, #648]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	4ba1      	ldr	r3, [pc, #644]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 80039cc:	49a1      	ldr	r1, [pc, #644]	; (8003c54 <HAL_RCC_OscConfig+0x330>)
 80039ce:	400a      	ands	r2, r1
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	4b9f      	ldr	r3, [pc, #636]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	4b9e      	ldr	r3, [pc, #632]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 80039d8:	499f      	ldr	r1, [pc, #636]	; (8003c58 <HAL_RCC_OscConfig+0x334>)
 80039da:	400a      	ands	r2, r1
 80039dc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d014      	beq.n	8003a10 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039e6:	f7fe fdcf 	bl	8002588 <HAL_GetTick>
 80039ea:	0003      	movs	r3, r0
 80039ec:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80039ee:	e008      	b.n	8003a02 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80039f0:	f7fe fdca 	bl	8002588 <HAL_GetTick>
 80039f4:	0002      	movs	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	2b64      	cmp	r3, #100	; 0x64
 80039fc:	d901      	bls.n	8003a02 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80039fe:	2303      	movs	r3, #3
 8003a00:	e28d      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a02:	4b93      	ldr	r3, [pc, #588]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	2380      	movs	r3, #128	; 0x80
 8003a08:	029b      	lsls	r3, r3, #10
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	d0f0      	beq.n	80039f0 <HAL_RCC_OscConfig+0xcc>
 8003a0e:	e015      	b.n	8003a3c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a10:	f7fe fdba 	bl	8002588 <HAL_GetTick>
 8003a14:	0003      	movs	r3, r0
 8003a16:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a18:	e008      	b.n	8003a2c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a1a:	f7fe fdb5 	bl	8002588 <HAL_GetTick>
 8003a1e:	0002      	movs	r2, r0
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	1ad3      	subs	r3, r2, r3
 8003a24:	2b64      	cmp	r3, #100	; 0x64
 8003a26:	d901      	bls.n	8003a2c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003a28:	2303      	movs	r3, #3
 8003a2a:	e278      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a2c:	4b88      	ldr	r3, [pc, #544]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	2380      	movs	r3, #128	; 0x80
 8003a32:	029b      	lsls	r3, r3, #10
 8003a34:	4013      	ands	r3, r2
 8003a36:	d1f0      	bne.n	8003a1a <HAL_RCC_OscConfig+0xf6>
 8003a38:	e000      	b.n	8003a3c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a3a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2202      	movs	r2, #2
 8003a42:	4013      	ands	r3, r2
 8003a44:	d100      	bne.n	8003a48 <HAL_RCC_OscConfig+0x124>
 8003a46:	e099      	b.n	8003b7c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003a48:	4b81      	ldr	r3, [pc, #516]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	2238      	movs	r2, #56	; 0x38
 8003a4e:	4013      	ands	r3, r2
 8003a50:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a52:	4b7f      	ldr	r3, [pc, #508]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	2203      	movs	r2, #3
 8003a58:	4013      	ands	r3, r2
 8003a5a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	2b10      	cmp	r3, #16
 8003a60:	d102      	bne.n	8003a68 <HAL_RCC_OscConfig+0x144>
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d002      	beq.n	8003a6e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d135      	bne.n	8003ada <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003a6e:	4b78      	ldr	r3, [pc, #480]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003a70:	681a      	ldr	r2, [r3, #0]
 8003a72:	2380      	movs	r3, #128	; 0x80
 8003a74:	00db      	lsls	r3, r3, #3
 8003a76:	4013      	ands	r3, r2
 8003a78:	d005      	beq.n	8003a86 <HAL_RCC_OscConfig+0x162>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e24b      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a86:	4b72      	ldr	r3, [pc, #456]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	4a74      	ldr	r2, [pc, #464]	; (8003c5c <HAL_RCC_OscConfig+0x338>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	0019      	movs	r1, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	695b      	ldr	r3, [r3, #20]
 8003a94:	021a      	lsls	r2, r3, #8
 8003a96:	4b6e      	ldr	r3, [pc, #440]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d112      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003aa2:	4b6b      	ldr	r3, [pc, #428]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a6e      	ldr	r2, [pc, #440]	; (8003c60 <HAL_RCC_OscConfig+0x33c>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691a      	ldr	r2, [r3, #16]
 8003ab0:	4b67      	ldr	r3, [pc, #412]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8003ab6:	4b66      	ldr	r3, [pc, #408]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	0adb      	lsrs	r3, r3, #11
 8003abc:	2207      	movs	r2, #7
 8003abe:	4013      	ands	r3, r2
 8003ac0:	4a68      	ldr	r2, [pc, #416]	; (8003c64 <HAL_RCC_OscConfig+0x340>)
 8003ac2:	40da      	lsrs	r2, r3
 8003ac4:	4b68      	ldr	r3, [pc, #416]	; (8003c68 <HAL_RCC_OscConfig+0x344>)
 8003ac6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ac8:	4b68      	ldr	r3, [pc, #416]	; (8003c6c <HAL_RCC_OscConfig+0x348>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	0018      	movs	r0, r3
 8003ace:	f7fd fd39 	bl	8001544 <HAL_InitTick>
 8003ad2:	1e03      	subs	r3, r0, #0
 8003ad4:	d051      	beq.n	8003b7a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e221      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d030      	beq.n	8003b44 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003ae2:	4b5b      	ldr	r3, [pc, #364]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4a5e      	ldr	r2, [pc, #376]	; (8003c60 <HAL_RCC_OscConfig+0x33c>)
 8003ae8:	4013      	ands	r3, r2
 8003aea:	0019      	movs	r1, r3
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	4b57      	ldr	r3, [pc, #348]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003af2:	430a      	orrs	r2, r1
 8003af4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8003af6:	4b56      	ldr	r3, [pc, #344]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003af8:	681a      	ldr	r2, [r3, #0]
 8003afa:	4b55      	ldr	r3, [pc, #340]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003afc:	2180      	movs	r1, #128	; 0x80
 8003afe:	0049      	lsls	r1, r1, #1
 8003b00:	430a      	orrs	r2, r1
 8003b02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b04:	f7fe fd40 	bl	8002588 <HAL_GetTick>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0c:	e008      	b.n	8003b20 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b0e:	f7fe fd3b 	bl	8002588 <HAL_GetTick>
 8003b12:	0002      	movs	r2, r0
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d901      	bls.n	8003b20 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	e1fe      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b20:	4b4b      	ldr	r3, [pc, #300]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	2380      	movs	r3, #128	; 0x80
 8003b26:	00db      	lsls	r3, r3, #3
 8003b28:	4013      	ands	r3, r2
 8003b2a:	d0f0      	beq.n	8003b0e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b2c:	4b48      	ldr	r3, [pc, #288]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	4a4a      	ldr	r2, [pc, #296]	; (8003c5c <HAL_RCC_OscConfig+0x338>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	021a      	lsls	r2, r3, #8
 8003b3c:	4b44      	ldr	r3, [pc, #272]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	605a      	str	r2, [r3, #4]
 8003b42:	e01b      	b.n	8003b7c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8003b44:	4b42      	ldr	r3, [pc, #264]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	4b41      	ldr	r3, [pc, #260]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003b4a:	4949      	ldr	r1, [pc, #292]	; (8003c70 <HAL_RCC_OscConfig+0x34c>)
 8003b4c:	400a      	ands	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b50:	f7fe fd1a 	bl	8002588 <HAL_GetTick>
 8003b54:	0003      	movs	r3, r0
 8003b56:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b58:	e008      	b.n	8003b6c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b5a:	f7fe fd15 	bl	8002588 <HAL_GetTick>
 8003b5e:	0002      	movs	r2, r0
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e1d8      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b6c:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	2380      	movs	r3, #128	; 0x80
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4013      	ands	r3, r2
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCC_OscConfig+0x236>
 8003b78:	e000      	b.n	8003b7c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003b7a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2208      	movs	r2, #8
 8003b82:	4013      	ands	r3, r2
 8003b84:	d047      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b86:	4b32      	ldr	r3, [pc, #200]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	2238      	movs	r2, #56	; 0x38
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	2b18      	cmp	r3, #24
 8003b90:	d10a      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8003b92:	4b2f      	ldr	r3, [pc, #188]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b96:	2202      	movs	r2, #2
 8003b98:	4013      	ands	r3, r2
 8003b9a:	d03c      	beq.n	8003c16 <HAL_RCC_OscConfig+0x2f2>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	699b      	ldr	r3, [r3, #24]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d138      	bne.n	8003c16 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e1ba      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d019      	beq.n	8003be4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003bb0:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bb4:	4b26      	ldr	r3, [pc, #152]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003bb6:	2101      	movs	r1, #1
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bbc:	f7fe fce4 	bl	8002588 <HAL_GetTick>
 8003bc0:	0003      	movs	r3, r0
 8003bc2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc6:	f7fe fcdf 	bl	8002588 <HAL_GetTick>
 8003bca:	0002      	movs	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1a2      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003bda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bdc:	2202      	movs	r2, #2
 8003bde:	4013      	ands	r3, r2
 8003be0:	d0f1      	beq.n	8003bc6 <HAL_RCC_OscConfig+0x2a2>
 8003be2:	e018      	b.n	8003c16 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8003be4:	4b1a      	ldr	r3, [pc, #104]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003bea:	2101      	movs	r1, #1
 8003bec:	438a      	bics	r2, r1
 8003bee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fe fcca 	bl	8002588 <HAL_GetTick>
 8003bf4:	0003      	movs	r3, r0
 8003bf6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bf8:	e008      	b.n	8003c0c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bfa:	f7fe fcc5 	bl	8002588 <HAL_GetTick>
 8003bfe:	0002      	movs	r2, r0
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	1ad3      	subs	r3, r2, r3
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d901      	bls.n	8003c0c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8003c08:	2303      	movs	r3, #3
 8003c0a:	e188      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003c0c:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003c0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c10:	2202      	movs	r2, #2
 8003c12:	4013      	ands	r3, r2
 8003c14:	d1f1      	bne.n	8003bfa <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <HAL_RCC_OscConfig+0x2fe>
 8003c20:	e0c6      	b.n	8003db0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c22:	231f      	movs	r3, #31
 8003c24:	18fb      	adds	r3, r7, r3
 8003c26:	2200      	movs	r2, #0
 8003c28:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	2238      	movs	r2, #56	; 0x38
 8003c30:	4013      	ands	r3, r2
 8003c32:	2b20      	cmp	r3, #32
 8003c34:	d11e      	bne.n	8003c74 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_RCC_OscConfig+0x32c>)
 8003c38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	4013      	ands	r3, r2
 8003c3e:	d100      	bne.n	8003c42 <HAL_RCC_OscConfig+0x31e>
 8003c40:	e0b6      	b.n	8003db0 <HAL_RCC_OscConfig+0x48c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d000      	beq.n	8003c4c <HAL_RCC_OscConfig+0x328>
 8003c4a:	e0b1      	b.n	8003db0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e166      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
 8003c50:	40021000 	.word	0x40021000
 8003c54:	fffeffff 	.word	0xfffeffff
 8003c58:	fffbffff 	.word	0xfffbffff
 8003c5c:	ffff80ff 	.word	0xffff80ff
 8003c60:	ffffc7ff 	.word	0xffffc7ff
 8003c64:	00f42400 	.word	0x00f42400
 8003c68:	20000000 	.word	0x20000000
 8003c6c:	20000004 	.word	0x20000004
 8003c70:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003c74:	4bac      	ldr	r3, [pc, #688]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003c76:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c78:	2380      	movs	r3, #128	; 0x80
 8003c7a:	055b      	lsls	r3, r3, #21
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	d101      	bne.n	8003c84 <HAL_RCC_OscConfig+0x360>
 8003c80:	2301      	movs	r3, #1
 8003c82:	e000      	b.n	8003c86 <HAL_RCC_OscConfig+0x362>
 8003c84:	2300      	movs	r3, #0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d011      	beq.n	8003cae <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8003c8a:	4ba7      	ldr	r3, [pc, #668]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003c8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c8e:	4ba6      	ldr	r3, [pc, #664]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	0549      	lsls	r1, r1, #21
 8003c94:	430a      	orrs	r2, r1
 8003c96:	63da      	str	r2, [r3, #60]	; 0x3c
 8003c98:	4ba3      	ldr	r3, [pc, #652]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003c9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	055b      	lsls	r3, r3, #21
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8003ca6:	231f      	movs	r3, #31
 8003ca8:	18fb      	adds	r3, r7, r3
 8003caa:	2201      	movs	r2, #1
 8003cac:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cae:	4b9f      	ldr	r3, [pc, #636]	; (8003f2c <HAL_RCC_OscConfig+0x608>)
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	2380      	movs	r3, #128	; 0x80
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	d11a      	bne.n	8003cf0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cba:	4b9c      	ldr	r3, [pc, #624]	; (8003f2c <HAL_RCC_OscConfig+0x608>)
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b9b      	ldr	r3, [pc, #620]	; (8003f2c <HAL_RCC_OscConfig+0x608>)
 8003cc0:	2180      	movs	r1, #128	; 0x80
 8003cc2:	0049      	lsls	r1, r1, #1
 8003cc4:	430a      	orrs	r2, r1
 8003cc6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003cc8:	f7fe fc5e 	bl	8002588 <HAL_GetTick>
 8003ccc:	0003      	movs	r3, r0
 8003cce:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003cd2:	f7fe fc59 	bl	8002588 <HAL_GetTick>
 8003cd6:	0002      	movs	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e11c      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce4:	4b91      	ldr	r3, [pc, #580]	; (8003f2c <HAL_RCC_OscConfig+0x608>)
 8003ce6:	681a      	ldr	r2, [r3, #0]
 8003ce8:	2380      	movs	r3, #128	; 0x80
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4013      	ands	r3, r2
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d106      	bne.n	8003d06 <HAL_RCC_OscConfig+0x3e2>
 8003cf8:	4b8b      	ldr	r3, [pc, #556]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003cfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003cfc:	4b8a      	ldr	r3, [pc, #552]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	430a      	orrs	r2, r1
 8003d02:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d04:	e01c      	b.n	8003d40 <HAL_RCC_OscConfig+0x41c>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	2b05      	cmp	r3, #5
 8003d0c:	d10c      	bne.n	8003d28 <HAL_RCC_OscConfig+0x404>
 8003d0e:	4b86      	ldr	r3, [pc, #536]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d10:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d12:	4b85      	ldr	r3, [pc, #532]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d14:	2104      	movs	r1, #4
 8003d16:	430a      	orrs	r2, r1
 8003d18:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d1a:	4b83      	ldr	r3, [pc, #524]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d1e:	4b82      	ldr	r3, [pc, #520]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d20:	2101      	movs	r1, #1
 8003d22:	430a      	orrs	r2, r1
 8003d24:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d26:	e00b      	b.n	8003d40 <HAL_RCC_OscConfig+0x41c>
 8003d28:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d2c:	4b7e      	ldr	r3, [pc, #504]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	438a      	bics	r2, r1
 8003d32:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d34:	4b7c      	ldr	r3, [pc, #496]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d36:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003d38:	4b7b      	ldr	r3, [pc, #492]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d3a:	2104      	movs	r1, #4
 8003d3c:	438a      	bics	r2, r1
 8003d3e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d014      	beq.n	8003d72 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fe fc1e 	bl	8002588 <HAL_GetTick>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d50:	e009      	b.n	8003d66 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d52:	f7fe fc19 	bl	8002588 <HAL_GetTick>
 8003d56:	0002      	movs	r2, r0
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	4a74      	ldr	r2, [pc, #464]	; (8003f30 <HAL_RCC_OscConfig+0x60c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d901      	bls.n	8003d66 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8003d62:	2303      	movs	r3, #3
 8003d64:	e0db      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003d66:	4b70      	ldr	r3, [pc, #448]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	4013      	ands	r3, r2
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCC_OscConfig+0x42e>
 8003d70:	e013      	b.n	8003d9a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d72:	f7fe fc09 	bl	8002588 <HAL_GetTick>
 8003d76:	0003      	movs	r3, r0
 8003d78:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d7a:	e009      	b.n	8003d90 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d7c:	f7fe fc04 	bl	8002588 <HAL_GetTick>
 8003d80:	0002      	movs	r2, r0
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	1ad3      	subs	r3, r2, r3
 8003d86:	4a6a      	ldr	r2, [pc, #424]	; (8003f30 <HAL_RCC_OscConfig+0x60c>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d901      	bls.n	8003d90 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8003d8c:	2303      	movs	r3, #3
 8003d8e:	e0c6      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d90:	4b65      	ldr	r3, [pc, #404]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003d92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d94:	2202      	movs	r2, #2
 8003d96:	4013      	ands	r3, r2
 8003d98:	d1f0      	bne.n	8003d7c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8003d9a:	231f      	movs	r3, #31
 8003d9c:	18fb      	adds	r3, r7, r3
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8003da4:	4b60      	ldr	r3, [pc, #384]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003da6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003da8:	4b5f      	ldr	r3, [pc, #380]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003daa:	4962      	ldr	r1, [pc, #392]	; (8003f34 <HAL_RCC_OscConfig+0x610>)
 8003dac:	400a      	ands	r2, r1
 8003dae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	69db      	ldr	r3, [r3, #28]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d100      	bne.n	8003dba <HAL_RCC_OscConfig+0x496>
 8003db8:	e0b0      	b.n	8003f1c <HAL_RCC_OscConfig+0x5f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003dba:	4b5b      	ldr	r3, [pc, #364]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2238      	movs	r2, #56	; 0x38
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	2b10      	cmp	r3, #16
 8003dc4:	d100      	bne.n	8003dc8 <HAL_RCC_OscConfig+0x4a4>
 8003dc6:	e078      	b.n	8003eba <HAL_RCC_OscConfig+0x596>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	2b02      	cmp	r3, #2
 8003dce:	d153      	bne.n	8003e78 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dd0:	4b55      	ldr	r3, [pc, #340]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b54      	ldr	r3, [pc, #336]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003dd6:	4958      	ldr	r1, [pc, #352]	; (8003f38 <HAL_RCC_OscConfig+0x614>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fbd4 	bl	8002588 <HAL_GetTick>
 8003de0:	0003      	movs	r3, r0
 8003de2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003de6:	f7fe fbcf 	bl	8002588 <HAL_GetTick>
 8003dea:	0002      	movs	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e092      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003df8:	4b4b      	ldr	r3, [pc, #300]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	2380      	movs	r3, #128	; 0x80
 8003dfe:	049b      	lsls	r3, r3, #18
 8003e00:	4013      	ands	r3, r2
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x4c2>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else /* !RCC_PLLQ_SUPPORT */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e04:	4b48      	ldr	r3, [pc, #288]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e06:	68db      	ldr	r3, [r3, #12]
 8003e08:	4a4c      	ldr	r2, [pc, #304]	; (8003f3c <HAL_RCC_OscConfig+0x618>)
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	0019      	movs	r1, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a1a      	ldr	r2, [r3, #32]
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e24:	431a      	orrs	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e2a:	431a      	orrs	r2, r3
 8003e2c:	4b3e      	ldr	r3, [pc, #248]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e2e:	430a      	orrs	r2, r1
 8003e30:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e32:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e34:	681a      	ldr	r2, [r3, #0]
 8003e36:	4b3c      	ldr	r3, [pc, #240]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e38:	2180      	movs	r1, #128	; 0x80
 8003e3a:	0449      	lsls	r1, r1, #17
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8003e40:	4b39      	ldr	r3, [pc, #228]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	4b38      	ldr	r3, [pc, #224]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e46:	2180      	movs	r1, #128	; 0x80
 8003e48:	0549      	lsls	r1, r1, #21
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4e:	f7fe fb9b 	bl	8002588 <HAL_GetTick>
 8003e52:	0003      	movs	r3, r0
 8003e54:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fe fb96 	bl	8002588 <HAL_GetTick>
 8003e5c:	0002      	movs	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e059      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e6a:	4b2f      	ldr	r3, [pc, #188]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	2380      	movs	r3, #128	; 0x80
 8003e70:	049b      	lsls	r3, r3, #18
 8003e72:	4013      	ands	r3, r2
 8003e74:	d0f0      	beq.n	8003e58 <HAL_RCC_OscConfig+0x534>
 8003e76:	e051      	b.n	8003f1c <HAL_RCC_OscConfig+0x5f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b2a      	ldr	r3, [pc, #168]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003e7e:	492e      	ldr	r1, [pc, #184]	; (8003f38 <HAL_RCC_OscConfig+0x614>)
 8003e80:	400a      	ands	r2, r1
 8003e82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fe fb80 	bl	8002588 <HAL_GetTick>
 8003e88:	0003      	movs	r3, r0
 8003e8a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x57c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fe fb7b 	bl	8002588 <HAL_GetTick>
 8003e92:	0002      	movs	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x57c>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e03e      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003ea0:	4b21      	ldr	r3, [pc, #132]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	049b      	lsls	r3, r3, #18
 8003ea8:	4013      	ands	r3, r2
 8003eaa:	d1f0      	bne.n	8003e8e <HAL_RCC_OscConfig+0x56a>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8003eac:	4b1e      	ldr	r3, [pc, #120]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003eae:	68da      	ldr	r2, [r3, #12]
 8003eb0:	4b1d      	ldr	r3, [pc, #116]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003eb2:	4923      	ldr	r1, [pc, #140]	; (8003f40 <HAL_RCC_OscConfig+0x61c>)
 8003eb4:	400a      	ands	r2, r1
 8003eb6:	60da      	str	r2, [r3, #12]
 8003eb8:	e030      	b.n	8003f1c <HAL_RCC_OscConfig+0x5f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	69db      	ldr	r3, [r3, #28]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d101      	bne.n	8003ec6 <HAL_RCC_OscConfig+0x5a2>
      {
        return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e02b      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8003ec6:	4b18      	ldr	r3, [pc, #96]	; (8003f28 <HAL_RCC_OscConfig+0x604>)
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	2203      	movs	r2, #3
 8003ed0:	401a      	ands	r2, r3
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d11e      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	2270      	movs	r2, #112	; 0x70
 8003ede:	401a      	ands	r2, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d117      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003ee8:	697a      	ldr	r2, [r7, #20]
 8003eea:	23fe      	movs	r3, #254	; 0xfe
 8003eec:	01db      	lsls	r3, r3, #7
 8003eee:	401a      	ands	r2, r3
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef4:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d10e      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5f4>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	23f8      	movs	r3, #248	; 0xf8
 8003efe:	039b      	lsls	r3, r3, #14
 8003f00:	401a      	ands	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f06:	429a      	cmp	r2, r3
 8003f08:	d106      	bne.n	8003f18 <HAL_RCC_OscConfig+0x5f4>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	0f5b      	lsrs	r3, r3, #29
 8003f0e:	075a      	lsls	r2, r3, #29
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d001      	beq.n	8003f1c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	e000      	b.n	8003f1e <HAL_RCC_OscConfig+0x5fa>
        }
      }
    }
  }
  return HAL_OK;
 8003f1c:	2300      	movs	r3, #0
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	b008      	add	sp, #32
 8003f24:	bd80      	pop	{r7, pc}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	40007000 	.word	0x40007000
 8003f30:	00001388 	.word	0x00001388
 8003f34:	efffffff 	.word	0xefffffff
 8003f38:	feffffff 	.word	0xfeffffff
 8003f3c:	1fc1808c 	.word	0x1fc1808c
 8003f40:	effefffc 	.word	0xeffefffc

08003f44 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
 8003f4c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e0e9      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f58:	4b76      	ldr	r3, [pc, #472]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2207      	movs	r2, #7
 8003f5e:	4013      	ands	r3, r2
 8003f60:	683a      	ldr	r2, [r7, #0]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d91e      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f66:	4b73      	ldr	r3, [pc, #460]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2207      	movs	r2, #7
 8003f6c:	4393      	bics	r3, r2
 8003f6e:	0019      	movs	r1, r3
 8003f70:	4b70      	ldr	r3, [pc, #448]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	430a      	orrs	r2, r1
 8003f76:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003f78:	f7fe fb06 	bl	8002588 <HAL_GetTick>
 8003f7c:	0003      	movs	r3, r0
 8003f7e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f80:	e009      	b.n	8003f96 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003f82:	f7fe fb01 	bl	8002588 <HAL_GetTick>
 8003f86:	0002      	movs	r2, r0
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	4a6a      	ldr	r2, [pc, #424]	; (8004138 <HAL_RCC_ClockConfig+0x1f4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d901      	bls.n	8003f96 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003f92:	2303      	movs	r3, #3
 8003f94:	e0ca      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003f96:	4b67      	ldr	r3, [pc, #412]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2207      	movs	r2, #7
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d1ee      	bne.n	8003f82 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	4013      	ands	r3, r2
 8003fac:	d015      	beq.n	8003fda <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2204      	movs	r2, #4
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	d006      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003fb8:	4b60      	ldr	r3, [pc, #384]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8003fba:	689a      	ldr	r2, [r3, #8]
 8003fbc:	4b5f      	ldr	r3, [pc, #380]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8003fbe:	21e0      	movs	r1, #224	; 0xe0
 8003fc0:	01c9      	lsls	r1, r1, #7
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fc6:	4b5d      	ldr	r3, [pc, #372]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	4a5d      	ldr	r2, [pc, #372]	; (8004140 <HAL_RCC_ClockConfig+0x1fc>)
 8003fcc:	4013      	ands	r3, r2
 8003fce:	0019      	movs	r1, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	4013      	ands	r3, r2
 8003fe2:	d057      	beq.n	8004094 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003fec:	4b53      	ldr	r3, [pc, #332]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	2380      	movs	r3, #128	; 0x80
 8003ff2:	029b      	lsls	r3, r3, #10
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	d12b      	bne.n	8004050 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e097      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	2b02      	cmp	r3, #2
 8004002:	d107      	bne.n	8004014 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004004:	4b4d      	ldr	r3, [pc, #308]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	2380      	movs	r3, #128	; 0x80
 800400a:	049b      	lsls	r3, r3, #18
 800400c:	4013      	ands	r3, r2
 800400e:	d11f      	bne.n	8004050 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e08b      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401c:	4b47      	ldr	r3, [pc, #284]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	2380      	movs	r3, #128	; 0x80
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	4013      	ands	r3, r2
 8004026:	d113      	bne.n	8004050 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e07f      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	2b03      	cmp	r3, #3
 8004032:	d106      	bne.n	8004042 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004034:	4b41      	ldr	r3, [pc, #260]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004036:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004038:	2202      	movs	r2, #2
 800403a:	4013      	ands	r3, r2
 800403c:	d108      	bne.n	8004050 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e074      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004042:	4b3e      	ldr	r3, [pc, #248]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004044:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004046:	2202      	movs	r2, #2
 8004048:	4013      	ands	r3, r2
 800404a:	d101      	bne.n	8004050 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e06d      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004050:	4b3a      	ldr	r3, [pc, #232]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	2207      	movs	r2, #7
 8004056:	4393      	bics	r3, r2
 8004058:	0019      	movs	r1, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	685a      	ldr	r2, [r3, #4]
 800405e:	4b37      	ldr	r3, [pc, #220]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004060:	430a      	orrs	r2, r1
 8004062:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004064:	f7fe fa90 	bl	8002588 <HAL_GetTick>
 8004068:	0003      	movs	r3, r0
 800406a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406c:	e009      	b.n	8004082 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800406e:	f7fe fa8b 	bl	8002588 <HAL_GetTick>
 8004072:	0002      	movs	r2, r0
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	4a2f      	ldr	r2, [pc, #188]	; (8004138 <HAL_RCC_ClockConfig+0x1f4>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e054      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004082:	4b2e      	ldr	r3, [pc, #184]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2238      	movs	r2, #56	; 0x38
 8004088:	401a      	ands	r2, r3
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	429a      	cmp	r2, r3
 8004092:	d1ec      	bne.n	800406e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004094:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	2207      	movs	r2, #7
 800409a:	4013      	ands	r3, r2
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d21e      	bcs.n	80040e0 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b24      	ldr	r3, [pc, #144]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2207      	movs	r2, #7
 80040a8:	4393      	bics	r3, r2
 80040aa:	0019      	movs	r1, r3
 80040ac:	4b21      	ldr	r3, [pc, #132]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040ae:	683a      	ldr	r2, [r7, #0]
 80040b0:	430a      	orrs	r2, r1
 80040b2:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80040b4:	f7fe fa68 	bl	8002588 <HAL_GetTick>
 80040b8:	0003      	movs	r3, r0
 80040ba:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040bc:	e009      	b.n	80040d2 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80040be:	f7fe fa63 	bl	8002588 <HAL_GetTick>
 80040c2:	0002      	movs	r2, r0
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	1ad3      	subs	r3, r2, r3
 80040c8:	4a1b      	ldr	r2, [pc, #108]	; (8004138 <HAL_RCC_ClockConfig+0x1f4>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d901      	bls.n	80040d2 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e02c      	b.n	800412c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80040d2:	4b18      	ldr	r3, [pc, #96]	; (8004134 <HAL_RCC_ClockConfig+0x1f0>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2207      	movs	r2, #7
 80040d8:	4013      	ands	r3, r2
 80040da:	683a      	ldr	r2, [r7, #0]
 80040dc:	429a      	cmp	r2, r3
 80040de:	d1ee      	bne.n	80040be <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2204      	movs	r2, #4
 80040e6:	4013      	ands	r3, r2
 80040e8:	d009      	beq.n	80040fe <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80040ea:	4b14      	ldr	r3, [pc, #80]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <HAL_RCC_ClockConfig+0x200>)
 80040f0:	4013      	ands	r3, r2
 80040f2:	0019      	movs	r1, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	4b10      	ldr	r3, [pc, #64]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 80040fa:	430a      	orrs	r2, r1
 80040fc:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80040fe:	f000 f829 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004102:	0001      	movs	r1, r0
 8004104:	4b0d      	ldr	r3, [pc, #52]	; (800413c <HAL_RCC_ClockConfig+0x1f8>)
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	220f      	movs	r2, #15
 800410c:	401a      	ands	r2, r3
 800410e:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <HAL_RCC_ClockConfig+0x204>)
 8004110:	0092      	lsls	r2, r2, #2
 8004112:	58d3      	ldr	r3, [r2, r3]
 8004114:	221f      	movs	r2, #31
 8004116:	4013      	ands	r3, r2
 8004118:	000a      	movs	r2, r1
 800411a:	40da      	lsrs	r2, r3
 800411c:	4b0b      	ldr	r3, [pc, #44]	; (800414c <HAL_RCC_ClockConfig+0x208>)
 800411e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004120:	4b0b      	ldr	r3, [pc, #44]	; (8004150 <HAL_RCC_ClockConfig+0x20c>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	0018      	movs	r0, r3
 8004126:	f7fd fa0d 	bl	8001544 <HAL_InitTick>
 800412a:	0003      	movs	r3, r0
}
 800412c:	0018      	movs	r0, r3
 800412e:	46bd      	mov	sp, r7
 8004130:	b004      	add	sp, #16
 8004132:	bd80      	pop	{r7, pc}
 8004134:	40022000 	.word	0x40022000
 8004138:	00001388 	.word	0x00001388
 800413c:	40021000 	.word	0x40021000
 8004140:	fffff0ff 	.word	0xfffff0ff
 8004144:	ffff8fff 	.word	0xffff8fff
 8004148:	0800b1b4 	.word	0x0800b1b4
 800414c:	20000000 	.word	0x20000000
 8004150:	20000004 	.word	0x20000004

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800415a:	4b3c      	ldr	r3, [pc, #240]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	2238      	movs	r2, #56	; 0x38
 8004160:	4013      	ands	r3, r2
 8004162:	d10f      	bne.n	8004184 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8004164:	4b39      	ldr	r3, [pc, #228]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	0adb      	lsrs	r3, r3, #11
 800416a:	2207      	movs	r2, #7
 800416c:	4013      	ands	r3, r2
 800416e:	2201      	movs	r2, #1
 8004170:	409a      	lsls	r2, r3
 8004172:	0013      	movs	r3, r2
 8004174:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8004176:	6839      	ldr	r1, [r7, #0]
 8004178:	4835      	ldr	r0, [pc, #212]	; (8004250 <HAL_RCC_GetSysClockFreq+0xfc>)
 800417a:	f7fb ffcf 	bl	800011c <__udivsi3>
 800417e:	0003      	movs	r3, r0
 8004180:	613b      	str	r3, [r7, #16]
 8004182:	e05d      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004184:	4b31      	ldr	r3, [pc, #196]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004186:	689b      	ldr	r3, [r3, #8]
 8004188:	2238      	movs	r2, #56	; 0x38
 800418a:	4013      	ands	r3, r2
 800418c:	2b08      	cmp	r3, #8
 800418e:	d102      	bne.n	8004196 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004190:	4b2f      	ldr	r3, [pc, #188]	; (8004250 <HAL_RCC_GetSysClockFreq+0xfc>)
 8004192:	613b      	str	r3, [r7, #16]
 8004194:	e054      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004196:	4b2d      	ldr	r3, [pc, #180]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	2238      	movs	r2, #56	; 0x38
 800419c:	4013      	ands	r3, r2
 800419e:	2b10      	cmp	r3, #16
 80041a0:	d138      	bne.n	8004214 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80041a2:	4b2a      	ldr	r3, [pc, #168]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	2203      	movs	r2, #3
 80041a8:	4013      	ands	r3, r2
 80041aa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80041ac:	4b27      	ldr	r3, [pc, #156]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	091b      	lsrs	r3, r3, #4
 80041b2:	2207      	movs	r2, #7
 80041b4:	4013      	ands	r3, r2
 80041b6:	3301      	adds	r3, #1
 80041b8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b03      	cmp	r3, #3
 80041be:	d10d      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80041c0:	68b9      	ldr	r1, [r7, #8]
 80041c2:	4823      	ldr	r0, [pc, #140]	; (8004250 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041c4:	f7fb ffaa 	bl	800011c <__udivsi3>
 80041c8:	0003      	movs	r3, r0
 80041ca:	0019      	movs	r1, r3
 80041cc:	4b1f      	ldr	r3, [pc, #124]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	0a1b      	lsrs	r3, r3, #8
 80041d2:	227f      	movs	r2, #127	; 0x7f
 80041d4:	4013      	ands	r3, r2
 80041d6:	434b      	muls	r3, r1
 80041d8:	617b      	str	r3, [r7, #20]
        break;
 80041da:	e00d      	b.n	80041f8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80041dc:	68b9      	ldr	r1, [r7, #8]
 80041de:	481c      	ldr	r0, [pc, #112]	; (8004250 <HAL_RCC_GetSysClockFreq+0xfc>)
 80041e0:	f7fb ff9c 	bl	800011c <__udivsi3>
 80041e4:	0003      	movs	r3, r0
 80041e6:	0019      	movs	r1, r3
 80041e8:	4b18      	ldr	r3, [pc, #96]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	227f      	movs	r2, #127	; 0x7f
 80041f0:	4013      	ands	r3, r2
 80041f2:	434b      	muls	r3, r1
 80041f4:	617b      	str	r3, [r7, #20]
        break;
 80041f6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80041f8:	4b14      	ldr	r3, [pc, #80]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 80041fa:	68db      	ldr	r3, [r3, #12]
 80041fc:	0f5b      	lsrs	r3, r3, #29
 80041fe:	2207      	movs	r2, #7
 8004200:	4013      	ands	r3, r2
 8004202:	3301      	adds	r3, #1
 8004204:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	6978      	ldr	r0, [r7, #20]
 800420a:	f7fb ff87 	bl	800011c <__udivsi3>
 800420e:	0003      	movs	r3, r0
 8004210:	613b      	str	r3, [r7, #16]
 8004212:	e015      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004214:	4b0d      	ldr	r3, [pc, #52]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	2238      	movs	r2, #56	; 0x38
 800421a:	4013      	ands	r3, r2
 800421c:	2b20      	cmp	r3, #32
 800421e:	d103      	bne.n	8004228 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8004220:	2380      	movs	r3, #128	; 0x80
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	e00b      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004228:	4b08      	ldr	r3, [pc, #32]	; (800424c <HAL_RCC_GetSysClockFreq+0xf8>)
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	2238      	movs	r2, #56	; 0x38
 800422e:	4013      	ands	r3, r2
 8004230:	2b18      	cmp	r3, #24
 8004232:	d103      	bne.n	800423c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8004234:	23fa      	movs	r3, #250	; 0xfa
 8004236:	01db      	lsls	r3, r3, #7
 8004238:	613b      	str	r3, [r7, #16]
 800423a:	e001      	b.n	8004240 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800423c:	2300      	movs	r3, #0
 800423e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004240:	693b      	ldr	r3, [r7, #16]
}
 8004242:	0018      	movs	r0, r3
 8004244:	46bd      	mov	sp, r7
 8004246:	b006      	add	sp, #24
 8004248:	bd80      	pop	{r7, pc}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	40021000 	.word	0x40021000
 8004250:	00f42400 	.word	0x00f42400

08004254 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004258:	4b02      	ldr	r3, [pc, #8]	; (8004264 <HAL_RCC_GetHCLKFreq+0x10>)
 800425a:	681b      	ldr	r3, [r3, #0]
}
 800425c:	0018      	movs	r0, r3
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	46c0      	nop			; (mov r8, r8)
 8004264:	20000000 	.word	0x20000000

08004268 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004268:	b5b0      	push	{r4, r5, r7, lr}
 800426a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800426c:	f7ff fff2 	bl	8004254 <HAL_RCC_GetHCLKFreq>
 8004270:	0004      	movs	r4, r0
 8004272:	f7ff fb4b 	bl	800390c <LL_RCC_GetAPB1Prescaler>
 8004276:	0003      	movs	r3, r0
 8004278:	0b1a      	lsrs	r2, r3, #12
 800427a:	4b05      	ldr	r3, [pc, #20]	; (8004290 <HAL_RCC_GetPCLK1Freq+0x28>)
 800427c:	0092      	lsls	r2, r2, #2
 800427e:	58d3      	ldr	r3, [r2, r3]
 8004280:	221f      	movs	r2, #31
 8004282:	4013      	ands	r3, r2
 8004284:	40dc      	lsrs	r4, r3
 8004286:	0023      	movs	r3, r4
}
 8004288:	0018      	movs	r0, r3
 800428a:	46bd      	mov	sp, r7
 800428c:	bdb0      	pop	{r4, r5, r7, pc}
 800428e:	46c0      	nop			; (mov r8, r8)
 8004290:	0800b1f4 	.word	0x0800b1f4

08004294 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b082      	sub	sp, #8
 8004298:	af00      	add	r7, sp, #0
 800429a:	6078      	str	r0, [r7, #4]
 800429c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2207      	movs	r2, #7
 80042a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80042a4:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <HAL_RCC_GetClockConfig+0x4c>)
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2207      	movs	r2, #7
 80042aa:	401a      	ands	r2, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_GetClockConfig+0x4c>)
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	23f0      	movs	r3, #240	; 0xf0
 80042b6:	011b      	lsls	r3, r3, #4
 80042b8:	401a      	ands	r2, r3
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 80042be:	4b08      	ldr	r3, [pc, #32]	; (80042e0 <HAL_RCC_GetClockConfig+0x4c>)
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	23e0      	movs	r3, #224	; 0xe0
 80042c4:	01db      	lsls	r3, r3, #7
 80042c6:	401a      	ands	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCC_GetClockConfig+0x50>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	2207      	movs	r2, #7
 80042d2:	401a      	ands	r2, r3
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b002      	add	sp, #8
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	40021000 	.word	0x40021000
 80042e4:	40022000 	.word	0x40022000

080042e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b086      	sub	sp, #24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80042f0:	2313      	movs	r3, #19
 80042f2:	18fb      	adds	r3, r7, r3
 80042f4:	2200      	movs	r2, #0
 80042f6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80042f8:	2312      	movs	r3, #18
 80042fa:	18fb      	adds	r3, r7, r3
 80042fc:	2200      	movs	r2, #0
 80042fe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681a      	ldr	r2, [r3, #0]
 8004304:	2380      	movs	r3, #128	; 0x80
 8004306:	029b      	lsls	r3, r3, #10
 8004308:	4013      	ands	r3, r2
 800430a:	d100      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x26>
 800430c:	e0a3      	b.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800430e:	2011      	movs	r0, #17
 8004310:	183b      	adds	r3, r7, r0
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004316:	4b86      	ldr	r3, [pc, #536]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	055b      	lsls	r3, r3, #21
 800431e:	4013      	ands	r3, r2
 8004320:	d110      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004322:	4b83      	ldr	r3, [pc, #524]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004324:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004326:	4b82      	ldr	r3, [pc, #520]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004328:	2180      	movs	r1, #128	; 0x80
 800432a:	0549      	lsls	r1, r1, #21
 800432c:	430a      	orrs	r2, r1
 800432e:	63da      	str	r2, [r3, #60]	; 0x3c
 8004330:	4b7f      	ldr	r3, [pc, #508]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004332:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004334:	2380      	movs	r3, #128	; 0x80
 8004336:	055b      	lsls	r3, r3, #21
 8004338:	4013      	ands	r3, r2
 800433a:	60bb      	str	r3, [r7, #8]
 800433c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800433e:	183b      	adds	r3, r7, r0
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004344:	4b7b      	ldr	r3, [pc, #492]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	4b7a      	ldr	r3, [pc, #488]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800434a:	2180      	movs	r1, #128	; 0x80
 800434c:	0049      	lsls	r1, r1, #1
 800434e:	430a      	orrs	r2, r1
 8004350:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004352:	f7fe f919 	bl	8002588 <HAL_GetTick>
 8004356:	0003      	movs	r3, r0
 8004358:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800435a:	e00b      	b.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800435c:	f7fe f914 	bl	8002588 <HAL_GetTick>
 8004360:	0002      	movs	r2, r0
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	1ad3      	subs	r3, r2, r3
 8004366:	2b02      	cmp	r3, #2
 8004368:	d904      	bls.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800436a:	2313      	movs	r3, #19
 800436c:	18fb      	adds	r3, r7, r3
 800436e:	2203      	movs	r2, #3
 8004370:	701a      	strb	r2, [r3, #0]
        break;
 8004372:	e005      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004374:	4b6f      	ldr	r3, [pc, #444]	; (8004534 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8004376:	681a      	ldr	r2, [r3, #0]
 8004378:	2380      	movs	r3, #128	; 0x80
 800437a:	005b      	lsls	r3, r3, #1
 800437c:	4013      	ands	r3, r2
 800437e:	d0ed      	beq.n	800435c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8004380:	2313      	movs	r3, #19
 8004382:	18fb      	adds	r3, r7, r3
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d154      	bne.n	8004434 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800438a:	4b69      	ldr	r3, [pc, #420]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800438c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800438e:	23c0      	movs	r3, #192	; 0xc0
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	4013      	ands	r3, r2
 8004394:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d019      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d014      	beq.n	80043d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80043a6:	4b62      	ldr	r3, [pc, #392]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043aa:	4a63      	ldr	r2, [pc, #396]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80043ac:	4013      	ands	r3, r2
 80043ae:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80043b0:	4b5f      	ldr	r3, [pc, #380]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043b2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043b4:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043b6:	2180      	movs	r1, #128	; 0x80
 80043b8:	0249      	lsls	r1, r1, #9
 80043ba:	430a      	orrs	r2, r1
 80043bc:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80043be:	4b5c      	ldr	r3, [pc, #368]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80043c2:	4b5b      	ldr	r3, [pc, #364]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043c4:	495d      	ldr	r1, [pc, #372]	; (800453c <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80043c6:	400a      	ands	r2, r1
 80043c8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80043ca:	4b59      	ldr	r3, [pc, #356]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043cc:	697a      	ldr	r2, [r7, #20]
 80043ce:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	2201      	movs	r2, #1
 80043d4:	4013      	ands	r3, r2
 80043d6:	d016      	beq.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043d8:	f7fe f8d6 	bl	8002588 <HAL_GetTick>
 80043dc:	0003      	movs	r3, r0
 80043de:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043e0:	e00c      	b.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043e2:	f7fe f8d1 	bl	8002588 <HAL_GetTick>
 80043e6:	0002      	movs	r2, r0
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1ad3      	subs	r3, r2, r3
 80043ec:	4a54      	ldr	r2, [pc, #336]	; (8004540 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d904      	bls.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80043f2:	2313      	movs	r3, #19
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	2203      	movs	r2, #3
 80043f8:	701a      	strb	r2, [r3, #0]
            break;
 80043fa:	e004      	b.n	8004406 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80043fc:	4b4c      	ldr	r3, [pc, #304]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	2202      	movs	r2, #2
 8004402:	4013      	ands	r3, r2
 8004404:	d0ed      	beq.n	80043e2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8004406:	2313      	movs	r3, #19
 8004408:	18fb      	adds	r3, r7, r3
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d10a      	bne.n	8004426 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004410:	4b47      	ldr	r3, [pc, #284]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004414:	4a48      	ldr	r2, [pc, #288]	; (8004538 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8004416:	4013      	ands	r3, r2
 8004418:	0019      	movs	r1, r3
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	699a      	ldr	r2, [r3, #24]
 800441e:	4b44      	ldr	r3, [pc, #272]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004420:	430a      	orrs	r2, r1
 8004422:	65da      	str	r2, [r3, #92]	; 0x5c
 8004424:	e00c      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004426:	2312      	movs	r3, #18
 8004428:	18fb      	adds	r3, r7, r3
 800442a:	2213      	movs	r2, #19
 800442c:	18ba      	adds	r2, r7, r2
 800442e:	7812      	ldrb	r2, [r2, #0]
 8004430:	701a      	strb	r2, [r3, #0]
 8004432:	e005      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004434:	2312      	movs	r3, #18
 8004436:	18fb      	adds	r3, r7, r3
 8004438:	2213      	movs	r2, #19
 800443a:	18ba      	adds	r2, r7, r2
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004440:	2311      	movs	r3, #17
 8004442:	18fb      	adds	r3, r7, r3
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b01      	cmp	r3, #1
 8004448:	d105      	bne.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800444a:	4b39      	ldr	r3, [pc, #228]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800444c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800444e:	4b38      	ldr	r3, [pc, #224]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004450:	493c      	ldr	r1, [pc, #240]	; (8004544 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8004452:	400a      	ands	r2, r1
 8004454:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2201      	movs	r2, #1
 800445c:	4013      	ands	r3, r2
 800445e:	d009      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004460:	4b33      	ldr	r3, [pc, #204]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004462:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004464:	2203      	movs	r2, #3
 8004466:	4393      	bics	r3, r2
 8004468:	0019      	movs	r1, r3
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685a      	ldr	r2, [r3, #4]
 800446e:	4b30      	ldr	r3, [pc, #192]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004470:	430a      	orrs	r2, r1
 8004472:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2202      	movs	r2, #2
 800447a:	4013      	ands	r3, r2
 800447c:	d009      	beq.n	8004492 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800447e:	4b2c      	ldr	r3, [pc, #176]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004480:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004482:	220c      	movs	r2, #12
 8004484:	4393      	bics	r3, r2
 8004486:	0019      	movs	r1, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	4b28      	ldr	r3, [pc, #160]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800448e:	430a      	orrs	r2, r1
 8004490:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	2220      	movs	r2, #32
 8004498:	4013      	ands	r3, r2
 800449a:	d009      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800449c:	4b24      	ldr	r3, [pc, #144]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800449e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a0:	4a29      	ldr	r2, [pc, #164]	; (8004548 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044a2:	4013      	ands	r3, r2
 80044a4:	0019      	movs	r1, r3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	68da      	ldr	r2, [r3, #12]
 80044aa:	4b21      	ldr	r3, [pc, #132]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ac:	430a      	orrs	r2, r1
 80044ae:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681a      	ldr	r2, [r3, #0]
 80044b4:	2380      	movs	r3, #128	; 0x80
 80044b6:	01db      	lsls	r3, r3, #7
 80044b8:	4013      	ands	r3, r2
 80044ba:	d015      	beq.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044bc:	4b1c      	ldr	r3, [pc, #112]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044c0:	009b      	lsls	r3, r3, #2
 80044c2:	0899      	lsrs	r1, r3, #2
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	695a      	ldr	r2, [r3, #20]
 80044c8:	4b19      	ldr	r3, [pc, #100]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044ca:	430a      	orrs	r2, r1
 80044cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	2380      	movs	r3, #128	; 0x80
 80044d4:	05db      	lsls	r3, r3, #23
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d106      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80044da:	4b15      	ldr	r3, [pc, #84]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044dc:	68da      	ldr	r2, [r3, #12]
 80044de:	4b14      	ldr	r3, [pc, #80]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044e0:	2180      	movs	r1, #128	; 0x80
 80044e2:	0249      	lsls	r1, r1, #9
 80044e4:	430a      	orrs	r2, r1
 80044e6:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	2380      	movs	r3, #128	; 0x80
 80044ee:	011b      	lsls	r3, r3, #4
 80044f0:	4013      	ands	r3, r2
 80044f2:	d016      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80044f4:	4b0e      	ldr	r3, [pc, #56]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80044f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044f8:	4a14      	ldr	r2, [pc, #80]	; (800454c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80044fa:	4013      	ands	r3, r2
 80044fc:	0019      	movs	r1, r3
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	691a      	ldr	r2, [r3, #16]
 8004502:	4b0b      	ldr	r3, [pc, #44]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004504:	430a      	orrs	r2, r1
 8004506:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	2380      	movs	r3, #128	; 0x80
 800450e:	01db      	lsls	r3, r3, #7
 8004510:	429a      	cmp	r2, r3
 8004512:	d106      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x23a>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8004514:	4b06      	ldr	r3, [pc, #24]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8004516:	68da      	ldr	r2, [r3, #12]
 8004518:	4b05      	ldr	r3, [pc, #20]	; (8004530 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800451a:	2180      	movs	r1, #128	; 0x80
 800451c:	0249      	lsls	r1, r1, #9
 800451e:	430a      	orrs	r2, r1
 8004520:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8004522:	2312      	movs	r3, #18
 8004524:	18fb      	adds	r3, r7, r3
 8004526:	781b      	ldrb	r3, [r3, #0]
}
 8004528:	0018      	movs	r0, r3
 800452a:	46bd      	mov	sp, r7
 800452c:	b006      	add	sp, #24
 800452e:	bd80      	pop	{r7, pc}
 8004530:	40021000 	.word	0x40021000
 8004534:	40007000 	.word	0x40007000
 8004538:	fffffcff 	.word	0xfffffcff
 800453c:	fffeffff 	.word	0xfffeffff
 8004540:	00001388 	.word	0x00001388
 8004544:	efffffff 	.word	0xefffffff
 8004548:	ffffcfff 	.word	0xffffcfff
 800454c:	ffff3fff 	.word	0xffff3fff

08004550 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004550:	b580      	push	{r7, lr}
 8004552:	b084      	sub	sp, #16
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d101      	bne.n	8004562 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e0a8      	b.n	80046b4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b00      	cmp	r3, #0
 8004568:	d109      	bne.n	800457e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685a      	ldr	r2, [r3, #4]
 800456e:	2382      	movs	r3, #130	; 0x82
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	429a      	cmp	r2, r3
 8004574:	d009      	beq.n	800458a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	61da      	str	r2, [r3, #28]
 800457c:	e005      	b.n	800458a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2200      	movs	r2, #0
 8004582:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2200      	movs	r2, #0
 8004588:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	225d      	movs	r2, #93	; 0x5d
 8004594:	5c9b      	ldrb	r3, [r3, r2]
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d107      	bne.n	80045ac <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	225c      	movs	r2, #92	; 0x5c
 80045a0:	2100      	movs	r1, #0
 80045a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	0018      	movs	r0, r3
 80045a8:	f7fc ff50 	bl	800144c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	225d      	movs	r2, #93	; 0x5d
 80045b0:	2102      	movs	r1, #2
 80045b2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	2140      	movs	r1, #64	; 0x40
 80045c0:	438a      	bics	r2, r1
 80045c2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	68da      	ldr	r2, [r3, #12]
 80045c8:	23e0      	movs	r3, #224	; 0xe0
 80045ca:	00db      	lsls	r3, r3, #3
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d902      	bls.n	80045d6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80045d0:	2300      	movs	r3, #0
 80045d2:	60fb      	str	r3, [r7, #12]
 80045d4:	e002      	b.n	80045dc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80045d6:	2380      	movs	r3, #128	; 0x80
 80045d8:	015b      	lsls	r3, r3, #5
 80045da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	68da      	ldr	r2, [r3, #12]
 80045e0:	23f0      	movs	r3, #240	; 0xf0
 80045e2:	011b      	lsls	r3, r3, #4
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d008      	beq.n	80045fa <HAL_SPI_Init+0xaa>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	68da      	ldr	r2, [r3, #12]
 80045ec:	23e0      	movs	r3, #224	; 0xe0
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	429a      	cmp	r2, r3
 80045f2:	d002      	beq.n	80045fa <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	685a      	ldr	r2, [r3, #4]
 80045fe:	2382      	movs	r3, #130	; 0x82
 8004600:	005b      	lsls	r3, r3, #1
 8004602:	401a      	ands	r2, r3
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6899      	ldr	r1, [r3, #8]
 8004608:	2384      	movs	r3, #132	; 0x84
 800460a:	021b      	lsls	r3, r3, #8
 800460c:	400b      	ands	r3, r1
 800460e:	431a      	orrs	r2, r3
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	691b      	ldr	r3, [r3, #16]
 8004614:	2102      	movs	r1, #2
 8004616:	400b      	ands	r3, r1
 8004618:	431a      	orrs	r2, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	2101      	movs	r1, #1
 8004620:	400b      	ands	r3, r1
 8004622:	431a      	orrs	r2, r3
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6999      	ldr	r1, [r3, #24]
 8004628:	2380      	movs	r3, #128	; 0x80
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	400b      	ands	r3, r1
 800462e:	431a      	orrs	r2, r3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	69db      	ldr	r3, [r3, #28]
 8004634:	2138      	movs	r1, #56	; 0x38
 8004636:	400b      	ands	r3, r1
 8004638:	431a      	orrs	r2, r3
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6a1b      	ldr	r3, [r3, #32]
 800463e:	2180      	movs	r1, #128	; 0x80
 8004640:	400b      	ands	r3, r1
 8004642:	431a      	orrs	r2, r3
 8004644:	0011      	movs	r1, r2
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800464a:	2380      	movs	r3, #128	; 0x80
 800464c:	019b      	lsls	r3, r3, #6
 800464e:	401a      	ands	r2, r3
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	430a      	orrs	r2, r1
 8004656:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	0c1b      	lsrs	r3, r3, #16
 800465e:	2204      	movs	r2, #4
 8004660:	401a      	ands	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	2110      	movs	r1, #16
 8004668:	400b      	ands	r3, r1
 800466a:	431a      	orrs	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004670:	2108      	movs	r1, #8
 8004672:	400b      	ands	r3, r1
 8004674:	431a      	orrs	r2, r3
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68d9      	ldr	r1, [r3, #12]
 800467a:	23f0      	movs	r3, #240	; 0xf0
 800467c:	011b      	lsls	r3, r3, #4
 800467e:	400b      	ands	r3, r1
 8004680:	431a      	orrs	r2, r3
 8004682:	0011      	movs	r1, r2
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	2380      	movs	r3, #128	; 0x80
 8004688:	015b      	lsls	r3, r3, #5
 800468a:	401a      	ands	r2, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	69da      	ldr	r2, [r3, #28]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4907      	ldr	r1, [pc, #28]	; (80046bc <HAL_SPI_Init+0x16c>)
 80046a0:	400a      	ands	r2, r1
 80046a2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2200      	movs	r2, #0
 80046a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	225d      	movs	r2, #93	; 0x5d
 80046ae:	2101      	movs	r1, #1
 80046b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	0018      	movs	r0, r3
 80046b6:	46bd      	mov	sp, r7
 80046b8:	b004      	add	sp, #16
 80046ba:	bd80      	pop	{r7, pc}
 80046bc:	fffff7ff 	.word	0xfffff7ff

080046c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b082      	sub	sp, #8
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d101      	bne.n	80046d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80046ce:	2301      	movs	r3, #1
 80046d0:	e04a      	b.n	8004768 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	223d      	movs	r2, #61	; 0x3d
 80046d6:	5c9b      	ldrb	r3, [r3, r2]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d107      	bne.n	80046ee <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	223c      	movs	r2, #60	; 0x3c
 80046e2:	2100      	movs	r1, #0
 80046e4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	0018      	movs	r0, r3
 80046ea:	f7fd fc69 	bl	8001fc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	223d      	movs	r2, #61	; 0x3d
 80046f2:	2102      	movs	r1, #2
 80046f4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681a      	ldr	r2, [r3, #0]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	0019      	movs	r1, r3
 8004700:	0010      	movs	r0, r2
 8004702:	f000 fbdd 	bl	8004ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2248      	movs	r2, #72	; 0x48
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	223e      	movs	r2, #62	; 0x3e
 8004712:	2101      	movs	r1, #1
 8004714:	5499      	strb	r1, [r3, r2]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	223f      	movs	r2, #63	; 0x3f
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2240      	movs	r2, #64	; 0x40
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2241      	movs	r2, #65	; 0x41
 800472a:	2101      	movs	r1, #1
 800472c:	5499      	strb	r1, [r3, r2]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2242      	movs	r2, #66	; 0x42
 8004732:	2101      	movs	r1, #1
 8004734:	5499      	strb	r1, [r3, r2]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2243      	movs	r2, #67	; 0x43
 800473a:	2101      	movs	r1, #1
 800473c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2244      	movs	r2, #68	; 0x44
 8004742:	2101      	movs	r1, #1
 8004744:	5499      	strb	r1, [r3, r2]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2245      	movs	r2, #69	; 0x45
 800474a:	2101      	movs	r1, #1
 800474c:	5499      	strb	r1, [r3, r2]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2246      	movs	r2, #70	; 0x46
 8004752:	2101      	movs	r1, #1
 8004754:	5499      	strb	r1, [r3, r2]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2247      	movs	r2, #71	; 0x47
 800475a:	2101      	movs	r1, #1
 800475c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	223d      	movs	r2, #61	; 0x3d
 8004762:	2101      	movs	r1, #1
 8004764:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004766:	2300      	movs	r3, #0
}
 8004768:	0018      	movs	r0, r3
 800476a:	46bd      	mov	sp, r7
 800476c:	b002      	add	sp, #8
 800476e:	bd80      	pop	{r7, pc}

08004770 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	223d      	movs	r2, #61	; 0x3d
 800477c:	5c9b      	ldrb	r3, [r3, r2]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	2b01      	cmp	r3, #1
 8004782:	d001      	beq.n	8004788 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004784:	2301      	movs	r3, #1
 8004786:	e03c      	b.n	8004802 <HAL_TIM_Base_Start_IT+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	223d      	movs	r2, #61	; 0x3d
 800478c:	2102      	movs	r1, #2
 800478e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	68da      	ldr	r2, [r3, #12]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2101      	movs	r1, #1
 800479c:	430a      	orrs	r2, r1
 800479e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a19      	ldr	r2, [pc, #100]	; (800480c <HAL_TIM_Base_Start_IT+0x9c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d009      	beq.n	80047be <HAL_TIM_Base_Start_IT+0x4e>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a18      	ldr	r2, [pc, #96]	; (8004810 <HAL_TIM_Base_Start_IT+0xa0>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d004      	beq.n	80047be <HAL_TIM_Base_Start_IT+0x4e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a16      	ldr	r2, [pc, #88]	; (8004814 <HAL_TIM_Base_Start_IT+0xa4>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d116      	bne.n	80047ec <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	689b      	ldr	r3, [r3, #8]
 80047c4:	4a14      	ldr	r2, [pc, #80]	; (8004818 <HAL_TIM_Base_Start_IT+0xa8>)
 80047c6:	4013      	ands	r3, r2
 80047c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2b06      	cmp	r3, #6
 80047ce:	d016      	beq.n	80047fe <HAL_TIM_Base_Start_IT+0x8e>
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	2380      	movs	r3, #128	; 0x80
 80047d4:	025b      	lsls	r3, r3, #9
 80047d6:	429a      	cmp	r2, r3
 80047d8:	d011      	beq.n	80047fe <HAL_TIM_Base_Start_IT+0x8e>
    {
      __HAL_TIM_ENABLE(htim);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2101      	movs	r1, #1
 80047e6:	430a      	orrs	r2, r1
 80047e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047ea:	e008      	b.n	80047fe <HAL_TIM_Base_Start_IT+0x8e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	2101      	movs	r1, #1
 80047f8:	430a      	orrs	r2, r1
 80047fa:	601a      	str	r2, [r3, #0]
 80047fc:	e000      	b.n	8004800 <HAL_TIM_Base_Start_IT+0x90>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047fe:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	0018      	movs	r0, r3
 8004804:	46bd      	mov	sp, r7
 8004806:	b004      	add	sp, #16
 8004808:	bd80      	pop	{r7, pc}
 800480a:	46c0      	nop			; (mov r8, r8)
 800480c:	40012c00 	.word	0x40012c00
 8004810:	40000400 	.word	0x40000400
 8004814:	40014000 	.word	0x40014000
 8004818:	00010007 	.word	0x00010007

0800481c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e04a      	b.n	80048c4 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	223d      	movs	r2, #61	; 0x3d
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d107      	bne.n	800484a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	223c      	movs	r2, #60	; 0x3c
 800483e:	2100      	movs	r1, #0
 8004840:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0018      	movs	r0, r3
 8004846:	f7fd fc1b 	bl	8002080 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	223d      	movs	r2, #61	; 0x3d
 800484e:	2102      	movs	r1, #2
 8004850:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	3304      	adds	r3, #4
 800485a:	0019      	movs	r1, r3
 800485c:	0010      	movs	r0, r2
 800485e:	f000 fb2f 	bl	8004ec0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2248      	movs	r2, #72	; 0x48
 8004866:	2101      	movs	r1, #1
 8004868:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	223e      	movs	r2, #62	; 0x3e
 800486e:	2101      	movs	r1, #1
 8004870:	5499      	strb	r1, [r3, r2]
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	223f      	movs	r2, #63	; 0x3f
 8004876:	2101      	movs	r1, #1
 8004878:	5499      	strb	r1, [r3, r2]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2240      	movs	r2, #64	; 0x40
 800487e:	2101      	movs	r1, #1
 8004880:	5499      	strb	r1, [r3, r2]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2241      	movs	r2, #65	; 0x41
 8004886:	2101      	movs	r1, #1
 8004888:	5499      	strb	r1, [r3, r2]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2242      	movs	r2, #66	; 0x42
 800488e:	2101      	movs	r1, #1
 8004890:	5499      	strb	r1, [r3, r2]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2243      	movs	r2, #67	; 0x43
 8004896:	2101      	movs	r1, #1
 8004898:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2244      	movs	r2, #68	; 0x44
 800489e:	2101      	movs	r1, #1
 80048a0:	5499      	strb	r1, [r3, r2]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	2245      	movs	r2, #69	; 0x45
 80048a6:	2101      	movs	r1, #1
 80048a8:	5499      	strb	r1, [r3, r2]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2246      	movs	r2, #70	; 0x46
 80048ae:	2101      	movs	r1, #1
 80048b0:	5499      	strb	r1, [r3, r2]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2247      	movs	r2, #71	; 0x47
 80048b6:	2101      	movs	r1, #1
 80048b8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	223d      	movs	r2, #61	; 0x3d
 80048be:	2101      	movs	r1, #1
 80048c0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80048c2:	2300      	movs	r3, #0
}
 80048c4:	0018      	movs	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	b002      	add	sp, #8
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d101      	bne.n	80048e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	e090      	b.n	8004a02 <HAL_TIM_Encoder_Init+0x136>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	223d      	movs	r2, #61	; 0x3d
 80048e4:	5c9b      	ldrb	r3, [r3, r2]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d107      	bne.n	80048fc <HAL_TIM_Encoder_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	223c      	movs	r2, #60	; 0x3c
 80048f0:	2100      	movs	r1, #0
 80048f2:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	0018      	movs	r0, r3
 80048f8:	f7fd face 	bl	8001e98 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	223d      	movs	r2, #61	; 0x3d
 8004900:	2102      	movs	r1, #2
 8004902:	5499      	strb	r1, [r3, r2]

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	689a      	ldr	r2, [r3, #8]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	493f      	ldr	r1, [pc, #252]	; (8004a0c <HAL_TIM_Encoder_Init+0x140>)
 8004910:	400a      	ands	r2, r1
 8004912:	609a      	str	r2, [r3, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	0019      	movs	r1, r3
 800491e:	0010      	movs	r0, r2
 8004920:	f000 face 	bl	8004ec0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6a1b      	ldr	r3, [r3, #32]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	4313      	orrs	r3, r2
 8004944:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	4a31      	ldr	r2, [pc, #196]	; (8004a10 <HAL_TIM_Encoder_Init+0x144>)
 800494a:	4013      	ands	r3, r2
 800494c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	689a      	ldr	r2, [r3, #8]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	021b      	lsls	r3, r3, #8
 8004958:	4313      	orrs	r3, r2
 800495a:	693a      	ldr	r2, [r7, #16]
 800495c:	4313      	orrs	r3, r2
 800495e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	4a2c      	ldr	r2, [pc, #176]	; (8004a14 <HAL_TIM_Encoder_Init+0x148>)
 8004964:	4013      	ands	r3, r2
 8004966:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	4a2b      	ldr	r2, [pc, #172]	; (8004a18 <HAL_TIM_Encoder_Init+0x14c>)
 800496c:	4013      	ands	r3, r2
 800496e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	68da      	ldr	r2, [r3, #12]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	69db      	ldr	r3, [r3, #28]
 8004978:	021b      	lsls	r3, r3, #8
 800497a:	4313      	orrs	r3, r2
 800497c:	693a      	ldr	r2, [r7, #16]
 800497e:	4313      	orrs	r3, r2
 8004980:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	011a      	lsls	r2, r3, #4
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	6a1b      	ldr	r3, [r3, #32]
 800498c:	031b      	lsls	r3, r3, #12
 800498e:	4313      	orrs	r3, r2
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	4313      	orrs	r3, r2
 8004994:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2222      	movs	r2, #34	; 0x22
 800499a:	4393      	bics	r3, r2
 800499c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2288      	movs	r2, #136	; 0x88
 80049a2:	4393      	bics	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	685a      	ldr	r2, [r3, #4]
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	4313      	orrs	r3, r2
 80049b2:	68fa      	ldr	r2, [r7, #12]
 80049b4:	4313      	orrs	r3, r2
 80049b6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	697a      	ldr	r2, [r7, #20]
 80049be:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	693a      	ldr	r2, [r7, #16]
 80049c6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68fa      	ldr	r2, [r7, #12]
 80049ce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2248      	movs	r2, #72	; 0x48
 80049d4:	2101      	movs	r1, #1
 80049d6:	5499      	strb	r1, [r3, r2]

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	223e      	movs	r2, #62	; 0x3e
 80049dc:	2101      	movs	r1, #1
 80049de:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	223f      	movs	r2, #63	; 0x3f
 80049e4:	2101      	movs	r1, #1
 80049e6:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2244      	movs	r2, #68	; 0x44
 80049ec:	2101      	movs	r1, #1
 80049ee:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2245      	movs	r2, #69	; 0x45
 80049f4:	2101      	movs	r1, #1
 80049f6:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	223d      	movs	r2, #61	; 0x3d
 80049fc:	2101      	movs	r1, #1
 80049fe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	0018      	movs	r0, r3
 8004a04:	46bd      	mov	sp, r7
 8004a06:	b006      	add	sp, #24
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	46c0      	nop			; (mov r8, r8)
 8004a0c:	fffebff8 	.word	0xfffebff8
 8004a10:	fffffcfc 	.word	0xfffffcfc
 8004a14:	fffff3f3 	.word	0xfffff3f3
 8004a18:	ffff0f0f 	.word	0xffff0f0f

08004a1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d124      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	4013      	ands	r3, r2
 8004a3c:	2b02      	cmp	r3, #2
 8004a3e:	d11d      	bne.n	8004a7c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2203      	movs	r2, #3
 8004a46:	4252      	negs	r2, r2
 8004a48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	699b      	ldr	r3, [r3, #24]
 8004a56:	2203      	movs	r2, #3
 8004a58:	4013      	ands	r3, r2
 8004a5a:	d004      	beq.n	8004a66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	0018      	movs	r0, r3
 8004a60:	f000 fa16 	bl	8004e90 <HAL_TIM_IC_CaptureCallback>
 8004a64:	e007      	b.n	8004a76 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	0018      	movs	r0, r3
 8004a6a:	f000 fa09 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	0018      	movs	r0, r3
 8004a72:	f000 fa15 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	691b      	ldr	r3, [r3, #16]
 8004a82:	2204      	movs	r2, #4
 8004a84:	4013      	ands	r3, r2
 8004a86:	2b04      	cmp	r3, #4
 8004a88:	d125      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	2204      	movs	r2, #4
 8004a92:	4013      	ands	r3, r2
 8004a94:	2b04      	cmp	r3, #4
 8004a96:	d11e      	bne.n	8004ad6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	2205      	movs	r2, #5
 8004a9e:	4252      	negs	r2, r2
 8004aa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2202      	movs	r2, #2
 8004aa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	699a      	ldr	r2, [r3, #24]
 8004aae:	23c0      	movs	r3, #192	; 0xc0
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4013      	ands	r3, r2
 8004ab4:	d004      	beq.n	8004ac0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	0018      	movs	r0, r3
 8004aba:	f000 f9e9 	bl	8004e90 <HAL_TIM_IC_CaptureCallback>
 8004abe:	e007      	b.n	8004ad0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	0018      	movs	r0, r3
 8004ac4:	f000 f9dc 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	0018      	movs	r0, r3
 8004acc:	f000 f9e8 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	2208      	movs	r2, #8
 8004ade:	4013      	ands	r3, r2
 8004ae0:	2b08      	cmp	r3, #8
 8004ae2:	d124      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	2208      	movs	r2, #8
 8004aec:	4013      	ands	r3, r2
 8004aee:	2b08      	cmp	r3, #8
 8004af0:	d11d      	bne.n	8004b2e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2209      	movs	r2, #9
 8004af8:	4252      	negs	r2, r2
 8004afa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2204      	movs	r2, #4
 8004b00:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69db      	ldr	r3, [r3, #28]
 8004b08:	2203      	movs	r2, #3
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	d004      	beq.n	8004b18 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	0018      	movs	r0, r3
 8004b12:	f000 f9bd 	bl	8004e90 <HAL_TIM_IC_CaptureCallback>
 8004b16:	e007      	b.n	8004b28 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	0018      	movs	r0, r3
 8004b1c:	f000 f9b0 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	0018      	movs	r0, r3
 8004b24:	f000 f9bc 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	2210      	movs	r2, #16
 8004b36:	4013      	ands	r3, r2
 8004b38:	2b10      	cmp	r3, #16
 8004b3a:	d125      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	68db      	ldr	r3, [r3, #12]
 8004b42:	2210      	movs	r2, #16
 8004b44:	4013      	ands	r3, r2
 8004b46:	2b10      	cmp	r3, #16
 8004b48:	d11e      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2211      	movs	r2, #17
 8004b50:	4252      	negs	r2, r2
 8004b52:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2208      	movs	r2, #8
 8004b58:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	69da      	ldr	r2, [r3, #28]
 8004b60:	23c0      	movs	r3, #192	; 0xc0
 8004b62:	009b      	lsls	r3, r3, #2
 8004b64:	4013      	ands	r3, r2
 8004b66:	d004      	beq.n	8004b72 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	0018      	movs	r0, r3
 8004b6c:	f000 f990 	bl	8004e90 <HAL_TIM_IC_CaptureCallback>
 8004b70:	e007      	b.n	8004b82 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	0018      	movs	r0, r3
 8004b76:	f000 f983 	bl	8004e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	0018      	movs	r0, r3
 8004b7e:	f000 f98f 	bl	8004ea0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	4013      	ands	r3, r2
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10f      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4013      	ands	r3, r2
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d108      	bne.n	8004bb6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	4252      	negs	r2, r2
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	0018      	movs	r0, r3
 8004bb2:	f7fc fbf5 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	2280      	movs	r2, #128	; 0x80
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d10f      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	2280      	movs	r2, #128	; 0x80
 8004bcc:	4013      	ands	r3, r2
 8004bce:	2b80      	cmp	r3, #128	; 0x80
 8004bd0:	d108      	bne.n	8004be4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	2281      	movs	r2, #129	; 0x81
 8004bd8:	4252      	negs	r2, r2
 8004bda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	0018      	movs	r0, r3
 8004be0:	f000 fdbe 	bl	8005760 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	691a      	ldr	r2, [r3, #16]
 8004bea:	2380      	movs	r3, #128	; 0x80
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	401a      	ands	r2, r3
 8004bf0:	2380      	movs	r3, #128	; 0x80
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d10e      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68db      	ldr	r3, [r3, #12]
 8004bfe:	2280      	movs	r2, #128	; 0x80
 8004c00:	4013      	ands	r3, r2
 8004c02:	2b80      	cmp	r3, #128	; 0x80
 8004c04:	d107      	bne.n	8004c16 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a1c      	ldr	r2, [pc, #112]	; (8004c7c <HAL_TIM_IRQHandler+0x260>)
 8004c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	0018      	movs	r0, r3
 8004c12:	f000 fdad 	bl	8005770 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2240      	movs	r2, #64	; 0x40
 8004c1e:	4013      	ands	r3, r2
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d10f      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	68db      	ldr	r3, [r3, #12]
 8004c2a:	2240      	movs	r2, #64	; 0x40
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	2b40      	cmp	r3, #64	; 0x40
 8004c30:	d108      	bne.n	8004c44 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	2241      	movs	r2, #65	; 0x41
 8004c38:	4252      	negs	r2, r2
 8004c3a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 f936 	bl	8004eb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	2220      	movs	r2, #32
 8004c4c:	4013      	ands	r3, r2
 8004c4e:	2b20      	cmp	r3, #32
 8004c50:	d10f      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	2220      	movs	r2, #32
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b20      	cmp	r3, #32
 8004c5e:	d108      	bne.n	8004c72 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2221      	movs	r2, #33	; 0x21
 8004c66:	4252      	negs	r2, r2
 8004c68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	0018      	movs	r0, r3
 8004c6e:	f000 fd6f 	bl	8005750 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c72:	46c0      	nop			; (mov r8, r8)
 8004c74:	46bd      	mov	sp, r7
 8004c76:	b002      	add	sp, #8
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	46c0      	nop			; (mov r8, r8)
 8004c7c:	fffffeff 	.word	0xfffffeff

08004c80 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b086      	sub	sp, #24
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	60f8      	str	r0, [r7, #12]
 8004c88:	60b9      	str	r1, [r7, #8]
 8004c8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c8c:	2317      	movs	r3, #23
 8004c8e:	18fb      	adds	r3, r7, r3
 8004c90:	2200      	movs	r2, #0
 8004c92:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	223c      	movs	r2, #60	; 0x3c
 8004c98:	5c9b      	ldrb	r3, [r3, r2]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d101      	bne.n	8004ca2 <HAL_TIM_PWM_ConfigChannel+0x22>
 8004c9e:	2302      	movs	r3, #2
 8004ca0:	e0e5      	b.n	8004e6e <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	223c      	movs	r2, #60	; 0x3c
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	2b14      	cmp	r3, #20
 8004cae:	d900      	bls.n	8004cb2 <HAL_TIM_PWM_ConfigChannel+0x32>
 8004cb0:	e0d1      	b.n	8004e56 <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	009a      	lsls	r2, r3, #2
 8004cb6:	4b70      	ldr	r3, [pc, #448]	; (8004e78 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004cb8:	18d3      	adds	r3, r2, r3
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	0011      	movs	r1, r2
 8004cc6:	0018      	movs	r0, r3
 8004cc8:	f000 f970 	bl	8004fac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699a      	ldr	r2, [r3, #24]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	2108      	movs	r1, #8
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	699a      	ldr	r2, [r3, #24]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2104      	movs	r1, #4
 8004ce8:	438a      	bics	r2, r1
 8004cea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6999      	ldr	r1, [r3, #24]
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	691a      	ldr	r2, [r3, #16]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	619a      	str	r2, [r3, #24]
      break;
 8004cfe:	e0af      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	0011      	movs	r1, r2
 8004d08:	0018      	movs	r0, r3
 8004d0a:	f000 f9d9 	bl	80050c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	699a      	ldr	r2, [r3, #24]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2180      	movs	r1, #128	; 0x80
 8004d1a:	0109      	lsls	r1, r1, #4
 8004d1c:	430a      	orrs	r2, r1
 8004d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	699a      	ldr	r2, [r3, #24]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	4954      	ldr	r1, [pc, #336]	; (8004e7c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004d2c:	400a      	ands	r2, r1
 8004d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	6999      	ldr	r1, [r3, #24]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	021a      	lsls	r2, r3, #8
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	619a      	str	r2, [r3, #24]
      break;
 8004d44:	e08c      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68ba      	ldr	r2, [r7, #8]
 8004d4c:	0011      	movs	r1, r2
 8004d4e:	0018      	movs	r0, r3
 8004d50:	f000 fa3a 	bl	80051c8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	69da      	ldr	r2, [r3, #28]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2108      	movs	r1, #8
 8004d60:	430a      	orrs	r2, r1
 8004d62:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	69da      	ldr	r2, [r3, #28]
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	2104      	movs	r1, #4
 8004d70:	438a      	bics	r2, r1
 8004d72:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	69d9      	ldr	r1, [r3, #28]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	691a      	ldr	r2, [r3, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	430a      	orrs	r2, r1
 8004d84:	61da      	str	r2, [r3, #28]
      break;
 8004d86:	e06b      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	68ba      	ldr	r2, [r7, #8]
 8004d8e:	0011      	movs	r1, r2
 8004d90:	0018      	movs	r0, r3
 8004d92:	f000 faa1 	bl	80052d8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	2180      	movs	r1, #128	; 0x80
 8004da2:	0109      	lsls	r1, r1, #4
 8004da4:	430a      	orrs	r2, r1
 8004da6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69da      	ldr	r2, [r3, #28]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4932      	ldr	r1, [pc, #200]	; (8004e7c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004db4:	400a      	ands	r2, r1
 8004db6:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	69d9      	ldr	r1, [r3, #28]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	021a      	lsls	r2, r3, #8
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	430a      	orrs	r2, r1
 8004dca:	61da      	str	r2, [r3, #28]
      break;
 8004dcc:	e048      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	0011      	movs	r1, r2
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f000 fae8 	bl	80053ac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	2108      	movs	r1, #8
 8004de8:	430a      	orrs	r2, r1
 8004dea:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2104      	movs	r1, #4
 8004df8:	438a      	bics	r2, r1
 8004dfa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	691a      	ldr	r2, [r3, #16]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	430a      	orrs	r2, r1
 8004e0c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e0e:	e027      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	0011      	movs	r1, r2
 8004e18:	0018      	movs	r0, r3
 8004e1a:	f000 fb27 	bl	800546c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2180      	movs	r1, #128	; 0x80
 8004e2a:	0109      	lsls	r1, r1, #4
 8004e2c:	430a      	orrs	r2, r1
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4910      	ldr	r1, [pc, #64]	; (8004e7c <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	021a      	lsls	r2, r3, #8
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004e54:	e004      	b.n	8004e60 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 8004e56:	2317      	movs	r3, #23
 8004e58:	18fb      	adds	r3, r7, r3
 8004e5a:	2201      	movs	r2, #1
 8004e5c:	701a      	strb	r2, [r3, #0]
      break;
 8004e5e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	223c      	movs	r2, #60	; 0x3c
 8004e64:	2100      	movs	r1, #0
 8004e66:	5499      	strb	r1, [r3, r2]

  return status;
 8004e68:	2317      	movs	r3, #23
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	781b      	ldrb	r3, [r3, #0]
}
 8004e6e:	0018      	movs	r0, r3
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b006      	add	sp, #24
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			; (mov r8, r8)
 8004e78:	0800b214 	.word	0x0800b214
 8004e7c:	fffffbff 	.word	0xfffffbff

08004e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004e88:	46c0      	nop			; (mov r8, r8)
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	b002      	add	sp, #8
 8004e8e:	bd80      	pop	{r7, pc}

08004e90 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b082      	sub	sp, #8
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004e98:	46c0      	nop			; (mov r8, r8)
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	b002      	add	sp, #8
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ea8:	46c0      	nop			; (mov r8, r8)
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	b002      	add	sp, #8
 8004eae:	bd80      	pop	{r7, pc}

08004eb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	b082      	sub	sp, #8
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004eb8:	46c0      	nop			; (mov r8, r8)
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b002      	add	sp, #8
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a2f      	ldr	r2, [pc, #188]	; (8004f90 <TIM_Base_SetConfig+0xd0>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d003      	beq.n	8004ee0 <TIM_Base_SetConfig+0x20>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a2e      	ldr	r2, [pc, #184]	; (8004f94 <TIM_Base_SetConfig+0xd4>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d108      	bne.n	8004ef2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2270      	movs	r2, #112	; 0x70
 8004ee4:	4393      	bics	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	68fa      	ldr	r2, [r7, #12]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a26      	ldr	r2, [pc, #152]	; (8004f90 <TIM_Base_SetConfig+0xd0>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <TIM_Base_SetConfig+0x62>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a25      	ldr	r2, [pc, #148]	; (8004f94 <TIM_Base_SetConfig+0xd4>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00f      	beq.n	8004f22 <TIM_Base_SetConfig+0x62>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a24      	ldr	r2, [pc, #144]	; (8004f98 <TIM_Base_SetConfig+0xd8>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d00b      	beq.n	8004f22 <TIM_Base_SetConfig+0x62>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a23      	ldr	r2, [pc, #140]	; (8004f9c <TIM_Base_SetConfig+0xdc>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d007      	beq.n	8004f22 <TIM_Base_SetConfig+0x62>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	4a22      	ldr	r2, [pc, #136]	; (8004fa0 <TIM_Base_SetConfig+0xe0>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d003      	beq.n	8004f22 <TIM_Base_SetConfig+0x62>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	4a21      	ldr	r2, [pc, #132]	; (8004fa4 <TIM_Base_SetConfig+0xe4>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d108      	bne.n	8004f34 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	4a20      	ldr	r2, [pc, #128]	; (8004fa8 <TIM_Base_SetConfig+0xe8>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	68fa      	ldr	r2, [r7, #12]
 8004f30:	4313      	orrs	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2280      	movs	r2, #128	; 0x80
 8004f38:	4393      	bics	r3, r2
 8004f3a:	001a      	movs	r2, r3
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	695b      	ldr	r3, [r3, #20]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	68fa      	ldr	r2, [r7, #12]
 8004f48:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	681a      	ldr	r2, [r3, #0]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a0c      	ldr	r2, [pc, #48]	; (8004f90 <TIM_Base_SetConfig+0xd0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <TIM_Base_SetConfig+0xba>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a0d      	ldr	r2, [pc, #52]	; (8004f9c <TIM_Base_SetConfig+0xdc>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <TIM_Base_SetConfig+0xba>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a0c      	ldr	r2, [pc, #48]	; (8004fa0 <TIM_Base_SetConfig+0xe0>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <TIM_Base_SetConfig+0xba>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a0b      	ldr	r2, [pc, #44]	; (8004fa4 <TIM_Base_SetConfig+0xe4>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d103      	bne.n	8004f82 <TIM_Base_SetConfig+0xc2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	691a      	ldr	r2, [r3, #16]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2201      	movs	r2, #1
 8004f86:	615a      	str	r2, [r3, #20]
}
 8004f88:	46c0      	nop			; (mov r8, r8)
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	b004      	add	sp, #16
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40002000 	.word	0x40002000
 8004f9c:	40014000 	.word	0x40014000
 8004fa0:	40014400 	.word	0x40014400
 8004fa4:	40014800 	.word	0x40014800
 8004fa8:	fffffcff 	.word	0xfffffcff

08004fac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b086      	sub	sp, #24
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
 8004fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a1b      	ldr	r3, [r3, #32]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	4393      	bics	r3, r2
 8004fbe:	001a      	movs	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6a1b      	ldr	r3, [r3, #32]
 8004fc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	699b      	ldr	r3, [r3, #24]
 8004fd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	4a32      	ldr	r2, [pc, #200]	; (80050a4 <TIM_OC1_SetConfig+0xf8>)
 8004fda:	4013      	ands	r3, r2
 8004fdc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	2203      	movs	r2, #3
 8004fe2:	4393      	bics	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	2202      	movs	r2, #2
 8004ff4:	4393      	bics	r3, r2
 8004ff6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	689b      	ldr	r3, [r3, #8]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	4313      	orrs	r3, r2
 8005000:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	4a28      	ldr	r2, [pc, #160]	; (80050a8 <TIM_OC1_SetConfig+0xfc>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d00b      	beq.n	8005022 <TIM_OC1_SetConfig+0x76>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	4a27      	ldr	r2, [pc, #156]	; (80050ac <TIM_OC1_SetConfig+0x100>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d007      	beq.n	8005022 <TIM_OC1_SetConfig+0x76>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a26      	ldr	r2, [pc, #152]	; (80050b0 <TIM_OC1_SetConfig+0x104>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d003      	beq.n	8005022 <TIM_OC1_SetConfig+0x76>
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a25      	ldr	r2, [pc, #148]	; (80050b4 <TIM_OC1_SetConfig+0x108>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d10c      	bne.n	800503c <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2208      	movs	r2, #8
 8005026:	4393      	bics	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	697a      	ldr	r2, [r7, #20]
 8005030:	4313      	orrs	r3, r2
 8005032:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2204      	movs	r2, #4
 8005038:	4393      	bics	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	4a1a      	ldr	r2, [pc, #104]	; (80050a8 <TIM_OC1_SetConfig+0xfc>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d00b      	beq.n	800505c <TIM_OC1_SetConfig+0xb0>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	4a19      	ldr	r2, [pc, #100]	; (80050ac <TIM_OC1_SetConfig+0x100>)
 8005048:	4293      	cmp	r3, r2
 800504a:	d007      	beq.n	800505c <TIM_OC1_SetConfig+0xb0>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a18      	ldr	r2, [pc, #96]	; (80050b0 <TIM_OC1_SetConfig+0x104>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d003      	beq.n	800505c <TIM_OC1_SetConfig+0xb0>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a17      	ldr	r2, [pc, #92]	; (80050b4 <TIM_OC1_SetConfig+0x108>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d111      	bne.n	8005080 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4a16      	ldr	r2, [pc, #88]	; (80050b8 <TIM_OC1_SetConfig+0x10c>)
 8005060:	4013      	ands	r3, r2
 8005062:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005064:	693b      	ldr	r3, [r7, #16]
 8005066:	4a15      	ldr	r2, [pc, #84]	; (80050bc <TIM_OC1_SetConfig+0x110>)
 8005068:	4013      	ands	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	695b      	ldr	r3, [r3, #20]
 8005070:	693a      	ldr	r2, [r7, #16]
 8005072:	4313      	orrs	r3, r2
 8005074:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	699b      	ldr	r3, [r3, #24]
 800507a:	693a      	ldr	r2, [r7, #16]
 800507c:	4313      	orrs	r3, r2
 800507e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	693a      	ldr	r2, [r7, #16]
 8005084:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	697a      	ldr	r2, [r7, #20]
 8005098:	621a      	str	r2, [r3, #32]
}
 800509a:	46c0      	nop			; (mov r8, r8)
 800509c:	46bd      	mov	sp, r7
 800509e:	b006      	add	sp, #24
 80050a0:	bd80      	pop	{r7, pc}
 80050a2:	46c0      	nop			; (mov r8, r8)
 80050a4:	fffeff8f 	.word	0xfffeff8f
 80050a8:	40012c00 	.word	0x40012c00
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40014400 	.word	0x40014400
 80050b4:	40014800 	.word	0x40014800
 80050b8:	fffffeff 	.word	0xfffffeff
 80050bc:	fffffdff 	.word	0xfffffdff

080050c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
 80050c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	2210      	movs	r2, #16
 80050d0:	4393      	bics	r3, r2
 80050d2:	001a      	movs	r2, r3
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6a1b      	ldr	r3, [r3, #32]
 80050dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	685b      	ldr	r3, [r3, #4]
 80050e2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	699b      	ldr	r3, [r3, #24]
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	4a2e      	ldr	r2, [pc, #184]	; (80051a8 <TIM_OC2_SetConfig+0xe8>)
 80050ee:	4013      	ands	r3, r2
 80050f0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	4a2d      	ldr	r2, [pc, #180]	; (80051ac <TIM_OC2_SetConfig+0xec>)
 80050f6:	4013      	ands	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	021b      	lsls	r3, r3, #8
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	2220      	movs	r2, #32
 800510a:	4393      	bics	r3, r2
 800510c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	011b      	lsls	r3, r3, #4
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	4a24      	ldr	r2, [pc, #144]	; (80051b0 <TIM_OC2_SetConfig+0xf0>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d10d      	bne.n	800513e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	2280      	movs	r2, #128	; 0x80
 8005126:	4393      	bics	r3, r2
 8005128:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	697a      	ldr	r2, [r7, #20]
 8005132:	4313      	orrs	r3, r2
 8005134:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	2240      	movs	r2, #64	; 0x40
 800513a:	4393      	bics	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	4a1b      	ldr	r2, [pc, #108]	; (80051b0 <TIM_OC2_SetConfig+0xf0>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00b      	beq.n	800515e <TIM_OC2_SetConfig+0x9e>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	4a1a      	ldr	r2, [pc, #104]	; (80051b4 <TIM_OC2_SetConfig+0xf4>)
 800514a:	4293      	cmp	r3, r2
 800514c:	d007      	beq.n	800515e <TIM_OC2_SetConfig+0x9e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <TIM_OC2_SetConfig+0xf8>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d003      	beq.n	800515e <TIM_OC2_SetConfig+0x9e>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	4a18      	ldr	r2, [pc, #96]	; (80051bc <TIM_OC2_SetConfig+0xfc>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d113      	bne.n	8005186 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	4a17      	ldr	r2, [pc, #92]	; (80051c0 <TIM_OC2_SetConfig+0x100>)
 8005162:	4013      	ands	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	4a16      	ldr	r2, [pc, #88]	; (80051c4 <TIM_OC2_SetConfig+0x104>)
 800516a:	4013      	ands	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	695b      	ldr	r3, [r3, #20]
 8005172:	009b      	lsls	r3, r3, #2
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	699b      	ldr	r3, [r3, #24]
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	693a      	ldr	r2, [r7, #16]
 8005182:	4313      	orrs	r3, r2
 8005184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	693a      	ldr	r2, [r7, #16]
 800518a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68fa      	ldr	r2, [r7, #12]
 8005190:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	685a      	ldr	r2, [r3, #4]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	697a      	ldr	r2, [r7, #20]
 800519e:	621a      	str	r2, [r3, #32]
}
 80051a0:	46c0      	nop			; (mov r8, r8)
 80051a2:	46bd      	mov	sp, r7
 80051a4:	b006      	add	sp, #24
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	feff8fff 	.word	0xfeff8fff
 80051ac:	fffffcff 	.word	0xfffffcff
 80051b0:	40012c00 	.word	0x40012c00
 80051b4:	40014000 	.word	0x40014000
 80051b8:	40014400 	.word	0x40014400
 80051bc:	40014800 	.word	0x40014800
 80051c0:	fffffbff 	.word	0xfffffbff
 80051c4:	fffff7ff 	.word	0xfffff7ff

080051c8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	4a35      	ldr	r2, [pc, #212]	; (80052ac <TIM_OC3_SetConfig+0xe4>)
 80051d8:	401a      	ands	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	685b      	ldr	r3, [r3, #4]
 80051e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	4a2f      	ldr	r2, [pc, #188]	; (80052b0 <TIM_OC3_SetConfig+0xe8>)
 80051f4:	4013      	ands	r3, r2
 80051f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2203      	movs	r2, #3
 80051fc:	4393      	bics	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68fa      	ldr	r2, [r7, #12]
 8005206:	4313      	orrs	r3, r2
 8005208:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	4a29      	ldr	r2, [pc, #164]	; (80052b4 <TIM_OC3_SetConfig+0xec>)
 800520e:	4013      	ands	r3, r2
 8005210:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	021b      	lsls	r3, r3, #8
 8005218:	697a      	ldr	r2, [r7, #20]
 800521a:	4313      	orrs	r3, r2
 800521c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	4a25      	ldr	r2, [pc, #148]	; (80052b8 <TIM_OC3_SetConfig+0xf0>)
 8005222:	4293      	cmp	r3, r2
 8005224:	d10d      	bne.n	8005242 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	4a24      	ldr	r2, [pc, #144]	; (80052bc <TIM_OC3_SetConfig+0xf4>)
 800522a:	4013      	ands	r3, r2
 800522c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	021b      	lsls	r3, r3, #8
 8005234:	697a      	ldr	r2, [r7, #20]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	4a20      	ldr	r2, [pc, #128]	; (80052c0 <TIM_OC3_SetConfig+0xf8>)
 800523e:	4013      	ands	r3, r2
 8005240:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a1c      	ldr	r2, [pc, #112]	; (80052b8 <TIM_OC3_SetConfig+0xf0>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d00b      	beq.n	8005262 <TIM_OC3_SetConfig+0x9a>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a1d      	ldr	r2, [pc, #116]	; (80052c4 <TIM_OC3_SetConfig+0xfc>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d007      	beq.n	8005262 <TIM_OC3_SetConfig+0x9a>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a1c      	ldr	r2, [pc, #112]	; (80052c8 <TIM_OC3_SetConfig+0x100>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d003      	beq.n	8005262 <TIM_OC3_SetConfig+0x9a>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a1b      	ldr	r2, [pc, #108]	; (80052cc <TIM_OC3_SetConfig+0x104>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d113      	bne.n	800528a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	4a1a      	ldr	r2, [pc, #104]	; (80052d0 <TIM_OC3_SetConfig+0x108>)
 8005266:	4013      	ands	r3, r2
 8005268:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	4a19      	ldr	r2, [pc, #100]	; (80052d4 <TIM_OC3_SetConfig+0x10c>)
 800526e:	4013      	ands	r3, r2
 8005270:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	695b      	ldr	r3, [r3, #20]
 8005276:	011b      	lsls	r3, r3, #4
 8005278:	693a      	ldr	r2, [r7, #16]
 800527a:	4313      	orrs	r3, r2
 800527c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	011b      	lsls	r3, r3, #4
 8005284:	693a      	ldr	r2, [r7, #16]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	621a      	str	r2, [r3, #32]
}
 80052a4:	46c0      	nop			; (mov r8, r8)
 80052a6:	46bd      	mov	sp, r7
 80052a8:	b006      	add	sp, #24
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	fffffeff 	.word	0xfffffeff
 80052b0:	fffeff8f 	.word	0xfffeff8f
 80052b4:	fffffdff 	.word	0xfffffdff
 80052b8:	40012c00 	.word	0x40012c00
 80052bc:	fffff7ff 	.word	0xfffff7ff
 80052c0:	fffffbff 	.word	0xfffffbff
 80052c4:	40014000 	.word	0x40014000
 80052c8:	40014400 	.word	0x40014400
 80052cc:	40014800 	.word	0x40014800
 80052d0:	ffffefff 	.word	0xffffefff
 80052d4:	ffffdfff 	.word	0xffffdfff

080052d8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b086      	sub	sp, #24
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
 80052e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6a1b      	ldr	r3, [r3, #32]
 80052e6:	4a28      	ldr	r2, [pc, #160]	; (8005388 <TIM_OC4_SetConfig+0xb0>)
 80052e8:	401a      	ands	r2, r3
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a1b      	ldr	r3, [r3, #32]
 80052f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	69db      	ldr	r3, [r3, #28]
 80052fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	4a22      	ldr	r2, [pc, #136]	; (800538c <TIM_OC4_SetConfig+0xb4>)
 8005304:	4013      	ands	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	4a21      	ldr	r2, [pc, #132]	; (8005390 <TIM_OC4_SetConfig+0xb8>)
 800530c:	4013      	ands	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	4313      	orrs	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	4a1d      	ldr	r2, [pc, #116]	; (8005394 <TIM_OC4_SetConfig+0xbc>)
 8005320:	4013      	ands	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	689b      	ldr	r3, [r3, #8]
 8005328:	031b      	lsls	r3, r3, #12
 800532a:	693a      	ldr	r2, [r7, #16]
 800532c:	4313      	orrs	r3, r2
 800532e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	4a19      	ldr	r2, [pc, #100]	; (8005398 <TIM_OC4_SetConfig+0xc0>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d00b      	beq.n	8005350 <TIM_OC4_SetConfig+0x78>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	4a18      	ldr	r2, [pc, #96]	; (800539c <TIM_OC4_SetConfig+0xc4>)
 800533c:	4293      	cmp	r3, r2
 800533e:	d007      	beq.n	8005350 <TIM_OC4_SetConfig+0x78>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	4a17      	ldr	r2, [pc, #92]	; (80053a0 <TIM_OC4_SetConfig+0xc8>)
 8005344:	4293      	cmp	r3, r2
 8005346:	d003      	beq.n	8005350 <TIM_OC4_SetConfig+0x78>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	4a16      	ldr	r2, [pc, #88]	; (80053a4 <TIM_OC4_SetConfig+0xcc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d109      	bne.n	8005364 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	4a15      	ldr	r2, [pc, #84]	; (80053a8 <TIM_OC4_SetConfig+0xd0>)
 8005354:	4013      	ands	r3, r2
 8005356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005358:	683b      	ldr	r3, [r7, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	019b      	lsls	r3, r3, #6
 800535e:	697a      	ldr	r2, [r7, #20]
 8005360:	4313      	orrs	r3, r2
 8005362:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	621a      	str	r2, [r3, #32]
}
 800537e:	46c0      	nop			; (mov r8, r8)
 8005380:	46bd      	mov	sp, r7
 8005382:	b006      	add	sp, #24
 8005384:	bd80      	pop	{r7, pc}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	ffffefff 	.word	0xffffefff
 800538c:	feff8fff 	.word	0xfeff8fff
 8005390:	fffffcff 	.word	0xfffffcff
 8005394:	ffffdfff 	.word	0xffffdfff
 8005398:	40012c00 	.word	0x40012c00
 800539c:	40014000 	.word	0x40014000
 80053a0:	40014400 	.word	0x40014400
 80053a4:	40014800 	.word	0x40014800
 80053a8:	ffffbfff 	.word	0xffffbfff

080053ac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b086      	sub	sp, #24
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
 80053b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a1b      	ldr	r3, [r3, #32]
 80053ba:	4a25      	ldr	r2, [pc, #148]	; (8005450 <TIM_OC5_SetConfig+0xa4>)
 80053bc:	401a      	ands	r2, r3
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a1f      	ldr	r2, [pc, #124]	; (8005454 <TIM_OC5_SetConfig+0xa8>)
 80053d8:	4013      	ands	r3, r2
 80053da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4a1b      	ldr	r2, [pc, #108]	; (8005458 <TIM_OC5_SetConfig+0xac>)
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	041b      	lsls	r3, r3, #16
 80053f4:	693a      	ldr	r2, [r7, #16]
 80053f6:	4313      	orrs	r3, r2
 80053f8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4a17      	ldr	r2, [pc, #92]	; (800545c <TIM_OC5_SetConfig+0xb0>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d00b      	beq.n	800541a <TIM_OC5_SetConfig+0x6e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	4a16      	ldr	r2, [pc, #88]	; (8005460 <TIM_OC5_SetConfig+0xb4>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d007      	beq.n	800541a <TIM_OC5_SetConfig+0x6e>
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	4a15      	ldr	r2, [pc, #84]	; (8005464 <TIM_OC5_SetConfig+0xb8>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d003      	beq.n	800541a <TIM_OC5_SetConfig+0x6e>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	4a14      	ldr	r2, [pc, #80]	; (8005468 <TIM_OC5_SetConfig+0xbc>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d109      	bne.n	800542e <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	4a0c      	ldr	r2, [pc, #48]	; (8005450 <TIM_OC5_SetConfig+0xa4>)
 800541e:	4013      	ands	r3, r2
 8005420:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	021b      	lsls	r3, r3, #8
 8005428:	697a      	ldr	r2, [r7, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	68fa      	ldr	r2, [r7, #12]
 8005438:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	685a      	ldr	r2, [r3, #4]
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	621a      	str	r2, [r3, #32]
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	b006      	add	sp, #24
 800544e:	bd80      	pop	{r7, pc}
 8005450:	fffeffff 	.word	0xfffeffff
 8005454:	fffeff8f 	.word	0xfffeff8f
 8005458:	fffdffff 	.word	0xfffdffff
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40014000 	.word	0x40014000
 8005464:	40014400 	.word	0x40014400
 8005468:	40014800 	.word	0x40014800

0800546c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b086      	sub	sp, #24
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	4a26      	ldr	r2, [pc, #152]	; (8005514 <TIM_OC6_SetConfig+0xa8>)
 800547c:	401a      	ands	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005492:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	4a20      	ldr	r2, [pc, #128]	; (8005518 <TIM_OC6_SetConfig+0xac>)
 8005498:	4013      	ands	r3, r2
 800549a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	021b      	lsls	r3, r3, #8
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	4a1c      	ldr	r2, [pc, #112]	; (800551c <TIM_OC6_SetConfig+0xb0>)
 80054ac:	4013      	ands	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	051b      	lsls	r3, r3, #20
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a18      	ldr	r2, [pc, #96]	; (8005520 <TIM_OC6_SetConfig+0xb4>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d00b      	beq.n	80054dc <TIM_OC6_SetConfig+0x70>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	4a17      	ldr	r2, [pc, #92]	; (8005524 <TIM_OC6_SetConfig+0xb8>)
 80054c8:	4293      	cmp	r3, r2
 80054ca:	d007      	beq.n	80054dc <TIM_OC6_SetConfig+0x70>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	4a16      	ldr	r2, [pc, #88]	; (8005528 <TIM_OC6_SetConfig+0xbc>)
 80054d0:	4293      	cmp	r3, r2
 80054d2:	d003      	beq.n	80054dc <TIM_OC6_SetConfig+0x70>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	4a15      	ldr	r2, [pc, #84]	; (800552c <TIM_OC6_SetConfig+0xc0>)
 80054d8:	4293      	cmp	r3, r2
 80054da:	d109      	bne.n	80054f0 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	4a14      	ldr	r2, [pc, #80]	; (8005530 <TIM_OC6_SetConfig+0xc4>)
 80054e0:	4013      	ands	r3, r2
 80054e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	695b      	ldr	r3, [r3, #20]
 80054e8:	029b      	lsls	r3, r3, #10
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	4313      	orrs	r3, r2
 80054ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	697a      	ldr	r2, [r7, #20]
 80054f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	68fa      	ldr	r2, [r7, #12]
 80054fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	685a      	ldr	r2, [r3, #4]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	693a      	ldr	r2, [r7, #16]
 8005508:	621a      	str	r2, [r3, #32]
}
 800550a:	46c0      	nop			; (mov r8, r8)
 800550c:	46bd      	mov	sp, r7
 800550e:	b006      	add	sp, #24
 8005510:	bd80      	pop	{r7, pc}
 8005512:	46c0      	nop			; (mov r8, r8)
 8005514:	ffefffff 	.word	0xffefffff
 8005518:	feff8fff 	.word	0xfeff8fff
 800551c:	ffdfffff 	.word	0xffdfffff
 8005520:	40012c00 	.word	0x40012c00
 8005524:	40014000 	.word	0x40014000
 8005528:	40014400 	.word	0x40014400
 800552c:	40014800 	.word	0x40014800
 8005530:	fffbffff 	.word	0xfffbffff

08005534 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
 800553c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	223c      	movs	r2, #60	; 0x3c
 8005542:	5c9b      	ldrb	r3, [r3, r2]
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005548:	2302      	movs	r3, #2
 800554a:	e04f      	b.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	223c      	movs	r2, #60	; 0x3c
 8005550:	2101      	movs	r1, #1
 8005552:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	223d      	movs	r2, #61	; 0x3d
 8005558:	2102      	movs	r1, #2
 800555a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4a20      	ldr	r2, [pc, #128]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d108      	bne.n	8005588 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	4a1f      	ldr	r2, [pc, #124]	; (80055f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800557a:	4013      	ands	r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	68fa      	ldr	r2, [r7, #12]
 8005584:	4313      	orrs	r3, r2
 8005586:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2270      	movs	r2, #112	; 0x70
 800558c:	4393      	bics	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	4313      	orrs	r3, r2
 8005598:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68fa      	ldr	r2, [r7, #12]
 80055a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a13      	ldr	r2, [pc, #76]	; (80055f4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d009      	beq.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a12      	ldr	r2, [pc, #72]	; (80055fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d004      	beq.n	80055c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4a11      	ldr	r2, [pc, #68]	; (8005600 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80055bc:	4293      	cmp	r3, r2
 80055be:	d10c      	bne.n	80055da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	2280      	movs	r2, #128	; 0x80
 80055c4:	4393      	bics	r3, r2
 80055c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	68ba      	ldr	r2, [r7, #8]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	68ba      	ldr	r2, [r7, #8]
 80055d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	223d      	movs	r2, #61	; 0x3d
 80055de:	2101      	movs	r1, #1
 80055e0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	223c      	movs	r2, #60	; 0x3c
 80055e6:	2100      	movs	r1, #0
 80055e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80055ea:	2300      	movs	r3, #0
}
 80055ec:	0018      	movs	r0, r3
 80055ee:	46bd      	mov	sp, r7
 80055f0:	b004      	add	sp, #16
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40012c00 	.word	0x40012c00
 80055f8:	ff0fffff 	.word	0xff0fffff
 80055fc:	40000400 	.word	0x40000400
 8005600:	40014000 	.word	0x40014000

08005604 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b084      	sub	sp, #16
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
 800560c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800560e:	2300      	movs	r3, #0
 8005610:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	223c      	movs	r2, #60	; 0x3c
 8005616:	5c9b      	ldrb	r3, [r3, r2]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d101      	bne.n	8005620 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800561c:	2302      	movs	r3, #2
 800561e:	e079      	b.n	8005714 <HAL_TIMEx_ConfigBreakDeadTime+0x110>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	223c      	movs	r2, #60	; 0x3c
 8005624:	2101      	movs	r1, #1
 8005626:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	22ff      	movs	r2, #255	; 0xff
 800562c:	4393      	bics	r3, r2
 800562e:	001a      	movs	r2, r3
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4313      	orrs	r3, r2
 8005636:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a38      	ldr	r2, [pc, #224]	; (800571c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 800563c:	401a      	ands	r2, r3
 800563e:	683b      	ldr	r3, [r7, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	4313      	orrs	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a35      	ldr	r2, [pc, #212]	; (8005720 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 800564a:	401a      	ands	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	685b      	ldr	r3, [r3, #4]
 8005650:	4313      	orrs	r3, r2
 8005652:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4a33      	ldr	r2, [pc, #204]	; (8005724 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005658:	401a      	ands	r2, r3
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	4313      	orrs	r3, r2
 8005660:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	4a30      	ldr	r2, [pc, #192]	; (8005728 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005666:	401a      	ands	r2, r3
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	691b      	ldr	r3, [r3, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a2e      	ldr	r2, [pc, #184]	; (800572c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8005674:	401a      	ands	r2, r3
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	4313      	orrs	r3, r2
 800567c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a2b      	ldr	r2, [pc, #172]	; (8005730 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8005682:	401a      	ands	r2, r3
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	4313      	orrs	r3, r2
 800568a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4a29      	ldr	r2, [pc, #164]	; (8005734 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8005690:	401a      	ands	r2, r3
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	041b      	lsls	r3, r3, #16
 8005698:	4313      	orrs	r3, r2
 800569a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	4a25      	ldr	r2, [pc, #148]	; (8005738 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d106      	bne.n	80056b4 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	4a24      	ldr	r2, [pc, #144]	; (800573c <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80056aa:	401a      	ands	r2, r3
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	69db      	ldr	r3, [r3, #28]
 80056b0:	4313      	orrs	r3, r2
 80056b2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a1f      	ldr	r2, [pc, #124]	; (8005738 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80056ba:	4293      	cmp	r3, r2
 80056bc:	d121      	bne.n	8005702 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80056c2:	401a      	ands	r2, r3
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c8:	051b      	lsls	r3, r3, #20
 80056ca:	4313      	orrs	r3, r2
 80056cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	4a1c      	ldr	r2, [pc, #112]	; (8005744 <HAL_TIMEx_ConfigBreakDeadTime+0x140>)
 80056d2:	401a      	ands	r2, r3
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	6a1b      	ldr	r3, [r3, #32]
 80056d8:	4313      	orrs	r3, r2
 80056da:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a1a      	ldr	r2, [pc, #104]	; (8005748 <HAL_TIMEx_ConfigBreakDeadTime+0x144>)
 80056e0:	401a      	ands	r2, r3
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056e6:	4313      	orrs	r3, r2
 80056e8:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4a12      	ldr	r2, [pc, #72]	; (8005738 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d106      	bne.n	8005702 <HAL_TIMEx_ConfigBreakDeadTime+0xfe>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a15      	ldr	r2, [pc, #84]	; (800574c <HAL_TIMEx_ConfigBreakDeadTime+0x148>)
 80056f8:	401a      	ands	r2, r3
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056fe:	4313      	orrs	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	68fa      	ldr	r2, [r7, #12]
 8005708:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	223c      	movs	r2, #60	; 0x3c
 800570e:	2100      	movs	r1, #0
 8005710:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	0018      	movs	r0, r3
 8005716:	46bd      	mov	sp, r7
 8005718:	b004      	add	sp, #16
 800571a:	bd80      	pop	{r7, pc}
 800571c:	fffffcff 	.word	0xfffffcff
 8005720:	fffffbff 	.word	0xfffffbff
 8005724:	fffff7ff 	.word	0xfffff7ff
 8005728:	ffffefff 	.word	0xffffefff
 800572c:	ffffdfff 	.word	0xffffdfff
 8005730:	ffffbfff 	.word	0xffffbfff
 8005734:	fff0ffff 	.word	0xfff0ffff
 8005738:	40012c00 	.word	0x40012c00
 800573c:	efffffff 	.word	0xefffffff
 8005740:	ff0fffff 	.word	0xff0fffff
 8005744:	feffffff 	.word	0xfeffffff
 8005748:	fdffffff 	.word	0xfdffffff
 800574c:	dfffffff 	.word	0xdfffffff

08005750 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005758:	46c0      	nop			; (mov r8, r8)
 800575a:	46bd      	mov	sp, r7
 800575c:	b002      	add	sp, #8
 800575e:	bd80      	pop	{r7, pc}

08005760 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b082      	sub	sp, #8
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005768:	46c0      	nop			; (mov r8, r8)
 800576a:	46bd      	mov	sp, r7
 800576c:	b002      	add	sp, #8
 800576e:	bd80      	pop	{r7, pc}

08005770 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b082      	sub	sp, #8
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005778:	46c0      	nop			; (mov r8, r8)
 800577a:	46bd      	mov	sp, r7
 800577c:	b002      	add	sp, #8
 800577e:	bd80      	pop	{r7, pc}

08005780 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b082      	sub	sp, #8
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d101      	bne.n	8005792 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e046      	b.n	8005820 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2288      	movs	r2, #136	; 0x88
 8005796:	589b      	ldr	r3, [r3, r2]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d107      	bne.n	80057ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2284      	movs	r2, #132	; 0x84
 80057a0:	2100      	movs	r1, #0
 80057a2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	0018      	movs	r0, r3
 80057a8:	f7fc fdca 	bl	8002340 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2288      	movs	r2, #136	; 0x88
 80057b0:	2124      	movs	r1, #36	; 0x24
 80057b2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681a      	ldr	r2, [r3, #0]
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2101      	movs	r1, #1
 80057c0:	438a      	bics	r2, r1
 80057c2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	0018      	movs	r0, r3
 80057c8:	f000 fbba 	bl	8005f40 <UART_SetConfig>
 80057cc:	0003      	movs	r3, r0
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d101      	bne.n	80057d6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	e024      	b.n	8005820 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d003      	beq.n	80057e6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	0018      	movs	r0, r3
 80057e2:	f000 fd51 	bl	8006288 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	685a      	ldr	r2, [r3, #4]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	490d      	ldr	r1, [pc, #52]	; (8005828 <HAL_UART_Init+0xa8>)
 80057f2:	400a      	ands	r2, r1
 80057f4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689a      	ldr	r2, [r3, #8]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	212a      	movs	r1, #42	; 0x2a
 8005802:	438a      	bics	r2, r1
 8005804:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	2101      	movs	r1, #1
 8005812:	430a      	orrs	r2, r1
 8005814:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	0018      	movs	r0, r3
 800581a:	f000 fde9 	bl	80063f0 <UART_CheckIdleState>
 800581e:	0003      	movs	r3, r0
}
 8005820:	0018      	movs	r0, r3
 8005822:	46bd      	mov	sp, r7
 8005824:	b002      	add	sp, #8
 8005826:	bd80      	pop	{r7, pc}
 8005828:	ffffb7ff 	.word	0xffffb7ff

0800582c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	; 0x28
 8005830:	af02      	add	r7, sp, #8
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	60b9      	str	r1, [r7, #8]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	1dbb      	adds	r3, r7, #6
 800583a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2288      	movs	r2, #136	; 0x88
 8005840:	589b      	ldr	r3, [r3, r2]
 8005842:	2b20      	cmp	r3, #32
 8005844:	d000      	beq.n	8005848 <HAL_UART_Transmit+0x1c>
 8005846:	e088      	b.n	800595a <HAL_UART_Transmit+0x12e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d003      	beq.n	8005856 <HAL_UART_Transmit+0x2a>
 800584e:	1dbb      	adds	r3, r7, #6
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e080      	b.n	800595c <HAL_UART_Transmit+0x130>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	689a      	ldr	r2, [r3, #8]
 800585e:	2380      	movs	r3, #128	; 0x80
 8005860:	015b      	lsls	r3, r3, #5
 8005862:	429a      	cmp	r2, r3
 8005864:	d109      	bne.n	800587a <HAL_UART_Transmit+0x4e>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d105      	bne.n	800587a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	2201      	movs	r2, #1
 8005872:	4013      	ands	r3, r2
 8005874:	d001      	beq.n	800587a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e070      	b.n	800595c <HAL_UART_Transmit+0x130>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2290      	movs	r2, #144	; 0x90
 800587e:	2100      	movs	r1, #0
 8005880:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2288      	movs	r2, #136	; 0x88
 8005886:	2121      	movs	r1, #33	; 0x21
 8005888:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800588a:	f7fc fe7d 	bl	8002588 <HAL_GetTick>
 800588e:	0003      	movs	r3, r0
 8005890:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	1dba      	adds	r2, r7, #6
 8005896:	2154      	movs	r1, #84	; 0x54
 8005898:	8812      	ldrh	r2, [r2, #0]
 800589a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	1dba      	adds	r2, r7, #6
 80058a0:	2156      	movs	r1, #86	; 0x56
 80058a2:	8812      	ldrh	r2, [r2, #0]
 80058a4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	2380      	movs	r3, #128	; 0x80
 80058ac:	015b      	lsls	r3, r3, #5
 80058ae:	429a      	cmp	r2, r3
 80058b0:	d108      	bne.n	80058c4 <HAL_UART_Transmit+0x98>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d104      	bne.n	80058c4 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 80058ba:	2300      	movs	r3, #0
 80058bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	61bb      	str	r3, [r7, #24]
 80058c2:	e003      	b.n	80058cc <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 80058c4:	68bb      	ldr	r3, [r7, #8]
 80058c6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058c8:	2300      	movs	r3, #0
 80058ca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80058cc:	e02c      	b.n	8005928 <HAL_UART_Transmit+0xfc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ce:	697a      	ldr	r2, [r7, #20]
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	9300      	str	r3, [sp, #0]
 80058d6:	0013      	movs	r3, r2
 80058d8:	2200      	movs	r2, #0
 80058da:	2180      	movs	r1, #128	; 0x80
 80058dc:	f000 fdd6 	bl	800648c <UART_WaitOnFlagUntilTimeout>
 80058e0:	1e03      	subs	r3, r0, #0
 80058e2:	d001      	beq.n	80058e8 <HAL_UART_Transmit+0xbc>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e039      	b.n	800595c <HAL_UART_Transmit+0x130>
      }
      if (pdata8bits == NULL)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <HAL_UART_Transmit+0xda>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	001a      	movs	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	05d2      	lsls	r2, r2, #23
 80058fa:	0dd2      	lsrs	r2, r2, #23
 80058fc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	3302      	adds	r3, #2
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e007      	b.n	8005916 <HAL_UART_Transmit+0xea>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	2256      	movs	r2, #86	; 0x56
 800591a:	5a9b      	ldrh	r3, [r3, r2]
 800591c:	b29b      	uxth	r3, r3
 800591e:	3b01      	subs	r3, #1
 8005920:	b299      	uxth	r1, r3
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2256      	movs	r2, #86	; 0x56
 8005926:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2256      	movs	r2, #86	; 0x56
 800592c:	5a9b      	ldrh	r3, [r3, r2]
 800592e:	b29b      	uxth	r3, r3
 8005930:	2b00      	cmp	r3, #0
 8005932:	d1cc      	bne.n	80058ce <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005934:	697a      	ldr	r2, [r7, #20]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	0013      	movs	r3, r2
 800593e:	2200      	movs	r2, #0
 8005940:	2140      	movs	r1, #64	; 0x40
 8005942:	f000 fda3 	bl	800648c <UART_WaitOnFlagUntilTimeout>
 8005946:	1e03      	subs	r3, r0, #0
 8005948:	d001      	beq.n	800594e <HAL_UART_Transmit+0x122>
    {
      return HAL_TIMEOUT;
 800594a:	2303      	movs	r3, #3
 800594c:	e006      	b.n	800595c <HAL_UART_Transmit+0x130>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2288      	movs	r2, #136	; 0x88
 8005952:	2120      	movs	r1, #32
 8005954:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	e000      	b.n	800595c <HAL_UART_Transmit+0x130>
  }
  else
  {
    return HAL_BUSY;
 800595a:	2302      	movs	r3, #2
  }
}
 800595c:	0018      	movs	r0, r3
 800595e:	46bd      	mov	sp, r7
 8005960:	b008      	add	sp, #32
 8005962:	bd80      	pop	{r7, pc}

08005964 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005964:	b580      	push	{r7, lr}
 8005966:	b08a      	sub	sp, #40	; 0x28
 8005968:	af02      	add	r7, sp, #8
 800596a:	60f8      	str	r0, [r7, #12]
 800596c:	60b9      	str	r1, [r7, #8]
 800596e:	603b      	str	r3, [r7, #0]
 8005970:	1dbb      	adds	r3, r7, #6
 8005972:	801a      	strh	r2, [r3, #0]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	228c      	movs	r2, #140	; 0x8c
 8005978:	589b      	ldr	r3, [r3, r2]
 800597a:	2b20      	cmp	r3, #32
 800597c:	d000      	beq.n	8005980 <HAL_UART_Receive+0x1c>
 800597e:	e0cc      	b.n	8005b1a <HAL_UART_Receive+0x1b6>
  {
    if ((pData == NULL) || (Size == 0U))
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <HAL_UART_Receive+0x2a>
 8005986:	1dbb      	adds	r3, r7, #6
 8005988:	881b      	ldrh	r3, [r3, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d101      	bne.n	8005992 <HAL_UART_Receive+0x2e>
    {
      return  HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e0c4      	b.n	8005b1c <HAL_UART_Receive+0x1b8>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	689a      	ldr	r2, [r3, #8]
 8005996:	2380      	movs	r3, #128	; 0x80
 8005998:	015b      	lsls	r3, r3, #5
 800599a:	429a      	cmp	r2, r3
 800599c:	d109      	bne.n	80059b2 <HAL_UART_Receive+0x4e>
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	691b      	ldr	r3, [r3, #16]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d105      	bne.n	80059b2 <HAL_UART_Receive+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2201      	movs	r2, #1
 80059aa:	4013      	ands	r3, r2
 80059ac:	d001      	beq.n	80059b2 <HAL_UART_Receive+0x4e>
      {
        return  HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e0b4      	b.n	8005b1c <HAL_UART_Receive+0x1b8>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2290      	movs	r2, #144	; 0x90
 80059b6:	2100      	movs	r1, #0
 80059b8:	5099      	str	r1, [r3, r2]
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	228c      	movs	r2, #140	; 0x8c
 80059be:	2122      	movs	r1, #34	; 0x22
 80059c0:	5099      	str	r1, [r3, r2]
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2200      	movs	r2, #0
 80059c6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059c8:	f7fc fdde 	bl	8002588 <HAL_GetTick>
 80059cc:	0003      	movs	r3, r0
 80059ce:	617b      	str	r3, [r7, #20]

    huart->RxXferSize  = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	1dba      	adds	r2, r7, #6
 80059d4:	215c      	movs	r1, #92	; 0x5c
 80059d6:	8812      	ldrh	r2, [r2, #0]
 80059d8:	525a      	strh	r2, [r3, r1]
    huart->RxXferCount = Size;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	1dba      	adds	r2, r7, #6
 80059de:	215e      	movs	r1, #94	; 0x5e
 80059e0:	8812      	ldrh	r2, [r2, #0]
 80059e2:	525a      	strh	r2, [r3, r1]

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	689a      	ldr	r2, [r3, #8]
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	015b      	lsls	r3, r3, #5
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d10d      	bne.n	8005a0c <HAL_UART_Receive+0xa8>
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	691b      	ldr	r3, [r3, #16]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d104      	bne.n	8005a02 <HAL_UART_Receive+0x9e>
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2260      	movs	r2, #96	; 0x60
 80059fc:	4949      	ldr	r1, [pc, #292]	; (8005b24 <HAL_UART_Receive+0x1c0>)
 80059fe:	5299      	strh	r1, [r3, r2]
 8005a00:	e02e      	b.n	8005a60 <HAL_UART_Receive+0xfc>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2260      	movs	r2, #96	; 0x60
 8005a06:	21ff      	movs	r1, #255	; 0xff
 8005a08:	5299      	strh	r1, [r3, r2]
 8005a0a:	e029      	b.n	8005a60 <HAL_UART_Receive+0xfc>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d10d      	bne.n	8005a30 <HAL_UART_Receive+0xcc>
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d104      	bne.n	8005a26 <HAL_UART_Receive+0xc2>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	2260      	movs	r2, #96	; 0x60
 8005a20:	21ff      	movs	r1, #255	; 0xff
 8005a22:	5299      	strh	r1, [r3, r2]
 8005a24:	e01c      	b.n	8005a60 <HAL_UART_Receive+0xfc>
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2260      	movs	r2, #96	; 0x60
 8005a2a:	217f      	movs	r1, #127	; 0x7f
 8005a2c:	5299      	strh	r1, [r3, r2]
 8005a2e:	e017      	b.n	8005a60 <HAL_UART_Receive+0xfc>
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	689a      	ldr	r2, [r3, #8]
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	055b      	lsls	r3, r3, #21
 8005a38:	429a      	cmp	r2, r3
 8005a3a:	d10d      	bne.n	8005a58 <HAL_UART_Receive+0xf4>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	691b      	ldr	r3, [r3, #16]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d104      	bne.n	8005a4e <HAL_UART_Receive+0xea>
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2260      	movs	r2, #96	; 0x60
 8005a48:	217f      	movs	r1, #127	; 0x7f
 8005a4a:	5299      	strh	r1, [r3, r2]
 8005a4c:	e008      	b.n	8005a60 <HAL_UART_Receive+0xfc>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2260      	movs	r2, #96	; 0x60
 8005a52:	213f      	movs	r1, #63	; 0x3f
 8005a54:	5299      	strh	r1, [r3, r2]
 8005a56:	e003      	b.n	8005a60 <HAL_UART_Receive+0xfc>
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	2260      	movs	r2, #96	; 0x60
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	5299      	strh	r1, [r3, r2]
    uhMask = huart->Mask;
 8005a60:	2312      	movs	r3, #18
 8005a62:	18fb      	adds	r3, r7, r3
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	2160      	movs	r1, #96	; 0x60
 8005a68:	5a52      	ldrh	r2, [r2, r1]
 8005a6a:	801a      	strh	r2, [r3, #0]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	689a      	ldr	r2, [r3, #8]
 8005a70:	2380      	movs	r3, #128	; 0x80
 8005a72:	015b      	lsls	r3, r3, #5
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d108      	bne.n	8005a8a <HAL_UART_Receive+0x126>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d104      	bne.n	8005a8a <HAL_UART_Receive+0x126>
    {
      pdata8bits  = NULL;
 8005a80:	2300      	movs	r3, #0
 8005a82:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	61bb      	str	r3, [r7, #24]
 8005a88:	e003      	b.n	8005a92 <HAL_UART_Receive+0x12e>
    }
    else
    {
      pdata8bits  = pData;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8005a92:	e036      	b.n	8005b02 <HAL_UART_Receive+0x19e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005a94:	697a      	ldr	r2, [r7, #20]
 8005a96:	68f8      	ldr	r0, [r7, #12]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	0013      	movs	r3, r2
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	2120      	movs	r1, #32
 8005aa2:	f000 fcf3 	bl	800648c <UART_WaitOnFlagUntilTimeout>
 8005aa6:	1e03      	subs	r3, r0, #0
 8005aa8:	d001      	beq.n	8005aae <HAL_UART_Receive+0x14a>
      {
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e036      	b.n	8005b1c <HAL_UART_Receive+0x1b8>
      }
      if (pdata8bits == NULL)
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10e      	bne.n	8005ad2 <HAL_UART_Receive+0x16e>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aba:	b29b      	uxth	r3, r3
 8005abc:	2212      	movs	r2, #18
 8005abe:	18ba      	adds	r2, r7, r2
 8005ac0:	8812      	ldrh	r2, [r2, #0]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	b29a      	uxth	r2, r3
 8005ac6:	69bb      	ldr	r3, [r7, #24]
 8005ac8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	3302      	adds	r3, #2
 8005ace:	61bb      	str	r3, [r7, #24]
 8005ad0:	e00e      	b.n	8005af0 <HAL_UART_Receive+0x18c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad8:	b2db      	uxtb	r3, r3
 8005ada:	2212      	movs	r2, #18
 8005adc:	18ba      	adds	r2, r7, r2
 8005ade:	8812      	ldrh	r2, [r2, #0]
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	4013      	ands	r3, r2
 8005ae4:	b2da      	uxtb	r2, r3
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3301      	adds	r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	225e      	movs	r2, #94	; 0x5e
 8005af4:	5a9b      	ldrh	r3, [r3, r2]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b299      	uxth	r1, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	225e      	movs	r2, #94	; 0x5e
 8005b00:	5299      	strh	r1, [r3, r2]
    while (huart->RxXferCount > 0U)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	225e      	movs	r2, #94	; 0x5e
 8005b06:	5a9b      	ldrh	r3, [r3, r2]
 8005b08:	b29b      	uxth	r3, r3
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d1c2      	bne.n	8005a94 <HAL_UART_Receive+0x130>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	228c      	movs	r2, #140	; 0x8c
 8005b12:	2120      	movs	r1, #32
 8005b14:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	e000      	b.n	8005b1c <HAL_UART_Receive+0x1b8>
  }
  else
  {
    return HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
  }
}
 8005b1c:	0018      	movs	r0, r3
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	b008      	add	sp, #32
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	000001ff 	.word	0x000001ff

08005b28 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b08c      	sub	sp, #48	; 0x30
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	60f8      	str	r0, [r7, #12]
 8005b30:	60b9      	str	r1, [r7, #8]
 8005b32:	1dbb      	adds	r3, r7, #6
 8005b34:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2288      	movs	r2, #136	; 0x88
 8005b3a:	589b      	ldr	r3, [r3, r2]
 8005b3c:	2b20      	cmp	r3, #32
 8005b3e:	d000      	beq.n	8005b42 <HAL_UART_Transmit_IT+0x1a>
 8005b40:	e08d      	b.n	8005c5e <HAL_UART_Transmit_IT+0x136>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b42:	68bb      	ldr	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d003      	beq.n	8005b50 <HAL_UART_Transmit_IT+0x28>
 8005b48:	1dbb      	adds	r3, r7, #6
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8005b50:	2301      	movs	r3, #1
 8005b52:	e085      	b.n	8005c60 <HAL_UART_Transmit_IT+0x138>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	689a      	ldr	r2, [r3, #8]
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	015b      	lsls	r3, r3, #5
 8005b5c:	429a      	cmp	r2, r3
 8005b5e:	d109      	bne.n	8005b74 <HAL_UART_Transmit_IT+0x4c>
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d105      	bne.n	8005b74 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	4013      	ands	r3, r2
 8005b6e:	d001      	beq.n	8005b74 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8005b70:	2301      	movs	r3, #1
 8005b72:	e075      	b.n	8005c60 <HAL_UART_Transmit_IT+0x138>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	68ba      	ldr	r2, [r7, #8]
 8005b78:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	1dba      	adds	r2, r7, #6
 8005b7e:	2154      	movs	r1, #84	; 0x54
 8005b80:	8812      	ldrh	r2, [r2, #0]
 8005b82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	1dba      	adds	r2, r7, #6
 8005b88:	2156      	movs	r1, #86	; 0x56
 8005b8a:	8812      	ldrh	r2, [r2, #0]
 8005b8c:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	679a      	str	r2, [r3, #120]	; 0x78

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2290      	movs	r2, #144	; 0x90
 8005b98:	2100      	movs	r1, #0
 8005b9a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2288      	movs	r2, #136	; 0x88
 8005ba0:	2121      	movs	r1, #33	; 0x21
 8005ba2:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ba8:	2380      	movs	r3, #128	; 0x80
 8005baa:	059b      	lsls	r3, r3, #22
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d12a      	bne.n	8005c06 <HAL_UART_Transmit_IT+0xde>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689a      	ldr	r2, [r3, #8]
 8005bb4:	2380      	movs	r3, #128	; 0x80
 8005bb6:	015b      	lsls	r3, r3, #5
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d107      	bne.n	8005bcc <HAL_UART_Transmit_IT+0xa4>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	691b      	ldr	r3, [r3, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d103      	bne.n	8005bcc <HAL_UART_Transmit_IT+0xa4>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	4a28      	ldr	r2, [pc, #160]	; (8005c68 <HAL_UART_Transmit_IT+0x140>)
 8005bc8:	679a      	str	r2, [r3, #120]	; 0x78
 8005bca:	e002      	b.n	8005bd2 <HAL_UART_Transmit_IT+0xaa>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4a27      	ldr	r2, [pc, #156]	; (8005c6c <HAL_UART_Transmit_IT+0x144>)
 8005bd0:	679a      	str	r2, [r3, #120]	; 0x78
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005bd2:	f3ef 8310 	mrs	r3, PRIMASK
 8005bd6:	61fb      	str	r3, [r7, #28]
  return(result);
 8005bd8:	69fb      	ldr	r3, [r7, #28]
      }

      /* Enable the TX FIFO threshold interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bdc:	2301      	movs	r3, #1
 8005bde:	623b      	str	r3, [r7, #32]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005be0:	6a3b      	ldr	r3, [r7, #32]
 8005be2:	f383 8810 	msr	PRIMASK, r3
}
 8005be6:	46c0      	nop			; (mov r8, r8)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	689a      	ldr	r2, [r3, #8]
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2180      	movs	r1, #128	; 0x80
 8005bf4:	0409      	lsls	r1, r1, #16
 8005bf6:	430a      	orrs	r2, r1
 8005bf8:	609a      	str	r2, [r3, #8]
 8005bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bfc:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c00:	f383 8810 	msr	PRIMASK, r3
}
 8005c04:	e029      	b.n	8005c5a <HAL_UART_Transmit_IT+0x132>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	689a      	ldr	r2, [r3, #8]
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	015b      	lsls	r3, r3, #5
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d107      	bne.n	8005c22 <HAL_UART_Transmit_IT+0xfa>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	691b      	ldr	r3, [r3, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d103      	bne.n	8005c22 <HAL_UART_Transmit_IT+0xfa>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	4a14      	ldr	r2, [pc, #80]	; (8005c70 <HAL_UART_Transmit_IT+0x148>)
 8005c1e:	679a      	str	r2, [r3, #120]	; 0x78
 8005c20:	e002      	b.n	8005c28 <HAL_UART_Transmit_IT+0x100>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <HAL_UART_Transmit_IT+0x14c>)
 8005c26:	679a      	str	r2, [r3, #120]	; 0x78
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005c28:	f3ef 8310 	mrs	r3, PRIMASK
 8005c2c:	613b      	str	r3, [r7, #16]
  return(result);
 8005c2e:	693b      	ldr	r3, [r7, #16]
      }

      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8005c30:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c32:	2301      	movs	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f383 8810 	msr	PRIMASK, r3
}
 8005c3c:	46c0      	nop			; (mov r8, r8)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	2180      	movs	r1, #128	; 0x80
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	601a      	str	r2, [r3, #0]
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c50:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005c52:	69bb      	ldr	r3, [r7, #24]
 8005c54:	f383 8810 	msr	PRIMASK, r3
}
 8005c58:	46c0      	nop			; (mov r8, r8)
    }

    return HAL_OK;
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	e000      	b.n	8005c60 <HAL_UART_Transmit_IT+0x138>
  }
  else
  {
    return HAL_BUSY;
 8005c5e:	2302      	movs	r3, #2
  }
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b00c      	add	sp, #48	; 0x30
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	0800700d 	.word	0x0800700d
 8005c6c:	08006f21 	.word	0x08006f21
 8005c70:	08006e61 	.word	0x08006e61
 8005c74:	08006dad 	.word	0x08006dad

08005c78 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c78:	b580      	push	{r7, lr}
 8005c7a:	b088      	sub	sp, #32
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	60f8      	str	r0, [r7, #12]
 8005c80:	60b9      	str	r1, [r7, #8]
 8005c82:	1dbb      	adds	r3, r7, #6
 8005c84:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	228c      	movs	r2, #140	; 0x8c
 8005c8a:	589b      	ldr	r3, [r3, r2]
 8005c8c:	2b20      	cmp	r3, #32
 8005c8e:	d145      	bne.n	8005d1c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <HAL_UART_Receive_IT+0x26>
 8005c96:	1dbb      	adds	r3, r7, #6
 8005c98:	881b      	ldrh	r3, [r3, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d101      	bne.n	8005ca2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e03d      	b.n	8005d1e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	689a      	ldr	r2, [r3, #8]
 8005ca6:	2380      	movs	r3, #128	; 0x80
 8005ca8:	015b      	lsls	r3, r3, #5
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d109      	bne.n	8005cc2 <HAL_UART_Receive_IT+0x4a>
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	691b      	ldr	r3, [r3, #16]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d105      	bne.n	8005cc2 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2201      	movs	r2, #1
 8005cba:	4013      	ands	r3, r2
 8005cbc:	d001      	beq.n	8005cc2 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e02d      	b.n	8005d1e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	2380      	movs	r3, #128	; 0x80
 8005cd0:	041b      	lsls	r3, r3, #16
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	d019      	beq.n	8005d0a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005cd6:	f3ef 8310 	mrs	r3, PRIMASK
 8005cda:	613b      	str	r3, [r7, #16]
  return(result);
 8005cdc:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cde:	61fb      	str	r3, [r7, #28]
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f383 8810 	msr	PRIMASK, r3
}
 8005cea:	46c0      	nop			; (mov r8, r8)
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2180      	movs	r1, #128	; 0x80
 8005cf8:	04c9      	lsls	r1, r1, #19
 8005cfa:	430a      	orrs	r2, r1
 8005cfc:	601a      	str	r2, [r3, #0]
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005d02:	69bb      	ldr	r3, [r7, #24]
 8005d04:	f383 8810 	msr	PRIMASK, r3
}
 8005d08:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d0a:	1dbb      	adds	r3, r7, #6
 8005d0c:	881a      	ldrh	r2, [r3, #0]
 8005d0e:	68b9      	ldr	r1, [r7, #8]
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	0018      	movs	r0, r3
 8005d14:	f000 fc82 	bl	800661c <UART_Start_Receive_IT>
 8005d18:	0003      	movs	r3, r0
 8005d1a:	e000      	b.n	8005d1e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005d1c:	2302      	movs	r3, #2
  }
}
 8005d1e:	0018      	movs	r0, r3
 8005d20:	46bd      	mov	sp, r7
 8005d22:	b008      	add	sp, #32
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b088      	sub	sp, #32
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	1dbb      	adds	r3, r7, #6
 8005d34:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2288      	movs	r2, #136	; 0x88
 8005d3a:	589b      	ldr	r3, [r3, r2]
 8005d3c:	2b20      	cmp	r3, #32
 8005d3e:	d000      	beq.n	8005d42 <HAL_UART_Transmit_DMA+0x1a>
 8005d40:	e079      	b.n	8005e36 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <HAL_UART_Transmit_DMA+0x28>
 8005d48:	1dbb      	adds	r3, r7, #6
 8005d4a:	881b      	ldrh	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d101      	bne.n	8005d54 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8005d50:	2301      	movs	r3, #1
 8005d52:	e071      	b.n	8005e38 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	689a      	ldr	r2, [r3, #8]
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	015b      	lsls	r3, r3, #5
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d109      	bne.n	8005d74 <HAL_UART_Transmit_DMA+0x4c>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d105      	bne.n	8005d74 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	2201      	movs	r2, #1
 8005d6c:	4013      	ands	r3, r2
 8005d6e:	d001      	beq.n	8005d74 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e061      	b.n	8005e38 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	68ba      	ldr	r2, [r7, #8]
 8005d78:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	1dba      	adds	r2, r7, #6
 8005d7e:	2154      	movs	r1, #84	; 0x54
 8005d80:	8812      	ldrh	r2, [r2, #0]
 8005d82:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1dba      	adds	r2, r7, #6
 8005d88:	2156      	movs	r1, #86	; 0x56
 8005d8a:	8812      	ldrh	r2, [r2, #0]
 8005d8c:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2290      	movs	r2, #144	; 0x90
 8005d92:	2100      	movs	r1, #0
 8005d94:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2288      	movs	r2, #136	; 0x88
 8005d9a:	2121      	movs	r1, #33	; 0x21
 8005d9c:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d028      	beq.n	8005df8 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005daa:	4a25      	ldr	r2, [pc, #148]	; (8005e40 <HAL_UART_Transmit_DMA+0x118>)
 8005dac:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005db2:	4a24      	ldr	r2, [pc, #144]	; (8005e44 <HAL_UART_Transmit_DMA+0x11c>)
 8005db4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dba:	4a23      	ldr	r2, [pc, #140]	; (8005e48 <HAL_UART_Transmit_DMA+0x120>)
 8005dbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dce:	0019      	movs	r1, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	3328      	adds	r3, #40	; 0x28
 8005dd6:	001a      	movs	r2, r3
 8005dd8:	1dbb      	adds	r3, r7, #6
 8005dda:	881b      	ldrh	r3, [r3, #0]
 8005ddc:	f7fd f9ce 	bl	800317c <HAL_DMA_Start_IT>
 8005de0:	1e03      	subs	r3, r0, #0
 8005de2:	d009      	beq.n	8005df8 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2290      	movs	r2, #144	; 0x90
 8005de8:	2110      	movs	r1, #16
 8005dea:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	2288      	movs	r2, #136	; 0x88
 8005df0:	2120      	movs	r1, #32
 8005df2:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	e01f      	b.n	8005e38 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	2240      	movs	r2, #64	; 0x40
 8005dfe:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005e00:	f3ef 8310 	mrs	r3, PRIMASK
 8005e04:	613b      	str	r3, [r7, #16]
  return(result);
 8005e06:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005e08:	61fb      	str	r3, [r7, #28]
 8005e0a:	2301      	movs	r3, #1
 8005e0c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	f383 8810 	msr	PRIMASK, r3
}
 8005e14:	46c0      	nop			; (mov r8, r8)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	689a      	ldr	r2, [r3, #8]
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	2180      	movs	r1, #128	; 0x80
 8005e22:	430a      	orrs	r2, r1
 8005e24:	609a      	str	r2, [r3, #8]
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005e2a:	69bb      	ldr	r3, [r7, #24]
 8005e2c:	f383 8810 	msr	PRIMASK, r3
}
 8005e30:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005e32:	2300      	movs	r3, #0
 8005e34:	e000      	b.n	8005e38 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8005e36:	2302      	movs	r3, #2
  }
}
 8005e38:	0018      	movs	r0, r3
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	b008      	add	sp, #32
 8005e3e:	bd80      	pop	{r7, pc}
 8005e40:	08006afd 	.word	0x08006afd
 8005e44:	08006b95 	.word	0x08006b95
 8005e48:	08006d27 	.word	0x08006d27

08005e4c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b088      	sub	sp, #32
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	1dbb      	adds	r3, r7, #6
 8005e58:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	228c      	movs	r2, #140	; 0x8c
 8005e5e:	589b      	ldr	r3, [r3, r2]
 8005e60:	2b20      	cmp	r3, #32
 8005e62:	d145      	bne.n	8005ef0 <HAL_UART_Receive_DMA+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d003      	beq.n	8005e72 <HAL_UART_Receive_DMA+0x26>
 8005e6a:	1dbb      	adds	r3, r7, #6
 8005e6c:	881b      	ldrh	r3, [r3, #0]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d101      	bne.n	8005e76 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005e72:	2301      	movs	r3, #1
 8005e74:	e03d      	b.n	8005ef2 <HAL_UART_Receive_DMA+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	689a      	ldr	r2, [r3, #8]
 8005e7a:	2380      	movs	r3, #128	; 0x80
 8005e7c:	015b      	lsls	r3, r3, #5
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d109      	bne.n	8005e96 <HAL_UART_Receive_DMA+0x4a>
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d105      	bne.n	8005e96 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	4013      	ands	r3, r2
 8005e90:	d001      	beq.n	8005e96 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e02d      	b.n	8005ef2 <HAL_UART_Receive_DMA+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	685a      	ldr	r2, [r3, #4]
 8005ea2:	2380      	movs	r3, #128	; 0x80
 8005ea4:	041b      	lsls	r3, r3, #16
 8005ea6:	4013      	ands	r3, r2
 8005ea8:	d019      	beq.n	8005ede <HAL_UART_Receive_DMA+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005eaa:	f3ef 8310 	mrs	r3, PRIMASK
 8005eae:	613b      	str	r3, [r7, #16]
  return(result);
 8005eb0:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005eb2:	61fb      	str	r3, [r7, #28]
 8005eb4:	2301      	movs	r3, #1
 8005eb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	f383 8810 	msr	PRIMASK, r3
}
 8005ebe:	46c0      	nop			; (mov r8, r8)
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2180      	movs	r1, #128	; 0x80
 8005ecc:	04c9      	lsls	r1, r1, #19
 8005ece:	430a      	orrs	r2, r1
 8005ed0:	601a      	str	r2, [r3, #0]
 8005ed2:	69fb      	ldr	r3, [r7, #28]
 8005ed4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	f383 8810 	msr	PRIMASK, r3
}
 8005edc:	46c0      	nop			; (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005ede:	1dbb      	adds	r3, r7, #6
 8005ee0:	881a      	ldrh	r2, [r3, #0]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 fcbc 	bl	8006864 <UART_Start_Receive_DMA>
 8005eec:	0003      	movs	r3, r0
 8005eee:	e000      	b.n	8005ef2 <HAL_UART_Receive_DMA+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8005ef0:	2302      	movs	r3, #2
  }
}
 8005ef2:	0018      	movs	r0, r3
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	b008      	add	sp, #32
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b082      	sub	sp, #8
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005f02:	46c0      	nop			; (mov r8, r8)
 8005f04:	46bd      	mov	sp, r7
 8005f06:	b002      	add	sp, #8
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b082      	sub	sp, #8
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005f12:	46c0      	nop			; (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	b002      	add	sp, #8
 8005f18:	bd80      	pop	{r7, pc}

08005f1a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005f1a:	b580      	push	{r7, lr}
 8005f1c:	b082      	sub	sp, #8
 8005f1e:	af00      	add	r7, sp, #0
 8005f20:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005f22:	46c0      	nop			; (mov r8, r8)
 8005f24:	46bd      	mov	sp, r7
 8005f26:	b002      	add	sp, #8
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	000a      	movs	r2, r1
 8005f34:	1cbb      	adds	r3, r7, #2
 8005f36:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005f38:	46c0      	nop			; (mov r8, r8)
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	b002      	add	sp, #8
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	b088      	sub	sp, #32
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f48:	231a      	movs	r3, #26
 8005f4a:	18fb      	adds	r3, r7, r3
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	689a      	ldr	r2, [r3, #8]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	691b      	ldr	r3, [r3, #16]
 8005f58:	431a      	orrs	r2, r3
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	695b      	ldr	r3, [r3, #20]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	69db      	ldr	r3, [r3, #28]
 8005f64:	4313      	orrs	r3, r2
 8005f66:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	4abc      	ldr	r2, [pc, #752]	; (8006260 <UART_SetConfig+0x320>)
 8005f70:	4013      	ands	r3, r2
 8005f72:	0019      	movs	r1, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	69fa      	ldr	r2, [r7, #28]
 8005f7a:	430a      	orrs	r2, r1
 8005f7c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	4ab7      	ldr	r2, [pc, #732]	; (8006264 <UART_SetConfig+0x324>)
 8005f86:	4013      	ands	r3, r2
 8005f88:	0019      	movs	r1, r3
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	68da      	ldr	r2, [r3, #12]
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	430a      	orrs	r2, r1
 8005f94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	699b      	ldr	r3, [r3, #24]
 8005f9a:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a1b      	ldr	r3, [r3, #32]
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	4aae      	ldr	r2, [pc, #696]	; (8006268 <UART_SetConfig+0x328>)
 8005fae:	4013      	ands	r3, r2
 8005fb0:	0019      	movs	r1, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	69fa      	ldr	r2, [r7, #28]
 8005fb8:	430a      	orrs	r2, r1
 8005fba:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc2:	220f      	movs	r2, #15
 8005fc4:	4393      	bics	r3, r2
 8005fc6:	0019      	movs	r1, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	430a      	orrs	r2, r1
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	4aa4      	ldr	r2, [pc, #656]	; (800626c <UART_SetConfig+0x32c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d127      	bne.n	800602e <UART_SetConfig+0xee>
 8005fde:	4ba4      	ldr	r3, [pc, #656]	; (8006270 <UART_SetConfig+0x330>)
 8005fe0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fe2:	2203      	movs	r2, #3
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d017      	beq.n	800601a <UART_SetConfig+0xda>
 8005fea:	d81b      	bhi.n	8006024 <UART_SetConfig+0xe4>
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d00a      	beq.n	8006006 <UART_SetConfig+0xc6>
 8005ff0:	d818      	bhi.n	8006024 <UART_SetConfig+0xe4>
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d002      	beq.n	8005ffc <UART_SetConfig+0xbc>
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d00a      	beq.n	8006010 <UART_SetConfig+0xd0>
 8005ffa:	e013      	b.n	8006024 <UART_SetConfig+0xe4>
 8005ffc:	231b      	movs	r3, #27
 8005ffe:	18fb      	adds	r3, r7, r3
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
 8006004:	e058      	b.n	80060b8 <UART_SetConfig+0x178>
 8006006:	231b      	movs	r3, #27
 8006008:	18fb      	adds	r3, r7, r3
 800600a:	2202      	movs	r2, #2
 800600c:	701a      	strb	r2, [r3, #0]
 800600e:	e053      	b.n	80060b8 <UART_SetConfig+0x178>
 8006010:	231b      	movs	r3, #27
 8006012:	18fb      	adds	r3, r7, r3
 8006014:	2204      	movs	r2, #4
 8006016:	701a      	strb	r2, [r3, #0]
 8006018:	e04e      	b.n	80060b8 <UART_SetConfig+0x178>
 800601a:	231b      	movs	r3, #27
 800601c:	18fb      	adds	r3, r7, r3
 800601e:	2208      	movs	r2, #8
 8006020:	701a      	strb	r2, [r3, #0]
 8006022:	e049      	b.n	80060b8 <UART_SetConfig+0x178>
 8006024:	231b      	movs	r3, #27
 8006026:	18fb      	adds	r3, r7, r3
 8006028:	2210      	movs	r2, #16
 800602a:	701a      	strb	r2, [r3, #0]
 800602c:	e044      	b.n	80060b8 <UART_SetConfig+0x178>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	4a90      	ldr	r2, [pc, #576]	; (8006274 <UART_SetConfig+0x334>)
 8006034:	4293      	cmp	r3, r2
 8006036:	d127      	bne.n	8006088 <UART_SetConfig+0x148>
 8006038:	4b8d      	ldr	r3, [pc, #564]	; (8006270 <UART_SetConfig+0x330>)
 800603a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800603c:	220c      	movs	r2, #12
 800603e:	4013      	ands	r3, r2
 8006040:	2b0c      	cmp	r3, #12
 8006042:	d017      	beq.n	8006074 <UART_SetConfig+0x134>
 8006044:	d81b      	bhi.n	800607e <UART_SetConfig+0x13e>
 8006046:	2b08      	cmp	r3, #8
 8006048:	d00a      	beq.n	8006060 <UART_SetConfig+0x120>
 800604a:	d818      	bhi.n	800607e <UART_SetConfig+0x13e>
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <UART_SetConfig+0x116>
 8006050:	2b04      	cmp	r3, #4
 8006052:	d00a      	beq.n	800606a <UART_SetConfig+0x12a>
 8006054:	e013      	b.n	800607e <UART_SetConfig+0x13e>
 8006056:	231b      	movs	r3, #27
 8006058:	18fb      	adds	r3, r7, r3
 800605a:	2200      	movs	r2, #0
 800605c:	701a      	strb	r2, [r3, #0]
 800605e:	e02b      	b.n	80060b8 <UART_SetConfig+0x178>
 8006060:	231b      	movs	r3, #27
 8006062:	18fb      	adds	r3, r7, r3
 8006064:	2202      	movs	r2, #2
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e026      	b.n	80060b8 <UART_SetConfig+0x178>
 800606a:	231b      	movs	r3, #27
 800606c:	18fb      	adds	r3, r7, r3
 800606e:	2204      	movs	r2, #4
 8006070:	701a      	strb	r2, [r3, #0]
 8006072:	e021      	b.n	80060b8 <UART_SetConfig+0x178>
 8006074:	231b      	movs	r3, #27
 8006076:	18fb      	adds	r3, r7, r3
 8006078:	2208      	movs	r2, #8
 800607a:	701a      	strb	r2, [r3, #0]
 800607c:	e01c      	b.n	80060b8 <UART_SetConfig+0x178>
 800607e:	231b      	movs	r3, #27
 8006080:	18fb      	adds	r3, r7, r3
 8006082:	2210      	movs	r2, #16
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	e017      	b.n	80060b8 <UART_SetConfig+0x178>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a7a      	ldr	r2, [pc, #488]	; (8006278 <UART_SetConfig+0x338>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d104      	bne.n	800609c <UART_SetConfig+0x15c>
 8006092:	231b      	movs	r3, #27
 8006094:	18fb      	adds	r3, r7, r3
 8006096:	2200      	movs	r2, #0
 8006098:	701a      	strb	r2, [r3, #0]
 800609a:	e00d      	b.n	80060b8 <UART_SetConfig+0x178>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a76      	ldr	r2, [pc, #472]	; (800627c <UART_SetConfig+0x33c>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d104      	bne.n	80060b0 <UART_SetConfig+0x170>
 80060a6:	231b      	movs	r3, #27
 80060a8:	18fb      	adds	r3, r7, r3
 80060aa:	2200      	movs	r2, #0
 80060ac:	701a      	strb	r2, [r3, #0]
 80060ae:	e003      	b.n	80060b8 <UART_SetConfig+0x178>
 80060b0:	231b      	movs	r3, #27
 80060b2:	18fb      	adds	r3, r7, r3
 80060b4:	2210      	movs	r2, #16
 80060b6:	701a      	strb	r2, [r3, #0]
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	69da      	ldr	r2, [r3, #28]
 80060bc:	2380      	movs	r3, #128	; 0x80
 80060be:	021b      	lsls	r3, r3, #8
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d000      	beq.n	80060c6 <UART_SetConfig+0x186>
 80060c4:	e065      	b.n	8006192 <UART_SetConfig+0x252>
  {
    switch (clocksource)
 80060c6:	231b      	movs	r3, #27
 80060c8:	18fb      	adds	r3, r7, r3
 80060ca:	781b      	ldrb	r3, [r3, #0]
 80060cc:	2b08      	cmp	r3, #8
 80060ce:	d015      	beq.n	80060fc <UART_SetConfig+0x1bc>
 80060d0:	dc18      	bgt.n	8006104 <UART_SetConfig+0x1c4>
 80060d2:	2b04      	cmp	r3, #4
 80060d4:	d00d      	beq.n	80060f2 <UART_SetConfig+0x1b2>
 80060d6:	dc15      	bgt.n	8006104 <UART_SetConfig+0x1c4>
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d002      	beq.n	80060e2 <UART_SetConfig+0x1a2>
 80060dc:	2b02      	cmp	r3, #2
 80060de:	d005      	beq.n	80060ec <UART_SetConfig+0x1ac>
 80060e0:	e010      	b.n	8006104 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e2:	f7fe f8c1 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 80060e6:	0003      	movs	r3, r0
 80060e8:	617b      	str	r3, [r7, #20]
        break;
 80060ea:	e012      	b.n	8006112 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060ec:	4b64      	ldr	r3, [pc, #400]	; (8006280 <UART_SetConfig+0x340>)
 80060ee:	617b      	str	r3, [r7, #20]
        break;
 80060f0:	e00f      	b.n	8006112 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f2:	f7fe f82f 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80060f6:	0003      	movs	r3, r0
 80060f8:	617b      	str	r3, [r7, #20]
        break;
 80060fa:	e00a      	b.n	8006112 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fc:	2380      	movs	r3, #128	; 0x80
 80060fe:	021b      	lsls	r3, r3, #8
 8006100:	617b      	str	r3, [r7, #20]
        break;
 8006102:	e006      	b.n	8006112 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8006104:	2300      	movs	r3, #0
 8006106:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006108:	231a      	movs	r3, #26
 800610a:	18fb      	adds	r3, r7, r3
 800610c:	2201      	movs	r2, #1
 800610e:	701a      	strb	r2, [r3, #0]
        break;
 8006110:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d100      	bne.n	800611a <UART_SetConfig+0x1da>
 8006118:	e08d      	b.n	8006236 <UART_SetConfig+0x2f6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800611e:	4b59      	ldr	r3, [pc, #356]	; (8006284 <UART_SetConfig+0x344>)
 8006120:	0052      	lsls	r2, r2, #1
 8006122:	5ad3      	ldrh	r3, [r2, r3]
 8006124:	0019      	movs	r1, r3
 8006126:	6978      	ldr	r0, [r7, #20]
 8006128:	f7f9 fff8 	bl	800011c <__udivsi3>
 800612c:	0003      	movs	r3, r0
 800612e:	005a      	lsls	r2, r3, #1
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	085b      	lsrs	r3, r3, #1
 8006136:	18d2      	adds	r2, r2, r3
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	0019      	movs	r1, r3
 800613e:	0010      	movs	r0, r2
 8006140:	f7f9 ffec 	bl	800011c <__udivsi3>
 8006144:	0003      	movs	r3, r0
 8006146:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006148:	693b      	ldr	r3, [r7, #16]
 800614a:	2b0f      	cmp	r3, #15
 800614c:	d91c      	bls.n	8006188 <UART_SetConfig+0x248>
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	2380      	movs	r3, #128	; 0x80
 8006152:	025b      	lsls	r3, r3, #9
 8006154:	429a      	cmp	r2, r3
 8006156:	d217      	bcs.n	8006188 <UART_SetConfig+0x248>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006158:	693b      	ldr	r3, [r7, #16]
 800615a:	b29a      	uxth	r2, r3
 800615c:	200e      	movs	r0, #14
 800615e:	183b      	adds	r3, r7, r0
 8006160:	210f      	movs	r1, #15
 8006162:	438a      	bics	r2, r1
 8006164:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	085b      	lsrs	r3, r3, #1
 800616a:	b29b      	uxth	r3, r3
 800616c:	2207      	movs	r2, #7
 800616e:	4013      	ands	r3, r2
 8006170:	b299      	uxth	r1, r3
 8006172:	183b      	adds	r3, r7, r0
 8006174:	183a      	adds	r2, r7, r0
 8006176:	8812      	ldrh	r2, [r2, #0]
 8006178:	430a      	orrs	r2, r1
 800617a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	183a      	adds	r2, r7, r0
 8006182:	8812      	ldrh	r2, [r2, #0]
 8006184:	60da      	str	r2, [r3, #12]
 8006186:	e056      	b.n	8006236 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 8006188:	231a      	movs	r3, #26
 800618a:	18fb      	adds	r3, r7, r3
 800618c:	2201      	movs	r2, #1
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	e051      	b.n	8006236 <UART_SetConfig+0x2f6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006192:	231b      	movs	r3, #27
 8006194:	18fb      	adds	r3, r7, r3
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d015      	beq.n	80061c8 <UART_SetConfig+0x288>
 800619c:	dc18      	bgt.n	80061d0 <UART_SetConfig+0x290>
 800619e:	2b04      	cmp	r3, #4
 80061a0:	d00d      	beq.n	80061be <UART_SetConfig+0x27e>
 80061a2:	dc15      	bgt.n	80061d0 <UART_SetConfig+0x290>
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d002      	beq.n	80061ae <UART_SetConfig+0x26e>
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	d005      	beq.n	80061b8 <UART_SetConfig+0x278>
 80061ac:	e010      	b.n	80061d0 <UART_SetConfig+0x290>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061ae:	f7fe f85b 	bl	8004268 <HAL_RCC_GetPCLK1Freq>
 80061b2:	0003      	movs	r3, r0
 80061b4:	617b      	str	r3, [r7, #20]
        break;
 80061b6:	e012      	b.n	80061de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061b8:	4b31      	ldr	r3, [pc, #196]	; (8006280 <UART_SetConfig+0x340>)
 80061ba:	617b      	str	r3, [r7, #20]
        break;
 80061bc:	e00f      	b.n	80061de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061be:	f7fd ffc9 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80061c2:	0003      	movs	r3, r0
 80061c4:	617b      	str	r3, [r7, #20]
        break;
 80061c6:	e00a      	b.n	80061de <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061c8:	2380      	movs	r3, #128	; 0x80
 80061ca:	021b      	lsls	r3, r3, #8
 80061cc:	617b      	str	r3, [r7, #20]
        break;
 80061ce:	e006      	b.n	80061de <UART_SetConfig+0x29e>
      default:
        pclk = 0U;
 80061d0:	2300      	movs	r3, #0
 80061d2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80061d4:	231a      	movs	r3, #26
 80061d6:	18fb      	adds	r3, r7, r3
 80061d8:	2201      	movs	r2, #1
 80061da:	701a      	strb	r2, [r3, #0]
        break;
 80061dc:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d028      	beq.n	8006236 <UART_SetConfig+0x2f6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061e8:	4b26      	ldr	r3, [pc, #152]	; (8006284 <UART_SetConfig+0x344>)
 80061ea:	0052      	lsls	r2, r2, #1
 80061ec:	5ad3      	ldrh	r3, [r2, r3]
 80061ee:	0019      	movs	r1, r3
 80061f0:	6978      	ldr	r0, [r7, #20]
 80061f2:	f7f9 ff93 	bl	800011c <__udivsi3>
 80061f6:	0003      	movs	r3, r0
 80061f8:	001a      	movs	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	085b      	lsrs	r3, r3, #1
 8006200:	18d2      	adds	r2, r2, r3
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	685b      	ldr	r3, [r3, #4]
 8006206:	0019      	movs	r1, r3
 8006208:	0010      	movs	r0, r2
 800620a:	f7f9 ff87 	bl	800011c <__udivsi3>
 800620e:	0003      	movs	r3, r0
 8006210:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	2b0f      	cmp	r3, #15
 8006216:	d90a      	bls.n	800622e <UART_SetConfig+0x2ee>
 8006218:	693a      	ldr	r2, [r7, #16]
 800621a:	2380      	movs	r3, #128	; 0x80
 800621c:	025b      	lsls	r3, r3, #9
 800621e:	429a      	cmp	r2, r3
 8006220:	d205      	bcs.n	800622e <UART_SetConfig+0x2ee>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006222:	693b      	ldr	r3, [r7, #16]
 8006224:	b29a      	uxth	r2, r3
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	60da      	str	r2, [r3, #12]
 800622c:	e003      	b.n	8006236 <UART_SetConfig+0x2f6>
      }
      else
      {
        ret = HAL_ERROR;
 800622e:	231a      	movs	r3, #26
 8006230:	18fb      	adds	r3, r7, r3
 8006232:	2201      	movs	r2, #1
 8006234:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	226a      	movs	r2, #106	; 0x6a
 800623a:	2101      	movs	r1, #1
 800623c:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2268      	movs	r2, #104	; 0x68
 8006242:	2101      	movs	r1, #1
 8006244:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2200      	movs	r2, #0
 8006250:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8006252:	231a      	movs	r3, #26
 8006254:	18fb      	adds	r3, r7, r3
 8006256:	781b      	ldrb	r3, [r3, #0]
}
 8006258:	0018      	movs	r0, r3
 800625a:	46bd      	mov	sp, r7
 800625c:	b008      	add	sp, #32
 800625e:	bd80      	pop	{r7, pc}
 8006260:	cfff69f3 	.word	0xcfff69f3
 8006264:	ffffcfff 	.word	0xffffcfff
 8006268:	11fff4ff 	.word	0x11fff4ff
 800626c:	40013800 	.word	0x40013800
 8006270:	40021000 	.word	0x40021000
 8006274:	40004400 	.word	0x40004400
 8006278:	40004800 	.word	0x40004800
 800627c:	40004c00 	.word	0x40004c00
 8006280:	00f42400 	.word	0x00f42400
 8006284:	0800b268 	.word	0x0800b268

08006288 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006288:	b580      	push	{r7, lr}
 800628a:	b082      	sub	sp, #8
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006294:	2201      	movs	r2, #1
 8006296:	4013      	ands	r3, r2
 8006298:	d00b      	beq.n	80062b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a4a      	ldr	r2, [pc, #296]	; (80063cc <UART_AdvFeatureConfig+0x144>)
 80062a2:	4013      	ands	r3, r2
 80062a4:	0019      	movs	r1, r3
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	430a      	orrs	r2, r1
 80062b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b6:	2202      	movs	r2, #2
 80062b8:	4013      	ands	r3, r2
 80062ba:	d00b      	beq.n	80062d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	685b      	ldr	r3, [r3, #4]
 80062c2:	4a43      	ldr	r2, [pc, #268]	; (80063d0 <UART_AdvFeatureConfig+0x148>)
 80062c4:	4013      	ands	r3, r2
 80062c6:	0019      	movs	r1, r3
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	430a      	orrs	r2, r1
 80062d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062d8:	2204      	movs	r2, #4
 80062da:	4013      	ands	r3, r2
 80062dc:	d00b      	beq.n	80062f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	4a3b      	ldr	r2, [pc, #236]	; (80063d4 <UART_AdvFeatureConfig+0x14c>)
 80062e6:	4013      	ands	r3, r2
 80062e8:	0019      	movs	r1, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	430a      	orrs	r2, r1
 80062f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062fa:	2208      	movs	r2, #8
 80062fc:	4013      	ands	r3, r2
 80062fe:	d00b      	beq.n	8006318 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	685b      	ldr	r3, [r3, #4]
 8006306:	4a34      	ldr	r2, [pc, #208]	; (80063d8 <UART_AdvFeatureConfig+0x150>)
 8006308:	4013      	ands	r3, r2
 800630a:	0019      	movs	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	430a      	orrs	r2, r1
 8006316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800631c:	2210      	movs	r2, #16
 800631e:	4013      	ands	r3, r2
 8006320:	d00b      	beq.n	800633a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	4a2c      	ldr	r2, [pc, #176]	; (80063dc <UART_AdvFeatureConfig+0x154>)
 800632a:	4013      	ands	r3, r2
 800632c:	0019      	movs	r1, r3
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633e:	2220      	movs	r2, #32
 8006340:	4013      	ands	r3, r2
 8006342:	d00b      	beq.n	800635c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	4a25      	ldr	r2, [pc, #148]	; (80063e0 <UART_AdvFeatureConfig+0x158>)
 800634c:	4013      	ands	r3, r2
 800634e:	0019      	movs	r1, r3
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006360:	2240      	movs	r2, #64	; 0x40
 8006362:	4013      	ands	r3, r2
 8006364:	d01d      	beq.n	80063a2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	4a1d      	ldr	r2, [pc, #116]	; (80063e4 <UART_AdvFeatureConfig+0x15c>)
 800636e:	4013      	ands	r3, r2
 8006370:	0019      	movs	r1, r3
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006382:	2380      	movs	r3, #128	; 0x80
 8006384:	035b      	lsls	r3, r3, #13
 8006386:	429a      	cmp	r2, r3
 8006388:	d10b      	bne.n	80063a2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4a15      	ldr	r2, [pc, #84]	; (80063e8 <UART_AdvFeatureConfig+0x160>)
 8006392:	4013      	ands	r3, r2
 8006394:	0019      	movs	r1, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	2280      	movs	r2, #128	; 0x80
 80063a8:	4013      	ands	r3, r2
 80063aa:	d00b      	beq.n	80063c4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	685b      	ldr	r3, [r3, #4]
 80063b2:	4a0e      	ldr	r2, [pc, #56]	; (80063ec <UART_AdvFeatureConfig+0x164>)
 80063b4:	4013      	ands	r3, r2
 80063b6:	0019      	movs	r1, r3
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	430a      	orrs	r2, r1
 80063c2:	605a      	str	r2, [r3, #4]
  }
}
 80063c4:	46c0      	nop			; (mov r8, r8)
 80063c6:	46bd      	mov	sp, r7
 80063c8:	b002      	add	sp, #8
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	fffdffff 	.word	0xfffdffff
 80063d0:	fffeffff 	.word	0xfffeffff
 80063d4:	fffbffff 	.word	0xfffbffff
 80063d8:	ffff7fff 	.word	0xffff7fff
 80063dc:	ffffefff 	.word	0xffffefff
 80063e0:	ffffdfff 	.word	0xffffdfff
 80063e4:	ffefffff 	.word	0xffefffff
 80063e8:	ff9fffff 	.word	0xff9fffff
 80063ec:	fff7ffff 	.word	0xfff7ffff

080063f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af02      	add	r7, sp, #8
 80063f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2290      	movs	r2, #144	; 0x90
 80063fc:	2100      	movs	r1, #0
 80063fe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006400:	f7fc f8c2 	bl	8002588 <HAL_GetTick>
 8006404:	0003      	movs	r3, r0
 8006406:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	2208      	movs	r2, #8
 8006410:	4013      	ands	r3, r2
 8006412:	2b08      	cmp	r3, #8
 8006414:	d10c      	bne.n	8006430 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	2280      	movs	r2, #128	; 0x80
 800641a:	0391      	lsls	r1, r2, #14
 800641c:	6878      	ldr	r0, [r7, #4]
 800641e:	4a1a      	ldr	r2, [pc, #104]	; (8006488 <UART_CheckIdleState+0x98>)
 8006420:	9200      	str	r2, [sp, #0]
 8006422:	2200      	movs	r2, #0
 8006424:	f000 f832 	bl	800648c <UART_WaitOnFlagUntilTimeout>
 8006428:	1e03      	subs	r3, r0, #0
 800642a:	d001      	beq.n	8006430 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800642c:	2303      	movs	r3, #3
 800642e:	e026      	b.n	800647e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	2204      	movs	r2, #4
 8006438:	4013      	ands	r3, r2
 800643a:	2b04      	cmp	r3, #4
 800643c:	d10c      	bne.n	8006458 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2280      	movs	r2, #128	; 0x80
 8006442:	03d1      	lsls	r1, r2, #15
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	4a10      	ldr	r2, [pc, #64]	; (8006488 <UART_CheckIdleState+0x98>)
 8006448:	9200      	str	r2, [sp, #0]
 800644a:	2200      	movs	r2, #0
 800644c:	f000 f81e 	bl	800648c <UART_WaitOnFlagUntilTimeout>
 8006450:	1e03      	subs	r3, r0, #0
 8006452:	d001      	beq.n	8006458 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006454:	2303      	movs	r3, #3
 8006456:	e012      	b.n	800647e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2288      	movs	r2, #136	; 0x88
 800645c:	2120      	movs	r1, #32
 800645e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	228c      	movs	r2, #140	; 0x8c
 8006464:	2120      	movs	r1, #32
 8006466:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2200      	movs	r2, #0
 800646c:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2200      	movs	r2, #0
 8006472:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2284      	movs	r2, #132	; 0x84
 8006478:	2100      	movs	r1, #0
 800647a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	0018      	movs	r0, r3
 8006480:	46bd      	mov	sp, r7
 8006482:	b004      	add	sp, #16
 8006484:	bd80      	pop	{r7, pc}
 8006486:	46c0      	nop			; (mov r8, r8)
 8006488:	01ffffff 	.word	0x01ffffff

0800648c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b094      	sub	sp, #80	; 0x50
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	603b      	str	r3, [r7, #0]
 8006498:	1dfb      	adds	r3, r7, #7
 800649a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649c:	e0a7      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800649e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064a0:	3301      	adds	r3, #1
 80064a2:	d100      	bne.n	80064a6 <UART_WaitOnFlagUntilTimeout+0x1a>
 80064a4:	e0a3      	b.n	80065ee <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064a6:	f7fc f86f 	bl	8002588 <HAL_GetTick>
 80064aa:	0002      	movs	r2, r0
 80064ac:	683b      	ldr	r3, [r7, #0]
 80064ae:	1ad3      	subs	r3, r2, r3
 80064b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d302      	bcc.n	80064bc <UART_WaitOnFlagUntilTimeout+0x30>
 80064b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d13f      	bne.n	800653c <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064bc:	f3ef 8310 	mrs	r3, PRIMASK
 80064c0:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 80064c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80064c4:	647b      	str	r3, [r7, #68]	; 0x44
 80064c6:	2301      	movs	r3, #1
 80064c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064cc:	f383 8810 	msr	PRIMASK, r3
}
 80064d0:	46c0      	nop			; (mov r8, r8)
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	494e      	ldr	r1, [pc, #312]	; (8006618 <UART_WaitOnFlagUntilTimeout+0x18c>)
 80064de:	400a      	ands	r2, r1
 80064e0:	601a      	str	r2, [r3, #0]
 80064e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80064e4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064e8:	f383 8810 	msr	PRIMASK, r3
}
 80064ec:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80064ee:	f3ef 8310 	mrs	r3, PRIMASK
 80064f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80064f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80064f6:	643b      	str	r3, [r7, #64]	; 0x40
 80064f8:	2301      	movs	r3, #1
 80064fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064fe:	f383 8810 	msr	PRIMASK, r3
}
 8006502:	46c0      	nop			; (mov r8, r8)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	2101      	movs	r1, #1
 8006510:	438a      	bics	r2, r1
 8006512:	609a      	str	r2, [r3, #8]
 8006514:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006516:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800651a:	f383 8810 	msr	PRIMASK, r3
}
 800651e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2288      	movs	r2, #136	; 0x88
 8006524:	2120      	movs	r1, #32
 8006526:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	228c      	movs	r2, #140	; 0x8c
 800652c:	2120      	movs	r1, #32
 800652e:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2284      	movs	r2, #132	; 0x84
 8006534:	2100      	movs	r1, #0
 8006536:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006538:	2303      	movs	r3, #3
 800653a:	e069      	b.n	8006610 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2204      	movs	r2, #4
 8006544:	4013      	ands	r3, r2
 8006546:	d052      	beq.n	80065ee <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	69da      	ldr	r2, [r3, #28]
 800654e:	2380      	movs	r3, #128	; 0x80
 8006550:	011b      	lsls	r3, r3, #4
 8006552:	401a      	ands	r2, r3
 8006554:	2380      	movs	r3, #128	; 0x80
 8006556:	011b      	lsls	r3, r3, #4
 8006558:	429a      	cmp	r2, r3
 800655a:	d148      	bne.n	80065ee <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	2280      	movs	r2, #128	; 0x80
 8006562:	0112      	lsls	r2, r2, #4
 8006564:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006566:	f3ef 8310 	mrs	r3, PRIMASK
 800656a:	613b      	str	r3, [r7, #16]
  return(result);
 800656c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800656e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006570:	2301      	movs	r3, #1
 8006572:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	f383 8810 	msr	PRIMASK, r3
}
 800657a:	46c0      	nop			; (mov r8, r8)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	4924      	ldr	r1, [pc, #144]	; (8006618 <UART_WaitOnFlagUntilTimeout+0x18c>)
 8006588:	400a      	ands	r2, r1
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800658e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	f383 8810 	msr	PRIMASK, r3
}
 8006596:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006598:	f3ef 8310 	mrs	r3, PRIMASK
 800659c:	61fb      	str	r3, [r7, #28]
  return(result);
 800659e:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065a0:	64bb      	str	r3, [r7, #72]	; 0x48
 80065a2:	2301      	movs	r3, #1
 80065a4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	f383 8810 	msr	PRIMASK, r3
}
 80065ac:	46c0      	nop			; (mov r8, r8)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	689a      	ldr	r2, [r3, #8]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	2101      	movs	r1, #1
 80065ba:	438a      	bics	r2, r1
 80065bc:	609a      	str	r2, [r3, #8]
 80065be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80065c0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80065c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c4:	f383 8810 	msr	PRIMASK, r3
}
 80065c8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2288      	movs	r2, #136	; 0x88
 80065ce:	2120      	movs	r1, #32
 80065d0:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	228c      	movs	r2, #140	; 0x8c
 80065d6:	2120      	movs	r1, #32
 80065d8:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	2290      	movs	r2, #144	; 0x90
 80065de:	2120      	movs	r1, #32
 80065e0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2284      	movs	r2, #132	; 0x84
 80065e6:	2100      	movs	r1, #0
 80065e8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80065ea:	2303      	movs	r3, #3
 80065ec:	e010      	b.n	8006610 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	68ba      	ldr	r2, [r7, #8]
 80065f6:	4013      	ands	r3, r2
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	1ad3      	subs	r3, r2, r3
 80065fc:	425a      	negs	r2, r3
 80065fe:	4153      	adcs	r3, r2
 8006600:	b2db      	uxtb	r3, r3
 8006602:	001a      	movs	r2, r3
 8006604:	1dfb      	adds	r3, r7, #7
 8006606:	781b      	ldrb	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d100      	bne.n	800660e <UART_WaitOnFlagUntilTimeout+0x182>
 800660c:	e747      	b.n	800649e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	0018      	movs	r0, r3
 8006612:	46bd      	mov	sp, r7
 8006614:	b014      	add	sp, #80	; 0x50
 8006616:	bd80      	pop	{r7, pc}
 8006618:	fffffe5f 	.word	0xfffffe5f

0800661c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b098      	sub	sp, #96	; 0x60
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	1dbb      	adds	r3, r7, #6
 8006628:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	1dba      	adds	r2, r7, #6
 8006634:	215c      	movs	r1, #92	; 0x5c
 8006636:	8812      	ldrh	r2, [r2, #0]
 8006638:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	1dba      	adds	r2, r7, #6
 800663e:	215e      	movs	r1, #94	; 0x5e
 8006640:	8812      	ldrh	r2, [r2, #0]
 8006642:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	689a      	ldr	r2, [r3, #8]
 800664e:	2380      	movs	r3, #128	; 0x80
 8006650:	015b      	lsls	r3, r3, #5
 8006652:	429a      	cmp	r2, r3
 8006654:	d10d      	bne.n	8006672 <UART_Start_Receive_IT+0x56>
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	691b      	ldr	r3, [r3, #16]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d104      	bne.n	8006668 <UART_Start_Receive_IT+0x4c>
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	2260      	movs	r2, #96	; 0x60
 8006662:	497b      	ldr	r1, [pc, #492]	; (8006850 <UART_Start_Receive_IT+0x234>)
 8006664:	5299      	strh	r1, [r3, r2]
 8006666:	e02e      	b.n	80066c6 <UART_Start_Receive_IT+0xaa>
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2260      	movs	r2, #96	; 0x60
 800666c:	21ff      	movs	r1, #255	; 0xff
 800666e:	5299      	strh	r1, [r3, r2]
 8006670:	e029      	b.n	80066c6 <UART_Start_Receive_IT+0xaa>
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d10d      	bne.n	8006696 <UART_Start_Receive_IT+0x7a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d104      	bne.n	800668c <UART_Start_Receive_IT+0x70>
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	2260      	movs	r2, #96	; 0x60
 8006686:	21ff      	movs	r1, #255	; 0xff
 8006688:	5299      	strh	r1, [r3, r2]
 800668a:	e01c      	b.n	80066c6 <UART_Start_Receive_IT+0xaa>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2260      	movs	r2, #96	; 0x60
 8006690:	217f      	movs	r1, #127	; 0x7f
 8006692:	5299      	strh	r1, [r3, r2]
 8006694:	e017      	b.n	80066c6 <UART_Start_Receive_IT+0xaa>
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	689a      	ldr	r2, [r3, #8]
 800669a:	2380      	movs	r3, #128	; 0x80
 800669c:	055b      	lsls	r3, r3, #21
 800669e:	429a      	cmp	r2, r3
 80066a0:	d10d      	bne.n	80066be <UART_Start_Receive_IT+0xa2>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691b      	ldr	r3, [r3, #16]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d104      	bne.n	80066b4 <UART_Start_Receive_IT+0x98>
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2260      	movs	r2, #96	; 0x60
 80066ae:	217f      	movs	r1, #127	; 0x7f
 80066b0:	5299      	strh	r1, [r3, r2]
 80066b2:	e008      	b.n	80066c6 <UART_Start_Receive_IT+0xaa>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2260      	movs	r2, #96	; 0x60
 80066b8:	213f      	movs	r1, #63	; 0x3f
 80066ba:	5299      	strh	r1, [r3, r2]
 80066bc:	e003      	b.n	80066c6 <UART_Start_Receive_IT+0xaa>
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2260      	movs	r2, #96	; 0x60
 80066c2:	2100      	movs	r1, #0
 80066c4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2290      	movs	r2, #144	; 0x90
 80066ca:	2100      	movs	r1, #0
 80066cc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	228c      	movs	r2, #140	; 0x8c
 80066d2:	2122      	movs	r1, #34	; 0x22
 80066d4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80066d6:	f3ef 8310 	mrs	r3, PRIMASK
 80066da:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 80066dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80066e0:	2301      	movs	r3, #1
 80066e2:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80066e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80066e6:	f383 8810 	msr	PRIMASK, r3
}
 80066ea:	46c0      	nop			; (mov r8, r8)
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	689a      	ldr	r2, [r3, #8]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2101      	movs	r1, #1
 80066f8:	430a      	orrs	r2, r1
 80066fa:	609a      	str	r2, [r3, #8]
 80066fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80066fe:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006700:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006702:	f383 8810 	msr	PRIMASK, r3
}
 8006706:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800670c:	2380      	movs	r3, #128	; 0x80
 800670e:	059b      	lsls	r3, r3, #22
 8006710:	429a      	cmp	r2, r3
 8006712:	d150      	bne.n	80067b6 <UART_Start_Receive_IT+0x19a>
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2268      	movs	r2, #104	; 0x68
 8006718:	5a9b      	ldrh	r3, [r3, r2]
 800671a:	1dba      	adds	r2, r7, #6
 800671c:	8812      	ldrh	r2, [r2, #0]
 800671e:	429a      	cmp	r2, r3
 8006720:	d349      	bcc.n	80067b6 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	689a      	ldr	r2, [r3, #8]
 8006726:	2380      	movs	r3, #128	; 0x80
 8006728:	015b      	lsls	r3, r3, #5
 800672a:	429a      	cmp	r2, r3
 800672c:	d107      	bne.n	800673e <UART_Start_Receive_IT+0x122>
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d103      	bne.n	800673e <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4a46      	ldr	r2, [pc, #280]	; (8006854 <UART_Start_Receive_IT+0x238>)
 800673a:	675a      	str	r2, [r3, #116]	; 0x74
 800673c:	e002      	b.n	8006744 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a45      	ldr	r2, [pc, #276]	; (8006858 <UART_Start_Receive_IT+0x23c>)
 8006742:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d019      	beq.n	8006780 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800674c:	f3ef 8310 	mrs	r3, PRIMASK
 8006750:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006754:	65bb      	str	r3, [r7, #88]	; 0x58
 8006756:	2301      	movs	r3, #1
 8006758:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800675a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800675c:	f383 8810 	msr	PRIMASK, r3
}
 8006760:	46c0      	nop			; (mov r8, r8)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	681a      	ldr	r2, [r3, #0]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2180      	movs	r1, #128	; 0x80
 800676e:	0049      	lsls	r1, r1, #1
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]
 8006774:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006776:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006778:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800677a:	f383 8810 	msr	PRIMASK, r3
}
 800677e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006780:	f3ef 8310 	mrs	r3, PRIMASK
 8006784:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006788:	657b      	str	r3, [r7, #84]	; 0x54
 800678a:	2301      	movs	r3, #1
 800678c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800678e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006790:	f383 8810 	msr	PRIMASK, r3
}
 8006794:	46c0      	nop			; (mov r8, r8)
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689a      	ldr	r2, [r3, #8]
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	2180      	movs	r1, #128	; 0x80
 80067a2:	0549      	lsls	r1, r1, #21
 80067a4:	430a      	orrs	r2, r1
 80067a6:	609a      	str	r2, [r3, #8]
 80067a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067aa:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	f383 8810 	msr	PRIMASK, r3
}
 80067b2:	46c0      	nop			; (mov r8, r8)
 80067b4:	e047      	b.n	8006846 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	689a      	ldr	r2, [r3, #8]
 80067ba:	2380      	movs	r3, #128	; 0x80
 80067bc:	015b      	lsls	r3, r3, #5
 80067be:	429a      	cmp	r2, r3
 80067c0:	d107      	bne.n	80067d2 <UART_Start_Receive_IT+0x1b6>
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d103      	bne.n	80067d2 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	4a23      	ldr	r2, [pc, #140]	; (800685c <UART_Start_Receive_IT+0x240>)
 80067ce:	675a      	str	r2, [r3, #116]	; 0x74
 80067d0:	e002      	b.n	80067d8 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	4a22      	ldr	r2, [pc, #136]	; (8006860 <UART_Start_Receive_IT+0x244>)
 80067d6:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	691b      	ldr	r3, [r3, #16]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d019      	beq.n	8006814 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80067e0:	f3ef 8310 	mrs	r3, PRIMASK
 80067e4:	61fb      	str	r3, [r7, #28]
  return(result);
 80067e6:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80067e8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067ea:	2301      	movs	r3, #1
 80067ec:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	f383 8810 	msr	PRIMASK, r3
}
 80067f4:	46c0      	nop			; (mov r8, r8)
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2190      	movs	r1, #144	; 0x90
 8006802:	0049      	lsls	r1, r1, #1
 8006804:	430a      	orrs	r2, r1
 8006806:	601a      	str	r2, [r3, #0]
 8006808:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800680a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800680c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680e:	f383 8810 	msr	PRIMASK, r3
}
 8006812:	e018      	b.n	8006846 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006814:	f3ef 8310 	mrs	r3, PRIMASK
 8006818:	613b      	str	r3, [r7, #16]
  return(result);
 800681a:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800681c:	653b      	str	r3, [r7, #80]	; 0x50
 800681e:	2301      	movs	r3, #1
 8006820:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	f383 8810 	msr	PRIMASK, r3
}
 8006828:	46c0      	nop			; (mov r8, r8)
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	2120      	movs	r1, #32
 8006836:	430a      	orrs	r2, r1
 8006838:	601a      	str	r2, [r3, #0]
 800683a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800683c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800683e:	69bb      	ldr	r3, [r7, #24]
 8006840:	f383 8810 	msr	PRIMASK, r3
}
 8006844:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006846:	2300      	movs	r3, #0
}
 8006848:	0018      	movs	r0, r3
 800684a:	46bd      	mov	sp, r7
 800684c:	b018      	add	sp, #96	; 0x60
 800684e:	bd80      	pop	{r7, pc}
 8006850:	000001ff 	.word	0x000001ff
 8006854:	080076d5 	.word	0x080076d5
 8006858:	080073e9 	.word	0x080073e9
 800685c:	08007275 	.word	0x08007275
 8006860:	08007101 	.word	0x08007101

08006864 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b090      	sub	sp, #64	; 0x40
 8006868:	af00      	add	r7, sp, #0
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	1dbb      	adds	r3, r7, #6
 8006870:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	1dba      	adds	r2, r7, #6
 800687c:	215c      	movs	r1, #92	; 0x5c
 800687e:	8812      	ldrh	r2, [r2, #0]
 8006880:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2290      	movs	r2, #144	; 0x90
 8006886:	2100      	movs	r1, #0
 8006888:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	228c      	movs	r2, #140	; 0x8c
 800688e:	2122      	movs	r1, #34	; 0x22
 8006890:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2280      	movs	r2, #128	; 0x80
 8006896:	589b      	ldr	r3, [r3, r2]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d02d      	beq.n	80068f8 <UART_Start_Receive_DMA+0x94>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2280      	movs	r2, #128	; 0x80
 80068a0:	589b      	ldr	r3, [r3, r2]
 80068a2:	4a40      	ldr	r2, [pc, #256]	; (80069a4 <UART_Start_Receive_DMA+0x140>)
 80068a4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2280      	movs	r2, #128	; 0x80
 80068aa:	589b      	ldr	r3, [r3, r2]
 80068ac:	4a3e      	ldr	r2, [pc, #248]	; (80069a8 <UART_Start_Receive_DMA+0x144>)
 80068ae:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	2280      	movs	r2, #128	; 0x80
 80068b4:	589b      	ldr	r3, [r3, r2]
 80068b6:	4a3d      	ldr	r2, [pc, #244]	; (80069ac <UART_Start_Receive_DMA+0x148>)
 80068b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2280      	movs	r2, #128	; 0x80
 80068be:	589b      	ldr	r3, [r3, r2]
 80068c0:	2200      	movs	r2, #0
 80068c2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2280      	movs	r2, #128	; 0x80
 80068c8:	5898      	ldr	r0, [r3, r2]
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	3324      	adds	r3, #36	; 0x24
 80068d0:	0019      	movs	r1, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d6:	001a      	movs	r2, r3
 80068d8:	1dbb      	adds	r3, r7, #6
 80068da:	881b      	ldrh	r3, [r3, #0]
 80068dc:	f7fc fc4e 	bl	800317c <HAL_DMA_Start_IT>
 80068e0:	1e03      	subs	r3, r0, #0
 80068e2:	d009      	beq.n	80068f8 <UART_Start_Receive_DMA+0x94>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	2290      	movs	r2, #144	; 0x90
 80068e8:	2110      	movs	r1, #16
 80068ea:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	228c      	movs	r2, #140	; 0x8c
 80068f0:	2120      	movs	r1, #32
 80068f2:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 80068f4:	2301      	movs	r3, #1
 80068f6:	e050      	b.n	800699a <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d019      	beq.n	8006934 <UART_Start_Receive_DMA+0xd0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006900:	f3ef 8310 	mrs	r3, PRIMASK
 8006904:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006906:	6abb      	ldr	r3, [r7, #40]	; 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006908:	63fb      	str	r3, [r7, #60]	; 0x3c
 800690a:	2301      	movs	r3, #1
 800690c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800690e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006910:	f383 8810 	msr	PRIMASK, r3
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	2180      	movs	r1, #128	; 0x80
 8006922:	0049      	lsls	r1, r1, #1
 8006924:	430a      	orrs	r2, r1
 8006926:	601a      	str	r2, [r3, #0]
 8006928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800692a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800692c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800692e:	f383 8810 	msr	PRIMASK, r3
}
 8006932:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006934:	f3ef 8310 	mrs	r3, PRIMASK
 8006938:	613b      	str	r3, [r7, #16]
  return(result);
 800693a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800693c:	63bb      	str	r3, [r7, #56]	; 0x38
 800693e:	2301      	movs	r3, #1
 8006940:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f383 8810 	msr	PRIMASK, r3
}
 8006948:	46c0      	nop			; (mov r8, r8)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	689a      	ldr	r2, [r3, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	2101      	movs	r1, #1
 8006956:	430a      	orrs	r2, r1
 8006958:	609a      	str	r2, [r3, #8]
 800695a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800695c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	f383 8810 	msr	PRIMASK, r3
}
 8006964:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006966:	f3ef 8310 	mrs	r3, PRIMASK
 800696a:	61fb      	str	r3, [r7, #28]
  return(result);
 800696c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800696e:	637b      	str	r3, [r7, #52]	; 0x34
 8006970:	2301      	movs	r3, #1
 8006972:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006974:	6a3b      	ldr	r3, [r7, #32]
 8006976:	f383 8810 	msr	PRIMASK, r3
}
 800697a:	46c0      	nop			; (mov r8, r8)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	2140      	movs	r1, #64	; 0x40
 8006988:	430a      	orrs	r2, r1
 800698a:	609a      	str	r2, [r3, #8]
 800698c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800698e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006992:	f383 8810 	msr	PRIMASK, r3
}
 8006996:	46c0      	nop			; (mov r8, r8)

  return HAL_OK;
 8006998:	2300      	movs	r3, #0
}
 800699a:	0018      	movs	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	b010      	add	sp, #64	; 0x40
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	46c0      	nop			; (mov r8, r8)
 80069a4:	08006bb5 	.word	0x08006bb5
 80069a8:	08006ce5 	.word	0x08006ce5
 80069ac:	08006d27 	.word	0x08006d27

080069b0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b08a      	sub	sp, #40	; 0x28
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069b8:	f3ef 8310 	mrs	r3, PRIMASK
 80069bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80069be:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80069c0:	627b      	str	r3, [r7, #36]	; 0x24
 80069c2:	2301      	movs	r3, #1
 80069c4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f383 8810 	msr	PRIMASK, r3
}
 80069cc:	46c0      	nop			; (mov r8, r8)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	21c0      	movs	r1, #192	; 0xc0
 80069da:	438a      	bics	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	f383 8810 	msr	PRIMASK, r3
}
 80069e8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80069ea:	f3ef 8310 	mrs	r3, PRIMASK
 80069ee:	617b      	str	r3, [r7, #20]
  return(result);
 80069f0:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	2301      	movs	r3, #1
 80069f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80069f8:	69bb      	ldr	r3, [r7, #24]
 80069fa:	f383 8810 	msr	PRIMASK, r3
}
 80069fe:	46c0      	nop			; (mov r8, r8)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	689a      	ldr	r2, [r3, #8]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4908      	ldr	r1, [pc, #32]	; (8006a2c <UART_EndTxTransfer+0x7c>)
 8006a0c:	400a      	ands	r2, r1
 8006a0e:	609a      	str	r2, [r3, #8]
 8006a10:	6a3b      	ldr	r3, [r7, #32]
 8006a12:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a14:	69fb      	ldr	r3, [r7, #28]
 8006a16:	f383 8810 	msr	PRIMASK, r3
}
 8006a1a:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2288      	movs	r2, #136	; 0x88
 8006a20:	2120      	movs	r1, #32
 8006a22:	5099      	str	r1, [r3, r2]
}
 8006a24:	46c0      	nop			; (mov r8, r8)
 8006a26:	46bd      	mov	sp, r7
 8006a28:	b00a      	add	sp, #40	; 0x28
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	ff7fffff 	.word	0xff7fffff

08006a30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b08e      	sub	sp, #56	; 0x38
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a38:	f3ef 8310 	mrs	r3, PRIMASK
 8006a3c:	617b      	str	r3, [r7, #20]
  return(result);
 8006a3e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006a40:	637b      	str	r3, [r7, #52]	; 0x34
 8006a42:	2301      	movs	r3, #1
 8006a44:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	f383 8810 	msr	PRIMASK, r3
}
 8006a4c:	46c0      	nop			; (mov r8, r8)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4926      	ldr	r1, [pc, #152]	; (8006af4 <UART_EndRxTransfer+0xc4>)
 8006a5a:	400a      	ands	r2, r1
 8006a5c:	601a      	str	r2, [r3, #0]
 8006a5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	f383 8810 	msr	PRIMASK, r3
}
 8006a68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006a6a:	f3ef 8310 	mrs	r3, PRIMASK
 8006a6e:	623b      	str	r3, [r7, #32]
  return(result);
 8006a70:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006a72:	633b      	str	r3, [r7, #48]	; 0x30
 8006a74:	2301      	movs	r3, #1
 8006a76:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	f383 8810 	msr	PRIMASK, r3
}
 8006a7e:	46c0      	nop			; (mov r8, r8)
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	689a      	ldr	r2, [r3, #8]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	491b      	ldr	r1, [pc, #108]	; (8006af8 <UART_EndRxTransfer+0xc8>)
 8006a8c:	400a      	ands	r2, r1
 8006a8e:	609a      	str	r2, [r3, #8]
 8006a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a92:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a96:	f383 8810 	msr	PRIMASK, r3
}
 8006a9a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d118      	bne.n	8006ad6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8006aa8:	60bb      	str	r3, [r7, #8]
  return(result);
 8006aaa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aae:	2301      	movs	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	f383 8810 	msr	PRIMASK, r3
}
 8006ab8:	46c0      	nop			; (mov r8, r8)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681a      	ldr	r2, [r3, #0]
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2110      	movs	r1, #16
 8006ac6:	438a      	bics	r2, r1
 8006ac8:	601a      	str	r2, [r3, #0]
 8006aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006acc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	f383 8810 	msr	PRIMASK, r3
}
 8006ad4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	228c      	movs	r2, #140	; 0x8c
 8006ada:	2120      	movs	r1, #32
 8006adc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	2200      	movs	r2, #0
 8006ae8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006aea:	46c0      	nop			; (mov r8, r8)
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b00e      	add	sp, #56	; 0x38
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	fffffedf 	.word	0xfffffedf
 8006af8:	effffffe 	.word	0xeffffffe

08006afc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b08c      	sub	sp, #48	; 0x30
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b08:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2220      	movs	r2, #32
 8006b12:	4013      	ands	r3, r2
 8006b14:	d135      	bne.n	8006b82 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8006b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b18:	2256      	movs	r2, #86	; 0x56
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b1e:	f3ef 8310 	mrs	r3, PRIMASK
 8006b22:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b24:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006b26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b28:	2301      	movs	r3, #1
 8006b2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	f383 8810 	msr	PRIMASK, r3
}
 8006b32:	46c0      	nop			; (mov r8, r8)
 8006b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	2180      	movs	r1, #128	; 0x80
 8006b40:	438a      	bics	r2, r1
 8006b42:	609a      	str	r2, [r3, #8]
 8006b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b46:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	f383 8810 	msr	PRIMASK, r3
}
 8006b4e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b50:	f3ef 8310 	mrs	r3, PRIMASK
 8006b54:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b56:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006b58:	627b      	str	r3, [r7, #36]	; 0x24
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	f383 8810 	msr	PRIMASK, r3
}
 8006b64:	46c0      	nop			; (mov r8, r8)
 8006b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	2140      	movs	r1, #64	; 0x40
 8006b72:	430a      	orrs	r2, r1
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b7a:	6a3b      	ldr	r3, [r7, #32]
 8006b7c:	f383 8810 	msr	PRIMASK, r3
}
 8006b80:	e004      	b.n	8006b8c <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8006b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b84:	0018      	movs	r0, r3
 8006b86:	f7ff f9b8 	bl	8005efa <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006b8a:	46c0      	nop			; (mov r8, r8)
 8006b8c:	46c0      	nop			; (mov r8, r8)
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	b00c      	add	sp, #48	; 0x30
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ba0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	0018      	movs	r0, r3
 8006ba6:	f7ff f9b0 	bl	8005f0a <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006baa:	46c0      	nop			; (mov r8, r8)
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b004      	add	sp, #16
 8006bb0:	bd80      	pop	{r7, pc}
	...

08006bb4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b094      	sub	sp, #80	; 0x50
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2220      	movs	r2, #32
 8006bca:	4013      	ands	r3, r2
 8006bcc:	d16f      	bne.n	8006cae <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8006bce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bd0:	225e      	movs	r2, #94	; 0x5e
 8006bd2:	2100      	movs	r1, #0
 8006bd4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006bd6:	f3ef 8310 	mrs	r3, PRIMASK
 8006bda:	61bb      	str	r3, [r7, #24]
  return(result);
 8006bdc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006bde:	64bb      	str	r3, [r7, #72]	; 0x48
 8006be0:	2301      	movs	r3, #1
 8006be2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006be4:	69fb      	ldr	r3, [r7, #28]
 8006be6:	f383 8810 	msr	PRIMASK, r3
}
 8006bea:	46c0      	nop			; (mov r8, r8)
 8006bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681a      	ldr	r2, [r3, #0]
 8006bf2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	493a      	ldr	r1, [pc, #232]	; (8006ce0 <UART_DMAReceiveCplt+0x12c>)
 8006bf8:	400a      	ands	r2, r1
 8006bfa:	601a      	str	r2, [r3, #0]
 8006bfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bfe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	f383 8810 	msr	PRIMASK, r3
}
 8006c06:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c08:	f3ef 8310 	mrs	r3, PRIMASK
 8006c0c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c10:	647b      	str	r3, [r7, #68]	; 0x44
 8006c12:	2301      	movs	r3, #1
 8006c14:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c18:	f383 8810 	msr	PRIMASK, r3
}
 8006c1c:	46c0      	nop			; (mov r8, r8)
 8006c1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	689a      	ldr	r2, [r3, #8]
 8006c24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	2101      	movs	r1, #1
 8006c2a:	438a      	bics	r2, r1
 8006c2c:	609a      	str	r2, [r3, #8]
 8006c2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c34:	f383 8810 	msr	PRIMASK, r3
}
 8006c38:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c3a:	f3ef 8310 	mrs	r3, PRIMASK
 8006c3e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c42:	643b      	str	r3, [r7, #64]	; 0x40
 8006c44:	2301      	movs	r3, #1
 8006c46:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c4a:	f383 8810 	msr	PRIMASK, r3
}
 8006c4e:	46c0      	nop			; (mov r8, r8)
 8006c50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	689a      	ldr	r2, [r3, #8]
 8006c56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2140      	movs	r1, #64	; 0x40
 8006c5c:	438a      	bics	r2, r1
 8006c5e:	609a      	str	r2, [r3, #8]
 8006c60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c62:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c66:	f383 8810 	msr	PRIMASK, r3
}
 8006c6a:	46c0      	nop			; (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006c6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c6e:	228c      	movs	r2, #140	; 0x8c
 8006c70:	2120      	movs	r1, #32
 8006c72:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d118      	bne.n	8006cae <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006c7c:	f3ef 8310 	mrs	r3, PRIMASK
 8006c80:	60fb      	str	r3, [r7, #12]
  return(result);
 8006c82:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c86:	2301      	movs	r3, #1
 8006c88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	f383 8810 	msr	PRIMASK, r3
}
 8006c90:	46c0      	nop			; (mov r8, r8)
 8006c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	2110      	movs	r1, #16
 8006c9e:	438a      	bics	r2, r1
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ca4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ca6:	697b      	ldr	r3, [r7, #20]
 8006ca8:	f383 8810 	msr	PRIMASK, r3
}
 8006cac:	46c0      	nop			; (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cb8:	2b01      	cmp	r3, #1
 8006cba:	d108      	bne.n	8006cce <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006cbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cbe:	225c      	movs	r2, #92	; 0x5c
 8006cc0:	5a9a      	ldrh	r2, [r3, r2]
 8006cc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc4:	0011      	movs	r1, r2
 8006cc6:	0018      	movs	r0, r3
 8006cc8:	f7ff f92f 	bl	8005f2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ccc:	e003      	b.n	8006cd6 <UART_DMAReceiveCplt+0x122>
    HAL_UART_RxCpltCallback(huart);
 8006cce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f7fa fb47 	bl	8001364 <HAL_UART_RxCpltCallback>
}
 8006cd6:	46c0      	nop			; (mov r8, r8)
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	b014      	add	sp, #80	; 0x50
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	46c0      	nop			; (mov r8, r8)
 8006ce0:	fffffeff 	.word	0xfffffeff

08006ce4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b084      	sub	sp, #16
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cf0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	671a      	str	r2, [r3, #112]	; 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cfc:	2b01      	cmp	r3, #1
 8006cfe:	d10a      	bne.n	8006d16 <UART_DMARxHalfCplt+0x32>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	225c      	movs	r2, #92	; 0x5c
 8006d04:	5a9b      	ldrh	r3, [r3, r2]
 8006d06:	085b      	lsrs	r3, r3, #1
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	0011      	movs	r1, r2
 8006d0e:	0018      	movs	r0, r3
 8006d10:	f7ff f90b 	bl	8005f2a <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006d14:	e003      	b.n	8006d1e <UART_DMARxHalfCplt+0x3a>
    HAL_UART_RxHalfCpltCallback(huart);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	0018      	movs	r0, r3
 8006d1a:	f7fa fb05 	bl	8001328 <HAL_UART_RxHalfCpltCallback>
}
 8006d1e:	46c0      	nop			; (mov r8, r8)
 8006d20:	46bd      	mov	sp, r7
 8006d22:	b004      	add	sp, #16
 8006d24:	bd80      	pop	{r7, pc}

08006d26 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006d26:	b580      	push	{r7, lr}
 8006d28:	b086      	sub	sp, #24
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d32:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	2288      	movs	r2, #136	; 0x88
 8006d38:	589b      	ldr	r3, [r3, r2]
 8006d3a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	228c      	movs	r2, #140	; 0x8c
 8006d40:	589b      	ldr	r3, [r3, r2]
 8006d42:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006d44:	697b      	ldr	r3, [r7, #20]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	689b      	ldr	r3, [r3, #8]
 8006d4a:	2280      	movs	r2, #128	; 0x80
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	2b80      	cmp	r3, #128	; 0x80
 8006d50:	d10a      	bne.n	8006d68 <UART_DMAError+0x42>
 8006d52:	693b      	ldr	r3, [r7, #16]
 8006d54:	2b21      	cmp	r3, #33	; 0x21
 8006d56:	d107      	bne.n	8006d68 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006d58:	697b      	ldr	r3, [r7, #20]
 8006d5a:	2256      	movs	r2, #86	; 0x56
 8006d5c:	2100      	movs	r1, #0
 8006d5e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	0018      	movs	r0, r3
 8006d64:	f7ff fe24 	bl	80069b0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2240      	movs	r2, #64	; 0x40
 8006d70:	4013      	ands	r3, r2
 8006d72:	2b40      	cmp	r3, #64	; 0x40
 8006d74:	d10a      	bne.n	8006d8c <UART_DMAError+0x66>
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2b22      	cmp	r3, #34	; 0x22
 8006d7a:	d107      	bne.n	8006d8c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	225e      	movs	r2, #94	; 0x5e
 8006d80:	2100      	movs	r1, #0
 8006d82:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	0018      	movs	r0, r3
 8006d88:	f7ff fe52 	bl	8006a30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	2290      	movs	r2, #144	; 0x90
 8006d90:	589b      	ldr	r3, [r3, r2]
 8006d92:	2210      	movs	r2, #16
 8006d94:	431a      	orrs	r2, r3
 8006d96:	697b      	ldr	r3, [r7, #20]
 8006d98:	2190      	movs	r1, #144	; 0x90
 8006d9a:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	0018      	movs	r0, r3
 8006da0:	f7ff f8bb 	bl	8005f1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006da4:	46c0      	nop			; (mov r8, r8)
 8006da6:	46bd      	mov	sp, r7
 8006da8:	b006      	add	sp, #24
 8006daa:	bd80      	pop	{r7, pc}

08006dac <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b08a      	sub	sp, #40	; 0x28
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2288      	movs	r2, #136	; 0x88
 8006db8:	589b      	ldr	r3, [r3, r2]
 8006dba:	2b21      	cmp	r3, #33	; 0x21
 8006dbc:	d14c      	bne.n	8006e58 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2256      	movs	r2, #86	; 0x56
 8006dc2:	5a9b      	ldrh	r3, [r3, r2]
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d132      	bne.n	8006e30 <UART_TxISR_8BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dca:	f3ef 8310 	mrs	r3, PRIMASK
 8006dce:	60bb      	str	r3, [r7, #8]
  return(result);
 8006dd0:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006dd2:	627b      	str	r3, [r7, #36]	; 0x24
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f383 8810 	msr	PRIMASK, r3
}
 8006dde:	46c0      	nop			; (mov r8, r8)
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	2180      	movs	r1, #128	; 0x80
 8006dec:	438a      	bics	r2, r1
 8006dee:	601a      	str	r2, [r3, #0]
 8006df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006df2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f383 8810 	msr	PRIMASK, r3
}
 8006dfa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dfc:	f3ef 8310 	mrs	r3, PRIMASK
 8006e00:	617b      	str	r3, [r7, #20]
  return(result);
 8006e02:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006e04:	623b      	str	r3, [r7, #32]
 8006e06:	2301      	movs	r3, #1
 8006e08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	f383 8810 	msr	PRIMASK, r3
}
 8006e10:	46c0      	nop			; (mov r8, r8)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	2140      	movs	r1, #64	; 0x40
 8006e1e:	430a      	orrs	r2, r1
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	6a3b      	ldr	r3, [r7, #32]
 8006e24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	f383 8810 	msr	PRIMASK, r3
}
 8006e2c:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8006e2e:	e013      	b.n	8006e58 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e34:	781a      	ldrb	r2, [r3, #0]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e40:	1c5a      	adds	r2, r3, #1
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2256      	movs	r2, #86	; 0x56
 8006e4a:	5a9b      	ldrh	r3, [r3, r2]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	3b01      	subs	r3, #1
 8006e50:	b299      	uxth	r1, r3
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	2256      	movs	r2, #86	; 0x56
 8006e56:	5299      	strh	r1, [r3, r2]
}
 8006e58:	46c0      	nop			; (mov r8, r8)
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	b00a      	add	sp, #40	; 0x28
 8006e5e:	bd80      	pop	{r7, pc}

08006e60 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e60:	b580      	push	{r7, lr}
 8006e62:	b08c      	sub	sp, #48	; 0x30
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2288      	movs	r2, #136	; 0x88
 8006e6c:	589b      	ldr	r3, [r3, r2]
 8006e6e:	2b21      	cmp	r3, #33	; 0x21
 8006e70:	d151      	bne.n	8006f16 <UART_TxISR_16BIT+0xb6>
  {
    if (huart->TxXferCount == 0U)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2256      	movs	r2, #86	; 0x56
 8006e76:	5a9b      	ldrh	r3, [r3, r2]
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d132      	bne.n	8006ee4 <UART_TxISR_16BIT+0x84>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e82:	60fb      	str	r3, [r7, #12]
  return(result);
 8006e84:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8006e86:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e88:	2301      	movs	r3, #1
 8006e8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f383 8810 	msr	PRIMASK, r3
}
 8006e92:	46c0      	nop			; (mov r8, r8)
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	681a      	ldr	r2, [r3, #0]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	2180      	movs	r1, #128	; 0x80
 8006ea0:	438a      	bics	r2, r1
 8006ea2:	601a      	str	r2, [r3, #0]
 8006ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ea8:	697b      	ldr	r3, [r7, #20]
 8006eaa:	f383 8810 	msr	PRIMASK, r3
}
 8006eae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8006eb4:	61bb      	str	r3, [r7, #24]
  return(result);
 8006eb6:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eba:	2301      	movs	r3, #1
 8006ebc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ebe:	69fb      	ldr	r3, [r7, #28]
 8006ec0:	f383 8810 	msr	PRIMASK, r3
}
 8006ec4:	46c0      	nop			; (mov r8, r8)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	2140      	movs	r1, #64	; 0x40
 8006ed2:	430a      	orrs	r2, r1
 8006ed4:	601a      	str	r2, [r3, #0]
 8006ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ed8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	f383 8810 	msr	PRIMASK, r3
}
 8006ee0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8006ee2:	e018      	b.n	8006f16 <UART_TxISR_16BIT+0xb6>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee8:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8006eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006eec:	881b      	ldrh	r3, [r3, #0]
 8006eee:	001a      	movs	r2, r3
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	05d2      	lsls	r2, r2, #23
 8006ef6:	0dd2      	lsrs	r2, r2, #23
 8006ef8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006efe:	1c9a      	adds	r2, r3, #2
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2256      	movs	r2, #86	; 0x56
 8006f08:	5a9b      	ldrh	r3, [r3, r2]
 8006f0a:	b29b      	uxth	r3, r3
 8006f0c:	3b01      	subs	r3, #1
 8006f0e:	b299      	uxth	r1, r3
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2256      	movs	r2, #86	; 0x56
 8006f14:	5299      	strh	r1, [r3, r2]
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	b00c      	add	sp, #48	; 0x30
 8006f1c:	bd80      	pop	{r7, pc}
	...

08006f20 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b08c      	sub	sp, #48	; 0x30
 8006f24:	af00      	add	r7, sp, #0
 8006f26:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2288      	movs	r2, #136	; 0x88
 8006f2c:	589b      	ldr	r3, [r3, r2]
 8006f2e:	2b21      	cmp	r3, #33	; 0x21
 8006f30:	d165      	bne.n	8006ffe <UART_TxISR_8BIT_FIFOEN+0xde>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006f32:	232e      	movs	r3, #46	; 0x2e
 8006f34:	18fb      	adds	r3, r7, r3
 8006f36:	687a      	ldr	r2, [r7, #4]
 8006f38:	216a      	movs	r1, #106	; 0x6a
 8006f3a:	5a52      	ldrh	r2, [r2, r1]
 8006f3c:	801a      	strh	r2, [r3, #0]
 8006f3e:	e059      	b.n	8006ff4 <UART_TxISR_8BIT_FIFOEN+0xd4>
    {
      if (huart->TxXferCount == 0U)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2256      	movs	r2, #86	; 0x56
 8006f44:	5a9b      	ldrh	r3, [r3, r2]
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d133      	bne.n	8006fb4 <UART_TxISR_8BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006f50:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f52:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8006f54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f56:	2301      	movs	r3, #1
 8006f58:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	f383 8810 	msr	PRIMASK, r3
}
 8006f60:	46c0      	nop			; (mov r8, r8)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	689a      	ldr	r2, [r3, #8]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	4926      	ldr	r1, [pc, #152]	; (8007008 <UART_TxISR_8BIT_FIFOEN+0xe8>)
 8006f6e:	400a      	ands	r2, r1
 8006f70:	609a      	str	r2, [r3, #8]
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	f383 8810 	msr	PRIMASK, r3
}
 8006f7c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f7e:	f3ef 8310 	mrs	r3, PRIMASK
 8006f82:	61bb      	str	r3, [r7, #24]
  return(result);
 8006f84:	69bb      	ldr	r3, [r7, #24]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006f86:	627b      	str	r3, [r7, #36]	; 0x24
 8006f88:	2301      	movs	r3, #1
 8006f8a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f383 8810 	msr	PRIMASK, r3
}
 8006f92:	46c0      	nop			; (mov r8, r8)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	2140      	movs	r1, #64	; 0x40
 8006fa0:	430a      	orrs	r2, r1
 8006fa2:	601a      	str	r2, [r3, #0]
 8006fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fa6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa8:	6a3b      	ldr	r3, [r7, #32]
 8006faa:	f383 8810 	msr	PRIMASK, r3
}
 8006fae:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 8006fb0:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8006fb2:	e024      	b.n	8006ffe <UART_TxISR_8BIT_FIFOEN+0xde>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69db      	ldr	r3, [r3, #28]
 8006fba:	2280      	movs	r2, #128	; 0x80
 8006fbc:	4013      	ands	r3, r2
 8006fbe:	d013      	beq.n	8006fe8 <UART_TxISR_8BIT_FIFOEN+0xc8>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fc4:	781a      	ldrb	r2, [r3, #0]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006fd0:	1c5a      	adds	r2, r3, #1
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	2256      	movs	r2, #86	; 0x56
 8006fda:	5a9b      	ldrh	r3, [r3, r2]
 8006fdc:	b29b      	uxth	r3, r3
 8006fde:	3b01      	subs	r3, #1
 8006fe0:	b299      	uxth	r1, r3
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2256      	movs	r2, #86	; 0x56
 8006fe6:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8006fe8:	212e      	movs	r1, #46	; 0x2e
 8006fea:	187b      	adds	r3, r7, r1
 8006fec:	881a      	ldrh	r2, [r3, #0]
 8006fee:	187b      	adds	r3, r7, r1
 8006ff0:	3a01      	subs	r2, #1
 8006ff2:	801a      	strh	r2, [r3, #0]
 8006ff4:	232e      	movs	r3, #46	; 0x2e
 8006ff6:	18fb      	adds	r3, r7, r3
 8006ff8:	881b      	ldrh	r3, [r3, #0]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1a0      	bne.n	8006f40 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8006ffe:	46c0      	nop			; (mov r8, r8)
 8007000:	46bd      	mov	sp, r7
 8007002:	b00c      	add	sp, #48	; 0x30
 8007004:	bd80      	pop	{r7, pc}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	ff7fffff 	.word	0xff7fffff

0800700c <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800700c:	b580      	push	{r7, lr}
 800700e:	b08c      	sub	sp, #48	; 0x30
 8007010:	af00      	add	r7, sp, #0
 8007012:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2288      	movs	r2, #136	; 0x88
 8007018:	589b      	ldr	r3, [r3, r2]
 800701a:	2b21      	cmp	r3, #33	; 0x21
 800701c:	d16a      	bne.n	80070f4 <UART_TxISR_16BIT_FIFOEN+0xe8>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800701e:	232e      	movs	r3, #46	; 0x2e
 8007020:	18fb      	adds	r3, r7, r3
 8007022:	687a      	ldr	r2, [r7, #4]
 8007024:	216a      	movs	r1, #106	; 0x6a
 8007026:	5a52      	ldrh	r2, [r2, r1]
 8007028:	801a      	strh	r2, [r3, #0]
 800702a:	e05e      	b.n	80070ea <UART_TxISR_16BIT_FIFOEN+0xde>
    {
      if (huart->TxXferCount == 0U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2256      	movs	r2, #86	; 0x56
 8007030:	5a9b      	ldrh	r3, [r3, r2]
 8007032:	b29b      	uxth	r3, r3
 8007034:	2b00      	cmp	r3, #0
 8007036:	d133      	bne.n	80070a0 <UART_TxISR_16BIT_FIFOEN+0x94>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007038:	f3ef 8310 	mrs	r3, PRIMASK
 800703c:	60bb      	str	r3, [r7, #8]
  return(result);
 800703e:	68bb      	ldr	r3, [r7, #8]
      {
        /* Disable the TX FIFO threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8007040:	627b      	str	r3, [r7, #36]	; 0x24
 8007042:	2301      	movs	r3, #1
 8007044:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f383 8810 	msr	PRIMASK, r3
}
 800704c:	46c0      	nop			; (mov r8, r8)
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	689a      	ldr	r2, [r3, #8]
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	4928      	ldr	r1, [pc, #160]	; (80070fc <UART_TxISR_16BIT_FIFOEN+0xf0>)
 800705a:	400a      	ands	r2, r1
 800705c:	609a      	str	r2, [r3, #8]
 800705e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007060:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	f383 8810 	msr	PRIMASK, r3
}
 8007068:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800706a:	f3ef 8310 	mrs	r3, PRIMASK
 800706e:	617b      	str	r3, [r7, #20]
  return(result);
 8007070:	697b      	ldr	r3, [r7, #20]

        /* Enable the UART Transmit Complete Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007072:	623b      	str	r3, [r7, #32]
 8007074:	2301      	movs	r3, #1
 8007076:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	f383 8810 	msr	PRIMASK, r3
}
 800707e:	46c0      	nop			; (mov r8, r8)
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	2140      	movs	r1, #64	; 0x40
 800708c:	430a      	orrs	r2, r1
 800708e:	601a      	str	r2, [r3, #0]
 8007090:	6a3b      	ldr	r3, [r7, #32]
 8007092:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007094:	69fb      	ldr	r3, [r7, #28]
 8007096:	f383 8810 	msr	PRIMASK, r3
}
 800709a:	46c0      	nop			; (mov r8, r8)

        break; /* force exit loop */
 800709c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800709e:	e029      	b.n	80070f4 <UART_TxISR_16BIT_FIFOEN+0xe8>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	69db      	ldr	r3, [r3, #28]
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	4013      	ands	r3, r2
 80070aa:	d018      	beq.n	80070de <UART_TxISR_16BIT_FIFOEN+0xd2>
        tmp = (const uint16_t *) huart->pTxBuffPtr;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070b0:	62bb      	str	r3, [r7, #40]	; 0x28
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80070b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070b4:	881b      	ldrh	r3, [r3, #0]
 80070b6:	001a      	movs	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	05d2      	lsls	r2, r2, #23
 80070be:	0dd2      	lsrs	r2, r2, #23
 80070c0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80070c6:	1c9a      	adds	r2, r3, #2
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2256      	movs	r2, #86	; 0x56
 80070d0:	5a9b      	ldrh	r3, [r3, r2]
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b299      	uxth	r1, r3
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2256      	movs	r2, #86	; 0x56
 80070dc:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80070de:	212e      	movs	r1, #46	; 0x2e
 80070e0:	187b      	adds	r3, r7, r1
 80070e2:	881a      	ldrh	r2, [r3, #0]
 80070e4:	187b      	adds	r3, r7, r1
 80070e6:	3a01      	subs	r2, #1
 80070e8:	801a      	strh	r2, [r3, #0]
 80070ea:	232e      	movs	r3, #46	; 0x2e
 80070ec:	18fb      	adds	r3, r7, r3
 80070ee:	881b      	ldrh	r3, [r3, #0]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d19b      	bne.n	800702c <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80070f4:	46c0      	nop			; (mov r8, r8)
 80070f6:	46bd      	mov	sp, r7
 80070f8:	b00c      	add	sp, #48	; 0x30
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	ff7fffff 	.word	0xff7fffff

08007100 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b090      	sub	sp, #64	; 0x40
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007108:	203e      	movs	r0, #62	; 0x3e
 800710a:	183b      	adds	r3, r7, r0
 800710c:	687a      	ldr	r2, [r7, #4]
 800710e:	2160      	movs	r1, #96	; 0x60
 8007110:	5a52      	ldrh	r2, [r2, r1]
 8007112:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	228c      	movs	r2, #140	; 0x8c
 8007118:	589b      	ldr	r3, [r3, r2]
 800711a:	2b22      	cmp	r3, #34	; 0x22
 800711c:	d000      	beq.n	8007120 <UART_RxISR_8BIT+0x20>
 800711e:	e09a      	b.n	8007256 <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007126:	213c      	movs	r1, #60	; 0x3c
 8007128:	187b      	adds	r3, r7, r1
 800712a:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800712c:	187b      	adds	r3, r7, r1
 800712e:	881b      	ldrh	r3, [r3, #0]
 8007130:	b2da      	uxtb	r2, r3
 8007132:	183b      	adds	r3, r7, r0
 8007134:	881b      	ldrh	r3, [r3, #0]
 8007136:	b2d9      	uxtb	r1, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800713c:	400a      	ands	r2, r1
 800713e:	b2d2      	uxtb	r2, r2
 8007140:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007146:	1c5a      	adds	r2, r3, #1
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	225e      	movs	r2, #94	; 0x5e
 8007150:	5a9b      	ldrh	r3, [r3, r2]
 8007152:	b29b      	uxth	r3, r3
 8007154:	3b01      	subs	r3, #1
 8007156:	b299      	uxth	r1, r3
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	225e      	movs	r2, #94	; 0x5e
 800715c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	225e      	movs	r2, #94	; 0x5e
 8007162:	5a9b      	ldrh	r3, [r3, r2]
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d000      	beq.n	800716c <UART_RxISR_8BIT+0x6c>
 800716a:	e07c      	b.n	8007266 <UART_RxISR_8BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800716c:	f3ef 8310 	mrs	r3, PRIMASK
 8007170:	61bb      	str	r3, [r7, #24]
  return(result);
 8007172:	69bb      	ldr	r3, [r7, #24]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007174:	63bb      	str	r3, [r7, #56]	; 0x38
 8007176:	2301      	movs	r3, #1
 8007178:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800717a:	69fb      	ldr	r3, [r7, #28]
 800717c:	f383 8810 	msr	PRIMASK, r3
}
 8007180:	46c0      	nop			; (mov r8, r8)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	4938      	ldr	r1, [pc, #224]	; (8007270 <UART_RxISR_8BIT+0x170>)
 800718e:	400a      	ands	r2, r1
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007194:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007196:	6a3b      	ldr	r3, [r7, #32]
 8007198:	f383 8810 	msr	PRIMASK, r3
}
 800719c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800719e:	f3ef 8310 	mrs	r3, PRIMASK
 80071a2:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80071a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80071a6:	637b      	str	r3, [r7, #52]	; 0x34
 80071a8:	2301      	movs	r3, #1
 80071aa:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ae:	f383 8810 	msr	PRIMASK, r3
}
 80071b2:	46c0      	nop			; (mov r8, r8)
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689a      	ldr	r2, [r3, #8]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2101      	movs	r1, #1
 80071c0:	438a      	bics	r2, r1
 80071c2:	609a      	str	r2, [r3, #8]
 80071c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071ca:	f383 8810 	msr	PRIMASK, r3
}
 80071ce:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	228c      	movs	r2, #140	; 0x8c
 80071d4:	2120      	movs	r1, #32
 80071d6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2200      	movs	r2, #0
 80071e2:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	d12f      	bne.n	800724c <UART_RxISR_8BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2200      	movs	r2, #0
 80071f0:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80071f2:	f3ef 8310 	mrs	r3, PRIMASK
 80071f6:	60fb      	str	r3, [r7, #12]
  return(result);
 80071f8:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071fa:	633b      	str	r3, [r7, #48]	; 0x30
 80071fc:	2301      	movs	r3, #1
 80071fe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	f383 8810 	msr	PRIMASK, r3
}
 8007206:	46c0      	nop			; (mov r8, r8)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	681a      	ldr	r2, [r3, #0]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2110      	movs	r1, #16
 8007214:	438a      	bics	r2, r1
 8007216:	601a      	str	r2, [r3, #0]
 8007218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800721c:	697b      	ldr	r3, [r7, #20]
 800721e:	f383 8810 	msr	PRIMASK, r3
}
 8007222:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	69db      	ldr	r3, [r3, #28]
 800722a:	2210      	movs	r2, #16
 800722c:	4013      	ands	r3, r2
 800722e:	2b10      	cmp	r3, #16
 8007230:	d103      	bne.n	800723a <UART_RxISR_8BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2210      	movs	r2, #16
 8007238:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	225c      	movs	r2, #92	; 0x5c
 800723e:	5a9a      	ldrh	r2, [r3, r2]
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	0011      	movs	r1, r2
 8007244:	0018      	movs	r0, r3
 8007246:	f7fe fe70 	bl	8005f2a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800724a:	e00c      	b.n	8007266 <UART_RxISR_8BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	0018      	movs	r0, r3
 8007250:	f7fa f888 	bl	8001364 <HAL_UART_RxCpltCallback>
}
 8007254:	e007      	b.n	8007266 <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	699a      	ldr	r2, [r3, #24]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	2108      	movs	r1, #8
 8007262:	430a      	orrs	r2, r1
 8007264:	619a      	str	r2, [r3, #24]
}
 8007266:	46c0      	nop			; (mov r8, r8)
 8007268:	46bd      	mov	sp, r7
 800726a:	b010      	add	sp, #64	; 0x40
 800726c:	bd80      	pop	{r7, pc}
 800726e:	46c0      	nop			; (mov r8, r8)
 8007270:	fffffedf 	.word	0xfffffedf

08007274 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b090      	sub	sp, #64	; 0x40
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800727c:	203e      	movs	r0, #62	; 0x3e
 800727e:	183b      	adds	r3, r7, r0
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	2160      	movs	r1, #96	; 0x60
 8007284:	5a52      	ldrh	r2, [r2, r1]
 8007286:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	228c      	movs	r2, #140	; 0x8c
 800728c:	589b      	ldr	r3, [r3, r2]
 800728e:	2b22      	cmp	r3, #34	; 0x22
 8007290:	d000      	beq.n	8007294 <UART_RxISR_16BIT+0x20>
 8007292:	e09a      	b.n	80073ca <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800729a:	213c      	movs	r1, #60	; 0x3c
 800729c:	187b      	adds	r3, r7, r1
 800729e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072a4:	63bb      	str	r3, [r7, #56]	; 0x38
    *tmp = (uint16_t)(uhdata & uhMask);
 80072a6:	187b      	adds	r3, r7, r1
 80072a8:	183a      	adds	r2, r7, r0
 80072aa:	881b      	ldrh	r3, [r3, #0]
 80072ac:	8812      	ldrh	r2, [r2, #0]
 80072ae:	4013      	ands	r3, r2
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072b4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072ba:	1c9a      	adds	r2, r3, #2
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	225e      	movs	r2, #94	; 0x5e
 80072c4:	5a9b      	ldrh	r3, [r3, r2]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b299      	uxth	r1, r3
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	225e      	movs	r2, #94	; 0x5e
 80072d0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	225e      	movs	r2, #94	; 0x5e
 80072d6:	5a9b      	ldrh	r3, [r3, r2]
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d000      	beq.n	80072e0 <UART_RxISR_16BIT+0x6c>
 80072de:	e07c      	b.n	80073da <UART_RxISR_16BIT+0x166>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072e0:	f3ef 8310 	mrs	r3, PRIMASK
 80072e4:	617b      	str	r3, [r7, #20]
  return(result);
 80072e6:	697b      	ldr	r3, [r7, #20]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80072e8:	637b      	str	r3, [r7, #52]	; 0x34
 80072ea:	2301      	movs	r3, #1
 80072ec:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072ee:	69bb      	ldr	r3, [r7, #24]
 80072f0:	f383 8810 	msr	PRIMASK, r3
}
 80072f4:	46c0      	nop			; (mov r8, r8)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	681a      	ldr	r2, [r3, #0]
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4938      	ldr	r1, [pc, #224]	; (80073e4 <UART_RxISR_16BIT+0x170>)
 8007302:	400a      	ands	r2, r1
 8007304:	601a      	str	r2, [r3, #0]
 8007306:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007308:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800730a:	69fb      	ldr	r3, [r7, #28]
 800730c:	f383 8810 	msr	PRIMASK, r3
}
 8007310:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007312:	f3ef 8310 	mrs	r3, PRIMASK
 8007316:	623b      	str	r3, [r7, #32]
  return(result);
 8007318:	6a3b      	ldr	r3, [r7, #32]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800731a:	633b      	str	r3, [r7, #48]	; 0x30
 800731c:	2301      	movs	r3, #1
 800731e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007322:	f383 8810 	msr	PRIMASK, r3
}
 8007326:	46c0      	nop			; (mov r8, r8)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	689a      	ldr	r2, [r3, #8]
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2101      	movs	r1, #1
 8007334:	438a      	bics	r2, r1
 8007336:	609a      	str	r2, [r3, #8]
 8007338:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800733c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800733e:	f383 8810 	msr	PRIMASK, r3
}
 8007342:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	228c      	movs	r2, #140	; 0x8c
 8007348:	2120      	movs	r1, #32
 800734a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800735c:	2b01      	cmp	r3, #1
 800735e:	d12f      	bne.n	80073c0 <UART_RxISR_16BIT+0x14c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2200      	movs	r2, #0
 8007364:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007366:	f3ef 8310 	mrs	r3, PRIMASK
 800736a:	60bb      	str	r3, [r7, #8]
  return(result);
 800736c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800736e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007370:	2301      	movs	r3, #1
 8007372:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f383 8810 	msr	PRIMASK, r3
}
 800737a:	46c0      	nop			; (mov r8, r8)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681a      	ldr	r2, [r3, #0]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	2110      	movs	r1, #16
 8007388:	438a      	bics	r2, r1
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800738e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	f383 8810 	msr	PRIMASK, r3
}
 8007396:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	69db      	ldr	r3, [r3, #28]
 800739e:	2210      	movs	r2, #16
 80073a0:	4013      	ands	r3, r2
 80073a2:	2b10      	cmp	r3, #16
 80073a4:	d103      	bne.n	80073ae <UART_RxISR_16BIT+0x13a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	2210      	movs	r2, #16
 80073ac:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	225c      	movs	r2, #92	; 0x5c
 80073b2:	5a9a      	ldrh	r2, [r3, r2]
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	0011      	movs	r1, r2
 80073b8:	0018      	movs	r0, r3
 80073ba:	f7fe fdb6 	bl	8005f2a <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80073be:	e00c      	b.n	80073da <UART_RxISR_16BIT+0x166>
        HAL_UART_RxCpltCallback(huart);
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	0018      	movs	r0, r3
 80073c4:	f7f9 ffce 	bl	8001364 <HAL_UART_RxCpltCallback>
}
 80073c8:	e007      	b.n	80073da <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	699a      	ldr	r2, [r3, #24]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	2108      	movs	r1, #8
 80073d6:	430a      	orrs	r2, r1
 80073d8:	619a      	str	r2, [r3, #24]
}
 80073da:	46c0      	nop			; (mov r8, r8)
 80073dc:	46bd      	mov	sp, r7
 80073de:	b010      	add	sp, #64	; 0x40
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	fffffedf 	.word	0xfffffedf

080073e8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b09c      	sub	sp, #112	; 0x70
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073f0:	236a      	movs	r3, #106	; 0x6a
 80073f2:	18fb      	adds	r3, r7, r3
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	2160      	movs	r1, #96	; 0x60
 80073f8:	5a52      	ldrh	r2, [r2, r1]
 80073fa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	69db      	ldr	r3, [r3, #28]
 8007402:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	663b      	str	r3, [r7, #96]	; 0x60

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	228c      	movs	r2, #140	; 0x8c
 8007418:	589b      	ldr	r3, [r3, r2]
 800741a:	2b22      	cmp	r3, #34	; 0x22
 800741c:	d000      	beq.n	8007420 <UART_RxISR_8BIT_FIFOEN+0x38>
 800741e:	e144      	b.n	80076aa <UART_RxISR_8BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007420:	235e      	movs	r3, #94	; 0x5e
 8007422:	18fb      	adds	r3, r7, r3
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	2168      	movs	r1, #104	; 0x68
 8007428:	5a52      	ldrh	r2, [r2, r1]
 800742a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800742c:	e0eb      	b.n	8007606 <UART_RxISR_8BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007434:	215c      	movs	r1, #92	; 0x5c
 8007436:	187b      	adds	r3, r7, r1
 8007438:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800743a:	187b      	adds	r3, r7, r1
 800743c:	881b      	ldrh	r3, [r3, #0]
 800743e:	b2da      	uxtb	r2, r3
 8007440:	236a      	movs	r3, #106	; 0x6a
 8007442:	18fb      	adds	r3, r7, r3
 8007444:	881b      	ldrh	r3, [r3, #0]
 8007446:	b2d9      	uxtb	r1, r3
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800744c:	400a      	ands	r2, r1
 800744e:	b2d2      	uxtb	r2, r2
 8007450:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007456:	1c5a      	adds	r2, r3, #1
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	225e      	movs	r2, #94	; 0x5e
 8007460:	5a9b      	ldrh	r3, [r3, r2]
 8007462:	b29b      	uxth	r3, r3
 8007464:	3b01      	subs	r3, #1
 8007466:	b299      	uxth	r1, r3
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	225e      	movs	r2, #94	; 0x5e
 800746c:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	69db      	ldr	r3, [r3, #28]
 8007474:	66fb      	str	r3, [r7, #108]	; 0x6c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007478:	2207      	movs	r2, #7
 800747a:	4013      	ands	r3, r2
 800747c:	d049      	beq.n	8007512 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800747e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007480:	2201      	movs	r2, #1
 8007482:	4013      	ands	r3, r2
 8007484:	d010      	beq.n	80074a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
 8007486:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8007488:	2380      	movs	r3, #128	; 0x80
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4013      	ands	r3, r2
 800748e:	d00b      	beq.n	80074a8 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	2201      	movs	r2, #1
 8007496:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2290      	movs	r2, #144	; 0x90
 800749c:	589b      	ldr	r3, [r3, r2]
 800749e:	2201      	movs	r2, #1
 80074a0:	431a      	orrs	r2, r3
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2190      	movs	r1, #144	; 0x90
 80074a6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074aa:	2202      	movs	r2, #2
 80074ac:	4013      	ands	r3, r2
 80074ae:	d00f      	beq.n	80074d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80074b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074b2:	2201      	movs	r2, #1
 80074b4:	4013      	ands	r3, r2
 80074b6:	d00b      	beq.n	80074d0 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	2202      	movs	r2, #2
 80074be:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2290      	movs	r2, #144	; 0x90
 80074c4:	589b      	ldr	r3, [r3, r2]
 80074c6:	2204      	movs	r2, #4
 80074c8:	431a      	orrs	r2, r3
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2190      	movs	r1, #144	; 0x90
 80074ce:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80074d2:	2204      	movs	r2, #4
 80074d4:	4013      	ands	r3, r2
 80074d6:	d00f      	beq.n	80074f8 <UART_RxISR_8BIT_FIFOEN+0x110>
 80074d8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074da:	2201      	movs	r2, #1
 80074dc:	4013      	ands	r3, r2
 80074de:	d00b      	beq.n	80074f8 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	2204      	movs	r2, #4
 80074e6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2290      	movs	r2, #144	; 0x90
 80074ec:	589b      	ldr	r3, [r3, r2]
 80074ee:	2202      	movs	r2, #2
 80074f0:	431a      	orrs	r2, r3
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2190      	movs	r1, #144	; 0x90
 80074f6:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2290      	movs	r2, #144	; 0x90
 80074fc:	589b      	ldr	r3, [r3, r2]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d007      	beq.n	8007512 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	0018      	movs	r0, r3
 8007506:	f7fe fd08 	bl	8005f1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2290      	movs	r2, #144	; 0x90
 800750e:	2100      	movs	r1, #0
 8007510:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	225e      	movs	r2, #94	; 0x5e
 8007516:	5a9b      	ldrh	r3, [r3, r2]
 8007518:	b29b      	uxth	r3, r3
 800751a:	2b00      	cmp	r3, #0
 800751c:	d173      	bne.n	8007606 <UART_RxISR_8BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800751e:	f3ef 8310 	mrs	r3, PRIMASK
 8007522:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8007524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007526:	65bb      	str	r3, [r7, #88]	; 0x58
 8007528:	2301      	movs	r3, #1
 800752a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800752e:	f383 8810 	msr	PRIMASK, r3
}
 8007532:	46c0      	nop			; (mov r8, r8)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	681a      	ldr	r2, [r3, #0]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4961      	ldr	r1, [pc, #388]	; (80076c4 <UART_RxISR_8BIT_FIFOEN+0x2dc>)
 8007540:	400a      	ands	r2, r1
 8007542:	601a      	str	r2, [r3, #0]
 8007544:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007546:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800754a:	f383 8810 	msr	PRIMASK, r3
}
 800754e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007550:	f3ef 8310 	mrs	r3, PRIMASK
 8007554:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8007556:	6bbb      	ldr	r3, [r7, #56]	; 0x38

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007558:	657b      	str	r3, [r7, #84]	; 0x54
 800755a:	2301      	movs	r3, #1
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800755e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007560:	f383 8810 	msr	PRIMASK, r3
}
 8007564:	46c0      	nop			; (mov r8, r8)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	689a      	ldr	r2, [r3, #8]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4955      	ldr	r1, [pc, #340]	; (80076c8 <UART_RxISR_8BIT_FIFOEN+0x2e0>)
 8007572:	400a      	ands	r2, r1
 8007574:	609a      	str	r2, [r3, #8]
 8007576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007578:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800757a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800757c:	f383 8810 	msr	PRIMASK, r3
}
 8007580:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	228c      	movs	r2, #140	; 0x8c
 8007586:	2120      	movs	r1, #32
 8007588:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	2200      	movs	r2, #0
 8007594:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800759a:	2b01      	cmp	r3, #1
 800759c:	d12f      	bne.n	80075fe <UART_RxISR_8BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	2200      	movs	r2, #0
 80075a2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075a4:	f3ef 8310 	mrs	r3, PRIMASK
 80075a8:	623b      	str	r3, [r7, #32]
  return(result);
 80075aa:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075ac:	653b      	str	r3, [r7, #80]	; 0x50
 80075ae:	2301      	movs	r3, #1
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b4:	f383 8810 	msr	PRIMASK, r3
}
 80075b8:	46c0      	nop			; (mov r8, r8)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2110      	movs	r1, #16
 80075c6:	438a      	bics	r2, r1
 80075c8:	601a      	str	r2, [r3, #0]
 80075ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075cc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80075d0:	f383 8810 	msr	PRIMASK, r3
}
 80075d4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	69db      	ldr	r3, [r3, #28]
 80075dc:	2210      	movs	r2, #16
 80075de:	4013      	ands	r3, r2
 80075e0:	2b10      	cmp	r3, #16
 80075e2:	d103      	bne.n	80075ec <UART_RxISR_8BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	2210      	movs	r2, #16
 80075ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	225c      	movs	r2, #92	; 0x5c
 80075f0:	5a9a      	ldrh	r2, [r3, r2]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	0011      	movs	r1, r2
 80075f6:	0018      	movs	r0, r3
 80075f8:	f7fe fc97 	bl	8005f2a <HAL_UARTEx_RxEventCallback>
 80075fc:	e003      	b.n	8007606 <UART_RxISR_8BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	0018      	movs	r0, r3
 8007602:	f7f9 feaf 	bl	8001364 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007606:	235e      	movs	r3, #94	; 0x5e
 8007608:	18fb      	adds	r3, r7, r3
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d004      	beq.n	800761a <UART_RxISR_8BIT_FIFOEN+0x232>
 8007610:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007612:	2220      	movs	r2, #32
 8007614:	4013      	ands	r3, r2
 8007616:	d000      	beq.n	800761a <UART_RxISR_8BIT_FIFOEN+0x232>
 8007618:	e709      	b.n	800742e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800761a:	204e      	movs	r0, #78	; 0x4e
 800761c:	183b      	adds	r3, r7, r0
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	215e      	movs	r1, #94	; 0x5e
 8007622:	5a52      	ldrh	r2, [r2, r1]
 8007624:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007626:	0001      	movs	r1, r0
 8007628:	187b      	adds	r3, r7, r1
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d044      	beq.n	80076ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2268      	movs	r2, #104	; 0x68
 8007634:	5a9b      	ldrh	r3, [r3, r2]
 8007636:	187a      	adds	r2, r7, r1
 8007638:	8812      	ldrh	r2, [r2, #0]
 800763a:	429a      	cmp	r2, r3
 800763c:	d23d      	bcs.n	80076ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800763e:	f3ef 8310 	mrs	r3, PRIMASK
 8007642:	60bb      	str	r3, [r7, #8]
  return(result);
 8007644:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007646:	64bb      	str	r3, [r7, #72]	; 0x48
 8007648:	2301      	movs	r3, #1
 800764a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f383 8810 	msr	PRIMASK, r3
}
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	491b      	ldr	r1, [pc, #108]	; (80076cc <UART_RxISR_8BIT_FIFOEN+0x2e4>)
 8007660:	400a      	ands	r2, r1
 8007662:	609a      	str	r2, [r3, #8]
 8007664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007666:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007668:	693b      	ldr	r3, [r7, #16]
 800766a:	f383 8810 	msr	PRIMASK, r3
}
 800766e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a17      	ldr	r2, [pc, #92]	; (80076d0 <UART_RxISR_8BIT_FIFOEN+0x2e8>)
 8007674:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007676:	f3ef 8310 	mrs	r3, PRIMASK
 800767a:	617b      	str	r3, [r7, #20]
  return(result);
 800767c:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800767e:	647b      	str	r3, [r7, #68]	; 0x44
 8007680:	2301      	movs	r3, #1
 8007682:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007684:	69bb      	ldr	r3, [r7, #24]
 8007686:	f383 8810 	msr	PRIMASK, r3
}
 800768a:	46c0      	nop			; (mov r8, r8)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2120      	movs	r1, #32
 8007698:	430a      	orrs	r2, r1
 800769a:	601a      	str	r2, [r3, #0]
 800769c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800769e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076a0:	69fb      	ldr	r3, [r7, #28]
 80076a2:	f383 8810 	msr	PRIMASK, r3
}
 80076a6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076a8:	e007      	b.n	80076ba <UART_RxISR_8BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	699a      	ldr	r2, [r3, #24]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2108      	movs	r1, #8
 80076b6:	430a      	orrs	r2, r1
 80076b8:	619a      	str	r2, [r3, #24]
}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	46bd      	mov	sp, r7
 80076be:	b01c      	add	sp, #112	; 0x70
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	46c0      	nop			; (mov r8, r8)
 80076c4:	fffffeff 	.word	0xfffffeff
 80076c8:	effffffe 	.word	0xeffffffe
 80076cc:	efffffff 	.word	0xefffffff
 80076d0:	08007101 	.word	0x08007101

080076d4 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076d4:	b580      	push	{r7, lr}
 80076d6:	b09e      	sub	sp, #120	; 0x78
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80076dc:	2372      	movs	r3, #114	; 0x72
 80076de:	18fb      	adds	r3, r7, r3
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	2160      	movs	r1, #96	; 0x60
 80076e4:	5a52      	ldrh	r2, [r2, r1]
 80076e6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	69db      	ldr	r3, [r3, #28]
 80076ee:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	66fb      	str	r3, [r7, #108]	; 0x6c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	689b      	ldr	r3, [r3, #8]
 80076fe:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	228c      	movs	r2, #140	; 0x8c
 8007704:	589b      	ldr	r3, [r3, r2]
 8007706:	2b22      	cmp	r3, #34	; 0x22
 8007708:	d000      	beq.n	800770c <UART_RxISR_16BIT_FIFOEN+0x38>
 800770a:	e144      	b.n	8007996 <UART_RxISR_16BIT_FIFOEN+0x2c2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800770c:	2366      	movs	r3, #102	; 0x66
 800770e:	18fb      	adds	r3, r7, r3
 8007710:	687a      	ldr	r2, [r7, #4]
 8007712:	2168      	movs	r1, #104	; 0x68
 8007714:	5a52      	ldrh	r2, [r2, r1]
 8007716:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007718:	e0eb      	b.n	80078f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007720:	2164      	movs	r1, #100	; 0x64
 8007722:	187b      	adds	r3, r7, r1
 8007724:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800772a:	663b      	str	r3, [r7, #96]	; 0x60
      *tmp = (uint16_t)(uhdata & uhMask);
 800772c:	187b      	adds	r3, r7, r1
 800772e:	2272      	movs	r2, #114	; 0x72
 8007730:	18ba      	adds	r2, r7, r2
 8007732:	881b      	ldrh	r3, [r3, #0]
 8007734:	8812      	ldrh	r2, [r2, #0]
 8007736:	4013      	ands	r3, r2
 8007738:	b29a      	uxth	r2, r3
 800773a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800773c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007742:	1c9a      	adds	r2, r3, #2
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	225e      	movs	r2, #94	; 0x5e
 800774c:	5a9b      	ldrh	r3, [r3, r2]
 800774e:	b29b      	uxth	r3, r3
 8007750:	3b01      	subs	r3, #1
 8007752:	b299      	uxth	r1, r3
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	225e      	movs	r2, #94	; 0x5e
 8007758:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	69db      	ldr	r3, [r3, #28]
 8007760:	677b      	str	r3, [r7, #116]	; 0x74

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007762:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007764:	2207      	movs	r2, #7
 8007766:	4013      	ands	r3, r2
 8007768:	d049      	beq.n	80077fe <UART_RxISR_16BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800776a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800776c:	2201      	movs	r2, #1
 800776e:	4013      	ands	r3, r2
 8007770:	d010      	beq.n	8007794 <UART_RxISR_16BIT_FIFOEN+0xc0>
 8007772:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007774:	2380      	movs	r3, #128	; 0x80
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4013      	ands	r3, r2
 800777a:	d00b      	beq.n	8007794 <UART_RxISR_16BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	2201      	movs	r2, #1
 8007782:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2290      	movs	r2, #144	; 0x90
 8007788:	589b      	ldr	r3, [r3, r2]
 800778a:	2201      	movs	r2, #1
 800778c:	431a      	orrs	r2, r3
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2190      	movs	r1, #144	; 0x90
 8007792:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007794:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007796:	2202      	movs	r2, #2
 8007798:	4013      	ands	r3, r2
 800779a:	d00f      	beq.n	80077bc <UART_RxISR_16BIT_FIFOEN+0xe8>
 800779c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800779e:	2201      	movs	r2, #1
 80077a0:	4013      	ands	r3, r2
 80077a2:	d00b      	beq.n	80077bc <UART_RxISR_16BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	2202      	movs	r2, #2
 80077aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2290      	movs	r2, #144	; 0x90
 80077b0:	589b      	ldr	r3, [r3, r2]
 80077b2:	2204      	movs	r2, #4
 80077b4:	431a      	orrs	r2, r3
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2190      	movs	r1, #144	; 0x90
 80077ba:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80077be:	2204      	movs	r2, #4
 80077c0:	4013      	ands	r3, r2
 80077c2:	d00f      	beq.n	80077e4 <UART_RxISR_16BIT_FIFOEN+0x110>
 80077c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80077c6:	2201      	movs	r2, #1
 80077c8:	4013      	ands	r3, r2
 80077ca:	d00b      	beq.n	80077e4 <UART_RxISR_16BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2204      	movs	r2, #4
 80077d2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2290      	movs	r2, #144	; 0x90
 80077d8:	589b      	ldr	r3, [r3, r2]
 80077da:	2202      	movs	r2, #2
 80077dc:	431a      	orrs	r2, r3
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2190      	movs	r1, #144	; 0x90
 80077e2:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2290      	movs	r2, #144	; 0x90
 80077e8:	589b      	ldr	r3, [r3, r2]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d007      	beq.n	80077fe <UART_RxISR_16BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	0018      	movs	r0, r3
 80077f2:	f7fe fb92 	bl	8005f1a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	2290      	movs	r2, #144	; 0x90
 80077fa:	2100      	movs	r1, #0
 80077fc:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	225e      	movs	r2, #94	; 0x5e
 8007802:	5a9b      	ldrh	r3, [r3, r2]
 8007804:	b29b      	uxth	r3, r3
 8007806:	2b00      	cmp	r3, #0
 8007808:	d173      	bne.n	80078f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800780a:	f3ef 8310 	mrs	r3, PRIMASK
 800780e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007812:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007814:	2301      	movs	r3, #1
 8007816:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781a:	f383 8810 	msr	PRIMASK, r3
}
 800781e:	46c0      	nop			; (mov r8, r8)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	4961      	ldr	r1, [pc, #388]	; (80079b0 <UART_RxISR_16BIT_FIFOEN+0x2dc>)
 800782c:	400a      	ands	r2, r1
 800782e:	601a      	str	r2, [r3, #0]
 8007830:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007832:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	f383 8810 	msr	PRIMASK, r3
}
 800783a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800783c:	f3ef 8310 	mrs	r3, PRIMASK
 8007840:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007842:	6bfb      	ldr	r3, [r7, #60]	; 0x3c

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007844:	65bb      	str	r3, [r7, #88]	; 0x58
 8007846:	2301      	movs	r3, #1
 8007848:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800784a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800784c:	f383 8810 	msr	PRIMASK, r3
}
 8007850:	46c0      	nop			; (mov r8, r8)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	689a      	ldr	r2, [r3, #8]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	4955      	ldr	r1, [pc, #340]	; (80079b4 <UART_RxISR_16BIT_FIFOEN+0x2e0>)
 800785e:	400a      	ands	r2, r1
 8007860:	609a      	str	r2, [r3, #8]
 8007862:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007864:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007866:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007868:	f383 8810 	msr	PRIMASK, r3
}
 800786c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	228c      	movs	r2, #140	; 0x8c
 8007872:	2120      	movs	r1, #32
 8007874:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2200      	movs	r2, #0
 800787a:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2200      	movs	r2, #0
 8007880:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007886:	2b01      	cmp	r3, #1
 8007888:	d12f      	bne.n	80078ea <UART_RxISR_16BIT_FIFOEN+0x216>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007890:	f3ef 8310 	mrs	r3, PRIMASK
 8007894:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007896:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007898:	657b      	str	r3, [r7, #84]	; 0x54
 800789a:	2301      	movs	r3, #1
 800789c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800789e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078a0:	f383 8810 	msr	PRIMASK, r3
}
 80078a4:	46c0      	nop			; (mov r8, r8)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	2110      	movs	r1, #16
 80078b2:	438a      	bics	r2, r1
 80078b4:	601a      	str	r2, [r3, #0]
 80078b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80078b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078bc:	f383 8810 	msr	PRIMASK, r3
}
 80078c0:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	69db      	ldr	r3, [r3, #28]
 80078c8:	2210      	movs	r2, #16
 80078ca:	4013      	ands	r3, r2
 80078cc:	2b10      	cmp	r3, #16
 80078ce:	d103      	bne.n	80078d8 <UART_RxISR_16BIT_FIFOEN+0x204>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	2210      	movs	r2, #16
 80078d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	225c      	movs	r2, #92	; 0x5c
 80078dc:	5a9a      	ldrh	r2, [r3, r2]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	0011      	movs	r1, r2
 80078e2:	0018      	movs	r0, r3
 80078e4:	f7fe fb21 	bl	8005f2a <HAL_UARTEx_RxEventCallback>
 80078e8:	e003      	b.n	80078f2 <UART_RxISR_16BIT_FIFOEN+0x21e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	0018      	movs	r0, r3
 80078ee:	f7f9 fd39 	bl	8001364 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80078f2:	2366      	movs	r3, #102	; 0x66
 80078f4:	18fb      	adds	r3, r7, r3
 80078f6:	881b      	ldrh	r3, [r3, #0]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d004      	beq.n	8007906 <UART_RxISR_16BIT_FIFOEN+0x232>
 80078fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078fe:	2220      	movs	r2, #32
 8007900:	4013      	ands	r3, r2
 8007902:	d000      	beq.n	8007906 <UART_RxISR_16BIT_FIFOEN+0x232>
 8007904:	e709      	b.n	800771a <UART_RxISR_16BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007906:	2052      	movs	r0, #82	; 0x52
 8007908:	183b      	adds	r3, r7, r0
 800790a:	687a      	ldr	r2, [r7, #4]
 800790c:	215e      	movs	r1, #94	; 0x5e
 800790e:	5a52      	ldrh	r2, [r2, r1]
 8007910:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007912:	0001      	movs	r1, r0
 8007914:	187b      	adds	r3, r7, r1
 8007916:	881b      	ldrh	r3, [r3, #0]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d044      	beq.n	80079a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2268      	movs	r2, #104	; 0x68
 8007920:	5a9b      	ldrh	r3, [r3, r2]
 8007922:	187a      	adds	r2, r7, r1
 8007924:	8812      	ldrh	r2, [r2, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d23d      	bcs.n	80079a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792a:	f3ef 8310 	mrs	r3, PRIMASK
 800792e:	60fb      	str	r3, [r7, #12]
  return(result);
 8007930:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007932:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007934:	2301      	movs	r3, #1
 8007936:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007938:	693b      	ldr	r3, [r7, #16]
 800793a:	f383 8810 	msr	PRIMASK, r3
}
 800793e:	46c0      	nop			; (mov r8, r8)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	689a      	ldr	r2, [r3, #8]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	491b      	ldr	r1, [pc, #108]	; (80079b8 <UART_RxISR_16BIT_FIFOEN+0x2e4>)
 800794c:	400a      	ands	r2, r1
 800794e:	609a      	str	r2, [r3, #8]
 8007950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007952:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007954:	697b      	ldr	r3, [r7, #20]
 8007956:	f383 8810 	msr	PRIMASK, r3
}
 800795a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4a17      	ldr	r2, [pc, #92]	; (80079bc <UART_RxISR_16BIT_FIFOEN+0x2e8>)
 8007960:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007962:	f3ef 8310 	mrs	r3, PRIMASK
 8007966:	61bb      	str	r3, [r7, #24]
  return(result);
 8007968:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800796a:	64bb      	str	r3, [r7, #72]	; 0x48
 800796c:	2301      	movs	r3, #1
 800796e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007970:	69fb      	ldr	r3, [r7, #28]
 8007972:	f383 8810 	msr	PRIMASK, r3
}
 8007976:	46c0      	nop			; (mov r8, r8)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	681a      	ldr	r2, [r3, #0]
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	2120      	movs	r1, #32
 8007984:	430a      	orrs	r2, r1
 8007986:	601a      	str	r2, [r3, #0]
 8007988:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800798a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	f383 8810 	msr	PRIMASK, r3
}
 8007992:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007994:	e007      	b.n	80079a6 <UART_RxISR_16BIT_FIFOEN+0x2d2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	699a      	ldr	r2, [r3, #24]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	2108      	movs	r1, #8
 80079a2:	430a      	orrs	r2, r1
 80079a4:	619a      	str	r2, [r3, #24]
}
 80079a6:	46c0      	nop			; (mov r8, r8)
 80079a8:	46bd      	mov	sp, r7
 80079aa:	b01e      	add	sp, #120	; 0x78
 80079ac:	bd80      	pop	{r7, pc}
 80079ae:	46c0      	nop			; (mov r8, r8)
 80079b0:	fffffeff 	.word	0xfffffeff
 80079b4:	effffffe 	.word	0xeffffffe
 80079b8:	efffffff 	.word	0xefffffff
 80079bc:	08007275 	.word	0x08007275

080079c0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b084      	sub	sp, #16
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2284      	movs	r2, #132	; 0x84
 80079cc:	5c9b      	ldrb	r3, [r3, r2]
 80079ce:	2b01      	cmp	r3, #1
 80079d0:	d101      	bne.n	80079d6 <HAL_UARTEx_DisableFifoMode+0x16>
 80079d2:	2302      	movs	r3, #2
 80079d4:	e027      	b.n	8007a26 <HAL_UARTEx_DisableFifoMode+0x66>
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2284      	movs	r2, #132	; 0x84
 80079da:	2101      	movs	r1, #1
 80079dc:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	2288      	movs	r2, #136	; 0x88
 80079e2:	2124      	movs	r1, #36	; 0x24
 80079e4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	681a      	ldr	r2, [r3, #0]
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2101      	movs	r1, #1
 80079fa:	438a      	bics	r2, r1
 80079fc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	4a0b      	ldr	r2, [pc, #44]	; (8007a30 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007a02:	4013      	ands	r3, r2
 8007a04:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68fa      	ldr	r2, [r7, #12]
 8007a12:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2288      	movs	r2, #136	; 0x88
 8007a18:	2120      	movs	r1, #32
 8007a1a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2284      	movs	r2, #132	; 0x84
 8007a20:	2100      	movs	r1, #0
 8007a22:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	0018      	movs	r0, r3
 8007a28:	46bd      	mov	sp, r7
 8007a2a:	b004      	add	sp, #16
 8007a2c:	bd80      	pop	{r7, pc}
 8007a2e:	46c0      	nop			; (mov r8, r8)
 8007a30:	dfffffff 	.word	0xdfffffff

08007a34 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b084      	sub	sp, #16
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
 8007a3c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2284      	movs	r2, #132	; 0x84
 8007a42:	5c9b      	ldrb	r3, [r3, r2]
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	d101      	bne.n	8007a4c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007a48:	2302      	movs	r3, #2
 8007a4a:	e02e      	b.n	8007aaa <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2284      	movs	r2, #132	; 0x84
 8007a50:	2101      	movs	r1, #1
 8007a52:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2288      	movs	r2, #136	; 0x88
 8007a58:	2124      	movs	r1, #36	; 0x24
 8007a5a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	681a      	ldr	r2, [r3, #0]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	2101      	movs	r1, #1
 8007a70:	438a      	bics	r2, r1
 8007a72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	689b      	ldr	r3, [r3, #8]
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	08d9      	lsrs	r1, r3, #3
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	683a      	ldr	r2, [r7, #0]
 8007a84:	430a      	orrs	r2, r1
 8007a86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	0018      	movs	r0, r3
 8007a8c:	f000 f854 	bl	8007b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	68fa      	ldr	r2, [r7, #12]
 8007a96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2288      	movs	r2, #136	; 0x88
 8007a9c:	2120      	movs	r1, #32
 8007a9e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2284      	movs	r2, #132	; 0x84
 8007aa4:	2100      	movs	r1, #0
 8007aa6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007aa8:	2300      	movs	r3, #0
}
 8007aaa:	0018      	movs	r0, r3
 8007aac:	46bd      	mov	sp, r7
 8007aae:	b004      	add	sp, #16
 8007ab0:	bd80      	pop	{r7, pc}
	...

08007ab4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
 8007abc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2284      	movs	r2, #132	; 0x84
 8007ac2:	5c9b      	ldrb	r3, [r3, r2]
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	d101      	bne.n	8007acc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007ac8:	2302      	movs	r3, #2
 8007aca:	e02f      	b.n	8007b2c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2284      	movs	r2, #132	; 0x84
 8007ad0:	2101      	movs	r1, #1
 8007ad2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2288      	movs	r2, #136	; 0x88
 8007ad8:	2124      	movs	r1, #36	; 0x24
 8007ada:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	2101      	movs	r1, #1
 8007af0:	438a      	bics	r2, r1
 8007af2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	4a0e      	ldr	r2, [pc, #56]	; (8007b34 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007afc:	4013      	ands	r3, r2
 8007afe:	0019      	movs	r1, r3
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	683a      	ldr	r2, [r7, #0]
 8007b06:	430a      	orrs	r2, r1
 8007b08:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	f000 f813 	bl	8007b38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68fa      	ldr	r2, [r7, #12]
 8007b18:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2288      	movs	r2, #136	; 0x88
 8007b1e:	2120      	movs	r1, #32
 8007b20:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2284      	movs	r2, #132	; 0x84
 8007b26:	2100      	movs	r1, #0
 8007b28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	0018      	movs	r0, r3
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	b004      	add	sp, #16
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	f1ffffff 	.word	0xf1ffffff

08007b38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d108      	bne.n	8007b5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	226a      	movs	r2, #106	; 0x6a
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2268      	movs	r2, #104	; 0x68
 8007b54:	2101      	movs	r1, #1
 8007b56:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007b58:	e043      	b.n	8007be2 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007b5a:	260f      	movs	r6, #15
 8007b5c:	19bb      	adds	r3, r7, r6
 8007b5e:	2208      	movs	r2, #8
 8007b60:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007b62:	200e      	movs	r0, #14
 8007b64:	183b      	adds	r3, r7, r0
 8007b66:	2208      	movs	r2, #8
 8007b68:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	689b      	ldr	r3, [r3, #8]
 8007b70:	0e5b      	lsrs	r3, r3, #25
 8007b72:	b2da      	uxtb	r2, r3
 8007b74:	240d      	movs	r4, #13
 8007b76:	193b      	adds	r3, r7, r4
 8007b78:	2107      	movs	r1, #7
 8007b7a:	400a      	ands	r2, r1
 8007b7c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	0f5b      	lsrs	r3, r3, #29
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	250c      	movs	r5, #12
 8007b8a:	197b      	adds	r3, r7, r5
 8007b8c:	2107      	movs	r1, #7
 8007b8e:	400a      	ands	r2, r1
 8007b90:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007b92:	183b      	adds	r3, r7, r0
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	197a      	adds	r2, r7, r5
 8007b98:	7812      	ldrb	r2, [r2, #0]
 8007b9a:	4914      	ldr	r1, [pc, #80]	; (8007bec <UARTEx_SetNbDataToProcess+0xb4>)
 8007b9c:	5c8a      	ldrb	r2, [r1, r2]
 8007b9e:	435a      	muls	r2, r3
 8007ba0:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007ba2:	197b      	adds	r3, r7, r5
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	4a12      	ldr	r2, [pc, #72]	; (8007bf0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007ba8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007baa:	0019      	movs	r1, r3
 8007bac:	f7f8 fb40 	bl	8000230 <__divsi3>
 8007bb0:	0003      	movs	r3, r0
 8007bb2:	b299      	uxth	r1, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	226a      	movs	r2, #106	; 0x6a
 8007bb8:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bba:	19bb      	adds	r3, r7, r6
 8007bbc:	781b      	ldrb	r3, [r3, #0]
 8007bbe:	193a      	adds	r2, r7, r4
 8007bc0:	7812      	ldrb	r2, [r2, #0]
 8007bc2:	490a      	ldr	r1, [pc, #40]	; (8007bec <UARTEx_SetNbDataToProcess+0xb4>)
 8007bc4:	5c8a      	ldrb	r2, [r1, r2]
 8007bc6:	435a      	muls	r2, r3
 8007bc8:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007bca:	193b      	adds	r3, r7, r4
 8007bcc:	781b      	ldrb	r3, [r3, #0]
 8007bce:	4a08      	ldr	r2, [pc, #32]	; (8007bf0 <UARTEx_SetNbDataToProcess+0xb8>)
 8007bd0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bd2:	0019      	movs	r1, r3
 8007bd4:	f7f8 fb2c 	bl	8000230 <__divsi3>
 8007bd8:	0003      	movs	r3, r0
 8007bda:	b299      	uxth	r1, r3
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2268      	movs	r2, #104	; 0x68
 8007be0:	5299      	strh	r1, [r3, r2]
}
 8007be2:	46c0      	nop			; (mov r8, r8)
 8007be4:	46bd      	mov	sp, r7
 8007be6:	b005      	add	sp, #20
 8007be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bea:	46c0      	nop			; (mov r8, r8)
 8007bec:	0800b280 	.word	0x0800b280
 8007bf0:	0800b288 	.word	0x0800b288

08007bf4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	0002      	movs	r2, r0
 8007bfc:	1dbb      	adds	r3, r7, #6
 8007bfe:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007c00:	2300      	movs	r3, #0
 8007c02:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007c04:	1dbb      	adds	r3, r7, #6
 8007c06:	2200      	movs	r2, #0
 8007c08:	5e9b      	ldrsh	r3, [r3, r2]
 8007c0a:	2b84      	cmp	r3, #132	; 0x84
 8007c0c:	d006      	beq.n	8007c1c <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8007c0e:	1dbb      	adds	r3, r7, #6
 8007c10:	2200      	movs	r2, #0
 8007c12:	5e9a      	ldrsh	r2, [r3, r2]
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	18d3      	adds	r3, r2, r3
 8007c18:	3303      	adds	r3, #3
 8007c1a:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007c1c:	68fb      	ldr	r3, [r7, #12]
}
 8007c1e:	0018      	movs	r0, r3
 8007c20:	46bd      	mov	sp, r7
 8007c22:	b004      	add	sp, #16
 8007c24:	bd80      	pop	{r7, pc}

08007c26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007c26:	b580      	push	{r7, lr}
 8007c28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007c2a:	f000 fcab 	bl	8008584 <vTaskStartScheduler>
  
  return osOK;
 8007c2e:	2300      	movs	r3, #0
}
 8007c30:	0018      	movs	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007c36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c38:	b087      	sub	sp, #28
 8007c3a:	af02      	add	r7, sp, #8
 8007c3c:	6078      	str	r0, [r7, #4]
 8007c3e:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	685c      	ldr	r4, [r3, #4]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c4c:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2208      	movs	r2, #8
 8007c52:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007c54:	0018      	movs	r0, r3
 8007c56:	f7ff ffcd 	bl	8007bf4 <makeFreeRtosPriority>
 8007c5a:	0001      	movs	r1, r0
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	230c      	movs	r3, #12
 8007c60:	18fb      	adds	r3, r7, r3
 8007c62:	9301      	str	r3, [sp, #4]
 8007c64:	9100      	str	r1, [sp, #0]
 8007c66:	0013      	movs	r3, r2
 8007c68:	0032      	movs	r2, r6
 8007c6a:	0029      	movs	r1, r5
 8007c6c:	0020      	movs	r0, r4
 8007c6e:	f000 fb34 	bl	80082da <xTaskCreate>
 8007c72:	0003      	movs	r3, r0
 8007c74:	2b01      	cmp	r3, #1
 8007c76:	d001      	beq.n	8007c7c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8007c78:	2300      	movs	r3, #0
 8007c7a:	e000      	b.n	8007c7e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
}
 8007c7e:	0018      	movs	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	b005      	add	sp, #20
 8007c84:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007c86 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007c86:	b580      	push	{r7, lr}
 8007c88:	b084      	sub	sp, #16
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d001      	beq.n	8007c9c <osDelay+0x16>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	e000      	b.n	8007c9e <osDelay+0x18>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	0018      	movs	r0, r3
 8007ca0:	f000 fc4a 	bl	8008538 <vTaskDelay>
  
  return osOK;
 8007ca4:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007ca6:	0018      	movs	r0, r3
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	b004      	add	sp, #16
 8007cac:	bd80      	pop	{r7, pc}

08007cae <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007cae:	b580      	push	{r7, lr}
 8007cb0:	b082      	sub	sp, #8
 8007cb2:	af00      	add	r7, sp, #0
 8007cb4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	3308      	adds	r3, #8
 8007cba:	001a      	movs	r2, r3
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	4252      	negs	r2, r2
 8007cc6:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	3308      	adds	r3, #8
 8007ccc:	001a      	movs	r2, r3
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	3308      	adds	r3, #8
 8007cd6:	001a      	movs	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ce2:	46c0      	nop			; (mov r8, r8)
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	b002      	add	sp, #8
 8007ce8:	bd80      	pop	{r7, pc}

08007cea <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007cea:	b580      	push	{r7, lr}
 8007cec:	b082      	sub	sp, #8
 8007cee:	af00      	add	r7, sp, #0
 8007cf0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007cf8:	46c0      	nop			; (mov r8, r8)
 8007cfa:	46bd      	mov	sp, r7
 8007cfc:	b002      	add	sp, #8
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	685b      	ldr	r3, [r3, #4]
 8007d0e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	68fa      	ldr	r2, [r7, #12]
 8007d14:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	689a      	ldr	r2, [r3, #8]
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	683a      	ldr	r2, [r7, #0]
 8007d24:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007d2c:	683b      	ldr	r3, [r7, #0]
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	1c5a      	adds	r2, r3, #1
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	601a      	str	r2, [r3, #0]
}
 8007d3c:	46c0      	nop			; (mov r8, r8)
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	b004      	add	sp, #16
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
 8007d4c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007d4e:	683b      	ldr	r3, [r7, #0]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	3301      	adds	r3, #1
 8007d58:	d103      	bne.n	8007d62 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	60fb      	str	r3, [r7, #12]
 8007d60:	e00c      	b.n	8007d7c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	3308      	adds	r3, #8
 8007d66:	60fb      	str	r3, [r7, #12]
 8007d68:	e002      	b.n	8007d70 <vListInsert+0x2c>
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	685b      	ldr	r3, [r3, #4]
 8007d6e:	60fb      	str	r3, [r7, #12]
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	685b      	ldr	r3, [r3, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d2f6      	bcs.n	8007d6a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	685a      	ldr	r2, [r3, #4]
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	683a      	ldr	r2, [r7, #0]
 8007d8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	68fa      	ldr	r2, [r7, #12]
 8007d90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	683a      	ldr	r2, [r7, #0]
 8007d96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007d98:	683b      	ldr	r3, [r7, #0]
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	1c5a      	adds	r2, r3, #1
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	601a      	str	r2, [r3, #0]
}
 8007da8:	46c0      	nop			; (mov r8, r8)
 8007daa:	46bd      	mov	sp, r7
 8007dac:	b004      	add	sp, #16
 8007dae:	bd80      	pop	{r7, pc}

08007db0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b084      	sub	sp, #16
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	685b      	ldr	r3, [r3, #4]
 8007dc2:	687a      	ldr	r2, [r7, #4]
 8007dc4:	6892      	ldr	r2, [r2, #8]
 8007dc6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	689b      	ldr	r3, [r3, #8]
 8007dcc:	687a      	ldr	r2, [r7, #4]
 8007dce:	6852      	ldr	r2, [r2, #4]
 8007dd0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	687a      	ldr	r2, [r7, #4]
 8007dd8:	429a      	cmp	r2, r3
 8007dda:	d103      	bne.n	8007de4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689a      	ldr	r2, [r3, #8]
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	1e5a      	subs	r2, r3, #1
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	681b      	ldr	r3, [r3, #0]
}
 8007df8:	0018      	movs	r0, r3
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	b004      	add	sp, #16
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	6078      	str	r0, [r7, #4]
 8007e08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d101      	bne.n	8007e18 <xQueueGenericReset+0x18>
 8007e14:	b672      	cpsid	i
 8007e16:	e7fe      	b.n	8007e16 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8007e18:	f001 f912 	bl	8009040 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	681a      	ldr	r2, [r3, #0]
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e28:	434b      	muls	r3, r1
 8007e2a:	18d2      	adds	r2, r2, r3
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	2200      	movs	r2, #0
 8007e34:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007e36:	68fb      	ldr	r3, [r7, #12]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681a      	ldr	r2, [r3, #0]
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e46:	1e59      	subs	r1, r3, #1
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e4c:	434b      	muls	r3, r1
 8007e4e:	18d2      	adds	r2, r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2244      	movs	r2, #68	; 0x44
 8007e58:	21ff      	movs	r1, #255	; 0xff
 8007e5a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2245      	movs	r2, #69	; 0x45
 8007e60:	21ff      	movs	r1, #255	; 0xff
 8007e62:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d10d      	bne.n	8007e86 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	691b      	ldr	r3, [r3, #16]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d013      	beq.n	8007e9a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	3310      	adds	r3, #16
 8007e76:	0018      	movs	r0, r3
 8007e78:	f000 fd72 	bl	8008960 <xTaskRemoveFromEventList>
 8007e7c:	1e03      	subs	r3, r0, #0
 8007e7e:	d00c      	beq.n	8007e9a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007e80:	f001 f8ce 	bl	8009020 <vPortYield>
 8007e84:	e009      	b.n	8007e9a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	3310      	adds	r3, #16
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f7ff ff0f 	bl	8007cae <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	3324      	adds	r3, #36	; 0x24
 8007e94:	0018      	movs	r0, r3
 8007e96:	f7ff ff0a 	bl	8007cae <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007e9a:	f001 f8e3 	bl	8009064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007e9e:	2301      	movs	r3, #1
}
 8007ea0:	0018      	movs	r0, r3
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	b004      	add	sp, #16
 8007ea6:	bd80      	pop	{r7, pc}

08007ea8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007ea8:	b590      	push	{r4, r7, lr}
 8007eaa:	b08b      	sub	sp, #44	; 0x2c
 8007eac:	af02      	add	r7, sp, #8
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	1dfb      	adds	r3, r7, #7
 8007eb4:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <xQueueGenericCreate+0x18>
 8007ebc:	b672      	cpsid	i
 8007ebe:	e7fe      	b.n	8007ebe <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68ba      	ldr	r2, [r7, #8]
 8007ec4:	4353      	muls	r3, r2
 8007ec6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	3348      	adds	r3, #72	; 0x48
 8007ecc:	0018      	movs	r0, r3
 8007ece:	f001 f94f 	bl	8009170 <pvPortMalloc>
 8007ed2:	0003      	movs	r3, r0
 8007ed4:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d00e      	beq.n	8007efa <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	3348      	adds	r3, #72	; 0x48
 8007ee4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ee6:	1dfb      	adds	r3, r7, #7
 8007ee8:	781c      	ldrb	r4, [r3, #0]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	68b9      	ldr	r1, [r7, #8]
 8007eee:	68f8      	ldr	r0, [r7, #12]
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	9300      	str	r3, [sp, #0]
 8007ef4:	0023      	movs	r3, r4
 8007ef6:	f000 f805 	bl	8007f04 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007efa:	69bb      	ldr	r3, [r7, #24]
	}
 8007efc:	0018      	movs	r0, r3
 8007efe:	46bd      	mov	sp, r7
 8007f00:	b009      	add	sp, #36	; 0x24
 8007f02:	bd90      	pop	{r4, r7, pc}

08007f04 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	60f8      	str	r0, [r7, #12]
 8007f0c:	60b9      	str	r1, [r7, #8]
 8007f0e:	607a      	str	r2, [r7, #4]
 8007f10:	001a      	movs	r2, r3
 8007f12:	1cfb      	adds	r3, r7, #3
 8007f14:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007f16:	68bb      	ldr	r3, [r7, #8]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d103      	bne.n	8007f24 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	69ba      	ldr	r2, [r7, #24]
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	e002      	b.n	8007f2a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	687a      	ldr	r2, [r7, #4]
 8007f28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	68fa      	ldr	r2, [r7, #12]
 8007f2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	68ba      	ldr	r2, [r7, #8]
 8007f34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	2101      	movs	r1, #1
 8007f3a:	0018      	movs	r0, r3
 8007f3c:	f7ff ff60 	bl	8007e00 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007f40:	46c0      	nop			; (mov r8, r8)
 8007f42:	46bd      	mov	sp, r7
 8007f44:	b004      	add	sp, #16
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007f48:	b580      	push	{r7, lr}
 8007f4a:	b088      	sub	sp, #32
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
 8007f50:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	61bb      	str	r3, [r7, #24]
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d101      	bne.n	8007f60 <xQueueGiveFromISR+0x18>
 8007f5c:	b672      	cpsid	i
 8007f5e:	e7fe      	b.n	8007f5e <xQueueGiveFromISR+0x16>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d001      	beq.n	8007f6c <xQueueGiveFromISR+0x24>
 8007f68:	b672      	cpsid	i
 8007f6a:	e7fe      	b.n	8007f6a <xQueueGiveFromISR+0x22>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8007f6c:	69bb      	ldr	r3, [r7, #24]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d103      	bne.n	8007f7c <xQueueGiveFromISR+0x34>
 8007f74:	69bb      	ldr	r3, [r7, #24]
 8007f76:	689b      	ldr	r3, [r3, #8]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <xQueueGiveFromISR+0x38>
 8007f7c:	2301      	movs	r3, #1
 8007f7e:	e000      	b.n	8007f82 <xQueueGiveFromISR+0x3a>
 8007f80:	2300      	movs	r3, #0
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d101      	bne.n	8007f8a <xQueueGiveFromISR+0x42>
 8007f86:	b672      	cpsid	i
 8007f88:	e7fe      	b.n	8007f88 <xQueueGiveFromISR+0x40>
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007f8a:	f001 f883 	bl	8009094 <ulSetInterruptMaskFromISR>
 8007f8e:	0003      	movs	r3, r0
 8007f90:	617b      	str	r3, [r7, #20]
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007f92:	69bb      	ldr	r3, [r7, #24]
 8007f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f96:	613b      	str	r3, [r7, #16]

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f9c:	693a      	ldr	r2, [r7, #16]
 8007f9e:	429a      	cmp	r2, r3
 8007fa0:	d22c      	bcs.n	8007ffc <xQueueGiveFromISR+0xb4>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007fa2:	200f      	movs	r0, #15
 8007fa4:	183b      	adds	r3, r7, r0
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	2145      	movs	r1, #69	; 0x45
 8007faa:	5c52      	ldrb	r2, [r2, r1]
 8007fac:	701a      	strb	r2, [r3, #0]
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007fae:	693b      	ldr	r3, [r7, #16]
 8007fb0:	1c5a      	adds	r2, r3, #1
 8007fb2:	69bb      	ldr	r3, [r7, #24]
 8007fb4:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007fb6:	183b      	adds	r3, r7, r0
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	b25b      	sxtb	r3, r3
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	d111      	bne.n	8007fe4 <xQueueGiveFromISR+0x9c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d016      	beq.n	8007ff6 <xQueueGiveFromISR+0xae>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007fc8:	69bb      	ldr	r3, [r7, #24]
 8007fca:	3324      	adds	r3, #36	; 0x24
 8007fcc:	0018      	movs	r0, r3
 8007fce:	f000 fcc7 	bl	8008960 <xTaskRemoveFromEventList>
 8007fd2:	1e03      	subs	r3, r0, #0
 8007fd4:	d00f      	beq.n	8007ff6 <xQueueGiveFromISR+0xae>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00c      	beq.n	8007ff6 <xQueueGiveFromISR+0xae>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007fdc:	683b      	ldr	r3, [r7, #0]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	e008      	b.n	8007ff6 <xQueueGiveFromISR+0xae>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007fe4:	230f      	movs	r3, #15
 8007fe6:	18fb      	adds	r3, r7, r3
 8007fe8:	781b      	ldrb	r3, [r3, #0]
 8007fea:	3301      	adds	r3, #1
 8007fec:	b2db      	uxtb	r3, r3
 8007fee:	b259      	sxtb	r1, r3
 8007ff0:	69bb      	ldr	r3, [r7, #24]
 8007ff2:	2245      	movs	r2, #69	; 0x45
 8007ff4:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	61fb      	str	r3, [r7, #28]
 8007ffa:	e001      	b.n	8008000 <xQueueGiveFromISR+0xb8>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	61fb      	str	r3, [r7, #28]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	0018      	movs	r0, r3
 8008004:	f001 f84c 	bl	80090a0 <vClearInterruptMaskFromISR>

	return xReturn;
 8008008:	69fb      	ldr	r3, [r7, #28]
}
 800800a:	0018      	movs	r0, r3
 800800c:	46bd      	mov	sp, r7
 800800e:	b008      	add	sp, #32
 8008010:	bd80      	pop	{r7, pc}

08008012 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8008012:	b580      	push	{r7, lr}
 8008014:	b08a      	sub	sp, #40	; 0x28
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
 800801a:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800801c:	2300      	movs	r3, #0
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8008024:	2300      	movs	r3, #0
 8008026:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008028:	69fb      	ldr	r3, [r7, #28]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d101      	bne.n	8008032 <xQueueSemaphoreTake+0x20>
 800802e:	b672      	cpsid	i
 8008030:	e7fe      	b.n	8008030 <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8008032:	69fb      	ldr	r3, [r7, #28]
 8008034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <xQueueSemaphoreTake+0x2c>
 800803a:	b672      	cpsid	i
 800803c:	e7fe      	b.n	800803c <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800803e:	f000 fe0b 	bl	8008c58 <xTaskGetSchedulerState>
 8008042:	1e03      	subs	r3, r0, #0
 8008044:	d102      	bne.n	800804c <xQueueSemaphoreTake+0x3a>
 8008046:	683b      	ldr	r3, [r7, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <xQueueSemaphoreTake+0x3e>
 800804c:	2301      	movs	r3, #1
 800804e:	e000      	b.n	8008052 <xQueueSemaphoreTake+0x40>
 8008050:	2300      	movs	r3, #0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <xQueueSemaphoreTake+0x48>
 8008056:	b672      	cpsid	i
 8008058:	e7fe      	b.n	8008058 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800805a:	f000 fff1 	bl	8009040 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800805e:	69fb      	ldr	r3, [r7, #28]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8008064:	69bb      	ldr	r3, [r7, #24]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d01d      	beq.n	80080a6 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800806a:	69bb      	ldr	r3, [r7, #24]
 800806c:	1e5a      	subs	r2, r3, #1
 800806e:	69fb      	ldr	r3, [r7, #28]
 8008070:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d104      	bne.n	8008084 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800807a:	f000 fee1 	bl	8008e40 <pvTaskIncrementMutexHeldCount>
 800807e:	0002      	movs	r2, r0
 8008080:	69fb      	ldr	r3, [r7, #28]
 8008082:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d008      	beq.n	800809e <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800808c:	69fb      	ldr	r3, [r7, #28]
 800808e:	3310      	adds	r3, #16
 8008090:	0018      	movs	r0, r3
 8008092:	f000 fc65 	bl	8008960 <xTaskRemoveFromEventList>
 8008096:	1e03      	subs	r3, r0, #0
 8008098:	d001      	beq.n	800809e <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800809a:	f000 ffc1 	bl	8009020 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800809e:	f000 ffe1 	bl	8009064 <vPortExitCritical>
				return pdPASS;
 80080a2:	2301      	movs	r3, #1
 80080a4:	e08b      	b.n	80081be <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d108      	bne.n	80080be <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80080ac:	6a3b      	ldr	r3, [r7, #32]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d001      	beq.n	80080b6 <xQueueSemaphoreTake+0xa4>
 80080b2:	b672      	cpsid	i
 80080b4:	e7fe      	b.n	80080b4 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80080b6:	f000 ffd5 	bl	8009064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e07f      	b.n	80081be <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80080be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d106      	bne.n	80080d2 <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80080c4:	230c      	movs	r3, #12
 80080c6:	18fb      	adds	r3, r7, r3
 80080c8:	0018      	movs	r0, r3
 80080ca:	f000 fca5 	bl	8008a18 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80080ce:	2301      	movs	r3, #1
 80080d0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80080d2:	f000 ffc7 	bl	8009064 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80080d6:	f000 fa8b 	bl	80085f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80080da:	f000 ffb1 	bl	8009040 <vPortEnterCritical>
 80080de:	69fb      	ldr	r3, [r7, #28]
 80080e0:	2244      	movs	r2, #68	; 0x44
 80080e2:	5c9b      	ldrb	r3, [r3, r2]
 80080e4:	b25b      	sxtb	r3, r3
 80080e6:	3301      	adds	r3, #1
 80080e8:	d103      	bne.n	80080f2 <xQueueSemaphoreTake+0xe0>
 80080ea:	69fb      	ldr	r3, [r7, #28]
 80080ec:	2244      	movs	r2, #68	; 0x44
 80080ee:	2100      	movs	r1, #0
 80080f0:	5499      	strb	r1, [r3, r2]
 80080f2:	69fb      	ldr	r3, [r7, #28]
 80080f4:	2245      	movs	r2, #69	; 0x45
 80080f6:	5c9b      	ldrb	r3, [r3, r2]
 80080f8:	b25b      	sxtb	r3, r3
 80080fa:	3301      	adds	r3, #1
 80080fc:	d103      	bne.n	8008106 <xQueueSemaphoreTake+0xf4>
 80080fe:	69fb      	ldr	r3, [r7, #28]
 8008100:	2245      	movs	r2, #69	; 0x45
 8008102:	2100      	movs	r1, #0
 8008104:	5499      	strb	r1, [r3, r2]
 8008106:	f000 ffad 	bl	8009064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800810a:	003a      	movs	r2, r7
 800810c:	230c      	movs	r3, #12
 800810e:	18fb      	adds	r3, r7, r3
 8008110:	0011      	movs	r1, r2
 8008112:	0018      	movs	r0, r3
 8008114:	f000 fc94 	bl	8008a40 <xTaskCheckForTimeOut>
 8008118:	1e03      	subs	r3, r0, #0
 800811a:	d12e      	bne.n	800817a <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800811c:	69fb      	ldr	r3, [r7, #28]
 800811e:	0018      	movs	r0, r3
 8008120:	f000 f8c5 	bl	80082ae <prvIsQueueEmpty>
 8008124:	1e03      	subs	r3, r0, #0
 8008126:	d021      	beq.n	800816c <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008128:	69fb      	ldr	r3, [r7, #28]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	2b00      	cmp	r3, #0
 800812e:	d10a      	bne.n	8008146 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 8008130:	f000 ff86 	bl	8009040 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	0018      	movs	r0, r3
 800813a:	f000 fda9 	bl	8008c90 <xTaskPriorityInherit>
 800813e:	0003      	movs	r3, r0
 8008140:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 8008142:	f000 ff8f 	bl	8009064 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008146:	69fb      	ldr	r3, [r7, #28]
 8008148:	3324      	adds	r3, #36	; 0x24
 800814a:	683a      	ldr	r2, [r7, #0]
 800814c:	0011      	movs	r1, r2
 800814e:	0018      	movs	r0, r3
 8008150:	f000 fbe8 	bl	8008924 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008154:	69fb      	ldr	r3, [r7, #28]
 8008156:	0018      	movs	r0, r3
 8008158:	f000 f84b 	bl	80081f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800815c:	f000 fa54 	bl	8008608 <xTaskResumeAll>
 8008160:	1e03      	subs	r3, r0, #0
 8008162:	d000      	beq.n	8008166 <xQueueSemaphoreTake+0x154>
 8008164:	e779      	b.n	800805a <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 8008166:	f000 ff5b 	bl	8009020 <vPortYield>
 800816a:	e776      	b.n	800805a <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800816c:	69fb      	ldr	r3, [r7, #28]
 800816e:	0018      	movs	r0, r3
 8008170:	f000 f83f 	bl	80081f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008174:	f000 fa48 	bl	8008608 <xTaskResumeAll>
 8008178:	e76f      	b.n	800805a <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800817a:	69fb      	ldr	r3, [r7, #28]
 800817c:	0018      	movs	r0, r3
 800817e:	f000 f838 	bl	80081f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008182:	f000 fa41 	bl	8008608 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	0018      	movs	r0, r3
 800818a:	f000 f890 	bl	80082ae <prvIsQueueEmpty>
 800818e:	1e03      	subs	r3, r0, #0
 8008190:	d100      	bne.n	8008194 <xQueueSemaphoreTake+0x182>
 8008192:	e762      	b.n	800805a <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8008194:	6a3b      	ldr	r3, [r7, #32]
 8008196:	2b00      	cmp	r3, #0
 8008198:	d010      	beq.n	80081bc <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800819a:	f000 ff51 	bl	8009040 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	0018      	movs	r0, r3
 80081a2:	f000 f810 	bl	80081c6 <prvGetDisinheritPriorityAfterTimeout>
 80081a6:	0003      	movs	r3, r0
 80081a8:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80081aa:	69fb      	ldr	r3, [r7, #28]
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	697a      	ldr	r2, [r7, #20]
 80081b0:	0011      	movs	r1, r2
 80081b2:	0018      	movs	r0, r3
 80081b4:	f000 fdd4 	bl	8008d60 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80081b8:	f000 ff54 	bl	8009064 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80081bc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80081be:	0018      	movs	r0, r3
 80081c0:	46bd      	mov	sp, r7
 80081c2:	b00a      	add	sp, #40	; 0x28
 80081c4:	bd80      	pop	{r7, pc}

080081c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80081c6:	b580      	push	{r7, lr}
 80081c8:	b084      	sub	sp, #16
 80081ca:	af00      	add	r7, sp, #0
 80081cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d006      	beq.n	80081e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	2207      	movs	r2, #7
 80081de:	1ad3      	subs	r3, r2, r3
 80081e0:	60fb      	str	r3, [r7, #12]
 80081e2:	e001      	b.n	80081e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80081e4:	2300      	movs	r3, #0
 80081e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80081e8:	68fb      	ldr	r3, [r7, #12]
	}
 80081ea:	0018      	movs	r0, r3
 80081ec:	46bd      	mov	sp, r7
 80081ee:	b004      	add	sp, #16
 80081f0:	bd80      	pop	{r7, pc}

080081f2 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80081f2:	b580      	push	{r7, lr}
 80081f4:	b084      	sub	sp, #16
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80081fa:	f000 ff21 	bl	8009040 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80081fe:	230f      	movs	r3, #15
 8008200:	18fb      	adds	r3, r7, r3
 8008202:	687a      	ldr	r2, [r7, #4]
 8008204:	2145      	movs	r1, #69	; 0x45
 8008206:	5c52      	ldrb	r2, [r2, r1]
 8008208:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800820a:	e013      	b.n	8008234 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008210:	2b00      	cmp	r3, #0
 8008212:	d016      	beq.n	8008242 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	3324      	adds	r3, #36	; 0x24
 8008218:	0018      	movs	r0, r3
 800821a:	f000 fba1 	bl	8008960 <xTaskRemoveFromEventList>
 800821e:	1e03      	subs	r3, r0, #0
 8008220:	d001      	beq.n	8008226 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008222:	f000 fc5d 	bl	8008ae0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008226:	210f      	movs	r1, #15
 8008228:	187b      	adds	r3, r7, r1
 800822a:	781b      	ldrb	r3, [r3, #0]
 800822c:	3b01      	subs	r3, #1
 800822e:	b2da      	uxtb	r2, r3
 8008230:	187b      	adds	r3, r7, r1
 8008232:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008234:	230f      	movs	r3, #15
 8008236:	18fb      	adds	r3, r7, r3
 8008238:	781b      	ldrb	r3, [r3, #0]
 800823a:	b25b      	sxtb	r3, r3
 800823c:	2b00      	cmp	r3, #0
 800823e:	dce5      	bgt.n	800820c <prvUnlockQueue+0x1a>
 8008240:	e000      	b.n	8008244 <prvUnlockQueue+0x52>
					break;
 8008242:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2245      	movs	r2, #69	; 0x45
 8008248:	21ff      	movs	r1, #255	; 0xff
 800824a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800824c:	f000 ff0a 	bl	8009064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008250:	f000 fef6 	bl	8009040 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008254:	230e      	movs	r3, #14
 8008256:	18fb      	adds	r3, r7, r3
 8008258:	687a      	ldr	r2, [r7, #4]
 800825a:	2144      	movs	r1, #68	; 0x44
 800825c:	5c52      	ldrb	r2, [r2, r1]
 800825e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008260:	e013      	b.n	800828a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	691b      	ldr	r3, [r3, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d016      	beq.n	8008298 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	3310      	adds	r3, #16
 800826e:	0018      	movs	r0, r3
 8008270:	f000 fb76 	bl	8008960 <xTaskRemoveFromEventList>
 8008274:	1e03      	subs	r3, r0, #0
 8008276:	d001      	beq.n	800827c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8008278:	f000 fc32 	bl	8008ae0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800827c:	210e      	movs	r1, #14
 800827e:	187b      	adds	r3, r7, r1
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	3b01      	subs	r3, #1
 8008284:	b2da      	uxtb	r2, r3
 8008286:	187b      	adds	r3, r7, r1
 8008288:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800828a:	230e      	movs	r3, #14
 800828c:	18fb      	adds	r3, r7, r3
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	b25b      	sxtb	r3, r3
 8008292:	2b00      	cmp	r3, #0
 8008294:	dce5      	bgt.n	8008262 <prvUnlockQueue+0x70>
 8008296:	e000      	b.n	800829a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8008298:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2244      	movs	r2, #68	; 0x44
 800829e:	21ff      	movs	r1, #255	; 0xff
 80082a0:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80082a2:	f000 fedf 	bl	8009064 <vPortExitCritical>
}
 80082a6:	46c0      	nop			; (mov r8, r8)
 80082a8:	46bd      	mov	sp, r7
 80082aa:	b004      	add	sp, #16
 80082ac:	bd80      	pop	{r7, pc}

080082ae <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80082ae:	b580      	push	{r7, lr}
 80082b0:	b084      	sub	sp, #16
 80082b2:	af00      	add	r7, sp, #0
 80082b4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80082b6:	f000 fec3 	bl	8009040 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d102      	bne.n	80082c8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80082c2:	2301      	movs	r3, #1
 80082c4:	60fb      	str	r3, [r7, #12]
 80082c6:	e001      	b.n	80082cc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80082c8:	2300      	movs	r3, #0
 80082ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80082cc:	f000 feca 	bl	8009064 <vPortExitCritical>

	return xReturn;
 80082d0:	68fb      	ldr	r3, [r7, #12]
}
 80082d2:	0018      	movs	r0, r3
 80082d4:	46bd      	mov	sp, r7
 80082d6:	b004      	add	sp, #16
 80082d8:	bd80      	pop	{r7, pc}

080082da <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80082da:	b590      	push	{r4, r7, lr}
 80082dc:	b08d      	sub	sp, #52	; 0x34
 80082de:	af04      	add	r7, sp, #16
 80082e0:	60f8      	str	r0, [r7, #12]
 80082e2:	60b9      	str	r1, [r7, #8]
 80082e4:	603b      	str	r3, [r7, #0]
 80082e6:	1dbb      	adds	r3, r7, #6
 80082e8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80082ea:	1dbb      	adds	r3, r7, #6
 80082ec:	881b      	ldrh	r3, [r3, #0]
 80082ee:	009b      	lsls	r3, r3, #2
 80082f0:	0018      	movs	r0, r3
 80082f2:	f000 ff3d 	bl	8009170 <pvPortMalloc>
 80082f6:	0003      	movs	r3, r0
 80082f8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80082fa:	697b      	ldr	r3, [r7, #20]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d010      	beq.n	8008322 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008300:	2054      	movs	r0, #84	; 0x54
 8008302:	f000 ff35 	bl	8009170 <pvPortMalloc>
 8008306:	0003      	movs	r3, r0
 8008308:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800830a:	69fb      	ldr	r3, [r7, #28]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d003      	beq.n	8008318 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008310:	69fb      	ldr	r3, [r7, #28]
 8008312:	697a      	ldr	r2, [r7, #20]
 8008314:	631a      	str	r2, [r3, #48]	; 0x30
 8008316:	e006      	b.n	8008326 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008318:	697b      	ldr	r3, [r7, #20]
 800831a:	0018      	movs	r0, r3
 800831c:	f000 ffd4 	bl	80092c8 <vPortFree>
 8008320:	e001      	b.n	8008326 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008326:	69fb      	ldr	r3, [r7, #28]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d016      	beq.n	800835a <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800832c:	1dbb      	adds	r3, r7, #6
 800832e:	881a      	ldrh	r2, [r3, #0]
 8008330:	683c      	ldr	r4, [r7, #0]
 8008332:	68b9      	ldr	r1, [r7, #8]
 8008334:	68f8      	ldr	r0, [r7, #12]
 8008336:	2300      	movs	r3, #0
 8008338:	9303      	str	r3, [sp, #12]
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	9302      	str	r3, [sp, #8]
 800833e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008340:	9301      	str	r3, [sp, #4]
 8008342:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008344:	9300      	str	r3, [sp, #0]
 8008346:	0023      	movs	r3, r4
 8008348:	f000 f810 	bl	800836c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800834c:	69fb      	ldr	r3, [r7, #28]
 800834e:	0018      	movs	r0, r3
 8008350:	f000 f88e 	bl	8008470 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008354:	2301      	movs	r3, #1
 8008356:	61bb      	str	r3, [r7, #24]
 8008358:	e002      	b.n	8008360 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800835a:	2301      	movs	r3, #1
 800835c:	425b      	negs	r3, r3
 800835e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008360:	69bb      	ldr	r3, [r7, #24]
	}
 8008362:	0018      	movs	r0, r3
 8008364:	46bd      	mov	sp, r7
 8008366:	b009      	add	sp, #36	; 0x24
 8008368:	bd90      	pop	{r4, r7, pc}
	...

0800836c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800837a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800837c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	493a      	ldr	r1, [pc, #232]	; (800846c <prvInitialiseNewTask+0x100>)
 8008382:	468c      	mov	ip, r1
 8008384:	4463      	add	r3, ip
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	18d3      	adds	r3, r2, r3
 800838a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800838c:	693b      	ldr	r3, [r7, #16]
 800838e:	2207      	movs	r2, #7
 8008390:	4393      	bics	r3, r2
 8008392:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	2207      	movs	r2, #7
 8008398:	4013      	ands	r3, r2
 800839a:	d001      	beq.n	80083a0 <prvInitialiseNewTask+0x34>
 800839c:	b672      	cpsid	i
 800839e:	e7fe      	b.n	800839e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d020      	beq.n	80083e8 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083a6:	2300      	movs	r3, #0
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	e013      	b.n	80083d4 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80083ac:	68ba      	ldr	r2, [r7, #8]
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	18d3      	adds	r3, r2, r3
 80083b2:	7818      	ldrb	r0, [r3, #0]
 80083b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80083b6:	2134      	movs	r1, #52	; 0x34
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	18d3      	adds	r3, r2, r3
 80083bc:	185b      	adds	r3, r3, r1
 80083be:	1c02      	adds	r2, r0, #0
 80083c0:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80083c2:	68ba      	ldr	r2, [r7, #8]
 80083c4:	697b      	ldr	r3, [r7, #20]
 80083c6:	18d3      	adds	r3, r2, r3
 80083c8:	781b      	ldrb	r3, [r3, #0]
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d006      	beq.n	80083dc <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	3301      	adds	r3, #1
 80083d2:	617b      	str	r3, [r7, #20]
 80083d4:	697b      	ldr	r3, [r7, #20]
 80083d6:	2b0f      	cmp	r3, #15
 80083d8:	d9e8      	bls.n	80083ac <prvInitialiseNewTask+0x40>
 80083da:	e000      	b.n	80083de <prvInitialiseNewTask+0x72>
			{
				break;
 80083dc:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80083de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083e0:	2243      	movs	r2, #67	; 0x43
 80083e2:	2100      	movs	r1, #0
 80083e4:	5499      	strb	r1, [r3, r2]
 80083e6:	e003      	b.n	80083f0 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80083e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083ea:	2234      	movs	r2, #52	; 0x34
 80083ec:	2100      	movs	r1, #0
 80083ee:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	2b06      	cmp	r3, #6
 80083f4:	d901      	bls.n	80083fa <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80083f6:	2306      	movs	r3, #6
 80083f8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80083fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083fc:	6a3a      	ldr	r2, [r7, #32]
 80083fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008402:	6a3a      	ldr	r2, [r7, #32]
 8008404:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008408:	2200      	movs	r2, #0
 800840a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800840c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840e:	3304      	adds	r3, #4
 8008410:	0018      	movs	r0, r3
 8008412:	f7ff fc6a 	bl	8007cea <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008418:	3318      	adds	r3, #24
 800841a:	0018      	movs	r0, r3
 800841c:	f7ff fc65 	bl	8007cea <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008422:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008424:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008426:	6a3b      	ldr	r3, [r7, #32]
 8008428:	2207      	movs	r2, #7
 800842a:	1ad2      	subs	r2, r2, r3
 800842c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800842e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008434:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008436:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008438:	2200      	movs	r2, #0
 800843a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800843c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800843e:	2250      	movs	r2, #80	; 0x50
 8008440:	2100      	movs	r1, #0
 8008442:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	68f9      	ldr	r1, [r7, #12]
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	0018      	movs	r0, r3
 800844c:	f000 fd5e 	bl	8008f0c <pxPortInitialiseStack>
 8008450:	0002      	movs	r2, r0
 8008452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008454:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d002      	beq.n	8008462 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800845c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800845e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008460:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008462:	46c0      	nop			; (mov r8, r8)
 8008464:	46bd      	mov	sp, r7
 8008466:	b006      	add	sp, #24
 8008468:	bd80      	pop	{r7, pc}
 800846a:	46c0      	nop			; (mov r8, r8)
 800846c:	3fffffff 	.word	0x3fffffff

08008470 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008478:	f000 fde2 	bl	8009040 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800847c:	4b28      	ldr	r3, [pc, #160]	; (8008520 <prvAddNewTaskToReadyList+0xb0>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	1c5a      	adds	r2, r3, #1
 8008482:	4b27      	ldr	r3, [pc, #156]	; (8008520 <prvAddNewTaskToReadyList+0xb0>)
 8008484:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008486:	4b27      	ldr	r3, [pc, #156]	; (8008524 <prvAddNewTaskToReadyList+0xb4>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d109      	bne.n	80084a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800848e:	4b25      	ldr	r3, [pc, #148]	; (8008524 <prvAddNewTaskToReadyList+0xb4>)
 8008490:	687a      	ldr	r2, [r7, #4]
 8008492:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008494:	4b22      	ldr	r3, [pc, #136]	; (8008520 <prvAddNewTaskToReadyList+0xb0>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2b01      	cmp	r3, #1
 800849a:	d110      	bne.n	80084be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800849c:	f000 fb3a 	bl	8008b14 <prvInitialiseTaskLists>
 80084a0:	e00d      	b.n	80084be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80084a2:	4b21      	ldr	r3, [pc, #132]	; (8008528 <prvAddNewTaskToReadyList+0xb8>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d109      	bne.n	80084be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80084aa:	4b1e      	ldr	r3, [pc, #120]	; (8008524 <prvAddNewTaskToReadyList+0xb4>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d802      	bhi.n	80084be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80084b8:	4b1a      	ldr	r3, [pc, #104]	; (8008524 <prvAddNewTaskToReadyList+0xb4>)
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80084be:	4b1b      	ldr	r3, [pc, #108]	; (800852c <prvAddNewTaskToReadyList+0xbc>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	1c5a      	adds	r2, r3, #1
 80084c4:	4b19      	ldr	r3, [pc, #100]	; (800852c <prvAddNewTaskToReadyList+0xbc>)
 80084c6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084cc:	4b18      	ldr	r3, [pc, #96]	; (8008530 <prvAddNewTaskToReadyList+0xc0>)
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	429a      	cmp	r2, r3
 80084d2:	d903      	bls.n	80084dc <prvAddNewTaskToReadyList+0x6c>
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084d8:	4b15      	ldr	r3, [pc, #84]	; (8008530 <prvAddNewTaskToReadyList+0xc0>)
 80084da:	601a      	str	r2, [r3, #0]
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e0:	0013      	movs	r3, r2
 80084e2:	009b      	lsls	r3, r3, #2
 80084e4:	189b      	adds	r3, r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	4a12      	ldr	r2, [pc, #72]	; (8008534 <prvAddNewTaskToReadyList+0xc4>)
 80084ea:	189a      	adds	r2, r3, r2
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	3304      	adds	r3, #4
 80084f0:	0019      	movs	r1, r3
 80084f2:	0010      	movs	r0, r2
 80084f4:	f7ff fc04 	bl	8007d00 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80084f8:	f000 fdb4 	bl	8009064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80084fc:	4b0a      	ldr	r3, [pc, #40]	; (8008528 <prvAddNewTaskToReadyList+0xb8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d008      	beq.n	8008516 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008504:	4b07      	ldr	r3, [pc, #28]	; (8008524 <prvAddNewTaskToReadyList+0xb4>)
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800850e:	429a      	cmp	r2, r3
 8008510:	d201      	bcs.n	8008516 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008512:	f000 fd85 	bl	8009020 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008516:	46c0      	nop			; (mov r8, r8)
 8008518:	46bd      	mov	sp, r7
 800851a:	b002      	add	sp, #8
 800851c:	bd80      	pop	{r7, pc}
 800851e:	46c0      	nop			; (mov r8, r8)
 8008520:	200036bc 	.word	0x200036bc
 8008524:	200035bc 	.word	0x200035bc
 8008528:	200036c8 	.word	0x200036c8
 800852c:	200036d8 	.word	0x200036d8
 8008530:	200036c4 	.word	0x200036c4
 8008534:	200035c0 	.word	0x200035c0

08008538 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008540:	2300      	movs	r3, #0
 8008542:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d010      	beq.n	800856c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800854a:	4b0d      	ldr	r3, [pc, #52]	; (8008580 <vTaskDelay+0x48>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d001      	beq.n	8008556 <vTaskDelay+0x1e>
 8008552:	b672      	cpsid	i
 8008554:	e7fe      	b.n	8008554 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008556:	f000 f84b 	bl	80085f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2100      	movs	r1, #0
 800855e:	0018      	movs	r0, r3
 8008560:	f000 fc80 	bl	8008e64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008564:	f000 f850 	bl	8008608 <xTaskResumeAll>
 8008568:	0003      	movs	r3, r0
 800856a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8008572:	f000 fd55 	bl	8009020 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008576:	46c0      	nop			; (mov r8, r8)
 8008578:	46bd      	mov	sp, r7
 800857a:	b004      	add	sp, #16
 800857c:	bd80      	pop	{r7, pc}
 800857e:	46c0      	nop			; (mov r8, r8)
 8008580:	200036e4 	.word	0x200036e4

08008584 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b084      	sub	sp, #16
 8008588:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800858a:	4913      	ldr	r1, [pc, #76]	; (80085d8 <vTaskStartScheduler+0x54>)
 800858c:	4813      	ldr	r0, [pc, #76]	; (80085dc <vTaskStartScheduler+0x58>)
 800858e:	4b14      	ldr	r3, [pc, #80]	; (80085e0 <vTaskStartScheduler+0x5c>)
 8008590:	9301      	str	r3, [sp, #4]
 8008592:	2300      	movs	r3, #0
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	2300      	movs	r3, #0
 8008598:	2280      	movs	r2, #128	; 0x80
 800859a:	f7ff fe9e 	bl	80082da <xTaskCreate>
 800859e:	0003      	movs	r3, r0
 80085a0:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d10d      	bne.n	80085c4 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80085a8:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80085aa:	4b0e      	ldr	r3, [pc, #56]	; (80085e4 <vTaskStartScheduler+0x60>)
 80085ac:	2201      	movs	r2, #1
 80085ae:	4252      	negs	r2, r2
 80085b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80085b2:	4b0d      	ldr	r3, [pc, #52]	; (80085e8 <vTaskStartScheduler+0x64>)
 80085b4:	2201      	movs	r2, #1
 80085b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80085b8:	4b0c      	ldr	r3, [pc, #48]	; (80085ec <vTaskStartScheduler+0x68>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80085be:	f000 fd0b 	bl	8008fd8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80085c2:	e004      	b.n	80085ce <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3301      	adds	r3, #1
 80085c8:	d101      	bne.n	80085ce <vTaskStartScheduler+0x4a>
 80085ca:	b672      	cpsid	i
 80085cc:	e7fe      	b.n	80085cc <vTaskStartScheduler+0x48>
}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	46bd      	mov	sp, r7
 80085d2:	b002      	add	sp, #8
 80085d4:	bd80      	pop	{r7, pc}
 80085d6:	46c0      	nop			; (mov r8, r8)
 80085d8:	0800b0c0 	.word	0x0800b0c0
 80085dc:	08008af5 	.word	0x08008af5
 80085e0:	200036e0 	.word	0x200036e0
 80085e4:	200036dc 	.word	0x200036dc
 80085e8:	200036c8 	.word	0x200036c8
 80085ec:	200036c0 	.word	0x200036c0

080085f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80085f4:	4b03      	ldr	r3, [pc, #12]	; (8008604 <vTaskSuspendAll+0x14>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	1c5a      	adds	r2, r3, #1
 80085fa:	4b02      	ldr	r3, [pc, #8]	; (8008604 <vTaskSuspendAll+0x14>)
 80085fc:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	46bd      	mov	sp, r7
 8008602:	bd80      	pop	{r7, pc}
 8008604:	200036e4 	.word	0x200036e4

08008608 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800860e:	2300      	movs	r3, #0
 8008610:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008612:	2300      	movs	r3, #0
 8008614:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008616:	4b3a      	ldr	r3, [pc, #232]	; (8008700 <xTaskResumeAll+0xf8>)
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <xTaskResumeAll+0x1a>
 800861e:	b672      	cpsid	i
 8008620:	e7fe      	b.n	8008620 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008622:	f000 fd0d 	bl	8009040 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008626:	4b36      	ldr	r3, [pc, #216]	; (8008700 <xTaskResumeAll+0xf8>)
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	1e5a      	subs	r2, r3, #1
 800862c:	4b34      	ldr	r3, [pc, #208]	; (8008700 <xTaskResumeAll+0xf8>)
 800862e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008630:	4b33      	ldr	r3, [pc, #204]	; (8008700 <xTaskResumeAll+0xf8>)
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2b00      	cmp	r3, #0
 8008636:	d15b      	bne.n	80086f0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008638:	4b32      	ldr	r3, [pc, #200]	; (8008704 <xTaskResumeAll+0xfc>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d057      	beq.n	80086f0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008640:	e02f      	b.n	80086a2 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008642:	4b31      	ldr	r3, [pc, #196]	; (8008708 <xTaskResumeAll+0x100>)
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	68db      	ldr	r3, [r3, #12]
 8008648:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	3318      	adds	r3, #24
 800864e:	0018      	movs	r0, r3
 8008650:	f7ff fbae 	bl	8007db0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	3304      	adds	r3, #4
 8008658:	0018      	movs	r0, r3
 800865a:	f7ff fba9 	bl	8007db0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008662:	4b2a      	ldr	r3, [pc, #168]	; (800870c <xTaskResumeAll+0x104>)
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d903      	bls.n	8008672 <xTaskResumeAll+0x6a>
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800866e:	4b27      	ldr	r3, [pc, #156]	; (800870c <xTaskResumeAll+0x104>)
 8008670:	601a      	str	r2, [r3, #0]
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008676:	0013      	movs	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	189b      	adds	r3, r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	4a24      	ldr	r2, [pc, #144]	; (8008710 <xTaskResumeAll+0x108>)
 8008680:	189a      	adds	r2, r3, r2
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3304      	adds	r3, #4
 8008686:	0019      	movs	r1, r3
 8008688:	0010      	movs	r0, r2
 800868a:	f7ff fb39 	bl	8007d00 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008692:	4b20      	ldr	r3, [pc, #128]	; (8008714 <xTaskResumeAll+0x10c>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008698:	429a      	cmp	r2, r3
 800869a:	d302      	bcc.n	80086a2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800869c:	4b1e      	ldr	r3, [pc, #120]	; (8008718 <xTaskResumeAll+0x110>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80086a2:	4b19      	ldr	r3, [pc, #100]	; (8008708 <xTaskResumeAll+0x100>)
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d1cb      	bne.n	8008642 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d001      	beq.n	80086b4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80086b0:	f000 fab4 	bl	8008c1c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80086b4:	4b19      	ldr	r3, [pc, #100]	; (800871c <xTaskResumeAll+0x114>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00f      	beq.n	80086e0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80086c0:	f000 f82e 	bl	8008720 <xTaskIncrementTick>
 80086c4:	1e03      	subs	r3, r0, #0
 80086c6:	d002      	beq.n	80086ce <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80086c8:	4b13      	ldr	r3, [pc, #76]	; (8008718 <xTaskResumeAll+0x110>)
 80086ca:	2201      	movs	r2, #1
 80086cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	3b01      	subs	r3, #1
 80086d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d1f2      	bne.n	80086c0 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80086da:	4b10      	ldr	r3, [pc, #64]	; (800871c <xTaskResumeAll+0x114>)
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80086e0:	4b0d      	ldr	r3, [pc, #52]	; (8008718 <xTaskResumeAll+0x110>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d003      	beq.n	80086f0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80086e8:	2301      	movs	r3, #1
 80086ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80086ec:	f000 fc98 	bl	8009020 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086f0:	f000 fcb8 	bl	8009064 <vPortExitCritical>

	return xAlreadyYielded;
 80086f4:	68bb      	ldr	r3, [r7, #8]
}
 80086f6:	0018      	movs	r0, r3
 80086f8:	46bd      	mov	sp, r7
 80086fa:	b004      	add	sp, #16
 80086fc:	bd80      	pop	{r7, pc}
 80086fe:	46c0      	nop			; (mov r8, r8)
 8008700:	200036e4 	.word	0x200036e4
 8008704:	200036bc 	.word	0x200036bc
 8008708:	2000367c 	.word	0x2000367c
 800870c:	200036c4 	.word	0x200036c4
 8008710:	200035c0 	.word	0x200035c0
 8008714:	200035bc 	.word	0x200035bc
 8008718:	200036d0 	.word	0x200036d0
 800871c:	200036cc 	.word	0x200036cc

08008720 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008720:	b580      	push	{r7, lr}
 8008722:	b086      	sub	sp, #24
 8008724:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008726:	2300      	movs	r3, #0
 8008728:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800872a:	4b4a      	ldr	r3, [pc, #296]	; (8008854 <xTaskIncrementTick+0x134>)
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d000      	beq.n	8008734 <xTaskIncrementTick+0x14>
 8008732:	e084      	b.n	800883e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008734:	4b48      	ldr	r3, [pc, #288]	; (8008858 <xTaskIncrementTick+0x138>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	3301      	adds	r3, #1
 800873a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800873c:	4b46      	ldr	r3, [pc, #280]	; (8008858 <xTaskIncrementTick+0x138>)
 800873e:	693a      	ldr	r2, [r7, #16]
 8008740:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	2b00      	cmp	r3, #0
 8008746:	d117      	bne.n	8008778 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008748:	4b44      	ldr	r3, [pc, #272]	; (800885c <xTaskIncrementTick+0x13c>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d001      	beq.n	8008756 <xTaskIncrementTick+0x36>
 8008752:	b672      	cpsid	i
 8008754:	e7fe      	b.n	8008754 <xTaskIncrementTick+0x34>
 8008756:	4b41      	ldr	r3, [pc, #260]	; (800885c <xTaskIncrementTick+0x13c>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	4b40      	ldr	r3, [pc, #256]	; (8008860 <xTaskIncrementTick+0x140>)
 800875e:	681a      	ldr	r2, [r3, #0]
 8008760:	4b3e      	ldr	r3, [pc, #248]	; (800885c <xTaskIncrementTick+0x13c>)
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	4b3e      	ldr	r3, [pc, #248]	; (8008860 <xTaskIncrementTick+0x140>)
 8008766:	68fa      	ldr	r2, [r7, #12]
 8008768:	601a      	str	r2, [r3, #0]
 800876a:	4b3e      	ldr	r3, [pc, #248]	; (8008864 <xTaskIncrementTick+0x144>)
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	1c5a      	adds	r2, r3, #1
 8008770:	4b3c      	ldr	r3, [pc, #240]	; (8008864 <xTaskIncrementTick+0x144>)
 8008772:	601a      	str	r2, [r3, #0]
 8008774:	f000 fa52 	bl	8008c1c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008778:	4b3b      	ldr	r3, [pc, #236]	; (8008868 <xTaskIncrementTick+0x148>)
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	693a      	ldr	r2, [r7, #16]
 800877e:	429a      	cmp	r2, r3
 8008780:	d349      	bcc.n	8008816 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008782:	4b36      	ldr	r3, [pc, #216]	; (800885c <xTaskIncrementTick+0x13c>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2b00      	cmp	r3, #0
 800878a:	d104      	bne.n	8008796 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800878c:	4b36      	ldr	r3, [pc, #216]	; (8008868 <xTaskIncrementTick+0x148>)
 800878e:	2201      	movs	r2, #1
 8008790:	4252      	negs	r2, r2
 8008792:	601a      	str	r2, [r3, #0]
					break;
 8008794:	e03f      	b.n	8008816 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008796:	4b31      	ldr	r3, [pc, #196]	; (800885c <xTaskIncrementTick+0x13c>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80087a0:	68bb      	ldr	r3, [r7, #8]
 80087a2:	685b      	ldr	r3, [r3, #4]
 80087a4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80087a6:	693a      	ldr	r2, [r7, #16]
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d203      	bcs.n	80087b6 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80087ae:	4b2e      	ldr	r3, [pc, #184]	; (8008868 <xTaskIncrementTick+0x148>)
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80087b4:	e02f      	b.n	8008816 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087b6:	68bb      	ldr	r3, [r7, #8]
 80087b8:	3304      	adds	r3, #4
 80087ba:	0018      	movs	r0, r3
 80087bc:	f7ff faf8 	bl	8007db0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d004      	beq.n	80087d2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087c8:	68bb      	ldr	r3, [r7, #8]
 80087ca:	3318      	adds	r3, #24
 80087cc:	0018      	movs	r0, r3
 80087ce:	f7ff faef 	bl	8007db0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80087d2:	68bb      	ldr	r3, [r7, #8]
 80087d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087d6:	4b25      	ldr	r3, [pc, #148]	; (800886c <xTaskIncrementTick+0x14c>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	429a      	cmp	r2, r3
 80087dc:	d903      	bls.n	80087e6 <xTaskIncrementTick+0xc6>
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087e2:	4b22      	ldr	r3, [pc, #136]	; (800886c <xTaskIncrementTick+0x14c>)
 80087e4:	601a      	str	r2, [r3, #0]
 80087e6:	68bb      	ldr	r3, [r7, #8]
 80087e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087ea:	0013      	movs	r3, r2
 80087ec:	009b      	lsls	r3, r3, #2
 80087ee:	189b      	adds	r3, r3, r2
 80087f0:	009b      	lsls	r3, r3, #2
 80087f2:	4a1f      	ldr	r2, [pc, #124]	; (8008870 <xTaskIncrementTick+0x150>)
 80087f4:	189a      	adds	r2, r3, r2
 80087f6:	68bb      	ldr	r3, [r7, #8]
 80087f8:	3304      	adds	r3, #4
 80087fa:	0019      	movs	r1, r3
 80087fc:	0010      	movs	r0, r2
 80087fe:	f7ff fa7f 	bl	8007d00 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008806:	4b1b      	ldr	r3, [pc, #108]	; (8008874 <xTaskIncrementTick+0x154>)
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880c:	429a      	cmp	r2, r3
 800880e:	d3b8      	bcc.n	8008782 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8008810:	2301      	movs	r3, #1
 8008812:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008814:	e7b5      	b.n	8008782 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008816:	4b17      	ldr	r3, [pc, #92]	; (8008874 <xTaskIncrementTick+0x154>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800881c:	4914      	ldr	r1, [pc, #80]	; (8008870 <xTaskIncrementTick+0x150>)
 800881e:	0013      	movs	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	189b      	adds	r3, r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	585b      	ldr	r3, [r3, r1]
 8008828:	2b01      	cmp	r3, #1
 800882a:	d901      	bls.n	8008830 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800882c:	2301      	movs	r3, #1
 800882e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008830:	4b11      	ldr	r3, [pc, #68]	; (8008878 <xTaskIncrementTick+0x158>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d007      	beq.n	8008848 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8008838:	2301      	movs	r3, #1
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	e004      	b.n	8008848 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800883e:	4b0f      	ldr	r3, [pc, #60]	; (800887c <xTaskIncrementTick+0x15c>)
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	1c5a      	adds	r2, r3, #1
 8008844:	4b0d      	ldr	r3, [pc, #52]	; (800887c <xTaskIncrementTick+0x15c>)
 8008846:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008848:	697b      	ldr	r3, [r7, #20]
}
 800884a:	0018      	movs	r0, r3
 800884c:	46bd      	mov	sp, r7
 800884e:	b006      	add	sp, #24
 8008850:	bd80      	pop	{r7, pc}
 8008852:	46c0      	nop			; (mov r8, r8)
 8008854:	200036e4 	.word	0x200036e4
 8008858:	200036c0 	.word	0x200036c0
 800885c:	20003674 	.word	0x20003674
 8008860:	20003678 	.word	0x20003678
 8008864:	200036d4 	.word	0x200036d4
 8008868:	200036dc 	.word	0x200036dc
 800886c:	200036c4 	.word	0x200036c4
 8008870:	200035c0 	.word	0x200035c0
 8008874:	200035bc 	.word	0x200035bc
 8008878:	200036d0 	.word	0x200036d0
 800887c:	200036cc 	.word	0x200036cc

08008880 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b082      	sub	sp, #8
 8008884:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008886:	4b22      	ldr	r3, [pc, #136]	; (8008910 <vTaskSwitchContext+0x90>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d003      	beq.n	8008896 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800888e:	4b21      	ldr	r3, [pc, #132]	; (8008914 <vTaskSwitchContext+0x94>)
 8008890:	2201      	movs	r2, #1
 8008892:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008894:	e037      	b.n	8008906 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8008896:	4b1f      	ldr	r3, [pc, #124]	; (8008914 <vTaskSwitchContext+0x94>)
 8008898:	2200      	movs	r2, #0
 800889a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800889c:	4b1e      	ldr	r3, [pc, #120]	; (8008918 <vTaskSwitchContext+0x98>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	607b      	str	r3, [r7, #4]
 80088a2:	e007      	b.n	80088b4 <vTaskSwitchContext+0x34>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d101      	bne.n	80088ae <vTaskSwitchContext+0x2e>
 80088aa:	b672      	cpsid	i
 80088ac:	e7fe      	b.n	80088ac <vTaskSwitchContext+0x2c>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	3b01      	subs	r3, #1
 80088b2:	607b      	str	r3, [r7, #4]
 80088b4:	4919      	ldr	r1, [pc, #100]	; (800891c <vTaskSwitchContext+0x9c>)
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	0013      	movs	r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	189b      	adds	r3, r3, r2
 80088be:	009b      	lsls	r3, r3, #2
 80088c0:	585b      	ldr	r3, [r3, r1]
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	d0ee      	beq.n	80088a4 <vTaskSwitchContext+0x24>
 80088c6:	687a      	ldr	r2, [r7, #4]
 80088c8:	0013      	movs	r3, r2
 80088ca:	009b      	lsls	r3, r3, #2
 80088cc:	189b      	adds	r3, r3, r2
 80088ce:	009b      	lsls	r3, r3, #2
 80088d0:	4a12      	ldr	r2, [pc, #72]	; (800891c <vTaskSwitchContext+0x9c>)
 80088d2:	189b      	adds	r3, r3, r2
 80088d4:	603b      	str	r3, [r7, #0]
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	685a      	ldr	r2, [r3, #4]
 80088dc:	683b      	ldr	r3, [r7, #0]
 80088de:	605a      	str	r2, [r3, #4]
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	685a      	ldr	r2, [r3, #4]
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	3308      	adds	r3, #8
 80088e8:	429a      	cmp	r2, r3
 80088ea:	d104      	bne.n	80088f6 <vTaskSwitchContext+0x76>
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	685b      	ldr	r3, [r3, #4]
 80088f0:	685a      	ldr	r2, [r3, #4]
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	605a      	str	r2, [r3, #4]
 80088f6:	683b      	ldr	r3, [r7, #0]
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	4b08      	ldr	r3, [pc, #32]	; (8008920 <vTaskSwitchContext+0xa0>)
 80088fe:	601a      	str	r2, [r3, #0]
 8008900:	4b05      	ldr	r3, [pc, #20]	; (8008918 <vTaskSwitchContext+0x98>)
 8008902:	687a      	ldr	r2, [r7, #4]
 8008904:	601a      	str	r2, [r3, #0]
}
 8008906:	46c0      	nop			; (mov r8, r8)
 8008908:	46bd      	mov	sp, r7
 800890a:	b002      	add	sp, #8
 800890c:	bd80      	pop	{r7, pc}
 800890e:	46c0      	nop			; (mov r8, r8)
 8008910:	200036e4 	.word	0x200036e4
 8008914:	200036d0 	.word	0x200036d0
 8008918:	200036c4 	.word	0x200036c4
 800891c:	200035c0 	.word	0x200035c0
 8008920:	200035bc 	.word	0x200035bc

08008924 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008924:	b580      	push	{r7, lr}
 8008926:	b082      	sub	sp, #8
 8008928:	af00      	add	r7, sp, #0
 800892a:	6078      	str	r0, [r7, #4]
 800892c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <vTaskPlaceOnEventList+0x14>
 8008934:	b672      	cpsid	i
 8008936:	e7fe      	b.n	8008936 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008938:	4b08      	ldr	r3, [pc, #32]	; (800895c <vTaskPlaceOnEventList+0x38>)
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	3318      	adds	r3, #24
 800893e:	001a      	movs	r2, r3
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	0011      	movs	r1, r2
 8008944:	0018      	movs	r0, r3
 8008946:	f7ff f9fd 	bl	8007d44 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800894a:	683b      	ldr	r3, [r7, #0]
 800894c:	2101      	movs	r1, #1
 800894e:	0018      	movs	r0, r3
 8008950:	f000 fa88 	bl	8008e64 <prvAddCurrentTaskToDelayedList>
}
 8008954:	46c0      	nop			; (mov r8, r8)
 8008956:	46bd      	mov	sp, r7
 8008958:	b002      	add	sp, #8
 800895a:	bd80      	pop	{r7, pc}
 800895c:	200035bc 	.word	0x200035bc

08008960 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b084      	sub	sp, #16
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	68db      	ldr	r3, [r3, #12]
 800896c:	68db      	ldr	r3, [r3, #12]
 800896e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8008970:	68bb      	ldr	r3, [r7, #8]
 8008972:	2b00      	cmp	r3, #0
 8008974:	d101      	bne.n	800897a <xTaskRemoveFromEventList+0x1a>
 8008976:	b672      	cpsid	i
 8008978:	e7fe      	b.n	8008978 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	3318      	adds	r3, #24
 800897e:	0018      	movs	r0, r3
 8008980:	f7ff fa16 	bl	8007db0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008984:	4b1e      	ldr	r3, [pc, #120]	; (8008a00 <xTaskRemoveFromEventList+0xa0>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d11d      	bne.n	80089c8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	3304      	adds	r3, #4
 8008990:	0018      	movs	r0, r3
 8008992:	f7ff fa0d 	bl	8007db0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800899a:	4b1a      	ldr	r3, [pc, #104]	; (8008a04 <xTaskRemoveFromEventList+0xa4>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d903      	bls.n	80089aa <xTaskRemoveFromEventList+0x4a>
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089a6:	4b17      	ldr	r3, [pc, #92]	; (8008a04 <xTaskRemoveFromEventList+0xa4>)
 80089a8:	601a      	str	r2, [r3, #0]
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ae:	0013      	movs	r3, r2
 80089b0:	009b      	lsls	r3, r3, #2
 80089b2:	189b      	adds	r3, r3, r2
 80089b4:	009b      	lsls	r3, r3, #2
 80089b6:	4a14      	ldr	r2, [pc, #80]	; (8008a08 <xTaskRemoveFromEventList+0xa8>)
 80089b8:	189a      	adds	r2, r3, r2
 80089ba:	68bb      	ldr	r3, [r7, #8]
 80089bc:	3304      	adds	r3, #4
 80089be:	0019      	movs	r1, r3
 80089c0:	0010      	movs	r0, r2
 80089c2:	f7ff f99d 	bl	8007d00 <vListInsertEnd>
 80089c6:	e007      	b.n	80089d8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80089c8:	68bb      	ldr	r3, [r7, #8]
 80089ca:	3318      	adds	r3, #24
 80089cc:	001a      	movs	r2, r3
 80089ce:	4b0f      	ldr	r3, [pc, #60]	; (8008a0c <xTaskRemoveFromEventList+0xac>)
 80089d0:	0011      	movs	r1, r2
 80089d2:	0018      	movs	r0, r3
 80089d4:	f7ff f994 	bl	8007d00 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80089d8:	68bb      	ldr	r3, [r7, #8]
 80089da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089dc:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <xTaskRemoveFromEventList+0xb0>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d905      	bls.n	80089f2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80089e6:	2301      	movs	r3, #1
 80089e8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80089ea:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <xTaskRemoveFromEventList+0xb4>)
 80089ec:	2201      	movs	r2, #1
 80089ee:	601a      	str	r2, [r3, #0]
 80089f0:	e001      	b.n	80089f6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80089f6:	68fb      	ldr	r3, [r7, #12]
}
 80089f8:	0018      	movs	r0, r3
 80089fa:	46bd      	mov	sp, r7
 80089fc:	b004      	add	sp, #16
 80089fe:	bd80      	pop	{r7, pc}
 8008a00:	200036e4 	.word	0x200036e4
 8008a04:	200036c4 	.word	0x200036c4
 8008a08:	200035c0 	.word	0x200035c0
 8008a0c:	2000367c 	.word	0x2000367c
 8008a10:	200035bc 	.word	0x200035bc
 8008a14:	200036d0 	.word	0x200036d0

08008a18 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008a20:	4b05      	ldr	r3, [pc, #20]	; (8008a38 <vTaskInternalSetTimeOutState+0x20>)
 8008a22:	681a      	ldr	r2, [r3, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008a28:	4b04      	ldr	r3, [pc, #16]	; (8008a3c <vTaskInternalSetTimeOutState+0x24>)
 8008a2a:	681a      	ldr	r2, [r3, #0]
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	605a      	str	r2, [r3, #4]
}
 8008a30:	46c0      	nop			; (mov r8, r8)
 8008a32:	46bd      	mov	sp, r7
 8008a34:	b002      	add	sp, #8
 8008a36:	bd80      	pop	{r7, pc}
 8008a38:	200036d4 	.word	0x200036d4
 8008a3c:	200036c0 	.word	0x200036c0

08008a40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008a40:	b580      	push	{r7, lr}
 8008a42:	b086      	sub	sp, #24
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6078      	str	r0, [r7, #4]
 8008a48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d101      	bne.n	8008a54 <xTaskCheckForTimeOut+0x14>
 8008a50:	b672      	cpsid	i
 8008a52:	e7fe      	b.n	8008a52 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d101      	bne.n	8008a5e <xTaskCheckForTimeOut+0x1e>
 8008a5a:	b672      	cpsid	i
 8008a5c:	e7fe      	b.n	8008a5c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8008a5e:	f000 faef 	bl	8009040 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008a62:	4b1d      	ldr	r3, [pc, #116]	; (8008ad8 <xTaskCheckForTimeOut+0x98>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	685b      	ldr	r3, [r3, #4]
 8008a6c:	693a      	ldr	r2, [r7, #16]
 8008a6e:	1ad3      	subs	r3, r2, r3
 8008a70:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008a72:	683b      	ldr	r3, [r7, #0]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	3301      	adds	r3, #1
 8008a78:	d102      	bne.n	8008a80 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	617b      	str	r3, [r7, #20]
 8008a7e:	e024      	b.n	8008aca <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681a      	ldr	r2, [r3, #0]
 8008a84:	4b15      	ldr	r3, [pc, #84]	; (8008adc <xTaskCheckForTimeOut+0x9c>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	429a      	cmp	r2, r3
 8008a8a:	d007      	beq.n	8008a9c <xTaskCheckForTimeOut+0x5c>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	d302      	bcc.n	8008a9c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008a96:	2301      	movs	r3, #1
 8008a98:	617b      	str	r3, [r7, #20]
 8008a9a:	e016      	b.n	8008aca <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	68fa      	ldr	r2, [r7, #12]
 8008aa2:	429a      	cmp	r2, r3
 8008aa4:	d20c      	bcs.n	8008ac0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	1ad2      	subs	r2, r2, r3
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	0018      	movs	r0, r3
 8008ab6:	f7ff ffaf 	bl	8008a18 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008aba:	2300      	movs	r3, #0
 8008abc:	617b      	str	r3, [r7, #20]
 8008abe:	e004      	b.n	8008aca <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8008ac0:	683b      	ldr	r3, [r7, #0]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8008aca:	f000 facb 	bl	8009064 <vPortExitCritical>

	return xReturn;
 8008ace:	697b      	ldr	r3, [r7, #20]
}
 8008ad0:	0018      	movs	r0, r3
 8008ad2:	46bd      	mov	sp, r7
 8008ad4:	b006      	add	sp, #24
 8008ad6:	bd80      	pop	{r7, pc}
 8008ad8:	200036c0 	.word	0x200036c0
 8008adc:	200036d4 	.word	0x200036d4

08008ae0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008ae4:	4b02      	ldr	r3, [pc, #8]	; (8008af0 <vTaskMissedYield+0x10>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]
}
 8008aea:	46c0      	nop			; (mov r8, r8)
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	200036d0 	.word	0x200036d0

08008af4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b082      	sub	sp, #8
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008afc:	f000 f84e 	bl	8008b9c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008b00:	4b03      	ldr	r3, [pc, #12]	; (8008b10 <prvIdleTask+0x1c>)
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d9f9      	bls.n	8008afc <prvIdleTask+0x8>
			{
				taskYIELD();
 8008b08:	f000 fa8a 	bl	8009020 <vPortYield>
		prvCheckTasksWaitingTermination();
 8008b0c:	e7f6      	b.n	8008afc <prvIdleTask+0x8>
 8008b0e:	46c0      	nop			; (mov r8, r8)
 8008b10:	200035c0 	.word	0x200035c0

08008b14 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b082      	sub	sp, #8
 8008b18:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	607b      	str	r3, [r7, #4]
 8008b1e:	e00c      	b.n	8008b3a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008b20:	687a      	ldr	r2, [r7, #4]
 8008b22:	0013      	movs	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	189b      	adds	r3, r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4a14      	ldr	r2, [pc, #80]	; (8008b7c <prvInitialiseTaskLists+0x68>)
 8008b2c:	189b      	adds	r3, r3, r2
 8008b2e:	0018      	movs	r0, r3
 8008b30:	f7ff f8bd 	bl	8007cae <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	3301      	adds	r3, #1
 8008b38:	607b      	str	r3, [r7, #4]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	2b06      	cmp	r3, #6
 8008b3e:	d9ef      	bls.n	8008b20 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008b40:	4b0f      	ldr	r3, [pc, #60]	; (8008b80 <prvInitialiseTaskLists+0x6c>)
 8008b42:	0018      	movs	r0, r3
 8008b44:	f7ff f8b3 	bl	8007cae <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008b48:	4b0e      	ldr	r3, [pc, #56]	; (8008b84 <prvInitialiseTaskLists+0x70>)
 8008b4a:	0018      	movs	r0, r3
 8008b4c:	f7ff f8af 	bl	8007cae <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008b50:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <prvInitialiseTaskLists+0x74>)
 8008b52:	0018      	movs	r0, r3
 8008b54:	f7ff f8ab 	bl	8007cae <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008b58:	4b0c      	ldr	r3, [pc, #48]	; (8008b8c <prvInitialiseTaskLists+0x78>)
 8008b5a:	0018      	movs	r0, r3
 8008b5c:	f7ff f8a7 	bl	8007cae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008b60:	4b0b      	ldr	r3, [pc, #44]	; (8008b90 <prvInitialiseTaskLists+0x7c>)
 8008b62:	0018      	movs	r0, r3
 8008b64:	f7ff f8a3 	bl	8007cae <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008b68:	4b0a      	ldr	r3, [pc, #40]	; (8008b94 <prvInitialiseTaskLists+0x80>)
 8008b6a:	4a05      	ldr	r2, [pc, #20]	; (8008b80 <prvInitialiseTaskLists+0x6c>)
 8008b6c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008b6e:	4b0a      	ldr	r3, [pc, #40]	; (8008b98 <prvInitialiseTaskLists+0x84>)
 8008b70:	4a04      	ldr	r2, [pc, #16]	; (8008b84 <prvInitialiseTaskLists+0x70>)
 8008b72:	601a      	str	r2, [r3, #0]
}
 8008b74:	46c0      	nop			; (mov r8, r8)
 8008b76:	46bd      	mov	sp, r7
 8008b78:	b002      	add	sp, #8
 8008b7a:	bd80      	pop	{r7, pc}
 8008b7c:	200035c0 	.word	0x200035c0
 8008b80:	2000364c 	.word	0x2000364c
 8008b84:	20003660 	.word	0x20003660
 8008b88:	2000367c 	.word	0x2000367c
 8008b8c:	20003690 	.word	0x20003690
 8008b90:	200036a8 	.word	0x200036a8
 8008b94:	20003674 	.word	0x20003674
 8008b98:	20003678 	.word	0x20003678

08008b9c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ba2:	e01a      	b.n	8008bda <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008ba4:	f000 fa4c 	bl	8009040 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ba8:	4b10      	ldr	r3, [pc, #64]	; (8008bec <prvCheckTasksWaitingTermination+0x50>)
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	68db      	ldr	r3, [r3, #12]
 8008bae:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	3304      	adds	r3, #4
 8008bb4:	0018      	movs	r0, r3
 8008bb6:	f7ff f8fb 	bl	8007db0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008bba:	4b0d      	ldr	r3, [pc, #52]	; (8008bf0 <prvCheckTasksWaitingTermination+0x54>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	1e5a      	subs	r2, r3, #1
 8008bc0:	4b0b      	ldr	r3, [pc, #44]	; (8008bf0 <prvCheckTasksWaitingTermination+0x54>)
 8008bc2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008bc4:	4b0b      	ldr	r3, [pc, #44]	; (8008bf4 <prvCheckTasksWaitingTermination+0x58>)
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	1e5a      	subs	r2, r3, #1
 8008bca:	4b0a      	ldr	r3, [pc, #40]	; (8008bf4 <prvCheckTasksWaitingTermination+0x58>)
 8008bcc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8008bce:	f000 fa49 	bl	8009064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	0018      	movs	r0, r3
 8008bd6:	f000 f80f 	bl	8008bf8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008bda:	4b06      	ldr	r3, [pc, #24]	; (8008bf4 <prvCheckTasksWaitingTermination+0x58>)
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d1e0      	bne.n	8008ba4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008be2:	46c0      	nop			; (mov r8, r8)
 8008be4:	46c0      	nop			; (mov r8, r8)
 8008be6:	46bd      	mov	sp, r7
 8008be8:	b002      	add	sp, #8
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	20003690 	.word	0x20003690
 8008bf0:	200036bc 	.word	0x200036bc
 8008bf4:	200036a4 	.word	0x200036a4

08008bf8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b082      	sub	sp, #8
 8008bfc:	af00      	add	r7, sp, #0
 8008bfe:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c04:	0018      	movs	r0, r3
 8008c06:	f000 fb5f 	bl	80092c8 <vPortFree>
			vPortFree( pxTCB );
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	0018      	movs	r0, r3
 8008c0e:	f000 fb5b 	bl	80092c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008c12:	46c0      	nop			; (mov r8, r8)
 8008c14:	46bd      	mov	sp, r7
 8008c16:	b002      	add	sp, #8
 8008c18:	bd80      	pop	{r7, pc}
	...

08008c1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b082      	sub	sp, #8
 8008c20:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c22:	4b0b      	ldr	r3, [pc, #44]	; (8008c50 <prvResetNextTaskUnblockTime+0x34>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d104      	bne.n	8008c36 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008c2c:	4b09      	ldr	r3, [pc, #36]	; (8008c54 <prvResetNextTaskUnblockTime+0x38>)
 8008c2e:	2201      	movs	r2, #1
 8008c30:	4252      	negs	r2, r2
 8008c32:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008c34:	e008      	b.n	8008c48 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c36:	4b06      	ldr	r3, [pc, #24]	; (8008c50 <prvResetNextTaskUnblockTime+0x34>)
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68db      	ldr	r3, [r3, #12]
 8008c3c:	68db      	ldr	r3, [r3, #12]
 8008c3e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	685a      	ldr	r2, [r3, #4]
 8008c44:	4b03      	ldr	r3, [pc, #12]	; (8008c54 <prvResetNextTaskUnblockTime+0x38>)
 8008c46:	601a      	str	r2, [r3, #0]
}
 8008c48:	46c0      	nop			; (mov r8, r8)
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd80      	pop	{r7, pc}
 8008c50:	20003674 	.word	0x20003674
 8008c54:	200036dc 	.word	0x200036dc

08008c58 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b082      	sub	sp, #8
 8008c5c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008c5e:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <xTaskGetSchedulerState+0x30>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d102      	bne.n	8008c6c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008c66:	2301      	movs	r3, #1
 8008c68:	607b      	str	r3, [r7, #4]
 8008c6a:	e008      	b.n	8008c7e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c6c:	4b07      	ldr	r3, [pc, #28]	; (8008c8c <xTaskGetSchedulerState+0x34>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d102      	bne.n	8008c7a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008c74:	2302      	movs	r3, #2
 8008c76:	607b      	str	r3, [r7, #4]
 8008c78:	e001      	b.n	8008c7e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008c7e:	687b      	ldr	r3, [r7, #4]
	}
 8008c80:	0018      	movs	r0, r3
 8008c82:	46bd      	mov	sp, r7
 8008c84:	b002      	add	sp, #8
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	200036c8 	.word	0x200036c8
 8008c8c:	200036e4 	.word	0x200036e4

08008c90 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d051      	beq.n	8008d4a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8008ca6:	68bb      	ldr	r3, [r7, #8]
 8008ca8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008caa:	4b2a      	ldr	r3, [pc, #168]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d241      	bcs.n	8008d38 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	db06      	blt.n	8008cca <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008cbc:	4b25      	ldr	r3, [pc, #148]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cc2:	2207      	movs	r2, #7
 8008cc4:	1ad2      	subs	r2, r2, r3
 8008cc6:	68bb      	ldr	r3, [r7, #8]
 8008cc8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8008cca:	68bb      	ldr	r3, [r7, #8]
 8008ccc:	6959      	ldr	r1, [r3, #20]
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cd2:	0013      	movs	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	189b      	adds	r3, r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	4a1f      	ldr	r2, [pc, #124]	; (8008d58 <xTaskPriorityInherit+0xc8>)
 8008cdc:	189b      	adds	r3, r3, r2
 8008cde:	4299      	cmp	r1, r3
 8008ce0:	d122      	bne.n	8008d28 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	3304      	adds	r3, #4
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f7ff f862 	bl	8007db0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008cec:	4b19      	ldr	r3, [pc, #100]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8008cf6:	68bb      	ldr	r3, [r7, #8]
 8008cf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008cfa:	4b18      	ldr	r3, [pc, #96]	; (8008d5c <xTaskPriorityInherit+0xcc>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d903      	bls.n	8008d0a <xTaskPriorityInherit+0x7a>
 8008d02:	68bb      	ldr	r3, [r7, #8]
 8008d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d06:	4b15      	ldr	r3, [pc, #84]	; (8008d5c <xTaskPriorityInherit+0xcc>)
 8008d08:	601a      	str	r2, [r3, #0]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d0e:	0013      	movs	r3, r2
 8008d10:	009b      	lsls	r3, r3, #2
 8008d12:	189b      	adds	r3, r3, r2
 8008d14:	009b      	lsls	r3, r3, #2
 8008d16:	4a10      	ldr	r2, [pc, #64]	; (8008d58 <xTaskPriorityInherit+0xc8>)
 8008d18:	189a      	adds	r2, r3, r2
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	3304      	adds	r3, #4
 8008d1e:	0019      	movs	r1, r3
 8008d20:	0010      	movs	r0, r2
 8008d22:	f7fe ffed 	bl	8007d00 <vListInsertEnd>
 8008d26:	e004      	b.n	8008d32 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8008d28:	4b0a      	ldr	r3, [pc, #40]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008d2e:	68bb      	ldr	r3, [r7, #8]
 8008d30:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008d32:	2301      	movs	r3, #1
 8008d34:	60fb      	str	r3, [r7, #12]
 8008d36:	e008      	b.n	8008d4a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8008d38:	68bb      	ldr	r3, [r7, #8]
 8008d3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008d3c:	4b05      	ldr	r3, [pc, #20]	; (8008d54 <xTaskPriorityInherit+0xc4>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d42:	429a      	cmp	r2, r3
 8008d44:	d201      	bcs.n	8008d4a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8008d46:	2301      	movs	r3, #1
 8008d48:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
	}
 8008d4c:	0018      	movs	r0, r3
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	b004      	add	sp, #16
 8008d52:	bd80      	pop	{r7, pc}
 8008d54:	200035bc 	.word	0x200035bc
 8008d58:	200035c0 	.word	0x200035c0
 8008d5c:	200036c4 	.word	0x200036c4

08008d60 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b086      	sub	sp, #24
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d058      	beq.n	8008e2a <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008d78:	693b      	ldr	r3, [r7, #16]
 8008d7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d101      	bne.n	8008d84 <vTaskPriorityDisinheritAfterTimeout+0x24>
 8008d80:	b672      	cpsid	i
 8008d82:	e7fe      	b.n	8008d82 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008d84:	693b      	ldr	r3, [r7, #16]
 8008d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d88:	683a      	ldr	r2, [r7, #0]
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d902      	bls.n	8008d94 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	617b      	str	r3, [r7, #20]
 8008d92:	e002      	b.n	8008d9a <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008d94:	693b      	ldr	r3, [r7, #16]
 8008d96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d98:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d042      	beq.n	8008e2a <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008da8:	68fa      	ldr	r2, [r7, #12]
 8008daa:	429a      	cmp	r2, r3
 8008dac:	d13d      	bne.n	8008e2a <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008dae:	4b21      	ldr	r3, [pc, #132]	; (8008e34 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d101      	bne.n	8008dbc <vTaskPriorityDisinheritAfterTimeout+0x5c>
 8008db8:	b672      	cpsid	i
 8008dba:	e7fe      	b.n	8008dba <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dc0:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	697a      	ldr	r2, [r7, #20]
 8008dc6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008dc8:	693b      	ldr	r3, [r7, #16]
 8008dca:	699b      	ldr	r3, [r3, #24]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	db04      	blt.n	8008dda <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2207      	movs	r2, #7
 8008dd4:	1ad2      	subs	r2, r2, r3
 8008dd6:	693b      	ldr	r3, [r7, #16]
 8008dd8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	6959      	ldr	r1, [r3, #20]
 8008dde:	68ba      	ldr	r2, [r7, #8]
 8008de0:	0013      	movs	r3, r2
 8008de2:	009b      	lsls	r3, r3, #2
 8008de4:	189b      	adds	r3, r3, r2
 8008de6:	009b      	lsls	r3, r3, #2
 8008de8:	4a13      	ldr	r2, [pc, #76]	; (8008e38 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8008dea:	189b      	adds	r3, r3, r2
 8008dec:	4299      	cmp	r1, r3
 8008dee:	d11c      	bne.n	8008e2a <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	3304      	adds	r3, #4
 8008df4:	0018      	movs	r0, r3
 8008df6:	f7fe ffdb 	bl	8007db0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008dfe:	4b0f      	ldr	r3, [pc, #60]	; (8008e3c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	429a      	cmp	r2, r3
 8008e04:	d903      	bls.n	8008e0e <vTaskPriorityDisinheritAfterTimeout+0xae>
 8008e06:	693b      	ldr	r3, [r7, #16]
 8008e08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e0a:	4b0c      	ldr	r3, [pc, #48]	; (8008e3c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 8008e0c:	601a      	str	r2, [r3, #0]
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e12:	0013      	movs	r3, r2
 8008e14:	009b      	lsls	r3, r3, #2
 8008e16:	189b      	adds	r3, r3, r2
 8008e18:	009b      	lsls	r3, r3, #2
 8008e1a:	4a07      	ldr	r2, [pc, #28]	; (8008e38 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 8008e1c:	189a      	adds	r2, r3, r2
 8008e1e:	693b      	ldr	r3, [r7, #16]
 8008e20:	3304      	adds	r3, #4
 8008e22:	0019      	movs	r1, r3
 8008e24:	0010      	movs	r0, r2
 8008e26:	f7fe ff6b 	bl	8007d00 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008e2a:	46c0      	nop			; (mov r8, r8)
 8008e2c:	46bd      	mov	sp, r7
 8008e2e:	b006      	add	sp, #24
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	46c0      	nop			; (mov r8, r8)
 8008e34:	200035bc 	.word	0x200035bc
 8008e38:	200035c0 	.word	0x200035c0
 8008e3c:	200036c4 	.word	0x200036c4

08008e40 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008e44:	4b06      	ldr	r3, [pc, #24]	; (8008e60 <pvTaskIncrementMutexHeldCount+0x20>)
 8008e46:	681b      	ldr	r3, [r3, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d004      	beq.n	8008e56 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008e4c:	4b04      	ldr	r3, [pc, #16]	; (8008e60 <pvTaskIncrementMutexHeldCount+0x20>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008e52:	3201      	adds	r2, #1
 8008e54:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8008e56:	4b02      	ldr	r3, [pc, #8]	; (8008e60 <pvTaskIncrementMutexHeldCount+0x20>)
 8008e58:	681b      	ldr	r3, [r3, #0]
	}
 8008e5a:	0018      	movs	r0, r3
 8008e5c:	46bd      	mov	sp, r7
 8008e5e:	bd80      	pop	{r7, pc}
 8008e60:	200035bc 	.word	0x200035bc

08008e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008e6e:	4b21      	ldr	r3, [pc, #132]	; (8008ef4 <prvAddCurrentTaskToDelayedList+0x90>)
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008e74:	4b20      	ldr	r3, [pc, #128]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3304      	adds	r3, #4
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	f7fe ff98 	bl	8007db0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	3301      	adds	r3, #1
 8008e84:	d10b      	bne.n	8008e9e <prvAddCurrentTaskToDelayedList+0x3a>
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d008      	beq.n	8008e9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008e8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	1d1a      	adds	r2, r3, #4
 8008e92:	4b1a      	ldr	r3, [pc, #104]	; (8008efc <prvAddCurrentTaskToDelayedList+0x98>)
 8008e94:	0011      	movs	r1, r2
 8008e96:	0018      	movs	r0, r3
 8008e98:	f7fe ff32 	bl	8007d00 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008e9c:	e026      	b.n	8008eec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008e9e:	68fa      	ldr	r2, [r7, #12]
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	18d3      	adds	r3, r2, r3
 8008ea4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ea6:	4b14      	ldr	r3, [pc, #80]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008eae:	68ba      	ldr	r2, [r7, #8]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d209      	bcs.n	8008eca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eb6:	4b12      	ldr	r3, [pc, #72]	; (8008f00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	4b0f      	ldr	r3, [pc, #60]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	3304      	adds	r3, #4
 8008ec0:	0019      	movs	r1, r3
 8008ec2:	0010      	movs	r0, r2
 8008ec4:	f7fe ff3e 	bl	8007d44 <vListInsert>
}
 8008ec8:	e010      	b.n	8008eec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008eca:	4b0e      	ldr	r3, [pc, #56]	; (8008f04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008ecc:	681a      	ldr	r2, [r3, #0]
 8008ece:	4b0a      	ldr	r3, [pc, #40]	; (8008ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	3304      	adds	r3, #4
 8008ed4:	0019      	movs	r1, r3
 8008ed6:	0010      	movs	r0, r2
 8008ed8:	f7fe ff34 	bl	8007d44 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008edc:	4b0a      	ldr	r3, [pc, #40]	; (8008f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	68ba      	ldr	r2, [r7, #8]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d202      	bcs.n	8008eec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008ee6:	4b08      	ldr	r3, [pc, #32]	; (8008f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008ee8:	68ba      	ldr	r2, [r7, #8]
 8008eea:	601a      	str	r2, [r3, #0]
}
 8008eec:	46c0      	nop			; (mov r8, r8)
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	b004      	add	sp, #16
 8008ef2:	bd80      	pop	{r7, pc}
 8008ef4:	200036c0 	.word	0x200036c0
 8008ef8:	200035bc 	.word	0x200035bc
 8008efc:	200036a8 	.word	0x200036a8
 8008f00:	20003678 	.word	0x20003678
 8008f04:	20003674 	.word	0x20003674
 8008f08:	200036dc 	.word	0x200036dc

08008f0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008f0c:	b580      	push	{r7, lr}
 8008f0e:	b084      	sub	sp, #16
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	60f8      	str	r0, [r7, #12]
 8008f14:	60b9      	str	r1, [r7, #8]
 8008f16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3b04      	subs	r3, #4
 8008f1c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	2280      	movs	r2, #128	; 0x80
 8008f22:	0452      	lsls	r2, r2, #17
 8008f24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	3b04      	subs	r3, #4
 8008f2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	3b04      	subs	r3, #4
 8008f36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008f38:	4a08      	ldr	r2, [pc, #32]	; (8008f5c <pxPortInitialiseStack+0x50>)
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	3b14      	subs	r3, #20
 8008f42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008f44:	687a      	ldr	r2, [r7, #4]
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3b20      	subs	r3, #32
 8008f4e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008f50:	68fb      	ldr	r3, [r7, #12]
}
 8008f52:	0018      	movs	r0, r3
 8008f54:	46bd      	mov	sp, r7
 8008f56:	b004      	add	sp, #16
 8008f58:	bd80      	pop	{r7, pc}
 8008f5a:	46c0      	nop			; (mov r8, r8)
 8008f5c:	08008f61 	.word	0x08008f61

08008f60 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008f60:	b580      	push	{r7, lr}
 8008f62:	b082      	sub	sp, #8
 8008f64:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008f66:	2300      	movs	r3, #0
 8008f68:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008f6a:	4b08      	ldr	r3, [pc, #32]	; (8008f8c <prvTaskExitError+0x2c>)
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	3301      	adds	r3, #1
 8008f70:	d001      	beq.n	8008f76 <prvTaskExitError+0x16>
 8008f72:	b672      	cpsid	i
 8008f74:	e7fe      	b.n	8008f74 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8008f76:	b672      	cpsid	i
	while( ulDummy == 0 )
 8008f78:	46c0      	nop			; (mov r8, r8)
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0fc      	beq.n	8008f7a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008f80:	46c0      	nop			; (mov r8, r8)
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	46bd      	mov	sp, r7
 8008f86:	b002      	add	sp, #8
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	46c0      	nop			; (mov r8, r8)
 8008f8c:	2000000c 	.word	0x2000000c

08008f90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8008f94:	46c0      	nop			; (mov r8, r8)
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bd80      	pop	{r7, pc}
 8008f9a:	0000      	movs	r0, r0
 8008f9c:	0000      	movs	r0, r0
	...

08008fa0 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008fa0:	4a0b      	ldr	r2, [pc, #44]	; (8008fd0 <pxCurrentTCBConst2>)
 8008fa2:	6813      	ldr	r3, [r2, #0]
 8008fa4:	6818      	ldr	r0, [r3, #0]
 8008fa6:	3020      	adds	r0, #32
 8008fa8:	f380 8809 	msr	PSP, r0
 8008fac:	2002      	movs	r0, #2
 8008fae:	f380 8814 	msr	CONTROL, r0
 8008fb2:	f3bf 8f6f 	isb	sy
 8008fb6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008fb8:	46ae      	mov	lr, r5
 8008fba:	bc08      	pop	{r3}
 8008fbc:	bc04      	pop	{r2}
 8008fbe:	b662      	cpsie	i
 8008fc0:	4718      	bx	r3
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	46c0      	nop			; (mov r8, r8)
 8008fc6:	46c0      	nop			; (mov r8, r8)
 8008fc8:	46c0      	nop			; (mov r8, r8)
 8008fca:	46c0      	nop			; (mov r8, r8)
 8008fcc:	46c0      	nop			; (mov r8, r8)
 8008fce:	46c0      	nop			; (mov r8, r8)

08008fd0 <pxCurrentTCBConst2>:
 8008fd0:	200035bc 	.word	0x200035bc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008fd4:	46c0      	nop			; (mov r8, r8)
 8008fd6:	46c0      	nop			; (mov r8, r8)

08008fd8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008fd8:	b580      	push	{r7, lr}
 8008fda:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008fdc:	4b0e      	ldr	r3, [pc, #56]	; (8009018 <xPortStartScheduler+0x40>)
 8008fde:	681a      	ldr	r2, [r3, #0]
 8008fe0:	4b0d      	ldr	r3, [pc, #52]	; (8009018 <xPortStartScheduler+0x40>)
 8008fe2:	21ff      	movs	r1, #255	; 0xff
 8008fe4:	0409      	lsls	r1, r1, #16
 8008fe6:	430a      	orrs	r2, r1
 8008fe8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008fea:	4b0b      	ldr	r3, [pc, #44]	; (8009018 <xPortStartScheduler+0x40>)
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <xPortStartScheduler+0x40>)
 8008ff0:	21ff      	movs	r1, #255	; 0xff
 8008ff2:	0609      	lsls	r1, r1, #24
 8008ff4:	430a      	orrs	r2, r1
 8008ff6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008ff8:	f000 f898 	bl	800912c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008ffc:	4b07      	ldr	r3, [pc, #28]	; (800901c <xPortStartScheduler+0x44>)
 8008ffe:	2200      	movs	r2, #0
 8009000:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009002:	f7ff ffcd 	bl	8008fa0 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009006:	f7ff fc3b 	bl	8008880 <vTaskSwitchContext>
	prvTaskExitError();
 800900a:	f7ff ffa9 	bl	8008f60 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800900e:	2300      	movs	r3, #0
}
 8009010:	0018      	movs	r0, r3
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}
 8009016:	46c0      	nop			; (mov r8, r8)
 8009018:	e000ed20 	.word	0xe000ed20
 800901c:	2000000c 	.word	0x2000000c

08009020 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009020:	b580      	push	{r7, lr}
 8009022:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <vPortYield+0x1c>)
 8009026:	2280      	movs	r2, #128	; 0x80
 8009028:	0552      	lsls	r2, r2, #21
 800902a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800902c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009030:	f3bf 8f6f 	isb	sy
}
 8009034:	46c0      	nop			; (mov r8, r8)
 8009036:	46bd      	mov	sp, r7
 8009038:	bd80      	pop	{r7, pc}
 800903a:	46c0      	nop			; (mov r8, r8)
 800903c:	e000ed04 	.word	0xe000ed04

08009040 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009040:	b580      	push	{r7, lr}
 8009042:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8009044:	b672      	cpsid	i
	uxCriticalNesting++;
 8009046:	4b06      	ldr	r3, [pc, #24]	; (8009060 <vPortEnterCritical+0x20>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	1c5a      	adds	r2, r3, #1
 800904c:	4b04      	ldr	r3, [pc, #16]	; (8009060 <vPortEnterCritical+0x20>)
 800904e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8009050:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8009054:	f3bf 8f6f 	isb	sy
}
 8009058:	46c0      	nop			; (mov r8, r8)
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	2000000c 	.word	0x2000000c

08009064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009068:	4b09      	ldr	r3, [pc, #36]	; (8009090 <vPortExitCritical+0x2c>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d101      	bne.n	8009074 <vPortExitCritical+0x10>
 8009070:	b672      	cpsid	i
 8009072:	e7fe      	b.n	8009072 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8009074:	4b06      	ldr	r3, [pc, #24]	; (8009090 <vPortExitCritical+0x2c>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	1e5a      	subs	r2, r3, #1
 800907a:	4b05      	ldr	r3, [pc, #20]	; (8009090 <vPortExitCritical+0x2c>)
 800907c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800907e:	4b04      	ldr	r3, [pc, #16]	; (8009090 <vPortExitCritical+0x2c>)
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	2b00      	cmp	r3, #0
 8009084:	d100      	bne.n	8009088 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8009086:	b662      	cpsie	i
	}
}
 8009088:	46c0      	nop			; (mov r8, r8)
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}
 800908e:	46c0      	nop			; (mov r8, r8)
 8009090:	2000000c 	.word	0x2000000c

08009094 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009094:	f3ef 8010 	mrs	r0, PRIMASK
 8009098:	b672      	cpsid	i
 800909a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800909c:	46c0      	nop			; (mov r8, r8)
 800909e:	0018      	movs	r0, r3

080090a0 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 80090a0:	f380 8810 	msr	PRIMASK, r0
 80090a4:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 80090a6:	46c0      	nop			; (mov r8, r8)
	...

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	4b0e      	ldr	r3, [pc, #56]	; (80090f0 <pxCurrentTCBConst>)
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	3820      	subs	r0, #32
 80090ba:	6010      	str	r0, [r2, #0]
 80090bc:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80090be:	4644      	mov	r4, r8
 80090c0:	464d      	mov	r5, r9
 80090c2:	4656      	mov	r6, sl
 80090c4:	465f      	mov	r7, fp
 80090c6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80090c8:	b508      	push	{r3, lr}
 80090ca:	b672      	cpsid	i
 80090cc:	f7ff fbd8 	bl	8008880 <vTaskSwitchContext>
 80090d0:	b662      	cpsie	i
 80090d2:	bc0c      	pop	{r2, r3}
 80090d4:	6811      	ldr	r1, [r2, #0]
 80090d6:	6808      	ldr	r0, [r1, #0]
 80090d8:	3010      	adds	r0, #16
 80090da:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80090dc:	46a0      	mov	r8, r4
 80090de:	46a9      	mov	r9, r5
 80090e0:	46b2      	mov	sl, r6
 80090e2:	46bb      	mov	fp, r7
 80090e4:	f380 8809 	msr	PSP, r0
 80090e8:	3820      	subs	r0, #32
 80090ea:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80090ec:	4718      	bx	r3
 80090ee:	46c0      	nop			; (mov r8, r8)

080090f0 <pxCurrentTCBConst>:
 80090f0:	200035bc 	.word	0x200035bc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80090f4:	46c0      	nop			; (mov r8, r8)
 80090f6:	46c0      	nop			; (mov r8, r8)

080090f8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80090fe:	f7ff ffc9 	bl	8009094 <ulSetInterruptMaskFromISR>
 8009102:	0003      	movs	r3, r0
 8009104:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009106:	f7ff fb0b 	bl	8008720 <xTaskIncrementTick>
 800910a:	1e03      	subs	r3, r0, #0
 800910c:	d003      	beq.n	8009116 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800910e:	4b06      	ldr	r3, [pc, #24]	; (8009128 <SysTick_Handler+0x30>)
 8009110:	2280      	movs	r2, #128	; 0x80
 8009112:	0552      	lsls	r2, r2, #21
 8009114:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	0018      	movs	r0, r3
 800911a:	f7ff ffc1 	bl	80090a0 <vClearInterruptMaskFromISR>
}
 800911e:	46c0      	nop			; (mov r8, r8)
 8009120:	46bd      	mov	sp, r7
 8009122:	b002      	add	sp, #8
 8009124:	bd80      	pop	{r7, pc}
 8009126:	46c0      	nop			; (mov r8, r8)
 8009128:	e000ed04 	.word	0xe000ed04

0800912c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009130:	4b0b      	ldr	r3, [pc, #44]	; (8009160 <vPortSetupTimerInterrupt+0x34>)
 8009132:	2200      	movs	r2, #0
 8009134:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009136:	4b0b      	ldr	r3, [pc, #44]	; (8009164 <vPortSetupTimerInterrupt+0x38>)
 8009138:	2200      	movs	r2, #0
 800913a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800913c:	4b0a      	ldr	r3, [pc, #40]	; (8009168 <vPortSetupTimerInterrupt+0x3c>)
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	22fa      	movs	r2, #250	; 0xfa
 8009142:	0091      	lsls	r1, r2, #2
 8009144:	0018      	movs	r0, r3
 8009146:	f7f6 ffe9 	bl	800011c <__udivsi3>
 800914a:	0003      	movs	r3, r0
 800914c:	001a      	movs	r2, r3
 800914e:	4b07      	ldr	r3, [pc, #28]	; (800916c <vPortSetupTimerInterrupt+0x40>)
 8009150:	3a01      	subs	r2, #1
 8009152:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8009154:	4b02      	ldr	r3, [pc, #8]	; (8009160 <vPortSetupTimerInterrupt+0x34>)
 8009156:	2207      	movs	r2, #7
 8009158:	601a      	str	r2, [r3, #0]
}
 800915a:	46c0      	nop			; (mov r8, r8)
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	e000e010 	.word	0xe000e010
 8009164:	e000e018 	.word	0xe000e018
 8009168:	20000000 	.word	0x20000000
 800916c:	e000e014 	.word	0xe000e014

08009170 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b086      	sub	sp, #24
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800917c:	f7ff fa38 	bl	80085f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009180:	4b4b      	ldr	r3, [pc, #300]	; (80092b0 <pvPortMalloc+0x140>)
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	2b00      	cmp	r3, #0
 8009186:	d101      	bne.n	800918c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009188:	f000 f8ec 	bl	8009364 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800918c:	4b49      	ldr	r3, [pc, #292]	; (80092b4 <pvPortMalloc+0x144>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	687a      	ldr	r2, [r7, #4]
 8009192:	4013      	ands	r3, r2
 8009194:	d000      	beq.n	8009198 <pvPortMalloc+0x28>
 8009196:	e07e      	b.n	8009296 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	2b00      	cmp	r3, #0
 800919c:	d012      	beq.n	80091c4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800919e:	2208      	movs	r2, #8
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	189b      	adds	r3, r3, r2
 80091a4:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	2207      	movs	r2, #7
 80091aa:	4013      	ands	r3, r2
 80091ac:	d00a      	beq.n	80091c4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	2207      	movs	r2, #7
 80091b2:	4393      	bics	r3, r2
 80091b4:	3308      	adds	r3, #8
 80091b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2207      	movs	r2, #7
 80091bc:	4013      	ands	r3, r2
 80091be:	d001      	beq.n	80091c4 <pvPortMalloc+0x54>
 80091c0:	b672      	cpsid	i
 80091c2:	e7fe      	b.n	80091c2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d065      	beq.n	8009296 <pvPortMalloc+0x126>
 80091ca:	4b3b      	ldr	r3, [pc, #236]	; (80092b8 <pvPortMalloc+0x148>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	687a      	ldr	r2, [r7, #4]
 80091d0:	429a      	cmp	r2, r3
 80091d2:	d860      	bhi.n	8009296 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80091d4:	4b39      	ldr	r3, [pc, #228]	; (80092bc <pvPortMalloc+0x14c>)
 80091d6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80091d8:	4b38      	ldr	r3, [pc, #224]	; (80092bc <pvPortMalloc+0x14c>)
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091de:	e004      	b.n	80091ea <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80091ea:	697b      	ldr	r3, [r7, #20]
 80091ec:	685b      	ldr	r3, [r3, #4]
 80091ee:	687a      	ldr	r2, [r7, #4]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d903      	bls.n	80091fc <pvPortMalloc+0x8c>
 80091f4:	697b      	ldr	r3, [r7, #20]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	2b00      	cmp	r3, #0
 80091fa:	d1f1      	bne.n	80091e0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80091fc:	4b2c      	ldr	r3, [pc, #176]	; (80092b0 <pvPortMalloc+0x140>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	429a      	cmp	r2, r3
 8009204:	d047      	beq.n	8009296 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	2208      	movs	r2, #8
 800920c:	189b      	adds	r3, r3, r2
 800920e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	681a      	ldr	r2, [r3, #0]
 8009214:	693b      	ldr	r3, [r7, #16]
 8009216:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	1ad2      	subs	r2, r2, r3
 8009220:	2308      	movs	r3, #8
 8009222:	005b      	lsls	r3, r3, #1
 8009224:	429a      	cmp	r2, r3
 8009226:	d916      	bls.n	8009256 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009228:	697a      	ldr	r2, [r7, #20]
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	18d3      	adds	r3, r2, r3
 800922e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009230:	68bb      	ldr	r3, [r7, #8]
 8009232:	2207      	movs	r2, #7
 8009234:	4013      	ands	r3, r2
 8009236:	d001      	beq.n	800923c <pvPortMalloc+0xcc>
 8009238:	b672      	cpsid	i
 800923a:	e7fe      	b.n	800923a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	685a      	ldr	r2, [r3, #4]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	1ad2      	subs	r2, r2, r3
 8009244:	68bb      	ldr	r3, [r7, #8]
 8009246:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009248:	697b      	ldr	r3, [r7, #20]
 800924a:	687a      	ldr	r2, [r7, #4]
 800924c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800924e:	68bb      	ldr	r3, [r7, #8]
 8009250:	0018      	movs	r0, r3
 8009252:	f000 f8e7 	bl	8009424 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009256:	4b18      	ldr	r3, [pc, #96]	; (80092b8 <pvPortMalloc+0x148>)
 8009258:	681a      	ldr	r2, [r3, #0]
 800925a:	697b      	ldr	r3, [r7, #20]
 800925c:	685b      	ldr	r3, [r3, #4]
 800925e:	1ad2      	subs	r2, r2, r3
 8009260:	4b15      	ldr	r3, [pc, #84]	; (80092b8 <pvPortMalloc+0x148>)
 8009262:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009264:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <pvPortMalloc+0x148>)
 8009266:	681a      	ldr	r2, [r3, #0]
 8009268:	4b15      	ldr	r3, [pc, #84]	; (80092c0 <pvPortMalloc+0x150>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	429a      	cmp	r2, r3
 800926e:	d203      	bcs.n	8009278 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009270:	4b11      	ldr	r3, [pc, #68]	; (80092b8 <pvPortMalloc+0x148>)
 8009272:	681a      	ldr	r2, [r3, #0]
 8009274:	4b12      	ldr	r3, [pc, #72]	; (80092c0 <pvPortMalloc+0x150>)
 8009276:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009278:	697b      	ldr	r3, [r7, #20]
 800927a:	685a      	ldr	r2, [r3, #4]
 800927c:	4b0d      	ldr	r3, [pc, #52]	; (80092b4 <pvPortMalloc+0x144>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	431a      	orrs	r2, r3
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009286:	697b      	ldr	r3, [r7, #20]
 8009288:	2200      	movs	r2, #0
 800928a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800928c:	4b0d      	ldr	r3, [pc, #52]	; (80092c4 <pvPortMalloc+0x154>)
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	1c5a      	adds	r2, r3, #1
 8009292:	4b0c      	ldr	r3, [pc, #48]	; (80092c4 <pvPortMalloc+0x154>)
 8009294:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009296:	f7ff f9b7 	bl	8008608 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	2207      	movs	r2, #7
 800929e:	4013      	ands	r3, r2
 80092a0:	d001      	beq.n	80092a6 <pvPortMalloc+0x136>
 80092a2:	b672      	cpsid	i
 80092a4:	e7fe      	b.n	80092a4 <pvPortMalloc+0x134>
	return pvReturn;
 80092a6:	68fb      	ldr	r3, [r7, #12]
}
 80092a8:	0018      	movs	r0, r3
 80092aa:	46bd      	mov	sp, r7
 80092ac:	b006      	add	sp, #24
 80092ae:	bd80      	pop	{r7, pc}
 80092b0:	20008510 	.word	0x20008510
 80092b4:	20008524 	.word	0x20008524
 80092b8:	20008514 	.word	0x20008514
 80092bc:	20008508 	.word	0x20008508
 80092c0:	20008518 	.word	0x20008518
 80092c4:	2000851c 	.word	0x2000851c

080092c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80092c8:	b580      	push	{r7, lr}
 80092ca:	b084      	sub	sp, #16
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d03a      	beq.n	8009350 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80092da:	2308      	movs	r3, #8
 80092dc:	425b      	negs	r3, r3
 80092de:	68fa      	ldr	r2, [r7, #12]
 80092e0:	18d3      	adds	r3, r2, r3
 80092e2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	685a      	ldr	r2, [r3, #4]
 80092ec:	4b1a      	ldr	r3, [pc, #104]	; (8009358 <vPortFree+0x90>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4013      	ands	r3, r2
 80092f2:	d101      	bne.n	80092f8 <vPortFree+0x30>
 80092f4:	b672      	cpsid	i
 80092f6:	e7fe      	b.n	80092f6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80092f8:	68bb      	ldr	r3, [r7, #8]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d001      	beq.n	8009304 <vPortFree+0x3c>
 8009300:	b672      	cpsid	i
 8009302:	e7fe      	b.n	8009302 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	685a      	ldr	r2, [r3, #4]
 8009308:	4b13      	ldr	r3, [pc, #76]	; (8009358 <vPortFree+0x90>)
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	4013      	ands	r3, r2
 800930e:	d01f      	beq.n	8009350 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	2b00      	cmp	r3, #0
 8009316:	d11b      	bne.n	8009350 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	685a      	ldr	r2, [r3, #4]
 800931c:	4b0e      	ldr	r3, [pc, #56]	; (8009358 <vPortFree+0x90>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	43db      	mvns	r3, r3
 8009322:	401a      	ands	r2, r3
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009328:	f7ff f962 	bl	80085f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	685a      	ldr	r2, [r3, #4]
 8009330:	4b0a      	ldr	r3, [pc, #40]	; (800935c <vPortFree+0x94>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	18d2      	adds	r2, r2, r3
 8009336:	4b09      	ldr	r3, [pc, #36]	; (800935c <vPortFree+0x94>)
 8009338:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800933a:	68bb      	ldr	r3, [r7, #8]
 800933c:	0018      	movs	r0, r3
 800933e:	f000 f871 	bl	8009424 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009342:	4b07      	ldr	r3, [pc, #28]	; (8009360 <vPortFree+0x98>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	1c5a      	adds	r2, r3, #1
 8009348:	4b05      	ldr	r3, [pc, #20]	; (8009360 <vPortFree+0x98>)
 800934a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800934c:	f7ff f95c 	bl	8008608 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009350:	46c0      	nop			; (mov r8, r8)
 8009352:	46bd      	mov	sp, r7
 8009354:	b004      	add	sp, #16
 8009356:	bd80      	pop	{r7, pc}
 8009358:	20008524 	.word	0x20008524
 800935c:	20008514 	.word	0x20008514
 8009360:	20008520 	.word	0x20008520

08009364 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b084      	sub	sp, #16
 8009368:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800936a:	4b27      	ldr	r3, [pc, #156]	; (8009408 <prvHeapInit+0xa4>)
 800936c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800936e:	4b27      	ldr	r3, [pc, #156]	; (800940c <prvHeapInit+0xa8>)
 8009370:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2207      	movs	r2, #7
 8009376:	4013      	ands	r3, r2
 8009378:	d00c      	beq.n	8009394 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	3307      	adds	r3, #7
 800937e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2207      	movs	r2, #7
 8009384:	4393      	bics	r3, r2
 8009386:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009388:	68ba      	ldr	r2, [r7, #8]
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	1ad2      	subs	r2, r2, r3
 800938e:	4b1f      	ldr	r3, [pc, #124]	; (800940c <prvHeapInit+0xa8>)
 8009390:	18d3      	adds	r3, r2, r3
 8009392:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009398:	4b1d      	ldr	r3, [pc, #116]	; (8009410 <prvHeapInit+0xac>)
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800939e:	4b1c      	ldr	r3, [pc, #112]	; (8009410 <prvHeapInit+0xac>)
 80093a0:	2200      	movs	r2, #0
 80093a2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	68ba      	ldr	r2, [r7, #8]
 80093a8:	18d3      	adds	r3, r2, r3
 80093aa:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80093ac:	2208      	movs	r2, #8
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	1a9b      	subs	r3, r3, r2
 80093b2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2207      	movs	r2, #7
 80093b8:	4393      	bics	r3, r2
 80093ba:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80093bc:	68fa      	ldr	r2, [r7, #12]
 80093be:	4b15      	ldr	r3, [pc, #84]	; (8009414 <prvHeapInit+0xb0>)
 80093c0:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 80093c2:	4b14      	ldr	r3, [pc, #80]	; (8009414 <prvHeapInit+0xb0>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	2200      	movs	r2, #0
 80093c8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80093ca:	4b12      	ldr	r3, [pc, #72]	; (8009414 <prvHeapInit+0xb0>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	2200      	movs	r2, #0
 80093d0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80093d6:	683b      	ldr	r3, [r7, #0]
 80093d8:	68fa      	ldr	r2, [r7, #12]
 80093da:	1ad2      	subs	r2, r2, r3
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80093e0:	4b0c      	ldr	r3, [pc, #48]	; (8009414 <prvHeapInit+0xb0>)
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	683b      	ldr	r3, [r7, #0]
 80093e6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093e8:	683b      	ldr	r3, [r7, #0]
 80093ea:	685a      	ldr	r2, [r3, #4]
 80093ec:	4b0a      	ldr	r3, [pc, #40]	; (8009418 <prvHeapInit+0xb4>)
 80093ee:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	4b09      	ldr	r3, [pc, #36]	; (800941c <prvHeapInit+0xb8>)
 80093f6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80093f8:	4b09      	ldr	r3, [pc, #36]	; (8009420 <prvHeapInit+0xbc>)
 80093fa:	2280      	movs	r2, #128	; 0x80
 80093fc:	0612      	lsls	r2, r2, #24
 80093fe:	601a      	str	r2, [r3, #0]
}
 8009400:	46c0      	nop			; (mov r8, r8)
 8009402:	46bd      	mov	sp, r7
 8009404:	b004      	add	sp, #16
 8009406:	bd80      	pop	{r7, pc}
 8009408:	00004e20 	.word	0x00004e20
 800940c:	200036e8 	.word	0x200036e8
 8009410:	20008508 	.word	0x20008508
 8009414:	20008510 	.word	0x20008510
 8009418:	20008518 	.word	0x20008518
 800941c:	20008514 	.word	0x20008514
 8009420:	20008524 	.word	0x20008524

08009424 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009424:	b580      	push	{r7, lr}
 8009426:	b084      	sub	sp, #16
 8009428:	af00      	add	r7, sp, #0
 800942a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800942c:	4b27      	ldr	r3, [pc, #156]	; (80094cc <prvInsertBlockIntoFreeList+0xa8>)
 800942e:	60fb      	str	r3, [r7, #12]
 8009430:	e002      	b.n	8009438 <prvInsertBlockIntoFreeList+0x14>
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	60fb      	str	r3, [r7, #12]
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	429a      	cmp	r2, r3
 8009440:	d8f7      	bhi.n	8009432 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	685b      	ldr	r3, [r3, #4]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	18d3      	adds	r3, r2, r3
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	429a      	cmp	r2, r3
 8009452:	d108      	bne.n	8009466 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	685a      	ldr	r2, [r3, #4]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	18d2      	adds	r2, r2, r3
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	685b      	ldr	r3, [r3, #4]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	18d2      	adds	r2, r2, r3
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	429a      	cmp	r2, r3
 8009478:	d118      	bne.n	80094ac <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	681a      	ldr	r2, [r3, #0]
 800947e:	4b14      	ldr	r3, [pc, #80]	; (80094d0 <prvInsertBlockIntoFreeList+0xac>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	429a      	cmp	r2, r3
 8009484:	d00d      	beq.n	80094a2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685a      	ldr	r2, [r3, #4]
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	18d2      	adds	r2, r2, r3
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	681a      	ldr	r2, [r3, #0]
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	601a      	str	r2, [r3, #0]
 80094a0:	e008      	b.n	80094b4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80094a2:	4b0b      	ldr	r3, [pc, #44]	; (80094d0 <prvInsertBlockIntoFreeList+0xac>)
 80094a4:	681a      	ldr	r2, [r3, #0]
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	601a      	str	r2, [r3, #0]
 80094aa:	e003      	b.n	80094b4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	681a      	ldr	r2, [r3, #0]
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80094b4:	68fa      	ldr	r2, [r7, #12]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	429a      	cmp	r2, r3
 80094ba:	d002      	beq.n	80094c2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	687a      	ldr	r2, [r7, #4]
 80094c0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80094c2:	46c0      	nop			; (mov r8, r8)
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b004      	add	sp, #16
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	46c0      	nop			; (mov r8, r8)
 80094cc:	20008508 	.word	0x20008508
 80094d0:	20008510 	.word	0x20008510

080094d4 <LIDAR_start>:
#include "drv_LIDAR.h"
#include "stdio.h"

//Start scanning and export point cloud data
//Sustained response
int LIDAR_start(h_LIDAR_t * h_LIDAR){
 80094d4:	b590      	push	{r4, r7, lr}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_START};
 80094dc:	240c      	movs	r4, #12
 80094de:	193b      	adds	r3, r7, r4
 80094e0:	4a0a      	ldr	r2, [pc, #40]	; (800950c <LIDAR_start+0x38>)
 80094e2:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.dma_receive(h_LIDAR->data_buff,DATA_BUFF_SIZE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	695b      	ldr	r3, [r3, #20]
 80094e8:	687a      	ldr	r2, [r7, #4]
 80094ea:	3271      	adds	r2, #113	; 0x71
 80094ec:	21fa      	movs	r1, #250	; 0xfa
 80094ee:	0109      	lsls	r1, r1, #4
 80094f0:	0010      	movs	r0, r2
 80094f2:	4798      	blx	r3
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	193a      	adds	r2, r7, r4
 80094fa:	2102      	movs	r1, #2
 80094fc:	0010      	movs	r0, r2
 80094fe:	4798      	blx	r3
	return 0;
 8009500:	2300      	movs	r3, #0
}
 8009502:	0018      	movs	r0, r3
 8009504:	46bd      	mov	sp, r7
 8009506:	b005      	add	sp, #20
 8009508:	bd90      	pop	{r4, r7, pc}
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	000060a5 	.word	0x000060a5

08009510 <LIDAR_stop>:

//Stop and stop scanning
//No answer
int LIDAR_stop(h_LIDAR_t * h_LIDAR){
 8009510:	b580      	push	{r7, lr}
 8009512:	b084      	sub	sp, #16
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_STOP};
 8009518:	210c      	movs	r1, #12
 800951a:	187b      	adds	r3, r7, r1
 800951c:	4a06      	ldr	r2, [pc, #24]	; (8009538 <LIDAR_stop+0x28>)
 800951e:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	187a      	adds	r2, r7, r1
 8009526:	2102      	movs	r1, #2
 8009528:	0010      	movs	r0, r2
 800952a:	4798      	blx	r3
	return 0;
 800952c:	2300      	movs	r3, #0
}
 800952e:	0018      	movs	r0, r3
 8009530:	46bd      	mov	sp, r7
 8009532:	b004      	add	sp, #16
 8009534:	bd80      	pop	{r7, pc}
 8009536:	46c0      	nop			; (mov r8, r8)
 8009538:	000065a5 	.word	0x000065a5

0800953c <LIDAR_get_info>:

//Get device information
//Single response
int LIDAR_get_info(h_LIDAR_t * h_LIDAR){
 800953c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800953e:	46de      	mov	lr, fp
 8009540:	4657      	mov	r7, sl
 8009542:	464e      	mov	r6, r9
 8009544:	4645      	mov	r5, r8
 8009546:	b5e0      	push	{r5, r6, r7, lr}
 8009548:	b09b      	sub	sp, #108	; 0x6c
 800954a:	af10      	add	r7, sp, #64	; 0x40
 800954c:	61f8      	str	r0, [r7, #28]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_INFO}; //Buffer de commande
 800954e:	210c      	movs	r1, #12
 8009550:	2018      	movs	r0, #24
 8009552:	180b      	adds	r3, r1, r0
 8009554:	19db      	adds	r3, r3, r7
 8009556:	4a83      	ldr	r2, [pc, #524]	; (8009764 <LIDAR_get_info+0x228>)
 8009558:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
 800955a:	69fb      	ldr	r3, [r7, #28]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	180a      	adds	r2, r1, r0
 8009560:	19d2      	adds	r2, r2, r7
 8009562:	2102      	movs	r1, #2
 8009564:	0010      	movs	r0, r2
 8009566:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->info_buff,INFO_BUFF_SIZE);
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	68db      	ldr	r3, [r3, #12]
 800956c:	69fa      	ldr	r2, [r7, #28]
 800956e:	324c      	adds	r2, #76	; 0x4c
 8009570:	211b      	movs	r1, #27
 8009572:	0010      	movs	r0, r2
 8009574:	4798      	blx	r3

	h_LIDAR->device_info.start_sign=(h_LIDAR->info_buff[0]<<8)|h_LIDAR->info_buff[1];
 8009576:	69fb      	ldr	r3, [r7, #28]
 8009578:	224c      	movs	r2, #76	; 0x4c
 800957a:	5c9b      	ldrb	r3, [r3, r2]
 800957c:	021b      	lsls	r3, r3, #8
 800957e:	b21a      	sxth	r2, r3
 8009580:	69fb      	ldr	r3, [r7, #28]
 8009582:	214d      	movs	r1, #77	; 0x4d
 8009584:	5c5b      	ldrb	r3, [r3, r1]
 8009586:	b21b      	sxth	r3, r3
 8009588:	4313      	orrs	r3, r2
 800958a:	b21b      	sxth	r3, r3
 800958c:	b29a      	uxth	r2, r3
 800958e:	69fb      	ldr	r3, [r7, #28]
 8009590:	851a      	strh	r2, [r3, #40]	; 0x28
	h_LIDAR->device_info.lenght=(h_LIDAR->info_buff[2])|(h_LIDAR->info_buff[3]<<8)|(h_LIDAR->info_buff[4]<<16);
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	224e      	movs	r2, #78	; 0x4e
 8009596:	5c9b      	ldrb	r3, [r3, r2]
 8009598:	0019      	movs	r1, r3
 800959a:	69fb      	ldr	r3, [r7, #28]
 800959c:	224f      	movs	r2, #79	; 0x4f
 800959e:	5c9b      	ldrb	r3, [r3, r2]
 80095a0:	021b      	lsls	r3, r3, #8
 80095a2:	000a      	movs	r2, r1
 80095a4:	431a      	orrs	r2, r3
 80095a6:	69fb      	ldr	r3, [r7, #28]
 80095a8:	2150      	movs	r1, #80	; 0x50
 80095aa:	5c5b      	ldrb	r3, [r3, r1]
 80095ac:	041b      	lsls	r3, r3, #16
 80095ae:	4313      	orrs	r3, r2
 80095b0:	001a      	movs	r2, r3
 80095b2:	69fb      	ldr	r3, [r7, #28]
 80095b4:	62da      	str	r2, [r3, #44]	; 0x2c
	h_LIDAR->device_info.mode=h_LIDAR->info_buff[5];
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	2251      	movs	r2, #81	; 0x51
 80095ba:	5c99      	ldrb	r1, [r3, r2]
 80095bc:	69fb      	ldr	r3, [r7, #28]
 80095be:	2230      	movs	r2, #48	; 0x30
 80095c0:	5499      	strb	r1, [r3, r2]
	h_LIDAR->device_info.type_code=h_LIDAR->info_buff[6];
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	2252      	movs	r2, #82	; 0x52
 80095c6:	5c99      	ldrb	r1, [r3, r2]
 80095c8:	69fb      	ldr	r3, [r7, #28]
 80095ca:	2231      	movs	r2, #49	; 0x31
 80095cc:	5499      	strb	r1, [r3, r2]
	h_LIDAR->device_info.model=h_LIDAR->info_buff[7];
 80095ce:	69fb      	ldr	r3, [r7, #28]
 80095d0:	2253      	movs	r2, #83	; 0x53
 80095d2:	5c99      	ldrb	r1, [r3, r2]
 80095d4:	69fb      	ldr	r3, [r7, #28]
 80095d6:	2232      	movs	r2, #50	; 0x32
 80095d8:	5499      	strb	r1, [r3, r2]
	snprintf(h_LIDAR->device_info.firmware,6,"%d.%d",h_LIDAR->info_buff[8],h_LIDAR->info_buff[9]);
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	3333      	adds	r3, #51	; 0x33
 80095de:	0018      	movs	r0, r3
 80095e0:	69fb      	ldr	r3, [r7, #28]
 80095e2:	2254      	movs	r2, #84	; 0x54
 80095e4:	5c9b      	ldrb	r3, [r3, r2]
 80095e6:	0019      	movs	r1, r3
 80095e8:	69fb      	ldr	r3, [r7, #28]
 80095ea:	2255      	movs	r2, #85	; 0x55
 80095ec:	5c9b      	ldrb	r3, [r3, r2]
 80095ee:	4a5e      	ldr	r2, [pc, #376]	; (8009768 <LIDAR_get_info+0x22c>)
 80095f0:	9300      	str	r3, [sp, #0]
 80095f2:	000b      	movs	r3, r1
 80095f4:	2106      	movs	r1, #6
 80095f6:	f000 fc8d 	bl	8009f14 <sniprintf>
	h_LIDAR->device_info.hardware=h_LIDAR->info_buff[10];
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	2256      	movs	r2, #86	; 0x56
 80095fe:	5c99      	ldrb	r1, [r3, r2]
 8009600:	69fb      	ldr	r3, [r7, #28]
 8009602:	2239      	movs	r2, #57	; 0x39
 8009604:	5499      	strb	r1, [r3, r2]
	snprintf(h_LIDAR->device_info.serial,17,"%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x%x",h_LIDAR->info_buff[11],h_LIDAR->info_buff[12],h_LIDAR->info_buff[13],h_LIDAR->info_buff[14],h_LIDAR->info_buff[15],h_LIDAR->info_buff[16],h_LIDAR->info_buff[17],h_LIDAR->info_buff[18],h_LIDAR->info_buff[19],h_LIDAR->info_buff[20],h_LIDAR->info_buff[21],h_LIDAR->info_buff[22],h_LIDAR->info_buff[23],h_LIDAR->info_buff[24],h_LIDAR->info_buff[25],h_LIDAR->info_buff[26]);
 8009606:	69fb      	ldr	r3, [r7, #28]
 8009608:	333a      	adds	r3, #58	; 0x3a
 800960a:	001d      	movs	r5, r3
 800960c:	69fb      	ldr	r3, [r7, #28]
 800960e:	2257      	movs	r2, #87	; 0x57
 8009610:	5c9b      	ldrb	r3, [r3, r2]
 8009612:	61bb      	str	r3, [r7, #24]
 8009614:	69fb      	ldr	r3, [r7, #28]
 8009616:	2258      	movs	r2, #88	; 0x58
 8009618:	5c9b      	ldrb	r3, [r3, r2]
 800961a:	4698      	mov	r8, r3
 800961c:	69fb      	ldr	r3, [r7, #28]
 800961e:	2259      	movs	r2, #89	; 0x59
 8009620:	5c9b      	ldrb	r3, [r3, r2]
 8009622:	4699      	mov	r9, r3
 8009624:	69fb      	ldr	r3, [r7, #28]
 8009626:	225a      	movs	r2, #90	; 0x5a
 8009628:	5c9b      	ldrb	r3, [r3, r2]
 800962a:	469a      	mov	sl, r3
 800962c:	69fb      	ldr	r3, [r7, #28]
 800962e:	225b      	movs	r2, #91	; 0x5b
 8009630:	5c9b      	ldrb	r3, [r3, r2]
 8009632:	469b      	mov	fp, r3
 8009634:	69fb      	ldr	r3, [r7, #28]
 8009636:	225c      	movs	r2, #92	; 0x5c
 8009638:	5c9b      	ldrb	r3, [r3, r2]
 800963a:	617b      	str	r3, [r7, #20]
 800963c:	69fb      	ldr	r3, [r7, #28]
 800963e:	225d      	movs	r2, #93	; 0x5d
 8009640:	5c9b      	ldrb	r3, [r3, r2]
 8009642:	613b      	str	r3, [r7, #16]
 8009644:	69fb      	ldr	r3, [r7, #28]
 8009646:	225e      	movs	r2, #94	; 0x5e
 8009648:	5c9b      	ldrb	r3, [r3, r2]
 800964a:	60fb      	str	r3, [r7, #12]
 800964c:	69fb      	ldr	r3, [r7, #28]
 800964e:	225f      	movs	r2, #95	; 0x5f
 8009650:	5c9b      	ldrb	r3, [r3, r2]
 8009652:	60bb      	str	r3, [r7, #8]
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	2260      	movs	r2, #96	; 0x60
 8009658:	5c9b      	ldrb	r3, [r3, r2]
 800965a:	607b      	str	r3, [r7, #4]
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	2261      	movs	r2, #97	; 0x61
 8009660:	5c9b      	ldrb	r3, [r3, r2]
 8009662:	469c      	mov	ip, r3
 8009664:	69fa      	ldr	r2, [r7, #28]
 8009666:	2362      	movs	r3, #98	; 0x62
 8009668:	5cd3      	ldrb	r3, [r2, r3]
 800966a:	001e      	movs	r6, r3
 800966c:	69fa      	ldr	r2, [r7, #28]
 800966e:	2363      	movs	r3, #99	; 0x63
 8009670:	5cd3      	ldrb	r3, [r2, r3]
 8009672:	001c      	movs	r4, r3
 8009674:	69fa      	ldr	r2, [r7, #28]
 8009676:	2364      	movs	r3, #100	; 0x64
 8009678:	5cd3      	ldrb	r3, [r2, r3]
 800967a:	0018      	movs	r0, r3
 800967c:	69fa      	ldr	r2, [r7, #28]
 800967e:	2365      	movs	r3, #101	; 0x65
 8009680:	5cd3      	ldrb	r3, [r2, r3]
 8009682:	0019      	movs	r1, r3
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	2366      	movs	r3, #102	; 0x66
 8009688:	5cd3      	ldrb	r3, [r2, r3]
 800968a:	4a38      	ldr	r2, [pc, #224]	; (800976c <LIDAR_get_info+0x230>)
 800968c:	930e      	str	r3, [sp, #56]	; 0x38
 800968e:	910d      	str	r1, [sp, #52]	; 0x34
 8009690:	900c      	str	r0, [sp, #48]	; 0x30
 8009692:	940b      	str	r4, [sp, #44]	; 0x2c
 8009694:	960a      	str	r6, [sp, #40]	; 0x28
 8009696:	4661      	mov	r1, ip
 8009698:	9109      	str	r1, [sp, #36]	; 0x24
 800969a:	6879      	ldr	r1, [r7, #4]
 800969c:	9108      	str	r1, [sp, #32]
 800969e:	68b9      	ldr	r1, [r7, #8]
 80096a0:	9107      	str	r1, [sp, #28]
 80096a2:	68f9      	ldr	r1, [r7, #12]
 80096a4:	9106      	str	r1, [sp, #24]
 80096a6:	6939      	ldr	r1, [r7, #16]
 80096a8:	9105      	str	r1, [sp, #20]
 80096aa:	6979      	ldr	r1, [r7, #20]
 80096ac:	9104      	str	r1, [sp, #16]
 80096ae:	4659      	mov	r1, fp
 80096b0:	9103      	str	r1, [sp, #12]
 80096b2:	4651      	mov	r1, sl
 80096b4:	9102      	str	r1, [sp, #8]
 80096b6:	4649      	mov	r1, r9
 80096b8:	9101      	str	r1, [sp, #4]
 80096ba:	4641      	mov	r1, r8
 80096bc:	9100      	str	r1, [sp, #0]
 80096be:	69bb      	ldr	r3, [r7, #24]
 80096c0:	2111      	movs	r1, #17
 80096c2:	0028      	movs	r0, r5
 80096c4:	f000 fc26 	bl	8009f14 <sniprintf>

	printf("Start sign : %x\r\n",h_LIDAR->device_info.start_sign);
 80096c8:	69fb      	ldr	r3, [r7, #28]
 80096ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096cc:	001a      	movs	r2, r3
 80096ce:	4b28      	ldr	r3, [pc, #160]	; (8009770 <LIDAR_get_info+0x234>)
 80096d0:	0011      	movs	r1, r2
 80096d2:	0018      	movs	r0, r3
 80096d4:	f000 fbae 	bl	8009e34 <iprintf>
	printf("Length : %ld\r\n",h_LIDAR->device_info.lenght);
 80096d8:	69fb      	ldr	r3, [r7, #28]
 80096da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096dc:	4b25      	ldr	r3, [pc, #148]	; (8009774 <LIDAR_get_info+0x238>)
 80096de:	0011      	movs	r1, r2
 80096e0:	0018      	movs	r0, r3
 80096e2:	f000 fba7 	bl	8009e34 <iprintf>
	printf("Mode : %x\r\n",h_LIDAR->device_info.mode);
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	2230      	movs	r2, #48	; 0x30
 80096ea:	5c9b      	ldrb	r3, [r3, r2]
 80096ec:	001a      	movs	r2, r3
 80096ee:	4b22      	ldr	r3, [pc, #136]	; (8009778 <LIDAR_get_info+0x23c>)
 80096f0:	0011      	movs	r1, r2
 80096f2:	0018      	movs	r0, r3
 80096f4:	f000 fb9e 	bl	8009e34 <iprintf>
	printf("Type code : %x\r\n",h_LIDAR->device_info.type_code);
 80096f8:	69fb      	ldr	r3, [r7, #28]
 80096fa:	2231      	movs	r2, #49	; 0x31
 80096fc:	5c9b      	ldrb	r3, [r3, r2]
 80096fe:	001a      	movs	r2, r3
 8009700:	4b1e      	ldr	r3, [pc, #120]	; (800977c <LIDAR_get_info+0x240>)
 8009702:	0011      	movs	r1, r2
 8009704:	0018      	movs	r0, r3
 8009706:	f000 fb95 	bl	8009e34 <iprintf>
	printf("Model %x\r\n",h_LIDAR->device_info.model);
 800970a:	69fb      	ldr	r3, [r7, #28]
 800970c:	2232      	movs	r2, #50	; 0x32
 800970e:	5c9b      	ldrb	r3, [r3, r2]
 8009710:	001a      	movs	r2, r3
 8009712:	4b1b      	ldr	r3, [pc, #108]	; (8009780 <LIDAR_get_info+0x244>)
 8009714:	0011      	movs	r1, r2
 8009716:	0018      	movs	r0, r3
 8009718:	f000 fb8c 	bl	8009e34 <iprintf>
	printf("Firmware version : %s\r\n",h_LIDAR->device_info.firmware);
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	3333      	adds	r3, #51	; 0x33
 8009720:	001a      	movs	r2, r3
 8009722:	4b18      	ldr	r3, [pc, #96]	; (8009784 <LIDAR_get_info+0x248>)
 8009724:	0011      	movs	r1, r2
 8009726:	0018      	movs	r0, r3
 8009728:	f000 fb84 	bl	8009e34 <iprintf>
	printf("Hardware version : %d\r\n",h_LIDAR->device_info.hardware);
 800972c:	69fb      	ldr	r3, [r7, #28]
 800972e:	2239      	movs	r2, #57	; 0x39
 8009730:	5c9b      	ldrb	r3, [r3, r2]
 8009732:	001a      	movs	r2, r3
 8009734:	4b14      	ldr	r3, [pc, #80]	; (8009788 <LIDAR_get_info+0x24c>)
 8009736:	0011      	movs	r1, r2
 8009738:	0018      	movs	r0, r3
 800973a:	f000 fb7b 	bl	8009e34 <iprintf>
	printf("Serial number : %s\r\n",h_LIDAR->device_info.serial);
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	333a      	adds	r3, #58	; 0x3a
 8009742:	001a      	movs	r2, r3
 8009744:	4b11      	ldr	r3, [pc, #68]	; (800978c <LIDAR_get_info+0x250>)
 8009746:	0011      	movs	r1, r2
 8009748:	0018      	movs	r0, r3
 800974a:	f000 fb73 	bl	8009e34 <iprintf>

	return 0;
 800974e:	2300      	movs	r3, #0
}
 8009750:	0018      	movs	r0, r3
 8009752:	46bd      	mov	sp, r7
 8009754:	b00b      	add	sp, #44	; 0x2c
 8009756:	bcf0      	pop	{r4, r5, r6, r7}
 8009758:	46bb      	mov	fp, r7
 800975a:	46b2      	mov	sl, r6
 800975c:	46a9      	mov	r9, r5
 800975e:	46a0      	mov	r8, r4
 8009760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009762:	46c0      	nop			; (mov r8, r8)
 8009764:	ffff90a5 	.word	0xffff90a5
 8009768:	0800b0c8 	.word	0x0800b0c8
 800976c:	0800b0d0 	.word	0x0800b0d0
 8009770:	0800b0f4 	.word	0x0800b0f4
 8009774:	0800b108 	.word	0x0800b108
 8009778:	0800b118 	.word	0x0800b118
 800977c:	0800b124 	.word	0x0800b124
 8009780:	0800b138 	.word	0x0800b138
 8009784:	0800b144 	.word	0x0800b144
 8009788:	0800b15c 	.word	0x0800b15c
 800978c:	0800b174 	.word	0x0800b174

08009790 <LIDAR_get_health_stat>:

//Get device health status
//Single response
int LIDAR_get_health_stat(h_LIDAR_t * h_LIDAR){
 8009790:	b580      	push	{r7, lr}
 8009792:	b084      	sub	sp, #16
 8009794:	af00      	add	r7, sp, #0
 8009796:	6078      	str	r0, [r7, #4]
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_HEALTH}; //Buffer de commande
 8009798:	210c      	movs	r1, #12
 800979a:	187b      	adds	r3, r7, r1
 800979c:	4a42      	ldr	r2, [pc, #264]	; (80098a8 <LIDAR_get_health_stat+0x118>)
 800979e:	801a      	strh	r2, [r3, #0]
	h_LIDAR->serial_drv.transmit(cmd_buff,2);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	187a      	adds	r2, r7, r1
 80097a6:	2102      	movs	r1, #2
 80097a8:	0010      	movs	r0, r2
 80097aa:	4798      	blx	r3
	h_LIDAR->serial_drv.poll_receive(h_LIDAR->health_buff,HEALTH_BUFF_SIZE);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	68db      	ldr	r3, [r3, #12]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	3267      	adds	r2, #103	; 0x67
 80097b4:	210a      	movs	r1, #10
 80097b6:	0010      	movs	r0, r2
 80097b8:	4798      	blx	r3

	h_LIDAR->health_stat.start_sign=(h_LIDAR->health_buff[0]<<8)|h_LIDAR->health_buff[1];
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2267      	movs	r2, #103	; 0x67
 80097be:	5c9b      	ldrb	r3, [r3, r2]
 80097c0:	021b      	lsls	r3, r3, #8
 80097c2:	b21a      	sxth	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	2168      	movs	r1, #104	; 0x68
 80097c8:	5c5b      	ldrb	r3, [r3, r1]
 80097ca:	b21b      	sxth	r3, r3
 80097cc:	4313      	orrs	r3, r2
 80097ce:	b21b      	sxth	r3, r3
 80097d0:	b29a      	uxth	r2, r3
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	831a      	strh	r2, [r3, #24]
	h_LIDAR->health_stat.lenght=(h_LIDAR->health_buff[2])|(h_LIDAR->health_buff[3]<<8)|(h_LIDAR->health_buff[4]<<16);
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	2269      	movs	r2, #105	; 0x69
 80097da:	5c9b      	ldrb	r3, [r3, r2]
 80097dc:	0019      	movs	r1, r3
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	226a      	movs	r2, #106	; 0x6a
 80097e2:	5c9b      	ldrb	r3, [r3, r2]
 80097e4:	021b      	lsls	r3, r3, #8
 80097e6:	000a      	movs	r2, r1
 80097e8:	431a      	orrs	r2, r3
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	216b      	movs	r1, #107	; 0x6b
 80097ee:	5c5b      	ldrb	r3, [r3, r1]
 80097f0:	041b      	lsls	r3, r3, #16
 80097f2:	4313      	orrs	r3, r2
 80097f4:	001a      	movs	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	61da      	str	r2, [r3, #28]
	h_LIDAR->health_stat.mode=h_LIDAR->health_buff[5];
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	226c      	movs	r2, #108	; 0x6c
 80097fe:	5c99      	ldrb	r1, [r3, r2]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2220      	movs	r2, #32
 8009804:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.type_code=h_LIDAR->health_buff[6];
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	226d      	movs	r2, #109	; 0x6d
 800980a:	5c99      	ldrb	r1, [r3, r2]
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	2221      	movs	r2, #33	; 0x21
 8009810:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.status_code=h_LIDAR->health_buff[7];
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	226e      	movs	r2, #110	; 0x6e
 8009816:	5c99      	ldrb	r1, [r3, r2]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2222      	movs	r2, #34	; 0x22
 800981c:	5499      	strb	r1, [r3, r2]
	h_LIDAR->health_stat.error_code=h_LIDAR->health_buff[8]|(h_LIDAR->health_buff[9]<<8);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	226f      	movs	r2, #111	; 0x6f
 8009822:	5c9b      	ldrb	r3, [r3, r2]
 8009824:	b21a      	sxth	r2, r3
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2170      	movs	r1, #112	; 0x70
 800982a:	5c5b      	ldrb	r3, [r3, r1]
 800982c:	021b      	lsls	r3, r3, #8
 800982e:	b21b      	sxth	r3, r3
 8009830:	4313      	orrs	r3, r2
 8009832:	b21b      	sxth	r3, r3
 8009834:	b29a      	uxth	r2, r3
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	849a      	strh	r2, [r3, #36]	; 0x24

	printf("Start sign : %x\r\n",h_LIDAR->health_stat.start_sign);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	8b1b      	ldrh	r3, [r3, #24]
 800983e:	001a      	movs	r2, r3
 8009840:	4b1a      	ldr	r3, [pc, #104]	; (80098ac <LIDAR_get_health_stat+0x11c>)
 8009842:	0011      	movs	r1, r2
 8009844:	0018      	movs	r0, r3
 8009846:	f000 faf5 	bl	8009e34 <iprintf>
	printf("Length : %ld\r\n",h_LIDAR->health_stat.lenght);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	69da      	ldr	r2, [r3, #28]
 800984e:	4b18      	ldr	r3, [pc, #96]	; (80098b0 <LIDAR_get_health_stat+0x120>)
 8009850:	0011      	movs	r1, r2
 8009852:	0018      	movs	r0, r3
 8009854:	f000 faee 	bl	8009e34 <iprintf>
	printf("Mode : %x\r\n",h_LIDAR->health_stat.mode);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2220      	movs	r2, #32
 800985c:	5c9b      	ldrb	r3, [r3, r2]
 800985e:	001a      	movs	r2, r3
 8009860:	4b14      	ldr	r3, [pc, #80]	; (80098b4 <LIDAR_get_health_stat+0x124>)
 8009862:	0011      	movs	r1, r2
 8009864:	0018      	movs	r0, r3
 8009866:	f000 fae5 	bl	8009e34 <iprintf>
	printf("Type code : %x\r\n",h_LIDAR->health_stat.type_code);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2221      	movs	r2, #33	; 0x21
 800986e:	5c9b      	ldrb	r3, [r3, r2]
 8009870:	001a      	movs	r2, r3
 8009872:	4b11      	ldr	r3, [pc, #68]	; (80098b8 <LIDAR_get_health_stat+0x128>)
 8009874:	0011      	movs	r1, r2
 8009876:	0018      	movs	r0, r3
 8009878:	f000 fadc 	bl	8009e34 <iprintf>
	printf("Status code : %x\r\n",h_LIDAR->health_stat.status_code);
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	2222      	movs	r2, #34	; 0x22
 8009880:	5c9b      	ldrb	r3, [r3, r2]
 8009882:	001a      	movs	r2, r3
 8009884:	4b0d      	ldr	r3, [pc, #52]	; (80098bc <LIDAR_get_health_stat+0x12c>)
 8009886:	0011      	movs	r1, r2
 8009888:	0018      	movs	r0, r3
 800988a:	f000 fad3 	bl	8009e34 <iprintf>
	printf("Error code : %x\r\n",h_LIDAR->health_stat.error_code);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009892:	001a      	movs	r2, r3
 8009894:	4b0a      	ldr	r3, [pc, #40]	; (80098c0 <LIDAR_get_health_stat+0x130>)
 8009896:	0011      	movs	r1, r2
 8009898:	0018      	movs	r0, r3
 800989a:	f000 facb 	bl	8009e34 <iprintf>

	return 0;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	0018      	movs	r0, r3
 80098a2:	46bd      	mov	sp, r7
 80098a4:	b004      	add	sp, #16
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	ffff91a5 	.word	0xffff91a5
 80098ac:	0800b0f4 	.word	0x0800b0f4
 80098b0:	0800b108 	.word	0x0800b108
 80098b4:	0800b118 	.word	0x0800b118
 80098b8:	0800b124 	.word	0x0800b124
 80098bc:	0800b18c 	.word	0x0800b18c
 80098c0:	0800b1a0 	.word	0x0800b1a0

080098c4 <LIDAR_process_frame>:
	uint8_t cmd_buff[CMD_BUFF_SIZE]={CMD_BEGIN,CMD_RESTART};
	h_LIDAR->serial_drv.transmit(cmd_buff,CMD_BUFF_SIZE);
	return 0;
}

void LIDAR_process_frame(h_LIDAR_t * LIDAR){
 80098c4:	b590      	push	{r4, r7, lr}
 80098c6:	b08b      	sub	sp, #44	; 0x2c
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
	uint16_t Si;
	int Di;
	int Ai;
	int AngleFSA=(LIDAR->processing.FSA>>1); //64
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	4a43      	ldr	r2, [pc, #268]	; (80099dc <LIDAR_process_frame+0x118>)
 80098d0:	5a9b      	ldrh	r3, [r3, r2]
 80098d2:	085b      	lsrs	r3, r3, #1
 80098d4:	b29b      	uxth	r3, r3
 80098d6:	623b      	str	r3, [r7, #32]
	int AngleLSA=(LIDAR->processing.LSA>>1);
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	4a41      	ldr	r2, [pc, #260]	; (80099e0 <LIDAR_process_frame+0x11c>)
 80098dc:	5a9b      	ldrh	r3, [r3, r2]
 80098de:	085b      	lsrs	r3, r3, #1
 80098e0:	b29b      	uxth	r3, r3
 80098e2:	61fb      	str	r3, [r7, #28]
	int index;
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 80098e4:	2300      	movs	r3, #0
 80098e6:	627b      	str	r3, [r7, #36]	; 0x24
 80098e8:	e06a      	b.n	80099c0 <LIDAR_process_frame+0xfc>
		Si=LIDAR->processing.frame_buff[2*i]|(LIDAR->processing.frame_buff[2*i+1]<<8);
 80098ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098ec:	005b      	lsls	r3, r3, #1
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	493c      	ldr	r1, [pc, #240]	; (80099e4 <LIDAR_process_frame+0x120>)
 80098f2:	18d3      	adds	r3, r2, r3
 80098f4:	185b      	adds	r3, r3, r1
 80098f6:	781b      	ldrb	r3, [r3, #0]
 80098f8:	b21a      	sxth	r2, r3
 80098fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fc:	005b      	lsls	r3, r3, #1
 80098fe:	3301      	adds	r3, #1
 8009900:	6879      	ldr	r1, [r7, #4]
 8009902:	4838      	ldr	r0, [pc, #224]	; (80099e4 <LIDAR_process_frame+0x120>)
 8009904:	18cb      	adds	r3, r1, r3
 8009906:	181b      	adds	r3, r3, r0
 8009908:	781b      	ldrb	r3, [r3, #0]
 800990a:	021b      	lsls	r3, r3, #8
 800990c:	b21b      	sxth	r3, r3
 800990e:	4313      	orrs	r3, r2
 8009910:	b21a      	sxth	r2, r3
 8009912:	211a      	movs	r1, #26
 8009914:	187b      	adds	r3, r7, r1
 8009916:	801a      	strh	r2, [r3, #0]
		Di=Si/4; //Distance du point i
 8009918:	187b      	adds	r3, r7, r1
 800991a:	881b      	ldrh	r3, [r3, #0]
 800991c:	089b      	lsrs	r3, r3, #2
 800991e:	b29b      	uxth	r3, r3
 8009920:	617b      	str	r3, [r7, #20]
		Ai=AngleFSA/64+i*(AngleLSA-AngleFSA)/64/(LIDAR->processing.LSN-1);
 8009922:	6a3b      	ldr	r3, [r7, #32]
 8009924:	2b00      	cmp	r3, #0
 8009926:	da00      	bge.n	800992a <LIDAR_process_frame+0x66>
 8009928:	333f      	adds	r3, #63	; 0x3f
 800992a:	119b      	asrs	r3, r3, #6
 800992c:	001c      	movs	r4, r3
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	6a3b      	ldr	r3, [r7, #32]
 8009932:	1ad3      	subs	r3, r2, r3
 8009934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009936:	4353      	muls	r3, r2
 8009938:	2b00      	cmp	r3, #0
 800993a:	da00      	bge.n	800993e <LIDAR_process_frame+0x7a>
 800993c:	333f      	adds	r3, #63	; 0x3f
 800993e:	119b      	asrs	r3, r3, #6
 8009940:	0018      	movs	r0, r3
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	4a28      	ldr	r2, [pc, #160]	; (80099e8 <LIDAR_process_frame+0x124>)
 8009946:	5c9b      	ldrb	r3, [r3, r2]
 8009948:	3b01      	subs	r3, #1
 800994a:	0019      	movs	r1, r3
 800994c:	f7f6 fc70 	bl	8000230 <__divsi3>
 8009950:	0003      	movs	r3, r0
 8009952:	18e3      	adds	r3, r4, r3
 8009954:	613b      	str	r3, [r7, #16]
		index = round(Ai);
 8009956:	6938      	ldr	r0, [r7, #16]
 8009958:	f7f6 fed6 	bl	8000708 <__aeabi_i2d>
 800995c:	0002      	movs	r2, r0
 800995e:	000b      	movs	r3, r1
 8009960:	0010      	movs	r0, r2
 8009962:	0019      	movs	r1, r3
 8009964:	f7f6 fe9a 	bl	800069c <__aeabi_d2iz>
 8009968:	0003      	movs	r3, r0
 800996a:	60fb      	str	r3, [r7, #12]

		if(Di>1500){ //On affiche pas les points trop loin
 800996c:	697b      	ldr	r3, [r7, #20]
 800996e:	4a1f      	ldr	r2, [pc, #124]	; (80099ec <LIDAR_process_frame+0x128>)
 8009970:	4293      	cmp	r3, r2
 8009972:	dd0a      	ble.n	800998a <LIDAR_process_frame+0xc6>
			LIDAR->processing.point_buff[index]=0;
 8009974:	687a      	ldr	r2, [r7, #4]
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	491d      	ldr	r1, [pc, #116]	; (80099f0 <LIDAR_process_frame+0x12c>)
 800997a:	468c      	mov	ip, r1
 800997c:	4463      	add	r3, ip
 800997e:	009b      	lsls	r3, r3, #2
 8009980:	18d3      	adds	r3, r2, r3
 8009982:	3304      	adds	r3, #4
 8009984:	2200      	movs	r2, #0
 8009986:	601a      	str	r2, [r3, #0]
 8009988:	e017      	b.n	80099ba <LIDAR_process_frame+0xf6>
		}
		else if(Di<40){
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	2b27      	cmp	r3, #39	; 0x27
 800998e:	dc0a      	bgt.n	80099a6 <LIDAR_process_frame+0xe2>
			LIDAR->processing.point_buff[index]=0;
 8009990:	687a      	ldr	r2, [r7, #4]
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	4916      	ldr	r1, [pc, #88]	; (80099f0 <LIDAR_process_frame+0x12c>)
 8009996:	468c      	mov	ip, r1
 8009998:	4463      	add	r3, ip
 800999a:	009b      	lsls	r3, r3, #2
 800999c:	18d3      	adds	r3, r2, r3
 800999e:	3304      	adds	r3, #4
 80099a0:	2200      	movs	r2, #0
 80099a2:	601a      	str	r2, [r3, #0]
 80099a4:	e009      	b.n	80099ba <LIDAR_process_frame+0xf6>
		}
		else{
			LIDAR->processing.point_buff[index]=Di;
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4911      	ldr	r1, [pc, #68]	; (80099f0 <LIDAR_process_frame+0x12c>)
 80099ac:	468c      	mov	ip, r1
 80099ae:	4463      	add	r3, ip
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	18d3      	adds	r3, r2, r3
 80099b4:	3304      	adds	r3, #4
 80099b6:	697a      	ldr	r2, [r7, #20]
 80099b8:	601a      	str	r2, [r3, #0]
	for(int i=0;i<LIDAR->processing.idx/2;i++){
 80099ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099bc:	3301      	adds	r3, #1
 80099be:	627b      	str	r3, [r7, #36]	; 0x24
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	4a0c      	ldr	r2, [pc, #48]	; (80099f4 <LIDAR_process_frame+0x130>)
 80099c4:	5c9b      	ldrb	r3, [r3, r2]
 80099c6:	085b      	lsrs	r3, r3, #1
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	001a      	movs	r2, r3
 80099cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099ce:	4293      	cmp	r3, r2
 80099d0:	db8b      	blt.n	80098ea <LIDAR_process_frame+0x26>
		}
	}
}
 80099d2:	46c0      	nop			; (mov r8, r8)
 80099d4:	46c0      	nop			; (mov r8, r8)
 80099d6:	46bd      	mov	sp, r7
 80099d8:	b00b      	add	sp, #44	; 0x2c
 80099da:	bd90      	pop	{r4, r7, pc}
 80099dc:	00001018 	.word	0x00001018
 80099e0:	0000101a 	.word	0x0000101a
 80099e4:	00001fbf 	.word	0x00001fbf
 80099e8:	00001017 	.word	0x00001017
 80099ec:	000005dc 	.word	0x000005dc
 80099f0:	00000806 	.word	0x00000806
 80099f4:	0000101e 	.word	0x0000101e

080099f8 <calculer_distance_moyenne>:

// Fonction pour calculer la distance moyenne
int calculer_distance_moyenne(int distances[], int debut, int fin) {
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b086      	sub	sp, #24
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	60f8      	str	r0, [r7, #12]
 8009a00:	60b9      	str	r1, [r7, #8]
 8009a02:	607a      	str	r2, [r7, #4]
	int somme = 0;
 8009a04:	2300      	movs	r3, #0
 8009a06:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	613b      	str	r3, [r7, #16]
 8009a0c:	e00a      	b.n	8009a24 <calculer_distance_moyenne+0x2c>
		somme += distances[i];
 8009a0e:	693b      	ldr	r3, [r7, #16]
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	68fa      	ldr	r2, [r7, #12]
 8009a14:	18d3      	adds	r3, r2, r3
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	697a      	ldr	r2, [r7, #20]
 8009a1a:	18d3      	adds	r3, r2, r3
 8009a1c:	617b      	str	r3, [r7, #20]
	for (int i = debut; i <= fin; i++) {
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	3301      	adds	r3, #1
 8009a22:	613b      	str	r3, [r7, #16]
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	ddf0      	ble.n	8009a0e <calculer_distance_moyenne+0x16>
	}
	return somme / (fin - debut + 1);
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	1ad3      	subs	r3, r2, r3
 8009a32:	3301      	adds	r3, #1
 8009a34:	0019      	movs	r1, r3
 8009a36:	6978      	ldr	r0, [r7, #20]
 8009a38:	f7f6 fbfa 	bl	8000230 <__divsi3>
 8009a3c:	0003      	movs	r3, r0
}
 8009a3e:	0018      	movs	r0, r3
 8009a40:	46bd      	mov	sp, r7
 8009a42:	b006      	add	sp, #24
 8009a44:	bd80      	pop	{r7, pc}
	...

08009a48 <find_clusters>:

//Fonction pour regrouper les points proches en clusters
void find_clusters(h_LIDAR_t * LIDAR) {
 8009a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009a4a:	b08b      	sub	sp, #44	; 0x2c
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]

	int * distances=LIDAR->processing.filtred_buff;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	4a56      	ldr	r2, [pc, #344]	; (8009bac <find_clusters+0x164>)
 8009a54:	4694      	mov	ip, r2
 8009a56:	4463      	add	r3, ip
 8009a58:	61bb      	str	r3, [r7, #24]
	int cluster_count = 0;
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	627b      	str	r3, [r7, #36]	; 0x24

	// Parcourir les 360 degrés pour regrouper les valeurs en clusters
	int debut_cluster = 0;
 8009a5e:	2300      	movs	r3, #0
 8009a60:	623b      	str	r3, [r7, #32]
	for (int i = 1; i < NB_DEGRES; i++) {
 8009a62:	2301      	movs	r3, #1
 8009a64:	61fb      	str	r3, [r7, #28]
 8009a66:	e05b      	b.n	8009b20 <find_clusters+0xd8>
		if (fabs(distances[i] - distances[i - 1]) > CLUSTER_SEUIL) {
 8009a68:	69fb      	ldr	r3, [r7, #28]
 8009a6a:	009b      	lsls	r3, r3, #2
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	18d3      	adds	r3, r2, r3
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	494e      	ldr	r1, [pc, #312]	; (8009bb0 <find_clusters+0x168>)
 8009a76:	468c      	mov	ip, r1
 8009a78:	4463      	add	r3, ip
 8009a7a:	009b      	lsls	r3, r3, #2
 8009a7c:	69b9      	ldr	r1, [r7, #24]
 8009a7e:	18cb      	adds	r3, r1, r3
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	0018      	movs	r0, r3
 8009a86:	f7f6 fe3f 	bl	8000708 <__aeabi_i2d>
 8009a8a:	0002      	movs	r2, r0
 8009a8c:	000b      	movs	r3, r1
 8009a8e:	0011      	movs	r1, r2
 8009a90:	000c      	movs	r4, r1
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	085d      	lsrs	r5, r3, #1
 8009a96:	2200      	movs	r2, #0
 8009a98:	4b46      	ldr	r3, [pc, #280]	; (8009bb4 <find_clusters+0x16c>)
 8009a9a:	0020      	movs	r0, r4
 8009a9c:	0029      	movs	r1, r5
 8009a9e:	f7f6 fcdd 	bl	800045c <__aeabi_dcmpgt>
 8009aa2:	1e03      	subs	r3, r0, #0
 8009aa4:	d039      	beq.n	8009b1a <find_clusters+0xd2>
			// Calcul de la distance moyenne pour le cluster
			int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, i - 1);
 8009aa6:	69fb      	ldr	r3, [r7, #28]
 8009aa8:	1e5a      	subs	r2, r3, #1
 8009aaa:	6a39      	ldr	r1, [r7, #32]
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	0018      	movs	r0, r3
 8009ab0:	f7ff ffa2 	bl	80099f8 <calculer_distance_moyenne>
 8009ab4:	0003      	movs	r3, r0
 8009ab6:	60fb      	str	r3, [r7, #12]

			// Calcul de l'angle moyen pour le cluster
			int angle_moyen = (debut_cluster + i - 1) / 2;
 8009ab8:	6a3a      	ldr	r2, [r7, #32]
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	18d3      	adds	r3, r2, r3
 8009abe:	3b01      	subs	r3, #1
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	da00      	bge.n	8009ac6 <find_clusters+0x7e>
 8009ac4:	3301      	adds	r3, #1
 8009ac6:	105b      	asrs	r3, r3, #1
 8009ac8:	60bb      	str	r3, [r7, #8]

			// Stockage des valeurs du cluster dans la structure
			LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 8009aca:	6879      	ldr	r1, [r7, #4]
 8009acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ace:	483a      	ldr	r0, [pc, #232]	; (8009bb8 <find_clusters+0x170>)
 8009ad0:	0013      	movs	r3, r2
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	189b      	adds	r3, r3, r2
 8009ad6:	009b      	lsls	r3, r3, #2
 8009ad8:	18cb      	adds	r3, r1, r3
 8009ada:	181b      	adds	r3, r3, r0
 8009adc:	68ba      	ldr	r2, [r7, #8]
 8009ade:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ae4:	4835      	ldr	r0, [pc, #212]	; (8009bbc <find_clusters+0x174>)
 8009ae6:	0013      	movs	r3, r2
 8009ae8:	005b      	lsls	r3, r3, #1
 8009aea:	189b      	adds	r3, r3, r2
 8009aec:	009b      	lsls	r3, r3, #2
 8009aee:	18cb      	adds	r3, r1, r3
 8009af0:	181b      	adds	r3, r3, r0
 8009af2:	68fa      	ldr	r2, [r7, #12]
 8009af4:	601a      	str	r2, [r3, #0]
			LIDAR->processing.clusters[cluster_count].count = i - debut_cluster;
 8009af6:	69fa      	ldr	r2, [r7, #28]
 8009af8:	6a3b      	ldr	r3, [r7, #32]
 8009afa:	1ad1      	subs	r1, r2, r3
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b00:	4e2f      	ldr	r6, [pc, #188]	; (8009bc0 <find_clusters+0x178>)
 8009b02:	0013      	movs	r3, r2
 8009b04:	005b      	lsls	r3, r3, #1
 8009b06:	189b      	adds	r3, r3, r2
 8009b08:	009b      	lsls	r3, r3, #2
 8009b0a:	18c3      	adds	r3, r0, r3
 8009b0c:	199b      	adds	r3, r3, r6
 8009b0e:	6019      	str	r1, [r3, #0]

			debut_cluster = i;
 8009b10:	69fb      	ldr	r3, [r7, #28]
 8009b12:	623b      	str	r3, [r7, #32]
			cluster_count++;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b16:	3301      	adds	r3, #1
 8009b18:	627b      	str	r3, [r7, #36]	; 0x24
	for (int i = 1; i < NB_DEGRES; i++) {
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	61fb      	str	r3, [r7, #28]
 8009b20:	69fa      	ldr	r2, [r7, #28]
 8009b22:	23b4      	movs	r3, #180	; 0xb4
 8009b24:	005b      	lsls	r3, r3, #1
 8009b26:	429a      	cmp	r2, r3
 8009b28:	db9e      	blt.n	8009a68 <find_clusters+0x20>
		}
	}

	// Traitement du dernier cluster
	int distance_moyenne = calculer_distance_moyenne(distances, debut_cluster, NB_DEGRES - 1);
 8009b2a:	2368      	movs	r3, #104	; 0x68
 8009b2c:	33ff      	adds	r3, #255	; 0xff
 8009b2e:	001a      	movs	r2, r3
 8009b30:	6a39      	ldr	r1, [r7, #32]
 8009b32:	69bb      	ldr	r3, [r7, #24]
 8009b34:	0018      	movs	r0, r3
 8009b36:	f7ff ff5f 	bl	80099f8 <calculer_distance_moyenne>
 8009b3a:	0003      	movs	r3, r0
 8009b3c:	617b      	str	r3, [r7, #20]
	int angle_moyen = (debut_cluster + NB_DEGRES - 1) / 2;
 8009b3e:	6a3b      	ldr	r3, [r7, #32]
 8009b40:	3368      	adds	r3, #104	; 0x68
 8009b42:	33ff      	adds	r3, #255	; 0xff
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	da00      	bge.n	8009b4a <find_clusters+0x102>
 8009b48:	3301      	adds	r3, #1
 8009b4a:	105b      	asrs	r3, r3, #1
 8009b4c:	613b      	str	r3, [r7, #16]
	LIDAR->processing.clusters[cluster_count].angle_moyen = angle_moyen;
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b52:	4819      	ldr	r0, [pc, #100]	; (8009bb8 <find_clusters+0x170>)
 8009b54:	0013      	movs	r3, r2
 8009b56:	005b      	lsls	r3, r3, #1
 8009b58:	189b      	adds	r3, r3, r2
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	18cb      	adds	r3, r1, r3
 8009b5e:	181b      	adds	r3, r3, r0
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].distance_moyenne = distance_moyenne;
 8009b64:	6879      	ldr	r1, [r7, #4]
 8009b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b68:	4814      	ldr	r0, [pc, #80]	; (8009bbc <find_clusters+0x174>)
 8009b6a:	0013      	movs	r3, r2
 8009b6c:	005b      	lsls	r3, r3, #1
 8009b6e:	189b      	adds	r3, r3, r2
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	18cb      	adds	r3, r1, r3
 8009b74:	181b      	adds	r3, r3, r0
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	601a      	str	r2, [r3, #0]
	LIDAR->processing.clusters[cluster_count].count = NB_DEGRES - debut_cluster;
 8009b7a:	6a3b      	ldr	r3, [r7, #32]
 8009b7c:	22b4      	movs	r2, #180	; 0xb4
 8009b7e:	0052      	lsls	r2, r2, #1
 8009b80:	1ad1      	subs	r1, r2, r3
 8009b82:	6878      	ldr	r0, [r7, #4]
 8009b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b86:	4c0e      	ldr	r4, [pc, #56]	; (8009bc0 <find_clusters+0x178>)
 8009b88:	0013      	movs	r3, r2
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	189b      	adds	r3, r3, r2
 8009b8e:	009b      	lsls	r3, r3, #2
 8009b90:	18c3      	adds	r3, r0, r3
 8009b92:	191b      	adds	r3, r3, r4
 8009b94:	6019      	str	r1, [r3, #0]
	cluster_count++;
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	3301      	adds	r3, #1
 8009b9a:	627b      	str	r3, [r7, #36]	; 0x24
	LIDAR->processing.cluster_cnt=cluster_count;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	4909      	ldr	r1, [pc, #36]	; (8009bc4 <find_clusters+0x17c>)
 8009ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009ba2:	505a      	str	r2, [r3, r1]
}
 8009ba4:	46c0      	nop			; (mov r8, r8)
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	b00b      	add	sp, #44	; 0x2c
 8009baa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009bac:	000025bc 	.word	0x000025bc
 8009bb0:	3fffffff 	.word	0x3fffffff
 8009bb4:	4062c000 	.word	0x4062c000
 8009bb8:	00002b5c 	.word	0x00002b5c
 8009bbc:	00002b60 	.word	0x00002b60
 8009bc0:	00002b64 	.word	0x00002b64
 8009bc4:	0000300c 	.word	0x0000300c

08009bc8 <medianFilter>:

void medianFilter(h_LIDAR_t * LIDAR) {
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b090      	sub	sp, #64	; 0x40
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
	int * signal=LIDAR->processing.point_buff; //points non filtrés
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	4a3d      	ldr	r2, [pc, #244]	; (8009cc8 <medianFilter+0x100>)
 8009bd4:	4694      	mov	ip, r2
 8009bd6:	4463      	add	r3, ip
 8009bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	int signal_length=NB_DEGRES;
 8009bda:	23b4      	movs	r3, #180	; 0xb4
 8009bdc:	005b      	lsls	r3, r3, #1
 8009bde:	62bb      	str	r3, [r7, #40]	; 0x28
	int window[5];
	int i, j, k, middle;

	// La médiane se trouve au milieu de la fenêtre triée
	middle = 5 / 2;
 8009be0:	2302      	movs	r3, #2
 8009be2:	627b      	str	r3, [r7, #36]	; 0x24

	for (i = 0; i < signal_length; i++) {
 8009be4:	2300      	movs	r3, #0
 8009be6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009be8:	e065      	b.n	8009cb6 <medianFilter+0xee>
		// Construire la fenêtre avec les données autour du point i
		for (j = 0; j < 5; j++) {
 8009bea:	2300      	movs	r3, #0
 8009bec:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bee:	e01e      	b.n	8009c2e <medianFilter+0x66>
			int index = i - middle + j;
 8009bf0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf4:	1ad3      	subs	r3, r2, r3
 8009bf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009bf8:	18d3      	adds	r3, r2, r3
 8009bfa:	633b      	str	r3, [r7, #48]	; 0x30
			// Gérer les bords du signal
			if (index < 0) index = 0;
 8009bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	da01      	bge.n	8009c06 <medianFilter+0x3e>
 8009c02:	2300      	movs	r3, #0
 8009c04:	633b      	str	r3, [r7, #48]	; 0x30
			if (index >= signal_length) index = signal_length - 1;
 8009c06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c0a:	429a      	cmp	r2, r3
 8009c0c:	db02      	blt.n	8009c14 <medianFilter+0x4c>
 8009c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c10:	3b01      	subs	r3, #1
 8009c12:	633b      	str	r3, [r7, #48]	; 0x30
			window[j] = signal[index];
 8009c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c16:	009b      	lsls	r3, r3, #2
 8009c18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009c1a:	18d3      	adds	r3, r2, r3
 8009c1c:	6819      	ldr	r1, [r3, #0]
 8009c1e:	230c      	movs	r3, #12
 8009c20:	18fb      	adds	r3, r7, r3
 8009c22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c24:	0092      	lsls	r2, r2, #2
 8009c26:	50d1      	str	r1, [r2, r3]
		for (j = 0; j < 5; j++) {
 8009c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	dddd      	ble.n	8009bf0 <medianFilter+0x28>
		}

		// Trier la fenêtre pour trouver la valeur médiane
		for (j = 0; j < 5; j++) {
 8009c34:	2300      	movs	r3, #0
 8009c36:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c38:	e029      	b.n	8009c8e <medianFilter+0xc6>
			for (k = j + 1; k < 5; k++) {
 8009c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c3c:	3301      	adds	r3, #1
 8009c3e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c40:	e01f      	b.n	8009c82 <medianFilter+0xba>
				if (window[j] > window[k]) {
 8009c42:	200c      	movs	r0, #12
 8009c44:	183b      	adds	r3, r7, r0
 8009c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c48:	0092      	lsls	r2, r2, #2
 8009c4a:	58d2      	ldr	r2, [r2, r3]
 8009c4c:	183b      	adds	r3, r7, r0
 8009c4e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009c50:	0089      	lsls	r1, r1, #2
 8009c52:	58cb      	ldr	r3, [r1, r3]
 8009c54:	429a      	cmp	r2, r3
 8009c56:	dd11      	ble.n	8009c7c <medianFilter+0xb4>
					// Échange simple pour le tri
					int temp = window[j];
 8009c58:	183b      	adds	r3, r7, r0
 8009c5a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c5c:	0092      	lsls	r2, r2, #2
 8009c5e:	58d3      	ldr	r3, [r2, r3]
 8009c60:	623b      	str	r3, [r7, #32]
					window[j] = window[k];
 8009c62:	183b      	adds	r3, r7, r0
 8009c64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c66:	0092      	lsls	r2, r2, #2
 8009c68:	58d1      	ldr	r1, [r2, r3]
 8009c6a:	183b      	adds	r3, r7, r0
 8009c6c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009c6e:	0092      	lsls	r2, r2, #2
 8009c70:	50d1      	str	r1, [r2, r3]
					window[k] = temp;
 8009c72:	183b      	adds	r3, r7, r0
 8009c74:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009c76:	0092      	lsls	r2, r2, #2
 8009c78:	6a39      	ldr	r1, [r7, #32]
 8009c7a:	50d1      	str	r1, [r2, r3]
			for (k = j + 1; k < 5; k++) {
 8009c7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c7e:	3301      	adds	r3, #1
 8009c80:	637b      	str	r3, [r7, #52]	; 0x34
 8009c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009c84:	2b04      	cmp	r3, #4
 8009c86:	dddc      	ble.n	8009c42 <medianFilter+0x7a>
		for (j = 0; j < 5; j++) {
 8009c88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	63bb      	str	r3, [r7, #56]	; 0x38
 8009c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c90:	2b04      	cmp	r3, #4
 8009c92:	ddd2      	ble.n	8009c3a <medianFilter+0x72>
				}
			}
		}

		// Stocker la médiane dans le signal filtré
		LIDAR->processing.filtred_buff[i] = window[middle];
 8009c94:	230c      	movs	r3, #12
 8009c96:	18fb      	adds	r3, r7, r3
 8009c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c9a:	0092      	lsls	r2, r2, #2
 8009c9c:	58d2      	ldr	r2, [r2, r3]
 8009c9e:	6879      	ldr	r1, [r7, #4]
 8009ca0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ca2:	480a      	ldr	r0, [pc, #40]	; (8009ccc <medianFilter+0x104>)
 8009ca4:	4684      	mov	ip, r0
 8009ca6:	4463      	add	r3, ip
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	18cb      	adds	r3, r1, r3
 8009cac:	3304      	adds	r3, #4
 8009cae:	601a      	str	r2, [r3, #0]
	for (i = 0; i < signal_length; i++) {
 8009cb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cb2:	3301      	adds	r3, #1
 8009cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009cb6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cba:	429a      	cmp	r2, r3
 8009cbc:	db95      	blt.n	8009bea <medianFilter+0x22>
	}
}
 8009cbe:	46c0      	nop			; (mov r8, r8)
 8009cc0:	46c0      	nop			; (mov r8, r8)
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	b010      	add	sp, #64	; 0x40
 8009cc6:	bd80      	pop	{r7, pc}
 8009cc8:	0000201c 	.word	0x0000201c
 8009ccc:	0000096e 	.word	0x0000096e

08009cd0 <std>:
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	b510      	push	{r4, lr}
 8009cd4:	0004      	movs	r4, r0
 8009cd6:	6003      	str	r3, [r0, #0]
 8009cd8:	6043      	str	r3, [r0, #4]
 8009cda:	6083      	str	r3, [r0, #8]
 8009cdc:	8181      	strh	r1, [r0, #12]
 8009cde:	6643      	str	r3, [r0, #100]	; 0x64
 8009ce0:	0019      	movs	r1, r3
 8009ce2:	81c2      	strh	r2, [r0, #14]
 8009ce4:	6103      	str	r3, [r0, #16]
 8009ce6:	6143      	str	r3, [r0, #20]
 8009ce8:	6183      	str	r3, [r0, #24]
 8009cea:	2208      	movs	r2, #8
 8009cec:	305c      	adds	r0, #92	; 0x5c
 8009cee:	f000 fa37 	bl	800a160 <memset>
 8009cf2:	4b05      	ldr	r3, [pc, #20]	; (8009d08 <std+0x38>)
 8009cf4:	6224      	str	r4, [r4, #32]
 8009cf6:	6263      	str	r3, [r4, #36]	; 0x24
 8009cf8:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <std+0x3c>)
 8009cfa:	62a3      	str	r3, [r4, #40]	; 0x28
 8009cfc:	4b04      	ldr	r3, [pc, #16]	; (8009d10 <std+0x40>)
 8009cfe:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009d00:	4b04      	ldr	r3, [pc, #16]	; (8009d14 <std+0x44>)
 8009d02:	6323      	str	r3, [r4, #48]	; 0x30
 8009d04:	bd10      	pop	{r4, pc}
 8009d06:	46c0      	nop			; (mov r8, r8)
 8009d08:	08009f7d 	.word	0x08009f7d
 8009d0c:	08009fa5 	.word	0x08009fa5
 8009d10:	08009fdd 	.word	0x08009fdd
 8009d14:	0800a009 	.word	0x0800a009

08009d18 <stdio_exit_handler>:
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	4a03      	ldr	r2, [pc, #12]	; (8009d28 <stdio_exit_handler+0x10>)
 8009d1c:	4903      	ldr	r1, [pc, #12]	; (8009d2c <stdio_exit_handler+0x14>)
 8009d1e:	4804      	ldr	r0, [pc, #16]	; (8009d30 <stdio_exit_handler+0x18>)
 8009d20:	f000 f86c 	bl	8009dfc <_fwalk_sglue>
 8009d24:	bd10      	pop	{r4, pc}
 8009d26:	46c0      	nop			; (mov r8, r8)
 8009d28:	20000010 	.word	0x20000010
 8009d2c:	0800add5 	.word	0x0800add5
 8009d30:	2000001c 	.word	0x2000001c

08009d34 <cleanup_stdio>:
 8009d34:	6841      	ldr	r1, [r0, #4]
 8009d36:	4b0b      	ldr	r3, [pc, #44]	; (8009d64 <cleanup_stdio+0x30>)
 8009d38:	b510      	push	{r4, lr}
 8009d3a:	0004      	movs	r4, r0
 8009d3c:	4299      	cmp	r1, r3
 8009d3e:	d001      	beq.n	8009d44 <cleanup_stdio+0x10>
 8009d40:	f001 f848 	bl	800add4 <_fflush_r>
 8009d44:	68a1      	ldr	r1, [r4, #8]
 8009d46:	4b08      	ldr	r3, [pc, #32]	; (8009d68 <cleanup_stdio+0x34>)
 8009d48:	4299      	cmp	r1, r3
 8009d4a:	d002      	beq.n	8009d52 <cleanup_stdio+0x1e>
 8009d4c:	0020      	movs	r0, r4
 8009d4e:	f001 f841 	bl	800add4 <_fflush_r>
 8009d52:	68e1      	ldr	r1, [r4, #12]
 8009d54:	4b05      	ldr	r3, [pc, #20]	; (8009d6c <cleanup_stdio+0x38>)
 8009d56:	4299      	cmp	r1, r3
 8009d58:	d002      	beq.n	8009d60 <cleanup_stdio+0x2c>
 8009d5a:	0020      	movs	r0, r4
 8009d5c:	f001 f83a 	bl	800add4 <_fflush_r>
 8009d60:	bd10      	pop	{r4, pc}
 8009d62:	46c0      	nop			; (mov r8, r8)
 8009d64:	20008528 	.word	0x20008528
 8009d68:	20008590 	.word	0x20008590
 8009d6c:	200085f8 	.word	0x200085f8

08009d70 <global_stdio_init.part.0>:
 8009d70:	b510      	push	{r4, lr}
 8009d72:	4b09      	ldr	r3, [pc, #36]	; (8009d98 <global_stdio_init.part.0+0x28>)
 8009d74:	4a09      	ldr	r2, [pc, #36]	; (8009d9c <global_stdio_init.part.0+0x2c>)
 8009d76:	2104      	movs	r1, #4
 8009d78:	601a      	str	r2, [r3, #0]
 8009d7a:	4809      	ldr	r0, [pc, #36]	; (8009da0 <global_stdio_init.part.0+0x30>)
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	f7ff ffa7 	bl	8009cd0 <std>
 8009d82:	2201      	movs	r2, #1
 8009d84:	2109      	movs	r1, #9
 8009d86:	4807      	ldr	r0, [pc, #28]	; (8009da4 <global_stdio_init.part.0+0x34>)
 8009d88:	f7ff ffa2 	bl	8009cd0 <std>
 8009d8c:	2202      	movs	r2, #2
 8009d8e:	2112      	movs	r1, #18
 8009d90:	4805      	ldr	r0, [pc, #20]	; (8009da8 <global_stdio_init.part.0+0x38>)
 8009d92:	f7ff ff9d 	bl	8009cd0 <std>
 8009d96:	bd10      	pop	{r4, pc}
 8009d98:	20008660 	.word	0x20008660
 8009d9c:	08009d19 	.word	0x08009d19
 8009da0:	20008528 	.word	0x20008528
 8009da4:	20008590 	.word	0x20008590
 8009da8:	200085f8 	.word	0x200085f8

08009dac <__sfp_lock_acquire>:
 8009dac:	b510      	push	{r4, lr}
 8009dae:	4802      	ldr	r0, [pc, #8]	; (8009db8 <__sfp_lock_acquire+0xc>)
 8009db0:	f000 fa56 	bl	800a260 <__retarget_lock_acquire_recursive>
 8009db4:	bd10      	pop	{r4, pc}
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	20008669 	.word	0x20008669

08009dbc <__sfp_lock_release>:
 8009dbc:	b510      	push	{r4, lr}
 8009dbe:	4802      	ldr	r0, [pc, #8]	; (8009dc8 <__sfp_lock_release+0xc>)
 8009dc0:	f000 fa4f 	bl	800a262 <__retarget_lock_release_recursive>
 8009dc4:	bd10      	pop	{r4, pc}
 8009dc6:	46c0      	nop			; (mov r8, r8)
 8009dc8:	20008669 	.word	0x20008669

08009dcc <__sinit>:
 8009dcc:	b510      	push	{r4, lr}
 8009dce:	0004      	movs	r4, r0
 8009dd0:	f7ff ffec 	bl	8009dac <__sfp_lock_acquire>
 8009dd4:	6a23      	ldr	r3, [r4, #32]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d002      	beq.n	8009de0 <__sinit+0x14>
 8009dda:	f7ff ffef 	bl	8009dbc <__sfp_lock_release>
 8009dde:	bd10      	pop	{r4, pc}
 8009de0:	4b04      	ldr	r3, [pc, #16]	; (8009df4 <__sinit+0x28>)
 8009de2:	6223      	str	r3, [r4, #32]
 8009de4:	4b04      	ldr	r3, [pc, #16]	; (8009df8 <__sinit+0x2c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d1f6      	bne.n	8009dda <__sinit+0xe>
 8009dec:	f7ff ffc0 	bl	8009d70 <global_stdio_init.part.0>
 8009df0:	e7f3      	b.n	8009dda <__sinit+0xe>
 8009df2:	46c0      	nop			; (mov r8, r8)
 8009df4:	08009d35 	.word	0x08009d35
 8009df8:	20008660 	.word	0x20008660

08009dfc <_fwalk_sglue>:
 8009dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dfe:	0014      	movs	r4, r2
 8009e00:	2600      	movs	r6, #0
 8009e02:	9000      	str	r0, [sp, #0]
 8009e04:	9101      	str	r1, [sp, #4]
 8009e06:	68a5      	ldr	r5, [r4, #8]
 8009e08:	6867      	ldr	r7, [r4, #4]
 8009e0a:	3f01      	subs	r7, #1
 8009e0c:	d504      	bpl.n	8009e18 <_fwalk_sglue+0x1c>
 8009e0e:	6824      	ldr	r4, [r4, #0]
 8009e10:	2c00      	cmp	r4, #0
 8009e12:	d1f8      	bne.n	8009e06 <_fwalk_sglue+0xa>
 8009e14:	0030      	movs	r0, r6
 8009e16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e18:	89ab      	ldrh	r3, [r5, #12]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d908      	bls.n	8009e30 <_fwalk_sglue+0x34>
 8009e1e:	220e      	movs	r2, #14
 8009e20:	5eab      	ldrsh	r3, [r5, r2]
 8009e22:	3301      	adds	r3, #1
 8009e24:	d004      	beq.n	8009e30 <_fwalk_sglue+0x34>
 8009e26:	0029      	movs	r1, r5
 8009e28:	9800      	ldr	r0, [sp, #0]
 8009e2a:	9b01      	ldr	r3, [sp, #4]
 8009e2c:	4798      	blx	r3
 8009e2e:	4306      	orrs	r6, r0
 8009e30:	3568      	adds	r5, #104	; 0x68
 8009e32:	e7ea      	b.n	8009e0a <_fwalk_sglue+0xe>

08009e34 <iprintf>:
 8009e34:	b40f      	push	{r0, r1, r2, r3}
 8009e36:	b507      	push	{r0, r1, r2, lr}
 8009e38:	4905      	ldr	r1, [pc, #20]	; (8009e50 <iprintf+0x1c>)
 8009e3a:	ab04      	add	r3, sp, #16
 8009e3c:	6808      	ldr	r0, [r1, #0]
 8009e3e:	cb04      	ldmia	r3!, {r2}
 8009e40:	6881      	ldr	r1, [r0, #8]
 8009e42:	9301      	str	r3, [sp, #4]
 8009e44:	f000 fca0 	bl	800a788 <_vfiprintf_r>
 8009e48:	b003      	add	sp, #12
 8009e4a:	bc08      	pop	{r3}
 8009e4c:	b004      	add	sp, #16
 8009e4e:	4718      	bx	r3
 8009e50:	20000068 	.word	0x20000068

08009e54 <_puts_r>:
 8009e54:	6a03      	ldr	r3, [r0, #32]
 8009e56:	b570      	push	{r4, r5, r6, lr}
 8009e58:	0005      	movs	r5, r0
 8009e5a:	000e      	movs	r6, r1
 8009e5c:	6884      	ldr	r4, [r0, #8]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d101      	bne.n	8009e66 <_puts_r+0x12>
 8009e62:	f7ff ffb3 	bl	8009dcc <__sinit>
 8009e66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e68:	07db      	lsls	r3, r3, #31
 8009e6a:	d405      	bmi.n	8009e78 <_puts_r+0x24>
 8009e6c:	89a3      	ldrh	r3, [r4, #12]
 8009e6e:	059b      	lsls	r3, r3, #22
 8009e70:	d402      	bmi.n	8009e78 <_puts_r+0x24>
 8009e72:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009e74:	f000 f9f4 	bl	800a260 <__retarget_lock_acquire_recursive>
 8009e78:	89a3      	ldrh	r3, [r4, #12]
 8009e7a:	071b      	lsls	r3, r3, #28
 8009e7c:	d502      	bpl.n	8009e84 <_puts_r+0x30>
 8009e7e:	6923      	ldr	r3, [r4, #16]
 8009e80:	2b00      	cmp	r3, #0
 8009e82:	d11f      	bne.n	8009ec4 <_puts_r+0x70>
 8009e84:	0021      	movs	r1, r4
 8009e86:	0028      	movs	r0, r5
 8009e88:	f000 f906 	bl	800a098 <__swsetup_r>
 8009e8c:	2800      	cmp	r0, #0
 8009e8e:	d019      	beq.n	8009ec4 <_puts_r+0x70>
 8009e90:	2501      	movs	r5, #1
 8009e92:	426d      	negs	r5, r5
 8009e94:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009e96:	07db      	lsls	r3, r3, #31
 8009e98:	d405      	bmi.n	8009ea6 <_puts_r+0x52>
 8009e9a:	89a3      	ldrh	r3, [r4, #12]
 8009e9c:	059b      	lsls	r3, r3, #22
 8009e9e:	d402      	bmi.n	8009ea6 <_puts_r+0x52>
 8009ea0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009ea2:	f000 f9de 	bl	800a262 <__retarget_lock_release_recursive>
 8009ea6:	0028      	movs	r0, r5
 8009ea8:	bd70      	pop	{r4, r5, r6, pc}
 8009eaa:	3601      	adds	r6, #1
 8009eac:	60a3      	str	r3, [r4, #8]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	da04      	bge.n	8009ebc <_puts_r+0x68>
 8009eb2:	69a2      	ldr	r2, [r4, #24]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	dc16      	bgt.n	8009ee6 <_puts_r+0x92>
 8009eb8:	290a      	cmp	r1, #10
 8009eba:	d014      	beq.n	8009ee6 <_puts_r+0x92>
 8009ebc:	6823      	ldr	r3, [r4, #0]
 8009ebe:	1c5a      	adds	r2, r3, #1
 8009ec0:	6022      	str	r2, [r4, #0]
 8009ec2:	7019      	strb	r1, [r3, #0]
 8009ec4:	68a3      	ldr	r3, [r4, #8]
 8009ec6:	7831      	ldrb	r1, [r6, #0]
 8009ec8:	3b01      	subs	r3, #1
 8009eca:	2900      	cmp	r1, #0
 8009ecc:	d1ed      	bne.n	8009eaa <_puts_r+0x56>
 8009ece:	60a3      	str	r3, [r4, #8]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	da0f      	bge.n	8009ef4 <_puts_r+0xa0>
 8009ed4:	0028      	movs	r0, r5
 8009ed6:	0022      	movs	r2, r4
 8009ed8:	310a      	adds	r1, #10
 8009eda:	f000 f89b 	bl	800a014 <__swbuf_r>
 8009ede:	250a      	movs	r5, #10
 8009ee0:	3001      	adds	r0, #1
 8009ee2:	d1d7      	bne.n	8009e94 <_puts_r+0x40>
 8009ee4:	e7d4      	b.n	8009e90 <_puts_r+0x3c>
 8009ee6:	0022      	movs	r2, r4
 8009ee8:	0028      	movs	r0, r5
 8009eea:	f000 f893 	bl	800a014 <__swbuf_r>
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d1e8      	bne.n	8009ec4 <_puts_r+0x70>
 8009ef2:	e7cd      	b.n	8009e90 <_puts_r+0x3c>
 8009ef4:	250a      	movs	r5, #10
 8009ef6:	6823      	ldr	r3, [r4, #0]
 8009ef8:	1c5a      	adds	r2, r3, #1
 8009efa:	6022      	str	r2, [r4, #0]
 8009efc:	701d      	strb	r5, [r3, #0]
 8009efe:	e7c9      	b.n	8009e94 <_puts_r+0x40>

08009f00 <puts>:
 8009f00:	b510      	push	{r4, lr}
 8009f02:	4b03      	ldr	r3, [pc, #12]	; (8009f10 <puts+0x10>)
 8009f04:	0001      	movs	r1, r0
 8009f06:	6818      	ldr	r0, [r3, #0]
 8009f08:	f7ff ffa4 	bl	8009e54 <_puts_r>
 8009f0c:	bd10      	pop	{r4, pc}
 8009f0e:	46c0      	nop			; (mov r8, r8)
 8009f10:	20000068 	.word	0x20000068

08009f14 <sniprintf>:
 8009f14:	b40c      	push	{r2, r3}
 8009f16:	b530      	push	{r4, r5, lr}
 8009f18:	4b17      	ldr	r3, [pc, #92]	; (8009f78 <sniprintf+0x64>)
 8009f1a:	000c      	movs	r4, r1
 8009f1c:	681d      	ldr	r5, [r3, #0]
 8009f1e:	b09d      	sub	sp, #116	; 0x74
 8009f20:	2900      	cmp	r1, #0
 8009f22:	da08      	bge.n	8009f36 <sniprintf+0x22>
 8009f24:	238b      	movs	r3, #139	; 0x8b
 8009f26:	2001      	movs	r0, #1
 8009f28:	602b      	str	r3, [r5, #0]
 8009f2a:	4240      	negs	r0, r0
 8009f2c:	b01d      	add	sp, #116	; 0x74
 8009f2e:	bc30      	pop	{r4, r5}
 8009f30:	bc08      	pop	{r3}
 8009f32:	b002      	add	sp, #8
 8009f34:	4718      	bx	r3
 8009f36:	2382      	movs	r3, #130	; 0x82
 8009f38:	466a      	mov	r2, sp
 8009f3a:	009b      	lsls	r3, r3, #2
 8009f3c:	8293      	strh	r3, [r2, #20]
 8009f3e:	2300      	movs	r3, #0
 8009f40:	9002      	str	r0, [sp, #8]
 8009f42:	9006      	str	r0, [sp, #24]
 8009f44:	4299      	cmp	r1, r3
 8009f46:	d000      	beq.n	8009f4a <sniprintf+0x36>
 8009f48:	1e4b      	subs	r3, r1, #1
 8009f4a:	9304      	str	r3, [sp, #16]
 8009f4c:	9307      	str	r3, [sp, #28]
 8009f4e:	2301      	movs	r3, #1
 8009f50:	466a      	mov	r2, sp
 8009f52:	425b      	negs	r3, r3
 8009f54:	82d3      	strh	r3, [r2, #22]
 8009f56:	0028      	movs	r0, r5
 8009f58:	ab21      	add	r3, sp, #132	; 0x84
 8009f5a:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009f5c:	a902      	add	r1, sp, #8
 8009f5e:	9301      	str	r3, [sp, #4]
 8009f60:	f000 faea 	bl	800a538 <_svfiprintf_r>
 8009f64:	1c43      	adds	r3, r0, #1
 8009f66:	da01      	bge.n	8009f6c <sniprintf+0x58>
 8009f68:	238b      	movs	r3, #139	; 0x8b
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	2c00      	cmp	r4, #0
 8009f6e:	d0dd      	beq.n	8009f2c <sniprintf+0x18>
 8009f70:	2200      	movs	r2, #0
 8009f72:	9b02      	ldr	r3, [sp, #8]
 8009f74:	701a      	strb	r2, [r3, #0]
 8009f76:	e7d9      	b.n	8009f2c <sniprintf+0x18>
 8009f78:	20000068 	.word	0x20000068

08009f7c <__sread>:
 8009f7c:	b570      	push	{r4, r5, r6, lr}
 8009f7e:	000c      	movs	r4, r1
 8009f80:	250e      	movs	r5, #14
 8009f82:	5f49      	ldrsh	r1, [r1, r5]
 8009f84:	f000 f91a 	bl	800a1bc <_read_r>
 8009f88:	2800      	cmp	r0, #0
 8009f8a:	db03      	blt.n	8009f94 <__sread+0x18>
 8009f8c:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8009f8e:	181b      	adds	r3, r3, r0
 8009f90:	6563      	str	r3, [r4, #84]	; 0x54
 8009f92:	bd70      	pop	{r4, r5, r6, pc}
 8009f94:	89a3      	ldrh	r3, [r4, #12]
 8009f96:	4a02      	ldr	r2, [pc, #8]	; (8009fa0 <__sread+0x24>)
 8009f98:	4013      	ands	r3, r2
 8009f9a:	81a3      	strh	r3, [r4, #12]
 8009f9c:	e7f9      	b.n	8009f92 <__sread+0x16>
 8009f9e:	46c0      	nop			; (mov r8, r8)
 8009fa0:	ffffefff 	.word	0xffffefff

08009fa4 <__swrite>:
 8009fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009fa6:	001f      	movs	r7, r3
 8009fa8:	898b      	ldrh	r3, [r1, #12]
 8009faa:	0005      	movs	r5, r0
 8009fac:	000c      	movs	r4, r1
 8009fae:	0016      	movs	r6, r2
 8009fb0:	05db      	lsls	r3, r3, #23
 8009fb2:	d505      	bpl.n	8009fc0 <__swrite+0x1c>
 8009fb4:	230e      	movs	r3, #14
 8009fb6:	5ec9      	ldrsh	r1, [r1, r3]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	2302      	movs	r3, #2
 8009fbc:	f000 f8ea 	bl	800a194 <_lseek_r>
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	4a05      	ldr	r2, [pc, #20]	; (8009fd8 <__swrite+0x34>)
 8009fc4:	0028      	movs	r0, r5
 8009fc6:	4013      	ands	r3, r2
 8009fc8:	81a3      	strh	r3, [r4, #12]
 8009fca:	0032      	movs	r2, r6
 8009fcc:	230e      	movs	r3, #14
 8009fce:	5ee1      	ldrsh	r1, [r4, r3]
 8009fd0:	003b      	movs	r3, r7
 8009fd2:	f000 f907 	bl	800a1e4 <_write_r>
 8009fd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009fd8:	ffffefff 	.word	0xffffefff

08009fdc <__sseek>:
 8009fdc:	b570      	push	{r4, r5, r6, lr}
 8009fde:	000c      	movs	r4, r1
 8009fe0:	250e      	movs	r5, #14
 8009fe2:	5f49      	ldrsh	r1, [r1, r5]
 8009fe4:	f000 f8d6 	bl	800a194 <_lseek_r>
 8009fe8:	89a3      	ldrh	r3, [r4, #12]
 8009fea:	1c42      	adds	r2, r0, #1
 8009fec:	d103      	bne.n	8009ff6 <__sseek+0x1a>
 8009fee:	4a05      	ldr	r2, [pc, #20]	; (800a004 <__sseek+0x28>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	81a3      	strh	r3, [r4, #12]
 8009ff4:	bd70      	pop	{r4, r5, r6, pc}
 8009ff6:	2280      	movs	r2, #128	; 0x80
 8009ff8:	0152      	lsls	r2, r2, #5
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	81a3      	strh	r3, [r4, #12]
 8009ffe:	6560      	str	r0, [r4, #84]	; 0x54
 800a000:	e7f8      	b.n	8009ff4 <__sseek+0x18>
 800a002:	46c0      	nop			; (mov r8, r8)
 800a004:	ffffefff 	.word	0xffffefff

0800a008 <__sclose>:
 800a008:	b510      	push	{r4, lr}
 800a00a:	230e      	movs	r3, #14
 800a00c:	5ec9      	ldrsh	r1, [r1, r3]
 800a00e:	f000 f8af 	bl	800a170 <_close_r>
 800a012:	bd10      	pop	{r4, pc}

0800a014 <__swbuf_r>:
 800a014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a016:	0006      	movs	r6, r0
 800a018:	000d      	movs	r5, r1
 800a01a:	0014      	movs	r4, r2
 800a01c:	2800      	cmp	r0, #0
 800a01e:	d004      	beq.n	800a02a <__swbuf_r+0x16>
 800a020:	6a03      	ldr	r3, [r0, #32]
 800a022:	2b00      	cmp	r3, #0
 800a024:	d101      	bne.n	800a02a <__swbuf_r+0x16>
 800a026:	f7ff fed1 	bl	8009dcc <__sinit>
 800a02a:	69a3      	ldr	r3, [r4, #24]
 800a02c:	60a3      	str	r3, [r4, #8]
 800a02e:	89a3      	ldrh	r3, [r4, #12]
 800a030:	071b      	lsls	r3, r3, #28
 800a032:	d528      	bpl.n	800a086 <__swbuf_r+0x72>
 800a034:	6923      	ldr	r3, [r4, #16]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d025      	beq.n	800a086 <__swbuf_r+0x72>
 800a03a:	6923      	ldr	r3, [r4, #16]
 800a03c:	6820      	ldr	r0, [r4, #0]
 800a03e:	b2ef      	uxtb	r7, r5
 800a040:	1ac0      	subs	r0, r0, r3
 800a042:	6963      	ldr	r3, [r4, #20]
 800a044:	b2ed      	uxtb	r5, r5
 800a046:	4283      	cmp	r3, r0
 800a048:	dc05      	bgt.n	800a056 <__swbuf_r+0x42>
 800a04a:	0021      	movs	r1, r4
 800a04c:	0030      	movs	r0, r6
 800a04e:	f000 fec1 	bl	800add4 <_fflush_r>
 800a052:	2800      	cmp	r0, #0
 800a054:	d11d      	bne.n	800a092 <__swbuf_r+0x7e>
 800a056:	68a3      	ldr	r3, [r4, #8]
 800a058:	3001      	adds	r0, #1
 800a05a:	3b01      	subs	r3, #1
 800a05c:	60a3      	str	r3, [r4, #8]
 800a05e:	6823      	ldr	r3, [r4, #0]
 800a060:	1c5a      	adds	r2, r3, #1
 800a062:	6022      	str	r2, [r4, #0]
 800a064:	701f      	strb	r7, [r3, #0]
 800a066:	6963      	ldr	r3, [r4, #20]
 800a068:	4283      	cmp	r3, r0
 800a06a:	d004      	beq.n	800a076 <__swbuf_r+0x62>
 800a06c:	89a3      	ldrh	r3, [r4, #12]
 800a06e:	07db      	lsls	r3, r3, #31
 800a070:	d507      	bpl.n	800a082 <__swbuf_r+0x6e>
 800a072:	2d0a      	cmp	r5, #10
 800a074:	d105      	bne.n	800a082 <__swbuf_r+0x6e>
 800a076:	0021      	movs	r1, r4
 800a078:	0030      	movs	r0, r6
 800a07a:	f000 feab 	bl	800add4 <_fflush_r>
 800a07e:	2800      	cmp	r0, #0
 800a080:	d107      	bne.n	800a092 <__swbuf_r+0x7e>
 800a082:	0028      	movs	r0, r5
 800a084:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a086:	0021      	movs	r1, r4
 800a088:	0030      	movs	r0, r6
 800a08a:	f000 f805 	bl	800a098 <__swsetup_r>
 800a08e:	2800      	cmp	r0, #0
 800a090:	d0d3      	beq.n	800a03a <__swbuf_r+0x26>
 800a092:	2501      	movs	r5, #1
 800a094:	426d      	negs	r5, r5
 800a096:	e7f4      	b.n	800a082 <__swbuf_r+0x6e>

0800a098 <__swsetup_r>:
 800a098:	4b30      	ldr	r3, [pc, #192]	; (800a15c <__swsetup_r+0xc4>)
 800a09a:	b570      	push	{r4, r5, r6, lr}
 800a09c:	0005      	movs	r5, r0
 800a09e:	6818      	ldr	r0, [r3, #0]
 800a0a0:	000c      	movs	r4, r1
 800a0a2:	2800      	cmp	r0, #0
 800a0a4:	d004      	beq.n	800a0b0 <__swsetup_r+0x18>
 800a0a6:	6a03      	ldr	r3, [r0, #32]
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d101      	bne.n	800a0b0 <__swsetup_r+0x18>
 800a0ac:	f7ff fe8e 	bl	8009dcc <__sinit>
 800a0b0:	230c      	movs	r3, #12
 800a0b2:	5ee2      	ldrsh	r2, [r4, r3]
 800a0b4:	b293      	uxth	r3, r2
 800a0b6:	0711      	lsls	r1, r2, #28
 800a0b8:	d423      	bmi.n	800a102 <__swsetup_r+0x6a>
 800a0ba:	06d9      	lsls	r1, r3, #27
 800a0bc:	d407      	bmi.n	800a0ce <__swsetup_r+0x36>
 800a0be:	2309      	movs	r3, #9
 800a0c0:	2001      	movs	r0, #1
 800a0c2:	602b      	str	r3, [r5, #0]
 800a0c4:	3337      	adds	r3, #55	; 0x37
 800a0c6:	4313      	orrs	r3, r2
 800a0c8:	81a3      	strh	r3, [r4, #12]
 800a0ca:	4240      	negs	r0, r0
 800a0cc:	bd70      	pop	{r4, r5, r6, pc}
 800a0ce:	075b      	lsls	r3, r3, #29
 800a0d0:	d513      	bpl.n	800a0fa <__swsetup_r+0x62>
 800a0d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a0d4:	2900      	cmp	r1, #0
 800a0d6:	d008      	beq.n	800a0ea <__swsetup_r+0x52>
 800a0d8:	0023      	movs	r3, r4
 800a0da:	3344      	adds	r3, #68	; 0x44
 800a0dc:	4299      	cmp	r1, r3
 800a0de:	d002      	beq.n	800a0e6 <__swsetup_r+0x4e>
 800a0e0:	0028      	movs	r0, r5
 800a0e2:	f000 f8c9 	bl	800a278 <_free_r>
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	6363      	str	r3, [r4, #52]	; 0x34
 800a0ea:	2224      	movs	r2, #36	; 0x24
 800a0ec:	89a3      	ldrh	r3, [r4, #12]
 800a0ee:	4393      	bics	r3, r2
 800a0f0:	81a3      	strh	r3, [r4, #12]
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	6063      	str	r3, [r4, #4]
 800a0f6:	6923      	ldr	r3, [r4, #16]
 800a0f8:	6023      	str	r3, [r4, #0]
 800a0fa:	2308      	movs	r3, #8
 800a0fc:	89a2      	ldrh	r2, [r4, #12]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	81a3      	strh	r3, [r4, #12]
 800a102:	6923      	ldr	r3, [r4, #16]
 800a104:	2b00      	cmp	r3, #0
 800a106:	d10b      	bne.n	800a120 <__swsetup_r+0x88>
 800a108:	21a0      	movs	r1, #160	; 0xa0
 800a10a:	2280      	movs	r2, #128	; 0x80
 800a10c:	89a3      	ldrh	r3, [r4, #12]
 800a10e:	0089      	lsls	r1, r1, #2
 800a110:	0092      	lsls	r2, r2, #2
 800a112:	400b      	ands	r3, r1
 800a114:	4293      	cmp	r3, r2
 800a116:	d003      	beq.n	800a120 <__swsetup_r+0x88>
 800a118:	0021      	movs	r1, r4
 800a11a:	0028      	movs	r0, r5
 800a11c:	f000 feae 	bl	800ae7c <__smakebuf_r>
 800a120:	220c      	movs	r2, #12
 800a122:	5ea3      	ldrsh	r3, [r4, r2]
 800a124:	2001      	movs	r0, #1
 800a126:	001a      	movs	r2, r3
 800a128:	b299      	uxth	r1, r3
 800a12a:	4002      	ands	r2, r0
 800a12c:	4203      	tst	r3, r0
 800a12e:	d00f      	beq.n	800a150 <__swsetup_r+0xb8>
 800a130:	2200      	movs	r2, #0
 800a132:	60a2      	str	r2, [r4, #8]
 800a134:	6962      	ldr	r2, [r4, #20]
 800a136:	4252      	negs	r2, r2
 800a138:	61a2      	str	r2, [r4, #24]
 800a13a:	2000      	movs	r0, #0
 800a13c:	6922      	ldr	r2, [r4, #16]
 800a13e:	4282      	cmp	r2, r0
 800a140:	d1c4      	bne.n	800a0cc <__swsetup_r+0x34>
 800a142:	0609      	lsls	r1, r1, #24
 800a144:	d5c2      	bpl.n	800a0cc <__swsetup_r+0x34>
 800a146:	2240      	movs	r2, #64	; 0x40
 800a148:	4313      	orrs	r3, r2
 800a14a:	81a3      	strh	r3, [r4, #12]
 800a14c:	3801      	subs	r0, #1
 800a14e:	e7bd      	b.n	800a0cc <__swsetup_r+0x34>
 800a150:	0788      	lsls	r0, r1, #30
 800a152:	d400      	bmi.n	800a156 <__swsetup_r+0xbe>
 800a154:	6962      	ldr	r2, [r4, #20]
 800a156:	60a2      	str	r2, [r4, #8]
 800a158:	e7ef      	b.n	800a13a <__swsetup_r+0xa2>
 800a15a:	46c0      	nop			; (mov r8, r8)
 800a15c:	20000068 	.word	0x20000068

0800a160 <memset>:
 800a160:	0003      	movs	r3, r0
 800a162:	1882      	adds	r2, r0, r2
 800a164:	4293      	cmp	r3, r2
 800a166:	d100      	bne.n	800a16a <memset+0xa>
 800a168:	4770      	bx	lr
 800a16a:	7019      	strb	r1, [r3, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	e7f9      	b.n	800a164 <memset+0x4>

0800a170 <_close_r>:
 800a170:	2300      	movs	r3, #0
 800a172:	b570      	push	{r4, r5, r6, lr}
 800a174:	4d06      	ldr	r5, [pc, #24]	; (800a190 <_close_r+0x20>)
 800a176:	0004      	movs	r4, r0
 800a178:	0008      	movs	r0, r1
 800a17a:	602b      	str	r3, [r5, #0]
 800a17c:	f7f7 fb15 	bl	80017aa <_close>
 800a180:	1c43      	adds	r3, r0, #1
 800a182:	d103      	bne.n	800a18c <_close_r+0x1c>
 800a184:	682b      	ldr	r3, [r5, #0]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d000      	beq.n	800a18c <_close_r+0x1c>
 800a18a:	6023      	str	r3, [r4, #0]
 800a18c:	bd70      	pop	{r4, r5, r6, pc}
 800a18e:	46c0      	nop			; (mov r8, r8)
 800a190:	20008664 	.word	0x20008664

0800a194 <_lseek_r>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	0004      	movs	r4, r0
 800a198:	0008      	movs	r0, r1
 800a19a:	0011      	movs	r1, r2
 800a19c:	001a      	movs	r2, r3
 800a19e:	2300      	movs	r3, #0
 800a1a0:	4d05      	ldr	r5, [pc, #20]	; (800a1b8 <_lseek_r+0x24>)
 800a1a2:	602b      	str	r3, [r5, #0]
 800a1a4:	f7f7 fb22 	bl	80017ec <_lseek>
 800a1a8:	1c43      	adds	r3, r0, #1
 800a1aa:	d103      	bne.n	800a1b4 <_lseek_r+0x20>
 800a1ac:	682b      	ldr	r3, [r5, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d000      	beq.n	800a1b4 <_lseek_r+0x20>
 800a1b2:	6023      	str	r3, [r4, #0]
 800a1b4:	bd70      	pop	{r4, r5, r6, pc}
 800a1b6:	46c0      	nop			; (mov r8, r8)
 800a1b8:	20008664 	.word	0x20008664

0800a1bc <_read_r>:
 800a1bc:	b570      	push	{r4, r5, r6, lr}
 800a1be:	0004      	movs	r4, r0
 800a1c0:	0008      	movs	r0, r1
 800a1c2:	0011      	movs	r1, r2
 800a1c4:	001a      	movs	r2, r3
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	4d05      	ldr	r5, [pc, #20]	; (800a1e0 <_read_r+0x24>)
 800a1ca:	602b      	str	r3, [r5, #0]
 800a1cc:	f7f7 fab4 	bl	8001738 <_read>
 800a1d0:	1c43      	adds	r3, r0, #1
 800a1d2:	d103      	bne.n	800a1dc <_read_r+0x20>
 800a1d4:	682b      	ldr	r3, [r5, #0]
 800a1d6:	2b00      	cmp	r3, #0
 800a1d8:	d000      	beq.n	800a1dc <_read_r+0x20>
 800a1da:	6023      	str	r3, [r4, #0]
 800a1dc:	bd70      	pop	{r4, r5, r6, pc}
 800a1de:	46c0      	nop			; (mov r8, r8)
 800a1e0:	20008664 	.word	0x20008664

0800a1e4 <_write_r>:
 800a1e4:	b570      	push	{r4, r5, r6, lr}
 800a1e6:	0004      	movs	r4, r0
 800a1e8:	0008      	movs	r0, r1
 800a1ea:	0011      	movs	r1, r2
 800a1ec:	001a      	movs	r2, r3
 800a1ee:	2300      	movs	r3, #0
 800a1f0:	4d05      	ldr	r5, [pc, #20]	; (800a208 <_write_r+0x24>)
 800a1f2:	602b      	str	r3, [r5, #0]
 800a1f4:	f7f7 fabd 	bl	8001772 <_write>
 800a1f8:	1c43      	adds	r3, r0, #1
 800a1fa:	d103      	bne.n	800a204 <_write_r+0x20>
 800a1fc:	682b      	ldr	r3, [r5, #0]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d000      	beq.n	800a204 <_write_r+0x20>
 800a202:	6023      	str	r3, [r4, #0]
 800a204:	bd70      	pop	{r4, r5, r6, pc}
 800a206:	46c0      	nop			; (mov r8, r8)
 800a208:	20008664 	.word	0x20008664

0800a20c <__errno>:
 800a20c:	4b01      	ldr	r3, [pc, #4]	; (800a214 <__errno+0x8>)
 800a20e:	6818      	ldr	r0, [r3, #0]
 800a210:	4770      	bx	lr
 800a212:	46c0      	nop			; (mov r8, r8)
 800a214:	20000068 	.word	0x20000068

0800a218 <__libc_init_array>:
 800a218:	b570      	push	{r4, r5, r6, lr}
 800a21a:	2600      	movs	r6, #0
 800a21c:	4c0c      	ldr	r4, [pc, #48]	; (800a250 <__libc_init_array+0x38>)
 800a21e:	4d0d      	ldr	r5, [pc, #52]	; (800a254 <__libc_init_array+0x3c>)
 800a220:	1b64      	subs	r4, r4, r5
 800a222:	10a4      	asrs	r4, r4, #2
 800a224:	42a6      	cmp	r6, r4
 800a226:	d109      	bne.n	800a23c <__libc_init_array+0x24>
 800a228:	2600      	movs	r6, #0
 800a22a:	f000 fef1 	bl	800b010 <_init>
 800a22e:	4c0a      	ldr	r4, [pc, #40]	; (800a258 <__libc_init_array+0x40>)
 800a230:	4d0a      	ldr	r5, [pc, #40]	; (800a25c <__libc_init_array+0x44>)
 800a232:	1b64      	subs	r4, r4, r5
 800a234:	10a4      	asrs	r4, r4, #2
 800a236:	42a6      	cmp	r6, r4
 800a238:	d105      	bne.n	800a246 <__libc_init_array+0x2e>
 800a23a:	bd70      	pop	{r4, r5, r6, pc}
 800a23c:	00b3      	lsls	r3, r6, #2
 800a23e:	58eb      	ldr	r3, [r5, r3]
 800a240:	4798      	blx	r3
 800a242:	3601      	adds	r6, #1
 800a244:	e7ee      	b.n	800a224 <__libc_init_array+0xc>
 800a246:	00b3      	lsls	r3, r6, #2
 800a248:	58eb      	ldr	r3, [r5, r3]
 800a24a:	4798      	blx	r3
 800a24c:	3601      	adds	r6, #1
 800a24e:	e7f2      	b.n	800a236 <__libc_init_array+0x1e>
 800a250:	0800b2c4 	.word	0x0800b2c4
 800a254:	0800b2c4 	.word	0x0800b2c4
 800a258:	0800b2c8 	.word	0x0800b2c8
 800a25c:	0800b2c4 	.word	0x0800b2c4

0800a260 <__retarget_lock_acquire_recursive>:
 800a260:	4770      	bx	lr

0800a262 <__retarget_lock_release_recursive>:
 800a262:	4770      	bx	lr

0800a264 <memcpy>:
 800a264:	2300      	movs	r3, #0
 800a266:	b510      	push	{r4, lr}
 800a268:	429a      	cmp	r2, r3
 800a26a:	d100      	bne.n	800a26e <memcpy+0xa>
 800a26c:	bd10      	pop	{r4, pc}
 800a26e:	5ccc      	ldrb	r4, [r1, r3]
 800a270:	54c4      	strb	r4, [r0, r3]
 800a272:	3301      	adds	r3, #1
 800a274:	e7f8      	b.n	800a268 <memcpy+0x4>
	...

0800a278 <_free_r>:
 800a278:	b570      	push	{r4, r5, r6, lr}
 800a27a:	0005      	movs	r5, r0
 800a27c:	2900      	cmp	r1, #0
 800a27e:	d010      	beq.n	800a2a2 <_free_r+0x2a>
 800a280:	1f0c      	subs	r4, r1, #4
 800a282:	6823      	ldr	r3, [r4, #0]
 800a284:	2b00      	cmp	r3, #0
 800a286:	da00      	bge.n	800a28a <_free_r+0x12>
 800a288:	18e4      	adds	r4, r4, r3
 800a28a:	0028      	movs	r0, r5
 800a28c:	f000 f8e2 	bl	800a454 <__malloc_lock>
 800a290:	4a1d      	ldr	r2, [pc, #116]	; (800a308 <_free_r+0x90>)
 800a292:	6813      	ldr	r3, [r2, #0]
 800a294:	2b00      	cmp	r3, #0
 800a296:	d105      	bne.n	800a2a4 <_free_r+0x2c>
 800a298:	6063      	str	r3, [r4, #4]
 800a29a:	6014      	str	r4, [r2, #0]
 800a29c:	0028      	movs	r0, r5
 800a29e:	f000 f8e1 	bl	800a464 <__malloc_unlock>
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	42a3      	cmp	r3, r4
 800a2a6:	d908      	bls.n	800a2ba <_free_r+0x42>
 800a2a8:	6820      	ldr	r0, [r4, #0]
 800a2aa:	1821      	adds	r1, r4, r0
 800a2ac:	428b      	cmp	r3, r1
 800a2ae:	d1f3      	bne.n	800a298 <_free_r+0x20>
 800a2b0:	6819      	ldr	r1, [r3, #0]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	1809      	adds	r1, r1, r0
 800a2b6:	6021      	str	r1, [r4, #0]
 800a2b8:	e7ee      	b.n	800a298 <_free_r+0x20>
 800a2ba:	001a      	movs	r2, r3
 800a2bc:	685b      	ldr	r3, [r3, #4]
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d001      	beq.n	800a2c6 <_free_r+0x4e>
 800a2c2:	42a3      	cmp	r3, r4
 800a2c4:	d9f9      	bls.n	800a2ba <_free_r+0x42>
 800a2c6:	6811      	ldr	r1, [r2, #0]
 800a2c8:	1850      	adds	r0, r2, r1
 800a2ca:	42a0      	cmp	r0, r4
 800a2cc:	d10b      	bne.n	800a2e6 <_free_r+0x6e>
 800a2ce:	6820      	ldr	r0, [r4, #0]
 800a2d0:	1809      	adds	r1, r1, r0
 800a2d2:	1850      	adds	r0, r2, r1
 800a2d4:	6011      	str	r1, [r2, #0]
 800a2d6:	4283      	cmp	r3, r0
 800a2d8:	d1e0      	bne.n	800a29c <_free_r+0x24>
 800a2da:	6818      	ldr	r0, [r3, #0]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	1841      	adds	r1, r0, r1
 800a2e0:	6011      	str	r1, [r2, #0]
 800a2e2:	6053      	str	r3, [r2, #4]
 800a2e4:	e7da      	b.n	800a29c <_free_r+0x24>
 800a2e6:	42a0      	cmp	r0, r4
 800a2e8:	d902      	bls.n	800a2f0 <_free_r+0x78>
 800a2ea:	230c      	movs	r3, #12
 800a2ec:	602b      	str	r3, [r5, #0]
 800a2ee:	e7d5      	b.n	800a29c <_free_r+0x24>
 800a2f0:	6820      	ldr	r0, [r4, #0]
 800a2f2:	1821      	adds	r1, r4, r0
 800a2f4:	428b      	cmp	r3, r1
 800a2f6:	d103      	bne.n	800a300 <_free_r+0x88>
 800a2f8:	6819      	ldr	r1, [r3, #0]
 800a2fa:	685b      	ldr	r3, [r3, #4]
 800a2fc:	1809      	adds	r1, r1, r0
 800a2fe:	6021      	str	r1, [r4, #0]
 800a300:	6063      	str	r3, [r4, #4]
 800a302:	6054      	str	r4, [r2, #4]
 800a304:	e7ca      	b.n	800a29c <_free_r+0x24>
 800a306:	46c0      	nop			; (mov r8, r8)
 800a308:	2000866c 	.word	0x2000866c

0800a30c <sbrk_aligned>:
 800a30c:	b570      	push	{r4, r5, r6, lr}
 800a30e:	4e0f      	ldr	r6, [pc, #60]	; (800a34c <sbrk_aligned+0x40>)
 800a310:	000d      	movs	r5, r1
 800a312:	6831      	ldr	r1, [r6, #0]
 800a314:	0004      	movs	r4, r0
 800a316:	2900      	cmp	r1, #0
 800a318:	d102      	bne.n	800a320 <sbrk_aligned+0x14>
 800a31a:	f000 fe25 	bl	800af68 <_sbrk_r>
 800a31e:	6030      	str	r0, [r6, #0]
 800a320:	0029      	movs	r1, r5
 800a322:	0020      	movs	r0, r4
 800a324:	f000 fe20 	bl	800af68 <_sbrk_r>
 800a328:	1c43      	adds	r3, r0, #1
 800a32a:	d00a      	beq.n	800a342 <sbrk_aligned+0x36>
 800a32c:	2303      	movs	r3, #3
 800a32e:	1cc5      	adds	r5, r0, #3
 800a330:	439d      	bics	r5, r3
 800a332:	42a8      	cmp	r0, r5
 800a334:	d007      	beq.n	800a346 <sbrk_aligned+0x3a>
 800a336:	1a29      	subs	r1, r5, r0
 800a338:	0020      	movs	r0, r4
 800a33a:	f000 fe15 	bl	800af68 <_sbrk_r>
 800a33e:	3001      	adds	r0, #1
 800a340:	d101      	bne.n	800a346 <sbrk_aligned+0x3a>
 800a342:	2501      	movs	r5, #1
 800a344:	426d      	negs	r5, r5
 800a346:	0028      	movs	r0, r5
 800a348:	bd70      	pop	{r4, r5, r6, pc}
 800a34a:	46c0      	nop			; (mov r8, r8)
 800a34c:	20008670 	.word	0x20008670

0800a350 <_malloc_r>:
 800a350:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a352:	2203      	movs	r2, #3
 800a354:	1ccb      	adds	r3, r1, #3
 800a356:	4393      	bics	r3, r2
 800a358:	3308      	adds	r3, #8
 800a35a:	0006      	movs	r6, r0
 800a35c:	001f      	movs	r7, r3
 800a35e:	2b0c      	cmp	r3, #12
 800a360:	d238      	bcs.n	800a3d4 <_malloc_r+0x84>
 800a362:	270c      	movs	r7, #12
 800a364:	42b9      	cmp	r1, r7
 800a366:	d837      	bhi.n	800a3d8 <_malloc_r+0x88>
 800a368:	0030      	movs	r0, r6
 800a36a:	f000 f873 	bl	800a454 <__malloc_lock>
 800a36e:	4b38      	ldr	r3, [pc, #224]	; (800a450 <_malloc_r+0x100>)
 800a370:	9300      	str	r3, [sp, #0]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	001c      	movs	r4, r3
 800a376:	2c00      	cmp	r4, #0
 800a378:	d133      	bne.n	800a3e2 <_malloc_r+0x92>
 800a37a:	0039      	movs	r1, r7
 800a37c:	0030      	movs	r0, r6
 800a37e:	f7ff ffc5 	bl	800a30c <sbrk_aligned>
 800a382:	0004      	movs	r4, r0
 800a384:	1c43      	adds	r3, r0, #1
 800a386:	d15e      	bne.n	800a446 <_malloc_r+0xf6>
 800a388:	9b00      	ldr	r3, [sp, #0]
 800a38a:	681c      	ldr	r4, [r3, #0]
 800a38c:	0025      	movs	r5, r4
 800a38e:	2d00      	cmp	r5, #0
 800a390:	d14e      	bne.n	800a430 <_malloc_r+0xe0>
 800a392:	2c00      	cmp	r4, #0
 800a394:	d051      	beq.n	800a43a <_malloc_r+0xea>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	0029      	movs	r1, r5
 800a39a:	18e3      	adds	r3, r4, r3
 800a39c:	0030      	movs	r0, r6
 800a39e:	9301      	str	r3, [sp, #4]
 800a3a0:	f000 fde2 	bl	800af68 <_sbrk_r>
 800a3a4:	9b01      	ldr	r3, [sp, #4]
 800a3a6:	4283      	cmp	r3, r0
 800a3a8:	d147      	bne.n	800a43a <_malloc_r+0xea>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	0030      	movs	r0, r6
 800a3ae:	1aff      	subs	r7, r7, r3
 800a3b0:	0039      	movs	r1, r7
 800a3b2:	f7ff ffab 	bl	800a30c <sbrk_aligned>
 800a3b6:	3001      	adds	r0, #1
 800a3b8:	d03f      	beq.n	800a43a <_malloc_r+0xea>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	19db      	adds	r3, r3, r7
 800a3be:	6023      	str	r3, [r4, #0]
 800a3c0:	9b00      	ldr	r3, [sp, #0]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d040      	beq.n	800a44a <_malloc_r+0xfa>
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	42a2      	cmp	r2, r4
 800a3cc:	d133      	bne.n	800a436 <_malloc_r+0xe6>
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	605a      	str	r2, [r3, #4]
 800a3d2:	e014      	b.n	800a3fe <_malloc_r+0xae>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	dac5      	bge.n	800a364 <_malloc_r+0x14>
 800a3d8:	230c      	movs	r3, #12
 800a3da:	2500      	movs	r5, #0
 800a3dc:	6033      	str	r3, [r6, #0]
 800a3de:	0028      	movs	r0, r5
 800a3e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a3e2:	6821      	ldr	r1, [r4, #0]
 800a3e4:	1bc9      	subs	r1, r1, r7
 800a3e6:	d420      	bmi.n	800a42a <_malloc_r+0xda>
 800a3e8:	290b      	cmp	r1, #11
 800a3ea:	d918      	bls.n	800a41e <_malloc_r+0xce>
 800a3ec:	19e2      	adds	r2, r4, r7
 800a3ee:	6027      	str	r7, [r4, #0]
 800a3f0:	42a3      	cmp	r3, r4
 800a3f2:	d112      	bne.n	800a41a <_malloc_r+0xca>
 800a3f4:	9b00      	ldr	r3, [sp, #0]
 800a3f6:	601a      	str	r2, [r3, #0]
 800a3f8:	6863      	ldr	r3, [r4, #4]
 800a3fa:	6011      	str	r1, [r2, #0]
 800a3fc:	6053      	str	r3, [r2, #4]
 800a3fe:	0030      	movs	r0, r6
 800a400:	0025      	movs	r5, r4
 800a402:	f000 f82f 	bl	800a464 <__malloc_unlock>
 800a406:	2207      	movs	r2, #7
 800a408:	350b      	adds	r5, #11
 800a40a:	1d23      	adds	r3, r4, #4
 800a40c:	4395      	bics	r5, r2
 800a40e:	1aea      	subs	r2, r5, r3
 800a410:	429d      	cmp	r5, r3
 800a412:	d0e4      	beq.n	800a3de <_malloc_r+0x8e>
 800a414:	1b5b      	subs	r3, r3, r5
 800a416:	50a3      	str	r3, [r4, r2]
 800a418:	e7e1      	b.n	800a3de <_malloc_r+0x8e>
 800a41a:	605a      	str	r2, [r3, #4]
 800a41c:	e7ec      	b.n	800a3f8 <_malloc_r+0xa8>
 800a41e:	6862      	ldr	r2, [r4, #4]
 800a420:	42a3      	cmp	r3, r4
 800a422:	d1d5      	bne.n	800a3d0 <_malloc_r+0x80>
 800a424:	9b00      	ldr	r3, [sp, #0]
 800a426:	601a      	str	r2, [r3, #0]
 800a428:	e7e9      	b.n	800a3fe <_malloc_r+0xae>
 800a42a:	0023      	movs	r3, r4
 800a42c:	6864      	ldr	r4, [r4, #4]
 800a42e:	e7a2      	b.n	800a376 <_malloc_r+0x26>
 800a430:	002c      	movs	r4, r5
 800a432:	686d      	ldr	r5, [r5, #4]
 800a434:	e7ab      	b.n	800a38e <_malloc_r+0x3e>
 800a436:	0013      	movs	r3, r2
 800a438:	e7c4      	b.n	800a3c4 <_malloc_r+0x74>
 800a43a:	230c      	movs	r3, #12
 800a43c:	0030      	movs	r0, r6
 800a43e:	6033      	str	r3, [r6, #0]
 800a440:	f000 f810 	bl	800a464 <__malloc_unlock>
 800a444:	e7cb      	b.n	800a3de <_malloc_r+0x8e>
 800a446:	6027      	str	r7, [r4, #0]
 800a448:	e7d9      	b.n	800a3fe <_malloc_r+0xae>
 800a44a:	605b      	str	r3, [r3, #4]
 800a44c:	deff      	udf	#255	; 0xff
 800a44e:	46c0      	nop			; (mov r8, r8)
 800a450:	2000866c 	.word	0x2000866c

0800a454 <__malloc_lock>:
 800a454:	b510      	push	{r4, lr}
 800a456:	4802      	ldr	r0, [pc, #8]	; (800a460 <__malloc_lock+0xc>)
 800a458:	f7ff ff02 	bl	800a260 <__retarget_lock_acquire_recursive>
 800a45c:	bd10      	pop	{r4, pc}
 800a45e:	46c0      	nop			; (mov r8, r8)
 800a460:	20008668 	.word	0x20008668

0800a464 <__malloc_unlock>:
 800a464:	b510      	push	{r4, lr}
 800a466:	4802      	ldr	r0, [pc, #8]	; (800a470 <__malloc_unlock+0xc>)
 800a468:	f7ff fefb 	bl	800a262 <__retarget_lock_release_recursive>
 800a46c:	bd10      	pop	{r4, pc}
 800a46e:	46c0      	nop			; (mov r8, r8)
 800a470:	20008668 	.word	0x20008668

0800a474 <__ssputs_r>:
 800a474:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a476:	b085      	sub	sp, #20
 800a478:	9301      	str	r3, [sp, #4]
 800a47a:	9203      	str	r2, [sp, #12]
 800a47c:	688e      	ldr	r6, [r1, #8]
 800a47e:	9a01      	ldr	r2, [sp, #4]
 800a480:	0007      	movs	r7, r0
 800a482:	000c      	movs	r4, r1
 800a484:	680b      	ldr	r3, [r1, #0]
 800a486:	4296      	cmp	r6, r2
 800a488:	d831      	bhi.n	800a4ee <__ssputs_r+0x7a>
 800a48a:	898a      	ldrh	r2, [r1, #12]
 800a48c:	2190      	movs	r1, #144	; 0x90
 800a48e:	00c9      	lsls	r1, r1, #3
 800a490:	420a      	tst	r2, r1
 800a492:	d029      	beq.n	800a4e8 <__ssputs_r+0x74>
 800a494:	2003      	movs	r0, #3
 800a496:	6921      	ldr	r1, [r4, #16]
 800a498:	1a5b      	subs	r3, r3, r1
 800a49a:	9302      	str	r3, [sp, #8]
 800a49c:	6963      	ldr	r3, [r4, #20]
 800a49e:	4343      	muls	r3, r0
 800a4a0:	0fdd      	lsrs	r5, r3, #31
 800a4a2:	18ed      	adds	r5, r5, r3
 800a4a4:	9b01      	ldr	r3, [sp, #4]
 800a4a6:	9802      	ldr	r0, [sp, #8]
 800a4a8:	3301      	adds	r3, #1
 800a4aa:	181b      	adds	r3, r3, r0
 800a4ac:	106d      	asrs	r5, r5, #1
 800a4ae:	42ab      	cmp	r3, r5
 800a4b0:	d900      	bls.n	800a4b4 <__ssputs_r+0x40>
 800a4b2:	001d      	movs	r5, r3
 800a4b4:	0552      	lsls	r2, r2, #21
 800a4b6:	d529      	bpl.n	800a50c <__ssputs_r+0x98>
 800a4b8:	0029      	movs	r1, r5
 800a4ba:	0038      	movs	r0, r7
 800a4bc:	f7ff ff48 	bl	800a350 <_malloc_r>
 800a4c0:	1e06      	subs	r6, r0, #0
 800a4c2:	d02d      	beq.n	800a520 <__ssputs_r+0xac>
 800a4c4:	9a02      	ldr	r2, [sp, #8]
 800a4c6:	6921      	ldr	r1, [r4, #16]
 800a4c8:	f7ff fecc 	bl	800a264 <memcpy>
 800a4cc:	89a2      	ldrh	r2, [r4, #12]
 800a4ce:	4b19      	ldr	r3, [pc, #100]	; (800a534 <__ssputs_r+0xc0>)
 800a4d0:	401a      	ands	r2, r3
 800a4d2:	2380      	movs	r3, #128	; 0x80
 800a4d4:	4313      	orrs	r3, r2
 800a4d6:	81a3      	strh	r3, [r4, #12]
 800a4d8:	9b02      	ldr	r3, [sp, #8]
 800a4da:	6126      	str	r6, [r4, #16]
 800a4dc:	18f6      	adds	r6, r6, r3
 800a4de:	6026      	str	r6, [r4, #0]
 800a4e0:	6165      	str	r5, [r4, #20]
 800a4e2:	9e01      	ldr	r6, [sp, #4]
 800a4e4:	1aed      	subs	r5, r5, r3
 800a4e6:	60a5      	str	r5, [r4, #8]
 800a4e8:	9b01      	ldr	r3, [sp, #4]
 800a4ea:	429e      	cmp	r6, r3
 800a4ec:	d900      	bls.n	800a4f0 <__ssputs_r+0x7c>
 800a4ee:	9e01      	ldr	r6, [sp, #4]
 800a4f0:	0032      	movs	r2, r6
 800a4f2:	9903      	ldr	r1, [sp, #12]
 800a4f4:	6820      	ldr	r0, [r4, #0]
 800a4f6:	f000 fcff 	bl	800aef8 <memmove>
 800a4fa:	2000      	movs	r0, #0
 800a4fc:	68a3      	ldr	r3, [r4, #8]
 800a4fe:	1b9b      	subs	r3, r3, r6
 800a500:	60a3      	str	r3, [r4, #8]
 800a502:	6823      	ldr	r3, [r4, #0]
 800a504:	199b      	adds	r3, r3, r6
 800a506:	6023      	str	r3, [r4, #0]
 800a508:	b005      	add	sp, #20
 800a50a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a50c:	002a      	movs	r2, r5
 800a50e:	0038      	movs	r0, r7
 800a510:	f000 fd47 	bl	800afa2 <_realloc_r>
 800a514:	1e06      	subs	r6, r0, #0
 800a516:	d1df      	bne.n	800a4d8 <__ssputs_r+0x64>
 800a518:	0038      	movs	r0, r7
 800a51a:	6921      	ldr	r1, [r4, #16]
 800a51c:	f7ff feac 	bl	800a278 <_free_r>
 800a520:	230c      	movs	r3, #12
 800a522:	2001      	movs	r0, #1
 800a524:	603b      	str	r3, [r7, #0]
 800a526:	89a2      	ldrh	r2, [r4, #12]
 800a528:	3334      	adds	r3, #52	; 0x34
 800a52a:	4313      	orrs	r3, r2
 800a52c:	81a3      	strh	r3, [r4, #12]
 800a52e:	4240      	negs	r0, r0
 800a530:	e7ea      	b.n	800a508 <__ssputs_r+0x94>
 800a532:	46c0      	nop			; (mov r8, r8)
 800a534:	fffffb7f 	.word	0xfffffb7f

0800a538 <_svfiprintf_r>:
 800a538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a53a:	b0a1      	sub	sp, #132	; 0x84
 800a53c:	9003      	str	r0, [sp, #12]
 800a53e:	001d      	movs	r5, r3
 800a540:	898b      	ldrh	r3, [r1, #12]
 800a542:	000f      	movs	r7, r1
 800a544:	0016      	movs	r6, r2
 800a546:	061b      	lsls	r3, r3, #24
 800a548:	d511      	bpl.n	800a56e <_svfiprintf_r+0x36>
 800a54a:	690b      	ldr	r3, [r1, #16]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d10e      	bne.n	800a56e <_svfiprintf_r+0x36>
 800a550:	2140      	movs	r1, #64	; 0x40
 800a552:	f7ff fefd 	bl	800a350 <_malloc_r>
 800a556:	6038      	str	r0, [r7, #0]
 800a558:	6138      	str	r0, [r7, #16]
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d105      	bne.n	800a56a <_svfiprintf_r+0x32>
 800a55e:	230c      	movs	r3, #12
 800a560:	9a03      	ldr	r2, [sp, #12]
 800a562:	3801      	subs	r0, #1
 800a564:	6013      	str	r3, [r2, #0]
 800a566:	b021      	add	sp, #132	; 0x84
 800a568:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a56a:	2340      	movs	r3, #64	; 0x40
 800a56c:	617b      	str	r3, [r7, #20]
 800a56e:	2300      	movs	r3, #0
 800a570:	ac08      	add	r4, sp, #32
 800a572:	6163      	str	r3, [r4, #20]
 800a574:	3320      	adds	r3, #32
 800a576:	7663      	strb	r3, [r4, #25]
 800a578:	3310      	adds	r3, #16
 800a57a:	76a3      	strb	r3, [r4, #26]
 800a57c:	9507      	str	r5, [sp, #28]
 800a57e:	0035      	movs	r5, r6
 800a580:	782b      	ldrb	r3, [r5, #0]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <_svfiprintf_r+0x52>
 800a586:	2b25      	cmp	r3, #37	; 0x25
 800a588:	d148      	bne.n	800a61c <_svfiprintf_r+0xe4>
 800a58a:	1bab      	subs	r3, r5, r6
 800a58c:	9305      	str	r3, [sp, #20]
 800a58e:	42b5      	cmp	r5, r6
 800a590:	d00b      	beq.n	800a5aa <_svfiprintf_r+0x72>
 800a592:	0032      	movs	r2, r6
 800a594:	0039      	movs	r1, r7
 800a596:	9803      	ldr	r0, [sp, #12]
 800a598:	f7ff ff6c 	bl	800a474 <__ssputs_r>
 800a59c:	3001      	adds	r0, #1
 800a59e:	d100      	bne.n	800a5a2 <_svfiprintf_r+0x6a>
 800a5a0:	e0af      	b.n	800a702 <_svfiprintf_r+0x1ca>
 800a5a2:	6963      	ldr	r3, [r4, #20]
 800a5a4:	9a05      	ldr	r2, [sp, #20]
 800a5a6:	189b      	adds	r3, r3, r2
 800a5a8:	6163      	str	r3, [r4, #20]
 800a5aa:	782b      	ldrb	r3, [r5, #0]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d100      	bne.n	800a5b2 <_svfiprintf_r+0x7a>
 800a5b0:	e0a7      	b.n	800a702 <_svfiprintf_r+0x1ca>
 800a5b2:	2201      	movs	r2, #1
 800a5b4:	2300      	movs	r3, #0
 800a5b6:	4252      	negs	r2, r2
 800a5b8:	6062      	str	r2, [r4, #4]
 800a5ba:	a904      	add	r1, sp, #16
 800a5bc:	3254      	adds	r2, #84	; 0x54
 800a5be:	1852      	adds	r2, r2, r1
 800a5c0:	1c6e      	adds	r6, r5, #1
 800a5c2:	6023      	str	r3, [r4, #0]
 800a5c4:	60e3      	str	r3, [r4, #12]
 800a5c6:	60a3      	str	r3, [r4, #8]
 800a5c8:	7013      	strb	r3, [r2, #0]
 800a5ca:	65a3      	str	r3, [r4, #88]	; 0x58
 800a5cc:	4b55      	ldr	r3, [pc, #340]	; (800a724 <_svfiprintf_r+0x1ec>)
 800a5ce:	2205      	movs	r2, #5
 800a5d0:	0018      	movs	r0, r3
 800a5d2:	7831      	ldrb	r1, [r6, #0]
 800a5d4:	9305      	str	r3, [sp, #20]
 800a5d6:	f000 fcd9 	bl	800af8c <memchr>
 800a5da:	1c75      	adds	r5, r6, #1
 800a5dc:	2800      	cmp	r0, #0
 800a5de:	d11f      	bne.n	800a620 <_svfiprintf_r+0xe8>
 800a5e0:	6822      	ldr	r2, [r4, #0]
 800a5e2:	06d3      	lsls	r3, r2, #27
 800a5e4:	d504      	bpl.n	800a5f0 <_svfiprintf_r+0xb8>
 800a5e6:	2353      	movs	r3, #83	; 0x53
 800a5e8:	a904      	add	r1, sp, #16
 800a5ea:	185b      	adds	r3, r3, r1
 800a5ec:	2120      	movs	r1, #32
 800a5ee:	7019      	strb	r1, [r3, #0]
 800a5f0:	0713      	lsls	r3, r2, #28
 800a5f2:	d504      	bpl.n	800a5fe <_svfiprintf_r+0xc6>
 800a5f4:	2353      	movs	r3, #83	; 0x53
 800a5f6:	a904      	add	r1, sp, #16
 800a5f8:	185b      	adds	r3, r3, r1
 800a5fa:	212b      	movs	r1, #43	; 0x2b
 800a5fc:	7019      	strb	r1, [r3, #0]
 800a5fe:	7833      	ldrb	r3, [r6, #0]
 800a600:	2b2a      	cmp	r3, #42	; 0x2a
 800a602:	d016      	beq.n	800a632 <_svfiprintf_r+0xfa>
 800a604:	0035      	movs	r5, r6
 800a606:	2100      	movs	r1, #0
 800a608:	200a      	movs	r0, #10
 800a60a:	68e3      	ldr	r3, [r4, #12]
 800a60c:	782a      	ldrb	r2, [r5, #0]
 800a60e:	1c6e      	adds	r6, r5, #1
 800a610:	3a30      	subs	r2, #48	; 0x30
 800a612:	2a09      	cmp	r2, #9
 800a614:	d94e      	bls.n	800a6b4 <_svfiprintf_r+0x17c>
 800a616:	2900      	cmp	r1, #0
 800a618:	d111      	bne.n	800a63e <_svfiprintf_r+0x106>
 800a61a:	e017      	b.n	800a64c <_svfiprintf_r+0x114>
 800a61c:	3501      	adds	r5, #1
 800a61e:	e7af      	b.n	800a580 <_svfiprintf_r+0x48>
 800a620:	9b05      	ldr	r3, [sp, #20]
 800a622:	6822      	ldr	r2, [r4, #0]
 800a624:	1ac0      	subs	r0, r0, r3
 800a626:	2301      	movs	r3, #1
 800a628:	4083      	lsls	r3, r0
 800a62a:	4313      	orrs	r3, r2
 800a62c:	002e      	movs	r6, r5
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	e7cc      	b.n	800a5cc <_svfiprintf_r+0x94>
 800a632:	9b07      	ldr	r3, [sp, #28]
 800a634:	1d19      	adds	r1, r3, #4
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	9107      	str	r1, [sp, #28]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	db01      	blt.n	800a642 <_svfiprintf_r+0x10a>
 800a63e:	930b      	str	r3, [sp, #44]	; 0x2c
 800a640:	e004      	b.n	800a64c <_svfiprintf_r+0x114>
 800a642:	425b      	negs	r3, r3
 800a644:	60e3      	str	r3, [r4, #12]
 800a646:	2302      	movs	r3, #2
 800a648:	4313      	orrs	r3, r2
 800a64a:	6023      	str	r3, [r4, #0]
 800a64c:	782b      	ldrb	r3, [r5, #0]
 800a64e:	2b2e      	cmp	r3, #46	; 0x2e
 800a650:	d10a      	bne.n	800a668 <_svfiprintf_r+0x130>
 800a652:	786b      	ldrb	r3, [r5, #1]
 800a654:	2b2a      	cmp	r3, #42	; 0x2a
 800a656:	d135      	bne.n	800a6c4 <_svfiprintf_r+0x18c>
 800a658:	9b07      	ldr	r3, [sp, #28]
 800a65a:	3502      	adds	r5, #2
 800a65c:	1d1a      	adds	r2, r3, #4
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	9207      	str	r2, [sp, #28]
 800a662:	2b00      	cmp	r3, #0
 800a664:	db2b      	blt.n	800a6be <_svfiprintf_r+0x186>
 800a666:	9309      	str	r3, [sp, #36]	; 0x24
 800a668:	4e2f      	ldr	r6, [pc, #188]	; (800a728 <_svfiprintf_r+0x1f0>)
 800a66a:	2203      	movs	r2, #3
 800a66c:	0030      	movs	r0, r6
 800a66e:	7829      	ldrb	r1, [r5, #0]
 800a670:	f000 fc8c 	bl	800af8c <memchr>
 800a674:	2800      	cmp	r0, #0
 800a676:	d006      	beq.n	800a686 <_svfiprintf_r+0x14e>
 800a678:	2340      	movs	r3, #64	; 0x40
 800a67a:	1b80      	subs	r0, r0, r6
 800a67c:	4083      	lsls	r3, r0
 800a67e:	6822      	ldr	r2, [r4, #0]
 800a680:	3501      	adds	r5, #1
 800a682:	4313      	orrs	r3, r2
 800a684:	6023      	str	r3, [r4, #0]
 800a686:	7829      	ldrb	r1, [r5, #0]
 800a688:	2206      	movs	r2, #6
 800a68a:	4828      	ldr	r0, [pc, #160]	; (800a72c <_svfiprintf_r+0x1f4>)
 800a68c:	1c6e      	adds	r6, r5, #1
 800a68e:	7621      	strb	r1, [r4, #24]
 800a690:	f000 fc7c 	bl	800af8c <memchr>
 800a694:	2800      	cmp	r0, #0
 800a696:	d03c      	beq.n	800a712 <_svfiprintf_r+0x1da>
 800a698:	4b25      	ldr	r3, [pc, #148]	; (800a730 <_svfiprintf_r+0x1f8>)
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d125      	bne.n	800a6ea <_svfiprintf_r+0x1b2>
 800a69e:	2207      	movs	r2, #7
 800a6a0:	9b07      	ldr	r3, [sp, #28]
 800a6a2:	3307      	adds	r3, #7
 800a6a4:	4393      	bics	r3, r2
 800a6a6:	3308      	adds	r3, #8
 800a6a8:	9307      	str	r3, [sp, #28]
 800a6aa:	6963      	ldr	r3, [r4, #20]
 800a6ac:	9a04      	ldr	r2, [sp, #16]
 800a6ae:	189b      	adds	r3, r3, r2
 800a6b0:	6163      	str	r3, [r4, #20]
 800a6b2:	e764      	b.n	800a57e <_svfiprintf_r+0x46>
 800a6b4:	4343      	muls	r3, r0
 800a6b6:	0035      	movs	r5, r6
 800a6b8:	2101      	movs	r1, #1
 800a6ba:	189b      	adds	r3, r3, r2
 800a6bc:	e7a6      	b.n	800a60c <_svfiprintf_r+0xd4>
 800a6be:	2301      	movs	r3, #1
 800a6c0:	425b      	negs	r3, r3
 800a6c2:	e7d0      	b.n	800a666 <_svfiprintf_r+0x12e>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	200a      	movs	r0, #10
 800a6c8:	001a      	movs	r2, r3
 800a6ca:	3501      	adds	r5, #1
 800a6cc:	6063      	str	r3, [r4, #4]
 800a6ce:	7829      	ldrb	r1, [r5, #0]
 800a6d0:	1c6e      	adds	r6, r5, #1
 800a6d2:	3930      	subs	r1, #48	; 0x30
 800a6d4:	2909      	cmp	r1, #9
 800a6d6:	d903      	bls.n	800a6e0 <_svfiprintf_r+0x1a8>
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d0c5      	beq.n	800a668 <_svfiprintf_r+0x130>
 800a6dc:	9209      	str	r2, [sp, #36]	; 0x24
 800a6de:	e7c3      	b.n	800a668 <_svfiprintf_r+0x130>
 800a6e0:	4342      	muls	r2, r0
 800a6e2:	0035      	movs	r5, r6
 800a6e4:	2301      	movs	r3, #1
 800a6e6:	1852      	adds	r2, r2, r1
 800a6e8:	e7f1      	b.n	800a6ce <_svfiprintf_r+0x196>
 800a6ea:	aa07      	add	r2, sp, #28
 800a6ec:	9200      	str	r2, [sp, #0]
 800a6ee:	0021      	movs	r1, r4
 800a6f0:	003a      	movs	r2, r7
 800a6f2:	4b10      	ldr	r3, [pc, #64]	; (800a734 <_svfiprintf_r+0x1fc>)
 800a6f4:	9803      	ldr	r0, [sp, #12]
 800a6f6:	e000      	b.n	800a6fa <_svfiprintf_r+0x1c2>
 800a6f8:	bf00      	nop
 800a6fa:	9004      	str	r0, [sp, #16]
 800a6fc:	9b04      	ldr	r3, [sp, #16]
 800a6fe:	3301      	adds	r3, #1
 800a700:	d1d3      	bne.n	800a6aa <_svfiprintf_r+0x172>
 800a702:	89bb      	ldrh	r3, [r7, #12]
 800a704:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a706:	065b      	lsls	r3, r3, #25
 800a708:	d400      	bmi.n	800a70c <_svfiprintf_r+0x1d4>
 800a70a:	e72c      	b.n	800a566 <_svfiprintf_r+0x2e>
 800a70c:	2001      	movs	r0, #1
 800a70e:	4240      	negs	r0, r0
 800a710:	e729      	b.n	800a566 <_svfiprintf_r+0x2e>
 800a712:	aa07      	add	r2, sp, #28
 800a714:	9200      	str	r2, [sp, #0]
 800a716:	0021      	movs	r1, r4
 800a718:	003a      	movs	r2, r7
 800a71a:	4b06      	ldr	r3, [pc, #24]	; (800a734 <_svfiprintf_r+0x1fc>)
 800a71c:	9803      	ldr	r0, [sp, #12]
 800a71e:	f000 f9bf 	bl	800aaa0 <_printf_i>
 800a722:	e7ea      	b.n	800a6fa <_svfiprintf_r+0x1c2>
 800a724:	0800b290 	.word	0x0800b290
 800a728:	0800b296 	.word	0x0800b296
 800a72c:	0800b29a 	.word	0x0800b29a
 800a730:	00000000 	.word	0x00000000
 800a734:	0800a475 	.word	0x0800a475

0800a738 <__sfputc_r>:
 800a738:	6893      	ldr	r3, [r2, #8]
 800a73a:	b510      	push	{r4, lr}
 800a73c:	3b01      	subs	r3, #1
 800a73e:	6093      	str	r3, [r2, #8]
 800a740:	2b00      	cmp	r3, #0
 800a742:	da04      	bge.n	800a74e <__sfputc_r+0x16>
 800a744:	6994      	ldr	r4, [r2, #24]
 800a746:	42a3      	cmp	r3, r4
 800a748:	db07      	blt.n	800a75a <__sfputc_r+0x22>
 800a74a:	290a      	cmp	r1, #10
 800a74c:	d005      	beq.n	800a75a <__sfputc_r+0x22>
 800a74e:	6813      	ldr	r3, [r2, #0]
 800a750:	1c58      	adds	r0, r3, #1
 800a752:	6010      	str	r0, [r2, #0]
 800a754:	7019      	strb	r1, [r3, #0]
 800a756:	0008      	movs	r0, r1
 800a758:	bd10      	pop	{r4, pc}
 800a75a:	f7ff fc5b 	bl	800a014 <__swbuf_r>
 800a75e:	0001      	movs	r1, r0
 800a760:	e7f9      	b.n	800a756 <__sfputc_r+0x1e>

0800a762 <__sfputs_r>:
 800a762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a764:	0006      	movs	r6, r0
 800a766:	000f      	movs	r7, r1
 800a768:	0014      	movs	r4, r2
 800a76a:	18d5      	adds	r5, r2, r3
 800a76c:	42ac      	cmp	r4, r5
 800a76e:	d101      	bne.n	800a774 <__sfputs_r+0x12>
 800a770:	2000      	movs	r0, #0
 800a772:	e007      	b.n	800a784 <__sfputs_r+0x22>
 800a774:	7821      	ldrb	r1, [r4, #0]
 800a776:	003a      	movs	r2, r7
 800a778:	0030      	movs	r0, r6
 800a77a:	f7ff ffdd 	bl	800a738 <__sfputc_r>
 800a77e:	3401      	adds	r4, #1
 800a780:	1c43      	adds	r3, r0, #1
 800a782:	d1f3      	bne.n	800a76c <__sfputs_r+0xa>
 800a784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a788 <_vfiprintf_r>:
 800a788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a78a:	b0a1      	sub	sp, #132	; 0x84
 800a78c:	000f      	movs	r7, r1
 800a78e:	0015      	movs	r5, r2
 800a790:	001e      	movs	r6, r3
 800a792:	9003      	str	r0, [sp, #12]
 800a794:	2800      	cmp	r0, #0
 800a796:	d004      	beq.n	800a7a2 <_vfiprintf_r+0x1a>
 800a798:	6a03      	ldr	r3, [r0, #32]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <_vfiprintf_r+0x1a>
 800a79e:	f7ff fb15 	bl	8009dcc <__sinit>
 800a7a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7a4:	07db      	lsls	r3, r3, #31
 800a7a6:	d405      	bmi.n	800a7b4 <_vfiprintf_r+0x2c>
 800a7a8:	89bb      	ldrh	r3, [r7, #12]
 800a7aa:	059b      	lsls	r3, r3, #22
 800a7ac:	d402      	bmi.n	800a7b4 <_vfiprintf_r+0x2c>
 800a7ae:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7b0:	f7ff fd56 	bl	800a260 <__retarget_lock_acquire_recursive>
 800a7b4:	89bb      	ldrh	r3, [r7, #12]
 800a7b6:	071b      	lsls	r3, r3, #28
 800a7b8:	d502      	bpl.n	800a7c0 <_vfiprintf_r+0x38>
 800a7ba:	693b      	ldr	r3, [r7, #16]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d113      	bne.n	800a7e8 <_vfiprintf_r+0x60>
 800a7c0:	0039      	movs	r1, r7
 800a7c2:	9803      	ldr	r0, [sp, #12]
 800a7c4:	f7ff fc68 	bl	800a098 <__swsetup_r>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	d00d      	beq.n	800a7e8 <_vfiprintf_r+0x60>
 800a7cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a7ce:	07db      	lsls	r3, r3, #31
 800a7d0:	d503      	bpl.n	800a7da <_vfiprintf_r+0x52>
 800a7d2:	2001      	movs	r0, #1
 800a7d4:	4240      	negs	r0, r0
 800a7d6:	b021      	add	sp, #132	; 0x84
 800a7d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a7da:	89bb      	ldrh	r3, [r7, #12]
 800a7dc:	059b      	lsls	r3, r3, #22
 800a7de:	d4f8      	bmi.n	800a7d2 <_vfiprintf_r+0x4a>
 800a7e0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a7e2:	f7ff fd3e 	bl	800a262 <__retarget_lock_release_recursive>
 800a7e6:	e7f4      	b.n	800a7d2 <_vfiprintf_r+0x4a>
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	ac08      	add	r4, sp, #32
 800a7ec:	6163      	str	r3, [r4, #20]
 800a7ee:	3320      	adds	r3, #32
 800a7f0:	7663      	strb	r3, [r4, #25]
 800a7f2:	3310      	adds	r3, #16
 800a7f4:	76a3      	strb	r3, [r4, #26]
 800a7f6:	9607      	str	r6, [sp, #28]
 800a7f8:	002e      	movs	r6, r5
 800a7fa:	7833      	ldrb	r3, [r6, #0]
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <_vfiprintf_r+0x7c>
 800a800:	2b25      	cmp	r3, #37	; 0x25
 800a802:	d148      	bne.n	800a896 <_vfiprintf_r+0x10e>
 800a804:	1b73      	subs	r3, r6, r5
 800a806:	9305      	str	r3, [sp, #20]
 800a808:	42ae      	cmp	r6, r5
 800a80a:	d00b      	beq.n	800a824 <_vfiprintf_r+0x9c>
 800a80c:	002a      	movs	r2, r5
 800a80e:	0039      	movs	r1, r7
 800a810:	9803      	ldr	r0, [sp, #12]
 800a812:	f7ff ffa6 	bl	800a762 <__sfputs_r>
 800a816:	3001      	adds	r0, #1
 800a818:	d100      	bne.n	800a81c <_vfiprintf_r+0x94>
 800a81a:	e0af      	b.n	800a97c <_vfiprintf_r+0x1f4>
 800a81c:	6963      	ldr	r3, [r4, #20]
 800a81e:	9a05      	ldr	r2, [sp, #20]
 800a820:	189b      	adds	r3, r3, r2
 800a822:	6163      	str	r3, [r4, #20]
 800a824:	7833      	ldrb	r3, [r6, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d100      	bne.n	800a82c <_vfiprintf_r+0xa4>
 800a82a:	e0a7      	b.n	800a97c <_vfiprintf_r+0x1f4>
 800a82c:	2201      	movs	r2, #1
 800a82e:	2300      	movs	r3, #0
 800a830:	4252      	negs	r2, r2
 800a832:	6062      	str	r2, [r4, #4]
 800a834:	a904      	add	r1, sp, #16
 800a836:	3254      	adds	r2, #84	; 0x54
 800a838:	1852      	adds	r2, r2, r1
 800a83a:	1c75      	adds	r5, r6, #1
 800a83c:	6023      	str	r3, [r4, #0]
 800a83e:	60e3      	str	r3, [r4, #12]
 800a840:	60a3      	str	r3, [r4, #8]
 800a842:	7013      	strb	r3, [r2, #0]
 800a844:	65a3      	str	r3, [r4, #88]	; 0x58
 800a846:	4b59      	ldr	r3, [pc, #356]	; (800a9ac <_vfiprintf_r+0x224>)
 800a848:	2205      	movs	r2, #5
 800a84a:	0018      	movs	r0, r3
 800a84c:	7829      	ldrb	r1, [r5, #0]
 800a84e:	9305      	str	r3, [sp, #20]
 800a850:	f000 fb9c 	bl	800af8c <memchr>
 800a854:	1c6e      	adds	r6, r5, #1
 800a856:	2800      	cmp	r0, #0
 800a858:	d11f      	bne.n	800a89a <_vfiprintf_r+0x112>
 800a85a:	6822      	ldr	r2, [r4, #0]
 800a85c:	06d3      	lsls	r3, r2, #27
 800a85e:	d504      	bpl.n	800a86a <_vfiprintf_r+0xe2>
 800a860:	2353      	movs	r3, #83	; 0x53
 800a862:	a904      	add	r1, sp, #16
 800a864:	185b      	adds	r3, r3, r1
 800a866:	2120      	movs	r1, #32
 800a868:	7019      	strb	r1, [r3, #0]
 800a86a:	0713      	lsls	r3, r2, #28
 800a86c:	d504      	bpl.n	800a878 <_vfiprintf_r+0xf0>
 800a86e:	2353      	movs	r3, #83	; 0x53
 800a870:	a904      	add	r1, sp, #16
 800a872:	185b      	adds	r3, r3, r1
 800a874:	212b      	movs	r1, #43	; 0x2b
 800a876:	7019      	strb	r1, [r3, #0]
 800a878:	782b      	ldrb	r3, [r5, #0]
 800a87a:	2b2a      	cmp	r3, #42	; 0x2a
 800a87c:	d016      	beq.n	800a8ac <_vfiprintf_r+0x124>
 800a87e:	002e      	movs	r6, r5
 800a880:	2100      	movs	r1, #0
 800a882:	200a      	movs	r0, #10
 800a884:	68e3      	ldr	r3, [r4, #12]
 800a886:	7832      	ldrb	r2, [r6, #0]
 800a888:	1c75      	adds	r5, r6, #1
 800a88a:	3a30      	subs	r2, #48	; 0x30
 800a88c:	2a09      	cmp	r2, #9
 800a88e:	d94e      	bls.n	800a92e <_vfiprintf_r+0x1a6>
 800a890:	2900      	cmp	r1, #0
 800a892:	d111      	bne.n	800a8b8 <_vfiprintf_r+0x130>
 800a894:	e017      	b.n	800a8c6 <_vfiprintf_r+0x13e>
 800a896:	3601      	adds	r6, #1
 800a898:	e7af      	b.n	800a7fa <_vfiprintf_r+0x72>
 800a89a:	9b05      	ldr	r3, [sp, #20]
 800a89c:	6822      	ldr	r2, [r4, #0]
 800a89e:	1ac0      	subs	r0, r0, r3
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	4083      	lsls	r3, r0
 800a8a4:	4313      	orrs	r3, r2
 800a8a6:	0035      	movs	r5, r6
 800a8a8:	6023      	str	r3, [r4, #0]
 800a8aa:	e7cc      	b.n	800a846 <_vfiprintf_r+0xbe>
 800a8ac:	9b07      	ldr	r3, [sp, #28]
 800a8ae:	1d19      	adds	r1, r3, #4
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	9107      	str	r1, [sp, #28]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	db01      	blt.n	800a8bc <_vfiprintf_r+0x134>
 800a8b8:	930b      	str	r3, [sp, #44]	; 0x2c
 800a8ba:	e004      	b.n	800a8c6 <_vfiprintf_r+0x13e>
 800a8bc:	425b      	negs	r3, r3
 800a8be:	60e3      	str	r3, [r4, #12]
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	4313      	orrs	r3, r2
 800a8c4:	6023      	str	r3, [r4, #0]
 800a8c6:	7833      	ldrb	r3, [r6, #0]
 800a8c8:	2b2e      	cmp	r3, #46	; 0x2e
 800a8ca:	d10a      	bne.n	800a8e2 <_vfiprintf_r+0x15a>
 800a8cc:	7873      	ldrb	r3, [r6, #1]
 800a8ce:	2b2a      	cmp	r3, #42	; 0x2a
 800a8d0:	d135      	bne.n	800a93e <_vfiprintf_r+0x1b6>
 800a8d2:	9b07      	ldr	r3, [sp, #28]
 800a8d4:	3602      	adds	r6, #2
 800a8d6:	1d1a      	adds	r2, r3, #4
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	9207      	str	r2, [sp, #28]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	db2b      	blt.n	800a938 <_vfiprintf_r+0x1b0>
 800a8e0:	9309      	str	r3, [sp, #36]	; 0x24
 800a8e2:	4d33      	ldr	r5, [pc, #204]	; (800a9b0 <_vfiprintf_r+0x228>)
 800a8e4:	2203      	movs	r2, #3
 800a8e6:	0028      	movs	r0, r5
 800a8e8:	7831      	ldrb	r1, [r6, #0]
 800a8ea:	f000 fb4f 	bl	800af8c <memchr>
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d006      	beq.n	800a900 <_vfiprintf_r+0x178>
 800a8f2:	2340      	movs	r3, #64	; 0x40
 800a8f4:	1b40      	subs	r0, r0, r5
 800a8f6:	4083      	lsls	r3, r0
 800a8f8:	6822      	ldr	r2, [r4, #0]
 800a8fa:	3601      	adds	r6, #1
 800a8fc:	4313      	orrs	r3, r2
 800a8fe:	6023      	str	r3, [r4, #0]
 800a900:	7831      	ldrb	r1, [r6, #0]
 800a902:	2206      	movs	r2, #6
 800a904:	482b      	ldr	r0, [pc, #172]	; (800a9b4 <_vfiprintf_r+0x22c>)
 800a906:	1c75      	adds	r5, r6, #1
 800a908:	7621      	strb	r1, [r4, #24]
 800a90a:	f000 fb3f 	bl	800af8c <memchr>
 800a90e:	2800      	cmp	r0, #0
 800a910:	d043      	beq.n	800a99a <_vfiprintf_r+0x212>
 800a912:	4b29      	ldr	r3, [pc, #164]	; (800a9b8 <_vfiprintf_r+0x230>)
 800a914:	2b00      	cmp	r3, #0
 800a916:	d125      	bne.n	800a964 <_vfiprintf_r+0x1dc>
 800a918:	2207      	movs	r2, #7
 800a91a:	9b07      	ldr	r3, [sp, #28]
 800a91c:	3307      	adds	r3, #7
 800a91e:	4393      	bics	r3, r2
 800a920:	3308      	adds	r3, #8
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	6963      	ldr	r3, [r4, #20]
 800a926:	9a04      	ldr	r2, [sp, #16]
 800a928:	189b      	adds	r3, r3, r2
 800a92a:	6163      	str	r3, [r4, #20]
 800a92c:	e764      	b.n	800a7f8 <_vfiprintf_r+0x70>
 800a92e:	4343      	muls	r3, r0
 800a930:	002e      	movs	r6, r5
 800a932:	2101      	movs	r1, #1
 800a934:	189b      	adds	r3, r3, r2
 800a936:	e7a6      	b.n	800a886 <_vfiprintf_r+0xfe>
 800a938:	2301      	movs	r3, #1
 800a93a:	425b      	negs	r3, r3
 800a93c:	e7d0      	b.n	800a8e0 <_vfiprintf_r+0x158>
 800a93e:	2300      	movs	r3, #0
 800a940:	200a      	movs	r0, #10
 800a942:	001a      	movs	r2, r3
 800a944:	3601      	adds	r6, #1
 800a946:	6063      	str	r3, [r4, #4]
 800a948:	7831      	ldrb	r1, [r6, #0]
 800a94a:	1c75      	adds	r5, r6, #1
 800a94c:	3930      	subs	r1, #48	; 0x30
 800a94e:	2909      	cmp	r1, #9
 800a950:	d903      	bls.n	800a95a <_vfiprintf_r+0x1d2>
 800a952:	2b00      	cmp	r3, #0
 800a954:	d0c5      	beq.n	800a8e2 <_vfiprintf_r+0x15a>
 800a956:	9209      	str	r2, [sp, #36]	; 0x24
 800a958:	e7c3      	b.n	800a8e2 <_vfiprintf_r+0x15a>
 800a95a:	4342      	muls	r2, r0
 800a95c:	002e      	movs	r6, r5
 800a95e:	2301      	movs	r3, #1
 800a960:	1852      	adds	r2, r2, r1
 800a962:	e7f1      	b.n	800a948 <_vfiprintf_r+0x1c0>
 800a964:	aa07      	add	r2, sp, #28
 800a966:	9200      	str	r2, [sp, #0]
 800a968:	0021      	movs	r1, r4
 800a96a:	003a      	movs	r2, r7
 800a96c:	4b13      	ldr	r3, [pc, #76]	; (800a9bc <_vfiprintf_r+0x234>)
 800a96e:	9803      	ldr	r0, [sp, #12]
 800a970:	e000      	b.n	800a974 <_vfiprintf_r+0x1ec>
 800a972:	bf00      	nop
 800a974:	9004      	str	r0, [sp, #16]
 800a976:	9b04      	ldr	r3, [sp, #16]
 800a978:	3301      	adds	r3, #1
 800a97a:	d1d3      	bne.n	800a924 <_vfiprintf_r+0x19c>
 800a97c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a97e:	07db      	lsls	r3, r3, #31
 800a980:	d405      	bmi.n	800a98e <_vfiprintf_r+0x206>
 800a982:	89bb      	ldrh	r3, [r7, #12]
 800a984:	059b      	lsls	r3, r3, #22
 800a986:	d402      	bmi.n	800a98e <_vfiprintf_r+0x206>
 800a988:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800a98a:	f7ff fc6a 	bl	800a262 <__retarget_lock_release_recursive>
 800a98e:	89bb      	ldrh	r3, [r7, #12]
 800a990:	065b      	lsls	r3, r3, #25
 800a992:	d500      	bpl.n	800a996 <_vfiprintf_r+0x20e>
 800a994:	e71d      	b.n	800a7d2 <_vfiprintf_r+0x4a>
 800a996:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a998:	e71d      	b.n	800a7d6 <_vfiprintf_r+0x4e>
 800a99a:	aa07      	add	r2, sp, #28
 800a99c:	9200      	str	r2, [sp, #0]
 800a99e:	0021      	movs	r1, r4
 800a9a0:	003a      	movs	r2, r7
 800a9a2:	4b06      	ldr	r3, [pc, #24]	; (800a9bc <_vfiprintf_r+0x234>)
 800a9a4:	9803      	ldr	r0, [sp, #12]
 800a9a6:	f000 f87b 	bl	800aaa0 <_printf_i>
 800a9aa:	e7e3      	b.n	800a974 <_vfiprintf_r+0x1ec>
 800a9ac:	0800b290 	.word	0x0800b290
 800a9b0:	0800b296 	.word	0x0800b296
 800a9b4:	0800b29a 	.word	0x0800b29a
 800a9b8:	00000000 	.word	0x00000000
 800a9bc:	0800a763 	.word	0x0800a763

0800a9c0 <_printf_common>:
 800a9c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9c2:	0016      	movs	r6, r2
 800a9c4:	9301      	str	r3, [sp, #4]
 800a9c6:	688a      	ldr	r2, [r1, #8]
 800a9c8:	690b      	ldr	r3, [r1, #16]
 800a9ca:	000c      	movs	r4, r1
 800a9cc:	9000      	str	r0, [sp, #0]
 800a9ce:	4293      	cmp	r3, r2
 800a9d0:	da00      	bge.n	800a9d4 <_printf_common+0x14>
 800a9d2:	0013      	movs	r3, r2
 800a9d4:	0022      	movs	r2, r4
 800a9d6:	6033      	str	r3, [r6, #0]
 800a9d8:	3243      	adds	r2, #67	; 0x43
 800a9da:	7812      	ldrb	r2, [r2, #0]
 800a9dc:	2a00      	cmp	r2, #0
 800a9de:	d001      	beq.n	800a9e4 <_printf_common+0x24>
 800a9e0:	3301      	adds	r3, #1
 800a9e2:	6033      	str	r3, [r6, #0]
 800a9e4:	6823      	ldr	r3, [r4, #0]
 800a9e6:	069b      	lsls	r3, r3, #26
 800a9e8:	d502      	bpl.n	800a9f0 <_printf_common+0x30>
 800a9ea:	6833      	ldr	r3, [r6, #0]
 800a9ec:	3302      	adds	r3, #2
 800a9ee:	6033      	str	r3, [r6, #0]
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	2306      	movs	r3, #6
 800a9f4:	0015      	movs	r5, r2
 800a9f6:	401d      	ands	r5, r3
 800a9f8:	421a      	tst	r2, r3
 800a9fa:	d027      	beq.n	800aa4c <_printf_common+0x8c>
 800a9fc:	0023      	movs	r3, r4
 800a9fe:	3343      	adds	r3, #67	; 0x43
 800aa00:	781b      	ldrb	r3, [r3, #0]
 800aa02:	1e5a      	subs	r2, r3, #1
 800aa04:	4193      	sbcs	r3, r2
 800aa06:	6822      	ldr	r2, [r4, #0]
 800aa08:	0692      	lsls	r2, r2, #26
 800aa0a:	d430      	bmi.n	800aa6e <_printf_common+0xae>
 800aa0c:	0022      	movs	r2, r4
 800aa0e:	9901      	ldr	r1, [sp, #4]
 800aa10:	9800      	ldr	r0, [sp, #0]
 800aa12:	9d08      	ldr	r5, [sp, #32]
 800aa14:	3243      	adds	r2, #67	; 0x43
 800aa16:	47a8      	blx	r5
 800aa18:	3001      	adds	r0, #1
 800aa1a:	d025      	beq.n	800aa68 <_printf_common+0xa8>
 800aa1c:	2206      	movs	r2, #6
 800aa1e:	6823      	ldr	r3, [r4, #0]
 800aa20:	2500      	movs	r5, #0
 800aa22:	4013      	ands	r3, r2
 800aa24:	2b04      	cmp	r3, #4
 800aa26:	d105      	bne.n	800aa34 <_printf_common+0x74>
 800aa28:	6833      	ldr	r3, [r6, #0]
 800aa2a:	68e5      	ldr	r5, [r4, #12]
 800aa2c:	1aed      	subs	r5, r5, r3
 800aa2e:	43eb      	mvns	r3, r5
 800aa30:	17db      	asrs	r3, r3, #31
 800aa32:	401d      	ands	r5, r3
 800aa34:	68a3      	ldr	r3, [r4, #8]
 800aa36:	6922      	ldr	r2, [r4, #16]
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	dd01      	ble.n	800aa40 <_printf_common+0x80>
 800aa3c:	1a9b      	subs	r3, r3, r2
 800aa3e:	18ed      	adds	r5, r5, r3
 800aa40:	2600      	movs	r6, #0
 800aa42:	42b5      	cmp	r5, r6
 800aa44:	d120      	bne.n	800aa88 <_printf_common+0xc8>
 800aa46:	2000      	movs	r0, #0
 800aa48:	e010      	b.n	800aa6c <_printf_common+0xac>
 800aa4a:	3501      	adds	r5, #1
 800aa4c:	68e3      	ldr	r3, [r4, #12]
 800aa4e:	6832      	ldr	r2, [r6, #0]
 800aa50:	1a9b      	subs	r3, r3, r2
 800aa52:	42ab      	cmp	r3, r5
 800aa54:	ddd2      	ble.n	800a9fc <_printf_common+0x3c>
 800aa56:	0022      	movs	r2, r4
 800aa58:	2301      	movs	r3, #1
 800aa5a:	9901      	ldr	r1, [sp, #4]
 800aa5c:	9800      	ldr	r0, [sp, #0]
 800aa5e:	9f08      	ldr	r7, [sp, #32]
 800aa60:	3219      	adds	r2, #25
 800aa62:	47b8      	blx	r7
 800aa64:	3001      	adds	r0, #1
 800aa66:	d1f0      	bne.n	800aa4a <_printf_common+0x8a>
 800aa68:	2001      	movs	r0, #1
 800aa6a:	4240      	negs	r0, r0
 800aa6c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800aa6e:	2030      	movs	r0, #48	; 0x30
 800aa70:	18e1      	adds	r1, r4, r3
 800aa72:	3143      	adds	r1, #67	; 0x43
 800aa74:	7008      	strb	r0, [r1, #0]
 800aa76:	0021      	movs	r1, r4
 800aa78:	1c5a      	adds	r2, r3, #1
 800aa7a:	3145      	adds	r1, #69	; 0x45
 800aa7c:	7809      	ldrb	r1, [r1, #0]
 800aa7e:	18a2      	adds	r2, r4, r2
 800aa80:	3243      	adds	r2, #67	; 0x43
 800aa82:	3302      	adds	r3, #2
 800aa84:	7011      	strb	r1, [r2, #0]
 800aa86:	e7c1      	b.n	800aa0c <_printf_common+0x4c>
 800aa88:	0022      	movs	r2, r4
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	9901      	ldr	r1, [sp, #4]
 800aa8e:	9800      	ldr	r0, [sp, #0]
 800aa90:	9f08      	ldr	r7, [sp, #32]
 800aa92:	321a      	adds	r2, #26
 800aa94:	47b8      	blx	r7
 800aa96:	3001      	adds	r0, #1
 800aa98:	d0e6      	beq.n	800aa68 <_printf_common+0xa8>
 800aa9a:	3601      	adds	r6, #1
 800aa9c:	e7d1      	b.n	800aa42 <_printf_common+0x82>
	...

0800aaa0 <_printf_i>:
 800aaa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aaa2:	b08b      	sub	sp, #44	; 0x2c
 800aaa4:	9206      	str	r2, [sp, #24]
 800aaa6:	000a      	movs	r2, r1
 800aaa8:	3243      	adds	r2, #67	; 0x43
 800aaaa:	9307      	str	r3, [sp, #28]
 800aaac:	9005      	str	r0, [sp, #20]
 800aaae:	9204      	str	r2, [sp, #16]
 800aab0:	7e0a      	ldrb	r2, [r1, #24]
 800aab2:	000c      	movs	r4, r1
 800aab4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aab6:	2a78      	cmp	r2, #120	; 0x78
 800aab8:	d809      	bhi.n	800aace <_printf_i+0x2e>
 800aaba:	2a62      	cmp	r2, #98	; 0x62
 800aabc:	d80b      	bhi.n	800aad6 <_printf_i+0x36>
 800aabe:	2a00      	cmp	r2, #0
 800aac0:	d100      	bne.n	800aac4 <_printf_i+0x24>
 800aac2:	e0be      	b.n	800ac42 <_printf_i+0x1a2>
 800aac4:	497c      	ldr	r1, [pc, #496]	; (800acb8 <_printf_i+0x218>)
 800aac6:	9103      	str	r1, [sp, #12]
 800aac8:	2a58      	cmp	r2, #88	; 0x58
 800aaca:	d100      	bne.n	800aace <_printf_i+0x2e>
 800aacc:	e093      	b.n	800abf6 <_printf_i+0x156>
 800aace:	0026      	movs	r6, r4
 800aad0:	3642      	adds	r6, #66	; 0x42
 800aad2:	7032      	strb	r2, [r6, #0]
 800aad4:	e022      	b.n	800ab1c <_printf_i+0x7c>
 800aad6:	0010      	movs	r0, r2
 800aad8:	3863      	subs	r0, #99	; 0x63
 800aada:	2815      	cmp	r0, #21
 800aadc:	d8f7      	bhi.n	800aace <_printf_i+0x2e>
 800aade:	f7f5 fb13 	bl	8000108 <__gnu_thumb1_case_shi>
 800aae2:	0016      	.short	0x0016
 800aae4:	fff6001f 	.word	0xfff6001f
 800aae8:	fff6fff6 	.word	0xfff6fff6
 800aaec:	001ffff6 	.word	0x001ffff6
 800aaf0:	fff6fff6 	.word	0xfff6fff6
 800aaf4:	fff6fff6 	.word	0xfff6fff6
 800aaf8:	003600a3 	.word	0x003600a3
 800aafc:	fff60083 	.word	0xfff60083
 800ab00:	00b4fff6 	.word	0x00b4fff6
 800ab04:	0036fff6 	.word	0x0036fff6
 800ab08:	fff6fff6 	.word	0xfff6fff6
 800ab0c:	0087      	.short	0x0087
 800ab0e:	0026      	movs	r6, r4
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	3642      	adds	r6, #66	; 0x42
 800ab14:	1d11      	adds	r1, r2, #4
 800ab16:	6019      	str	r1, [r3, #0]
 800ab18:	6813      	ldr	r3, [r2, #0]
 800ab1a:	7033      	strb	r3, [r6, #0]
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e0a2      	b.n	800ac66 <_printf_i+0x1c6>
 800ab20:	6818      	ldr	r0, [r3, #0]
 800ab22:	6809      	ldr	r1, [r1, #0]
 800ab24:	1d02      	adds	r2, r0, #4
 800ab26:	060d      	lsls	r5, r1, #24
 800ab28:	d50b      	bpl.n	800ab42 <_printf_i+0xa2>
 800ab2a:	6805      	ldr	r5, [r0, #0]
 800ab2c:	601a      	str	r2, [r3, #0]
 800ab2e:	2d00      	cmp	r5, #0
 800ab30:	da03      	bge.n	800ab3a <_printf_i+0x9a>
 800ab32:	232d      	movs	r3, #45	; 0x2d
 800ab34:	9a04      	ldr	r2, [sp, #16]
 800ab36:	426d      	negs	r5, r5
 800ab38:	7013      	strb	r3, [r2, #0]
 800ab3a:	4b5f      	ldr	r3, [pc, #380]	; (800acb8 <_printf_i+0x218>)
 800ab3c:	270a      	movs	r7, #10
 800ab3e:	9303      	str	r3, [sp, #12]
 800ab40:	e01b      	b.n	800ab7a <_printf_i+0xda>
 800ab42:	6805      	ldr	r5, [r0, #0]
 800ab44:	601a      	str	r2, [r3, #0]
 800ab46:	0649      	lsls	r1, r1, #25
 800ab48:	d5f1      	bpl.n	800ab2e <_printf_i+0x8e>
 800ab4a:	b22d      	sxth	r5, r5
 800ab4c:	e7ef      	b.n	800ab2e <_printf_i+0x8e>
 800ab4e:	680d      	ldr	r5, [r1, #0]
 800ab50:	6819      	ldr	r1, [r3, #0]
 800ab52:	1d08      	adds	r0, r1, #4
 800ab54:	6018      	str	r0, [r3, #0]
 800ab56:	062e      	lsls	r6, r5, #24
 800ab58:	d501      	bpl.n	800ab5e <_printf_i+0xbe>
 800ab5a:	680d      	ldr	r5, [r1, #0]
 800ab5c:	e003      	b.n	800ab66 <_printf_i+0xc6>
 800ab5e:	066d      	lsls	r5, r5, #25
 800ab60:	d5fb      	bpl.n	800ab5a <_printf_i+0xba>
 800ab62:	680d      	ldr	r5, [r1, #0]
 800ab64:	b2ad      	uxth	r5, r5
 800ab66:	4b54      	ldr	r3, [pc, #336]	; (800acb8 <_printf_i+0x218>)
 800ab68:	2708      	movs	r7, #8
 800ab6a:	9303      	str	r3, [sp, #12]
 800ab6c:	2a6f      	cmp	r2, #111	; 0x6f
 800ab6e:	d000      	beq.n	800ab72 <_printf_i+0xd2>
 800ab70:	3702      	adds	r7, #2
 800ab72:	0023      	movs	r3, r4
 800ab74:	2200      	movs	r2, #0
 800ab76:	3343      	adds	r3, #67	; 0x43
 800ab78:	701a      	strb	r2, [r3, #0]
 800ab7a:	6863      	ldr	r3, [r4, #4]
 800ab7c:	60a3      	str	r3, [r4, #8]
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	db03      	blt.n	800ab8a <_printf_i+0xea>
 800ab82:	2104      	movs	r1, #4
 800ab84:	6822      	ldr	r2, [r4, #0]
 800ab86:	438a      	bics	r2, r1
 800ab88:	6022      	str	r2, [r4, #0]
 800ab8a:	2d00      	cmp	r5, #0
 800ab8c:	d102      	bne.n	800ab94 <_printf_i+0xf4>
 800ab8e:	9e04      	ldr	r6, [sp, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00c      	beq.n	800abae <_printf_i+0x10e>
 800ab94:	9e04      	ldr	r6, [sp, #16]
 800ab96:	0028      	movs	r0, r5
 800ab98:	0039      	movs	r1, r7
 800ab9a:	f7f5 fb45 	bl	8000228 <__aeabi_uidivmod>
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	3e01      	subs	r6, #1
 800aba2:	5c5b      	ldrb	r3, [r3, r1]
 800aba4:	7033      	strb	r3, [r6, #0]
 800aba6:	002b      	movs	r3, r5
 800aba8:	0005      	movs	r5, r0
 800abaa:	429f      	cmp	r7, r3
 800abac:	d9f3      	bls.n	800ab96 <_printf_i+0xf6>
 800abae:	2f08      	cmp	r7, #8
 800abb0:	d109      	bne.n	800abc6 <_printf_i+0x126>
 800abb2:	6823      	ldr	r3, [r4, #0]
 800abb4:	07db      	lsls	r3, r3, #31
 800abb6:	d506      	bpl.n	800abc6 <_printf_i+0x126>
 800abb8:	6862      	ldr	r2, [r4, #4]
 800abba:	6923      	ldr	r3, [r4, #16]
 800abbc:	429a      	cmp	r2, r3
 800abbe:	dc02      	bgt.n	800abc6 <_printf_i+0x126>
 800abc0:	2330      	movs	r3, #48	; 0x30
 800abc2:	3e01      	subs	r6, #1
 800abc4:	7033      	strb	r3, [r6, #0]
 800abc6:	9b04      	ldr	r3, [sp, #16]
 800abc8:	1b9b      	subs	r3, r3, r6
 800abca:	6123      	str	r3, [r4, #16]
 800abcc:	9b07      	ldr	r3, [sp, #28]
 800abce:	0021      	movs	r1, r4
 800abd0:	9300      	str	r3, [sp, #0]
 800abd2:	9805      	ldr	r0, [sp, #20]
 800abd4:	9b06      	ldr	r3, [sp, #24]
 800abd6:	aa09      	add	r2, sp, #36	; 0x24
 800abd8:	f7ff fef2 	bl	800a9c0 <_printf_common>
 800abdc:	3001      	adds	r0, #1
 800abde:	d147      	bne.n	800ac70 <_printf_i+0x1d0>
 800abe0:	2001      	movs	r0, #1
 800abe2:	4240      	negs	r0, r0
 800abe4:	b00b      	add	sp, #44	; 0x2c
 800abe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abe8:	2220      	movs	r2, #32
 800abea:	6809      	ldr	r1, [r1, #0]
 800abec:	430a      	orrs	r2, r1
 800abee:	6022      	str	r2, [r4, #0]
 800abf0:	2278      	movs	r2, #120	; 0x78
 800abf2:	4932      	ldr	r1, [pc, #200]	; (800acbc <_printf_i+0x21c>)
 800abf4:	9103      	str	r1, [sp, #12]
 800abf6:	0021      	movs	r1, r4
 800abf8:	3145      	adds	r1, #69	; 0x45
 800abfa:	700a      	strb	r2, [r1, #0]
 800abfc:	6819      	ldr	r1, [r3, #0]
 800abfe:	6822      	ldr	r2, [r4, #0]
 800ac00:	c920      	ldmia	r1!, {r5}
 800ac02:	0610      	lsls	r0, r2, #24
 800ac04:	d402      	bmi.n	800ac0c <_printf_i+0x16c>
 800ac06:	0650      	lsls	r0, r2, #25
 800ac08:	d500      	bpl.n	800ac0c <_printf_i+0x16c>
 800ac0a:	b2ad      	uxth	r5, r5
 800ac0c:	6019      	str	r1, [r3, #0]
 800ac0e:	07d3      	lsls	r3, r2, #31
 800ac10:	d502      	bpl.n	800ac18 <_printf_i+0x178>
 800ac12:	2320      	movs	r3, #32
 800ac14:	4313      	orrs	r3, r2
 800ac16:	6023      	str	r3, [r4, #0]
 800ac18:	2710      	movs	r7, #16
 800ac1a:	2d00      	cmp	r5, #0
 800ac1c:	d1a9      	bne.n	800ab72 <_printf_i+0xd2>
 800ac1e:	2220      	movs	r2, #32
 800ac20:	6823      	ldr	r3, [r4, #0]
 800ac22:	4393      	bics	r3, r2
 800ac24:	6023      	str	r3, [r4, #0]
 800ac26:	e7a4      	b.n	800ab72 <_printf_i+0xd2>
 800ac28:	681a      	ldr	r2, [r3, #0]
 800ac2a:	680d      	ldr	r5, [r1, #0]
 800ac2c:	1d10      	adds	r0, r2, #4
 800ac2e:	6949      	ldr	r1, [r1, #20]
 800ac30:	6018      	str	r0, [r3, #0]
 800ac32:	6813      	ldr	r3, [r2, #0]
 800ac34:	062e      	lsls	r6, r5, #24
 800ac36:	d501      	bpl.n	800ac3c <_printf_i+0x19c>
 800ac38:	6019      	str	r1, [r3, #0]
 800ac3a:	e002      	b.n	800ac42 <_printf_i+0x1a2>
 800ac3c:	066d      	lsls	r5, r5, #25
 800ac3e:	d5fb      	bpl.n	800ac38 <_printf_i+0x198>
 800ac40:	8019      	strh	r1, [r3, #0]
 800ac42:	2300      	movs	r3, #0
 800ac44:	9e04      	ldr	r6, [sp, #16]
 800ac46:	6123      	str	r3, [r4, #16]
 800ac48:	e7c0      	b.n	800abcc <_printf_i+0x12c>
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	1d11      	adds	r1, r2, #4
 800ac4e:	6019      	str	r1, [r3, #0]
 800ac50:	6816      	ldr	r6, [r2, #0]
 800ac52:	2100      	movs	r1, #0
 800ac54:	0030      	movs	r0, r6
 800ac56:	6862      	ldr	r2, [r4, #4]
 800ac58:	f000 f998 	bl	800af8c <memchr>
 800ac5c:	2800      	cmp	r0, #0
 800ac5e:	d001      	beq.n	800ac64 <_printf_i+0x1c4>
 800ac60:	1b80      	subs	r0, r0, r6
 800ac62:	6060      	str	r0, [r4, #4]
 800ac64:	6863      	ldr	r3, [r4, #4]
 800ac66:	6123      	str	r3, [r4, #16]
 800ac68:	2300      	movs	r3, #0
 800ac6a:	9a04      	ldr	r2, [sp, #16]
 800ac6c:	7013      	strb	r3, [r2, #0]
 800ac6e:	e7ad      	b.n	800abcc <_printf_i+0x12c>
 800ac70:	0032      	movs	r2, r6
 800ac72:	6923      	ldr	r3, [r4, #16]
 800ac74:	9906      	ldr	r1, [sp, #24]
 800ac76:	9805      	ldr	r0, [sp, #20]
 800ac78:	9d07      	ldr	r5, [sp, #28]
 800ac7a:	47a8      	blx	r5
 800ac7c:	3001      	adds	r0, #1
 800ac7e:	d0af      	beq.n	800abe0 <_printf_i+0x140>
 800ac80:	6823      	ldr	r3, [r4, #0]
 800ac82:	079b      	lsls	r3, r3, #30
 800ac84:	d415      	bmi.n	800acb2 <_printf_i+0x212>
 800ac86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac88:	68e0      	ldr	r0, [r4, #12]
 800ac8a:	4298      	cmp	r0, r3
 800ac8c:	daaa      	bge.n	800abe4 <_printf_i+0x144>
 800ac8e:	0018      	movs	r0, r3
 800ac90:	e7a8      	b.n	800abe4 <_printf_i+0x144>
 800ac92:	0022      	movs	r2, r4
 800ac94:	2301      	movs	r3, #1
 800ac96:	9906      	ldr	r1, [sp, #24]
 800ac98:	9805      	ldr	r0, [sp, #20]
 800ac9a:	9e07      	ldr	r6, [sp, #28]
 800ac9c:	3219      	adds	r2, #25
 800ac9e:	47b0      	blx	r6
 800aca0:	3001      	adds	r0, #1
 800aca2:	d09d      	beq.n	800abe0 <_printf_i+0x140>
 800aca4:	3501      	adds	r5, #1
 800aca6:	68e3      	ldr	r3, [r4, #12]
 800aca8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800acaa:	1a9b      	subs	r3, r3, r2
 800acac:	42ab      	cmp	r3, r5
 800acae:	dcf0      	bgt.n	800ac92 <_printf_i+0x1f2>
 800acb0:	e7e9      	b.n	800ac86 <_printf_i+0x1e6>
 800acb2:	2500      	movs	r5, #0
 800acb4:	e7f7      	b.n	800aca6 <_printf_i+0x206>
 800acb6:	46c0      	nop			; (mov r8, r8)
 800acb8:	0800b2a1 	.word	0x0800b2a1
 800acbc:	0800b2b2 	.word	0x0800b2b2

0800acc0 <__sflush_r>:
 800acc0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800acc2:	898b      	ldrh	r3, [r1, #12]
 800acc4:	0005      	movs	r5, r0
 800acc6:	000c      	movs	r4, r1
 800acc8:	071a      	lsls	r2, r3, #28
 800acca:	d45c      	bmi.n	800ad86 <__sflush_r+0xc6>
 800accc:	684a      	ldr	r2, [r1, #4]
 800acce:	2a00      	cmp	r2, #0
 800acd0:	dc04      	bgt.n	800acdc <__sflush_r+0x1c>
 800acd2:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800acd4:	2a00      	cmp	r2, #0
 800acd6:	dc01      	bgt.n	800acdc <__sflush_r+0x1c>
 800acd8:	2000      	movs	r0, #0
 800acda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800acdc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800acde:	2f00      	cmp	r7, #0
 800ace0:	d0fa      	beq.n	800acd8 <__sflush_r+0x18>
 800ace2:	2200      	movs	r2, #0
 800ace4:	2080      	movs	r0, #128	; 0x80
 800ace6:	682e      	ldr	r6, [r5, #0]
 800ace8:	602a      	str	r2, [r5, #0]
 800acea:	001a      	movs	r2, r3
 800acec:	0140      	lsls	r0, r0, #5
 800acee:	6a21      	ldr	r1, [r4, #32]
 800acf0:	4002      	ands	r2, r0
 800acf2:	4203      	tst	r3, r0
 800acf4:	d034      	beq.n	800ad60 <__sflush_r+0xa0>
 800acf6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	075b      	lsls	r3, r3, #29
 800acfc:	d506      	bpl.n	800ad0c <__sflush_r+0x4c>
 800acfe:	6863      	ldr	r3, [r4, #4]
 800ad00:	1ac0      	subs	r0, r0, r3
 800ad02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d001      	beq.n	800ad0c <__sflush_r+0x4c>
 800ad08:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ad0a:	1ac0      	subs	r0, r0, r3
 800ad0c:	0002      	movs	r2, r0
 800ad0e:	2300      	movs	r3, #0
 800ad10:	0028      	movs	r0, r5
 800ad12:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800ad14:	6a21      	ldr	r1, [r4, #32]
 800ad16:	47b8      	blx	r7
 800ad18:	89a2      	ldrh	r2, [r4, #12]
 800ad1a:	1c43      	adds	r3, r0, #1
 800ad1c:	d106      	bne.n	800ad2c <__sflush_r+0x6c>
 800ad1e:	6829      	ldr	r1, [r5, #0]
 800ad20:	291d      	cmp	r1, #29
 800ad22:	d82c      	bhi.n	800ad7e <__sflush_r+0xbe>
 800ad24:	4b2a      	ldr	r3, [pc, #168]	; (800add0 <__sflush_r+0x110>)
 800ad26:	410b      	asrs	r3, r1
 800ad28:	07db      	lsls	r3, r3, #31
 800ad2a:	d428      	bmi.n	800ad7e <__sflush_r+0xbe>
 800ad2c:	2300      	movs	r3, #0
 800ad2e:	6063      	str	r3, [r4, #4]
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	6023      	str	r3, [r4, #0]
 800ad34:	04d2      	lsls	r2, r2, #19
 800ad36:	d505      	bpl.n	800ad44 <__sflush_r+0x84>
 800ad38:	1c43      	adds	r3, r0, #1
 800ad3a:	d102      	bne.n	800ad42 <__sflush_r+0x82>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d100      	bne.n	800ad44 <__sflush_r+0x84>
 800ad42:	6560      	str	r0, [r4, #84]	; 0x54
 800ad44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ad46:	602e      	str	r6, [r5, #0]
 800ad48:	2900      	cmp	r1, #0
 800ad4a:	d0c5      	beq.n	800acd8 <__sflush_r+0x18>
 800ad4c:	0023      	movs	r3, r4
 800ad4e:	3344      	adds	r3, #68	; 0x44
 800ad50:	4299      	cmp	r1, r3
 800ad52:	d002      	beq.n	800ad5a <__sflush_r+0x9a>
 800ad54:	0028      	movs	r0, r5
 800ad56:	f7ff fa8f 	bl	800a278 <_free_r>
 800ad5a:	2000      	movs	r0, #0
 800ad5c:	6360      	str	r0, [r4, #52]	; 0x34
 800ad5e:	e7bc      	b.n	800acda <__sflush_r+0x1a>
 800ad60:	2301      	movs	r3, #1
 800ad62:	0028      	movs	r0, r5
 800ad64:	47b8      	blx	r7
 800ad66:	1c43      	adds	r3, r0, #1
 800ad68:	d1c6      	bne.n	800acf8 <__sflush_r+0x38>
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d0c3      	beq.n	800acf8 <__sflush_r+0x38>
 800ad70:	2b1d      	cmp	r3, #29
 800ad72:	d001      	beq.n	800ad78 <__sflush_r+0xb8>
 800ad74:	2b16      	cmp	r3, #22
 800ad76:	d101      	bne.n	800ad7c <__sflush_r+0xbc>
 800ad78:	602e      	str	r6, [r5, #0]
 800ad7a:	e7ad      	b.n	800acd8 <__sflush_r+0x18>
 800ad7c:	89a2      	ldrh	r2, [r4, #12]
 800ad7e:	2340      	movs	r3, #64	; 0x40
 800ad80:	4313      	orrs	r3, r2
 800ad82:	81a3      	strh	r3, [r4, #12]
 800ad84:	e7a9      	b.n	800acda <__sflush_r+0x1a>
 800ad86:	690e      	ldr	r6, [r1, #16]
 800ad88:	2e00      	cmp	r6, #0
 800ad8a:	d0a5      	beq.n	800acd8 <__sflush_r+0x18>
 800ad8c:	680f      	ldr	r7, [r1, #0]
 800ad8e:	600e      	str	r6, [r1, #0]
 800ad90:	1bba      	subs	r2, r7, r6
 800ad92:	9201      	str	r2, [sp, #4]
 800ad94:	2200      	movs	r2, #0
 800ad96:	079b      	lsls	r3, r3, #30
 800ad98:	d100      	bne.n	800ad9c <__sflush_r+0xdc>
 800ad9a:	694a      	ldr	r2, [r1, #20]
 800ad9c:	60a2      	str	r2, [r4, #8]
 800ad9e:	9b01      	ldr	r3, [sp, #4]
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	dd99      	ble.n	800acd8 <__sflush_r+0x18>
 800ada4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ada6:	0032      	movs	r2, r6
 800ada8:	001f      	movs	r7, r3
 800adaa:	0028      	movs	r0, r5
 800adac:	9b01      	ldr	r3, [sp, #4]
 800adae:	6a21      	ldr	r1, [r4, #32]
 800adb0:	47b8      	blx	r7
 800adb2:	2800      	cmp	r0, #0
 800adb4:	dc06      	bgt.n	800adc4 <__sflush_r+0x104>
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	2001      	movs	r0, #1
 800adba:	89a2      	ldrh	r2, [r4, #12]
 800adbc:	4240      	negs	r0, r0
 800adbe:	4313      	orrs	r3, r2
 800adc0:	81a3      	strh	r3, [r4, #12]
 800adc2:	e78a      	b.n	800acda <__sflush_r+0x1a>
 800adc4:	9b01      	ldr	r3, [sp, #4]
 800adc6:	1836      	adds	r6, r6, r0
 800adc8:	1a1b      	subs	r3, r3, r0
 800adca:	9301      	str	r3, [sp, #4]
 800adcc:	e7e7      	b.n	800ad9e <__sflush_r+0xde>
 800adce:	46c0      	nop			; (mov r8, r8)
 800add0:	dfbffffe 	.word	0xdfbffffe

0800add4 <_fflush_r>:
 800add4:	690b      	ldr	r3, [r1, #16]
 800add6:	b570      	push	{r4, r5, r6, lr}
 800add8:	0005      	movs	r5, r0
 800adda:	000c      	movs	r4, r1
 800addc:	2b00      	cmp	r3, #0
 800adde:	d102      	bne.n	800ade6 <_fflush_r+0x12>
 800ade0:	2500      	movs	r5, #0
 800ade2:	0028      	movs	r0, r5
 800ade4:	bd70      	pop	{r4, r5, r6, pc}
 800ade6:	2800      	cmp	r0, #0
 800ade8:	d004      	beq.n	800adf4 <_fflush_r+0x20>
 800adea:	6a03      	ldr	r3, [r0, #32]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <_fflush_r+0x20>
 800adf0:	f7fe ffec 	bl	8009dcc <__sinit>
 800adf4:	220c      	movs	r2, #12
 800adf6:	5ea3      	ldrsh	r3, [r4, r2]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d0f1      	beq.n	800ade0 <_fflush_r+0xc>
 800adfc:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800adfe:	07d2      	lsls	r2, r2, #31
 800ae00:	d404      	bmi.n	800ae0c <_fflush_r+0x38>
 800ae02:	059b      	lsls	r3, r3, #22
 800ae04:	d402      	bmi.n	800ae0c <_fflush_r+0x38>
 800ae06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae08:	f7ff fa2a 	bl	800a260 <__retarget_lock_acquire_recursive>
 800ae0c:	0028      	movs	r0, r5
 800ae0e:	0021      	movs	r1, r4
 800ae10:	f7ff ff56 	bl	800acc0 <__sflush_r>
 800ae14:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ae16:	0005      	movs	r5, r0
 800ae18:	07db      	lsls	r3, r3, #31
 800ae1a:	d4e2      	bmi.n	800ade2 <_fflush_r+0xe>
 800ae1c:	89a3      	ldrh	r3, [r4, #12]
 800ae1e:	059b      	lsls	r3, r3, #22
 800ae20:	d4df      	bmi.n	800ade2 <_fflush_r+0xe>
 800ae22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ae24:	f7ff fa1d 	bl	800a262 <__retarget_lock_release_recursive>
 800ae28:	e7db      	b.n	800ade2 <_fflush_r+0xe>
	...

0800ae2c <__swhatbuf_r>:
 800ae2c:	b570      	push	{r4, r5, r6, lr}
 800ae2e:	000e      	movs	r6, r1
 800ae30:	001d      	movs	r5, r3
 800ae32:	230e      	movs	r3, #14
 800ae34:	5ec9      	ldrsh	r1, [r1, r3]
 800ae36:	0014      	movs	r4, r2
 800ae38:	b096      	sub	sp, #88	; 0x58
 800ae3a:	2900      	cmp	r1, #0
 800ae3c:	da0c      	bge.n	800ae58 <__swhatbuf_r+0x2c>
 800ae3e:	89b2      	ldrh	r2, [r6, #12]
 800ae40:	2380      	movs	r3, #128	; 0x80
 800ae42:	0011      	movs	r1, r2
 800ae44:	4019      	ands	r1, r3
 800ae46:	421a      	tst	r2, r3
 800ae48:	d013      	beq.n	800ae72 <__swhatbuf_r+0x46>
 800ae4a:	2100      	movs	r1, #0
 800ae4c:	3b40      	subs	r3, #64	; 0x40
 800ae4e:	2000      	movs	r0, #0
 800ae50:	6029      	str	r1, [r5, #0]
 800ae52:	6023      	str	r3, [r4, #0]
 800ae54:	b016      	add	sp, #88	; 0x58
 800ae56:	bd70      	pop	{r4, r5, r6, pc}
 800ae58:	466a      	mov	r2, sp
 800ae5a:	f000 f861 	bl	800af20 <_fstat_r>
 800ae5e:	2800      	cmp	r0, #0
 800ae60:	dbed      	blt.n	800ae3e <__swhatbuf_r+0x12>
 800ae62:	23f0      	movs	r3, #240	; 0xf0
 800ae64:	9901      	ldr	r1, [sp, #4]
 800ae66:	021b      	lsls	r3, r3, #8
 800ae68:	4019      	ands	r1, r3
 800ae6a:	4b03      	ldr	r3, [pc, #12]	; (800ae78 <__swhatbuf_r+0x4c>)
 800ae6c:	18c9      	adds	r1, r1, r3
 800ae6e:	424b      	negs	r3, r1
 800ae70:	4159      	adcs	r1, r3
 800ae72:	2380      	movs	r3, #128	; 0x80
 800ae74:	00db      	lsls	r3, r3, #3
 800ae76:	e7ea      	b.n	800ae4e <__swhatbuf_r+0x22>
 800ae78:	ffffe000 	.word	0xffffe000

0800ae7c <__smakebuf_r>:
 800ae7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae7e:	2602      	movs	r6, #2
 800ae80:	898b      	ldrh	r3, [r1, #12]
 800ae82:	0005      	movs	r5, r0
 800ae84:	000c      	movs	r4, r1
 800ae86:	4233      	tst	r3, r6
 800ae88:	d006      	beq.n	800ae98 <__smakebuf_r+0x1c>
 800ae8a:	0023      	movs	r3, r4
 800ae8c:	3347      	adds	r3, #71	; 0x47
 800ae8e:	6023      	str	r3, [r4, #0]
 800ae90:	6123      	str	r3, [r4, #16]
 800ae92:	2301      	movs	r3, #1
 800ae94:	6163      	str	r3, [r4, #20]
 800ae96:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800ae98:	466a      	mov	r2, sp
 800ae9a:	ab01      	add	r3, sp, #4
 800ae9c:	f7ff ffc6 	bl	800ae2c <__swhatbuf_r>
 800aea0:	9900      	ldr	r1, [sp, #0]
 800aea2:	0007      	movs	r7, r0
 800aea4:	0028      	movs	r0, r5
 800aea6:	f7ff fa53 	bl	800a350 <_malloc_r>
 800aeaa:	2800      	cmp	r0, #0
 800aeac:	d108      	bne.n	800aec0 <__smakebuf_r+0x44>
 800aeae:	220c      	movs	r2, #12
 800aeb0:	5ea3      	ldrsh	r3, [r4, r2]
 800aeb2:	059a      	lsls	r2, r3, #22
 800aeb4:	d4ef      	bmi.n	800ae96 <__smakebuf_r+0x1a>
 800aeb6:	2203      	movs	r2, #3
 800aeb8:	4393      	bics	r3, r2
 800aeba:	431e      	orrs	r6, r3
 800aebc:	81a6      	strh	r6, [r4, #12]
 800aebe:	e7e4      	b.n	800ae8a <__smakebuf_r+0xe>
 800aec0:	2380      	movs	r3, #128	; 0x80
 800aec2:	89a2      	ldrh	r2, [r4, #12]
 800aec4:	6020      	str	r0, [r4, #0]
 800aec6:	4313      	orrs	r3, r2
 800aec8:	81a3      	strh	r3, [r4, #12]
 800aeca:	9b00      	ldr	r3, [sp, #0]
 800aecc:	6120      	str	r0, [r4, #16]
 800aece:	6163      	str	r3, [r4, #20]
 800aed0:	9b01      	ldr	r3, [sp, #4]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00c      	beq.n	800aef0 <__smakebuf_r+0x74>
 800aed6:	0028      	movs	r0, r5
 800aed8:	230e      	movs	r3, #14
 800aeda:	5ee1      	ldrsh	r1, [r4, r3]
 800aedc:	f000 f832 	bl	800af44 <_isatty_r>
 800aee0:	2800      	cmp	r0, #0
 800aee2:	d005      	beq.n	800aef0 <__smakebuf_r+0x74>
 800aee4:	2303      	movs	r3, #3
 800aee6:	89a2      	ldrh	r2, [r4, #12]
 800aee8:	439a      	bics	r2, r3
 800aeea:	3b02      	subs	r3, #2
 800aeec:	4313      	orrs	r3, r2
 800aeee:	81a3      	strh	r3, [r4, #12]
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	433b      	orrs	r3, r7
 800aef4:	81a3      	strh	r3, [r4, #12]
 800aef6:	e7ce      	b.n	800ae96 <__smakebuf_r+0x1a>

0800aef8 <memmove>:
 800aef8:	b510      	push	{r4, lr}
 800aefa:	4288      	cmp	r0, r1
 800aefc:	d902      	bls.n	800af04 <memmove+0xc>
 800aefe:	188b      	adds	r3, r1, r2
 800af00:	4298      	cmp	r0, r3
 800af02:	d303      	bcc.n	800af0c <memmove+0x14>
 800af04:	2300      	movs	r3, #0
 800af06:	e007      	b.n	800af18 <memmove+0x20>
 800af08:	5c8b      	ldrb	r3, [r1, r2]
 800af0a:	5483      	strb	r3, [r0, r2]
 800af0c:	3a01      	subs	r2, #1
 800af0e:	d2fb      	bcs.n	800af08 <memmove+0x10>
 800af10:	bd10      	pop	{r4, pc}
 800af12:	5ccc      	ldrb	r4, [r1, r3]
 800af14:	54c4      	strb	r4, [r0, r3]
 800af16:	3301      	adds	r3, #1
 800af18:	429a      	cmp	r2, r3
 800af1a:	d1fa      	bne.n	800af12 <memmove+0x1a>
 800af1c:	e7f8      	b.n	800af10 <memmove+0x18>
	...

0800af20 <_fstat_r>:
 800af20:	2300      	movs	r3, #0
 800af22:	b570      	push	{r4, r5, r6, lr}
 800af24:	4d06      	ldr	r5, [pc, #24]	; (800af40 <_fstat_r+0x20>)
 800af26:	0004      	movs	r4, r0
 800af28:	0008      	movs	r0, r1
 800af2a:	0011      	movs	r1, r2
 800af2c:	602b      	str	r3, [r5, #0]
 800af2e:	f7f6 fc46 	bl	80017be <_fstat>
 800af32:	1c43      	adds	r3, r0, #1
 800af34:	d103      	bne.n	800af3e <_fstat_r+0x1e>
 800af36:	682b      	ldr	r3, [r5, #0]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d000      	beq.n	800af3e <_fstat_r+0x1e>
 800af3c:	6023      	str	r3, [r4, #0]
 800af3e:	bd70      	pop	{r4, r5, r6, pc}
 800af40:	20008664 	.word	0x20008664

0800af44 <_isatty_r>:
 800af44:	2300      	movs	r3, #0
 800af46:	b570      	push	{r4, r5, r6, lr}
 800af48:	4d06      	ldr	r5, [pc, #24]	; (800af64 <_isatty_r+0x20>)
 800af4a:	0004      	movs	r4, r0
 800af4c:	0008      	movs	r0, r1
 800af4e:	602b      	str	r3, [r5, #0]
 800af50:	f7f6 fc43 	bl	80017da <_isatty>
 800af54:	1c43      	adds	r3, r0, #1
 800af56:	d103      	bne.n	800af60 <_isatty_r+0x1c>
 800af58:	682b      	ldr	r3, [r5, #0]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d000      	beq.n	800af60 <_isatty_r+0x1c>
 800af5e:	6023      	str	r3, [r4, #0]
 800af60:	bd70      	pop	{r4, r5, r6, pc}
 800af62:	46c0      	nop			; (mov r8, r8)
 800af64:	20008664 	.word	0x20008664

0800af68 <_sbrk_r>:
 800af68:	2300      	movs	r3, #0
 800af6a:	b570      	push	{r4, r5, r6, lr}
 800af6c:	4d06      	ldr	r5, [pc, #24]	; (800af88 <_sbrk_r+0x20>)
 800af6e:	0004      	movs	r4, r0
 800af70:	0008      	movs	r0, r1
 800af72:	602b      	str	r3, [r5, #0]
 800af74:	f7f6 fc46 	bl	8001804 <_sbrk>
 800af78:	1c43      	adds	r3, r0, #1
 800af7a:	d103      	bne.n	800af84 <_sbrk_r+0x1c>
 800af7c:	682b      	ldr	r3, [r5, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d000      	beq.n	800af84 <_sbrk_r+0x1c>
 800af82:	6023      	str	r3, [r4, #0]
 800af84:	bd70      	pop	{r4, r5, r6, pc}
 800af86:	46c0      	nop			; (mov r8, r8)
 800af88:	20008664 	.word	0x20008664

0800af8c <memchr>:
 800af8c:	b2c9      	uxtb	r1, r1
 800af8e:	1882      	adds	r2, r0, r2
 800af90:	4290      	cmp	r0, r2
 800af92:	d101      	bne.n	800af98 <memchr+0xc>
 800af94:	2000      	movs	r0, #0
 800af96:	4770      	bx	lr
 800af98:	7803      	ldrb	r3, [r0, #0]
 800af9a:	428b      	cmp	r3, r1
 800af9c:	d0fb      	beq.n	800af96 <memchr+0xa>
 800af9e:	3001      	adds	r0, #1
 800afa0:	e7f6      	b.n	800af90 <memchr+0x4>

0800afa2 <_realloc_r>:
 800afa2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afa4:	0007      	movs	r7, r0
 800afa6:	000e      	movs	r6, r1
 800afa8:	0014      	movs	r4, r2
 800afaa:	2900      	cmp	r1, #0
 800afac:	d105      	bne.n	800afba <_realloc_r+0x18>
 800afae:	0011      	movs	r1, r2
 800afb0:	f7ff f9ce 	bl	800a350 <_malloc_r>
 800afb4:	0005      	movs	r5, r0
 800afb6:	0028      	movs	r0, r5
 800afb8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800afba:	2a00      	cmp	r2, #0
 800afbc:	d103      	bne.n	800afc6 <_realloc_r+0x24>
 800afbe:	f7ff f95b 	bl	800a278 <_free_r>
 800afc2:	0025      	movs	r5, r4
 800afc4:	e7f7      	b.n	800afb6 <_realloc_r+0x14>
 800afc6:	f000 f81b 	bl	800b000 <_malloc_usable_size_r>
 800afca:	9001      	str	r0, [sp, #4]
 800afcc:	4284      	cmp	r4, r0
 800afce:	d803      	bhi.n	800afd8 <_realloc_r+0x36>
 800afd0:	0035      	movs	r5, r6
 800afd2:	0843      	lsrs	r3, r0, #1
 800afd4:	42a3      	cmp	r3, r4
 800afd6:	d3ee      	bcc.n	800afb6 <_realloc_r+0x14>
 800afd8:	0021      	movs	r1, r4
 800afda:	0038      	movs	r0, r7
 800afdc:	f7ff f9b8 	bl	800a350 <_malloc_r>
 800afe0:	1e05      	subs	r5, r0, #0
 800afe2:	d0e8      	beq.n	800afb6 <_realloc_r+0x14>
 800afe4:	9b01      	ldr	r3, [sp, #4]
 800afe6:	0022      	movs	r2, r4
 800afe8:	429c      	cmp	r4, r3
 800afea:	d900      	bls.n	800afee <_realloc_r+0x4c>
 800afec:	001a      	movs	r2, r3
 800afee:	0031      	movs	r1, r6
 800aff0:	0028      	movs	r0, r5
 800aff2:	f7ff f937 	bl	800a264 <memcpy>
 800aff6:	0031      	movs	r1, r6
 800aff8:	0038      	movs	r0, r7
 800affa:	f7ff f93d 	bl	800a278 <_free_r>
 800affe:	e7da      	b.n	800afb6 <_realloc_r+0x14>

0800b000 <_malloc_usable_size_r>:
 800b000:	1f0b      	subs	r3, r1, #4
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	1f18      	subs	r0, r3, #4
 800b006:	2b00      	cmp	r3, #0
 800b008:	da01      	bge.n	800b00e <_malloc_usable_size_r+0xe>
 800b00a:	580b      	ldr	r3, [r1, r0]
 800b00c:	18c0      	adds	r0, r0, r3
 800b00e:	4770      	bx	lr

0800b010 <_init>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	46c0      	nop			; (mov r8, r8)
 800b014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b016:	bc08      	pop	{r3}
 800b018:	469e      	mov	lr, r3
 800b01a:	4770      	bx	lr

0800b01c <_fini>:
 800b01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b01e:	46c0      	nop			; (mov r8, r8)
 800b020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b022:	bc08      	pop	{r3}
 800b024:	469e      	mov	lr, r3
 800b026:	4770      	bx	lr
