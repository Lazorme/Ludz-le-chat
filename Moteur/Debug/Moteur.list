
Moteur.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078a4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000378  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007dfc  08007dfc  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  08007dfc  08007dfc  00017dfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e04  08007e04  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e04  08007e04  00017e04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e08  08007e08  00017e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  08007e0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000370  20000124  08007f30  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000494  08007f30  00020494  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015cfb  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000031be  00000000  00000000  00035e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001328  00000000  00000000  00039050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ecc  00000000  00000000  0003a378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000238df  00000000  00000000  0003b244  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018290  00000000  00000000  0005eb23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da69e  00000000  00000000  00076db3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b9c  00000000  00000000  00151454  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00156ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a6c 	.word	0x08007a6c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	08007a6c 	.word	0x08007a6c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <pwm_start>:
 * Elle active la sortie PWM et la sortie complémentaire PWM (PWMN) sur ces canaux.
 *
 * @note Cette fonction doit être appelée après avoir configuré les paramètres PWM appropriés.
 */

void pwm_start(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 1);
 80005f0:	2201      	movs	r2, #1
 80005f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fa:	f001 fd8d 	bl	8002118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ENU_Pin, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000604:	480a      	ldr	r0, [pc, #40]	; (8000630 <pwm_start+0x44>)
 8000606:	f001 fd87 	bl	8002118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ENV_Pin, 1);
 800060a:	2201      	movs	r2, #1
 800060c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000610:	4807      	ldr	r0, [pc, #28]	; (8000630 <pwm_start+0x44>)
 8000612:	f001 fd81 	bl	8002118 <HAL_GPIO_WritePin>

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000616:	2100      	movs	r1, #0
 8000618:	4806      	ldr	r0, [pc, #24]	; (8000634 <pwm_start+0x48>)
 800061a:	f002 fe25 	bl	8003268 <HAL_TIM_PWM_Start>
	//HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);

	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800061e:	2104      	movs	r1, #4
 8000620:	4804      	ldr	r0, [pc, #16]	; (8000634 <pwm_start+0x48>)
 8000622:	f002 fe21 	bl	8003268 <HAL_TIM_PWM_Start>
	//HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
	aTemp=50;
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <pwm_start+0x4c>)
 8000628:	2232      	movs	r2, #50	; 0x32
 800062a:	601a      	str	r2, [r3, #0]

}
 800062c:	bf00      	nop
 800062e:	bd80      	pop	{r7, pc}
 8000630:	48000400 	.word	0x48000400
 8000634:	20000208 	.word	0x20000208
 8000638:	20000140 	.word	0x20000140

0800063c <pwm_stop>:
void pwm_stop(void){
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
	set_pwm_alpha(50);
 8000640:	2032      	movs	r0, #50	; 0x32
 8000642:	f000 f817 	bl	8000674 <set_pwm_alpha>
	HAL_GPIO_WritePin(GPIOA, EN_Pin, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800064c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000650:	f001 fd62 	bl	8002118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ENU_Pin, 0);
 8000654:	2200      	movs	r2, #0
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4805      	ldr	r0, [pc, #20]	; (8000670 <pwm_stop+0x34>)
 800065c:	f001 fd5c 	bl	8002118 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, ENV_Pin, 0);
 8000660:	2200      	movs	r2, #0
 8000662:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000666:	4802      	ldr	r0, [pc, #8]	; (8000670 <pwm_stop+0x34>)
 8000668:	f001 fd56 	bl	8002118 <HAL_GPIO_WritePin>
}
 800066c:	bf00      	nop
 800066e:	bd80      	pop	{r7, pc}
 8000670:	48000400 	.word	0x48000400

08000674 <set_pwm_alpha>:
 * @param alpha La valeur du parameter alpha en pourcentage (entre 0 et 100).
 *
 * @note Assurez-vous que le Timer 1 est configuré correctement pour le fonctionnement PWM avant d'appeler cette fonction.
 */

void set_pwm_alpha(int alpha){
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
	int a1;
	int a2;
	int aTransi=aTemp;
 800067c:	4b35      	ldr	r3, [pc, #212]	; (8000754 <set_pwm_alpha+0xe0>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	617b      	str	r3, [r7, #20]

	if (alpha > aTransi){
 8000682:	687a      	ldr	r2, [r7, #4]
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	429a      	cmp	r2, r3
 8000688:	dd2c      	ble.n	80006e4 <set_pwm_alpha+0x70>
		while(aTransi != alpha){
 800068a:	e027      	b.n	80006dc <set_pwm_alpha+0x68>

			aTransi++;
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/100;
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000698:	fb02 f303 	mul.w	r3, r2, r3
 800069c:	4a2e      	ldr	r2, [pc, #184]	; (8000758 <set_pwm_alpha+0xe4>)
 800069e:	fb82 1203 	smull	r1, r2, r2, r3
 80006a2:	1152      	asrs	r2, r2, #5
 80006a4:	17db      	asrs	r3, r3, #31
 80006a6:	1ad3      	subs	r3, r2, r3
 80006a8:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(100-aTransi)/100;
 80006aa:	697b      	ldr	r3, [r7, #20]
 80006ac:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 80006b0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006b4:	fb02 f303 	mul.w	r3, r2, r3
 80006b8:	4a27      	ldr	r2, [pc, #156]	; (8000758 <set_pwm_alpha+0xe4>)
 80006ba:	fb82 1203 	smull	r1, r2, r2, r3
 80006be:	1152      	asrs	r2, r2, #5
 80006c0:	17db      	asrs	r3, r3, #31
 80006c2:	1ad3      	subs	r3, r2, r3
 80006c4:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 80006c6:	4b25      	ldr	r3, [pc, #148]	; (800075c <set_pwm_alpha+0xe8>)
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	693a      	ldr	r2, [r7, #16]
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 80006ce:	4b23      	ldr	r3, [pc, #140]	; (800075c <set_pwm_alpha+0xe8>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	68fa      	ldr	r2, [r7, #12]
 80006d4:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 80006d6:	2032      	movs	r0, #50	; 0x32
 80006d8:	f000 fff0 	bl	80016bc <HAL_Delay>
		while(aTransi != alpha){
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	429a      	cmp	r2, r3
 80006e2:	d1d3      	bne.n	800068c <set_pwm_alpha+0x18>
		}
	}

	if (alpha < aTransi){
 80006e4:	687a      	ldr	r2, [r7, #4]
 80006e6:	697b      	ldr	r3, [r7, #20]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	da2c      	bge.n	8000746 <set_pwm_alpha+0xd2>
		while(aTransi != alpha){
 80006ec:	e027      	b.n	800073e <set_pwm_alpha+0xca>

			aTransi--;
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	3b01      	subs	r3, #1
 80006f2:	617b      	str	r3, [r7, #20]
			a1=alpha_MAX*aTransi/100;
 80006f4:	697b      	ldr	r3, [r7, #20]
 80006f6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80006fa:	fb02 f303 	mul.w	r3, r2, r3
 80006fe:	4a16      	ldr	r2, [pc, #88]	; (8000758 <set_pwm_alpha+0xe4>)
 8000700:	fb82 1203 	smull	r1, r2, r2, r3
 8000704:	1152      	asrs	r2, r2, #5
 8000706:	17db      	asrs	r3, r3, #31
 8000708:	1ad3      	subs	r3, r2, r3
 800070a:	613b      	str	r3, [r7, #16]
			a2=alpha_MAX*(100-aTransi)/100;
 800070c:	697b      	ldr	r3, [r7, #20]
 800070e:	f1c3 0364 	rsb	r3, r3, #100	; 0x64
 8000712:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000716:	fb02 f303 	mul.w	r3, r2, r3
 800071a:	4a0f      	ldr	r2, [pc, #60]	; (8000758 <set_pwm_alpha+0xe4>)
 800071c:	fb82 1203 	smull	r1, r2, r2, r3
 8000720:	1152      	asrs	r2, r2, #5
 8000722:	17db      	asrs	r3, r3, #31
 8000724:	1ad3      	subs	r3, r2, r3
 8000726:	60fb      	str	r3, [r7, #12]
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_1,a1);
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <set_pwm_alpha+0xe8>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	693a      	ldr	r2, [r7, #16]
 800072e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim1,TIM_CHANNEL_2,a2);
 8000730:	4b0a      	ldr	r3, [pc, #40]	; (800075c <set_pwm_alpha+0xe8>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	68fa      	ldr	r2, [r7, #12]
 8000736:	639a      	str	r2, [r3, #56]	; 0x38
			HAL_Delay(50);
 8000738:	2032      	movs	r0, #50	; 0x32
 800073a:	f000 ffbf 	bl	80016bc <HAL_Delay>
		while(aTransi != alpha){
 800073e:	697a      	ldr	r2, [r7, #20]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	429a      	cmp	r2, r3
 8000744:	d1d3      	bne.n	80006ee <set_pwm_alpha+0x7a>
		}
	}
	aTemp = alpha;
 8000746:	4a03      	ldr	r2, [pc, #12]	; (8000754 <set_pwm_alpha+0xe0>)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6013      	str	r3, [r2, #0]
}
 800074c:	bf00      	nop
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	20000140 	.word	0x20000140
 8000758:	51eb851f 	.word	0x51eb851f
 800075c:	20000208 	.word	0x20000208

08000760 <Shell_Init>:
/**
 * @brief Fonction d'initialisation du Shell
 * @note Affiche un message d'accueil lors du lançement du programme
 */

void Shell_Init(void){
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8000764:	2224      	movs	r2, #36	; 0x24
 8000766:	2100      	movs	r1, #0
 8000768:	4816      	ldr	r0, [pc, #88]	; (80007c4 <Shell_Init+0x64>)
 800076a:	f006 f8c8 	bl	80068fe <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 800076e:	2240      	movs	r2, #64	; 0x40
 8000770:	2100      	movs	r1, #0
 8000772:	4815      	ldr	r0, [pc, #84]	; (80007c8 <Shell_Init+0x68>)
 8000774:	f006 f8c3 	bl	80068fe <memset>
 8000778:	4b14      	ldr	r3, [pc, #80]	; (80007cc <Shell_Init+0x6c>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 800077e:	2240      	movs	r2, #64	; 0x40
 8000780:	2100      	movs	r1, #0
 8000782:	4813      	ldr	r0, [pc, #76]	; (80007d0 <Shell_Init+0x70>)
 8000784:	f006 f8bb 	bl	80068fe <memset>

	HAL_UART_Receive_IT(&hlpuart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000788:	2201      	movs	r2, #1
 800078a:	4910      	ldr	r1, [pc, #64]	; (80007cc <Shell_Init+0x6c>)
 800078c:	4811      	ldr	r0, [pc, #68]	; (80007d4 <Shell_Init+0x74>)
 800078e:	f003 fec9 	bl	8004524 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&hlpuart1, started, strlen((char *)started), HAL_MAX_DELAY);
 8000792:	4811      	ldr	r0, [pc, #68]	; (80007d8 <Shell_Init+0x78>)
 8000794:	f7ff fd4e 	bl	8000234 <strlen>
 8000798:	4603      	mov	r3, r0
 800079a:	b29a      	uxth	r2, r3
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	490d      	ldr	r1, [pc, #52]	; (80007d8 <Shell_Init+0x78>)
 80007a2:	480c      	ldr	r0, [pc, #48]	; (80007d4 <Shell_Init+0x74>)
 80007a4:	f003 fe28 	bl	80043f8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&hlpuart1, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <Shell_Init+0x7c>)
 80007aa:	f7ff fd43 	bl	8000234 <strlen>
 80007ae:	4603      	mov	r3, r0
 80007b0:	b29a      	uxth	r2, r3
 80007b2:	f04f 33ff 	mov.w	r3, #4294967295
 80007b6:	4909      	ldr	r1, [pc, #36]	; (80007dc <Shell_Init+0x7c>)
 80007b8:	4806      	ldr	r0, [pc, #24]	; (80007d4 <Shell_Init+0x74>)
 80007ba:	f003 fe1d 	bl	80043f8 <HAL_UART_Transmit>
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	200001d0 	.word	0x200001d0
 80007c8:	2000018c 	.word	0x2000018c
 80007cc:	20000148 	.word	0x20000148
 80007d0:	2000014c 	.word	0x2000014c
 80007d4:	20000254 	.word	0x20000254
 80007d8:	2000001c 	.word	0x2000001c
 80007dc:	20000000 	.word	0x20000000

080007e0 <Shell_Loop>:

/**
 * @brief Cette fonction tourne en boucle afin de recevoir et d'exécuter les commandes du Shell
 */
void Shell_Loop(void){
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b08a      	sub	sp, #40	; 0x28
 80007e4:	af00      	add	r7, sp, #0
	if(uartRxReceived){ //Condition verifiée lors de la réception d'un nouveau caractère UART
 80007e6:	4b9b      	ldr	r3, [pc, #620]	; (8000a54 <Shell_Loop+0x274>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d05b      	beq.n	80008a6 <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80007ee:	4b9a      	ldr	r3, [pc, #616]	; (8000a58 <Shell_Loop+0x278>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b08      	cmp	r3, #8
 80007f4:	d034      	beq.n	8000860 <Shell_Loop+0x80>
 80007f6:	2b0d      	cmp	r3, #13
 80007f8:	d142      	bne.n	8000880 <Shell_Loop+0xa0>
		case ASCII_CR: //Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&hlpuart1, newline, sizeof(newline), HAL_MAX_DELAY);
 80007fa:	f04f 33ff 	mov.w	r3, #4294967295
 80007fe:	2203      	movs	r2, #3
 8000800:	4996      	ldr	r1, [pc, #600]	; (8000a5c <Shell_Loop+0x27c>)
 8000802:	4897      	ldr	r0, [pc, #604]	; (8000a60 <Shell_Loop+0x280>)
 8000804:	f003 fdf8 	bl	80043f8 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 8000808:	4b96      	ldr	r3, [pc, #600]	; (8000a64 <Shell_Loop+0x284>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a96      	ldr	r2, [pc, #600]	; (8000a68 <Shell_Loop+0x288>)
 800080e:	2100      	movs	r1, #0
 8000810:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8000812:	4b96      	ldr	r3, [pc, #600]	; (8000a6c <Shell_Loop+0x28c>)
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 8000818:	4995      	ldr	r1, [pc, #596]	; (8000a70 <Shell_Loop+0x290>)
 800081a:	4893      	ldr	r0, [pc, #588]	; (8000a68 <Shell_Loop+0x288>)
 800081c:	f006 f878 	bl	8006910 <strtok>
 8000820:	4603      	mov	r3, r0
 8000822:	4a94      	ldr	r2, [pc, #592]	; (8000a74 <Shell_Loop+0x294>)
 8000824:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 8000826:	e010      	b.n	800084a <Shell_Loop+0x6a>
				argv[argc++] = token;
 8000828:	4b90      	ldr	r3, [pc, #576]	; (8000a6c <Shell_Loop+0x28c>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	1c5a      	adds	r2, r3, #1
 800082e:	498f      	ldr	r1, [pc, #572]	; (8000a6c <Shell_Loop+0x28c>)
 8000830:	600a      	str	r2, [r1, #0]
 8000832:	4a90      	ldr	r2, [pc, #576]	; (8000a74 <Shell_Loop+0x294>)
 8000834:	6812      	ldr	r2, [r2, #0]
 8000836:	4990      	ldr	r1, [pc, #576]	; (8000a78 <Shell_Loop+0x298>)
 8000838:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 800083c:	498c      	ldr	r1, [pc, #560]	; (8000a70 <Shell_Loop+0x290>)
 800083e:	2000      	movs	r0, #0
 8000840:	f006 f866 	bl	8006910 <strtok>
 8000844:	4603      	mov	r3, r0
 8000846:	4a8b      	ldr	r2, [pc, #556]	; (8000a74 <Shell_Loop+0x294>)
 8000848:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800084a:	4b8a      	ldr	r3, [pc, #552]	; (8000a74 <Shell_Loop+0x294>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b00      	cmp	r3, #0
 8000850:	d1ea      	bne.n	8000828 <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8000852:	4b84      	ldr	r3, [pc, #528]	; (8000a64 <Shell_Loop+0x284>)
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 8000858:	4b88      	ldr	r3, [pc, #544]	; (8000a7c <Shell_Loop+0x29c>)
 800085a:	2201      	movs	r2, #1
 800085c:	601a      	str	r2, [r3, #0]
			break;
 800085e:	e01f      	b.n	80008a0 <Shell_Loop+0xc0>
		case ASCII_BACK: //Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8000860:	4b80      	ldr	r3, [pc, #512]	; (8000a64 <Shell_Loop+0x284>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	1e5a      	subs	r2, r3, #1
 8000866:	497f      	ldr	r1, [pc, #508]	; (8000a64 <Shell_Loop+0x284>)
 8000868:	600a      	str	r2, [r1, #0]
 800086a:	4a7f      	ldr	r2, [pc, #508]	; (8000a68 <Shell_Loop+0x288>)
 800086c:	2100      	movs	r1, #0
 800086e:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&hlpuart1, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8000870:	f04f 33ff 	mov.w	r3, #4294967295
 8000874:	2204      	movs	r2, #4
 8000876:	4982      	ldr	r1, [pc, #520]	; (8000a80 <Shell_Loop+0x2a0>)
 8000878:	4879      	ldr	r0, [pc, #484]	; (8000a60 <Shell_Loop+0x280>)
 800087a:	f003 fdbd 	bl	80043f8 <HAL_UART_Transmit>
			break;
 800087e:	e00f      	b.n	80008a0 <Shell_Loop+0xc0>

		default: //Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8000880:	4b78      	ldr	r3, [pc, #480]	; (8000a64 <Shell_Loop+0x284>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	1c5a      	adds	r2, r3, #1
 8000886:	4977      	ldr	r1, [pc, #476]	; (8000a64 <Shell_Loop+0x284>)
 8000888:	600a      	str	r2, [r1, #0]
 800088a:	4a73      	ldr	r2, [pc, #460]	; (8000a58 <Shell_Loop+0x278>)
 800088c:	7811      	ldrb	r1, [r2, #0]
 800088e:	4a76      	ldr	r2, [pc, #472]	; (8000a68 <Shell_Loop+0x288>)
 8000890:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&hlpuart1, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	2201      	movs	r2, #1
 8000898:	496f      	ldr	r1, [pc, #444]	; (8000a58 <Shell_Loop+0x278>)
 800089a:	4871      	ldr	r0, [pc, #452]	; (8000a60 <Shell_Loop+0x280>)
 800089c:	f003 fdac 	bl	80043f8 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80008a0:	4b6c      	ldr	r3, [pc, #432]	; (8000a54 <Shell_Loop+0x274>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){ //Condition vérifiant la validitée d'une commande
 80008a6:	4b75      	ldr	r3, [pc, #468]	; (8000a7c <Shell_Loop+0x29c>)
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	f000 8147 	beq.w	8000b3e <Shell_Loop+0x35e>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80008b0:	4b71      	ldr	r3, [pc, #452]	; (8000a78 <Shell_Loop+0x298>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4973      	ldr	r1, [pc, #460]	; (8000a84 <Shell_Loop+0x2a4>)
 80008b6:	4618      	mov	r0, r3
 80008b8:	f7ff fcb2 	bl	8000220 <strcmp>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d107      	bne.n	80008d2 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&hlpuart1, brian, sizeof(brian), HAL_MAX_DELAY);
 80008c2:	f04f 33ff 	mov.w	r3, #4294967295
 80008c6:	221a      	movs	r2, #26
 80008c8:	496f      	ldr	r1, [pc, #444]	; (8000a88 <Shell_Loop+0x2a8>)
 80008ca:	4865      	ldr	r0, [pc, #404]	; (8000a60 <Shell_Loop+0x280>)
 80008cc:	f003 fd94 	bl	80043f8 <HAL_UART_Transmit>
 80008d0:	e12b      	b.n	8000b2a <Shell_Loop+0x34a>
		}
		else if(strcmp(argv[0],"help")==0){//Fonction help renvoyant la notice des fonctions spécifiées
 80008d2:	4b69      	ldr	r3, [pc, #420]	; (8000a78 <Shell_Loop+0x298>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	496d      	ldr	r1, [pc, #436]	; (8000a8c <Shell_Loop+0x2ac>)
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff fca1 	bl	8000220 <strcmp>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d126      	bne.n	8000932 <Shell_Loop+0x152>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80008e4:	4a6a      	ldr	r2, [pc, #424]	; (8000a90 <Shell_Loop+0x2b0>)
 80008e6:	2140      	movs	r1, #64	; 0x40
 80008e8:	486a      	ldr	r0, [pc, #424]	; (8000a94 <Shell_Loop+0x2b4>)
 80008ea:	f005 ff91 	bl	8006810 <sniprintf>
 80008ee:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	f04f 33ff 	mov.w	r3, #4294967295
 80008f8:	4966      	ldr	r1, [pc, #408]	; (8000a94 <Shell_Loop+0x2b4>)
 80008fa:	4859      	ldr	r0, [pc, #356]	; (8000a60 <Shell_Loop+0x280>)
 80008fc:	f003 fd7c 	bl	80043f8 <HAL_UART_Transmit>
			if(strcmp(argv[1],"speed")==0){
 8000900:	4b5d      	ldr	r3, [pc, #372]	; (8000a78 <Shell_Loop+0x298>)
 8000902:	685b      	ldr	r3, [r3, #4]
 8000904:	4964      	ldr	r1, [pc, #400]	; (8000a98 <Shell_Loop+0x2b8>)
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc8a 	bl	8000220 <strcmp>
 800090c:	4603      	mov	r3, r0
 800090e:	2b00      	cmp	r3, #0
 8000910:	f040 810b 	bne.w	8000b2a <Shell_Loop+0x34a>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Prend en argument un rapport cyclique entre 0 et 100\r\n");
 8000914:	4a61      	ldr	r2, [pc, #388]	; (8000a9c <Shell_Loop+0x2bc>)
 8000916:	2140      	movs	r1, #64	; 0x40
 8000918:	485e      	ldr	r0, [pc, #376]	; (8000a94 <Shell_Loop+0x2b4>)
 800091a:	f005 ff79 	bl	8006810 <sniprintf>
 800091e:	6078      	str	r0, [r7, #4]
				HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	b29a      	uxth	r2, r3
 8000924:	f04f 33ff 	mov.w	r3, #4294967295
 8000928:	495a      	ldr	r1, [pc, #360]	; (8000a94 <Shell_Loop+0x2b4>)
 800092a:	484d      	ldr	r0, [pc, #308]	; (8000a60 <Shell_Loop+0x280>)
 800092c:	f003 fd64 	bl	80043f8 <HAL_UART_Transmit>
 8000930:	e0fb      	b.n	8000b2a <Shell_Loop+0x34a>
			}
		}
		else if(strcmp(argv[0],"speed")==0){//Fonction permettant de choisir le sens de rotation et la vitesse du moteur
 8000932:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <Shell_Loop+0x298>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4958      	ldr	r1, [pc, #352]	; (8000a98 <Shell_Loop+0x2b8>)
 8000938:	4618      	mov	r0, r3
 800093a:	f7ff fc71 	bl	8000220 <strcmp>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d154      	bne.n	80009ee <Shell_Loop+0x20e>
			if(atoi(argv[1])>=0){//La valeur de vitesse reçue étant une chaine de caractères ASCII, atoi permet de la convertir en entier
 8000944:	4b4c      	ldr	r3, [pc, #304]	; (8000a78 <Shell_Loop+0x298>)
 8000946:	685b      	ldr	r3, [r3, #4]
 8000948:	4618      	mov	r0, r3
 800094a:	f005 fe0f 	bl	800656c <atoi>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	db37      	blt.n	80009c4 <Shell_Loop+0x1e4>
				if(atoi(argv[1])<=100){
 8000954:	4b48      	ldr	r3, [pc, #288]	; (8000a78 <Shell_Loop+0x298>)
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	4618      	mov	r0, r3
 800095a:	f005 fe07 	bl	800656c <atoi>
 800095e:	4603      	mov	r3, r0
 8000960:	2b64      	cmp	r3, #100	; 0x64
 8000962:	dc1d      	bgt.n	80009a0 <Shell_Loop+0x1c0>
					set_pwm_alpha(atoi(argv[1]));//Appelle à la fonction permettant de changer le rapport cyclique
 8000964:	4b44      	ldr	r3, [pc, #272]	; (8000a78 <Shell_Loop+0x298>)
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	4618      	mov	r0, r3
 800096a:	f005 fdff 	bl	800656c <atoi>
 800096e:	4603      	mov	r3, r0
 8000970:	4618      	mov	r0, r3
 8000972:	f7ff fe7f 	bl	8000674 <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = %d\r\n",atoi(argv[1]));
 8000976:	4b40      	ldr	r3, [pc, #256]	; (8000a78 <Shell_Loop+0x298>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	4618      	mov	r0, r3
 800097c:	f005 fdf6 	bl	800656c <atoi>
 8000980:	4603      	mov	r3, r0
 8000982:	4a47      	ldr	r2, [pc, #284]	; (8000aa0 <Shell_Loop+0x2c0>)
 8000984:	2140      	movs	r1, #64	; 0x40
 8000986:	4843      	ldr	r0, [pc, #268]	; (8000a94 <Shell_Loop+0x2b4>)
 8000988:	f005 ff42 	bl	8006810 <sniprintf>
 800098c:	60f8      	str	r0, [r7, #12]
					HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	b29a      	uxth	r2, r3
 8000992:	f04f 33ff 	mov.w	r3, #4294967295
 8000996:	493f      	ldr	r1, [pc, #252]	; (8000a94 <Shell_Loop+0x2b4>)
 8000998:	4831      	ldr	r0, [pc, #196]	; (8000a60 <Shell_Loop+0x280>)
 800099a:	f003 fd2d 	bl	80043f8 <HAL_UART_Transmit>
 800099e:	e0c4      	b.n	8000b2a <Shell_Loop+0x34a>
				}
				else{//Sécuritée permettant de ne pas avoir un rapport cyclique supérieur à 75
					set_pwm_alpha(75);
 80009a0:	204b      	movs	r0, #75	; 0x4b
 80009a2:	f7ff fe67 	bl	8000674 <set_pwm_alpha>
					int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Nouveau alpha = 75\r\n");
 80009a6:	4a3f      	ldr	r2, [pc, #252]	; (8000aa4 <Shell_Loop+0x2c4>)
 80009a8:	2140      	movs	r1, #64	; 0x40
 80009aa:	483a      	ldr	r0, [pc, #232]	; (8000a94 <Shell_Loop+0x2b4>)
 80009ac:	f005 ff30 	bl	8006810 <sniprintf>
 80009b0:	6138      	str	r0, [r7, #16]
					HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	b29a      	uxth	r2, r3
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ba:	4936      	ldr	r1, [pc, #216]	; (8000a94 <Shell_Loop+0x2b4>)
 80009bc:	4828      	ldr	r0, [pc, #160]	; (8000a60 <Shell_Loop+0x280>)
 80009be:	f003 fd1b 	bl	80043f8 <HAL_UART_Transmit>
 80009c2:	e0b2      	b.n	8000b2a <Shell_Loop+0x34a>
				}
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Erreur alpha doit être compris entre 0 et 100\r\n",atoi(argv[1]));
 80009c4:	4b2c      	ldr	r3, [pc, #176]	; (8000a78 <Shell_Loop+0x298>)
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f005 fdcf 	bl	800656c <atoi>
 80009ce:	4603      	mov	r3, r0
 80009d0:	4a35      	ldr	r2, [pc, #212]	; (8000aa8 <Shell_Loop+0x2c8>)
 80009d2:	2140      	movs	r1, #64	; 0x40
 80009d4:	482f      	ldr	r0, [pc, #188]	; (8000a94 <Shell_Loop+0x2b4>)
 80009d6:	f005 ff1b 	bl	8006810 <sniprintf>
 80009da:	6178      	str	r0, [r7, #20]
				HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	b29a      	uxth	r2, r3
 80009e0:	f04f 33ff 	mov.w	r3, #4294967295
 80009e4:	492b      	ldr	r1, [pc, #172]	; (8000a94 <Shell_Loop+0x2b4>)
 80009e6:	481e      	ldr	r0, [pc, #120]	; (8000a60 <Shell_Loop+0x280>)
 80009e8:	f003 fd06 	bl	80043f8 <HAL_UART_Transmit>
 80009ec:	e09d      	b.n	8000b2a <Shell_Loop+0x34a>
			}
		}

		else if(strcmp(argv[0],"start")==0){//Fonction permettant d'allumer les PWM
 80009ee:	4b22      	ldr	r3, [pc, #136]	; (8000a78 <Shell_Loop+0x298>)
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	492e      	ldr	r1, [pc, #184]	; (8000aac <Shell_Loop+0x2cc>)
 80009f4:	4618      	mov	r0, r3
 80009f6:	f7ff fc13 	bl	8000220 <strcmp>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d15d      	bne.n	8000abc <Shell_Loop+0x2dc>
			if(motorStart == 0){
 8000a00:	4b2b      	ldr	r3, [pc, #172]	; (8000ab0 <Shell_Loop+0x2d0>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d116      	bne.n	8000a36 <Shell_Loop+0x256>
				pwm_start();
 8000a08:	f7ff fdf0 	bl	80005ec <pwm_start>
				set_pwm_alpha(50);
 8000a0c:	2032      	movs	r0, #50	; 0x32
 8000a0e:	f7ff fe31 	bl	8000674 <set_pwm_alpha>
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor start\r\nalpha = 50\r\n");
 8000a12:	4a28      	ldr	r2, [pc, #160]	; (8000ab4 <Shell_Loop+0x2d4>)
 8000a14:	2140      	movs	r1, #64	; 0x40
 8000a16:	481f      	ldr	r0, [pc, #124]	; (8000a94 <Shell_Loop+0x2b4>)
 8000a18:	f005 fefa 	bl	8006810 <sniprintf>
 8000a1c:	61b8      	str	r0, [r7, #24]
				HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000a1e:	69bb      	ldr	r3, [r7, #24]
 8000a20:	b29a      	uxth	r2, r3
 8000a22:	f04f 33ff 	mov.w	r3, #4294967295
 8000a26:	491b      	ldr	r1, [pc, #108]	; (8000a94 <Shell_Loop+0x2b4>)
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <Shell_Loop+0x280>)
 8000a2a:	f003 fce5 	bl	80043f8 <HAL_UART_Transmit>
				motorStart =1;
 8000a2e:	4b20      	ldr	r3, [pc, #128]	; (8000ab0 <Shell_Loop+0x2d0>)
 8000a30:	2201      	movs	r2, #1
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	e079      	b.n	8000b2a <Shell_Loop+0x34a>
			}
			else{
				int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already on\r\n");
 8000a36:	4a20      	ldr	r2, [pc, #128]	; (8000ab8 <Shell_Loop+0x2d8>)
 8000a38:	2140      	movs	r1, #64	; 0x40
 8000a3a:	4816      	ldr	r0, [pc, #88]	; (8000a94 <Shell_Loop+0x2b4>)
 8000a3c:	f005 fee8 	bl	8006810 <sniprintf>
 8000a40:	61f8      	str	r0, [r7, #28]
				HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000a42:	69fb      	ldr	r3, [r7, #28]
 8000a44:	b29a      	uxth	r2, r3
 8000a46:	f04f 33ff 	mov.w	r3, #4294967295
 8000a4a:	4912      	ldr	r1, [pc, #72]	; (8000a94 <Shell_Loop+0x2b4>)
 8000a4c:	4804      	ldr	r0, [pc, #16]	; (8000a60 <Shell_Loop+0x280>)
 8000a4e:	f003 fcd3 	bl	80043f8 <HAL_UART_Transmit>
 8000a52:	e06a      	b.n	8000b2a <Shell_Loop+0x34a>
 8000a54:	20000144 	.word	0x20000144
 8000a58:	20000148 	.word	0x20000148
 8000a5c:	20000084 	.word	0x20000084
 8000a60:	20000254 	.word	0x20000254
 8000a64:	200001cc 	.word	0x200001cc
 8000a68:	2000018c 	.word	0x2000018c
 8000a6c:	200001f4 	.word	0x200001f4
 8000a70:	08007a84 	.word	0x08007a84
 8000a74:	200001f8 	.word	0x200001f8
 8000a78:	200001d0 	.word	0x200001d0
 8000a7c:	200001fc 	.word	0x200001fc
 8000a80:	20000088 	.word	0x20000088
 8000a84:	08007a88 	.word	0x08007a88
 8000a88:	200000a0 	.word	0x200000a0
 8000a8c:	08007a98 	.word	0x08007a98
 8000a90:	08007aa0 	.word	0x08007aa0
 8000a94:	2000014c 	.word	0x2000014c
 8000a98:	08007ac8 	.word	0x08007ac8
 8000a9c:	08007ad0 	.word	0x08007ad0
 8000aa0:	08007b08 	.word	0x08007b08
 8000aa4:	08007b20 	.word	0x08007b20
 8000aa8:	08007b38 	.word	0x08007b38
 8000aac:	08007b6c 	.word	0x08007b6c
 8000ab0:	20000200 	.word	0x20000200
 8000ab4:	08007b74 	.word	0x08007b74
 8000ab8:	08007b90 	.word	0x08007b90
			}
		}

		else if(strcmp(argv[0],"stop")==0){//Fonction permettant d'éteindre les PWM
 8000abc:	4b22      	ldr	r3, [pc, #136]	; (8000b48 <Shell_Loop+0x368>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	4922      	ldr	r1, [pc, #136]	; (8000b4c <Shell_Loop+0x36c>)
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f7ff fbac 	bl	8000220 <strcmp>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d126      	bne.n	8000b1c <Shell_Loop+0x33c>
					if(motorStart == 1){
 8000ace:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <Shell_Loop+0x370>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	2b01      	cmp	r3, #1
 8000ad4:	d113      	bne.n	8000afe <Shell_Loop+0x31e>
						pwm_stop();
 8000ad6:	f7ff fdb1 	bl	800063c <pwm_stop>
						int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor stop\r\n");
 8000ada:	4a1e      	ldr	r2, [pc, #120]	; (8000b54 <Shell_Loop+0x374>)
 8000adc:	2140      	movs	r1, #64	; 0x40
 8000ade:	481e      	ldr	r0, [pc, #120]	; (8000b58 <Shell_Loop+0x378>)
 8000ae0:	f005 fe96 	bl	8006810 <sniprintf>
 8000ae4:	6238      	str	r0, [r7, #32]
						HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000ae6:	6a3b      	ldr	r3, [r7, #32]
 8000ae8:	b29a      	uxth	r2, r3
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	491a      	ldr	r1, [pc, #104]	; (8000b58 <Shell_Loop+0x378>)
 8000af0:	481a      	ldr	r0, [pc, #104]	; (8000b5c <Shell_Loop+0x37c>)
 8000af2:	f003 fc81 	bl	80043f8 <HAL_UART_Transmit>
						motorStart =0;
 8000af6:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <Shell_Loop+0x370>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	601a      	str	r2, [r3, #0]
 8000afc:	e015      	b.n	8000b2a <Shell_Loop+0x34a>
					}
					else{
						int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Motor is already off\r\n");
 8000afe:	4a18      	ldr	r2, [pc, #96]	; (8000b60 <Shell_Loop+0x380>)
 8000b00:	2140      	movs	r1, #64	; 0x40
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <Shell_Loop+0x378>)
 8000b04:	f005 fe84 	bl	8006810 <sniprintf>
 8000b08:	6278      	str	r0, [r7, #36]	; 0x24
						HAL_UART_Transmit(&hlpuart1, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8000b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b0c:	b29a      	uxth	r2, r3
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8000b12:	4911      	ldr	r1, [pc, #68]	; (8000b58 <Shell_Loop+0x378>)
 8000b14:	4811      	ldr	r0, [pc, #68]	; (8000b5c <Shell_Loop+0x37c>)
 8000b16:	f003 fc6f 	bl	80043f8 <HAL_UART_Transmit>
 8000b1a:	e006      	b.n	8000b2a <Shell_Loop+0x34a>
					}
				}

		else{
			HAL_UART_Transmit(&hlpuart1, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8000b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b20:	2214      	movs	r2, #20
 8000b22:	4910      	ldr	r1, [pc, #64]	; (8000b64 <Shell_Loop+0x384>)
 8000b24:	480d      	ldr	r0, [pc, #52]	; (8000b5c <Shell_Loop+0x37c>)
 8000b26:	f003 fc67 	bl	80043f8 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&hlpuart1, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8000b2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000b2e:	221c      	movs	r2, #28
 8000b30:	490d      	ldr	r1, [pc, #52]	; (8000b68 <Shell_Loop+0x388>)
 8000b32:	480a      	ldr	r0, [pc, #40]	; (8000b5c <Shell_Loop+0x37c>)
 8000b34:	f003 fc60 	bl	80043f8 <HAL_UART_Transmit>
		newCmdReady = 0;
 8000b38:	4b0c      	ldr	r3, [pc, #48]	; (8000b6c <Shell_Loop+0x38c>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	601a      	str	r2, [r3, #0]
	}
}
 8000b3e:	bf00      	nop
 8000b40:	3728      	adds	r7, #40	; 0x28
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	200001d0 	.word	0x200001d0
 8000b4c:	08007ba8 	.word	0x08007ba8
 8000b50:	20000200 	.word	0x20000200
 8000b54:	08007bb0 	.word	0x08007bb0
 8000b58:	2000014c 	.word	0x2000014c
 8000b5c:	20000254 	.word	0x20000254
 8000b60:	08007bc0 	.word	0x08007bc0
 8000b64:	2000008c 	.word	0x2000008c
 8000b68:	20000000 	.word	0x20000000
 8000b6c:	200001fc 	.word	0x200001fc

08000b70 <HAL_UART_RxCpltCallback>:

/**
 * @brief Fonction Callback appelée lors de la réception d'un nouveau caractère
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8000b78:	4b05      	ldr	r3, [pc, #20]	; (8000b90 <HAL_UART_RxCpltCallback+0x20>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&hlpuart1, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4904      	ldr	r1, [pc, #16]	; (8000b94 <HAL_UART_RxCpltCallback+0x24>)
 8000b82:	4805      	ldr	r0, [pc, #20]	; (8000b98 <HAL_UART_RxCpltCallback+0x28>)
 8000b84:	f003 fcce 	bl	8004524 <HAL_UART_Receive_IT>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000144 	.word	0x20000144
 8000b94:	20000148 	.word	0x20000148
 8000b98:	20000254 	.word	0x20000254

08000b9c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ba2:	4b12      	ldr	r3, [pc, #72]	; (8000bec <MX_DMA_Init+0x50>)
 8000ba4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ba6:	4a11      	ldr	r2, [pc, #68]	; (8000bec <MX_DMA_Init+0x50>)
 8000ba8:	f043 0304 	orr.w	r3, r3, #4
 8000bac:	6493      	str	r3, [r2, #72]	; 0x48
 8000bae:	4b0f      	ldr	r3, [pc, #60]	; (8000bec <MX_DMA_Init+0x50>)
 8000bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bb2:	f003 0304 	and.w	r3, r3, #4
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bba:	4b0c      	ldr	r3, [pc, #48]	; (8000bec <MX_DMA_Init+0x50>)
 8000bbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bbe:	4a0b      	ldr	r2, [pc, #44]	; (8000bec <MX_DMA_Init+0x50>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6493      	str	r3, [r2, #72]	; 0x48
 8000bc6:	4b09      	ldr	r3, [pc, #36]	; (8000bec <MX_DMA_Init+0x50>)
 8000bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000bca:	f003 0301 	and.w	r3, r3, #1
 8000bce:	603b      	str	r3, [r7, #0]
 8000bd0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	200b      	movs	r0, #11
 8000bd8:	f000 fe6d 	bl	80018b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000bdc:	200b      	movs	r0, #11
 8000bde:	f000 fe84 	bl	80018ea <HAL_NVIC_EnableIRQ>

}
 8000be2:	bf00      	nop
 8000be4:	3708      	adds	r7, #8
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08a      	sub	sp, #40	; 0x28
 8000bf4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf6:	f107 0314 	add.w	r3, r7, #20
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
 8000c04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c06:	4b37      	ldr	r3, [pc, #220]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c0a:	4a36      	ldr	r2, [pc, #216]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c0c:	f043 0304 	orr.w	r3, r3, #4
 8000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c12:	4b34      	ldr	r3, [pc, #208]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c16:	f003 0304 	and.w	r3, r3, #4
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c1e:	4b31      	ldr	r3, [pc, #196]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c22:	4a30      	ldr	r2, [pc, #192]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c24:	f043 0320 	orr.w	r3, r3, #32
 8000c28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c2a:	4b2e      	ldr	r3, [pc, #184]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c2e:	f003 0320 	and.w	r3, r3, #32
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c36:	4b2b      	ldr	r3, [pc, #172]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c3a:	4a2a      	ldr	r2, [pc, #168]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c3c:	f043 0301 	orr.w	r3, r3, #1
 8000c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c42:	4b28      	ldr	r3, [pc, #160]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c4e:	4b25      	ldr	r3, [pc, #148]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c52:	4a24      	ldr	r2, [pc, #144]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c54:	f043 0302 	orr.w	r3, r3, #2
 8000c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c5a:	4b22      	ldr	r3, [pc, #136]	; (8000ce4 <MX_GPIO_Init+0xf4>)
 8000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c5e:	f003 0302 	and.w	r3, r3, #2
 8000c62:	607b      	str	r3, [r7, #4]
 8000c64:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|EN_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 6102 	mov.w	r1, #2080	; 0x820
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f001 fa52 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ENU_Pin|ENV_Pin, GPIO_PIN_RESET);
 8000c74:	2200      	movs	r2, #0
 8000c76:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000c7a:	481b      	ldr	r0, [pc, #108]	; (8000ce8 <MX_GPIO_Init+0xf8>)
 8000c7c:	f001 fa4c 	bl	8002118 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c80:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c86:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	4815      	ldr	r0, [pc, #84]	; (8000cec <MX_GPIO_Init+0xfc>)
 8000c98:	f001 f8bc 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|EN_Pin;
 8000c9c:	f44f 6302 	mov.w	r3, #2080	; 0x820
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cb8:	f001 f8ac 	bl	8001e14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = ENU_Pin|ENV_Pin;
 8000cbc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cce:	f107 0314 	add.w	r3, r7, #20
 8000cd2:	4619      	mov	r1, r3
 8000cd4:	4804      	ldr	r0, [pc, #16]	; (8000ce8 <MX_GPIO_Init+0xf8>)
 8000cd6:	f001 f89d 	bl	8001e14 <HAL_GPIO_Init>

}
 8000cda:	bf00      	nop
 8000cdc:	3728      	adds	r7, #40	; 0x28
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	40021000 	.word	0x40021000
 8000ce8:	48000400 	.word	0x48000400
 8000cec:	48000800 	.word	0x48000800

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f000 fc71 	bl	80015da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f814 	bl	8000d24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f7ff ff78 	bl	8000bf0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d00:	f7ff ff4c 	bl	8000b9c <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000d04:	f000 fb6a 	bl	80013dc <MX_LPUART1_UART_Init>
  MX_TIM1_Init();
 8000d08:	f000 fa22 	bl	8001150 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d0c:	f000 fadc 	bl	80012c8 <MX_TIM2_Init>
  HAL_UART_Transmit(&hlpuart1,(uint8_t*)buffer,size,HAL_MAX_DELAY);
*/

  //__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
  //__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
  Shell_Init();
 8000d10:	f7ff fd26 	bl	8000760 <Shell_Init>
  pwm_start();
 8000d14:	f7ff fc6a 	bl	80005ec <pwm_start>
  set_pwm_alpha(70);
 8000d18:	2046      	movs	r0, #70	; 0x46
 8000d1a:	f7ff fcab 	bl	8000674 <set_pwm_alpha>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	Shell_Loop();
 8000d1e:	f7ff fd5f 	bl	80007e0 <Shell_Loop>
  {
 8000d22:	e7fc      	b.n	8000d1e <main+0x2e>

08000d24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b094      	sub	sp, #80	; 0x50
 8000d28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d2a:	f107 0318 	add.w	r3, r7, #24
 8000d2e:	2238      	movs	r2, #56	; 0x38
 8000d30:	2100      	movs	r1, #0
 8000d32:	4618      	mov	r0, r3
 8000d34:	f005 fde3 	bl	80068fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d38:	1d3b      	adds	r3, r7, #4
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
 8000d44:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d46:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000d4a:	f001 f9fd 	bl	8002148 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d4e:	2302      	movs	r3, #2
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d52:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d58:	2340      	movs	r3, #64	; 0x40
 8000d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d60:	2302      	movs	r3, #2
 8000d62:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000d64:	2301      	movs	r3, #1
 8000d66:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000d68:	230a      	movs	r3, #10
 8000d6a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d6c:	2302      	movs	r3, #2
 8000d6e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000d70:	2302      	movs	r3, #2
 8000d72:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000d74:	2302      	movs	r3, #2
 8000d76:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d78:	f107 0318 	add.w	r3, r7, #24
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f001 fa97 	bl	80022b0 <HAL_RCC_OscConfig>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d001      	beq.n	8000d8c <SystemClock_Config+0x68>
  {
    Error_Handler();
 8000d88:	f000 f819 	bl	8000dbe <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d8c:	230f      	movs	r3, #15
 8000d8e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d90:	2303      	movs	r3, #3
 8000d92:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d94:	2300      	movs	r3, #0
 8000d96:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d9c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000da2:	1d3b      	adds	r3, r7, #4
 8000da4:	2102      	movs	r1, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f001 fd9a 	bl	80028e0 <HAL_RCC_ClockConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000db2:	f000 f804 	bl	8000dbe <Error_Handler>
  }
}
 8000db6:	bf00      	nop
 8000db8:	3750      	adds	r7, #80	; 0x50
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dc2:	b672      	cpsid	i
}
 8000dc4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <Error_Handler+0x8>

08000dc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dce:	4b0f      	ldr	r3, [pc, #60]	; (8000e0c <HAL_MspInit+0x44>)
 8000dd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dd2:	4a0e      	ldr	r2, [pc, #56]	; (8000e0c <HAL_MspInit+0x44>)
 8000dd4:	f043 0301 	orr.w	r3, r3, #1
 8000dd8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dda:	4b0c      	ldr	r3, [pc, #48]	; (8000e0c <HAL_MspInit+0x44>)
 8000ddc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	607b      	str	r3, [r7, #4]
 8000de4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de6:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <HAL_MspInit+0x44>)
 8000de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dea:	4a08      	ldr	r2, [pc, #32]	; (8000e0c <HAL_MspInit+0x44>)
 8000dec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df0:	6593      	str	r3, [r2, #88]	; 0x58
 8000df2:	4b06      	ldr	r3, [pc, #24]	; (8000e0c <HAL_MspInit+0x44>)
 8000df4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dfa:	603b      	str	r3, [r7, #0]
 8000dfc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000dfe:	f001 fa47 	bl	8002290 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40021000 	.word	0x40021000

08000e10 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	f043 0201 	orr.w	r2, r3, #1
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	601a      	str	r2, [r3, #0]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	f023 0201 	bic.w	r2, r3, #1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000e54:	e7fe      	b.n	8000e54 <NMI_Handler+0x4>

08000e56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <HardFault_Handler+0x4>

08000e5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <MemManage_Handler+0x4>

08000e62 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e66:	e7fe      	b.n	8000e66 <BusFault_Handler+0x4>

08000e68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <UsageFault_Handler+0x4>

08000e6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e6e:	b480      	push	{r7}
 8000e70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr

08000e7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e80:	bf00      	nop
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr

08000e8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e8a:	b480      	push	{r7}
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	46bd      	mov	sp, r7
 8000e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e96:	4770      	bx	lr

08000e98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e9c:	f000 fbf0 	bl	8001680 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea0:	bf00      	nop
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 8000ea8:	4802      	ldr	r0, [pc, #8]	; (8000eb4 <DMA1_Channel1_IRQHandler+0x10>)
 8000eaa:	f000 fea1 	bl	8001bf0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200002e4 	.word	0x200002e4

08000eb8 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */
	LL_TIM_EnableCounter(TIM2);
 8000ebc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ec0:	f7ff ffa6 	bl	8000e10 <LL_TIM_EnableCounter>
  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8000ec4:	4804      	ldr	r0, [pc, #16]	; (8000ed8 <LPUART1_IRQHandler+0x20>)
 8000ec6:	f003 fb83 	bl	80045d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */
	LL_TIM_DisableCounter(TIM2);
 8000eca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000ece:	f7ff ffaf 	bl	8000e30 <LL_TIM_DisableCounter>
  /* USER CODE END LPUART1_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000254 	.word	0x20000254

08000edc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  return 1;
 8000ee0:	2301      	movs	r3, #1
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <_kill>:

int _kill(int pid, int sig)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b082      	sub	sp, #8
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000ef6:	f005 fdad 	bl	8006a54 <__errno>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2216      	movs	r2, #22
 8000efe:	601a      	str	r2, [r3, #0]
  return -1;
 8000f00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <_exit>:

void _exit (int status)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f14:	f04f 31ff 	mov.w	r1, #4294967295
 8000f18:	6878      	ldr	r0, [r7, #4]
 8000f1a:	f7ff ffe7 	bl	8000eec <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f1e:	e7fe      	b.n	8000f1e <_exit+0x12>

08000f20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	60b9      	str	r1, [r7, #8]
 8000f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	e00a      	b.n	8000f48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f32:	f3af 8000 	nop.w
 8000f36:	4601      	mov	r1, r0
 8000f38:	68bb      	ldr	r3, [r7, #8]
 8000f3a:	1c5a      	adds	r2, r3, #1
 8000f3c:	60ba      	str	r2, [r7, #8]
 8000f3e:	b2ca      	uxtb	r2, r1
 8000f40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	697b      	ldr	r3, [r7, #20]
 8000f44:	3301      	adds	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697a      	ldr	r2, [r7, #20]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	dbf0      	blt.n	8000f32 <_read+0x12>
  }

  return len;
 8000f50:	687b      	ldr	r3, [r7, #4]
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	3718      	adds	r7, #24
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b086      	sub	sp, #24
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	60f8      	str	r0, [r7, #12]
 8000f62:	60b9      	str	r1, [r7, #8]
 8000f64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	e009      	b.n	8000f80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	1c5a      	adds	r2, r3, #1
 8000f70:	60ba      	str	r2, [r7, #8]
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	429a      	cmp	r2, r3
 8000f86:	dbf1      	blt.n	8000f6c <_write+0x12>
  }
  return len;
 8000f88:	687b      	ldr	r3, [r7, #4]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3718      	adds	r7, #24
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <_close>:

int _close(int file)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b083      	sub	sp, #12
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	6078      	str	r0, [r7, #4]
 8000fb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fba:	605a      	str	r2, [r3, #4]
  return 0;
 8000fbc:	2300      	movs	r3, #0
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	370c      	adds	r7, #12
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <_isatty>:

int _isatty(int file)
{
 8000fca:	b480      	push	{r7}
 8000fcc:	b083      	sub	sp, #12
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fd2:	2301      	movs	r3, #1
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	370c      	adds	r7, #12
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fde:	4770      	bx	lr

08000fe0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b085      	sub	sp, #20
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	60f8      	str	r0, [r7, #12]
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001004:	4a14      	ldr	r2, [pc, #80]	; (8001058 <_sbrk+0x5c>)
 8001006:	4b15      	ldr	r3, [pc, #84]	; (800105c <_sbrk+0x60>)
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001010:	4b13      	ldr	r3, [pc, #76]	; (8001060 <_sbrk+0x64>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d102      	bne.n	800101e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001018:	4b11      	ldr	r3, [pc, #68]	; (8001060 <_sbrk+0x64>)
 800101a:	4a12      	ldr	r2, [pc, #72]	; (8001064 <_sbrk+0x68>)
 800101c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800101e:	4b10      	ldr	r3, [pc, #64]	; (8001060 <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	429a      	cmp	r2, r3
 800102a:	d207      	bcs.n	800103c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800102c:	f005 fd12 	bl	8006a54 <__errno>
 8001030:	4603      	mov	r3, r0
 8001032:	220c      	movs	r2, #12
 8001034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001036:	f04f 33ff 	mov.w	r3, #4294967295
 800103a:	e009      	b.n	8001050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800103c:	4b08      	ldr	r3, [pc, #32]	; (8001060 <_sbrk+0x64>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <_sbrk+0x64>)
 8001044:	681a      	ldr	r2, [r3, #0]
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4413      	add	r3, r2
 800104a:	4a05      	ldr	r2, [pc, #20]	; (8001060 <_sbrk+0x64>)
 800104c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3718      	adds	r7, #24
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	20008000 	.word	0x20008000
 800105c:	00000400 	.word	0x00000400
 8001060:	20000204 	.word	0x20000204
 8001064:	20000498 	.word	0x20000498

08001068 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800106c:	4b06      	ldr	r3, [pc, #24]	; (8001088 <SystemInit+0x20>)
 800106e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001072:	4a05      	ldr	r2, [pc, #20]	; (8001088 <SystemInit+0x20>)
 8001074:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001078:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	601a      	str	r2, [r3, #0]
}
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010aa:	4770      	bx	lr

080010ac <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b083      	sub	sp, #12
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80010be:	f023 0307 	bic.w	r3, r3, #7
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	431a      	orrs	r2, r3
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	609a      	str	r2, [r3, #8]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr

080010d6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC4REF
  *         @arg @ref LL_TIM_TRGO_ENCODERCLK
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80010d6:	b480      	push	{r7}
 80010d8:	b083      	sub	sp, #12
 80010da:	af00      	add	r7, sp, #0
 80010dc:	6078      	str	r0, [r7, #4]
 80010de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80010e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80010ec:	683a      	ldr	r2, [r7, #0]
 80010ee:	431a      	orrs	r2, r3
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	605a      	str	r2, [r3, #4]
}
 80010f4:	bf00      	nop
 80010f6:	370c      	adds	r7, #12
 80010f8:	46bd      	mov	sp, r7
 80010fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fe:	4770      	bx	lr

08001100 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	609a      	str	r2, [r3, #8]
}
 8001114:	bf00      	nop
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <LL_APB1_GRP1_EnableClock+0x2c>)
 800112a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <LL_APB1_GRP1_EnableClock+0x2c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001136:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000

08001150 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b09c      	sub	sp, #112	; 0x70
 8001154:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001156:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800115a:	2200      	movs	r2, #0
 800115c:	601a      	str	r2, [r3, #0]
 800115e:	605a      	str	r2, [r3, #4]
 8001160:	609a      	str	r2, [r3, #8]
 8001162:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001164:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001168:	2200      	movs	r2, #0
 800116a:	601a      	str	r2, [r3, #0]
 800116c:	605a      	str	r2, [r3, #4]
 800116e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001170:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]
 800117e:	611a      	str	r2, [r3, #16]
 8001180:	615a      	str	r2, [r3, #20]
 8001182:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001184:	1d3b      	adds	r3, r7, #4
 8001186:	2234      	movs	r2, #52	; 0x34
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f005 fbb7 	bl	80068fe <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001190:	4b4b      	ldr	r3, [pc, #300]	; (80012c0 <MX_TIM1_Init+0x170>)
 8001192:	4a4c      	ldr	r2, [pc, #304]	; (80012c4 <MX_TIM1_Init+0x174>)
 8001194:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 8001196:	4b4a      	ldr	r3, [pc, #296]	; (80012c0 <MX_TIM1_Init+0x170>)
 8001198:	2227      	movs	r2, #39	; 0x27
 800119a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 800119c:	4b48      	ldr	r3, [pc, #288]	; (80012c0 <MX_TIM1_Init+0x170>)
 800119e:	2220      	movs	r2, #32
 80011a0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 80011a2:	4b47      	ldr	r3, [pc, #284]	; (80012c0 <MX_TIM1_Init+0x170>)
 80011a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011a8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b45      	ldr	r3, [pc, #276]	; (80012c0 <MX_TIM1_Init+0x170>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80011b0:	4b43      	ldr	r3, [pc, #268]	; (80012c0 <MX_TIM1_Init+0x170>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b6:	4b42      	ldr	r3, [pc, #264]	; (80012c0 <MX_TIM1_Init+0x170>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011bc:	4840      	ldr	r0, [pc, #256]	; (80012c0 <MX_TIM1_Init+0x170>)
 80011be:	f001 ff9b 	bl	80030f8 <HAL_TIM_Base_Init>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80011c8:	f7ff fdf9 	bl	8000dbe <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011d2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80011d6:	4619      	mov	r1, r3
 80011d8:	4839      	ldr	r0, [pc, #228]	; (80012c0 <MX_TIM1_Init+0x170>)
 80011da:	f002 fa59 	bl	8003690 <HAL_TIM_ConfigClockSource>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80011e4:	f7ff fdeb 	bl	8000dbe <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80011e8:	4835      	ldr	r0, [pc, #212]	; (80012c0 <MX_TIM1_Init+0x170>)
 80011ea:	f001 ffdc 	bl	80031a6 <HAL_TIM_PWM_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011f4:	f7ff fde3 	bl	8000dbe <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001204:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001208:	4619      	mov	r1, r3
 800120a:	482d      	ldr	r0, [pc, #180]	; (80012c0 <MX_TIM1_Init+0x170>)
 800120c:	f002 ff82 	bl	8004114 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 8001216:	f7ff fdd2 	bl	8000dbe <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121a:	2360      	movs	r3, #96	; 0x60
 800121c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001226:	2300      	movs	r3, #0
 8001228:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800122a:	2300      	movs	r3, #0
 800122c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800122e:	2300      	movs	r3, #0
 8001230:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001236:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800123a:	2200      	movs	r2, #0
 800123c:	4619      	mov	r1, r3
 800123e:	4820      	ldr	r0, [pc, #128]	; (80012c0 <MX_TIM1_Init+0x170>)
 8001240:	f002 f912 	bl	8003468 <HAL_TIM_PWM_ConfigChannel>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800124a:	f7ff fdb8 	bl	8000dbe <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800124e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001252:	2204      	movs	r2, #4
 8001254:	4619      	mov	r1, r3
 8001256:	481a      	ldr	r0, [pc, #104]	; (80012c0 <MX_TIM1_Init+0x170>)
 8001258:	f002 f906 	bl	8003468 <HAL_TIM_PWM_ConfigChannel>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001262:	f7ff fdac 	bl	8000dbe <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001266:	2300      	movs	r3, #0
 8001268:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800126a:	2300      	movs	r3, #0
 800126c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800126e:	2300      	movs	r3, #0
 8001270:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800127a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800127e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001280:	2300      	movs	r3, #0
 8001282:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001284:	2300      	movs	r3, #0
 8001286:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001288:	2300      	movs	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800128c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001296:	2300      	movs	r3, #0
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_TIM1_Init+0x170>)
 80012a4:	f002 ffb8 	bl	8004218 <HAL_TIMEx_ConfigBreakDeadTime>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 80012ae:	f7ff fd86 	bl	8000dbe <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM1_Init+0x170>)
 80012b4:	f000 f85a 	bl	800136c <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3770      	adds	r7, #112	; 0x70
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000208 	.word	0x20000208
 80012c4:	40012c00 	.word	0x40012c00

080012c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80012ce:	1d3b      	adds	r3, r7, #4
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 80012dc:	2001      	movs	r0, #1
 80012de:	f7ff ff1f 	bl	8001120 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 1;
 80012e2:	2301      	movs	r3, #1
 80012e4:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 4.294967295E9;
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 80012f4:	1d3b      	adds	r3, r7, #4
 80012f6:	4619      	mov	r1, r3
 80012f8:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80012fc:	f005 f8ac 	bl	8006458 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8001300:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001304:	f7ff fec2 	bl	800108c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001308:	2100      	movs	r1, #0
 800130a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800130e:	f7ff fecd 	bl	80010ac <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8001312:	2100      	movs	r1, #0
 8001314:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001318:	f7ff fedd 	bl	80010d6 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800131c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8001320:	f7ff feee 	bl	8001100 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001324:	bf00      	nop
 8001326:	3718      	adds	r7, #24
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_TIM_Base_MspInit+0x38>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d10b      	bne.n	8001356 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133e:	4b0a      	ldr	r3, [pc, #40]	; (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 8001340:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001342:	4a09      	ldr	r2, [pc, #36]	; (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 8001344:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001348:	6613      	str	r3, [r2, #96]	; 0x60
 800134a:	4b07      	ldr	r3, [pc, #28]	; (8001368 <HAL_TIM_Base_MspInit+0x3c>)
 800134c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800134e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40012c00 	.word	0x40012c00
 8001368:	40021000 	.word	0x40021000

0800136c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 030c 	add.w	r3, r7, #12
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a12      	ldr	r2, [pc, #72]	; (80013d4 <HAL_TIM_MspPostInit+0x68>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d11d      	bne.n	80013ca <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138e:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 8001390:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001392:	4a11      	ldr	r2, [pc, #68]	; (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139a:	4b0f      	ldr	r3, [pc, #60]	; (80013d8 <HAL_TIM_MspPostInit+0x6c>)
 800139c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60bb      	str	r3, [r7, #8]
 80013a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM1_Pin|PWM2_Pin;
 80013a6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80013aa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80013b8:	2306      	movs	r3, #6
 80013ba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013bc:	f107 030c 	add.w	r3, r7, #12
 80013c0:	4619      	mov	r1, r3
 80013c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013c6:	f000 fd25 	bl	8001e14 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40012c00 	.word	0x40012c00
 80013d8:	40021000 	.word	0x40021000

080013dc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_rx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80013e0:	4b21      	ldr	r3, [pc, #132]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 80013e2:	4a22      	ldr	r2, [pc, #136]	; (800146c <MX_LPUART1_UART_Init+0x90>)
 80013e4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 80013e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80013ec:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80013ee:	4b1e      	ldr	r3, [pc, #120]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 80013f0:	2200      	movs	r2, #0
 80013f2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80013fa:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001400:	4b19      	ldr	r3, [pc, #100]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 8001402:	220c      	movs	r2, #12
 8001404:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001406:	4b18      	ldr	r3, [pc, #96]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 8001408:	2200      	movs	r2, #0
 800140a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800140c:	4b16      	ldr	r3, [pc, #88]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001412:	4b15      	ldr	r3, [pc, #84]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800141e:	4812      	ldr	r0, [pc, #72]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 8001420:	f002 ff9a 	bl	8004358 <HAL_UART_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800142a:	f7ff fcc8 	bl	8000dbe <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800142e:	2100      	movs	r1, #0
 8001430:	480d      	ldr	r0, [pc, #52]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 8001432:	f004 ff0c 	bl	800624e <HAL_UARTEx_SetTxFifoThreshold>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800143c:	f7ff fcbf 	bl	8000dbe <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001440:	2100      	movs	r1, #0
 8001442:	4809      	ldr	r0, [pc, #36]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 8001444:	f004 ff41 	bl	80062ca <HAL_UARTEx_SetRxFifoThreshold>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800144e:	f7ff fcb6 	bl	8000dbe <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001452:	4805      	ldr	r0, [pc, #20]	; (8001468 <MX_LPUART1_UART_Init+0x8c>)
 8001454:	f004 fec2 	bl	80061dc <HAL_UARTEx_DisableFifoMode>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800145e:	f7ff fcae 	bl	8000dbe <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000254 	.word	0x20000254
 800146c:	40008000 	.word	0x40008000

08001470 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b09a      	sub	sp, #104	; 0x68
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	2244      	movs	r2, #68	; 0x44
 800148e:	2100      	movs	r1, #0
 8001490:	4618      	mov	r0, r3
 8001492:	f005 fa34 	bl	80068fe <memset>
  if(uartHandle->Instance==LPUART1)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a37      	ldr	r2, [pc, #220]	; (8001578 <HAL_UART_MspInit+0x108>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d167      	bne.n	8001570 <HAL_UART_MspInit+0x100>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80014a0:	2320      	movs	r3, #32
 80014a2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80014a4:	2300      	movs	r3, #0
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014a8:	f107 0310 	add.w	r3, r7, #16
 80014ac:	4618      	mov	r0, r3
 80014ae:	f001 fc33 	bl	8002d18 <HAL_RCCEx_PeriphCLKConfig>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014b8:	f7ff fc81 	bl	8000dbe <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80014bc:	4b2f      	ldr	r3, [pc, #188]	; (800157c <HAL_UART_MspInit+0x10c>)
 80014be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c0:	4a2e      	ldr	r2, [pc, #184]	; (800157c <HAL_UART_MspInit+0x10c>)
 80014c2:	f043 0301 	orr.w	r3, r3, #1
 80014c6:	65d3      	str	r3, [r2, #92]	; 0x5c
 80014c8:	4b2c      	ldr	r3, [pc, #176]	; (800157c <HAL_UART_MspInit+0x10c>)
 80014ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014d4:	4b29      	ldr	r3, [pc, #164]	; (800157c <HAL_UART_MspInit+0x10c>)
 80014d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014d8:	4a28      	ldr	r2, [pc, #160]	; (800157c <HAL_UART_MspInit+0x10c>)
 80014da:	f043 0301 	orr.w	r3, r3, #1
 80014de:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014e0:	4b26      	ldr	r3, [pc, #152]	; (800157c <HAL_UART_MspInit+0x10c>)
 80014e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	60bb      	str	r3, [r7, #8]
 80014ea:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 80014ec:	230c      	movs	r3, #12
 80014ee:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 80014fc:	230c      	movs	r3, #12
 80014fe:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001500:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001504:	4619      	mov	r1, r3
 8001506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800150a:	f000 fc83 	bl	8001e14 <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 800150e:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001510:	4a1c      	ldr	r2, [pc, #112]	; (8001584 <HAL_UART_MspInit+0x114>)
 8001512:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8001514:	4b1a      	ldr	r3, [pc, #104]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001516:	2222      	movs	r2, #34	; 0x22
 8001518:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800151a:	4b19      	ldr	r3, [pc, #100]	; (8001580 <HAL_UART_MspInit+0x110>)
 800151c:	2200      	movs	r2, #0
 800151e:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001520:	4b17      	ldr	r3, [pc, #92]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001522:	2200      	movs	r2, #0
 8001524:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001526:	4b16      	ldr	r3, [pc, #88]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001528:	2280      	movs	r2, #128	; 0x80
 800152a:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <HAL_UART_MspInit+0x110>)
 800152e:	2200      	movs	r2, #0
 8001530:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001534:	2200      	movs	r2, #0
 8001536:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_NORMAL;
 8001538:	4b11      	ldr	r3, [pc, #68]	; (8001580 <HAL_UART_MspInit+0x110>)
 800153a:	2200      	movs	r2, #0
 800153c:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800153e:	4b10      	ldr	r3, [pc, #64]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001540:	2200      	movs	r2, #0
 8001542:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8001544:	480e      	ldr	r0, [pc, #56]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001546:	f000 f9eb 	bl	8001920 <HAL_DMA_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <HAL_UART_MspInit+0xe4>
    {
      Error_Handler();
 8001550:	f7ff fc35 	bl	8000dbe <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	4a0a      	ldr	r2, [pc, #40]	; (8001580 <HAL_UART_MspInit+0x110>)
 8001558:	67da      	str	r2, [r3, #124]	; 0x7c
 800155a:	4a09      	ldr	r2, [pc, #36]	; (8001580 <HAL_UART_MspInit+0x110>)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6293      	str	r3, [r2, #40]	; 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8001560:	2200      	movs	r2, #0
 8001562:	2100      	movs	r1, #0
 8001564:	205b      	movs	r0, #91	; 0x5b
 8001566:	f000 f9a6 	bl	80018b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 800156a:	205b      	movs	r0, #91	; 0x5b
 800156c:	f000 f9bd 	bl	80018ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8001570:	bf00      	nop
 8001572:	3768      	adds	r7, #104	; 0x68
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40008000 	.word	0x40008000
 800157c:	40021000 	.word	0x40021000
 8001580:	200002e4 	.word	0x200002e4
 8001584:	40020008 	.word	0x40020008

08001588 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800158a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800158c:	480d      	ldr	r0, [pc, #52]	; (80015c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800158e:	490e      	ldr	r1, [pc, #56]	; (80015c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001590:	4a0e      	ldr	r2, [pc, #56]	; (80015cc <LoopForever+0xe>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001594:	e002      	b.n	800159c <LoopCopyDataInit>

08001596 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001596:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001598:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159a:	3304      	adds	r3, #4

0800159c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800159c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800159e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a0:	d3f9      	bcc.n	8001596 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a2:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a4:	4c0b      	ldr	r4, [pc, #44]	; (80015d4 <LoopForever+0x16>)
  movs r3, #0
 80015a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015a8:	e001      	b.n	80015ae <LoopFillZerobss>

080015aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015ac:	3204      	adds	r2, #4

080015ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b0:	d3fb      	bcc.n	80015aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015b2:	f7ff fd59 	bl	8001068 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f005 fa53 	bl	8006a60 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015ba:	f7ff fb99 	bl	8000cf0 <main>

080015be <LoopForever>:

LoopForever:
    b LoopForever
 80015be:	e7fe      	b.n	80015be <LoopForever>
  ldr   r0, =_estack
 80015c0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 80015cc:	08007e0c 	.word	0x08007e0c
  ldr r2, =_sbss
 80015d0:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 80015d4:	20000494 	.word	0x20000494

080015d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_2_IRQHandler>

080015da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e0:	2300      	movs	r3, #0
 80015e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015e4:	2003      	movs	r0, #3
 80015e6:	f000 f95b 	bl	80018a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015ea:	2000      	movs	r0, #0
 80015ec:	f000 f80e 	bl	800160c <HAL_InitTick>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d002      	beq.n	80015fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	71fb      	strb	r3, [r7, #7]
 80015fa:	e001      	b.n	8001600 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80015fc:	f7ff fbe4 	bl	8000dc8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001600:	79fb      	ldrb	r3, [r7, #7]

}
 8001602:	4618      	mov	r0, r3
 8001604:	3708      	adds	r7, #8
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
	...

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b084      	sub	sp, #16
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001618:	4b16      	ldr	r3, [pc, #88]	; (8001674 <HAL_InitTick+0x68>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d022      	beq.n	8001666 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001620:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_InitTick+0x6c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b13      	ldr	r3, [pc, #76]	; (8001674 <HAL_InitTick+0x68>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800162c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001630:	fbb2 f3f3 	udiv	r3, r2, r3
 8001634:	4618      	mov	r0, r3
 8001636:	f000 f966 	bl	8001906 <HAL_SYSTICK_Config>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d10f      	bne.n	8001660 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	d809      	bhi.n	800165a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001646:	2200      	movs	r2, #0
 8001648:	6879      	ldr	r1, [r7, #4]
 800164a:	f04f 30ff 	mov.w	r0, #4294967295
 800164e:	f000 f932 	bl	80018b6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001652:	4a0a      	ldr	r2, [pc, #40]	; (800167c <HAL_InitTick+0x70>)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	6013      	str	r3, [r2, #0]
 8001658:	e007      	b.n	800166a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	73fb      	strb	r3, [r7, #15]
 800165e:	e004      	b.n	800166a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	73fb      	strb	r3, [r7, #15]
 8001664:	e001      	b.n	800166a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800166a:	7bfb      	ldrb	r3, [r7, #15]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3710      	adds	r7, #16
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}
 8001674:	200000c4 	.word	0x200000c4
 8001678:	200000bc 	.word	0x200000bc
 800167c:	200000c0 	.word	0x200000c0

08001680 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <HAL_IncTick+0x1c>)
 8001686:	681a      	ldr	r2, [r3, #0]
 8001688:	4b05      	ldr	r3, [pc, #20]	; (80016a0 <HAL_IncTick+0x20>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4413      	add	r3, r2
 800168e:	4a03      	ldr	r2, [pc, #12]	; (800169c <HAL_IncTick+0x1c>)
 8001690:	6013      	str	r3, [r2, #0]
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	20000344 	.word	0x20000344
 80016a0:	200000c4 	.word	0x200000c4

080016a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  return uwTick;
 80016a8:	4b03      	ldr	r3, [pc, #12]	; (80016b8 <HAL_GetTick+0x14>)
 80016aa:	681b      	ldr	r3, [r3, #0]
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	20000344 	.word	0x20000344

080016bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016c4:	f7ff ffee 	bl	80016a4 <HAL_GetTick>
 80016c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016d4:	d004      	beq.n	80016e0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80016d6:	4b09      	ldr	r3, [pc, #36]	; (80016fc <HAL_Delay+0x40>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4413      	add	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80016e0:	bf00      	nop
 80016e2:	f7ff ffdf 	bl	80016a4 <HAL_GetTick>
 80016e6:	4602      	mov	r2, r0
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	429a      	cmp	r2, r3
 80016f0:	d8f7      	bhi.n	80016e2 <HAL_Delay+0x26>
  {
  }
}
 80016f2:	bf00      	nop
 80016f4:	bf00      	nop
 80016f6:	3710      	adds	r7, #16
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	200000c4 	.word	0x200000c4

08001700 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001700:	b480      	push	{r7}
 8001702:	b085      	sub	sp, #20
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	f003 0307 	and.w	r3, r3, #7
 800170e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001716:	68ba      	ldr	r2, [r7, #8]
 8001718:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800171c:	4013      	ands	r3, r2
 800171e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001728:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800172c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001730:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001732:	4a04      	ldr	r2, [pc, #16]	; (8001744 <__NVIC_SetPriorityGrouping+0x44>)
 8001734:	68bb      	ldr	r3, [r7, #8]
 8001736:	60d3      	str	r3, [r2, #12]
}
 8001738:	bf00      	nop
 800173a:	3714      	adds	r7, #20
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800174c:	4b04      	ldr	r3, [pc, #16]	; (8001760 <__NVIC_GetPriorityGrouping+0x18>)
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	0a1b      	lsrs	r3, r3, #8
 8001752:	f003 0307 	and.w	r3, r3, #7
}
 8001756:	4618      	mov	r0, r3
 8001758:	46bd      	mov	sp, r7
 800175a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175e:	4770      	bx	lr
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	2b00      	cmp	r3, #0
 8001774:	db0b      	blt.n	800178e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001776:	79fb      	ldrb	r3, [r7, #7]
 8001778:	f003 021f 	and.w	r2, r3, #31
 800177c:	4907      	ldr	r1, [pc, #28]	; (800179c <__NVIC_EnableIRQ+0x38>)
 800177e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001782:	095b      	lsrs	r3, r3, #5
 8001784:	2001      	movs	r0, #1
 8001786:	fa00 f202 	lsl.w	r2, r0, r2
 800178a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800178e:	bf00      	nop
 8001790:	370c      	adds	r7, #12
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	e000e100 	.word	0xe000e100

080017a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	6039      	str	r1, [r7, #0]
 80017aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	db0a      	blt.n	80017ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	b2da      	uxtb	r2, r3
 80017b8:	490c      	ldr	r1, [pc, #48]	; (80017ec <__NVIC_SetPriority+0x4c>)
 80017ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017be:	0112      	lsls	r2, r2, #4
 80017c0:	b2d2      	uxtb	r2, r2
 80017c2:	440b      	add	r3, r1
 80017c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017c8:	e00a      	b.n	80017e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	b2da      	uxtb	r2, r3
 80017ce:	4908      	ldr	r1, [pc, #32]	; (80017f0 <__NVIC_SetPriority+0x50>)
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	3b04      	subs	r3, #4
 80017d8:	0112      	lsls	r2, r2, #4
 80017da:	b2d2      	uxtb	r2, r2
 80017dc:	440b      	add	r3, r1
 80017de:	761a      	strb	r2, [r3, #24]
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000e100 	.word	0xe000e100
 80017f0:	e000ed00 	.word	0xe000ed00

080017f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b089      	sub	sp, #36	; 0x24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	60f8      	str	r0, [r7, #12]
 80017fc:	60b9      	str	r1, [r7, #8]
 80017fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001808:	69fb      	ldr	r3, [r7, #28]
 800180a:	f1c3 0307 	rsb	r3, r3, #7
 800180e:	2b04      	cmp	r3, #4
 8001810:	bf28      	it	cs
 8001812:	2304      	movcs	r3, #4
 8001814:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	3304      	adds	r3, #4
 800181a:	2b06      	cmp	r3, #6
 800181c:	d902      	bls.n	8001824 <NVIC_EncodePriority+0x30>
 800181e:	69fb      	ldr	r3, [r7, #28]
 8001820:	3b03      	subs	r3, #3
 8001822:	e000      	b.n	8001826 <NVIC_EncodePriority+0x32>
 8001824:	2300      	movs	r3, #0
 8001826:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001828:	f04f 32ff 	mov.w	r2, #4294967295
 800182c:	69bb      	ldr	r3, [r7, #24]
 800182e:	fa02 f303 	lsl.w	r3, r2, r3
 8001832:	43da      	mvns	r2, r3
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	401a      	ands	r2, r3
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800183c:	f04f 31ff 	mov.w	r1, #4294967295
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	43d9      	mvns	r1, r3
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800184c:	4313      	orrs	r3, r2
         );
}
 800184e:	4618      	mov	r0, r3
 8001850:	3724      	adds	r7, #36	; 0x24
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800186c:	d301      	bcc.n	8001872 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800186e:	2301      	movs	r3, #1
 8001870:	e00f      	b.n	8001892 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001872:	4a0a      	ldr	r2, [pc, #40]	; (800189c <SysTick_Config+0x40>)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	3b01      	subs	r3, #1
 8001878:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800187a:	210f      	movs	r1, #15
 800187c:	f04f 30ff 	mov.w	r0, #4294967295
 8001880:	f7ff ff8e 	bl	80017a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <SysTick_Config+0x40>)
 8001886:	2200      	movs	r2, #0
 8001888:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800188a:	4b04      	ldr	r3, [pc, #16]	; (800189c <SysTick_Config+0x40>)
 800188c:	2207      	movs	r2, #7
 800188e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001890:	2300      	movs	r3, #0
}
 8001892:	4618      	mov	r0, r3
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	e000e010 	.word	0xe000e010

080018a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b082      	sub	sp, #8
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80018a8:	6878      	ldr	r0, [r7, #4]
 80018aa:	f7ff ff29 	bl	8001700 <__NVIC_SetPriorityGrouping>
}
 80018ae:	bf00      	nop
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b086      	sub	sp, #24
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	60b9      	str	r1, [r7, #8]
 80018c0:	607a      	str	r2, [r7, #4]
 80018c2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80018c4:	f7ff ff40 	bl	8001748 <__NVIC_GetPriorityGrouping>
 80018c8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ca:	687a      	ldr	r2, [r7, #4]
 80018cc:	68b9      	ldr	r1, [r7, #8]
 80018ce:	6978      	ldr	r0, [r7, #20]
 80018d0:	f7ff ff90 	bl	80017f4 <NVIC_EncodePriority>
 80018d4:	4602      	mov	r2, r0
 80018d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018da:	4611      	mov	r1, r2
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff5f 	bl	80017a0 <__NVIC_SetPriority>
}
 80018e2:	bf00      	nop
 80018e4:	3718      	adds	r7, #24
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	4603      	mov	r3, r0
 80018f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff ff33 	bl	8001764 <__NVIC_EnableIRQ>
}
 80018fe:	bf00      	nop
 8001900:	3708      	adds	r7, #8
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f7ff ffa4 	bl	800185c <SysTick_Config>
 8001914:	4603      	mov	r3, r0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3708      	adds	r7, #8
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
	...

08001920 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e08d      	b.n	8001a4e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	461a      	mov	r2, r3
 8001938:	4b47      	ldr	r3, [pc, #284]	; (8001a58 <HAL_DMA_Init+0x138>)
 800193a:	429a      	cmp	r2, r3
 800193c:	d80f      	bhi.n	800195e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	461a      	mov	r2, r3
 8001944:	4b45      	ldr	r3, [pc, #276]	; (8001a5c <HAL_DMA_Init+0x13c>)
 8001946:	4413      	add	r3, r2
 8001948:	4a45      	ldr	r2, [pc, #276]	; (8001a60 <HAL_DMA_Init+0x140>)
 800194a:	fba2 2303 	umull	r2, r3, r2, r3
 800194e:	091b      	lsrs	r3, r3, #4
 8001950:	009a      	lsls	r2, r3, #2
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a42      	ldr	r2, [pc, #264]	; (8001a64 <HAL_DMA_Init+0x144>)
 800195a:	641a      	str	r2, [r3, #64]	; 0x40
 800195c:	e00e      	b.n	800197c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	461a      	mov	r2, r3
 8001964:	4b40      	ldr	r3, [pc, #256]	; (8001a68 <HAL_DMA_Init+0x148>)
 8001966:	4413      	add	r3, r2
 8001968:	4a3d      	ldr	r2, [pc, #244]	; (8001a60 <HAL_DMA_Init+0x140>)
 800196a:	fba2 2303 	umull	r2, r3, r2, r3
 800196e:	091b      	lsrs	r3, r3, #4
 8001970:	009a      	lsls	r2, r3, #2
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a3c      	ldr	r2, [pc, #240]	; (8001a6c <HAL_DMA_Init+0x14c>)
 800197a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	2202      	movs	r2, #2
 8001980:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8001992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001996:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80019a0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	691b      	ldr	r3, [r3, #16]
 80019a6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	699b      	ldr	r3, [r3, #24]
 80019b2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6a1b      	ldr	r3, [r3, #32]
 80019be:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80019c0:	68fa      	ldr	r2, [r7, #12]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80019ce:	6878      	ldr	r0, [r7, #4]
 80019d0:	f000 f9be 	bl	8001d50 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80019dc:	d102      	bne.n	80019e4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2200      	movs	r2, #0
 80019e2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	685a      	ldr	r2, [r3, #4]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019ec:	b2d2      	uxtb	r2, r2
 80019ee:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019f8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d010      	beq.n	8001a24 <HAL_DMA_Init+0x104>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	d80c      	bhi.n	8001a24 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001a0a:	6878      	ldr	r0, [r7, #4]
 8001a0c:	f000 f9de 	bl	8001dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1c:	687a      	ldr	r2, [r7, #4]
 8001a1e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	e008      	b.n	8001a36 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2200      	movs	r2, #0
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2200      	movs	r2, #0
 8001a34:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001a4c:	2300      	movs	r3, #0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40020407 	.word	0x40020407
 8001a5c:	bffdfff8 	.word	0xbffdfff8
 8001a60:	cccccccd 	.word	0xcccccccd
 8001a64:	40020000 	.word	0x40020000
 8001a68:	bffdfbf8 	.word	0xbffdfbf8
 8001a6c:	40020400 	.word	0x40020400

08001a70 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001a82:	b2db      	uxtb	r3, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d005      	beq.n	8001a94 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2204      	movs	r2, #4
 8001a8c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001a8e:	2301      	movs	r3, #1
 8001a90:	73fb      	strb	r3, [r7, #15]
 8001a92:	e037      	b.n	8001b04 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 020e 	bic.w	r2, r2, #14
 8001aa2:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aa8:	681a      	ldr	r2, [r3, #0]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001aae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001ab2:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	2101      	movs	r1, #1
 8001ad2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ad6:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001adc:	687a      	ldr	r2, [r7, #4]
 8001ade:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ae0:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d00c      	beq.n	8001b04 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001af4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001af8:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001b02:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2201      	movs	r2, #1
 8001b08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3714      	adds	r7, #20
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr

08001b22 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b084      	sub	sp, #16
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001b34:	b2db      	uxtb	r3, r3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d00d      	beq.n	8001b56 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2201      	movs	r2, #1
 8001b44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001b50:	2301      	movs	r3, #1
 8001b52:	73fb      	strb	r3, [r7, #15]
 8001b54:	e047      	b.n	8001be6 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 020e 	bic.w	r2, r2, #14
 8001b64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0201 	bic.w	r2, r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b7a:	681a      	ldr	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b84:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8a:	f003 021f 	and.w	r2, r3, #31
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	2101      	movs	r1, #1
 8001b94:	fa01 f202 	lsl.w	r2, r1, r2
 8001b98:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b9e:	687a      	ldr	r2, [r7, #4]
 8001ba0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001ba2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d00c      	beq.n	8001bc6 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb0:	681a      	ldr	r2, [r3, #0]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001bba:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001bc4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	4798      	blx	r3
    }
  }
  return status;
 8001be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3710      	adds	r7, #16
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}

08001bf0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c0c:	f003 031f 	and.w	r3, r3, #31
 8001c10:	2204      	movs	r2, #4
 8001c12:	409a      	lsls	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	4013      	ands	r3, r2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d026      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x7a>
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d021      	beq.n	8001c6a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d107      	bne.n	8001c44 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f022 0204 	bic.w	r2, r2, #4
 8001c42:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c48:	f003 021f 	and.w	r2, r3, #31
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c50:	2104      	movs	r1, #4
 8001c52:	fa01 f202 	lsl.w	r2, r1, r2
 8001c56:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d071      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001c68:	e06c      	b.n	8001d44 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	f003 031f 	and.w	r3, r3, #31
 8001c72:	2202      	movs	r2, #2
 8001c74:	409a      	lsls	r2, r3
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4013      	ands	r3, r2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d02e      	beq.n	8001cdc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	f003 0302 	and.w	r3, r3, #2
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d029      	beq.n	8001cdc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 0320 	and.w	r3, r3, #32
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10b      	bne.n	8001cae <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f022 020a 	bic.w	r2, r2, #10
 8001ca4:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f003 021f 	and.w	r2, r3, #31
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cba:	2102      	movs	r1, #2
 8001cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d038      	beq.n	8001d44 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001cda:	e033      	b.n	8001d44 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	2208      	movs	r2, #8
 8001ce6:	409a      	lsls	r2, r3
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	4013      	ands	r3, r2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d02a      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d025      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 020e 	bic.w	r2, r2, #14
 8001d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	f003 021f 	and.w	r2, r3, #31
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	2101      	movs	r1, #1
 8001d18:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2201      	movs	r2, #1
 8001d22:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d004      	beq.n	8001d46 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d40:	6878      	ldr	r0, [r7, #4]
 8001d42:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001d44:	bf00      	nop
 8001d46:	bf00      	nop
}
 8001d48:	3710      	adds	r7, #16
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	bd80      	pop	{r7, pc}
	...

08001d50 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b087      	sub	sp, #28
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4b16      	ldr	r3, [pc, #88]	; (8001db8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d802      	bhi.n	8001d6a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8001d64:	4b15      	ldr	r3, [pc, #84]	; (8001dbc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8001d66:	617b      	str	r3, [r7, #20]
 8001d68:	e001      	b.n	8001d6e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8001d6c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8001d6e:	697b      	ldr	r3, [r7, #20]
 8001d70:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	b2db      	uxtb	r3, r3
 8001d78:	3b08      	subs	r3, #8
 8001d7a:	4a12      	ldr	r2, [pc, #72]	; (8001dc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8001d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d88:	089b      	lsrs	r3, r3, #2
 8001d8a:	009a      	lsls	r2, r3, #2
 8001d8c:	693b      	ldr	r3, [r7, #16]
 8001d8e:	4413      	add	r3, r2
 8001d90:	461a      	mov	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a0b      	ldr	r2, [pc, #44]	; (8001dc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8001d9a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f003 031f 	and.w	r3, r3, #31
 8001da2:	2201      	movs	r2, #1
 8001da4:	409a      	lsls	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001daa:	bf00      	nop
 8001dac:	371c      	adds	r7, #28
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr
 8001db6:	bf00      	nop
 8001db8:	40020407 	.word	0x40020407
 8001dbc:	40020800 	.word	0x40020800
 8001dc0:	40020820 	.word	0x40020820
 8001dc4:	cccccccd 	.word	0xcccccccd
 8001dc8:	40020880 	.word	0x40020880

08001dcc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4b0b      	ldr	r3, [pc, #44]	; (8001e0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	461a      	mov	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a08      	ldr	r2, [pc, #32]	; (8001e10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001dee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	3b01      	subs	r3, #1
 8001df4:	f003 031f 	and.w	r3, r3, #31
 8001df8:	2201      	movs	r2, #1
 8001dfa:	409a      	lsls	r2, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001e00:	bf00      	nop
 8001e02:	3714      	adds	r7, #20
 8001e04:	46bd      	mov	sp, r7
 8001e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0a:	4770      	bx	lr
 8001e0c:	1000823f 	.word	0x1000823f
 8001e10:	40020940 	.word	0x40020940

08001e14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b087      	sub	sp, #28
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001e22:	e15a      	b.n	80020da <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681a      	ldr	r2, [r3, #0]
 8001e28:	2101      	movs	r1, #1
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e30:	4013      	ands	r3, r2
 8001e32:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	f000 814c 	beq.w	80020d4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	f003 0303 	and.w	r3, r3, #3
 8001e44:	2b01      	cmp	r3, #1
 8001e46:	d005      	beq.n	8001e54 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001e50:	2b02      	cmp	r3, #2
 8001e52:	d130      	bne.n	8001eb6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	005b      	lsls	r3, r3, #1
 8001e5e:	2203      	movs	r2, #3
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	43db      	mvns	r3, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	68da      	ldr	r2, [r3, #12]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	693a      	ldr	r2, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	4013      	ands	r3, r2
 8001e98:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	091b      	lsrs	r3, r3, #4
 8001ea0:	f003 0201 	and.w	r2, r3, #1
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	693a      	ldr	r2, [r7, #16]
 8001eac:	4313      	orrs	r3, r2
 8001eae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f003 0303 	and.w	r3, r3, #3
 8001ebe:	2b03      	cmp	r3, #3
 8001ec0:	d017      	beq.n	8001ef2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	68db      	ldr	r3, [r3, #12]
 8001ec6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	005b      	lsls	r3, r3, #1
 8001ecc:	2203      	movs	r2, #3
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43db      	mvns	r3, r3
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	f003 0303 	and.w	r3, r3, #3
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d123      	bne.n	8001f46 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	08da      	lsrs	r2, r3, #3
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	3208      	adds	r2, #8
 8001f06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001f0c:	697b      	ldr	r3, [r7, #20]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	220f      	movs	r2, #15
 8001f16:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	691a      	ldr	r2, [r3, #16]
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	009b      	lsls	r3, r3, #2
 8001f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4313      	orrs	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	08da      	lsrs	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3208      	adds	r2, #8
 8001f40:	6939      	ldr	r1, [r7, #16]
 8001f42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	2203      	movs	r2, #3
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	43db      	mvns	r3, r3
 8001f58:	693a      	ldr	r2, [r7, #16]
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	685b      	ldr	r3, [r3, #4]
 8001f62:	f003 0203 	and.w	r2, r3, #3
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6e:	693a      	ldr	r2, [r7, #16]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f7a:	683b      	ldr	r3, [r7, #0]
 8001f7c:	685b      	ldr	r3, [r3, #4]
 8001f7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	f000 80a6 	beq.w	80020d4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f88:	4b5b      	ldr	r3, [pc, #364]	; (80020f8 <HAL_GPIO_Init+0x2e4>)
 8001f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8c:	4a5a      	ldr	r2, [pc, #360]	; (80020f8 <HAL_GPIO_Init+0x2e4>)
 8001f8e:	f043 0301 	orr.w	r3, r3, #1
 8001f92:	6613      	str	r3, [r2, #96]	; 0x60
 8001f94:	4b58      	ldr	r3, [pc, #352]	; (80020f8 <HAL_GPIO_Init+0x2e4>)
 8001f96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f98:	f003 0301 	and.w	r3, r3, #1
 8001f9c:	60bb      	str	r3, [r7, #8]
 8001f9e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fa0:	4a56      	ldr	r2, [pc, #344]	; (80020fc <HAL_GPIO_Init+0x2e8>)
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	089b      	lsrs	r3, r3, #2
 8001fa6:	3302      	adds	r3, #2
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001fae:	697b      	ldr	r3, [r7, #20]
 8001fb0:	f003 0303 	and.w	r3, r3, #3
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	220f      	movs	r2, #15
 8001fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fbc:	43db      	mvns	r3, r3
 8001fbe:	693a      	ldr	r2, [r7, #16]
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fca:	d01f      	beq.n	800200c <HAL_GPIO_Init+0x1f8>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4a4c      	ldr	r2, [pc, #304]	; (8002100 <HAL_GPIO_Init+0x2ec>)
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d019      	beq.n	8002008 <HAL_GPIO_Init+0x1f4>
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	4a4b      	ldr	r2, [pc, #300]	; (8002104 <HAL_GPIO_Init+0x2f0>)
 8001fd8:	4293      	cmp	r3, r2
 8001fda:	d013      	beq.n	8002004 <HAL_GPIO_Init+0x1f0>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a4a      	ldr	r2, [pc, #296]	; (8002108 <HAL_GPIO_Init+0x2f4>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d00d      	beq.n	8002000 <HAL_GPIO_Init+0x1ec>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a49      	ldr	r2, [pc, #292]	; (800210c <HAL_GPIO_Init+0x2f8>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d007      	beq.n	8001ffc <HAL_GPIO_Init+0x1e8>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a48      	ldr	r2, [pc, #288]	; (8002110 <HAL_GPIO_Init+0x2fc>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d101      	bne.n	8001ff8 <HAL_GPIO_Init+0x1e4>
 8001ff4:	2305      	movs	r3, #5
 8001ff6:	e00a      	b.n	800200e <HAL_GPIO_Init+0x1fa>
 8001ff8:	2306      	movs	r3, #6
 8001ffa:	e008      	b.n	800200e <HAL_GPIO_Init+0x1fa>
 8001ffc:	2304      	movs	r3, #4
 8001ffe:	e006      	b.n	800200e <HAL_GPIO_Init+0x1fa>
 8002000:	2303      	movs	r3, #3
 8002002:	e004      	b.n	800200e <HAL_GPIO_Init+0x1fa>
 8002004:	2302      	movs	r3, #2
 8002006:	e002      	b.n	800200e <HAL_GPIO_Init+0x1fa>
 8002008:	2301      	movs	r3, #1
 800200a:	e000      	b.n	800200e <HAL_GPIO_Init+0x1fa>
 800200c:	2300      	movs	r3, #0
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	f002 0203 	and.w	r2, r2, #3
 8002014:	0092      	lsls	r2, r2, #2
 8002016:	4093      	lsls	r3, r2
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800201e:	4937      	ldr	r1, [pc, #220]	; (80020fc <HAL_GPIO_Init+0x2e8>)
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	089b      	lsrs	r3, r3, #2
 8002024:	3302      	adds	r3, #2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800202c:	4b39      	ldr	r3, [pc, #228]	; (8002114 <HAL_GPIO_Init+0x300>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002044:	2b00      	cmp	r3, #0
 8002046:	d003      	beq.n	8002050 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002048:	693a      	ldr	r2, [r7, #16]
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	4313      	orrs	r3, r2
 800204e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002050:	4a30      	ldr	r2, [pc, #192]	; (8002114 <HAL_GPIO_Init+0x300>)
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002056:	4b2f      	ldr	r3, [pc, #188]	; (8002114 <HAL_GPIO_Init+0x300>)
 8002058:	68db      	ldr	r3, [r3, #12]
 800205a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	43db      	mvns	r3, r3
 8002060:	693a      	ldr	r2, [r7, #16]
 8002062:	4013      	ands	r3, r2
 8002064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	4313      	orrs	r3, r2
 8002078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800207a:	4a26      	ldr	r2, [pc, #152]	; (8002114 <HAL_GPIO_Init+0x300>)
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8002080:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_GPIO_Init+0x300>)
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	43db      	mvns	r3, r3
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	4013      	ands	r3, r2
 800208e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002098:	2b00      	cmp	r3, #0
 800209a:	d003      	beq.n	80020a4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800209c:	693a      	ldr	r2, [r7, #16]
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	4313      	orrs	r3, r2
 80020a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_GPIO_Init+0x300>)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80020aa:	4b1a      	ldr	r3, [pc, #104]	; (8002114 <HAL_GPIO_Init+0x300>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	43db      	mvns	r3, r3
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	4013      	ands	r3, r2
 80020b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d003      	beq.n	80020ce <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	4313      	orrs	r3, r2
 80020cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80020ce:	4a11      	ldr	r2, [pc, #68]	; (8002114 <HAL_GPIO_Init+0x300>)
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	3301      	adds	r3, #1
 80020d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	697b      	ldr	r3, [r7, #20]
 80020e0:	fa22 f303 	lsr.w	r3, r2, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f47f ae9d 	bne.w	8001e24 <HAL_GPIO_Init+0x10>
  }
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	371c      	adds	r7, #28
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40010000 	.word	0x40010000
 8002100:	48000400 	.word	0x48000400
 8002104:	48000800 	.word	0x48000800
 8002108:	48000c00 	.word	0x48000c00
 800210c:	48001000 	.word	0x48001000
 8002110:	48001400 	.word	0x48001400
 8002114:	40010400 	.word	0x40010400

08002118 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	460b      	mov	r3, r1
 8002122:	807b      	strh	r3, [r7, #2]
 8002124:	4613      	mov	r3, r2
 8002126:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002128:	787b      	ldrb	r3, [r7, #1]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800212e:	887a      	ldrh	r2, [r7, #2]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002134:	e002      	b.n	800213c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002136:	887a      	ldrh	r2, [r7, #2]
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002148:	b480      	push	{r7}
 800214a:	b085      	sub	sp, #20
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d141      	bne.n	80021da <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002156:	4b4b      	ldr	r3, [pc, #300]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d131      	bne.n	80021c8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002164:	4b47      	ldr	r3, [pc, #284]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800216a:	4a46      	ldr	r2, [pc, #280]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002170:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002174:	4b43      	ldr	r3, [pc, #268]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800217c:	4a41      	ldr	r2, [pc, #260]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002182:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002184:	4b40      	ldr	r3, [pc, #256]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2232      	movs	r2, #50	; 0x32
 800218a:	fb02 f303 	mul.w	r3, r2, r3
 800218e:	4a3f      	ldr	r2, [pc, #252]	; (800228c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002190:	fba2 2303 	umull	r2, r3, r2, r3
 8002194:	0c9b      	lsrs	r3, r3, #18
 8002196:	3301      	adds	r3, #1
 8002198:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800219a:	e002      	b.n	80021a2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	3b01      	subs	r3, #1
 80021a0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80021a2:	4b38      	ldr	r3, [pc, #224]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ae:	d102      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1f2      	bne.n	800219c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021b6:	4b33      	ldr	r3, [pc, #204]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d158      	bne.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e057      	b.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021c8:	4b2e      	ldr	r3, [pc, #184]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021ce:	4a2d      	ldr	r2, [pc, #180]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80021d4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80021d8:	e04d      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021e0:	d141      	bne.n	8002266 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80021e2:	4b28      	ldr	r3, [pc, #160]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021ee:	d131      	bne.n	8002254 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80021f0:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80021f6:	4a23      	ldr	r2, [pc, #140]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80021f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002208:	4a1e      	ldr	r2, [pc, #120]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800220a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800220e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002210:	4b1d      	ldr	r3, [pc, #116]	; (8002288 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2232      	movs	r2, #50	; 0x32
 8002216:	fb02 f303 	mul.w	r3, r2, r3
 800221a:	4a1c      	ldr	r2, [pc, #112]	; (800228c <HAL_PWREx_ControlVoltageScaling+0x144>)
 800221c:	fba2 2303 	umull	r2, r3, r2, r3
 8002220:	0c9b      	lsrs	r3, r3, #18
 8002222:	3301      	adds	r3, #1
 8002224:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002226:	e002      	b.n	800222e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	3b01      	subs	r3, #1
 800222c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002236:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800223a:	d102      	bne.n	8002242 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d1f2      	bne.n	8002228 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800224a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800224e:	d112      	bne.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	e011      	b.n	8002278 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800225a:	4a0a      	ldr	r2, [pc, #40]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800225c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002260:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002264:	e007      	b.n	8002276 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002266:	4b07      	ldr	r3, [pc, #28]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800226e:	4a05      	ldr	r2, [pc, #20]	; (8002284 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002270:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002274:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002276:	2300      	movs	r3, #0
}
 8002278:	4618      	mov	r0, r3
 800227a:	3714      	adds	r7, #20
 800227c:	46bd      	mov	sp, r7
 800227e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002282:	4770      	bx	lr
 8002284:	40007000 	.word	0x40007000
 8002288:	200000bc 	.word	0x200000bc
 800228c:	431bde83 	.word	0x431bde83

08002290 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002294:	4b05      	ldr	r3, [pc, #20]	; (80022ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	4a04      	ldr	r2, [pc, #16]	; (80022ac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800229a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800229e:	6093      	str	r3, [r2, #8]
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40007000 	.word	0x40007000

080022b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d101      	bne.n	80022c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e306      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d075      	beq.n	80023ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ce:	4b97      	ldr	r3, [pc, #604]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d8:	4b94      	ldr	r3, [pc, #592]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d102      	bne.n	80022ee <HAL_RCC_OscConfig+0x3e>
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_OscConfig+0x44>
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d10b      	bne.n	800230c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f4:	4b8d      	ldr	r3, [pc, #564]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d05b      	beq.n	80023b8 <HAL_RCC_OscConfig+0x108>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d157      	bne.n	80023b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e2e1      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002314:	d106      	bne.n	8002324 <HAL_RCC_OscConfig+0x74>
 8002316:	4b85      	ldr	r3, [pc, #532]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a84      	ldr	r2, [pc, #528]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	e01d      	b.n	8002360 <HAL_RCC_OscConfig+0xb0>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800232c:	d10c      	bne.n	8002348 <HAL_RCC_OscConfig+0x98>
 800232e:	4b7f      	ldr	r3, [pc, #508]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a7e      	ldr	r2, [pc, #504]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4b7c      	ldr	r3, [pc, #496]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7b      	ldr	r2, [pc, #492]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	e00b      	b.n	8002360 <HAL_RCC_OscConfig+0xb0>
 8002348:	4b78      	ldr	r3, [pc, #480]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a77      	ldr	r2, [pc, #476]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 800234e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002352:	6013      	str	r3, [r2, #0]
 8002354:	4b75      	ldr	r3, [pc, #468]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a74      	ldr	r2, [pc, #464]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 800235a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800235e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b00      	cmp	r3, #0
 8002366:	d013      	beq.n	8002390 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7ff f99c 	bl	80016a4 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002370:	f7ff f998 	bl	80016a4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b64      	cmp	r3, #100	; 0x64
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e2a6      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	4b6a      	ldr	r3, [pc, #424]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0xc0>
 800238e:	e014      	b.n	80023ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff f988 	bl	80016a4 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002398:	f7ff f984 	bl	80016a4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b64      	cmp	r3, #100	; 0x64
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e292      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023aa:	4b60      	ldr	r3, [pc, #384]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0xe8>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0302 	and.w	r3, r3, #2
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d075      	beq.n	80024b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80023c6:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 030c 	and.w	r3, r3, #12
 80023ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80023d0:	4b56      	ldr	r3, [pc, #344]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80023d2:	68db      	ldr	r3, [r3, #12]
 80023d4:	f003 0303 	and.w	r3, r3, #3
 80023d8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	d102      	bne.n	80023e6 <HAL_RCC_OscConfig+0x136>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d002      	beq.n	80023ec <HAL_RCC_OscConfig+0x13c>
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b04      	cmp	r3, #4
 80023ea:	d11f      	bne.n	800242c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023ec:	4b4f      	ldr	r3, [pc, #316]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_OscConfig+0x154>
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d101      	bne.n	8002404 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e265      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002404:	4b49      	ldr	r3, [pc, #292]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	061b      	lsls	r3, r3, #24
 8002412:	4946      	ldr	r1, [pc, #280]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002414:	4313      	orrs	r3, r2
 8002416:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002418:	4b45      	ldr	r3, [pc, #276]	; (8002530 <HAL_RCC_OscConfig+0x280>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff f8f5 	bl	800160c <HAL_InitTick>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d043      	beq.n	80024b0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e251      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68db      	ldr	r3, [r3, #12]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d023      	beq.n	800247c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002434:	4b3d      	ldr	r3, [pc, #244]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a3c      	ldr	r2, [pc, #240]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 800243a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7ff f930 	bl	80016a4 <HAL_GetTick>
 8002444:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7ff f92c 	bl	80016a4 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e23a      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800245a:	4b34      	ldr	r3, [pc, #208]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	061b      	lsls	r3, r3, #24
 8002474:	492d      	ldr	r1, [pc, #180]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002476:	4313      	orrs	r3, r2
 8002478:	604b      	str	r3, [r1, #4]
 800247a:	e01a      	b.n	80024b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a2a      	ldr	r2, [pc, #168]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002482:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002486:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7ff f90c 	bl	80016a4 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002490:	f7ff f908 	bl	80016a4 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e216      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a2:	4b22      	ldr	r3, [pc, #136]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x1e0>
 80024ae:	e000      	b.n	80024b2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d041      	beq.n	8002542 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d01c      	beq.n	8002500 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c6:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80024c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024cc:	4a17      	ldr	r2, [pc, #92]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d6:	f7ff f8e5 	bl	80016a4 <HAL_GetTick>
 80024da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024dc:	e008      	b.n	80024f0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024de:	f7ff f8e1 	bl	80016a4 <HAL_GetTick>
 80024e2:	4602      	mov	r2, r0
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	1ad3      	subs	r3, r2, r3
 80024e8:	2b02      	cmp	r3, #2
 80024ea:	d901      	bls.n	80024f0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80024ec:	2303      	movs	r3, #3
 80024ee:	e1ef      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024f0:	4b0e      	ldr	r3, [pc, #56]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 80024f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f6:	f003 0302 	and.w	r3, r3, #2
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d0ef      	beq.n	80024de <HAL_RCC_OscConfig+0x22e>
 80024fe:	e020      	b.n	8002542 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002502:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002506:	4a09      	ldr	r2, [pc, #36]	; (800252c <HAL_RCC_OscConfig+0x27c>)
 8002508:	f023 0301 	bic.w	r3, r3, #1
 800250c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002510:	f7ff f8c8 	bl	80016a4 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002516:	e00d      	b.n	8002534 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002518:	f7ff f8c4 	bl	80016a4 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d906      	bls.n	8002534 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e1d2      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002534:	4b8c      	ldr	r3, [pc, #560]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002536:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d1ea      	bne.n	8002518 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0304 	and.w	r3, r3, #4
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80a6 	beq.w	800269c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002550:	2300      	movs	r3, #0
 8002552:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002554:	4b84      	ldr	r3, [pc, #528]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002558:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_OscConfig+0x2b4>
 8002560:	2301      	movs	r3, #1
 8002562:	e000      	b.n	8002566 <HAL_RCC_OscConfig+0x2b6>
 8002564:	2300      	movs	r3, #0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d00d      	beq.n	8002586 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800256a:	4b7f      	ldr	r3, [pc, #508]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 800256c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800256e:	4a7e      	ldr	r2, [pc, #504]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002574:	6593      	str	r3, [r2, #88]	; 0x58
 8002576:	4b7c      	ldr	r3, [pc, #496]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800257a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800257e:	60fb      	str	r3, [r7, #12]
 8002580:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002582:	2301      	movs	r3, #1
 8002584:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002586:	4b79      	ldr	r3, [pc, #484]	; (800276c <HAL_RCC_OscConfig+0x4bc>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258e:	2b00      	cmp	r3, #0
 8002590:	d118      	bne.n	80025c4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002592:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x4bc>)
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a75      	ldr	r2, [pc, #468]	; (800276c <HAL_RCC_OscConfig+0x4bc>)
 8002598:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800259c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259e:	f7ff f881 	bl	80016a4 <HAL_GetTick>
 80025a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025a4:	e008      	b.n	80025b8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a6:	f7ff f87d 	bl	80016a4 <HAL_GetTick>
 80025aa:	4602      	mov	r2, r0
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	2b02      	cmp	r3, #2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e18b      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025b8:	4b6c      	ldr	r3, [pc, #432]	; (800276c <HAL_RCC_OscConfig+0x4bc>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d0f0      	beq.n	80025a6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d108      	bne.n	80025de <HAL_RCC_OscConfig+0x32e>
 80025cc:	4b66      	ldr	r3, [pc, #408]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a65      	ldr	r2, [pc, #404]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80025d4:	f043 0301 	orr.w	r3, r3, #1
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025dc:	e024      	b.n	8002628 <HAL_RCC_OscConfig+0x378>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	689b      	ldr	r3, [r3, #8]
 80025e2:	2b05      	cmp	r3, #5
 80025e4:	d110      	bne.n	8002608 <HAL_RCC_OscConfig+0x358>
 80025e6:	4b60      	ldr	r3, [pc, #384]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80025ee:	f043 0304 	orr.w	r3, r3, #4
 80025f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025f6:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80025f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025fc:	4a5a      	ldr	r2, [pc, #360]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80025fe:	f043 0301 	orr.w	r3, r3, #1
 8002602:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002606:	e00f      	b.n	8002628 <HAL_RCC_OscConfig+0x378>
 8002608:	4b57      	ldr	r3, [pc, #348]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	4a56      	ldr	r2, [pc, #344]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002610:	f023 0301 	bic.w	r3, r3, #1
 8002614:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 800261a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800261e:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002620:	f023 0304 	bic.w	r3, r3, #4
 8002624:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d016      	beq.n	800265e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002630:	f7ff f838 	bl	80016a4 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002636:	e00a      	b.n	800264e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002638:	f7ff f834 	bl	80016a4 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	f241 3288 	movw	r2, #5000	; 0x1388
 8002646:	4293      	cmp	r3, r2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e140      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800264e:	4b46      	ldr	r3, [pc, #280]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002650:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002654:	f003 0302 	and.w	r3, r3, #2
 8002658:	2b00      	cmp	r3, #0
 800265a:	d0ed      	beq.n	8002638 <HAL_RCC_OscConfig+0x388>
 800265c:	e015      	b.n	800268a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800265e:	f7ff f821 	bl	80016a4 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002664:	e00a      	b.n	800267c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002666:	f7ff f81d 	bl	80016a4 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	f241 3288 	movw	r2, #5000	; 0x1388
 8002674:	4293      	cmp	r3, r2
 8002676:	d901      	bls.n	800267c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002678:	2303      	movs	r3, #3
 800267a:	e129      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800267c:	4b3a      	ldr	r3, [pc, #232]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 800267e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d1ed      	bne.n	8002666 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800268a:	7ffb      	ldrb	r3, [r7, #31]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d105      	bne.n	800269c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002690:	4b35      	ldr	r3, [pc, #212]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002694:	4a34      	ldr	r2, [pc, #208]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800269a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f003 0320 	and.w	r3, r3, #32
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d03c      	beq.n	8002722 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	699b      	ldr	r3, [r3, #24]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01c      	beq.n	80026ea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80026b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026b6:	4a2c      	ldr	r2, [pc, #176]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026c0:	f7fe fff0 	bl	80016a4 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026c8:	f7fe ffec 	bl	80016a4 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e0fa      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80026dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d0ef      	beq.n	80026c8 <HAL_RCC_OscConfig+0x418>
 80026e8:	e01b      	b.n	8002722 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026ea:	4b1f      	ldr	r3, [pc, #124]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80026ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026f0:	4a1d      	ldr	r2, [pc, #116]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 80026f2:	f023 0301 	bic.w	r3, r3, #1
 80026f6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026fa:	f7fe ffd3 	bl	80016a4 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002702:	f7fe ffcf 	bl	80016a4 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0dd      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002714:	4b14      	ldr	r3, [pc, #80]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002716:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1ef      	bne.n	8002702 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	2b00      	cmp	r3, #0
 8002728:	f000 80d1 	beq.w	80028ce <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800272c:	4b0e      	ldr	r3, [pc, #56]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	f003 030c 	and.w	r3, r3, #12
 8002734:	2b0c      	cmp	r3, #12
 8002736:	f000 808b 	beq.w	8002850 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	2b02      	cmp	r3, #2
 8002740:	d15e      	bne.n	8002800 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a08      	ldr	r2, [pc, #32]	; (8002768 <HAL_RCC_OscConfig+0x4b8>)
 8002748:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800274c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800274e:	f7fe ffa9 	bl	80016a4 <HAL_GetTick>
 8002752:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002754:	e00c      	b.n	8002770 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002756:	f7fe ffa5 	bl	80016a4 <HAL_GetTick>
 800275a:	4602      	mov	r2, r0
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	1ad3      	subs	r3, r2, r3
 8002760:	2b02      	cmp	r3, #2
 8002762:	d905      	bls.n	8002770 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002764:	2303      	movs	r3, #3
 8002766:	e0b3      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
 8002768:	40021000 	.word	0x40021000
 800276c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002770:	4b59      	ldr	r3, [pc, #356]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d1ec      	bne.n	8002756 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800277c:	4b56      	ldr	r3, [pc, #344]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	4b56      	ldr	r3, [pc, #344]	; (80028dc <HAL_RCC_OscConfig+0x62c>)
 8002782:	4013      	ands	r3, r2
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	6a11      	ldr	r1, [r2, #32]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800278c:	3a01      	subs	r2, #1
 800278e:	0112      	lsls	r2, r2, #4
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002796:	0212      	lsls	r2, r2, #8
 8002798:	4311      	orrs	r1, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800279e:	0852      	lsrs	r2, r2, #1
 80027a0:	3a01      	subs	r2, #1
 80027a2:	0552      	lsls	r2, r2, #21
 80027a4:	4311      	orrs	r1, r2
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80027aa:	0852      	lsrs	r2, r2, #1
 80027ac:	3a01      	subs	r2, #1
 80027ae:	0652      	lsls	r2, r2, #25
 80027b0:	4311      	orrs	r1, r2
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80027b6:	06d2      	lsls	r2, r2, #27
 80027b8:	430a      	orrs	r2, r1
 80027ba:	4947      	ldr	r1, [pc, #284]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027c0:	4b45      	ldr	r3, [pc, #276]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a44      	ldr	r2, [pc, #272]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 80027c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027cc:	4b42      	ldr	r3, [pc, #264]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	4a41      	ldr	r2, [pc, #260]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 80027d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027d8:	f7fe ff64 	bl	80016a4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027e0:	f7fe ff60 	bl	80016a4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b02      	cmp	r3, #2
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e06e      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027f2:	4b39      	ldr	r3, [pc, #228]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d0f0      	beq.n	80027e0 <HAL_RCC_OscConfig+0x530>
 80027fe:	e066      	b.n	80028ce <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002800:	4b35      	ldr	r3, [pc, #212]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a34      	ldr	r2, [pc, #208]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 8002806:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800280a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800280c:	4b32      	ldr	r3, [pc, #200]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	4a31      	ldr	r2, [pc, #196]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 8002812:	f023 0303 	bic.w	r3, r3, #3
 8002816:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002818:	4b2f      	ldr	r3, [pc, #188]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4a2e      	ldr	r2, [pc, #184]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 800281e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002822:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002826:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002828:	f7fe ff3c 	bl	80016a4 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002830:	f7fe ff38 	bl	80016a4 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e046      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002842:	4b25      	ldr	r3, [pc, #148]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d1f0      	bne.n	8002830 <HAL_RCC_OscConfig+0x580>
 800284e:	e03e      	b.n	80028ce <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	69db      	ldr	r3, [r3, #28]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d101      	bne.n	800285c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e039      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800285c:	4b1e      	ldr	r3, [pc, #120]	; (80028d8 <HAL_RCC_OscConfig+0x628>)
 800285e:	68db      	ldr	r3, [r3, #12]
 8002860:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	f003 0203 	and.w	r2, r3, #3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	429a      	cmp	r2, r3
 800286e:	d12c      	bne.n	80028ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	3b01      	subs	r3, #1
 800287c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800287e:	429a      	cmp	r2, r3
 8002880:	d123      	bne.n	80028ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800288c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800288e:	429a      	cmp	r2, r3
 8002890:	d11b      	bne.n	80028ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800289c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d113      	bne.n	80028ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ac:	085b      	lsrs	r3, r3, #1
 80028ae:	3b01      	subs	r3, #1
 80028b0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d109      	bne.n	80028ca <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028c0:	085b      	lsrs	r3, r3, #1
 80028c2:	3b01      	subs	r3, #1
 80028c4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d001      	beq.n	80028ce <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e000      	b.n	80028d0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000
 80028dc:	019f800c 	.word	0x019f800c

080028e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b086      	sub	sp, #24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d101      	bne.n	80028f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	e11e      	b.n	8002b36 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028f8:	4b91      	ldr	r3, [pc, #580]	; (8002b40 <HAL_RCC_ClockConfig+0x260>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	683a      	ldr	r2, [r7, #0]
 8002902:	429a      	cmp	r2, r3
 8002904:	d910      	bls.n	8002928 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002906:	4b8e      	ldr	r3, [pc, #568]	; (8002b40 <HAL_RCC_ClockConfig+0x260>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f023 020f 	bic.w	r2, r3, #15
 800290e:	498c      	ldr	r1, [pc, #560]	; (8002b40 <HAL_RCC_ClockConfig+0x260>)
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	4313      	orrs	r3, r2
 8002914:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b8a      	ldr	r3, [pc, #552]	; (8002b40 <HAL_RCC_ClockConfig+0x260>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e106      	b.n	8002b36 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0301 	and.w	r3, r3, #1
 8002930:	2b00      	cmp	r3, #0
 8002932:	d073      	beq.n	8002a1c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	2b03      	cmp	r3, #3
 800293a:	d129      	bne.n	8002990 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800293c:	4b81      	ldr	r3, [pc, #516]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0f4      	b.n	8002b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800294c:	f000 f99e 	bl	8002c8c <RCC_GetSysClockFreqFromPLLSource>
 8002950:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	4a7c      	ldr	r2, [pc, #496]	; (8002b48 <HAL_RCC_ClockConfig+0x268>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d93f      	bls.n	80029da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800295a:	4b7a      	ldr	r3, [pc, #488]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 800295c:	689b      	ldr	r3, [r3, #8]
 800295e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d009      	beq.n	800297a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800296e:	2b00      	cmp	r3, #0
 8002970:	d033      	beq.n	80029da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002976:	2b00      	cmp	r3, #0
 8002978:	d12f      	bne.n	80029da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800297a:	4b72      	ldr	r3, [pc, #456]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002982:	4a70      	ldr	r2, [pc, #448]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002984:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002988:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800298a:	2380      	movs	r3, #128	; 0x80
 800298c:	617b      	str	r3, [r7, #20]
 800298e:	e024      	b.n	80029da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	2b02      	cmp	r3, #2
 8002996:	d107      	bne.n	80029a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002998:	4b6a      	ldr	r3, [pc, #424]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d109      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e0c6      	b.n	8002b36 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029a8:	4b66      	ldr	r3, [pc, #408]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e0be      	b.n	8002b36 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80029b8:	f000 f8ce 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	4a61      	ldr	r2, [pc, #388]	; (8002b48 <HAL_RCC_ClockConfig+0x268>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d909      	bls.n	80029da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80029c6:	4b5f      	ldr	r3, [pc, #380]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ce:	4a5d      	ldr	r2, [pc, #372]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 80029d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80029d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029da:	4b5a      	ldr	r3, [pc, #360]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f023 0203 	bic.w	r2, r3, #3
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	4957      	ldr	r1, [pc, #348]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ec:	f7fe fe5a 	bl	80016a4 <HAL_GetTick>
 80029f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f2:	e00a      	b.n	8002a0a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029f4:	f7fe fe56 	bl	80016a4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d901      	bls.n	8002a0a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002a06:	2303      	movs	r3, #3
 8002a08:	e095      	b.n	8002b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a0a:	4b4e      	ldr	r3, [pc, #312]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	f003 020c 	and.w	r2, r3, #12
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d1eb      	bne.n	80029f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0302 	and.w	r3, r3, #2
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d023      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 0304 	and.w	r3, r3, #4
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d005      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a34:	4b43      	ldr	r3, [pc, #268]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	4a42      	ldr	r2, [pc, #264]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a3e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d007      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002a4c:	4b3d      	ldr	r3, [pc, #244]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a4e:	689b      	ldr	r3, [r3, #8]
 8002a50:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002a54:	4a3b      	ldr	r2, [pc, #236]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a56:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002a5a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a5c:	4b39      	ldr	r3, [pc, #228]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	4936      	ldr	r1, [pc, #216]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
 8002a6e:	e008      	b.n	8002a82 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	2b80      	cmp	r3, #128	; 0x80
 8002a74:	d105      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002a76:	4b33      	ldr	r3, [pc, #204]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	4a32      	ldr	r2, [pc, #200]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002a7c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a80:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a82:	4b2f      	ldr	r3, [pc, #188]	; (8002b40 <HAL_RCC_ClockConfig+0x260>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 030f 	and.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d21d      	bcs.n	8002acc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a90:	4b2b      	ldr	r3, [pc, #172]	; (8002b40 <HAL_RCC_ClockConfig+0x260>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f023 020f 	bic.w	r2, r3, #15
 8002a98:	4929      	ldr	r1, [pc, #164]	; (8002b40 <HAL_RCC_ClockConfig+0x260>)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002aa0:	f7fe fe00 	bl	80016a4 <HAL_GetTick>
 8002aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aa6:	e00a      	b.n	8002abe <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aa8:	f7fe fdfc 	bl	80016a4 <HAL_GetTick>
 8002aac:	4602      	mov	r2, r0
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	1ad3      	subs	r3, r2, r3
 8002ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d901      	bls.n	8002abe <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002aba:	2303      	movs	r3, #3
 8002abc:	e03b      	b.n	8002b36 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002abe:	4b20      	ldr	r3, [pc, #128]	; (8002b40 <HAL_RCC_ClockConfig+0x260>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 030f 	and.w	r3, r3, #15
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d1ed      	bne.n	8002aa8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f003 0304 	and.w	r3, r3, #4
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d008      	beq.n	8002aea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ad8:	4b1a      	ldr	r3, [pc, #104]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	68db      	ldr	r3, [r3, #12]
 8002ae4:	4917      	ldr	r1, [pc, #92]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0308 	and.w	r3, r3, #8
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d009      	beq.n	8002b0a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002af6:	4b13      	ldr	r3, [pc, #76]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	691b      	ldr	r3, [r3, #16]
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	490f      	ldr	r1, [pc, #60]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b0a:	f000 f825 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	4b0c      	ldr	r3, [pc, #48]	; (8002b44 <HAL_RCC_ClockConfig+0x264>)
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	091b      	lsrs	r3, r3, #4
 8002b16:	f003 030f 	and.w	r3, r3, #15
 8002b1a:	490c      	ldr	r1, [pc, #48]	; (8002b4c <HAL_RCC_ClockConfig+0x26c>)
 8002b1c:	5ccb      	ldrb	r3, [r1, r3]
 8002b1e:	f003 031f 	and.w	r3, r3, #31
 8002b22:	fa22 f303 	lsr.w	r3, r2, r3
 8002b26:	4a0a      	ldr	r2, [pc, #40]	; (8002b50 <HAL_RCC_ClockConfig+0x270>)
 8002b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002b2a:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <HAL_RCC_ClockConfig+0x274>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fd6c 	bl	800160c <HAL_InitTick>
 8002b34:	4603      	mov	r3, r0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3718      	adds	r7, #24
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40022000 	.word	0x40022000
 8002b44:	40021000 	.word	0x40021000
 8002b48:	04c4b400 	.word	0x04c4b400
 8002b4c:	08007bd8 	.word	0x08007bd8
 8002b50:	200000bc 	.word	0x200000bc
 8002b54:	200000c0 	.word	0x200000c0

08002b58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b087      	sub	sp, #28
 8002b5c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b5e:	4b2c      	ldr	r3, [pc, #176]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b04      	cmp	r3, #4
 8002b68:	d102      	bne.n	8002b70 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002b6c:	613b      	str	r3, [r7, #16]
 8002b6e:	e047      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b70:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	f003 030c 	and.w	r3, r3, #12
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d102      	bne.n	8002b82 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b7c:	4b26      	ldr	r3, [pc, #152]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	e03e      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	f003 030c 	and.w	r3, r3, #12
 8002b8a:	2b0c      	cmp	r3, #12
 8002b8c:	d136      	bne.n	8002bfc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b8e:	4b20      	ldr	r3, [pc, #128]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b90:	68db      	ldr	r3, [r3, #12]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002b98:	4b1d      	ldr	r3, [pc, #116]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	091b      	lsrs	r3, r3, #4
 8002b9e:	f003 030f 	and.w	r3, r3, #15
 8002ba2:	3301      	adds	r3, #1
 8002ba4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d10c      	bne.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bac:	4a1a      	ldr	r2, [pc, #104]	; (8002c18 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	4a16      	ldr	r2, [pc, #88]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bb6:	68d2      	ldr	r2, [r2, #12]
 8002bb8:	0a12      	lsrs	r2, r2, #8
 8002bba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	617b      	str	r3, [r7, #20]
      break;
 8002bc4:	e00c      	b.n	8002be0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bc6:	4a13      	ldr	r2, [pc, #76]	; (8002c14 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bce:	4a10      	ldr	r2, [pc, #64]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002bd0:	68d2      	ldr	r2, [r2, #12]
 8002bd2:	0a12      	lsrs	r2, r2, #8
 8002bd4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bd8:	fb02 f303 	mul.w	r3, r2, r3
 8002bdc:	617b      	str	r3, [r7, #20]
      break;
 8002bde:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002be0:	4b0b      	ldr	r3, [pc, #44]	; (8002c10 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	0e5b      	lsrs	r3, r3, #25
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf8:	613b      	str	r3, [r7, #16]
 8002bfa:	e001      	b.n	8002c00 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002c00:	693b      	ldr	r3, [r7, #16]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	371c      	adds	r7, #28
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr
 8002c0e:	bf00      	nop
 8002c10:	40021000 	.word	0x40021000
 8002c14:	00f42400 	.word	0x00f42400
 8002c18:	016e3600 	.word	0x016e3600

08002c1c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c20:	4b03      	ldr	r3, [pc, #12]	; (8002c30 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c22:	681b      	ldr	r3, [r3, #0]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr
 8002c2e:	bf00      	nop
 8002c30:	200000bc 	.word	0x200000bc

08002c34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002c38:	f7ff fff0 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	4b06      	ldr	r3, [pc, #24]	; (8002c58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	0a1b      	lsrs	r3, r3, #8
 8002c44:	f003 0307 	and.w	r3, r3, #7
 8002c48:	4904      	ldr	r1, [pc, #16]	; (8002c5c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c4a:	5ccb      	ldrb	r3, [r1, r3]
 8002c4c:	f003 031f 	and.w	r3, r3, #31
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40021000 	.word	0x40021000
 8002c5c:	08007be8 	.word	0x08007be8

08002c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002c64:	f7ff ffda 	bl	8002c1c <HAL_RCC_GetHCLKFreq>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	4b06      	ldr	r3, [pc, #24]	; (8002c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	0adb      	lsrs	r3, r3, #11
 8002c70:	f003 0307 	and.w	r3, r3, #7
 8002c74:	4904      	ldr	r1, [pc, #16]	; (8002c88 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c76:	5ccb      	ldrb	r3, [r1, r3]
 8002c78:	f003 031f 	and.w	r3, r3, #31
 8002c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	40021000 	.word	0x40021000
 8002c88:	08007be8 	.word	0x08007be8

08002c8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002c8c:	b480      	push	{r7}
 8002c8e:	b087      	sub	sp, #28
 8002c90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c92:	4b1e      	ldr	r3, [pc, #120]	; (8002d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0303 	and.w	r3, r3, #3
 8002c9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c9c:	4b1b      	ldr	r3, [pc, #108]	; (8002d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002c9e:	68db      	ldr	r3, [r3, #12]
 8002ca0:	091b      	lsrs	r3, r3, #4
 8002ca2:	f003 030f 	and.w	r3, r3, #15
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	2b03      	cmp	r3, #3
 8002cae:	d10c      	bne.n	8002cca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cb0:	4a17      	ldr	r2, [pc, #92]	; (8002d10 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cb8:	4a14      	ldr	r2, [pc, #80]	; (8002d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cba:	68d2      	ldr	r2, [r2, #12]
 8002cbc:	0a12      	lsrs	r2, r2, #8
 8002cbe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cc2:	fb02 f303 	mul.w	r3, r2, r3
 8002cc6:	617b      	str	r3, [r7, #20]
    break;
 8002cc8:	e00c      	b.n	8002ce4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002cca:	4a12      	ldr	r2, [pc, #72]	; (8002d14 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	4a0e      	ldr	r2, [pc, #56]	; (8002d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002cd4:	68d2      	ldr	r2, [r2, #12]
 8002cd6:	0a12      	lsrs	r2, r2, #8
 8002cd8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002cdc:	fb02 f303 	mul.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
    break;
 8002ce2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ce4:	4b09      	ldr	r3, [pc, #36]	; (8002d0c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	0e5b      	lsrs	r3, r3, #25
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	3301      	adds	r3, #1
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002cfe:	687b      	ldr	r3, [r7, #4]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	371c      	adds	r7, #28
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr
 8002d0c:	40021000 	.word	0x40021000
 8002d10:	016e3600 	.word	0x016e3600
 8002d14:	00f42400 	.word	0x00f42400

08002d18 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002d20:	2300      	movs	r3, #0
 8002d22:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d24:	2300      	movs	r3, #0
 8002d26:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 8098 	beq.w	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d36:	2300      	movs	r3, #0
 8002d38:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3a:	4b43      	ldr	r3, [pc, #268]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d10d      	bne.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d46:	4b40      	ldr	r3, [pc, #256]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d4a:	4a3f      	ldr	r2, [pc, #252]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d50:	6593      	str	r3, [r2, #88]	; 0x58
 8002d52:	4b3d      	ldr	r3, [pc, #244]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d5a:	60bb      	str	r3, [r7, #8]
 8002d5c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002d62:	4b3a      	ldr	r3, [pc, #232]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a39      	ldr	r2, [pc, #228]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002d6e:	f7fe fc99 	bl	80016a4 <HAL_GetTick>
 8002d72:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d74:	e009      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d76:	f7fe fc95 	bl	80016a4 <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	2b02      	cmp	r3, #2
 8002d82:	d902      	bls.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002d84:	2303      	movs	r3, #3
 8002d86:	74fb      	strb	r3, [r7, #19]
        break;
 8002d88:	e005      	b.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002d8a:	4b30      	ldr	r3, [pc, #192]	; (8002e4c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d0ef      	beq.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002d96:	7cfb      	ldrb	r3, [r7, #19]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d159      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002d9c:	4b2a      	ldr	r3, [pc, #168]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d01e      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	697a      	ldr	r2, [r7, #20]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d019      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002db8:	4b23      	ldr	r3, [pc, #140]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002dc4:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	4a1f      	ldr	r2, [pc, #124]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002dd4:	4b1c      	ldr	r3, [pc, #112]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dda:	4a1b      	ldr	r2, [pc, #108]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ddc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002de4:	4a18      	ldr	r2, [pc, #96]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d016      	beq.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002df6:	f7fe fc55 	bl	80016a4 <HAL_GetTick>
 8002dfa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002dfc:	e00b      	b.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dfe:	f7fe fc51 	bl	80016a4 <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d902      	bls.n	8002e16 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002e10:	2303      	movs	r3, #3
 8002e12:	74fb      	strb	r3, [r7, #19]
            break;
 8002e14:	e006      	b.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e16:	4b0c      	ldr	r3, [pc, #48]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0ec      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002e24:	7cfb      	ldrb	r3, [r7, #19]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10b      	bne.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e2a:	4b07      	ldr	r3, [pc, #28]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e38:	4903      	ldr	r1, [pc, #12]	; (8002e48 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e40:	e008      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	74bb      	strb	r3, [r7, #18]
 8002e46:	e005      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002e48:	40021000 	.word	0x40021000
 8002e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e50:	7cfb      	ldrb	r3, [r7, #19]
 8002e52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002e54:	7c7b      	ldrb	r3, [r7, #17]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d105      	bne.n	8002e66 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5a:	4ba6      	ldr	r3, [pc, #664]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e5e:	4aa5      	ldr	r2, [pc, #660]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e64:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0301 	and.w	r3, r3, #1
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d00a      	beq.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e72:	4ba0      	ldr	r3, [pc, #640]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e78:	f023 0203 	bic.w	r2, r3, #3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	499c      	ldr	r1, [pc, #624]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0302 	and.w	r3, r3, #2
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d00a      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e94:	4b97      	ldr	r3, [pc, #604]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f023 020c 	bic.w	r2, r3, #12
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	689b      	ldr	r3, [r3, #8]
 8002ea2:	4994      	ldr	r1, [pc, #592]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0304 	and.w	r3, r3, #4
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d00a      	beq.n	8002ecc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002eb6:	4b8f      	ldr	r3, [pc, #572]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ebc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68db      	ldr	r3, [r3, #12]
 8002ec4:	498b      	ldr	r1, [pc, #556]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0308 	and.w	r3, r3, #8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002ed8:	4b86      	ldr	r3, [pc, #536]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	4983      	ldr	r1, [pc, #524]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0320 	and.w	r3, r3, #32
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00a      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002efa:	4b7e      	ldr	r3, [pc, #504]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002efc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f00:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	695b      	ldr	r3, [r3, #20]
 8002f08:	497a      	ldr	r1, [pc, #488]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00a      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f1c:	4b75      	ldr	r3, [pc, #468]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	4972      	ldr	r1, [pc, #456]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f3e:	4b6d      	ldr	r3, [pc, #436]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	69db      	ldr	r3, [r3, #28]
 8002f4c:	4969      	ldr	r1, [pc, #420]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d00a      	beq.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f60:	4b64      	ldr	r3, [pc, #400]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f66:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6a1b      	ldr	r3, [r3, #32]
 8002f6e:	4961      	ldr	r1, [pc, #388]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d00a      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f82:	4b5c      	ldr	r3, [pc, #368]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f88:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f90:	4958      	ldr	r1, [pc, #352]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d015      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002fa4:	4b53      	ldr	r3, [pc, #332]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002faa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb2:	4950      	ldr	r1, [pc, #320]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002fc2:	d105      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fc4:	4b4b      	ldr	r3, [pc, #300]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	68db      	ldr	r3, [r3, #12]
 8002fc8:	4a4a      	ldr	r2, [pc, #296]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fce:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d015      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002fdc:	4b45      	ldr	r3, [pc, #276]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fea:	4942      	ldr	r1, [pc, #264]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ffa:	d105      	bne.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ffc:	4b3d      	ldr	r3, [pc, #244]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ffe:	68db      	ldr	r3, [r3, #12]
 8003000:	4a3c      	ldr	r2, [pc, #240]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003002:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003006:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d015      	beq.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003014:	4b37      	ldr	r3, [pc, #220]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800301a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	4934      	ldr	r1, [pc, #208]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003032:	d105      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003034:	4b2f      	ldr	r3, [pc, #188]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	4a2e      	ldr	r2, [pc, #184]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800303a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800303e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d015      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800304c:	4b29      	ldr	r3, [pc, #164]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800304e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003052:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305a:	4926      	ldr	r1, [pc, #152]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800305c:	4313      	orrs	r3, r2
 800305e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003066:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800306a:	d105      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800306c:	4b21      	ldr	r3, [pc, #132]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800306e:	68db      	ldr	r3, [r3, #12]
 8003070:	4a20      	ldr	r2, [pc, #128]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003072:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003076:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d015      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003084:	4b1b      	ldr	r3, [pc, #108]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003086:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003092:	4918      	ldr	r1, [pc, #96]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003094:	4313      	orrs	r3, r2
 8003096:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030a2:	d105      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030a4:	4b13      	ldr	r3, [pc, #76]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	4a12      	ldr	r2, [pc, #72]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d015      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80030bc:	4b0d      	ldr	r3, [pc, #52]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	490a      	ldr	r1, [pc, #40]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80030da:	d105      	bne.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80030dc:	4b05      	ldr	r3, [pc, #20]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030de:	68db      	ldr	r3, [r3, #12]
 80030e0:	4a04      	ldr	r2, [pc, #16]	; (80030f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80030e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80030e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ea:	4618      	mov	r0, r3
 80030ec:	3718      	adds	r7, #24
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}
 80030f2:	bf00      	nop
 80030f4:	40021000 	.word	0x40021000

080030f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d101      	bne.n	800310a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e049      	b.n	800319e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d106      	bne.n	8003124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fe f904 	bl	800132c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2202      	movs	r2, #2
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681a      	ldr	r2, [r3, #0]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3304      	adds	r3, #4
 8003134:	4619      	mov	r1, r3
 8003136:	4610      	mov	r0, r2
 8003138:	f000 fba4 	bl	8003884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2201      	movs	r2, #1
 8003168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2201      	movs	r2, #1
 8003170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2201      	movs	r2, #1
 8003178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2201      	movs	r2, #1
 8003180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2201      	movs	r2, #1
 8003190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	2201      	movs	r2, #1
 8003198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800319c:	2300      	movs	r3, #0
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3708      	adds	r7, #8
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}

080031a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031a6:	b580      	push	{r7, lr}
 80031a8:	b082      	sub	sp, #8
 80031aa:	af00      	add	r7, sp, #0
 80031ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d101      	bne.n	80031b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e049      	b.n	800324c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031be:	b2db      	uxtb	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f000 f841 	bl	8003254 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2202      	movs	r2, #2
 80031d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681a      	ldr	r2, [r3, #0]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	3304      	adds	r3, #4
 80031e2:	4619      	mov	r1, r3
 80031e4:	4610      	mov	r0, r2
 80031e6:	f000 fb4d 	bl	8003884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2201      	movs	r2, #1
 8003226:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2201      	movs	r2, #1
 800322e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2201      	movs	r2, #1
 8003246:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324a:	2300      	movs	r3, #0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800325c:	bf00      	nop
 800325e:	370c      	adds	r7, #12
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b084      	sub	sp, #16
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d109      	bne.n	800328c <HAL_TIM_PWM_Start+0x24>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800327e:	b2db      	uxtb	r3, r3
 8003280:	2b01      	cmp	r3, #1
 8003282:	bf14      	ite	ne
 8003284:	2301      	movne	r3, #1
 8003286:	2300      	moveq	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	e03c      	b.n	8003306 <HAL_TIM_PWM_Start+0x9e>
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d109      	bne.n	80032a6 <HAL_TIM_PWM_Start+0x3e>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003298:	b2db      	uxtb	r3, r3
 800329a:	2b01      	cmp	r3, #1
 800329c:	bf14      	ite	ne
 800329e:	2301      	movne	r3, #1
 80032a0:	2300      	moveq	r3, #0
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	e02f      	b.n	8003306 <HAL_TIM_PWM_Start+0x9e>
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	d109      	bne.n	80032c0 <HAL_TIM_PWM_Start+0x58>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	bf14      	ite	ne
 80032b8:	2301      	movne	r3, #1
 80032ba:	2300      	moveq	r3, #0
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e022      	b.n	8003306 <HAL_TIM_PWM_Start+0x9e>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b0c      	cmp	r3, #12
 80032c4:	d109      	bne.n	80032da <HAL_TIM_PWM_Start+0x72>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	bf14      	ite	ne
 80032d2:	2301      	movne	r3, #1
 80032d4:	2300      	moveq	r3, #0
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	e015      	b.n	8003306 <HAL_TIM_PWM_Start+0x9e>
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	2b10      	cmp	r3, #16
 80032de:	d109      	bne.n	80032f4 <HAL_TIM_PWM_Start+0x8c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	bf14      	ite	ne
 80032ec:	2301      	movne	r3, #1
 80032ee:	2300      	moveq	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	e008      	b.n	8003306 <HAL_TIM_PWM_Start+0x9e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032fa:	b2db      	uxtb	r3, r3
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	bf14      	ite	ne
 8003300:	2301      	movne	r3, #1
 8003302:	2300      	moveq	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e097      	b.n	800343e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d104      	bne.n	800331e <HAL_TIM_PWM_Start+0xb6>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800331c:	e023      	b.n	8003366 <HAL_TIM_PWM_Start+0xfe>
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	2b04      	cmp	r3, #4
 8003322:	d104      	bne.n	800332e <HAL_TIM_PWM_Start+0xc6>
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2202      	movs	r2, #2
 8003328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800332c:	e01b      	b.n	8003366 <HAL_TIM_PWM_Start+0xfe>
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b08      	cmp	r3, #8
 8003332:	d104      	bne.n	800333e <HAL_TIM_PWM_Start+0xd6>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2202      	movs	r2, #2
 8003338:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800333c:	e013      	b.n	8003366 <HAL_TIM_PWM_Start+0xfe>
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	2b0c      	cmp	r3, #12
 8003342:	d104      	bne.n	800334e <HAL_TIM_PWM_Start+0xe6>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800334c:	e00b      	b.n	8003366 <HAL_TIM_PWM_Start+0xfe>
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	2b10      	cmp	r3, #16
 8003352:	d104      	bne.n	800335e <HAL_TIM_PWM_Start+0xf6>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2202      	movs	r2, #2
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800335c:	e003      	b.n	8003366 <HAL_TIM_PWM_Start+0xfe>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	2202      	movs	r2, #2
 8003362:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2201      	movs	r2, #1
 800336c:	6839      	ldr	r1, [r7, #0]
 800336e:	4618      	mov	r0, r3
 8003370:	f000 feaa 	bl	80040c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a33      	ldr	r2, [pc, #204]	; (8003448 <HAL_TIM_PWM_Start+0x1e0>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d013      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x13e>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a32      	ldr	r2, [pc, #200]	; (800344c <HAL_TIM_PWM_Start+0x1e4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d00e      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x13e>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a30      	ldr	r2, [pc, #192]	; (8003450 <HAL_TIM_PWM_Start+0x1e8>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d009      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x13e>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2f      	ldr	r2, [pc, #188]	; (8003454 <HAL_TIM_PWM_Start+0x1ec>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d004      	beq.n	80033a6 <HAL_TIM_PWM_Start+0x13e>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a2d      	ldr	r2, [pc, #180]	; (8003458 <HAL_TIM_PWM_Start+0x1f0>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d101      	bne.n	80033aa <HAL_TIM_PWM_Start+0x142>
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <HAL_TIM_PWM_Start+0x144>
 80033aa:	2300      	movs	r3, #0
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d007      	beq.n	80033c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033be:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	4a20      	ldr	r2, [pc, #128]	; (8003448 <HAL_TIM_PWM_Start+0x1e0>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d018      	beq.n	80033fc <HAL_TIM_PWM_Start+0x194>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d2:	d013      	beq.n	80033fc <HAL_TIM_PWM_Start+0x194>
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a20      	ldr	r2, [pc, #128]	; (800345c <HAL_TIM_PWM_Start+0x1f4>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d00e      	beq.n	80033fc <HAL_TIM_PWM_Start+0x194>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_TIM_PWM_Start+0x1f8>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d009      	beq.n	80033fc <HAL_TIM_PWM_Start+0x194>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a17      	ldr	r2, [pc, #92]	; (800344c <HAL_TIM_PWM_Start+0x1e4>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d004      	beq.n	80033fc <HAL_TIM_PWM_Start+0x194>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a16      	ldr	r2, [pc, #88]	; (8003450 <HAL_TIM_PWM_Start+0x1e8>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d115      	bne.n	8003428 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689a      	ldr	r2, [r3, #8]
 8003402:	4b18      	ldr	r3, [pc, #96]	; (8003464 <HAL_TIM_PWM_Start+0x1fc>)
 8003404:	4013      	ands	r3, r2
 8003406:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2b06      	cmp	r3, #6
 800340c:	d015      	beq.n	800343a <HAL_TIM_PWM_Start+0x1d2>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003414:	d011      	beq.n	800343a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f042 0201 	orr.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003426:	e008      	b.n	800343a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f042 0201 	orr.w	r2, r2, #1
 8003436:	601a      	str	r2, [r3, #0]
 8003438:	e000      	b.n	800343c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800343a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800343c:	2300      	movs	r3, #0
}
 800343e:	4618      	mov	r0, r3
 8003440:	3710      	adds	r7, #16
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
 8003446:	bf00      	nop
 8003448:	40012c00 	.word	0x40012c00
 800344c:	40013400 	.word	0x40013400
 8003450:	40014000 	.word	0x40014000
 8003454:	40014400 	.word	0x40014400
 8003458:	40014800 	.word	0x40014800
 800345c:	40000400 	.word	0x40000400
 8003460:	40000800 	.word	0x40000800
 8003464:	00010007 	.word	0x00010007

08003468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003482:	2302      	movs	r3, #2
 8003484:	e0ff      	b.n	8003686 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b14      	cmp	r3, #20
 8003492:	f200 80f0 	bhi.w	8003676 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003496:	a201      	add	r2, pc, #4	; (adr r2, 800349c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034f1 	.word	0x080034f1
 80034a0:	08003677 	.word	0x08003677
 80034a4:	08003677 	.word	0x08003677
 80034a8:	08003677 	.word	0x08003677
 80034ac:	08003531 	.word	0x08003531
 80034b0:	08003677 	.word	0x08003677
 80034b4:	08003677 	.word	0x08003677
 80034b8:	08003677 	.word	0x08003677
 80034bc:	08003573 	.word	0x08003573
 80034c0:	08003677 	.word	0x08003677
 80034c4:	08003677 	.word	0x08003677
 80034c8:	08003677 	.word	0x08003677
 80034cc:	080035b3 	.word	0x080035b3
 80034d0:	08003677 	.word	0x08003677
 80034d4:	08003677 	.word	0x08003677
 80034d8:	08003677 	.word	0x08003677
 80034dc:	080035f5 	.word	0x080035f5
 80034e0:	08003677 	.word	0x08003677
 80034e4:	08003677 	.word	0x08003677
 80034e8:	08003677 	.word	0x08003677
 80034ec:	08003635 	.word	0x08003635
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	68b9      	ldr	r1, [r7, #8]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f000 fa54 	bl	80039a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	699a      	ldr	r2, [r3, #24]
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f042 0208 	orr.w	r2, r2, #8
 800350a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f022 0204 	bic.w	r2, r2, #4
 800351a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	6999      	ldr	r1, [r3, #24]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	691a      	ldr	r2, [r3, #16]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	430a      	orrs	r2, r1
 800352c:	619a      	str	r2, [r3, #24]
      break;
 800352e:	e0a5      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68b9      	ldr	r1, [r7, #8]
 8003536:	4618      	mov	r0, r3
 8003538:	f000 fac4 	bl	8003ac4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	699a      	ldr	r2, [r3, #24]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699a      	ldr	r2, [r3, #24]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800355a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6999      	ldr	r1, [r3, #24]
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	691b      	ldr	r3, [r3, #16]
 8003566:	021a      	lsls	r2, r3, #8
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	619a      	str	r2, [r3, #24]
      break;
 8003570:	e084      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	68b9      	ldr	r1, [r7, #8]
 8003578:	4618      	mov	r0, r3
 800357a:	f000 fb2d 	bl	8003bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69da      	ldr	r2, [r3, #28]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f042 0208 	orr.w	r2, r2, #8
 800358c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	69da      	ldr	r2, [r3, #28]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f022 0204 	bic.w	r2, r2, #4
 800359c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69d9      	ldr	r1, [r3, #28]
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	691a      	ldr	r2, [r3, #16]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	430a      	orrs	r2, r1
 80035ae:	61da      	str	r2, [r3, #28]
      break;
 80035b0:	e064      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68b9      	ldr	r1, [r7, #8]
 80035b8:	4618      	mov	r0, r3
 80035ba:	f000 fb95 	bl	8003ce8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69da      	ldr	r2, [r3, #28]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69da      	ldr	r2, [r3, #28]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	69d9      	ldr	r1, [r3, #28]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	021a      	lsls	r2, r3, #8
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	430a      	orrs	r2, r1
 80035f0:	61da      	str	r2, [r3, #28]
      break;
 80035f2:	e043      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	68b9      	ldr	r1, [r7, #8]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f000 fbfe 	bl	8003dfc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f042 0208 	orr.w	r2, r2, #8
 800360e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f022 0204 	bic.w	r2, r2, #4
 800361e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	691a      	ldr	r2, [r3, #16]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003632:	e023      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	68b9      	ldr	r1, [r7, #8]
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fc42 	bl	8003ec4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800364e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800365e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	021a      	lsls	r2, r3, #8
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003674:	e002      	b.n	800367c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	75fb      	strb	r3, [r7, #23]
      break;
 800367a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003684:	7dfb      	ldrb	r3, [r7, #23]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop

08003690 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b084      	sub	sp, #16
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800369a:	2300      	movs	r3, #0
 800369c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d101      	bne.n	80036ac <HAL_TIM_ConfigClockSource+0x1c>
 80036a8:	2302      	movs	r3, #2
 80036aa:	e0de      	b.n	800386a <HAL_TIM_ConfigClockSource+0x1da>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	689b      	ldr	r3, [r3, #8]
 80036c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80036ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68ba      	ldr	r2, [r7, #8]
 80036de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a63      	ldr	r2, [pc, #396]	; (8003874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	f000 80a9 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 80036ec:	4a61      	ldr	r2, [pc, #388]	; (8003874 <HAL_TIM_ConfigClockSource+0x1e4>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	f200 80ae 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 80036f4:	4a60      	ldr	r2, [pc, #384]	; (8003878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	f000 80a1 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 80036fc:	4a5e      	ldr	r2, [pc, #376]	; (8003878 <HAL_TIM_ConfigClockSource+0x1e8>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	f200 80a6 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003704:	4a5d      	ldr	r2, [pc, #372]	; (800387c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003706:	4293      	cmp	r3, r2
 8003708:	f000 8099 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 800370c:	4a5b      	ldr	r2, [pc, #364]	; (800387c <HAL_TIM_ConfigClockSource+0x1ec>)
 800370e:	4293      	cmp	r3, r2
 8003710:	f200 809e 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003714:	4a5a      	ldr	r2, [pc, #360]	; (8003880 <HAL_TIM_ConfigClockSource+0x1f0>)
 8003716:	4293      	cmp	r3, r2
 8003718:	f000 8091 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 800371c:	4a58      	ldr	r2, [pc, #352]	; (8003880 <HAL_TIM_ConfigClockSource+0x1f0>)
 800371e:	4293      	cmp	r3, r2
 8003720:	f200 8096 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003724:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003728:	f000 8089 	beq.w	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 800372c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8003730:	f200 808e 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003734:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003738:	d03e      	beq.n	80037b8 <HAL_TIM_ConfigClockSource+0x128>
 800373a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800373e:	f200 8087 	bhi.w	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003746:	f000 8086 	beq.w	8003856 <HAL_TIM_ConfigClockSource+0x1c6>
 800374a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800374e:	d87f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003750:	2b70      	cmp	r3, #112	; 0x70
 8003752:	d01a      	beq.n	800378a <HAL_TIM_ConfigClockSource+0xfa>
 8003754:	2b70      	cmp	r3, #112	; 0x70
 8003756:	d87b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003758:	2b60      	cmp	r3, #96	; 0x60
 800375a:	d050      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x16e>
 800375c:	2b60      	cmp	r3, #96	; 0x60
 800375e:	d877      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003760:	2b50      	cmp	r3, #80	; 0x50
 8003762:	d03c      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x14e>
 8003764:	2b50      	cmp	r3, #80	; 0x50
 8003766:	d873      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003768:	2b40      	cmp	r3, #64	; 0x40
 800376a:	d058      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x18e>
 800376c:	2b40      	cmp	r3, #64	; 0x40
 800376e:	d86f      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003770:	2b30      	cmp	r3, #48	; 0x30
 8003772:	d064      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 8003774:	2b30      	cmp	r3, #48	; 0x30
 8003776:	d86b      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003778:	2b20      	cmp	r3, #32
 800377a:	d060      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 800377c:	2b20      	cmp	r3, #32
 800377e:	d867      	bhi.n	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
 8003780:	2b00      	cmp	r3, #0
 8003782:	d05c      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 8003784:	2b10      	cmp	r3, #16
 8003786:	d05a      	beq.n	800383e <HAL_TIM_ConfigClockSource+0x1ae>
 8003788:	e062      	b.n	8003850 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6818      	ldr	r0, [r3, #0]
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685a      	ldr	r2, [r3, #4]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	68db      	ldr	r3, [r3, #12]
 800379a:	f000 fc75 	bl	8004088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80037ac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	68ba      	ldr	r2, [r7, #8]
 80037b4:	609a      	str	r2, [r3, #8]
      break;
 80037b6:	e04f      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6818      	ldr	r0, [r3, #0]
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f000 fc5e 	bl	8004088 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037da:	609a      	str	r2, [r3, #8]
      break;
 80037dc:	e03c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fbd0 	bl	8003f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2150      	movs	r1, #80	; 0x50
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fc29 	bl	800404e <TIM_ITRx_SetConfig>
      break;
 80037fc:	e02c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 fbef 	bl	8003fee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2160      	movs	r1, #96	; 0x60
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fc19 	bl	800404e <TIM_ITRx_SetConfig>
      break;
 800381c:	e01c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6818      	ldr	r0, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	6859      	ldr	r1, [r3, #4]
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	461a      	mov	r2, r3
 800382c:	f000 fbb0 	bl	8003f90 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	2140      	movs	r1, #64	; 0x40
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fc09 	bl	800404e <TIM_ITRx_SetConfig>
      break;
 800383c:	e00c      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681a      	ldr	r2, [r3, #0]
 8003842:	683b      	ldr	r3, [r7, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4619      	mov	r1, r3
 8003848:	4610      	mov	r0, r2
 800384a:	f000 fc00 	bl	800404e <TIM_ITRx_SetConfig>
      break;
 800384e:	e003      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      break;
 8003854:	e000      	b.n	8003858 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8003856:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2201      	movs	r2, #1
 800385c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003868:	7bfb      	ldrb	r3, [r7, #15]
}
 800386a:	4618      	mov	r0, r3
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	00100070 	.word	0x00100070
 8003878:	00100040 	.word	0x00100040
 800387c:	00100030 	.word	0x00100030
 8003880:	00100020 	.word	0x00100020

08003884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003884:	b480      	push	{r7}
 8003886:	b085      	sub	sp, #20
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	4a3c      	ldr	r2, [pc, #240]	; (8003988 <TIM_Base_SetConfig+0x104>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d00f      	beq.n	80038bc <TIM_Base_SetConfig+0x38>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038a2:	d00b      	beq.n	80038bc <TIM_Base_SetConfig+0x38>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	4a39      	ldr	r2, [pc, #228]	; (800398c <TIM_Base_SetConfig+0x108>)
 80038a8:	4293      	cmp	r3, r2
 80038aa:	d007      	beq.n	80038bc <TIM_Base_SetConfig+0x38>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a38      	ldr	r2, [pc, #224]	; (8003990 <TIM_Base_SetConfig+0x10c>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d003      	beq.n	80038bc <TIM_Base_SetConfig+0x38>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a37      	ldr	r2, [pc, #220]	; (8003994 <TIM_Base_SetConfig+0x110>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d108      	bne.n	80038ce <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	68fa      	ldr	r2, [r7, #12]
 80038ca:	4313      	orrs	r3, r2
 80038cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	4a2d      	ldr	r2, [pc, #180]	; (8003988 <TIM_Base_SetConfig+0x104>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d01b      	beq.n	800390e <TIM_Base_SetConfig+0x8a>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038dc:	d017      	beq.n	800390e <TIM_Base_SetConfig+0x8a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	4a2a      	ldr	r2, [pc, #168]	; (800398c <TIM_Base_SetConfig+0x108>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d013      	beq.n	800390e <TIM_Base_SetConfig+0x8a>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a29      	ldr	r2, [pc, #164]	; (8003990 <TIM_Base_SetConfig+0x10c>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00f      	beq.n	800390e <TIM_Base_SetConfig+0x8a>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a28      	ldr	r2, [pc, #160]	; (8003994 <TIM_Base_SetConfig+0x110>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d00b      	beq.n	800390e <TIM_Base_SetConfig+0x8a>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a27      	ldr	r2, [pc, #156]	; (8003998 <TIM_Base_SetConfig+0x114>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d007      	beq.n	800390e <TIM_Base_SetConfig+0x8a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a26      	ldr	r2, [pc, #152]	; (800399c <TIM_Base_SetConfig+0x118>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d003      	beq.n	800390e <TIM_Base_SetConfig+0x8a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a25      	ldr	r2, [pc, #148]	; (80039a0 <TIM_Base_SetConfig+0x11c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d108      	bne.n	8003920 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003914:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4313      	orrs	r3, r2
 800391e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	4313      	orrs	r3, r2
 800392c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68fa      	ldr	r2, [r7, #12]
 8003932:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	681a      	ldr	r2, [r3, #0]
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a10      	ldr	r2, [pc, #64]	; (8003988 <TIM_Base_SetConfig+0x104>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d00f      	beq.n	800396c <TIM_Base_SetConfig+0xe8>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a11      	ldr	r2, [pc, #68]	; (8003994 <TIM_Base_SetConfig+0x110>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d00b      	beq.n	800396c <TIM_Base_SetConfig+0xe8>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a10      	ldr	r2, [pc, #64]	; (8003998 <TIM_Base_SetConfig+0x114>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d007      	beq.n	800396c <TIM_Base_SetConfig+0xe8>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	4a0f      	ldr	r2, [pc, #60]	; (800399c <TIM_Base_SetConfig+0x118>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d003      	beq.n	800396c <TIM_Base_SetConfig+0xe8>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <TIM_Base_SetConfig+0x11c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d103      	bne.n	8003974 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	615a      	str	r2, [r3, #20]
}
 800397a:	bf00      	nop
 800397c:	3714      	adds	r7, #20
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr
 8003986:	bf00      	nop
 8003988:	40012c00 	.word	0x40012c00
 800398c:	40000400 	.word	0x40000400
 8003990:	40000800 	.word	0x40000800
 8003994:	40013400 	.word	0x40013400
 8003998:	40014000 	.word	0x40014000
 800399c:	40014400 	.word	0x40014400
 80039a0:	40014800 	.word	0x40014800

080039a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b087      	sub	sp, #28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a1b      	ldr	r3, [r3, #32]
 80039b2:	f023 0201 	bic.w	r2, r3, #1
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a1b      	ldr	r3, [r3, #32]
 80039be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 0302 	bic.w	r3, r3, #2
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a2c      	ldr	r2, [pc, #176]	; (8003ab0 <TIM_OC1_SetConfig+0x10c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d00f      	beq.n	8003a24 <TIM_OC1_SetConfig+0x80>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a2b      	ldr	r2, [pc, #172]	; (8003ab4 <TIM_OC1_SetConfig+0x110>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d00b      	beq.n	8003a24 <TIM_OC1_SetConfig+0x80>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	4a2a      	ldr	r2, [pc, #168]	; (8003ab8 <TIM_OC1_SetConfig+0x114>)
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d007      	beq.n	8003a24 <TIM_OC1_SetConfig+0x80>
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a29      	ldr	r2, [pc, #164]	; (8003abc <TIM_OC1_SetConfig+0x118>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d003      	beq.n	8003a24 <TIM_OC1_SetConfig+0x80>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a28      	ldr	r2, [pc, #160]	; (8003ac0 <TIM_OC1_SetConfig+0x11c>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d10c      	bne.n	8003a3e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f023 0308 	bic.w	r3, r3, #8
 8003a2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	68db      	ldr	r3, [r3, #12]
 8003a30:	697a      	ldr	r2, [r7, #20]
 8003a32:	4313      	orrs	r3, r2
 8003a34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	f023 0304 	bic.w	r3, r3, #4
 8003a3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a1b      	ldr	r2, [pc, #108]	; (8003ab0 <TIM_OC1_SetConfig+0x10c>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00f      	beq.n	8003a66 <TIM_OC1_SetConfig+0xc2>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1a      	ldr	r2, [pc, #104]	; (8003ab4 <TIM_OC1_SetConfig+0x110>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00b      	beq.n	8003a66 <TIM_OC1_SetConfig+0xc2>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a19      	ldr	r2, [pc, #100]	; (8003ab8 <TIM_OC1_SetConfig+0x114>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d007      	beq.n	8003a66 <TIM_OC1_SetConfig+0xc2>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a18      	ldr	r2, [pc, #96]	; (8003abc <TIM_OC1_SetConfig+0x118>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d003      	beq.n	8003a66 <TIM_OC1_SetConfig+0xc2>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <TIM_OC1_SetConfig+0x11c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d111      	bne.n	8003a8a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a66:	693b      	ldr	r3, [r7, #16]
 8003a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	695b      	ldr	r3, [r3, #20]
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	699b      	ldr	r3, [r3, #24]
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	693a      	ldr	r2, [r7, #16]
 8003a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	685a      	ldr	r2, [r3, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	697a      	ldr	r2, [r7, #20]
 8003aa2:	621a      	str	r2, [r3, #32]
}
 8003aa4:	bf00      	nop
 8003aa6:	371c      	adds	r7, #28
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr
 8003ab0:	40012c00 	.word	0x40012c00
 8003ab4:	40013400 	.word	0x40013400
 8003ab8:	40014000 	.word	0x40014000
 8003abc:	40014400 	.word	0x40014400
 8003ac0:	40014800 	.word	0x40014800

08003ac4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6a1b      	ldr	r3, [r3, #32]
 8003ad2:	f023 0210 	bic.w	r2, r3, #16
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a1b      	ldr	r3, [r3, #32]
 8003ade:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003af2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003af6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003afe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	021b      	lsls	r3, r3, #8
 8003b06:	68fa      	ldr	r2, [r7, #12]
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	f023 0320 	bic.w	r3, r3, #32
 8003b12:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	697a      	ldr	r2, [r7, #20]
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	4a28      	ldr	r2, [pc, #160]	; (8003bc4 <TIM_OC2_SetConfig+0x100>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d003      	beq.n	8003b30 <TIM_OC2_SetConfig+0x6c>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <TIM_OC2_SetConfig+0x104>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d10d      	bne.n	8003b4c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b30:	697b      	ldr	r3, [r7, #20]
 8003b32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b36:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	68db      	ldr	r3, [r3, #12]
 8003b3c:	011b      	lsls	r3, r3, #4
 8003b3e:	697a      	ldr	r2, [r7, #20]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b4a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <TIM_OC2_SetConfig+0x100>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d00f      	beq.n	8003b74 <TIM_OC2_SetConfig+0xb0>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a1c      	ldr	r2, [pc, #112]	; (8003bc8 <TIM_OC2_SetConfig+0x104>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00b      	beq.n	8003b74 <TIM_OC2_SetConfig+0xb0>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	4a1b      	ldr	r2, [pc, #108]	; (8003bcc <TIM_OC2_SetConfig+0x108>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d007      	beq.n	8003b74 <TIM_OC2_SetConfig+0xb0>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a1a      	ldr	r2, [pc, #104]	; (8003bd0 <TIM_OC2_SetConfig+0x10c>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d003      	beq.n	8003b74 <TIM_OC2_SetConfig+0xb0>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <TIM_OC2_SetConfig+0x110>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d113      	bne.n	8003b9c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b7a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b82:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	699b      	ldr	r3, [r3, #24]
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	693a      	ldr	r2, [r7, #16]
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	693a      	ldr	r2, [r7, #16]
 8003ba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	68fa      	ldr	r2, [r7, #12]
 8003ba6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685a      	ldr	r2, [r3, #4]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	621a      	str	r2, [r3, #32]
}
 8003bb6:	bf00      	nop
 8003bb8:	371c      	adds	r7, #28
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
 8003bc2:	bf00      	nop
 8003bc4:	40012c00 	.word	0x40012c00
 8003bc8:	40013400 	.word	0x40013400
 8003bcc:	40014000 	.word	0x40014000
 8003bd0:	40014400 	.word	0x40014400
 8003bd4:	40014800 	.word	0x40014800

08003bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b087      	sub	sp, #28
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6a1b      	ldr	r3, [r3, #32]
 8003be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	69db      	ldr	r3, [r3, #28]
 8003bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	f023 0303 	bic.w	r3, r3, #3
 8003c12:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c24:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <TIM_OC3_SetConfig+0xfc>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d003      	beq.n	8003c42 <TIM_OC3_SetConfig+0x6a>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <TIM_OC3_SetConfig+0x100>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d10d      	bne.n	8003c5e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	68db      	ldr	r3, [r3, #12]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	4313      	orrs	r3, r2
 8003c54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c56:	697b      	ldr	r3, [r7, #20]
 8003c58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1c      	ldr	r2, [pc, #112]	; (8003cd4 <TIM_OC3_SetConfig+0xfc>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d00f      	beq.n	8003c86 <TIM_OC3_SetConfig+0xae>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1b      	ldr	r2, [pc, #108]	; (8003cd8 <TIM_OC3_SetConfig+0x100>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00b      	beq.n	8003c86 <TIM_OC3_SetConfig+0xae>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <TIM_OC3_SetConfig+0x104>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d007      	beq.n	8003c86 <TIM_OC3_SetConfig+0xae>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a19      	ldr	r2, [pc, #100]	; (8003ce0 <TIM_OC3_SetConfig+0x108>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d003      	beq.n	8003c86 <TIM_OC3_SetConfig+0xae>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a18      	ldr	r2, [pc, #96]	; (8003ce4 <TIM_OC3_SetConfig+0x10c>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d113      	bne.n	8003cae <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c8c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c94:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	693a      	ldr	r2, [r7, #16]
 8003cb2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	68fa      	ldr	r2, [r7, #12]
 8003cb8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	685a      	ldr	r2, [r3, #4]
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	621a      	str	r2, [r3, #32]
}
 8003cc8:	bf00      	nop
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr
 8003cd4:	40012c00 	.word	0x40012c00
 8003cd8:	40013400 	.word	0x40013400
 8003cdc:	40014000 	.word	0x40014000
 8003ce0:	40014400 	.word	0x40014400
 8003ce4:	40014800 	.word	0x40014800

08003ce8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a1b      	ldr	r3, [r3, #32]
 8003cf6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a1b      	ldr	r3, [r3, #32]
 8003d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	69db      	ldr	r3, [r3, #28]
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	68fa      	ldr	r2, [r7, #12]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d30:	697b      	ldr	r3, [r7, #20]
 8003d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	031b      	lsls	r3, r3, #12
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	4a28      	ldr	r2, [pc, #160]	; (8003de8 <TIM_OC4_SetConfig+0x100>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d003      	beq.n	8003d54 <TIM_OC4_SetConfig+0x6c>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	4a27      	ldr	r2, [pc, #156]	; (8003dec <TIM_OC4_SetConfig+0x104>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d10d      	bne.n	8003d70 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003d5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8003d5c:	683b      	ldr	r3, [r7, #0]
 8003d5e:	68db      	ldr	r3, [r3, #12]
 8003d60:	031b      	lsls	r3, r3, #12
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	4313      	orrs	r3, r2
 8003d66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	4a1d      	ldr	r2, [pc, #116]	; (8003de8 <TIM_OC4_SetConfig+0x100>)
 8003d74:	4293      	cmp	r3, r2
 8003d76:	d00f      	beq.n	8003d98 <TIM_OC4_SetConfig+0xb0>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a1c      	ldr	r2, [pc, #112]	; (8003dec <TIM_OC4_SetConfig+0x104>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d00b      	beq.n	8003d98 <TIM_OC4_SetConfig+0xb0>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	4a1b      	ldr	r2, [pc, #108]	; (8003df0 <TIM_OC4_SetConfig+0x108>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d007      	beq.n	8003d98 <TIM_OC4_SetConfig+0xb0>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1a      	ldr	r2, [pc, #104]	; (8003df4 <TIM_OC4_SetConfig+0x10c>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d003      	beq.n	8003d98 <TIM_OC4_SetConfig+0xb0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a19      	ldr	r2, [pc, #100]	; (8003df8 <TIM_OC4_SetConfig+0x110>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d113      	bne.n	8003dc0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003da6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	695b      	ldr	r3, [r3, #20]
 8003dac:	019b      	lsls	r3, r3, #6
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	4313      	orrs	r3, r2
 8003db2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	019b      	lsls	r3, r3, #6
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685a      	ldr	r2, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	621a      	str	r2, [r3, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	371c      	adds	r7, #28
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40012c00 	.word	0x40012c00
 8003dec:	40013400 	.word	0x40013400
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40014400 	.word	0x40014400
 8003df8:	40014800 	.word	0x40014800

08003dfc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68fa      	ldr	r2, [r7, #12]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003e40:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	041b      	lsls	r3, r3, #16
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4a17      	ldr	r2, [pc, #92]	; (8003eb0 <TIM_OC5_SetConfig+0xb4>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d00f      	beq.n	8003e76 <TIM_OC5_SetConfig+0x7a>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4a16      	ldr	r2, [pc, #88]	; (8003eb4 <TIM_OC5_SetConfig+0xb8>)
 8003e5a:	4293      	cmp	r3, r2
 8003e5c:	d00b      	beq.n	8003e76 <TIM_OC5_SetConfig+0x7a>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a15      	ldr	r2, [pc, #84]	; (8003eb8 <TIM_OC5_SetConfig+0xbc>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d007      	beq.n	8003e76 <TIM_OC5_SetConfig+0x7a>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	4a14      	ldr	r2, [pc, #80]	; (8003ebc <TIM_OC5_SetConfig+0xc0>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d003      	beq.n	8003e76 <TIM_OC5_SetConfig+0x7a>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a13      	ldr	r2, [pc, #76]	; (8003ec0 <TIM_OC5_SetConfig+0xc4>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d109      	bne.n	8003e8a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e7c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	021b      	lsls	r3, r3, #8
 8003e84:	697a      	ldr	r2, [r7, #20]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68fa      	ldr	r2, [r7, #12]
 8003e94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685a      	ldr	r2, [r3, #4]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	621a      	str	r2, [r3, #32]
}
 8003ea4:	bf00      	nop
 8003ea6:	371c      	adds	r7, #28
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr
 8003eb0:	40012c00 	.word	0x40012c00
 8003eb4:	40013400 	.word	0x40013400
 8003eb8:	40014000 	.word	0x40014000
 8003ebc:	40014400 	.word	0x40014400
 8003ec0:	40014800 	.word	0x40014800

08003ec4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ef2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4313      	orrs	r3, r2
 8003f02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003f0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	051b      	lsls	r3, r3, #20
 8003f12:	693a      	ldr	r2, [r7, #16]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <TIM_OC6_SetConfig+0xb8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d00f      	beq.n	8003f40 <TIM_OC6_SetConfig+0x7c>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <TIM_OC6_SetConfig+0xbc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d00b      	beq.n	8003f40 <TIM_OC6_SetConfig+0x7c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a16      	ldr	r2, [pc, #88]	; (8003f84 <TIM_OC6_SetConfig+0xc0>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d007      	beq.n	8003f40 <TIM_OC6_SetConfig+0x7c>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <TIM_OC6_SetConfig+0xc4>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d003      	beq.n	8003f40 <TIM_OC6_SetConfig+0x7c>
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a14      	ldr	r2, [pc, #80]	; (8003f8c <TIM_OC6_SetConfig+0xc8>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d109      	bne.n	8003f54 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f46:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	695b      	ldr	r3, [r3, #20]
 8003f4c:	029b      	lsls	r3, r3, #10
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	697a      	ldr	r2, [r7, #20]
 8003f58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	68fa      	ldr	r2, [r7, #12]
 8003f5e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685a      	ldr	r2, [r3, #4]
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	621a      	str	r2, [r3, #32]
}
 8003f6e:	bf00      	nop
 8003f70:	371c      	adds	r7, #28
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr
 8003f7a:	bf00      	nop
 8003f7c:	40012c00 	.word	0x40012c00
 8003f80:	40013400 	.word	0x40013400
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800

08003f90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6a1b      	ldr	r3, [r3, #32]
 8003fa0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a1b      	ldr	r3, [r3, #32]
 8003fa6:	f023 0201 	bic.w	r2, r3, #1
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	011b      	lsls	r3, r3, #4
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f023 030a 	bic.w	r3, r3, #10
 8003fcc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003fce:	697a      	ldr	r2, [r7, #20]
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	621a      	str	r2, [r3, #32]
}
 8003fe2:	bf00      	nop
 8003fe4:	371c      	adds	r7, #28
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b087      	sub	sp, #28
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	60f8      	str	r0, [r7, #12]
 8003ff6:	60b9      	str	r1, [r7, #8]
 8003ff8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0210 	bic.w	r2, r3, #16
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a1b      	ldr	r3, [r3, #32]
 8004010:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004018:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	031b      	lsls	r3, r3, #12
 800401e:	697a      	ldr	r2, [r7, #20]
 8004020:	4313      	orrs	r3, r2
 8004022:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800402a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	4313      	orrs	r3, r2
 8004034:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	697a      	ldr	r2, [r7, #20]
 800403a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	693a      	ldr	r2, [r7, #16]
 8004040:	621a      	str	r2, [r3, #32]
}
 8004042:	bf00      	nop
 8004044:	371c      	adds	r7, #28
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr

0800404e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800404e:	b480      	push	{r7}
 8004050:	b085      	sub	sp, #20
 8004052:	af00      	add	r7, sp, #0
 8004054:	6078      	str	r0, [r7, #4]
 8004056:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	689b      	ldr	r3, [r3, #8]
 800405c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8004064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800406a:	683a      	ldr	r2, [r7, #0]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4313      	orrs	r3, r2
 8004070:	f043 0307 	orr.w	r3, r3, #7
 8004074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	68fa      	ldr	r2, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800409c:	697b      	ldr	r3, [r7, #20]
 800409e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	021a      	lsls	r2, r3, #8
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	609a      	str	r2, [r3, #8]
}
 80040bc:	bf00      	nop
 80040be:	371c      	adds	r7, #28
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80040c8:	b480      	push	{r7}
 80040ca:	b087      	sub	sp, #28
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	2201      	movs	r2, #1
 80040dc:	fa02 f303 	lsl.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	6a1a      	ldr	r2, [r3, #32]
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	43db      	mvns	r3, r3
 80040ea:	401a      	ands	r2, r3
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6a1a      	ldr	r2, [r3, #32]
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 031f 	and.w	r3, r3, #31
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	431a      	orrs	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	621a      	str	r2, [r3, #32]
}
 8004106:	bf00      	nop
 8004108:	371c      	adds	r7, #28
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
	...

08004114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004124:	2b01      	cmp	r3, #1
 8004126:	d101      	bne.n	800412c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004128:	2302      	movs	r3, #2
 800412a:	e065      	b.n	80041f8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2202      	movs	r2, #2
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d004      	beq.n	8004160 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a2b      	ldr	r2, [pc, #172]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d108      	bne.n	8004172 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004166:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	68fa      	ldr	r2, [r7, #12]
 800416e:	4313      	orrs	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8004178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800417c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d018      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041a2:	d013      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a18      	ldr	r2, [pc, #96]	; (800420c <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80041aa:	4293      	cmp	r3, r2
 80041ac:	d00e      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	4a17      	ldr	r2, [pc, #92]	; (8004210 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80041b4:	4293      	cmp	r3, r2
 80041b6:	d009      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a12      	ldr	r2, [pc, #72]	; (8004208 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d004      	beq.n	80041cc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	4a13      	ldr	r2, [pc, #76]	; (8004214 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d10c      	bne.n	80041e6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041d2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	68ba      	ldr	r2, [r7, #8]
 80041da:	4313      	orrs	r3, r2
 80041dc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2201      	movs	r2, #1
 80041ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3714      	adds	r7, #20
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40012c00 	.word	0x40012c00
 8004208:	40013400 	.word	0x40013400
 800420c:	40000400 	.word	0x40000400
 8004210:	40000800 	.word	0x40000800
 8004214:	40014000 	.word	0x40014000

08004218 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004222:	2300      	movs	r3, #0
 8004224:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800422c:	2b01      	cmp	r3, #1
 800422e:	d101      	bne.n	8004234 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004230:	2302      	movs	r3, #2
 8004232:	e087      	b.n	8004344 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2201      	movs	r2, #1
 8004238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4313      	orrs	r3, r2
 8004248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4313      	orrs	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	691b      	ldr	r3, [r3, #16]
 800427e:	4313      	orrs	r3, r2
 8004280:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	695b      	ldr	r3, [r3, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	699b      	ldr	r3, [r3, #24]
 80042a8:	041b      	lsls	r3, r3, #16
 80042aa:	4313      	orrs	r3, r2
 80042ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4a27      	ldr	r2, [pc, #156]	; (8004350 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d004      	beq.n	80042c2 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a25      	ldr	r2, [pc, #148]	; (8004354 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d106      	bne.n	80042d0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a1e      	ldr	r2, [pc, #120]	; (8004350 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d004      	beq.n	80042e4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a1d      	ldr	r2, [pc, #116]	; (8004354 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d126      	bne.n	8004332 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ee:	051b      	lsls	r3, r3, #20
 80042f0:	4313      	orrs	r3, r2
 80042f2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	6a1b      	ldr	r3, [r3, #32]
 80042fe:	4313      	orrs	r3, r2
 8004300:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	4313      	orrs	r3, r2
 800430e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a0e      	ldr	r2, [pc, #56]	; (8004350 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d004      	beq.n	8004324 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a0d      	ldr	r2, [pc, #52]	; (8004354 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d106      	bne.n	8004332 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68fa      	ldr	r2, [r7, #12]
 8004338:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2200      	movs	r2, #0
 800433e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr
 8004350:	40012c00 	.word	0x40012c00
 8004354:	40013400 	.word	0x40013400

08004358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b082      	sub	sp, #8
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d101      	bne.n	800436a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	e042      	b.n	80043f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fd f877 	bl	8001470 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2224      	movs	r2, #36	; 0x24
 8004386:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f022 0201 	bic.w	r2, r2, #1
 8004398:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fc50 	bl	8004c40 <UART_SetConfig>
 80043a0:	4603      	mov	r3, r0
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d101      	bne.n	80043aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e022      	b.n	80043f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80043b2:	6878      	ldr	r0, [r7, #4]
 80043b4:	f000 ff10 	bl	80051d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	685a      	ldr	r2, [r3, #4]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	689a      	ldr	r2, [r3, #8]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f042 0201 	orr.w	r2, r2, #1
 80043e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	f000 ff97 	bl	800531c <UART_CheckIdleState>
 80043ee:	4603      	mov	r3, r0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3708      	adds	r7, #8
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}

080043f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b08a      	sub	sp, #40	; 0x28
 80043fc:	af02      	add	r7, sp, #8
 80043fe:	60f8      	str	r0, [r7, #12]
 8004400:	60b9      	str	r1, [r7, #8]
 8004402:	603b      	str	r3, [r7, #0]
 8004404:	4613      	mov	r3, r2
 8004406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800440e:	2b20      	cmp	r3, #32
 8004410:	f040 8083 	bne.w	800451a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d002      	beq.n	8004420 <HAL_UART_Transmit+0x28>
 800441a:	88fb      	ldrh	r3, [r7, #6]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e07b      	b.n	800451c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800442a:	2b01      	cmp	r3, #1
 800442c:	d101      	bne.n	8004432 <HAL_UART_Transmit+0x3a>
 800442e:	2302      	movs	r3, #2
 8004430:	e074      	b.n	800451c <HAL_UART_Transmit+0x124>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2201      	movs	r2, #1
 8004436:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2221      	movs	r2, #33	; 0x21
 8004446:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800444a:	f7fd f92b 	bl	80016a4 <HAL_GetTick>
 800444e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	88fa      	ldrh	r2, [r7, #6]
 8004454:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	88fa      	ldrh	r2, [r7, #6]
 800445c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004468:	d108      	bne.n	800447c <HAL_UART_Transmit+0x84>
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d104      	bne.n	800447c <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8004472:	2300      	movs	r3, #0
 8004474:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004476:	68bb      	ldr	r3, [r7, #8]
 8004478:	61bb      	str	r3, [r7, #24]
 800447a:	e003      	b.n	8004484 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	2200      	movs	r2, #0
 8004488:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800448c:	e02c      	b.n	80044e8 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	2200      	movs	r2, #0
 8004496:	2180      	movs	r1, #128	; 0x80
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 ff8a 	bl	80053b2 <UART_WaitOnFlagUntilTimeout>
 800449e:	4603      	mov	r3, r0
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d001      	beq.n	80044a8 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80044a4:	2303      	movs	r3, #3
 80044a6:	e039      	b.n	800451c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80044a8:	69fb      	ldr	r3, [r7, #28]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10b      	bne.n	80044c6 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ae:	69bb      	ldr	r3, [r7, #24]
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	461a      	mov	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044bc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044be:	69bb      	ldr	r3, [r7, #24]
 80044c0:	3302      	adds	r3, #2
 80044c2:	61bb      	str	r3, [r7, #24]
 80044c4:	e007      	b.n	80044d6 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044c6:	69fb      	ldr	r3, [r7, #28]
 80044c8:	781a      	ldrb	r2, [r3, #0]
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	3301      	adds	r3, #1
 80044d4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044ee:	b29b      	uxth	r3, r3
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d1cc      	bne.n	800448e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	9300      	str	r3, [sp, #0]
 80044f8:	697b      	ldr	r3, [r7, #20]
 80044fa:	2200      	movs	r2, #0
 80044fc:	2140      	movs	r1, #64	; 0x40
 80044fe:	68f8      	ldr	r0, [r7, #12]
 8004500:	f000 ff57 	bl	80053b2 <UART_WaitOnFlagUntilTimeout>
 8004504:	4603      	mov	r3, r0
 8004506:	2b00      	cmp	r3, #0
 8004508:	d001      	beq.n	800450e <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e006      	b.n	800451c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8004516:	2300      	movs	r3, #0
 8004518:	e000      	b.n	800451c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800451a:	2302      	movs	r3, #2
  }
}
 800451c:	4618      	mov	r0, r3
 800451e:	3720      	adds	r7, #32
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b08a      	sub	sp, #40	; 0x28
 8004528:	af00      	add	r7, sp, #0
 800452a:	60f8      	str	r0, [r7, #12]
 800452c:	60b9      	str	r1, [r7, #8]
 800452e:	4613      	mov	r3, r2
 8004530:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	2b20      	cmp	r3, #32
 800453a:	d142      	bne.n	80045c2 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d002      	beq.n	8004548 <HAL_UART_Receive_IT+0x24>
 8004542:	88fb      	ldrh	r3, [r7, #6]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e03b      	b.n	80045c4 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8004552:	2b01      	cmp	r3, #1
 8004554:	d101      	bne.n	800455a <HAL_UART_Receive_IT+0x36>
 8004556:	2302      	movs	r3, #2
 8004558:	e034      	b.n	80045c4 <HAL_UART_Receive_IT+0xa0>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2201      	movs	r2, #1
 800455e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a17      	ldr	r2, [pc, #92]	; (80045cc <HAL_UART_Receive_IT+0xa8>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d01f      	beq.n	80045b2 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800457c:	2b00      	cmp	r3, #0
 800457e:	d018      	beq.n	80045b2 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	e853 3f00 	ldrex	r3, [r3]
 800458c:	613b      	str	r3, [r7, #16]
   return(result);
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004594:	627b      	str	r3, [r7, #36]	; 0x24
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459e:	623b      	str	r3, [r7, #32]
 80045a0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045a2:	69f9      	ldr	r1, [r7, #28]
 80045a4:	6a3a      	ldr	r2, [r7, #32]
 80045a6:	e841 2300 	strex	r3, r2, [r1]
 80045aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d1e6      	bne.n	8004580 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	461a      	mov	r2, r3
 80045b6:	68b9      	ldr	r1, [r7, #8]
 80045b8:	68f8      	ldr	r0, [r7, #12]
 80045ba:	f000 ffc3 	bl	8005544 <UART_Start_Receive_IT>
 80045be:	4603      	mov	r3, r0
 80045c0:	e000      	b.n	80045c4 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80045c2:	2302      	movs	r3, #2
  }
}
 80045c4:	4618      	mov	r0, r3
 80045c6:	3728      	adds	r7, #40	; 0x28
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}
 80045cc:	40008000 	.word	0x40008000

080045d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b0ba      	sub	sp, #232	; 0xe8
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80045f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80045fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80045fe:	4013      	ands	r3, r2
 8004600:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004604:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004608:	2b00      	cmp	r3, #0
 800460a:	d11b      	bne.n	8004644 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800460c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004610:	f003 0320 	and.w	r3, r3, #32
 8004614:	2b00      	cmp	r3, #0
 8004616:	d015      	beq.n	8004644 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8004618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b00      	cmp	r3, #0
 8004622:	d105      	bne.n	8004630 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800462c:	2b00      	cmp	r3, #0
 800462e:	d009      	beq.n	8004644 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	2b00      	cmp	r3, #0
 8004636:	f000 82d6 	beq.w	8004be6 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	4798      	blx	r3
      }
      return;
 8004642:	e2d0      	b.n	8004be6 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004644:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 811f 	beq.w	800488c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800464e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004652:	4b8b      	ldr	r3, [pc, #556]	; (8004880 <HAL_UART_IRQHandler+0x2b0>)
 8004654:	4013      	ands	r3, r2
 8004656:	2b00      	cmp	r3, #0
 8004658:	d106      	bne.n	8004668 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800465a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800465e:	4b89      	ldr	r3, [pc, #548]	; (8004884 <HAL_UART_IRQHandler+0x2b4>)
 8004660:	4013      	ands	r3, r2
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8112 	beq.w	800488c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800466c:	f003 0301 	and.w	r3, r3, #1
 8004670:	2b00      	cmp	r3, #0
 8004672:	d011      	beq.n	8004698 <HAL_UART_IRQHandler+0xc8>
 8004674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00b      	beq.n	8004698 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2201      	movs	r2, #1
 8004686:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d011      	beq.n	80046c8 <HAL_UART_IRQHandler+0xf8>
 80046a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00b      	beq.n	80046c8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	2202      	movs	r2, #2
 80046b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046be:	f043 0204 	orr.w	r2, r3, #4
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80046c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046cc:	f003 0304 	and.w	r3, r3, #4
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d011      	beq.n	80046f8 <HAL_UART_IRQHandler+0x128>
 80046d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046d8:	f003 0301 	and.w	r3, r3, #1
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00b      	beq.n	80046f8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	2204      	movs	r2, #4
 80046e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80046ee:	f043 0202 	orr.w	r2, r3, #2
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80046f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046fc:	f003 0308 	and.w	r3, r3, #8
 8004700:	2b00      	cmp	r3, #0
 8004702:	d017      	beq.n	8004734 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d105      	bne.n	800471c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004710:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8004714:	4b5a      	ldr	r3, [pc, #360]	; (8004880 <HAL_UART_IRQHandler+0x2b0>)
 8004716:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00b      	beq.n	8004734 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	2208      	movs	r2, #8
 8004722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800472a:	f043 0208 	orr.w	r2, r3, #8
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004738:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800473c:	2b00      	cmp	r3, #0
 800473e:	d012      	beq.n	8004766 <HAL_UART_IRQHandler+0x196>
 8004740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00c      	beq.n	8004766 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004754:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800475c:	f043 0220 	orr.w	r2, r3, #32
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 823c 	beq.w	8004bea <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004776:	f003 0320 	and.w	r3, r3, #32
 800477a:	2b00      	cmp	r3, #0
 800477c:	d013      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800477e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004782:	f003 0320 	and.w	r3, r3, #32
 8004786:	2b00      	cmp	r3, #0
 8004788:	d105      	bne.n	8004796 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800478a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	2b00      	cmp	r3, #0
 8004794:	d007      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	2b00      	cmp	r3, #0
 800479c:	d003      	beq.n	80047a6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047ac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ba:	2b40      	cmp	r3, #64	; 0x40
 80047bc:	d005      	beq.n	80047ca <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80047be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80047c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d04f      	beq.n	800486a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80047ca:	6878      	ldr	r0, [r7, #4]
 80047cc:	f000 ffe4 	bl	8005798 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047da:	2b40      	cmp	r3, #64	; 0x40
 80047dc:	d141      	bne.n	8004862 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	3308      	adds	r3, #8
 80047e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047ec:	e853 3f00 	ldrex	r3, [r3]
 80047f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80047f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047f8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047fc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	3308      	adds	r3, #8
 8004806:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800480a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800480e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004812:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004816:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004822:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1d9      	bne.n	80047de <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800482e:	2b00      	cmp	r3, #0
 8004830:	d013      	beq.n	800485a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004836:	4a14      	ldr	r2, [pc, #80]	; (8004888 <HAL_UART_IRQHandler+0x2b8>)
 8004838:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800483e:	4618      	mov	r0, r3
 8004840:	f7fd f96f 	bl	8001b22 <HAL_DMA_Abort_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d017      	beq.n	800487a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800484e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8004854:	4610      	mov	r0, r2
 8004856:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004858:	e00f      	b.n	800487a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 f9da 	bl	8004c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004860:	e00b      	b.n	800487a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 f9d6 	bl	8004c14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004868:	e007      	b.n	800487a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 f9d2 	bl	8004c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2200      	movs	r2, #0
 8004874:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8004878:	e1b7      	b.n	8004bea <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800487a:	bf00      	nop
    return;
 800487c:	e1b5      	b.n	8004bea <HAL_UART_IRQHandler+0x61a>
 800487e:	bf00      	nop
 8004880:	10000001 	.word	0x10000001
 8004884:	04000120 	.word	0x04000120
 8004888:	08005865 	.word	0x08005865

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004890:	2b01      	cmp	r3, #1
 8004892:	f040 814a 	bne.w	8004b2a <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b00      	cmp	r3, #0
 80048a0:	f000 8143 	beq.w	8004b2a <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80048a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	f000 813c 	beq.w	8004b2a <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	2210      	movs	r2, #16
 80048b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	f040 80b5 	bne.w	8004a34 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80048d6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f000 8187 	beq.w	8004bee <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80048e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048ea:	429a      	cmp	r2, r3
 80048ec:	f080 817f 	bcs.w	8004bee <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80048f6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0320 	and.w	r3, r3, #32
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 8086 	bne.w	8004a18 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004914:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004918:	e853 3f00 	ldrex	r3, [r3]
 800491c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004924:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004928:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	461a      	mov	r2, r3
 8004932:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800493a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800493e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004942:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004946:	e841 2300 	strex	r3, r2, [r1]
 800494a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800494e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d1da      	bne.n	800490c <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	3308      	adds	r3, #8
 800495c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004960:	e853 3f00 	ldrex	r3, [r3]
 8004964:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	3308      	adds	r3, #8
 8004976:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800497a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800497e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004980:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004982:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004986:	e841 2300 	strex	r3, r2, [r1]
 800498a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800498c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1e1      	bne.n	8004956 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3308      	adds	r3, #8
 8004998:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800499c:	e853 3f00 	ldrex	r3, [r3]
 80049a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80049a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	3308      	adds	r3, #8
 80049b2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80049b6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80049b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80049bc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80049be:	e841 2300 	strex	r3, r2, [r1]
 80049c2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80049c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d1e3      	bne.n	8004992 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2220      	movs	r2, #32
 80049ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049e0:	e853 3f00 	ldrex	r3, [r3]
 80049e4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80049e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80049e8:	f023 0310 	bic.w	r3, r3, #16
 80049ec:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	461a      	mov	r2, r3
 80049f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80049fa:	65bb      	str	r3, [r7, #88]	; 0x58
 80049fc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fe:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004a00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004a02:	e841 2300 	strex	r3, r2, [r1]
 8004a06:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1e4      	bne.n	80049d8 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7fd f82c 	bl	8001a70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a24:	b29b      	uxth	r3, r3
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	b29b      	uxth	r3, r3
 8004a2a:	4619      	mov	r1, r3
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f8fb 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004a32:	e0dc      	b.n	8004bee <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a40:	b29b      	uxth	r3, r3
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 80ce 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8004a56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 80c9 	beq.w	8004bf2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004a6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004a74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004a82:	647b      	str	r3, [r7, #68]	; 0x44
 8004a84:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004a88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004a8a:	e841 2300 	strex	r3, r2, [r1]
 8004a8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004a90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e4      	bne.n	8004a60 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	3308      	adds	r3, #8
 8004a9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa0:	e853 3f00 	ldrex	r3, [r3]
 8004aa4:	623b      	str	r3, [r7, #32]
   return(result);
 8004aa6:	6a3b      	ldr	r3, [r7, #32]
 8004aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004aac:	f023 0301 	bic.w	r3, r3, #1
 8004ab0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	3308      	adds	r3, #8
 8004aba:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004abe:	633a      	str	r2, [r7, #48]	; 0x30
 8004ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ac2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ac4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ac6:	e841 2300 	strex	r3, r2, [r1]
 8004aca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1e1      	bne.n	8004a96 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2220      	movs	r2, #32
 8004ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	e853 3f00 	ldrex	r3, [r3]
 8004af2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f023 0310 	bic.w	r3, r3, #16
 8004afa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	461a      	mov	r2, r3
 8004b04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004b08:	61fb      	str	r3, [r7, #28]
 8004b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0c:	69b9      	ldr	r1, [r7, #24]
 8004b0e:	69fa      	ldr	r2, [r7, #28]
 8004b10:	e841 2300 	strex	r3, r2, [r1]
 8004b14:	617b      	str	r3, [r7, #20]
   return(result);
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d1e4      	bne.n	8004ae6 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004b1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004b20:	4619      	mov	r1, r3
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f880 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004b28:	e063      	b.n	8004bf2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004b2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00e      	beq.n	8004b54 <HAL_UART_IRQHandler+0x584>
 8004b36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d008      	beq.n	8004b54 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004b4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f001 fb27 	bl	80061a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004b52:	e051      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004b54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d014      	beq.n	8004b8a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d105      	bne.n	8004b78 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004b6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b70:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d008      	beq.n	8004b8a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d03a      	beq.n	8004bf6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	4798      	blx	r3
    }
    return;
 8004b88:	e035      	b.n	8004bf6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004b8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d009      	beq.n	8004baa <HAL_UART_IRQHandler+0x5da>
 8004b96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d003      	beq.n	8004baa <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8004ba2:	6878      	ldr	r0, [r7, #4]
 8004ba4:	f000 fe74 	bl	8005890 <UART_EndTransmit_IT>
    return;
 8004ba8:	e026      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004baa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d009      	beq.n	8004bca <HAL_UART_IRQHandler+0x5fa>
 8004bb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bba:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d003      	beq.n	8004bca <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f001 fb00 	bl	80061c8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004bc8:	e016      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004bca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d010      	beq.n	8004bf8 <HAL_UART_IRQHandler+0x628>
 8004bd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	da0c      	bge.n	8004bf8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f001 fae8 	bl	80061b4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004be4:	e008      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
      return;
 8004be6:	bf00      	nop
 8004be8:	e006      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
    return;
 8004bea:	bf00      	nop
 8004bec:	e004      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
      return;
 8004bee:	bf00      	nop
 8004bf0:	e002      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
      return;
 8004bf2:	bf00      	nop
 8004bf4:	e000      	b.n	8004bf8 <HAL_UART_IRQHandler+0x628>
    return;
 8004bf6:	bf00      	nop
  }
}
 8004bf8:	37e8      	adds	r7, #232	; 0xe8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	bf00      	nop

08004c00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004c1c:	bf00      	nop
 8004c1e:	370c      	adds	r7, #12
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr

08004c28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	b083      	sub	sp, #12
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004c34:	bf00      	nop
 8004c36:	370c      	adds	r7, #12
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3e:	4770      	bx	lr

08004c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c44:	b08c      	sub	sp, #48	; 0x30
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	689a      	ldr	r2, [r3, #8]
 8004c54:	697b      	ldr	r3, [r7, #20]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	431a      	orrs	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	681a      	ldr	r2, [r3, #0]
 8004c6e:	4bab      	ldr	r3, [pc, #684]	; (8004f1c <UART_SetConfig+0x2dc>)
 8004c70:	4013      	ands	r3, r2
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	6812      	ldr	r2, [r2, #0]
 8004c76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c7c:	697b      	ldr	r3, [r7, #20]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	68da      	ldr	r2, [r3, #12]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	430a      	orrs	r2, r1
 8004c90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004c98:	697b      	ldr	r3, [r7, #20]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4aa0      	ldr	r2, [pc, #640]	; (8004f20 <UART_SetConfig+0x2e0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d004      	beq.n	8004cac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8004cb6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	6812      	ldr	r2, [r2, #0]
 8004cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004cc4:	697b      	ldr	r3, [r7, #20]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cca:	f023 010f 	bic.w	r1, r3, #15
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	430a      	orrs	r2, r1
 8004cd8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	4a91      	ldr	r2, [pc, #580]	; (8004f24 <UART_SetConfig+0x2e4>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d125      	bne.n	8004d30 <UART_SetConfig+0xf0>
 8004ce4:	4b90      	ldr	r3, [pc, #576]	; (8004f28 <UART_SetConfig+0x2e8>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	f003 0303 	and.w	r3, r3, #3
 8004cee:	2b03      	cmp	r3, #3
 8004cf0:	d81a      	bhi.n	8004d28 <UART_SetConfig+0xe8>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <UART_SetConfig+0xb8>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d09 	.word	0x08004d09
 8004cfc:	08004d19 	.word	0x08004d19
 8004d00:	08004d11 	.word	0x08004d11
 8004d04:	08004d21 	.word	0x08004d21
 8004d08:	2301      	movs	r3, #1
 8004d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d0e:	e0d6      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004d10:	2302      	movs	r3, #2
 8004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d16:	e0d2      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004d18:	2304      	movs	r3, #4
 8004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d1e:	e0ce      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004d20:	2308      	movs	r3, #8
 8004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d26:	e0ca      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d2e:	e0c6      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a7d      	ldr	r2, [pc, #500]	; (8004f2c <UART_SetConfig+0x2ec>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d138      	bne.n	8004dac <UART_SetConfig+0x16c>
 8004d3a:	4b7b      	ldr	r3, [pc, #492]	; (8004f28 <UART_SetConfig+0x2e8>)
 8004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b0c      	cmp	r3, #12
 8004d46:	d82d      	bhi.n	8004da4 <UART_SetConfig+0x164>
 8004d48:	a201      	add	r2, pc, #4	; (adr r2, 8004d50 <UART_SetConfig+0x110>)
 8004d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4e:	bf00      	nop
 8004d50:	08004d85 	.word	0x08004d85
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004da5 	.word	0x08004da5
 8004d5c:	08004da5 	.word	0x08004da5
 8004d60:	08004d95 	.word	0x08004d95
 8004d64:	08004da5 	.word	0x08004da5
 8004d68:	08004da5 	.word	0x08004da5
 8004d6c:	08004da5 	.word	0x08004da5
 8004d70:	08004d8d 	.word	0x08004d8d
 8004d74:	08004da5 	.word	0x08004da5
 8004d78:	08004da5 	.word	0x08004da5
 8004d7c:	08004da5 	.word	0x08004da5
 8004d80:	08004d9d 	.word	0x08004d9d
 8004d84:	2300      	movs	r3, #0
 8004d86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d8a:	e098      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d92:	e094      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004d94:	2304      	movs	r3, #4
 8004d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004d9a:	e090      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004d9c:	2308      	movs	r3, #8
 8004d9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004da2:	e08c      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004da4:	2310      	movs	r3, #16
 8004da6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004daa:	e088      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	4a5f      	ldr	r2, [pc, #380]	; (8004f30 <UART_SetConfig+0x2f0>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d125      	bne.n	8004e02 <UART_SetConfig+0x1c2>
 8004db6:	4b5c      	ldr	r3, [pc, #368]	; (8004f28 <UART_SetConfig+0x2e8>)
 8004db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004dbc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004dc0:	2b30      	cmp	r3, #48	; 0x30
 8004dc2:	d016      	beq.n	8004df2 <UART_SetConfig+0x1b2>
 8004dc4:	2b30      	cmp	r3, #48	; 0x30
 8004dc6:	d818      	bhi.n	8004dfa <UART_SetConfig+0x1ba>
 8004dc8:	2b20      	cmp	r3, #32
 8004dca:	d00a      	beq.n	8004de2 <UART_SetConfig+0x1a2>
 8004dcc:	2b20      	cmp	r3, #32
 8004dce:	d814      	bhi.n	8004dfa <UART_SetConfig+0x1ba>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d002      	beq.n	8004dda <UART_SetConfig+0x19a>
 8004dd4:	2b10      	cmp	r3, #16
 8004dd6:	d008      	beq.n	8004dea <UART_SetConfig+0x1aa>
 8004dd8:	e00f      	b.n	8004dfa <UART_SetConfig+0x1ba>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de0:	e06d      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004de2:	2302      	movs	r3, #2
 8004de4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004de8:	e069      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004dea:	2304      	movs	r3, #4
 8004dec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df0:	e065      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004df2:	2308      	movs	r3, #8
 8004df4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004df8:	e061      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004dfa:	2310      	movs	r3, #16
 8004dfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e00:	e05d      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	4a4b      	ldr	r2, [pc, #300]	; (8004f34 <UART_SetConfig+0x2f4>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d125      	bne.n	8004e58 <UART_SetConfig+0x218>
 8004e0c:	4b46      	ldr	r3, [pc, #280]	; (8004f28 <UART_SetConfig+0x2e8>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004e16:	2bc0      	cmp	r3, #192	; 0xc0
 8004e18:	d016      	beq.n	8004e48 <UART_SetConfig+0x208>
 8004e1a:	2bc0      	cmp	r3, #192	; 0xc0
 8004e1c:	d818      	bhi.n	8004e50 <UART_SetConfig+0x210>
 8004e1e:	2b80      	cmp	r3, #128	; 0x80
 8004e20:	d00a      	beq.n	8004e38 <UART_SetConfig+0x1f8>
 8004e22:	2b80      	cmp	r3, #128	; 0x80
 8004e24:	d814      	bhi.n	8004e50 <UART_SetConfig+0x210>
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d002      	beq.n	8004e30 <UART_SetConfig+0x1f0>
 8004e2a:	2b40      	cmp	r3, #64	; 0x40
 8004e2c:	d008      	beq.n	8004e40 <UART_SetConfig+0x200>
 8004e2e:	e00f      	b.n	8004e50 <UART_SetConfig+0x210>
 8004e30:	2300      	movs	r3, #0
 8004e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e36:	e042      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e3e:	e03e      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004e40:	2304      	movs	r3, #4
 8004e42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e46:	e03a      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004e48:	2308      	movs	r3, #8
 8004e4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e4e:	e036      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004e50:	2310      	movs	r3, #16
 8004e52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e56:	e032      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	4a30      	ldr	r2, [pc, #192]	; (8004f20 <UART_SetConfig+0x2e0>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d12a      	bne.n	8004eb8 <UART_SetConfig+0x278>
 8004e62:	4b31      	ldr	r3, [pc, #196]	; (8004f28 <UART_SetConfig+0x2e8>)
 8004e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e68:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004e6c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e70:	d01a      	beq.n	8004ea8 <UART_SetConfig+0x268>
 8004e72:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e76:	d81b      	bhi.n	8004eb0 <UART_SetConfig+0x270>
 8004e78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e7c:	d00c      	beq.n	8004e98 <UART_SetConfig+0x258>
 8004e7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e82:	d815      	bhi.n	8004eb0 <UART_SetConfig+0x270>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d003      	beq.n	8004e90 <UART_SetConfig+0x250>
 8004e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e8c:	d008      	beq.n	8004ea0 <UART_SetConfig+0x260>
 8004e8e:	e00f      	b.n	8004eb0 <UART_SetConfig+0x270>
 8004e90:	2300      	movs	r3, #0
 8004e92:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e96:	e012      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004e9e:	e00e      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004ea0:	2304      	movs	r3, #4
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004ea6:	e00a      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004ea8:	2308      	movs	r3, #8
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eae:	e006      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004eb0:	2310      	movs	r3, #16
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004eb6:	e002      	b.n	8004ebe <UART_SetConfig+0x27e>
 8004eb8:	2310      	movs	r3, #16
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <UART_SetConfig+0x2e0>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	f040 80a8 	bne.w	800501a <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d834      	bhi.n	8004f3c <UART_SetConfig+0x2fc>
 8004ed2:	a201      	add	r2, pc, #4	; (adr r2, 8004ed8 <UART_SetConfig+0x298>)
 8004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ed8:	08004efd 	.word	0x08004efd
 8004edc:	08004f3d 	.word	0x08004f3d
 8004ee0:	08004f05 	.word	0x08004f05
 8004ee4:	08004f3d 	.word	0x08004f3d
 8004ee8:	08004f0b 	.word	0x08004f0b
 8004eec:	08004f3d 	.word	0x08004f3d
 8004ef0:	08004f3d 	.word	0x08004f3d
 8004ef4:	08004f3d 	.word	0x08004f3d
 8004ef8:	08004f13 	.word	0x08004f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004efc:	f7fd fe9a 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 8004f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f02:	e021      	b.n	8004f48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f04:	4b0c      	ldr	r3, [pc, #48]	; (8004f38 <UART_SetConfig+0x2f8>)
 8004f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f08:	e01e      	b.n	8004f48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f0a:	f7fd fe25 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8004f0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004f10:	e01a      	b.n	8004f48 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004f18:	e016      	b.n	8004f48 <UART_SetConfig+0x308>
 8004f1a:	bf00      	nop
 8004f1c:	cfff69f3 	.word	0xcfff69f3
 8004f20:	40008000 	.word	0x40008000
 8004f24:	40013800 	.word	0x40013800
 8004f28:	40021000 	.word	0x40021000
 8004f2c:	40004400 	.word	0x40004400
 8004f30:	40004800 	.word	0x40004800
 8004f34:	40004c00 	.word	0x40004c00
 8004f38:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004f46:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f000 812a 	beq.w	80051a4 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f54:	4a9e      	ldr	r2, [pc, #632]	; (80051d0 <UART_SetConfig+0x590>)
 8004f56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f5e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f62:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	685a      	ldr	r2, [r3, #4]
 8004f68:	4613      	mov	r3, r2
 8004f6a:	005b      	lsls	r3, r3, #1
 8004f6c:	4413      	add	r3, r2
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d305      	bcc.n	8004f80 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	429a      	cmp	r2, r3
 8004f7e:	d903      	bls.n	8004f88 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8004f80:	2301      	movs	r3, #1
 8004f82:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004f86:	e10d      	b.n	80051a4 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	60bb      	str	r3, [r7, #8]
 8004f8e:	60fa      	str	r2, [r7, #12]
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f94:	4a8e      	ldr	r2, [pc, #568]	; (80051d0 <UART_SetConfig+0x590>)
 8004f96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	603b      	str	r3, [r7, #0]
 8004fa0:	607a      	str	r2, [r7, #4]
 8004fa2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fa6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004faa:	f7fb f9a1 	bl	80002f0 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4610      	mov	r0, r2
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	f04f 0200 	mov.w	r2, #0
 8004fba:	f04f 0300 	mov.w	r3, #0
 8004fbe:	020b      	lsls	r3, r1, #8
 8004fc0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fc4:	0202      	lsls	r2, r0, #8
 8004fc6:	6979      	ldr	r1, [r7, #20]
 8004fc8:	6849      	ldr	r1, [r1, #4]
 8004fca:	0849      	lsrs	r1, r1, #1
 8004fcc:	2000      	movs	r0, #0
 8004fce:	460c      	mov	r4, r1
 8004fd0:	4605      	mov	r5, r0
 8004fd2:	eb12 0804 	adds.w	r8, r2, r4
 8004fd6:	eb43 0905 	adc.w	r9, r3, r5
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	469a      	mov	sl, r3
 8004fe2:	4693      	mov	fp, r2
 8004fe4:	4652      	mov	r2, sl
 8004fe6:	465b      	mov	r3, fp
 8004fe8:	4640      	mov	r0, r8
 8004fea:	4649      	mov	r1, r9
 8004fec:	f7fb f980 	bl	80002f0 <__aeabi_uldivmod>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4613      	mov	r3, r2
 8004ff6:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004ffe:	d308      	bcc.n	8005012 <UART_SetConfig+0x3d2>
 8005000:	6a3b      	ldr	r3, [r7, #32]
 8005002:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005006:	d204      	bcs.n	8005012 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	6a3a      	ldr	r2, [r7, #32]
 800500e:	60da      	str	r2, [r3, #12]
 8005010:	e0c8      	b.n	80051a4 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8005012:	2301      	movs	r3, #1
 8005014:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8005018:	e0c4      	b.n	80051a4 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	69db      	ldr	r3, [r3, #28]
 800501e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005022:	d167      	bne.n	80050f4 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8005024:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005028:	2b08      	cmp	r3, #8
 800502a:	d828      	bhi.n	800507e <UART_SetConfig+0x43e>
 800502c:	a201      	add	r2, pc, #4	; (adr r2, 8005034 <UART_SetConfig+0x3f4>)
 800502e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005032:	bf00      	nop
 8005034:	08005059 	.word	0x08005059
 8005038:	08005061 	.word	0x08005061
 800503c:	08005069 	.word	0x08005069
 8005040:	0800507f 	.word	0x0800507f
 8005044:	0800506f 	.word	0x0800506f
 8005048:	0800507f 	.word	0x0800507f
 800504c:	0800507f 	.word	0x0800507f
 8005050:	0800507f 	.word	0x0800507f
 8005054:	08005077 	.word	0x08005077
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005058:	f7fd fdec 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 800505c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800505e:	e014      	b.n	800508a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005060:	f7fd fdfe 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 8005064:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005066:	e010      	b.n	800508a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005068:	4b5a      	ldr	r3, [pc, #360]	; (80051d4 <UART_SetConfig+0x594>)
 800506a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800506c:	e00d      	b.n	800508a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800506e:	f7fd fd73 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8005072:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005074:	e009      	b.n	800508a <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005076:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800507a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800507c:	e005      	b.n	800508a <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 800507e:	2300      	movs	r3, #0
 8005080:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005088:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 8089 	beq.w	80051a4 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	4a4e      	ldr	r2, [pc, #312]	; (80051d0 <UART_SetConfig+0x590>)
 8005098:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800509c:	461a      	mov	r2, r3
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	fbb3 f3f2 	udiv	r3, r3, r2
 80050a4:	005a      	lsls	r2, r3, #1
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	085b      	lsrs	r3, r3, #1
 80050ac:	441a      	add	r2, r3
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050b6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80050b8:	6a3b      	ldr	r3, [r7, #32]
 80050ba:	2b0f      	cmp	r3, #15
 80050bc:	d916      	bls.n	80050ec <UART_SetConfig+0x4ac>
 80050be:	6a3b      	ldr	r3, [r7, #32]
 80050c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050c4:	d212      	bcs.n	80050ec <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	f023 030f 	bic.w	r3, r3, #15
 80050ce:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80050d0:	6a3b      	ldr	r3, [r7, #32]
 80050d2:	085b      	lsrs	r3, r3, #1
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	f003 0307 	and.w	r3, r3, #7
 80050da:	b29a      	uxth	r2, r3
 80050dc:	8bfb      	ldrh	r3, [r7, #30]
 80050de:	4313      	orrs	r3, r2
 80050e0:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	8bfa      	ldrh	r2, [r7, #30]
 80050e8:	60da      	str	r2, [r3, #12]
 80050ea:	e05b      	b.n	80051a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80050ec:	2301      	movs	r3, #1
 80050ee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80050f2:	e057      	b.n	80051a4 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 80050f4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80050f8:	2b08      	cmp	r3, #8
 80050fa:	d828      	bhi.n	800514e <UART_SetConfig+0x50e>
 80050fc:	a201      	add	r2, pc, #4	; (adr r2, 8005104 <UART_SetConfig+0x4c4>)
 80050fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005102:	bf00      	nop
 8005104:	08005129 	.word	0x08005129
 8005108:	08005131 	.word	0x08005131
 800510c:	08005139 	.word	0x08005139
 8005110:	0800514f 	.word	0x0800514f
 8005114:	0800513f 	.word	0x0800513f
 8005118:	0800514f 	.word	0x0800514f
 800511c:	0800514f 	.word	0x0800514f
 8005120:	0800514f 	.word	0x0800514f
 8005124:	08005147 	.word	0x08005147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005128:	f7fd fd84 	bl	8002c34 <HAL_RCC_GetPCLK1Freq>
 800512c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800512e:	e014      	b.n	800515a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005130:	f7fd fd96 	bl	8002c60 <HAL_RCC_GetPCLK2Freq>
 8005134:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005136:	e010      	b.n	800515a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005138:	4b26      	ldr	r3, [pc, #152]	; (80051d4 <UART_SetConfig+0x594>)
 800513a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800513c:	e00d      	b.n	800515a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800513e:	f7fd fd0b 	bl	8002b58 <HAL_RCC_GetSysClockFreq>
 8005142:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8005144:	e009      	b.n	800515a <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800514a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800514c:	e005      	b.n	800515a <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 800514e:	2300      	movs	r3, #0
 8005150:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8005158:	bf00      	nop
    }

    if (pclk != 0U)
 800515a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515c:	2b00      	cmp	r3, #0
 800515e:	d021      	beq.n	80051a4 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005164:	4a1a      	ldr	r2, [pc, #104]	; (80051d0 <UART_SetConfig+0x590>)
 8005166:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516a:	461a      	mov	r2, r3
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	085b      	lsrs	r3, r3, #1
 8005178:	441a      	add	r2, r3
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005182:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005184:	6a3b      	ldr	r3, [r7, #32]
 8005186:	2b0f      	cmp	r3, #15
 8005188:	d909      	bls.n	800519e <UART_SetConfig+0x55e>
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005190:	d205      	bcs.n	800519e <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005192:	6a3b      	ldr	r3, [r7, #32]
 8005194:	b29a      	uxth	r2, r3
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	60da      	str	r2, [r3, #12]
 800519c:	e002      	b.n	80051a4 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2200      	movs	r2, #0
 80051b8:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	2200      	movs	r2, #0
 80051be:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 80051c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3730      	adds	r7, #48	; 0x30
 80051c8:	46bd      	mov	sp, r7
 80051ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051ce:	bf00      	nop
 80051d0:	08007bf0 	.word	0x08007bf0
 80051d4:	00f42400 	.word	0x00f42400

080051d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051d8:	b480      	push	{r7}
 80051da:	b083      	sub	sp, #12
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051e4:	f003 0301 	and.w	r3, r3, #1
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d00a      	beq.n	8005202 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	430a      	orrs	r2, r1
 8005200:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005206:	f003 0302 	and.w	r3, r3, #2
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00a      	beq.n	8005224 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	430a      	orrs	r2, r1
 8005222:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	f003 0304 	and.w	r3, r3, #4
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00a      	beq.n	8005246 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	430a      	orrs	r2, r1
 8005244:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524a:	f003 0308 	and.w	r3, r3, #8
 800524e:	2b00      	cmp	r3, #0
 8005250:	d00a      	beq.n	8005268 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	430a      	orrs	r2, r1
 8005266:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526c:	f003 0310 	and.w	r3, r3, #16
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00a      	beq.n	800528a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	430a      	orrs	r2, r1
 8005288:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800528e:	f003 0320 	and.w	r3, r3, #32
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00a      	beq.n	80052ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	689b      	ldr	r3, [r3, #8]
 800529c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	430a      	orrs	r2, r1
 80052aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01a      	beq.n	80052ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	430a      	orrs	r2, r1
 80052cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052d6:	d10a      	bne.n	80052ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d00a      	beq.n	8005310 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	430a      	orrs	r2, r1
 800530e:	605a      	str	r2, [r3, #4]
  }
}
 8005310:	bf00      	nop
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af02      	add	r7, sp, #8
 8005322:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2200      	movs	r2, #0
 8005328:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800532c:	f7fc f9ba 	bl	80016a4 <HAL_GetTick>
 8005330:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0308 	and.w	r3, r3, #8
 800533c:	2b08      	cmp	r3, #8
 800533e:	d10e      	bne.n	800535e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005340:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005344:	9300      	str	r3, [sp, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 f82f 	bl	80053b2 <UART_WaitOnFlagUntilTimeout>
 8005354:	4603      	mov	r3, r0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d001      	beq.n	800535e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800535a:	2303      	movs	r3, #3
 800535c:	e025      	b.n	80053aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b04      	cmp	r3, #4
 800536a:	d10e      	bne.n	800538a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800536c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005370:	9300      	str	r3, [sp, #0]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f819 	bl	80053b2 <UART_WaitOnFlagUntilTimeout>
 8005380:	4603      	mov	r3, r0
 8005382:	2b00      	cmp	r3, #0
 8005384:	d001      	beq.n	800538a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005386:	2303      	movs	r3, #3
 8005388:	e00f      	b.n	80053aa <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2220      	movs	r2, #32
 8005396:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2200      	movs	r2, #0
 800539e:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2200      	movs	r2, #0
 80053a4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3710      	adds	r7, #16
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}

080053b2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b09c      	sub	sp, #112	; 0x70
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	60f8      	str	r0, [r7, #12]
 80053ba:	60b9      	str	r1, [r7, #8]
 80053bc:	603b      	str	r3, [r7, #0]
 80053be:	4613      	mov	r3, r2
 80053c0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053c2:	e0a9      	b.n	8005518 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053ca:	f000 80a5 	beq.w	8005518 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ce:	f7fc f969 	bl	80016a4 <HAL_GetTick>
 80053d2:	4602      	mov	r2, r0
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	1ad3      	subs	r3, r2, r3
 80053d8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80053da:	429a      	cmp	r2, r3
 80053dc:	d302      	bcc.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x32>
 80053de:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d140      	bne.n	8005466 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053ec:	e853 3f00 	ldrex	r3, [r3]
 80053f0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053f4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80053f8:	667b      	str	r3, [r7, #100]	; 0x64
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005402:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005404:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005406:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005408:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800540a:	e841 2300 	strex	r3, r2, [r1]
 800540e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005410:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005412:	2b00      	cmp	r3, #0
 8005414:	d1e6      	bne.n	80053e4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	3308      	adds	r3, #8
 800541c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005420:	e853 3f00 	ldrex	r3, [r3]
 8005424:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	f023 0301 	bic.w	r3, r3, #1
 800542c:	663b      	str	r3, [r7, #96]	; 0x60
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	3308      	adds	r3, #8
 8005434:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005436:	64ba      	str	r2, [r7, #72]	; 0x48
 8005438:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800543a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800543c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800543e:	e841 2300 	strex	r3, r2, [r1]
 8005442:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005444:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d1e5      	bne.n	8005416 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2220      	movs	r2, #32
 800544e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8005462:	2303      	movs	r3, #3
 8005464:	e069      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0304 	and.w	r3, r3, #4
 8005470:	2b00      	cmp	r3, #0
 8005472:	d051      	beq.n	8005518 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800547e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005482:	d149      	bne.n	8005518 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800548c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800549c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800549e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80054a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	461a      	mov	r2, r3
 80054aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054ac:	637b      	str	r3, [r7, #52]	; 0x34
 80054ae:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80054ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e6      	bne.n	800548e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	3308      	adds	r3, #8
 80054c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	e853 3f00 	ldrex	r3, [r3]
 80054ce:	613b      	str	r3, [r7, #16]
   return(result);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 0301 	bic.w	r3, r3, #1
 80054d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	3308      	adds	r3, #8
 80054de:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80054e0:	623a      	str	r2, [r7, #32]
 80054e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054e4:	69f9      	ldr	r1, [r7, #28]
 80054e6:	6a3a      	ldr	r2, [r7, #32]
 80054e8:	e841 2300 	strex	r3, r2, [r1]
 80054ec:	61bb      	str	r3, [r7, #24]
   return(result);
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e5      	bne.n	80054c0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2220      	movs	r2, #32
 80054f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2220      	movs	r2, #32
 8005500:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	2220      	movs	r2, #32
 8005508:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8005514:	2303      	movs	r3, #3
 8005516:	e010      	b.n	800553a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	69da      	ldr	r2, [r3, #28]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	429a      	cmp	r2, r3
 8005526:	bf0c      	ite	eq
 8005528:	2301      	moveq	r3, #1
 800552a:	2300      	movne	r3, #0
 800552c:	b2db      	uxtb	r3, r3
 800552e:	461a      	mov	r2, r3
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	429a      	cmp	r2, r3
 8005534:	f43f af46 	beq.w	80053c4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3770      	adds	r7, #112	; 0x70
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
	...

08005544 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005544:	b480      	push	{r7}
 8005546:	b0a3      	sub	sp, #140	; 0x8c
 8005548:	af00      	add	r7, sp, #0
 800554a:	60f8      	str	r0, [r7, #12]
 800554c:	60b9      	str	r1, [r7, #8]
 800554e:	4613      	mov	r3, r2
 8005550:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	68ba      	ldr	r2, [r7, #8]
 8005556:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	88fa      	ldrh	r2, [r7, #6]
 8005564:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2200      	movs	r2, #0
 800556c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005576:	d10e      	bne.n	8005596 <UART_Start_Receive_IT+0x52>
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	691b      	ldr	r3, [r3, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d105      	bne.n	800558c <UART_Start_Receive_IT+0x48>
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	f240 12ff 	movw	r2, #511	; 0x1ff
 8005586:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800558a:	e02d      	b.n	80055e8 <UART_Start_Receive_IT+0xa4>
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	22ff      	movs	r2, #255	; 0xff
 8005590:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8005594:	e028      	b.n	80055e8 <UART_Start_Receive_IT+0xa4>
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	689b      	ldr	r3, [r3, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d10d      	bne.n	80055ba <UART_Start_Receive_IT+0x76>
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d104      	bne.n	80055b0 <UART_Start_Receive_IT+0x6c>
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	22ff      	movs	r2, #255	; 0xff
 80055aa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055ae:	e01b      	b.n	80055e8 <UART_Start_Receive_IT+0xa4>
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	227f      	movs	r2, #127	; 0x7f
 80055b4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055b8:	e016      	b.n	80055e8 <UART_Start_Receive_IT+0xa4>
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80055c2:	d10d      	bne.n	80055e0 <UART_Start_Receive_IT+0x9c>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	691b      	ldr	r3, [r3, #16]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <UART_Start_Receive_IT+0x92>
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	227f      	movs	r2, #127	; 0x7f
 80055d0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055d4:	e008      	b.n	80055e8 <UART_Start_Receive_IT+0xa4>
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	223f      	movs	r2, #63	; 0x3f
 80055da:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80055de:	e003      	b.n	80055e8 <UART_Start_Receive_IT+0xa4>
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	2200      	movs	r2, #0
 80055e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2200      	movs	r2, #0
 80055ec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2222      	movs	r2, #34	; 0x22
 80055f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3308      	adds	r3, #8
 80055fe:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005600:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005602:	e853 3f00 	ldrex	r3, [r3]
 8005606:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005608:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800560a:	f043 0301 	orr.w	r3, r3, #1
 800560e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	3308      	adds	r3, #8
 8005618:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800561c:	673a      	str	r2, [r7, #112]	; 0x70
 800561e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005620:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8005622:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005624:	e841 2300 	strex	r3, r2, [r1]
 8005628:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 800562a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800562c:	2b00      	cmp	r3, #0
 800562e:	d1e3      	bne.n	80055f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005634:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005638:	d153      	bne.n	80056e2 <UART_Start_Receive_IT+0x19e>
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005640:	88fa      	ldrh	r2, [r7, #6]
 8005642:	429a      	cmp	r2, r3
 8005644:	d34d      	bcc.n	80056e2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800564e:	d107      	bne.n	8005660 <UART_Start_Receive_IT+0x11c>
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	691b      	ldr	r3, [r3, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d103      	bne.n	8005660 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a4b      	ldr	r2, [pc, #300]	; (8005788 <UART_Start_Receive_IT+0x244>)
 800565c:	671a      	str	r2, [r3, #112]	; 0x70
 800565e:	e002      	b.n	8005666 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	4a4a      	ldr	r2, [pc, #296]	; (800578c <UART_Start_Receive_IT+0x248>)
 8005664:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d01a      	beq.n	80056ac <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800567c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800567e:	e853 3f00 	ldrex	r3, [r3]
 8005682:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005684:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800568a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	461a      	mov	r2, r3
 8005694:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005698:	65fb      	str	r3, [r7, #92]	; 0x5c
 800569a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800569c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800569e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80056a0:	e841 2300 	strex	r3, r2, [r1]
 80056a4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80056a6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d1e4      	bne.n	8005676 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	3308      	adds	r3, #8
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056b6:	e853 3f00 	ldrex	r3, [r3]
 80056ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80056bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	3308      	adds	r3, #8
 80056ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80056cc:	64ba      	str	r2, [r7, #72]	; 0x48
 80056ce:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056d0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80056d2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80056d4:	e841 2300 	strex	r3, r2, [r1]
 80056d8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80056da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d1e5      	bne.n	80056ac <UART_Start_Receive_IT+0x168>
 80056e0:	e04a      	b.n	8005778 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056ea:	d107      	bne.n	80056fc <UART_Start_Receive_IT+0x1b8>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d103      	bne.n	80056fc <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4a26      	ldr	r2, [pc, #152]	; (8005790 <UART_Start_Receive_IT+0x24c>)
 80056f8:	671a      	str	r2, [r3, #112]	; 0x70
 80056fa:	e002      	b.n	8005702 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4a25      	ldr	r2, [pc, #148]	; (8005794 <UART_Start_Receive_IT+0x250>)
 8005700:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d019      	beq.n	8005746 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800571a:	e853 3f00 	ldrex	r3, [r3]
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8005726:	677b      	str	r3, [r7, #116]	; 0x74
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	461a      	mov	r2, r3
 800572e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005730:	637b      	str	r3, [r7, #52]	; 0x34
 8005732:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800573e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e6      	bne.n	8005712 <UART_Start_Receive_IT+0x1ce>
 8005744:	e018      	b.n	8005778 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	e853 3f00 	ldrex	r3, [r3]
 8005752:	613b      	str	r3, [r7, #16]
   return(result);
 8005754:	693b      	ldr	r3, [r7, #16]
 8005756:	f043 0320 	orr.w	r3, r3, #32
 800575a:	67bb      	str	r3, [r7, #120]	; 0x78
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	461a      	mov	r2, r3
 8005762:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005764:	623b      	str	r3, [r7, #32]
 8005766:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	6a3a      	ldr	r2, [r7, #32]
 800576c:	e841 2300 	strex	r3, r2, [r1]
 8005770:	61bb      	str	r3, [r7, #24]
   return(result);
 8005772:	69bb      	ldr	r3, [r7, #24]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1e6      	bne.n	8005746 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	378c      	adds	r7, #140	; 0x8c
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	08005ea1 	.word	0x08005ea1
 800578c:	08005ba9 	.word	0x08005ba9
 8005790:	08005a47 	.word	0x08005a47
 8005794:	080058e7 	.word	0x080058e7

08005798 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005798:	b480      	push	{r7}
 800579a:	b095      	sub	sp, #84	; 0x54
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a8:	e853 3f00 	ldrex	r3, [r3]
 80057ac:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80057ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057b0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057b4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	461a      	mov	r2, r3
 80057bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057be:	643b      	str	r3, [r7, #64]	; 0x40
 80057c0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80057c4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80057c6:	e841 2300 	strex	r3, r2, [r1]
 80057ca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1e6      	bne.n	80057a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	3308      	adds	r3, #8
 80057d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	e853 3f00 	ldrex	r3, [r3]
 80057e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057e8:	f023 0301 	bic.w	r3, r3, #1
 80057ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3308      	adds	r3, #8
 80057f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80057f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80057f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80057fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057fe:	e841 2300 	strex	r3, r2, [r1]
 8005802:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d1e3      	bne.n	80057d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800580e:	2b01      	cmp	r3, #1
 8005810:	d118      	bne.n	8005844 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	f023 0310 	bic.w	r3, r3, #16
 8005826:	647b      	str	r3, [r7, #68]	; 0x44
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	461a      	mov	r2, r3
 800582e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005830:	61bb      	str	r3, [r7, #24]
 8005832:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005834:	6979      	ldr	r1, [r7, #20]
 8005836:	69ba      	ldr	r2, [r7, #24]
 8005838:	e841 2300 	strex	r3, r2, [r1]
 800583c:	613b      	str	r3, [r7, #16]
   return(result);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d1e6      	bne.n	8005812 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2220      	movs	r2, #32
 8005848:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2200      	movs	r2, #0
 8005850:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	671a      	str	r2, [r3, #112]	; 0x70
}
 8005858:	bf00      	nop
 800585a:	3754      	adds	r7, #84	; 0x54
 800585c:	46bd      	mov	sp, r7
 800585e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005862:	4770      	bx	lr

08005864 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005870:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2200      	movs	r2, #0
 8005876:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005882:	68f8      	ldr	r0, [r7, #12]
 8005884:	f7ff f9c6 	bl	8004c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005888:	bf00      	nop
 800588a:	3710      	adds	r7, #16
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	b088      	sub	sp, #32
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	e853 3f00 	ldrex	r3, [r3]
 80058a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058ac:	61fb      	str	r3, [r7, #28]
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	461a      	mov	r2, r3
 80058b4:	69fb      	ldr	r3, [r7, #28]
 80058b6:	61bb      	str	r3, [r7, #24]
 80058b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ba:	6979      	ldr	r1, [r7, #20]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	613b      	str	r3, [r7, #16]
   return(result);
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e6      	bne.n	8005898 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff f991 	bl	8004c00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058de:	bf00      	nop
 80058e0:	3720      	adds	r7, #32
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b096      	sub	sp, #88	; 0x58
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058fe:	2b22      	cmp	r3, #34	; 0x22
 8005900:	f040 8095 	bne.w	8005a2e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800590e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8005912:	b2d9      	uxtb	r1, r3
 8005914:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005918:	b2da      	uxtb	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800591e:	400a      	ands	r2, r1
 8005920:	b2d2      	uxtb	r2, r2
 8005922:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005928:	1c5a      	adds	r2, r3, #1
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005934:	b29b      	uxth	r3, r3
 8005936:	3b01      	subs	r3, #1
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005946:	b29b      	uxth	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d178      	bne.n	8005a3e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005952:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005954:	e853 3f00 	ldrex	r3, [r3]
 8005958:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800595a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800595c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005960:	653b      	str	r3, [r7, #80]	; 0x50
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	461a      	mov	r2, r3
 8005968:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800596a:	647b      	str	r3, [r7, #68]	; 0x44
 800596c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005970:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005978:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e6      	bne.n	800594c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	3308      	adds	r3, #8
 8005984:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005988:	e853 3f00 	ldrex	r3, [r3]
 800598c:	623b      	str	r3, [r7, #32]
   return(result);
 800598e:	6a3b      	ldr	r3, [r7, #32]
 8005990:	f023 0301 	bic.w	r3, r3, #1
 8005994:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3308      	adds	r3, #8
 800599c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800599e:	633a      	str	r2, [r7, #48]	; 0x30
 80059a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059a6:	e841 2300 	strex	r3, r2, [r1]
 80059aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80059ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d1e5      	bne.n	800597e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2200      	movs	r2, #0
 80059be:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d12e      	bne.n	8005a26 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	e853 3f00 	ldrex	r3, [r3]
 80059da:	60fb      	str	r3, [r7, #12]
   return(result);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f023 0310 	bic.w	r3, r3, #16
 80059e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	461a      	mov	r2, r3
 80059ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ec:	61fb      	str	r3, [r7, #28]
 80059ee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f0:	69b9      	ldr	r1, [r7, #24]
 80059f2:	69fa      	ldr	r2, [r7, #28]
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	617b      	str	r3, [r7, #20]
   return(result);
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e6      	bne.n	80059ce <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	69db      	ldr	r3, [r3, #28]
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	2b10      	cmp	r3, #16
 8005a0c:	d103      	bne.n	8005a16 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2210      	movs	r2, #16
 8005a14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005a1c:	4619      	mov	r1, r3
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff f902 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a24:	e00b      	b.n	8005a3e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7fb f8a2 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8005a2c:	e007      	b.n	8005a3e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699a      	ldr	r2, [r3, #24]
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	f042 0208 	orr.w	r2, r2, #8
 8005a3c:	619a      	str	r2, [r3, #24]
}
 8005a3e:	bf00      	nop
 8005a40:	3758      	adds	r7, #88	; 0x58
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}

08005a46 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005a46:	b580      	push	{r7, lr}
 8005a48:	b096      	sub	sp, #88	; 0x58
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a54:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a5e:	2b22      	cmp	r3, #34	; 0x22
 8005a60:	f040 8095 	bne.w	8005b8e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a6a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a72:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005a74:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005a78:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	b29a      	uxth	r2, r3
 8005a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a88:	1c9a      	adds	r2, r3, #2
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a94:	b29b      	uxth	r3, r3
 8005a96:	3b01      	subs	r3, #1
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d178      	bne.n	8005b9e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab4:	e853 3f00 	ldrex	r3, [r3]
 8005ab8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005abc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ac0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aca:	643b      	str	r3, [r7, #64]	; 0x40
 8005acc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ace:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ad0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ad2:	e841 2300 	strex	r3, r2, [r1]
 8005ad6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d1e6      	bne.n	8005aac <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	3308      	adds	r3, #8
 8005ae4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	e853 3f00 	ldrex	r3, [r3]
 8005aec:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	f023 0301 	bic.w	r3, r3, #1
 8005af4:	64bb      	str	r3, [r7, #72]	; 0x48
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	3308      	adds	r3, #8
 8005afc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005afe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b02:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b06:	e841 2300 	strex	r3, r2, [r1]
 8005b0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d1e5      	bne.n	8005ade <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d12e      	bne.n	8005b86 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	e853 3f00 	ldrex	r3, [r3]
 8005b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f023 0310 	bic.w	r3, r3, #16
 8005b42:	647b      	str	r3, [r7, #68]	; 0x44
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b4c:	61bb      	str	r3, [r7, #24]
 8005b4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b50:	6979      	ldr	r1, [r7, #20]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	e841 2300 	strex	r3, r2, [r1]
 8005b58:	613b      	str	r3, [r7, #16]
   return(result);
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d1e6      	bne.n	8005b2e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f003 0310 	and.w	r3, r3, #16
 8005b6a:	2b10      	cmp	r3, #16
 8005b6c:	d103      	bne.n	8005b76 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	2210      	movs	r2, #16
 8005b74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b7c:	4619      	mov	r1, r3
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f7ff f852 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b84:	e00b      	b.n	8005b9e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f7fa fff2 	bl	8000b70 <HAL_UART_RxCpltCallback>
}
 8005b8c:	e007      	b.n	8005b9e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	699a      	ldr	r2, [r3, #24]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f042 0208 	orr.w	r2, r2, #8
 8005b9c:	619a      	str	r2, [r3, #24]
}
 8005b9e:	bf00      	nop
 8005ba0:	3758      	adds	r7, #88	; 0x58
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
	...

08005ba8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b0a6      	sub	sp, #152	; 0x98
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005bb6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	69db      	ldr	r3, [r3, #28]
 8005bc0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bde:	2b22      	cmp	r3, #34	; 0x22
 8005be0:	f040 814f 	bne.w	8005e82 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005bea:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005bee:	e0f6      	b.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf6:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005bfa:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 8005bfe:	b2d9      	uxtb	r1, r3
 8005c00:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c0a:	400a      	ands	r2, r1
 8005c0c:	b2d2      	uxtb	r2, r2
 8005c0e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005c20:	b29b      	uxth	r3, r3
 8005c22:	3b01      	subs	r3, #1
 8005c24:	b29a      	uxth	r2, r3
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	69db      	ldr	r3, [r3, #28]
 8005c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005c36:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c3a:	f003 0307 	and.w	r3, r3, #7
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d053      	beq.n	8005cea <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005c42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d011      	beq.n	8005c72 <UART_RxISR_8BIT_FIFOEN+0xca>
 8005c4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005c52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d00b      	beq.n	8005c72 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c68:	f043 0201 	orr.w	r2, r3, #1
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005c72:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005c76:	f003 0302 	and.w	r3, r3, #2
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d011      	beq.n	8005ca2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005c7e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00b      	beq.n	8005ca2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005c98:	f043 0204 	orr.w	r2, r3, #4
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005ca2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005ca6:	f003 0304 	and.w	r3, r3, #4
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d011      	beq.n	8005cd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8005cae:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005cb2:	f003 0301 	and.w	r3, r3, #1
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	2204      	movs	r2, #4
 8005cc0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cc8:	f043 0202 	orr.w	r2, r3, #2
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d006      	beq.n	8005cea <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cdc:	6878      	ldr	r0, [r7, #4]
 8005cde:	f7fe ff99 	bl	8004c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d173      	bne.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cfc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005cfe:	e853 3f00 	ldrex	r3, [r3]
 8005d02:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005d04:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005d06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d0a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	461a      	mov	r2, r3
 8005d14:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005d18:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d1a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d1c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005d1e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005d20:	e841 2300 	strex	r3, r2, [r1]
 8005d24:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8005d26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1e4      	bne.n	8005cf6 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	3308      	adds	r3, #8
 8005d32:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005d36:	e853 3f00 	ldrex	r3, [r3]
 8005d3a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005d42:	f023 0301 	bic.w	r3, r3, #1
 8005d46:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	3308      	adds	r3, #8
 8005d4e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005d50:	657a      	str	r2, [r7, #84]	; 0x54
 8005d52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005d56:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d58:	e841 2300 	strex	r3, r2, [r1]
 8005d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005d5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d1e3      	bne.n	8005d2c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2220      	movs	r2, #32
 8005d68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d12e      	bne.n	8005dd8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d88:	e853 3f00 	ldrex	r3, [r3]
 8005d8c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d90:	f023 0310 	bic.w	r3, r3, #16
 8005d94:	67bb      	str	r3, [r7, #120]	; 0x78
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005d9e:	643b      	str	r3, [r7, #64]	; 0x40
 8005da0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005da4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005da6:	e841 2300 	strex	r3, r2, [r1]
 8005daa:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d1e6      	bne.n	8005d80 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	f003 0310 	and.w	r3, r3, #16
 8005dbc:	2b10      	cmp	r3, #16
 8005dbe:	d103      	bne.n	8005dc8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2210      	movs	r2, #16
 8005dc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005dce:	4619      	mov	r1, r3
 8005dd0:	6878      	ldr	r0, [r7, #4]
 8005dd2:	f7fe ff29 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
 8005dd6:	e002      	b.n	8005dde <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f7fa fec9 	bl	8000b70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005dde:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d006      	beq.n	8005df4 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8005de6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005dea:	f003 0320 	and.w	r3, r3, #32
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f47f aefe 	bne.w	8005bf0 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005dfa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005dfe:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d045      	beq.n	8005e92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005e0c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8005e10:	429a      	cmp	r2, r3
 8005e12:	d23e      	bcs.n	8005e92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	3308      	adds	r3, #8
 8005e1a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e1c:	6a3b      	ldr	r3, [r7, #32]
 8005e1e:	e853 3f00 	ldrex	r3, [r3]
 8005e22:	61fb      	str	r3, [r7, #28]
   return(result);
 8005e24:	69fb      	ldr	r3, [r7, #28]
 8005e26:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e2a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3308      	adds	r3, #8
 8005e32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8005e34:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005e36:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e38:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005e3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e3c:	e841 2300 	strex	r3, r2, [r1]
 8005e40:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d1e5      	bne.n	8005e14 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	4a14      	ldr	r2, [pc, #80]	; (8005e9c <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8005e4c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	e853 3f00 	ldrex	r3, [r3]
 8005e5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	f043 0320 	orr.w	r3, r3, #32
 8005e62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005e6c:	61bb      	str	r3, [r7, #24]
 8005e6e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e70:	6979      	ldr	r1, [r7, #20]
 8005e72:	69ba      	ldr	r2, [r7, #24]
 8005e74:	e841 2300 	strex	r3, r2, [r1]
 8005e78:	613b      	str	r3, [r7, #16]
   return(result);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1e6      	bne.n	8005e4e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005e80:	e007      	b.n	8005e92 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	699a      	ldr	r2, [r3, #24]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f042 0208 	orr.w	r2, r2, #8
 8005e90:	619a      	str	r2, [r3, #24]
}
 8005e92:	bf00      	nop
 8005e94:	3798      	adds	r7, #152	; 0x98
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	080058e7 	.word	0x080058e7

08005ea0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b0a8      	sub	sp, #160	; 0xa0
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005eae:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ed6:	2b22      	cmp	r3, #34	; 0x22
 8005ed8:	f040 8153 	bne.w	8006182 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ee2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005ee6:	e0fa      	b.n	80060de <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ef6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8005efa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8005efe:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8005f02:	4013      	ands	r3, r2
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005f0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f10:	1c9a      	adds	r2, r3, #2
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	3b01      	subs	r3, #1
 8005f20:	b29a      	uxth	r2, r3
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	69db      	ldr	r3, [r3, #28]
 8005f2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005f32:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d053      	beq.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f3e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d011      	beq.n	8005f6e <UART_RxISR_16BIT_FIFOEN+0xce>
 8005f4a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00b      	beq.n	8005f6e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f64:	f043 0201 	orr.w	r2, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f72:	f003 0302 	and.w	r3, r3, #2
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d011      	beq.n	8005f9e <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005f7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00b      	beq.n	8005f9e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f94:	f043 0204 	orr.w	r2, r3, #4
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f9e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005fa2:	f003 0304 	and.w	r3, r3, #4
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d011      	beq.n	8005fce <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005faa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fae:	f003 0301 	and.w	r3, r3, #1
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00b      	beq.n	8005fce <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2204      	movs	r2, #4
 8005fbc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fc4:	f043 0202 	orr.w	r2, r3, #2
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d006      	beq.n	8005fe6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7fe fe1b 	bl	8004c14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	2200      	movs	r2, #0
 8005fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005fec:	b29b      	uxth	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d175      	bne.n	80060de <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ff8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005ffa:	e853 3f00 	ldrex	r3, [r3]
 8005ffe:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006000:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006002:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006006:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006014:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006016:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006018:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800601a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800601c:	e841 2300 	strex	r3, r2, [r1]
 8006020:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006022:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1e4      	bne.n	8005ff2 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	3308      	adds	r3, #8
 800602e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006038:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800603a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800603e:	f023 0301 	bic.w	r3, r3, #1
 8006042:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	3308      	adds	r3, #8
 800604c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006050:	65ba      	str	r2, [r7, #88]	; 0x58
 8006052:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006054:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006056:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006058:	e841 2300 	strex	r3, r2, [r1]
 800605c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800605e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e1      	bne.n	8006028 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2220      	movs	r2, #32
 8006068:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006076:	2b01      	cmp	r3, #1
 8006078:	d12e      	bne.n	80060d8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006088:	e853 3f00 	ldrex	r3, [r3]
 800608c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800608e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006090:	f023 0310 	bic.w	r3, r3, #16
 8006094:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800609e:	647b      	str	r3, [r7, #68]	; 0x44
 80060a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80060a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060a6:	e841 2300 	strex	r3, r2, [r1]
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80060ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d1e6      	bne.n	8006080 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	69db      	ldr	r3, [r3, #28]
 80060b8:	f003 0310 	and.w	r3, r3, #16
 80060bc:	2b10      	cmp	r3, #16
 80060be:	d103      	bne.n	80060c8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2210      	movs	r2, #16
 80060c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80060ce:	4619      	mov	r1, r3
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f7fe fda9 	bl	8004c28 <HAL_UARTEx_RxEventCallback>
 80060d6:	e002      	b.n	80060de <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80060d8:	6878      	ldr	r0, [r7, #4]
 80060da:	f7fa fd49 	bl	8000b70 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80060de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d006      	beq.n	80060f4 <UART_RxISR_16BIT_FIFOEN+0x254>
 80060e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80060ea:	f003 0320 	and.w	r3, r3, #32
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	f47f aefa 	bne.w	8005ee8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80060fa:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80060fe:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8006102:	2b00      	cmp	r3, #0
 8006104:	d045      	beq.n	8006192 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800610c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8006110:	429a      	cmp	r2, r3
 8006112:	d23e      	bcs.n	8006192 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3308      	adds	r3, #8
 800611a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	e853 3f00 	ldrex	r3, [r3]
 8006122:	623b      	str	r3, [r7, #32]
   return(result);
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800612a:	677b      	str	r3, [r7, #116]	; 0x74
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	3308      	adds	r3, #8
 8006132:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8006134:	633a      	str	r2, [r7, #48]	; 0x30
 8006136:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006138:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800613a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800613c:	e841 2300 	strex	r3, r2, [r1]
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006144:	2b00      	cmp	r3, #0
 8006146:	d1e5      	bne.n	8006114 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	4a14      	ldr	r2, [pc, #80]	; (800619c <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 800614c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	e853 3f00 	ldrex	r3, [r3]
 800615a:	60fb      	str	r3, [r7, #12]
   return(result);
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f043 0320 	orr.w	r3, r3, #32
 8006162:	673b      	str	r3, [r7, #112]	; 0x70
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	461a      	mov	r2, r3
 800616a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006170:	69b9      	ldr	r1, [r7, #24]
 8006172:	69fa      	ldr	r2, [r7, #28]
 8006174:	e841 2300 	strex	r3, r2, [r1]
 8006178:	617b      	str	r3, [r7, #20]
   return(result);
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d1e6      	bne.n	800614e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006180:	e007      	b.n	8006192 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699a      	ldr	r2, [r3, #24]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f042 0208 	orr.w	r2, r2, #8
 8006190:	619a      	str	r2, [r3, #24]
}
 8006192:	bf00      	nop
 8006194:	37a0      	adds	r7, #160	; 0xa0
 8006196:	46bd      	mov	sp, r7
 8006198:	bd80      	pop	{r7, pc}
 800619a:	bf00      	nop
 800619c:	08005a47 	.word	0x08005a47

080061a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80061a0:	b480      	push	{r7}
 80061a2:	b083      	sub	sp, #12
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80061a8:	bf00      	nop
 80061aa:	370c      	adds	r7, #12
 80061ac:	46bd      	mov	sp, r7
 80061ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b2:	4770      	bx	lr

080061b4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80061b4:	b480      	push	{r7}
 80061b6:	b083      	sub	sp, #12
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80061bc:	bf00      	nop
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b083      	sub	sp, #12
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr

080061dc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80061ea:	2b01      	cmp	r3, #1
 80061ec:	d101      	bne.n	80061f2 <HAL_UARTEx_DisableFifoMode+0x16>
 80061ee:	2302      	movs	r3, #2
 80061f0:	e027      	b.n	8006242 <HAL_UARTEx_DisableFifoMode+0x66>
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2201      	movs	r2, #1
 80061f6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2224      	movs	r2, #36	; 0x24
 80061fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681a      	ldr	r2, [r3, #0]
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f022 0201 	bic.w	r2, r2, #1
 8006218:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006220:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2220      	movs	r2, #32
 8006234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2200      	movs	r2, #0
 800623c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006240:	2300      	movs	r3, #0
}
 8006242:	4618      	mov	r0, r3
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr

0800624e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800624e:	b580      	push	{r7, lr}
 8006250:	b084      	sub	sp, #16
 8006252:	af00      	add	r7, sp, #0
 8006254:	6078      	str	r0, [r7, #4]
 8006256:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800625e:	2b01      	cmp	r3, #1
 8006260:	d101      	bne.n	8006266 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006262:	2302      	movs	r3, #2
 8006264:	e02d      	b.n	80062c2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2224      	movs	r2, #36	; 0x24
 8006272:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	f022 0201 	bic.w	r2, r2, #1
 800628c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	683a      	ldr	r2, [r7, #0]
 800629e:	430a      	orrs	r2, r1
 80062a0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 f850 	bl	8006348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	68fa      	ldr	r2, [r7, #12]
 80062ae:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2220      	movs	r2, #32
 80062b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2200      	movs	r2, #0
 80062bc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d101      	bne.n	80062e2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80062de:	2302      	movs	r3, #2
 80062e0:	e02d      	b.n	800633e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2201      	movs	r2, #1
 80062e6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2224      	movs	r2, #36	; 0x24
 80062ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f022 0201 	bic.w	r2, r2, #1
 8006308:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	683a      	ldr	r2, [r7, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f000 f812 	bl	8006348 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2220      	movs	r2, #32
 8006330:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800633c:	2300      	movs	r3, #0
}
 800633e:	4618      	mov	r0, r3
 8006340:	3710      	adds	r7, #16
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
	...

08006348 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006368:	e031      	b.n	80063ce <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800636a:	2308      	movs	r3, #8
 800636c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800636e:	2308      	movs	r3, #8
 8006370:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	689b      	ldr	r3, [r3, #8]
 8006378:	0e5b      	lsrs	r3, r3, #25
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f003 0307 	and.w	r3, r3, #7
 8006380:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	0f5b      	lsrs	r3, r3, #29
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f003 0307 	and.w	r3, r3, #7
 8006390:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006392:	7bbb      	ldrb	r3, [r7, #14]
 8006394:	7b3a      	ldrb	r2, [r7, #12]
 8006396:	4911      	ldr	r1, [pc, #68]	; (80063dc <UARTEx_SetNbDataToProcess+0x94>)
 8006398:	5c8a      	ldrb	r2, [r1, r2]
 800639a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800639e:	7b3a      	ldrb	r2, [r7, #12]
 80063a0:	490f      	ldr	r1, [pc, #60]	; (80063e0 <UARTEx_SetNbDataToProcess+0x98>)
 80063a2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80063a4:	fb93 f3f2 	sdiv	r3, r3, r2
 80063a8:	b29a      	uxth	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063b0:	7bfb      	ldrb	r3, [r7, #15]
 80063b2:	7b7a      	ldrb	r2, [r7, #13]
 80063b4:	4909      	ldr	r1, [pc, #36]	; (80063dc <UARTEx_SetNbDataToProcess+0x94>)
 80063b6:	5c8a      	ldrb	r2, [r1, r2]
 80063b8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80063bc:	7b7a      	ldrb	r2, [r7, #13]
 80063be:	4908      	ldr	r1, [pc, #32]	; (80063e0 <UARTEx_SetNbDataToProcess+0x98>)
 80063c0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80063c2:	fb93 f3f2 	sdiv	r3, r3, r2
 80063c6:	b29a      	uxth	r2, r3
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80063ce:	bf00      	nop
 80063d0:	3714      	adds	r7, #20
 80063d2:	46bd      	mov	sp, r7
 80063d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d8:	4770      	bx	lr
 80063da:	bf00      	nop
 80063dc:	08007c08 	.word	0x08007c08
 80063e0:	08007c10 	.word	0x08007c10

080063e4 <LL_TIM_SetPrescaler>:
{
 80063e4:	b480      	push	{r7}
 80063e6:	b083      	sub	sp, #12
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	683a      	ldr	r2, [r7, #0]
 80063f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80063f4:	bf00      	nop
 80063f6:	370c      	adds	r7, #12
 80063f8:	46bd      	mov	sp, r7
 80063fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fe:	4770      	bx	lr

08006400 <LL_TIM_SetAutoReload>:
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006410:	bf00      	nop
 8006412:	370c      	adds	r7, #12
 8006414:	46bd      	mov	sp, r7
 8006416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641a:	4770      	bx	lr

0800641c <LL_TIM_SetRepetitionCounter>:
{
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	683a      	ldr	r2, [r7, #0]
 800642a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	695b      	ldr	r3, [r3, #20]
 8006444:	f043 0201 	orr.w	r2, r3, #1
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	615a      	str	r2, [r3, #20]
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
 8006460:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a39      	ldr	r2, [pc, #228]	; (8006550 <LL_TIM_Init+0xf8>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00f      	beq.n	8006490 <LL_TIM_Init+0x38>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006476:	d00b      	beq.n	8006490 <LL_TIM_Init+0x38>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a36      	ldr	r2, [pc, #216]	; (8006554 <LL_TIM_Init+0xfc>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d007      	beq.n	8006490 <LL_TIM_Init+0x38>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a35      	ldr	r2, [pc, #212]	; (8006558 <LL_TIM_Init+0x100>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d003      	beq.n	8006490 <LL_TIM_Init+0x38>
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a34      	ldr	r2, [pc, #208]	; (800655c <LL_TIM_Init+0x104>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d106      	bne.n	800649e <LL_TIM_Init+0x46>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	4313      	orrs	r3, r2
 800649c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a2b      	ldr	r2, [pc, #172]	; (8006550 <LL_TIM_Init+0xf8>)
 80064a2:	4293      	cmp	r3, r2
 80064a4:	d01b      	beq.n	80064de <LL_TIM_Init+0x86>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064ac:	d017      	beq.n	80064de <LL_TIM_Init+0x86>
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <LL_TIM_Init+0xfc>)
 80064b2:	4293      	cmp	r3, r2
 80064b4:	d013      	beq.n	80064de <LL_TIM_Init+0x86>
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	4a27      	ldr	r2, [pc, #156]	; (8006558 <LL_TIM_Init+0x100>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d00f      	beq.n	80064de <LL_TIM_Init+0x86>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	4a26      	ldr	r2, [pc, #152]	; (800655c <LL_TIM_Init+0x104>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d00b      	beq.n	80064de <LL_TIM_Init+0x86>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	4a25      	ldr	r2, [pc, #148]	; (8006560 <LL_TIM_Init+0x108>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d007      	beq.n	80064de <LL_TIM_Init+0x86>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	4a24      	ldr	r2, [pc, #144]	; (8006564 <LL_TIM_Init+0x10c>)
 80064d2:	4293      	cmp	r3, r2
 80064d4:	d003      	beq.n	80064de <LL_TIM_Init+0x86>
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	4a23      	ldr	r2, [pc, #140]	; (8006568 <LL_TIM_Init+0x110>)
 80064da:	4293      	cmp	r3, r2
 80064dc:	d106      	bne.n	80064ec <LL_TIM_Init+0x94>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	4313      	orrs	r3, r2
 80064ea:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68fa      	ldr	r2, [r7, #12]
 80064f0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f7ff ff81 	bl	8006400 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	881b      	ldrh	r3, [r3, #0]
 8006502:	4619      	mov	r1, r3
 8006504:	6878      	ldr	r0, [r7, #4]
 8006506:	f7ff ff6d 	bl	80063e4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a10      	ldr	r2, [pc, #64]	; (8006550 <LL_TIM_Init+0xf8>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d00f      	beq.n	8006532 <LL_TIM_Init+0xda>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a11      	ldr	r2, [pc, #68]	; (800655c <LL_TIM_Init+0x104>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d00b      	beq.n	8006532 <LL_TIM_Init+0xda>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a10      	ldr	r2, [pc, #64]	; (8006560 <LL_TIM_Init+0x108>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d007      	beq.n	8006532 <LL_TIM_Init+0xda>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a0f      	ldr	r2, [pc, #60]	; (8006564 <LL_TIM_Init+0x10c>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d003      	beq.n	8006532 <LL_TIM_Init+0xda>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a0e      	ldr	r2, [pc, #56]	; (8006568 <LL_TIM_Init+0x110>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d105      	bne.n	800653e <LL_TIM_Init+0xe6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	691b      	ldr	r3, [r3, #16]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f7ff ff6f 	bl	800641c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f7ff ff7a 	bl	8006438 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8006544:	2300      	movs	r3, #0
}
 8006546:	4618      	mov	r0, r3
 8006548:	3710      	adds	r7, #16
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	40012c00 	.word	0x40012c00
 8006554:	40000400 	.word	0x40000400
 8006558:	40000800 	.word	0x40000800
 800655c:	40013400 	.word	0x40013400
 8006560:	40014000 	.word	0x40014000
 8006564:	40014400 	.word	0x40014400
 8006568:	40014800 	.word	0x40014800

0800656c <atoi>:
 800656c:	220a      	movs	r2, #10
 800656e:	2100      	movs	r1, #0
 8006570:	f000 b882 	b.w	8006678 <strtol>

08006574 <_strtol_l.constprop.0>:
 8006574:	2b01      	cmp	r3, #1
 8006576:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800657a:	d001      	beq.n	8006580 <_strtol_l.constprop.0+0xc>
 800657c:	2b24      	cmp	r3, #36	; 0x24
 800657e:	d906      	bls.n	800658e <_strtol_l.constprop.0+0x1a>
 8006580:	f000 fa68 	bl	8006a54 <__errno>
 8006584:	2316      	movs	r3, #22
 8006586:	6003      	str	r3, [r0, #0]
 8006588:	2000      	movs	r0, #0
 800658a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800658e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006674 <_strtol_l.constprop.0+0x100>
 8006592:	460d      	mov	r5, r1
 8006594:	462e      	mov	r6, r5
 8006596:	f815 4b01 	ldrb.w	r4, [r5], #1
 800659a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800659e:	f017 0708 	ands.w	r7, r7, #8
 80065a2:	d1f7      	bne.n	8006594 <_strtol_l.constprop.0+0x20>
 80065a4:	2c2d      	cmp	r4, #45	; 0x2d
 80065a6:	d132      	bne.n	800660e <_strtol_l.constprop.0+0x9a>
 80065a8:	782c      	ldrb	r4, [r5, #0]
 80065aa:	2701      	movs	r7, #1
 80065ac:	1cb5      	adds	r5, r6, #2
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d05b      	beq.n	800666a <_strtol_l.constprop.0+0xf6>
 80065b2:	2b10      	cmp	r3, #16
 80065b4:	d109      	bne.n	80065ca <_strtol_l.constprop.0+0x56>
 80065b6:	2c30      	cmp	r4, #48	; 0x30
 80065b8:	d107      	bne.n	80065ca <_strtol_l.constprop.0+0x56>
 80065ba:	782c      	ldrb	r4, [r5, #0]
 80065bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80065c0:	2c58      	cmp	r4, #88	; 0x58
 80065c2:	d14d      	bne.n	8006660 <_strtol_l.constprop.0+0xec>
 80065c4:	786c      	ldrb	r4, [r5, #1]
 80065c6:	2310      	movs	r3, #16
 80065c8:	3502      	adds	r5, #2
 80065ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80065ce:	f108 38ff 	add.w	r8, r8, #4294967295
 80065d2:	f04f 0e00 	mov.w	lr, #0
 80065d6:	fbb8 f9f3 	udiv	r9, r8, r3
 80065da:	4676      	mov	r6, lr
 80065dc:	fb03 8a19 	mls	sl, r3, r9, r8
 80065e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80065e4:	f1bc 0f09 	cmp.w	ip, #9
 80065e8:	d816      	bhi.n	8006618 <_strtol_l.constprop.0+0xa4>
 80065ea:	4664      	mov	r4, ip
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	dd24      	ble.n	800663a <_strtol_l.constprop.0+0xc6>
 80065f0:	f1be 3fff 	cmp.w	lr, #4294967295
 80065f4:	d008      	beq.n	8006608 <_strtol_l.constprop.0+0x94>
 80065f6:	45b1      	cmp	r9, r6
 80065f8:	d31c      	bcc.n	8006634 <_strtol_l.constprop.0+0xc0>
 80065fa:	d101      	bne.n	8006600 <_strtol_l.constprop.0+0x8c>
 80065fc:	45a2      	cmp	sl, r4
 80065fe:	db19      	blt.n	8006634 <_strtol_l.constprop.0+0xc0>
 8006600:	fb06 4603 	mla	r6, r6, r3, r4
 8006604:	f04f 0e01 	mov.w	lr, #1
 8006608:	f815 4b01 	ldrb.w	r4, [r5], #1
 800660c:	e7e8      	b.n	80065e0 <_strtol_l.constprop.0+0x6c>
 800660e:	2c2b      	cmp	r4, #43	; 0x2b
 8006610:	bf04      	itt	eq
 8006612:	782c      	ldrbeq	r4, [r5, #0]
 8006614:	1cb5      	addeq	r5, r6, #2
 8006616:	e7ca      	b.n	80065ae <_strtol_l.constprop.0+0x3a>
 8006618:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800661c:	f1bc 0f19 	cmp.w	ip, #25
 8006620:	d801      	bhi.n	8006626 <_strtol_l.constprop.0+0xb2>
 8006622:	3c37      	subs	r4, #55	; 0x37
 8006624:	e7e2      	b.n	80065ec <_strtol_l.constprop.0+0x78>
 8006626:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800662a:	f1bc 0f19 	cmp.w	ip, #25
 800662e:	d804      	bhi.n	800663a <_strtol_l.constprop.0+0xc6>
 8006630:	3c57      	subs	r4, #87	; 0x57
 8006632:	e7db      	b.n	80065ec <_strtol_l.constprop.0+0x78>
 8006634:	f04f 3eff 	mov.w	lr, #4294967295
 8006638:	e7e6      	b.n	8006608 <_strtol_l.constprop.0+0x94>
 800663a:	f1be 3fff 	cmp.w	lr, #4294967295
 800663e:	d105      	bne.n	800664c <_strtol_l.constprop.0+0xd8>
 8006640:	2322      	movs	r3, #34	; 0x22
 8006642:	6003      	str	r3, [r0, #0]
 8006644:	4646      	mov	r6, r8
 8006646:	b942      	cbnz	r2, 800665a <_strtol_l.constprop.0+0xe6>
 8006648:	4630      	mov	r0, r6
 800664a:	e79e      	b.n	800658a <_strtol_l.constprop.0+0x16>
 800664c:	b107      	cbz	r7, 8006650 <_strtol_l.constprop.0+0xdc>
 800664e:	4276      	negs	r6, r6
 8006650:	2a00      	cmp	r2, #0
 8006652:	d0f9      	beq.n	8006648 <_strtol_l.constprop.0+0xd4>
 8006654:	f1be 0f00 	cmp.w	lr, #0
 8006658:	d000      	beq.n	800665c <_strtol_l.constprop.0+0xe8>
 800665a:	1e69      	subs	r1, r5, #1
 800665c:	6011      	str	r1, [r2, #0]
 800665e:	e7f3      	b.n	8006648 <_strtol_l.constprop.0+0xd4>
 8006660:	2430      	movs	r4, #48	; 0x30
 8006662:	2b00      	cmp	r3, #0
 8006664:	d1b1      	bne.n	80065ca <_strtol_l.constprop.0+0x56>
 8006666:	2308      	movs	r3, #8
 8006668:	e7af      	b.n	80065ca <_strtol_l.constprop.0+0x56>
 800666a:	2c30      	cmp	r4, #48	; 0x30
 800666c:	d0a5      	beq.n	80065ba <_strtol_l.constprop.0+0x46>
 800666e:	230a      	movs	r3, #10
 8006670:	e7ab      	b.n	80065ca <_strtol_l.constprop.0+0x56>
 8006672:	bf00      	nop
 8006674:	08007c19 	.word	0x08007c19

08006678 <strtol>:
 8006678:	4613      	mov	r3, r2
 800667a:	460a      	mov	r2, r1
 800667c:	4601      	mov	r1, r0
 800667e:	4802      	ldr	r0, [pc, #8]	; (8006688 <strtol+0x10>)
 8006680:	6800      	ldr	r0, [r0, #0]
 8006682:	f7ff bf77 	b.w	8006574 <_strtol_l.constprop.0>
 8006686:	bf00      	nop
 8006688:	20000120 	.word	0x20000120

0800668c <std>:
 800668c:	2300      	movs	r3, #0
 800668e:	b510      	push	{r4, lr}
 8006690:	4604      	mov	r4, r0
 8006692:	e9c0 3300 	strd	r3, r3, [r0]
 8006696:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800669a:	6083      	str	r3, [r0, #8]
 800669c:	8181      	strh	r1, [r0, #12]
 800669e:	6643      	str	r3, [r0, #100]	; 0x64
 80066a0:	81c2      	strh	r2, [r0, #14]
 80066a2:	6183      	str	r3, [r0, #24]
 80066a4:	4619      	mov	r1, r3
 80066a6:	2208      	movs	r2, #8
 80066a8:	305c      	adds	r0, #92	; 0x5c
 80066aa:	f000 f928 	bl	80068fe <memset>
 80066ae:	4b0d      	ldr	r3, [pc, #52]	; (80066e4 <std+0x58>)
 80066b0:	6263      	str	r3, [r4, #36]	; 0x24
 80066b2:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <std+0x5c>)
 80066b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80066b6:	4b0d      	ldr	r3, [pc, #52]	; (80066ec <std+0x60>)
 80066b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80066ba:	4b0d      	ldr	r3, [pc, #52]	; (80066f0 <std+0x64>)
 80066bc:	6323      	str	r3, [r4, #48]	; 0x30
 80066be:	4b0d      	ldr	r3, [pc, #52]	; (80066f4 <std+0x68>)
 80066c0:	6224      	str	r4, [r4, #32]
 80066c2:	429c      	cmp	r4, r3
 80066c4:	d006      	beq.n	80066d4 <std+0x48>
 80066c6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80066ca:	4294      	cmp	r4, r2
 80066cc:	d002      	beq.n	80066d4 <std+0x48>
 80066ce:	33d0      	adds	r3, #208	; 0xd0
 80066d0:	429c      	cmp	r4, r3
 80066d2:	d105      	bne.n	80066e0 <std+0x54>
 80066d4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80066d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066dc:	f000 b9e4 	b.w	8006aa8 <__retarget_lock_init_recursive>
 80066e0:	bd10      	pop	{r4, pc}
 80066e2:	bf00      	nop
 80066e4:	08006879 	.word	0x08006879
 80066e8:	0800689b 	.word	0x0800689b
 80066ec:	080068d3 	.word	0x080068d3
 80066f0:	080068f7 	.word	0x080068f7
 80066f4:	20000348 	.word	0x20000348

080066f8 <stdio_exit_handler>:
 80066f8:	4a02      	ldr	r2, [pc, #8]	; (8006704 <stdio_exit_handler+0xc>)
 80066fa:	4903      	ldr	r1, [pc, #12]	; (8006708 <stdio_exit_handler+0x10>)
 80066fc:	4803      	ldr	r0, [pc, #12]	; (800670c <stdio_exit_handler+0x14>)
 80066fe:	f000 b869 	b.w	80067d4 <_fwalk_sglue>
 8006702:	bf00      	nop
 8006704:	200000c8 	.word	0x200000c8
 8006708:	080073c9 	.word	0x080073c9
 800670c:	200000d4 	.word	0x200000d4

08006710 <cleanup_stdio>:
 8006710:	6841      	ldr	r1, [r0, #4]
 8006712:	4b0c      	ldr	r3, [pc, #48]	; (8006744 <cleanup_stdio+0x34>)
 8006714:	4299      	cmp	r1, r3
 8006716:	b510      	push	{r4, lr}
 8006718:	4604      	mov	r4, r0
 800671a:	d001      	beq.n	8006720 <cleanup_stdio+0x10>
 800671c:	f000 fe54 	bl	80073c8 <_fflush_r>
 8006720:	68a1      	ldr	r1, [r4, #8]
 8006722:	4b09      	ldr	r3, [pc, #36]	; (8006748 <cleanup_stdio+0x38>)
 8006724:	4299      	cmp	r1, r3
 8006726:	d002      	beq.n	800672e <cleanup_stdio+0x1e>
 8006728:	4620      	mov	r0, r4
 800672a:	f000 fe4d 	bl	80073c8 <_fflush_r>
 800672e:	68e1      	ldr	r1, [r4, #12]
 8006730:	4b06      	ldr	r3, [pc, #24]	; (800674c <cleanup_stdio+0x3c>)
 8006732:	4299      	cmp	r1, r3
 8006734:	d004      	beq.n	8006740 <cleanup_stdio+0x30>
 8006736:	4620      	mov	r0, r4
 8006738:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800673c:	f000 be44 	b.w	80073c8 <_fflush_r>
 8006740:	bd10      	pop	{r4, pc}
 8006742:	bf00      	nop
 8006744:	20000348 	.word	0x20000348
 8006748:	200003b0 	.word	0x200003b0
 800674c:	20000418 	.word	0x20000418

08006750 <global_stdio_init.part.0>:
 8006750:	b510      	push	{r4, lr}
 8006752:	4b0b      	ldr	r3, [pc, #44]	; (8006780 <global_stdio_init.part.0+0x30>)
 8006754:	4c0b      	ldr	r4, [pc, #44]	; (8006784 <global_stdio_init.part.0+0x34>)
 8006756:	4a0c      	ldr	r2, [pc, #48]	; (8006788 <global_stdio_init.part.0+0x38>)
 8006758:	601a      	str	r2, [r3, #0]
 800675a:	4620      	mov	r0, r4
 800675c:	2200      	movs	r2, #0
 800675e:	2104      	movs	r1, #4
 8006760:	f7ff ff94 	bl	800668c <std>
 8006764:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8006768:	2201      	movs	r2, #1
 800676a:	2109      	movs	r1, #9
 800676c:	f7ff ff8e 	bl	800668c <std>
 8006770:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8006774:	2202      	movs	r2, #2
 8006776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800677a:	2112      	movs	r1, #18
 800677c:	f7ff bf86 	b.w	800668c <std>
 8006780:	20000480 	.word	0x20000480
 8006784:	20000348 	.word	0x20000348
 8006788:	080066f9 	.word	0x080066f9

0800678c <__sfp_lock_acquire>:
 800678c:	4801      	ldr	r0, [pc, #4]	; (8006794 <__sfp_lock_acquire+0x8>)
 800678e:	f000 b98c 	b.w	8006aaa <__retarget_lock_acquire_recursive>
 8006792:	bf00      	nop
 8006794:	20000489 	.word	0x20000489

08006798 <__sfp_lock_release>:
 8006798:	4801      	ldr	r0, [pc, #4]	; (80067a0 <__sfp_lock_release+0x8>)
 800679a:	f000 b987 	b.w	8006aac <__retarget_lock_release_recursive>
 800679e:	bf00      	nop
 80067a0:	20000489 	.word	0x20000489

080067a4 <__sinit>:
 80067a4:	b510      	push	{r4, lr}
 80067a6:	4604      	mov	r4, r0
 80067a8:	f7ff fff0 	bl	800678c <__sfp_lock_acquire>
 80067ac:	6a23      	ldr	r3, [r4, #32]
 80067ae:	b11b      	cbz	r3, 80067b8 <__sinit+0x14>
 80067b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067b4:	f7ff bff0 	b.w	8006798 <__sfp_lock_release>
 80067b8:	4b04      	ldr	r3, [pc, #16]	; (80067cc <__sinit+0x28>)
 80067ba:	6223      	str	r3, [r4, #32]
 80067bc:	4b04      	ldr	r3, [pc, #16]	; (80067d0 <__sinit+0x2c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d1f5      	bne.n	80067b0 <__sinit+0xc>
 80067c4:	f7ff ffc4 	bl	8006750 <global_stdio_init.part.0>
 80067c8:	e7f2      	b.n	80067b0 <__sinit+0xc>
 80067ca:	bf00      	nop
 80067cc:	08006711 	.word	0x08006711
 80067d0:	20000480 	.word	0x20000480

080067d4 <_fwalk_sglue>:
 80067d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067d8:	4607      	mov	r7, r0
 80067da:	4688      	mov	r8, r1
 80067dc:	4614      	mov	r4, r2
 80067de:	2600      	movs	r6, #0
 80067e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80067e4:	f1b9 0901 	subs.w	r9, r9, #1
 80067e8:	d505      	bpl.n	80067f6 <_fwalk_sglue+0x22>
 80067ea:	6824      	ldr	r4, [r4, #0]
 80067ec:	2c00      	cmp	r4, #0
 80067ee:	d1f7      	bne.n	80067e0 <_fwalk_sglue+0xc>
 80067f0:	4630      	mov	r0, r6
 80067f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067f6:	89ab      	ldrh	r3, [r5, #12]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d907      	bls.n	800680c <_fwalk_sglue+0x38>
 80067fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006800:	3301      	adds	r3, #1
 8006802:	d003      	beq.n	800680c <_fwalk_sglue+0x38>
 8006804:	4629      	mov	r1, r5
 8006806:	4638      	mov	r0, r7
 8006808:	47c0      	blx	r8
 800680a:	4306      	orrs	r6, r0
 800680c:	3568      	adds	r5, #104	; 0x68
 800680e:	e7e9      	b.n	80067e4 <_fwalk_sglue+0x10>

08006810 <sniprintf>:
 8006810:	b40c      	push	{r2, r3}
 8006812:	b530      	push	{r4, r5, lr}
 8006814:	4b17      	ldr	r3, [pc, #92]	; (8006874 <sniprintf+0x64>)
 8006816:	1e0c      	subs	r4, r1, #0
 8006818:	681d      	ldr	r5, [r3, #0]
 800681a:	b09d      	sub	sp, #116	; 0x74
 800681c:	da08      	bge.n	8006830 <sniprintf+0x20>
 800681e:	238b      	movs	r3, #139	; 0x8b
 8006820:	602b      	str	r3, [r5, #0]
 8006822:	f04f 30ff 	mov.w	r0, #4294967295
 8006826:	b01d      	add	sp, #116	; 0x74
 8006828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800682c:	b002      	add	sp, #8
 800682e:	4770      	bx	lr
 8006830:	f44f 7302 	mov.w	r3, #520	; 0x208
 8006834:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006838:	bf14      	ite	ne
 800683a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800683e:	4623      	moveq	r3, r4
 8006840:	9304      	str	r3, [sp, #16]
 8006842:	9307      	str	r3, [sp, #28]
 8006844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006848:	9002      	str	r0, [sp, #8]
 800684a:	9006      	str	r0, [sp, #24]
 800684c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006850:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8006852:	ab21      	add	r3, sp, #132	; 0x84
 8006854:	a902      	add	r1, sp, #8
 8006856:	4628      	mov	r0, r5
 8006858:	9301      	str	r3, [sp, #4]
 800685a:	f000 faa1 	bl	8006da0 <_svfiprintf_r>
 800685e:	1c43      	adds	r3, r0, #1
 8006860:	bfbc      	itt	lt
 8006862:	238b      	movlt	r3, #139	; 0x8b
 8006864:	602b      	strlt	r3, [r5, #0]
 8006866:	2c00      	cmp	r4, #0
 8006868:	d0dd      	beq.n	8006826 <sniprintf+0x16>
 800686a:	9b02      	ldr	r3, [sp, #8]
 800686c:	2200      	movs	r2, #0
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	e7d9      	b.n	8006826 <sniprintf+0x16>
 8006872:	bf00      	nop
 8006874:	20000120 	.word	0x20000120

08006878 <__sread>:
 8006878:	b510      	push	{r4, lr}
 800687a:	460c      	mov	r4, r1
 800687c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006880:	f000 f8c4 	bl	8006a0c <_read_r>
 8006884:	2800      	cmp	r0, #0
 8006886:	bfab      	itete	ge
 8006888:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800688a:	89a3      	ldrhlt	r3, [r4, #12]
 800688c:	181b      	addge	r3, r3, r0
 800688e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006892:	bfac      	ite	ge
 8006894:	6563      	strge	r3, [r4, #84]	; 0x54
 8006896:	81a3      	strhlt	r3, [r4, #12]
 8006898:	bd10      	pop	{r4, pc}

0800689a <__swrite>:
 800689a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689e:	461f      	mov	r7, r3
 80068a0:	898b      	ldrh	r3, [r1, #12]
 80068a2:	05db      	lsls	r3, r3, #23
 80068a4:	4605      	mov	r5, r0
 80068a6:	460c      	mov	r4, r1
 80068a8:	4616      	mov	r6, r2
 80068aa:	d505      	bpl.n	80068b8 <__swrite+0x1e>
 80068ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068b0:	2302      	movs	r3, #2
 80068b2:	2200      	movs	r2, #0
 80068b4:	f000 f898 	bl	80069e8 <_lseek_r>
 80068b8:	89a3      	ldrh	r3, [r4, #12]
 80068ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80068c2:	81a3      	strh	r3, [r4, #12]
 80068c4:	4632      	mov	r2, r6
 80068c6:	463b      	mov	r3, r7
 80068c8:	4628      	mov	r0, r5
 80068ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80068ce:	f000 b8af 	b.w	8006a30 <_write_r>

080068d2 <__sseek>:
 80068d2:	b510      	push	{r4, lr}
 80068d4:	460c      	mov	r4, r1
 80068d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068da:	f000 f885 	bl	80069e8 <_lseek_r>
 80068de:	1c43      	adds	r3, r0, #1
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	bf15      	itete	ne
 80068e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80068e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80068ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068ee:	81a3      	strheq	r3, [r4, #12]
 80068f0:	bf18      	it	ne
 80068f2:	81a3      	strhne	r3, [r4, #12]
 80068f4:	bd10      	pop	{r4, pc}

080068f6 <__sclose>:
 80068f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068fa:	f000 b865 	b.w	80069c8 <_close_r>

080068fe <memset>:
 80068fe:	4402      	add	r2, r0
 8006900:	4603      	mov	r3, r0
 8006902:	4293      	cmp	r3, r2
 8006904:	d100      	bne.n	8006908 <memset+0xa>
 8006906:	4770      	bx	lr
 8006908:	f803 1b01 	strb.w	r1, [r3], #1
 800690c:	e7f9      	b.n	8006902 <memset+0x4>
	...

08006910 <strtok>:
 8006910:	4b16      	ldr	r3, [pc, #88]	; (800696c <strtok+0x5c>)
 8006912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006914:	681e      	ldr	r6, [r3, #0]
 8006916:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8006918:	4605      	mov	r5, r0
 800691a:	b9fc      	cbnz	r4, 800695c <strtok+0x4c>
 800691c:	2050      	movs	r0, #80	; 0x50
 800691e:	9101      	str	r1, [sp, #4]
 8006920:	f000 f930 	bl	8006b84 <malloc>
 8006924:	9901      	ldr	r1, [sp, #4]
 8006926:	6470      	str	r0, [r6, #68]	; 0x44
 8006928:	4602      	mov	r2, r0
 800692a:	b920      	cbnz	r0, 8006936 <strtok+0x26>
 800692c:	4b10      	ldr	r3, [pc, #64]	; (8006970 <strtok+0x60>)
 800692e:	4811      	ldr	r0, [pc, #68]	; (8006974 <strtok+0x64>)
 8006930:	215b      	movs	r1, #91	; 0x5b
 8006932:	f000 f8bd 	bl	8006ab0 <__assert_func>
 8006936:	e9c0 4400 	strd	r4, r4, [r0]
 800693a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800693e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8006942:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8006946:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800694a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800694e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8006952:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8006956:	6184      	str	r4, [r0, #24]
 8006958:	7704      	strb	r4, [r0, #28]
 800695a:	6244      	str	r4, [r0, #36]	; 0x24
 800695c:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800695e:	2301      	movs	r3, #1
 8006960:	4628      	mov	r0, r5
 8006962:	b002      	add	sp, #8
 8006964:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006968:	f000 b806 	b.w	8006978 <__strtok_r>
 800696c:	20000120 	.word	0x20000120
 8006970:	08007d19 	.word	0x08007d19
 8006974:	08007d30 	.word	0x08007d30

08006978 <__strtok_r>:
 8006978:	b5f0      	push	{r4, r5, r6, r7, lr}
 800697a:	b908      	cbnz	r0, 8006980 <__strtok_r+0x8>
 800697c:	6810      	ldr	r0, [r2, #0]
 800697e:	b188      	cbz	r0, 80069a4 <__strtok_r+0x2c>
 8006980:	4604      	mov	r4, r0
 8006982:	4620      	mov	r0, r4
 8006984:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006988:	460f      	mov	r7, r1
 800698a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800698e:	b91e      	cbnz	r6, 8006998 <__strtok_r+0x20>
 8006990:	b965      	cbnz	r5, 80069ac <__strtok_r+0x34>
 8006992:	6015      	str	r5, [r2, #0]
 8006994:	4628      	mov	r0, r5
 8006996:	e005      	b.n	80069a4 <__strtok_r+0x2c>
 8006998:	42b5      	cmp	r5, r6
 800699a:	d1f6      	bne.n	800698a <__strtok_r+0x12>
 800699c:	2b00      	cmp	r3, #0
 800699e:	d1f0      	bne.n	8006982 <__strtok_r+0xa>
 80069a0:	6014      	str	r4, [r2, #0]
 80069a2:	7003      	strb	r3, [r0, #0]
 80069a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069a6:	461c      	mov	r4, r3
 80069a8:	e00c      	b.n	80069c4 <__strtok_r+0x4c>
 80069aa:	b915      	cbnz	r5, 80069b2 <__strtok_r+0x3a>
 80069ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069b0:	460e      	mov	r6, r1
 80069b2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80069b6:	42ab      	cmp	r3, r5
 80069b8:	d1f7      	bne.n	80069aa <__strtok_r+0x32>
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d0f3      	beq.n	80069a6 <__strtok_r+0x2e>
 80069be:	2300      	movs	r3, #0
 80069c0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80069c4:	6014      	str	r4, [r2, #0]
 80069c6:	e7ed      	b.n	80069a4 <__strtok_r+0x2c>

080069c8 <_close_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	4d06      	ldr	r5, [pc, #24]	; (80069e4 <_close_r+0x1c>)
 80069cc:	2300      	movs	r3, #0
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	602b      	str	r3, [r5, #0]
 80069d4:	f7fa fadd 	bl	8000f92 <_close>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_close_r+0x1a>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_close_r+0x1a>
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	20000484 	.word	0x20000484

080069e8 <_lseek_r>:
 80069e8:	b538      	push	{r3, r4, r5, lr}
 80069ea:	4d07      	ldr	r5, [pc, #28]	; (8006a08 <_lseek_r+0x20>)
 80069ec:	4604      	mov	r4, r0
 80069ee:	4608      	mov	r0, r1
 80069f0:	4611      	mov	r1, r2
 80069f2:	2200      	movs	r2, #0
 80069f4:	602a      	str	r2, [r5, #0]
 80069f6:	461a      	mov	r2, r3
 80069f8:	f7fa faf2 	bl	8000fe0 <_lseek>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	d102      	bne.n	8006a06 <_lseek_r+0x1e>
 8006a00:	682b      	ldr	r3, [r5, #0]
 8006a02:	b103      	cbz	r3, 8006a06 <_lseek_r+0x1e>
 8006a04:	6023      	str	r3, [r4, #0]
 8006a06:	bd38      	pop	{r3, r4, r5, pc}
 8006a08:	20000484 	.word	0x20000484

08006a0c <_read_r>:
 8006a0c:	b538      	push	{r3, r4, r5, lr}
 8006a0e:	4d07      	ldr	r5, [pc, #28]	; (8006a2c <_read_r+0x20>)
 8006a10:	4604      	mov	r4, r0
 8006a12:	4608      	mov	r0, r1
 8006a14:	4611      	mov	r1, r2
 8006a16:	2200      	movs	r2, #0
 8006a18:	602a      	str	r2, [r5, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	f7fa fa80 	bl	8000f20 <_read>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_read_r+0x1e>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_read_r+0x1e>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000484 	.word	0x20000484

08006a30 <_write_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	; (8006a50 <_write_r+0x20>)
 8006a34:	4604      	mov	r4, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fa fa8b 	bl	8000f5a <_write>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_write_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_write_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20000484 	.word	0x20000484

08006a54 <__errno>:
 8006a54:	4b01      	ldr	r3, [pc, #4]	; (8006a5c <__errno+0x8>)
 8006a56:	6818      	ldr	r0, [r3, #0]
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	20000120 	.word	0x20000120

08006a60 <__libc_init_array>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	4d0d      	ldr	r5, [pc, #52]	; (8006a98 <__libc_init_array+0x38>)
 8006a64:	4c0d      	ldr	r4, [pc, #52]	; (8006a9c <__libc_init_array+0x3c>)
 8006a66:	1b64      	subs	r4, r4, r5
 8006a68:	10a4      	asrs	r4, r4, #2
 8006a6a:	2600      	movs	r6, #0
 8006a6c:	42a6      	cmp	r6, r4
 8006a6e:	d109      	bne.n	8006a84 <__libc_init_array+0x24>
 8006a70:	4d0b      	ldr	r5, [pc, #44]	; (8006aa0 <__libc_init_array+0x40>)
 8006a72:	4c0c      	ldr	r4, [pc, #48]	; (8006aa4 <__libc_init_array+0x44>)
 8006a74:	f000 fffa 	bl	8007a6c <_init>
 8006a78:	1b64      	subs	r4, r4, r5
 8006a7a:	10a4      	asrs	r4, r4, #2
 8006a7c:	2600      	movs	r6, #0
 8006a7e:	42a6      	cmp	r6, r4
 8006a80:	d105      	bne.n	8006a8e <__libc_init_array+0x2e>
 8006a82:	bd70      	pop	{r4, r5, r6, pc}
 8006a84:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a88:	4798      	blx	r3
 8006a8a:	3601      	adds	r6, #1
 8006a8c:	e7ee      	b.n	8006a6c <__libc_init_array+0xc>
 8006a8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a92:	4798      	blx	r3
 8006a94:	3601      	adds	r6, #1
 8006a96:	e7f2      	b.n	8006a7e <__libc_init_array+0x1e>
 8006a98:	08007e04 	.word	0x08007e04
 8006a9c:	08007e04 	.word	0x08007e04
 8006aa0:	08007e04 	.word	0x08007e04
 8006aa4:	08007e08 	.word	0x08007e08

08006aa8 <__retarget_lock_init_recursive>:
 8006aa8:	4770      	bx	lr

08006aaa <__retarget_lock_acquire_recursive>:
 8006aaa:	4770      	bx	lr

08006aac <__retarget_lock_release_recursive>:
 8006aac:	4770      	bx	lr
	...

08006ab0 <__assert_func>:
 8006ab0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006ab2:	4614      	mov	r4, r2
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4b09      	ldr	r3, [pc, #36]	; (8006adc <__assert_func+0x2c>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4605      	mov	r5, r0
 8006abc:	68d8      	ldr	r0, [r3, #12]
 8006abe:	b14c      	cbz	r4, 8006ad4 <__assert_func+0x24>
 8006ac0:	4b07      	ldr	r3, [pc, #28]	; (8006ae0 <__assert_func+0x30>)
 8006ac2:	9100      	str	r1, [sp, #0]
 8006ac4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006ac8:	4906      	ldr	r1, [pc, #24]	; (8006ae4 <__assert_func+0x34>)
 8006aca:	462b      	mov	r3, r5
 8006acc:	f000 fca4 	bl	8007418 <fiprintf>
 8006ad0:	f000 fcec 	bl	80074ac <abort>
 8006ad4:	4b04      	ldr	r3, [pc, #16]	; (8006ae8 <__assert_func+0x38>)
 8006ad6:	461c      	mov	r4, r3
 8006ad8:	e7f3      	b.n	8006ac2 <__assert_func+0x12>
 8006ada:	bf00      	nop
 8006adc:	20000120 	.word	0x20000120
 8006ae0:	08007d8a 	.word	0x08007d8a
 8006ae4:	08007d97 	.word	0x08007d97
 8006ae8:	08007dc5 	.word	0x08007dc5

08006aec <_free_r>:
 8006aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006aee:	2900      	cmp	r1, #0
 8006af0:	d044      	beq.n	8006b7c <_free_r+0x90>
 8006af2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006af6:	9001      	str	r0, [sp, #4]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f1a1 0404 	sub.w	r4, r1, #4
 8006afe:	bfb8      	it	lt
 8006b00:	18e4      	addlt	r4, r4, r3
 8006b02:	f000 f8e7 	bl	8006cd4 <__malloc_lock>
 8006b06:	4a1e      	ldr	r2, [pc, #120]	; (8006b80 <_free_r+0x94>)
 8006b08:	9801      	ldr	r0, [sp, #4]
 8006b0a:	6813      	ldr	r3, [r2, #0]
 8006b0c:	b933      	cbnz	r3, 8006b1c <_free_r+0x30>
 8006b0e:	6063      	str	r3, [r4, #4]
 8006b10:	6014      	str	r4, [r2, #0]
 8006b12:	b003      	add	sp, #12
 8006b14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b18:	f000 b8e2 	b.w	8006ce0 <__malloc_unlock>
 8006b1c:	42a3      	cmp	r3, r4
 8006b1e:	d908      	bls.n	8006b32 <_free_r+0x46>
 8006b20:	6825      	ldr	r5, [r4, #0]
 8006b22:	1961      	adds	r1, r4, r5
 8006b24:	428b      	cmp	r3, r1
 8006b26:	bf01      	itttt	eq
 8006b28:	6819      	ldreq	r1, [r3, #0]
 8006b2a:	685b      	ldreq	r3, [r3, #4]
 8006b2c:	1949      	addeq	r1, r1, r5
 8006b2e:	6021      	streq	r1, [r4, #0]
 8006b30:	e7ed      	b.n	8006b0e <_free_r+0x22>
 8006b32:	461a      	mov	r2, r3
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	b10b      	cbz	r3, 8006b3c <_free_r+0x50>
 8006b38:	42a3      	cmp	r3, r4
 8006b3a:	d9fa      	bls.n	8006b32 <_free_r+0x46>
 8006b3c:	6811      	ldr	r1, [r2, #0]
 8006b3e:	1855      	adds	r5, r2, r1
 8006b40:	42a5      	cmp	r5, r4
 8006b42:	d10b      	bne.n	8006b5c <_free_r+0x70>
 8006b44:	6824      	ldr	r4, [r4, #0]
 8006b46:	4421      	add	r1, r4
 8006b48:	1854      	adds	r4, r2, r1
 8006b4a:	42a3      	cmp	r3, r4
 8006b4c:	6011      	str	r1, [r2, #0]
 8006b4e:	d1e0      	bne.n	8006b12 <_free_r+0x26>
 8006b50:	681c      	ldr	r4, [r3, #0]
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	6053      	str	r3, [r2, #4]
 8006b56:	440c      	add	r4, r1
 8006b58:	6014      	str	r4, [r2, #0]
 8006b5a:	e7da      	b.n	8006b12 <_free_r+0x26>
 8006b5c:	d902      	bls.n	8006b64 <_free_r+0x78>
 8006b5e:	230c      	movs	r3, #12
 8006b60:	6003      	str	r3, [r0, #0]
 8006b62:	e7d6      	b.n	8006b12 <_free_r+0x26>
 8006b64:	6825      	ldr	r5, [r4, #0]
 8006b66:	1961      	adds	r1, r4, r5
 8006b68:	428b      	cmp	r3, r1
 8006b6a:	bf04      	itt	eq
 8006b6c:	6819      	ldreq	r1, [r3, #0]
 8006b6e:	685b      	ldreq	r3, [r3, #4]
 8006b70:	6063      	str	r3, [r4, #4]
 8006b72:	bf04      	itt	eq
 8006b74:	1949      	addeq	r1, r1, r5
 8006b76:	6021      	streq	r1, [r4, #0]
 8006b78:	6054      	str	r4, [r2, #4]
 8006b7a:	e7ca      	b.n	8006b12 <_free_r+0x26>
 8006b7c:	b003      	add	sp, #12
 8006b7e:	bd30      	pop	{r4, r5, pc}
 8006b80:	2000048c 	.word	0x2000048c

08006b84 <malloc>:
 8006b84:	4b02      	ldr	r3, [pc, #8]	; (8006b90 <malloc+0xc>)
 8006b86:	4601      	mov	r1, r0
 8006b88:	6818      	ldr	r0, [r3, #0]
 8006b8a:	f000 b823 	b.w	8006bd4 <_malloc_r>
 8006b8e:	bf00      	nop
 8006b90:	20000120 	.word	0x20000120

08006b94 <sbrk_aligned>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	4e0e      	ldr	r6, [pc, #56]	; (8006bd0 <sbrk_aligned+0x3c>)
 8006b98:	460c      	mov	r4, r1
 8006b9a:	6831      	ldr	r1, [r6, #0]
 8006b9c:	4605      	mov	r5, r0
 8006b9e:	b911      	cbnz	r1, 8006ba6 <sbrk_aligned+0x12>
 8006ba0:	f000 fc66 	bl	8007470 <_sbrk_r>
 8006ba4:	6030      	str	r0, [r6, #0]
 8006ba6:	4621      	mov	r1, r4
 8006ba8:	4628      	mov	r0, r5
 8006baa:	f000 fc61 	bl	8007470 <_sbrk_r>
 8006bae:	1c43      	adds	r3, r0, #1
 8006bb0:	d00a      	beq.n	8006bc8 <sbrk_aligned+0x34>
 8006bb2:	1cc4      	adds	r4, r0, #3
 8006bb4:	f024 0403 	bic.w	r4, r4, #3
 8006bb8:	42a0      	cmp	r0, r4
 8006bba:	d007      	beq.n	8006bcc <sbrk_aligned+0x38>
 8006bbc:	1a21      	subs	r1, r4, r0
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	f000 fc56 	bl	8007470 <_sbrk_r>
 8006bc4:	3001      	adds	r0, #1
 8006bc6:	d101      	bne.n	8006bcc <sbrk_aligned+0x38>
 8006bc8:	f04f 34ff 	mov.w	r4, #4294967295
 8006bcc:	4620      	mov	r0, r4
 8006bce:	bd70      	pop	{r4, r5, r6, pc}
 8006bd0:	20000490 	.word	0x20000490

08006bd4 <_malloc_r>:
 8006bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd8:	1ccd      	adds	r5, r1, #3
 8006bda:	f025 0503 	bic.w	r5, r5, #3
 8006bde:	3508      	adds	r5, #8
 8006be0:	2d0c      	cmp	r5, #12
 8006be2:	bf38      	it	cc
 8006be4:	250c      	movcc	r5, #12
 8006be6:	2d00      	cmp	r5, #0
 8006be8:	4607      	mov	r7, r0
 8006bea:	db01      	blt.n	8006bf0 <_malloc_r+0x1c>
 8006bec:	42a9      	cmp	r1, r5
 8006bee:	d905      	bls.n	8006bfc <_malloc_r+0x28>
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	603b      	str	r3, [r7, #0]
 8006bf4:	2600      	movs	r6, #0
 8006bf6:	4630      	mov	r0, r6
 8006bf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006cd0 <_malloc_r+0xfc>
 8006c00:	f000 f868 	bl	8006cd4 <__malloc_lock>
 8006c04:	f8d8 3000 	ldr.w	r3, [r8]
 8006c08:	461c      	mov	r4, r3
 8006c0a:	bb5c      	cbnz	r4, 8006c64 <_malloc_r+0x90>
 8006c0c:	4629      	mov	r1, r5
 8006c0e:	4638      	mov	r0, r7
 8006c10:	f7ff ffc0 	bl	8006b94 <sbrk_aligned>
 8006c14:	1c43      	adds	r3, r0, #1
 8006c16:	4604      	mov	r4, r0
 8006c18:	d155      	bne.n	8006cc6 <_malloc_r+0xf2>
 8006c1a:	f8d8 4000 	ldr.w	r4, [r8]
 8006c1e:	4626      	mov	r6, r4
 8006c20:	2e00      	cmp	r6, #0
 8006c22:	d145      	bne.n	8006cb0 <_malloc_r+0xdc>
 8006c24:	2c00      	cmp	r4, #0
 8006c26:	d048      	beq.n	8006cba <_malloc_r+0xe6>
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	4638      	mov	r0, r7
 8006c2e:	eb04 0903 	add.w	r9, r4, r3
 8006c32:	f000 fc1d 	bl	8007470 <_sbrk_r>
 8006c36:	4581      	cmp	r9, r0
 8006c38:	d13f      	bne.n	8006cba <_malloc_r+0xe6>
 8006c3a:	6821      	ldr	r1, [r4, #0]
 8006c3c:	1a6d      	subs	r5, r5, r1
 8006c3e:	4629      	mov	r1, r5
 8006c40:	4638      	mov	r0, r7
 8006c42:	f7ff ffa7 	bl	8006b94 <sbrk_aligned>
 8006c46:	3001      	adds	r0, #1
 8006c48:	d037      	beq.n	8006cba <_malloc_r+0xe6>
 8006c4a:	6823      	ldr	r3, [r4, #0]
 8006c4c:	442b      	add	r3, r5
 8006c4e:	6023      	str	r3, [r4, #0]
 8006c50:	f8d8 3000 	ldr.w	r3, [r8]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d038      	beq.n	8006cca <_malloc_r+0xf6>
 8006c58:	685a      	ldr	r2, [r3, #4]
 8006c5a:	42a2      	cmp	r2, r4
 8006c5c:	d12b      	bne.n	8006cb6 <_malloc_r+0xe2>
 8006c5e:	2200      	movs	r2, #0
 8006c60:	605a      	str	r2, [r3, #4]
 8006c62:	e00f      	b.n	8006c84 <_malloc_r+0xb0>
 8006c64:	6822      	ldr	r2, [r4, #0]
 8006c66:	1b52      	subs	r2, r2, r5
 8006c68:	d41f      	bmi.n	8006caa <_malloc_r+0xd6>
 8006c6a:	2a0b      	cmp	r2, #11
 8006c6c:	d917      	bls.n	8006c9e <_malloc_r+0xca>
 8006c6e:	1961      	adds	r1, r4, r5
 8006c70:	42a3      	cmp	r3, r4
 8006c72:	6025      	str	r5, [r4, #0]
 8006c74:	bf18      	it	ne
 8006c76:	6059      	strne	r1, [r3, #4]
 8006c78:	6863      	ldr	r3, [r4, #4]
 8006c7a:	bf08      	it	eq
 8006c7c:	f8c8 1000 	streq.w	r1, [r8]
 8006c80:	5162      	str	r2, [r4, r5]
 8006c82:	604b      	str	r3, [r1, #4]
 8006c84:	4638      	mov	r0, r7
 8006c86:	f104 060b 	add.w	r6, r4, #11
 8006c8a:	f000 f829 	bl	8006ce0 <__malloc_unlock>
 8006c8e:	f026 0607 	bic.w	r6, r6, #7
 8006c92:	1d23      	adds	r3, r4, #4
 8006c94:	1af2      	subs	r2, r6, r3
 8006c96:	d0ae      	beq.n	8006bf6 <_malloc_r+0x22>
 8006c98:	1b9b      	subs	r3, r3, r6
 8006c9a:	50a3      	str	r3, [r4, r2]
 8006c9c:	e7ab      	b.n	8006bf6 <_malloc_r+0x22>
 8006c9e:	42a3      	cmp	r3, r4
 8006ca0:	6862      	ldr	r2, [r4, #4]
 8006ca2:	d1dd      	bne.n	8006c60 <_malloc_r+0x8c>
 8006ca4:	f8c8 2000 	str.w	r2, [r8]
 8006ca8:	e7ec      	b.n	8006c84 <_malloc_r+0xb0>
 8006caa:	4623      	mov	r3, r4
 8006cac:	6864      	ldr	r4, [r4, #4]
 8006cae:	e7ac      	b.n	8006c0a <_malloc_r+0x36>
 8006cb0:	4634      	mov	r4, r6
 8006cb2:	6876      	ldr	r6, [r6, #4]
 8006cb4:	e7b4      	b.n	8006c20 <_malloc_r+0x4c>
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	e7cc      	b.n	8006c54 <_malloc_r+0x80>
 8006cba:	230c      	movs	r3, #12
 8006cbc:	603b      	str	r3, [r7, #0]
 8006cbe:	4638      	mov	r0, r7
 8006cc0:	f000 f80e 	bl	8006ce0 <__malloc_unlock>
 8006cc4:	e797      	b.n	8006bf6 <_malloc_r+0x22>
 8006cc6:	6025      	str	r5, [r4, #0]
 8006cc8:	e7dc      	b.n	8006c84 <_malloc_r+0xb0>
 8006cca:	605b      	str	r3, [r3, #4]
 8006ccc:	deff      	udf	#255	; 0xff
 8006cce:	bf00      	nop
 8006cd0:	2000048c 	.word	0x2000048c

08006cd4 <__malloc_lock>:
 8006cd4:	4801      	ldr	r0, [pc, #4]	; (8006cdc <__malloc_lock+0x8>)
 8006cd6:	f7ff bee8 	b.w	8006aaa <__retarget_lock_acquire_recursive>
 8006cda:	bf00      	nop
 8006cdc:	20000488 	.word	0x20000488

08006ce0 <__malloc_unlock>:
 8006ce0:	4801      	ldr	r0, [pc, #4]	; (8006ce8 <__malloc_unlock+0x8>)
 8006ce2:	f7ff bee3 	b.w	8006aac <__retarget_lock_release_recursive>
 8006ce6:	bf00      	nop
 8006ce8:	20000488 	.word	0x20000488

08006cec <__ssputs_r>:
 8006cec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cf0:	688e      	ldr	r6, [r1, #8]
 8006cf2:	461f      	mov	r7, r3
 8006cf4:	42be      	cmp	r6, r7
 8006cf6:	680b      	ldr	r3, [r1, #0]
 8006cf8:	4682      	mov	sl, r0
 8006cfa:	460c      	mov	r4, r1
 8006cfc:	4690      	mov	r8, r2
 8006cfe:	d82c      	bhi.n	8006d5a <__ssputs_r+0x6e>
 8006d00:	898a      	ldrh	r2, [r1, #12]
 8006d02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d06:	d026      	beq.n	8006d56 <__ssputs_r+0x6a>
 8006d08:	6965      	ldr	r5, [r4, #20]
 8006d0a:	6909      	ldr	r1, [r1, #16]
 8006d0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d10:	eba3 0901 	sub.w	r9, r3, r1
 8006d14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006d18:	1c7b      	adds	r3, r7, #1
 8006d1a:	444b      	add	r3, r9
 8006d1c:	106d      	asrs	r5, r5, #1
 8006d1e:	429d      	cmp	r5, r3
 8006d20:	bf38      	it	cc
 8006d22:	461d      	movcc	r5, r3
 8006d24:	0553      	lsls	r3, r2, #21
 8006d26:	d527      	bpl.n	8006d78 <__ssputs_r+0x8c>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	f7ff ff53 	bl	8006bd4 <_malloc_r>
 8006d2e:	4606      	mov	r6, r0
 8006d30:	b360      	cbz	r0, 8006d8c <__ssputs_r+0xa0>
 8006d32:	6921      	ldr	r1, [r4, #16]
 8006d34:	464a      	mov	r2, r9
 8006d36:	f000 fbab 	bl	8007490 <memcpy>
 8006d3a:	89a3      	ldrh	r3, [r4, #12]
 8006d3c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d44:	81a3      	strh	r3, [r4, #12]
 8006d46:	6126      	str	r6, [r4, #16]
 8006d48:	6165      	str	r5, [r4, #20]
 8006d4a:	444e      	add	r6, r9
 8006d4c:	eba5 0509 	sub.w	r5, r5, r9
 8006d50:	6026      	str	r6, [r4, #0]
 8006d52:	60a5      	str	r5, [r4, #8]
 8006d54:	463e      	mov	r6, r7
 8006d56:	42be      	cmp	r6, r7
 8006d58:	d900      	bls.n	8006d5c <__ssputs_r+0x70>
 8006d5a:	463e      	mov	r6, r7
 8006d5c:	6820      	ldr	r0, [r4, #0]
 8006d5e:	4632      	mov	r2, r6
 8006d60:	4641      	mov	r1, r8
 8006d62:	f000 fb6b 	bl	800743c <memmove>
 8006d66:	68a3      	ldr	r3, [r4, #8]
 8006d68:	1b9b      	subs	r3, r3, r6
 8006d6a:	60a3      	str	r3, [r4, #8]
 8006d6c:	6823      	ldr	r3, [r4, #0]
 8006d6e:	4433      	add	r3, r6
 8006d70:	6023      	str	r3, [r4, #0]
 8006d72:	2000      	movs	r0, #0
 8006d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d78:	462a      	mov	r2, r5
 8006d7a:	f000 fb9e 	bl	80074ba <_realloc_r>
 8006d7e:	4606      	mov	r6, r0
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d1e0      	bne.n	8006d46 <__ssputs_r+0x5a>
 8006d84:	6921      	ldr	r1, [r4, #16]
 8006d86:	4650      	mov	r0, sl
 8006d88:	f7ff feb0 	bl	8006aec <_free_r>
 8006d8c:	230c      	movs	r3, #12
 8006d8e:	f8ca 3000 	str.w	r3, [sl]
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d9e:	e7e9      	b.n	8006d74 <__ssputs_r+0x88>

08006da0 <_svfiprintf_r>:
 8006da0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006da4:	4698      	mov	r8, r3
 8006da6:	898b      	ldrh	r3, [r1, #12]
 8006da8:	061b      	lsls	r3, r3, #24
 8006daa:	b09d      	sub	sp, #116	; 0x74
 8006dac:	4607      	mov	r7, r0
 8006dae:	460d      	mov	r5, r1
 8006db0:	4614      	mov	r4, r2
 8006db2:	d50e      	bpl.n	8006dd2 <_svfiprintf_r+0x32>
 8006db4:	690b      	ldr	r3, [r1, #16]
 8006db6:	b963      	cbnz	r3, 8006dd2 <_svfiprintf_r+0x32>
 8006db8:	2140      	movs	r1, #64	; 0x40
 8006dba:	f7ff ff0b 	bl	8006bd4 <_malloc_r>
 8006dbe:	6028      	str	r0, [r5, #0]
 8006dc0:	6128      	str	r0, [r5, #16]
 8006dc2:	b920      	cbnz	r0, 8006dce <_svfiprintf_r+0x2e>
 8006dc4:	230c      	movs	r3, #12
 8006dc6:	603b      	str	r3, [r7, #0]
 8006dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dcc:	e0d0      	b.n	8006f70 <_svfiprintf_r+0x1d0>
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	616b      	str	r3, [r5, #20]
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	9309      	str	r3, [sp, #36]	; 0x24
 8006dd6:	2320      	movs	r3, #32
 8006dd8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ddc:	f8cd 800c 	str.w	r8, [sp, #12]
 8006de0:	2330      	movs	r3, #48	; 0x30
 8006de2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006f88 <_svfiprintf_r+0x1e8>
 8006de6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006dea:	f04f 0901 	mov.w	r9, #1
 8006dee:	4623      	mov	r3, r4
 8006df0:	469a      	mov	sl, r3
 8006df2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006df6:	b10a      	cbz	r2, 8006dfc <_svfiprintf_r+0x5c>
 8006df8:	2a25      	cmp	r2, #37	; 0x25
 8006dfa:	d1f9      	bne.n	8006df0 <_svfiprintf_r+0x50>
 8006dfc:	ebba 0b04 	subs.w	fp, sl, r4
 8006e00:	d00b      	beq.n	8006e1a <_svfiprintf_r+0x7a>
 8006e02:	465b      	mov	r3, fp
 8006e04:	4622      	mov	r2, r4
 8006e06:	4629      	mov	r1, r5
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7ff ff6f 	bl	8006cec <__ssputs_r>
 8006e0e:	3001      	adds	r0, #1
 8006e10:	f000 80a9 	beq.w	8006f66 <_svfiprintf_r+0x1c6>
 8006e14:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e16:	445a      	add	r2, fp
 8006e18:	9209      	str	r2, [sp, #36]	; 0x24
 8006e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f000 80a1 	beq.w	8006f66 <_svfiprintf_r+0x1c6>
 8006e24:	2300      	movs	r3, #0
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e2e:	f10a 0a01 	add.w	sl, sl, #1
 8006e32:	9304      	str	r3, [sp, #16]
 8006e34:	9307      	str	r3, [sp, #28]
 8006e36:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e3a:	931a      	str	r3, [sp, #104]	; 0x68
 8006e3c:	4654      	mov	r4, sl
 8006e3e:	2205      	movs	r2, #5
 8006e40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e44:	4850      	ldr	r0, [pc, #320]	; (8006f88 <_svfiprintf_r+0x1e8>)
 8006e46:	f7f9 fa03 	bl	8000250 <memchr>
 8006e4a:	9a04      	ldr	r2, [sp, #16]
 8006e4c:	b9d8      	cbnz	r0, 8006e86 <_svfiprintf_r+0xe6>
 8006e4e:	06d0      	lsls	r0, r2, #27
 8006e50:	bf44      	itt	mi
 8006e52:	2320      	movmi	r3, #32
 8006e54:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e58:	0711      	lsls	r1, r2, #28
 8006e5a:	bf44      	itt	mi
 8006e5c:	232b      	movmi	r3, #43	; 0x2b
 8006e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006e62:	f89a 3000 	ldrb.w	r3, [sl]
 8006e66:	2b2a      	cmp	r3, #42	; 0x2a
 8006e68:	d015      	beq.n	8006e96 <_svfiprintf_r+0xf6>
 8006e6a:	9a07      	ldr	r2, [sp, #28]
 8006e6c:	4654      	mov	r4, sl
 8006e6e:	2000      	movs	r0, #0
 8006e70:	f04f 0c0a 	mov.w	ip, #10
 8006e74:	4621      	mov	r1, r4
 8006e76:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e7a:	3b30      	subs	r3, #48	; 0x30
 8006e7c:	2b09      	cmp	r3, #9
 8006e7e:	d94d      	bls.n	8006f1c <_svfiprintf_r+0x17c>
 8006e80:	b1b0      	cbz	r0, 8006eb0 <_svfiprintf_r+0x110>
 8006e82:	9207      	str	r2, [sp, #28]
 8006e84:	e014      	b.n	8006eb0 <_svfiprintf_r+0x110>
 8006e86:	eba0 0308 	sub.w	r3, r0, r8
 8006e8a:	fa09 f303 	lsl.w	r3, r9, r3
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	46a2      	mov	sl, r4
 8006e94:	e7d2      	b.n	8006e3c <_svfiprintf_r+0x9c>
 8006e96:	9b03      	ldr	r3, [sp, #12]
 8006e98:	1d19      	adds	r1, r3, #4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	9103      	str	r1, [sp, #12]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	bfbb      	ittet	lt
 8006ea2:	425b      	neglt	r3, r3
 8006ea4:	f042 0202 	orrlt.w	r2, r2, #2
 8006ea8:	9307      	strge	r3, [sp, #28]
 8006eaa:	9307      	strlt	r3, [sp, #28]
 8006eac:	bfb8      	it	lt
 8006eae:	9204      	strlt	r2, [sp, #16]
 8006eb0:	7823      	ldrb	r3, [r4, #0]
 8006eb2:	2b2e      	cmp	r3, #46	; 0x2e
 8006eb4:	d10c      	bne.n	8006ed0 <_svfiprintf_r+0x130>
 8006eb6:	7863      	ldrb	r3, [r4, #1]
 8006eb8:	2b2a      	cmp	r3, #42	; 0x2a
 8006eba:	d134      	bne.n	8006f26 <_svfiprintf_r+0x186>
 8006ebc:	9b03      	ldr	r3, [sp, #12]
 8006ebe:	1d1a      	adds	r2, r3, #4
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	9203      	str	r2, [sp, #12]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	bfb8      	it	lt
 8006ec8:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ecc:	3402      	adds	r4, #2
 8006ece:	9305      	str	r3, [sp, #20]
 8006ed0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006f98 <_svfiprintf_r+0x1f8>
 8006ed4:	7821      	ldrb	r1, [r4, #0]
 8006ed6:	2203      	movs	r2, #3
 8006ed8:	4650      	mov	r0, sl
 8006eda:	f7f9 f9b9 	bl	8000250 <memchr>
 8006ede:	b138      	cbz	r0, 8006ef0 <_svfiprintf_r+0x150>
 8006ee0:	9b04      	ldr	r3, [sp, #16]
 8006ee2:	eba0 000a 	sub.w	r0, r0, sl
 8006ee6:	2240      	movs	r2, #64	; 0x40
 8006ee8:	4082      	lsls	r2, r0
 8006eea:	4313      	orrs	r3, r2
 8006eec:	3401      	adds	r4, #1
 8006eee:	9304      	str	r3, [sp, #16]
 8006ef0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ef4:	4825      	ldr	r0, [pc, #148]	; (8006f8c <_svfiprintf_r+0x1ec>)
 8006ef6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006efa:	2206      	movs	r2, #6
 8006efc:	f7f9 f9a8 	bl	8000250 <memchr>
 8006f00:	2800      	cmp	r0, #0
 8006f02:	d038      	beq.n	8006f76 <_svfiprintf_r+0x1d6>
 8006f04:	4b22      	ldr	r3, [pc, #136]	; (8006f90 <_svfiprintf_r+0x1f0>)
 8006f06:	bb1b      	cbnz	r3, 8006f50 <_svfiprintf_r+0x1b0>
 8006f08:	9b03      	ldr	r3, [sp, #12]
 8006f0a:	3307      	adds	r3, #7
 8006f0c:	f023 0307 	bic.w	r3, r3, #7
 8006f10:	3308      	adds	r3, #8
 8006f12:	9303      	str	r3, [sp, #12]
 8006f14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f16:	4433      	add	r3, r6
 8006f18:	9309      	str	r3, [sp, #36]	; 0x24
 8006f1a:	e768      	b.n	8006dee <_svfiprintf_r+0x4e>
 8006f1c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006f20:	460c      	mov	r4, r1
 8006f22:	2001      	movs	r0, #1
 8006f24:	e7a6      	b.n	8006e74 <_svfiprintf_r+0xd4>
 8006f26:	2300      	movs	r3, #0
 8006f28:	3401      	adds	r4, #1
 8006f2a:	9305      	str	r3, [sp, #20]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f04f 0c0a 	mov.w	ip, #10
 8006f32:	4620      	mov	r0, r4
 8006f34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f38:	3a30      	subs	r2, #48	; 0x30
 8006f3a:	2a09      	cmp	r2, #9
 8006f3c:	d903      	bls.n	8006f46 <_svfiprintf_r+0x1a6>
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d0c6      	beq.n	8006ed0 <_svfiprintf_r+0x130>
 8006f42:	9105      	str	r1, [sp, #20]
 8006f44:	e7c4      	b.n	8006ed0 <_svfiprintf_r+0x130>
 8006f46:	fb0c 2101 	mla	r1, ip, r1, r2
 8006f4a:	4604      	mov	r4, r0
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	e7f0      	b.n	8006f32 <_svfiprintf_r+0x192>
 8006f50:	ab03      	add	r3, sp, #12
 8006f52:	9300      	str	r3, [sp, #0]
 8006f54:	462a      	mov	r2, r5
 8006f56:	4b0f      	ldr	r3, [pc, #60]	; (8006f94 <_svfiprintf_r+0x1f4>)
 8006f58:	a904      	add	r1, sp, #16
 8006f5a:	4638      	mov	r0, r7
 8006f5c:	f3af 8000 	nop.w
 8006f60:	1c42      	adds	r2, r0, #1
 8006f62:	4606      	mov	r6, r0
 8006f64:	d1d6      	bne.n	8006f14 <_svfiprintf_r+0x174>
 8006f66:	89ab      	ldrh	r3, [r5, #12]
 8006f68:	065b      	lsls	r3, r3, #25
 8006f6a:	f53f af2d 	bmi.w	8006dc8 <_svfiprintf_r+0x28>
 8006f6e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f70:	b01d      	add	sp, #116	; 0x74
 8006f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f76:	ab03      	add	r3, sp, #12
 8006f78:	9300      	str	r3, [sp, #0]
 8006f7a:	462a      	mov	r2, r5
 8006f7c:	4b05      	ldr	r3, [pc, #20]	; (8006f94 <_svfiprintf_r+0x1f4>)
 8006f7e:	a904      	add	r1, sp, #16
 8006f80:	4638      	mov	r0, r7
 8006f82:	f000 f879 	bl	8007078 <_printf_i>
 8006f86:	e7eb      	b.n	8006f60 <_svfiprintf_r+0x1c0>
 8006f88:	08007dc6 	.word	0x08007dc6
 8006f8c:	08007dd0 	.word	0x08007dd0
 8006f90:	00000000 	.word	0x00000000
 8006f94:	08006ced 	.word	0x08006ced
 8006f98:	08007dcc 	.word	0x08007dcc

08006f9c <_printf_common>:
 8006f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006fa0:	4616      	mov	r6, r2
 8006fa2:	4699      	mov	r9, r3
 8006fa4:	688a      	ldr	r2, [r1, #8]
 8006fa6:	690b      	ldr	r3, [r1, #16]
 8006fa8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006fac:	4293      	cmp	r3, r2
 8006fae:	bfb8      	it	lt
 8006fb0:	4613      	movlt	r3, r2
 8006fb2:	6033      	str	r3, [r6, #0]
 8006fb4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006fb8:	4607      	mov	r7, r0
 8006fba:	460c      	mov	r4, r1
 8006fbc:	b10a      	cbz	r2, 8006fc2 <_printf_common+0x26>
 8006fbe:	3301      	adds	r3, #1
 8006fc0:	6033      	str	r3, [r6, #0]
 8006fc2:	6823      	ldr	r3, [r4, #0]
 8006fc4:	0699      	lsls	r1, r3, #26
 8006fc6:	bf42      	ittt	mi
 8006fc8:	6833      	ldrmi	r3, [r6, #0]
 8006fca:	3302      	addmi	r3, #2
 8006fcc:	6033      	strmi	r3, [r6, #0]
 8006fce:	6825      	ldr	r5, [r4, #0]
 8006fd0:	f015 0506 	ands.w	r5, r5, #6
 8006fd4:	d106      	bne.n	8006fe4 <_printf_common+0x48>
 8006fd6:	f104 0a19 	add.w	sl, r4, #25
 8006fda:	68e3      	ldr	r3, [r4, #12]
 8006fdc:	6832      	ldr	r2, [r6, #0]
 8006fde:	1a9b      	subs	r3, r3, r2
 8006fe0:	42ab      	cmp	r3, r5
 8006fe2:	dc26      	bgt.n	8007032 <_printf_common+0x96>
 8006fe4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006fe8:	1e13      	subs	r3, r2, #0
 8006fea:	6822      	ldr	r2, [r4, #0]
 8006fec:	bf18      	it	ne
 8006fee:	2301      	movne	r3, #1
 8006ff0:	0692      	lsls	r2, r2, #26
 8006ff2:	d42b      	bmi.n	800704c <_printf_common+0xb0>
 8006ff4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ff8:	4649      	mov	r1, r9
 8006ffa:	4638      	mov	r0, r7
 8006ffc:	47c0      	blx	r8
 8006ffe:	3001      	adds	r0, #1
 8007000:	d01e      	beq.n	8007040 <_printf_common+0xa4>
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	6922      	ldr	r2, [r4, #16]
 8007006:	f003 0306 	and.w	r3, r3, #6
 800700a:	2b04      	cmp	r3, #4
 800700c:	bf02      	ittt	eq
 800700e:	68e5      	ldreq	r5, [r4, #12]
 8007010:	6833      	ldreq	r3, [r6, #0]
 8007012:	1aed      	subeq	r5, r5, r3
 8007014:	68a3      	ldr	r3, [r4, #8]
 8007016:	bf0c      	ite	eq
 8007018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800701c:	2500      	movne	r5, #0
 800701e:	4293      	cmp	r3, r2
 8007020:	bfc4      	itt	gt
 8007022:	1a9b      	subgt	r3, r3, r2
 8007024:	18ed      	addgt	r5, r5, r3
 8007026:	2600      	movs	r6, #0
 8007028:	341a      	adds	r4, #26
 800702a:	42b5      	cmp	r5, r6
 800702c:	d11a      	bne.n	8007064 <_printf_common+0xc8>
 800702e:	2000      	movs	r0, #0
 8007030:	e008      	b.n	8007044 <_printf_common+0xa8>
 8007032:	2301      	movs	r3, #1
 8007034:	4652      	mov	r2, sl
 8007036:	4649      	mov	r1, r9
 8007038:	4638      	mov	r0, r7
 800703a:	47c0      	blx	r8
 800703c:	3001      	adds	r0, #1
 800703e:	d103      	bne.n	8007048 <_printf_common+0xac>
 8007040:	f04f 30ff 	mov.w	r0, #4294967295
 8007044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007048:	3501      	adds	r5, #1
 800704a:	e7c6      	b.n	8006fda <_printf_common+0x3e>
 800704c:	18e1      	adds	r1, r4, r3
 800704e:	1c5a      	adds	r2, r3, #1
 8007050:	2030      	movs	r0, #48	; 0x30
 8007052:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007056:	4422      	add	r2, r4
 8007058:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800705c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007060:	3302      	adds	r3, #2
 8007062:	e7c7      	b.n	8006ff4 <_printf_common+0x58>
 8007064:	2301      	movs	r3, #1
 8007066:	4622      	mov	r2, r4
 8007068:	4649      	mov	r1, r9
 800706a:	4638      	mov	r0, r7
 800706c:	47c0      	blx	r8
 800706e:	3001      	adds	r0, #1
 8007070:	d0e6      	beq.n	8007040 <_printf_common+0xa4>
 8007072:	3601      	adds	r6, #1
 8007074:	e7d9      	b.n	800702a <_printf_common+0x8e>
	...

08007078 <_printf_i>:
 8007078:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800707c:	7e0f      	ldrb	r7, [r1, #24]
 800707e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007080:	2f78      	cmp	r7, #120	; 0x78
 8007082:	4691      	mov	r9, r2
 8007084:	4680      	mov	r8, r0
 8007086:	460c      	mov	r4, r1
 8007088:	469a      	mov	sl, r3
 800708a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800708e:	d807      	bhi.n	80070a0 <_printf_i+0x28>
 8007090:	2f62      	cmp	r7, #98	; 0x62
 8007092:	d80a      	bhi.n	80070aa <_printf_i+0x32>
 8007094:	2f00      	cmp	r7, #0
 8007096:	f000 80d4 	beq.w	8007242 <_printf_i+0x1ca>
 800709a:	2f58      	cmp	r7, #88	; 0x58
 800709c:	f000 80c0 	beq.w	8007220 <_printf_i+0x1a8>
 80070a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80070a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80070a8:	e03a      	b.n	8007120 <_printf_i+0xa8>
 80070aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80070ae:	2b15      	cmp	r3, #21
 80070b0:	d8f6      	bhi.n	80070a0 <_printf_i+0x28>
 80070b2:	a101      	add	r1, pc, #4	; (adr r1, 80070b8 <_printf_i+0x40>)
 80070b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80070b8:	08007111 	.word	0x08007111
 80070bc:	08007125 	.word	0x08007125
 80070c0:	080070a1 	.word	0x080070a1
 80070c4:	080070a1 	.word	0x080070a1
 80070c8:	080070a1 	.word	0x080070a1
 80070cc:	080070a1 	.word	0x080070a1
 80070d0:	08007125 	.word	0x08007125
 80070d4:	080070a1 	.word	0x080070a1
 80070d8:	080070a1 	.word	0x080070a1
 80070dc:	080070a1 	.word	0x080070a1
 80070e0:	080070a1 	.word	0x080070a1
 80070e4:	08007229 	.word	0x08007229
 80070e8:	08007151 	.word	0x08007151
 80070ec:	080071e3 	.word	0x080071e3
 80070f0:	080070a1 	.word	0x080070a1
 80070f4:	080070a1 	.word	0x080070a1
 80070f8:	0800724b 	.word	0x0800724b
 80070fc:	080070a1 	.word	0x080070a1
 8007100:	08007151 	.word	0x08007151
 8007104:	080070a1 	.word	0x080070a1
 8007108:	080070a1 	.word	0x080070a1
 800710c:	080071eb 	.word	0x080071eb
 8007110:	682b      	ldr	r3, [r5, #0]
 8007112:	1d1a      	adds	r2, r3, #4
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	602a      	str	r2, [r5, #0]
 8007118:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800711c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007120:	2301      	movs	r3, #1
 8007122:	e09f      	b.n	8007264 <_printf_i+0x1ec>
 8007124:	6820      	ldr	r0, [r4, #0]
 8007126:	682b      	ldr	r3, [r5, #0]
 8007128:	0607      	lsls	r7, r0, #24
 800712a:	f103 0104 	add.w	r1, r3, #4
 800712e:	6029      	str	r1, [r5, #0]
 8007130:	d501      	bpl.n	8007136 <_printf_i+0xbe>
 8007132:	681e      	ldr	r6, [r3, #0]
 8007134:	e003      	b.n	800713e <_printf_i+0xc6>
 8007136:	0646      	lsls	r6, r0, #25
 8007138:	d5fb      	bpl.n	8007132 <_printf_i+0xba>
 800713a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800713e:	2e00      	cmp	r6, #0
 8007140:	da03      	bge.n	800714a <_printf_i+0xd2>
 8007142:	232d      	movs	r3, #45	; 0x2d
 8007144:	4276      	negs	r6, r6
 8007146:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800714a:	485a      	ldr	r0, [pc, #360]	; (80072b4 <_printf_i+0x23c>)
 800714c:	230a      	movs	r3, #10
 800714e:	e012      	b.n	8007176 <_printf_i+0xfe>
 8007150:	682b      	ldr	r3, [r5, #0]
 8007152:	6820      	ldr	r0, [r4, #0]
 8007154:	1d19      	adds	r1, r3, #4
 8007156:	6029      	str	r1, [r5, #0]
 8007158:	0605      	lsls	r5, r0, #24
 800715a:	d501      	bpl.n	8007160 <_printf_i+0xe8>
 800715c:	681e      	ldr	r6, [r3, #0]
 800715e:	e002      	b.n	8007166 <_printf_i+0xee>
 8007160:	0641      	lsls	r1, r0, #25
 8007162:	d5fb      	bpl.n	800715c <_printf_i+0xe4>
 8007164:	881e      	ldrh	r6, [r3, #0]
 8007166:	4853      	ldr	r0, [pc, #332]	; (80072b4 <_printf_i+0x23c>)
 8007168:	2f6f      	cmp	r7, #111	; 0x6f
 800716a:	bf0c      	ite	eq
 800716c:	2308      	moveq	r3, #8
 800716e:	230a      	movne	r3, #10
 8007170:	2100      	movs	r1, #0
 8007172:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007176:	6865      	ldr	r5, [r4, #4]
 8007178:	60a5      	str	r5, [r4, #8]
 800717a:	2d00      	cmp	r5, #0
 800717c:	bfa2      	ittt	ge
 800717e:	6821      	ldrge	r1, [r4, #0]
 8007180:	f021 0104 	bicge.w	r1, r1, #4
 8007184:	6021      	strge	r1, [r4, #0]
 8007186:	b90e      	cbnz	r6, 800718c <_printf_i+0x114>
 8007188:	2d00      	cmp	r5, #0
 800718a:	d04b      	beq.n	8007224 <_printf_i+0x1ac>
 800718c:	4615      	mov	r5, r2
 800718e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007192:	fb03 6711 	mls	r7, r3, r1, r6
 8007196:	5dc7      	ldrb	r7, [r0, r7]
 8007198:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800719c:	4637      	mov	r7, r6
 800719e:	42bb      	cmp	r3, r7
 80071a0:	460e      	mov	r6, r1
 80071a2:	d9f4      	bls.n	800718e <_printf_i+0x116>
 80071a4:	2b08      	cmp	r3, #8
 80071a6:	d10b      	bne.n	80071c0 <_printf_i+0x148>
 80071a8:	6823      	ldr	r3, [r4, #0]
 80071aa:	07de      	lsls	r6, r3, #31
 80071ac:	d508      	bpl.n	80071c0 <_printf_i+0x148>
 80071ae:	6923      	ldr	r3, [r4, #16]
 80071b0:	6861      	ldr	r1, [r4, #4]
 80071b2:	4299      	cmp	r1, r3
 80071b4:	bfde      	ittt	le
 80071b6:	2330      	movle	r3, #48	; 0x30
 80071b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80071bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80071c0:	1b52      	subs	r2, r2, r5
 80071c2:	6122      	str	r2, [r4, #16]
 80071c4:	f8cd a000 	str.w	sl, [sp]
 80071c8:	464b      	mov	r3, r9
 80071ca:	aa03      	add	r2, sp, #12
 80071cc:	4621      	mov	r1, r4
 80071ce:	4640      	mov	r0, r8
 80071d0:	f7ff fee4 	bl	8006f9c <_printf_common>
 80071d4:	3001      	adds	r0, #1
 80071d6:	d14a      	bne.n	800726e <_printf_i+0x1f6>
 80071d8:	f04f 30ff 	mov.w	r0, #4294967295
 80071dc:	b004      	add	sp, #16
 80071de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	f043 0320 	orr.w	r3, r3, #32
 80071e8:	6023      	str	r3, [r4, #0]
 80071ea:	4833      	ldr	r0, [pc, #204]	; (80072b8 <_printf_i+0x240>)
 80071ec:	2778      	movs	r7, #120	; 0x78
 80071ee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80071f2:	6823      	ldr	r3, [r4, #0]
 80071f4:	6829      	ldr	r1, [r5, #0]
 80071f6:	061f      	lsls	r7, r3, #24
 80071f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80071fc:	d402      	bmi.n	8007204 <_printf_i+0x18c>
 80071fe:	065f      	lsls	r7, r3, #25
 8007200:	bf48      	it	mi
 8007202:	b2b6      	uxthmi	r6, r6
 8007204:	07df      	lsls	r7, r3, #31
 8007206:	bf48      	it	mi
 8007208:	f043 0320 	orrmi.w	r3, r3, #32
 800720c:	6029      	str	r1, [r5, #0]
 800720e:	bf48      	it	mi
 8007210:	6023      	strmi	r3, [r4, #0]
 8007212:	b91e      	cbnz	r6, 800721c <_printf_i+0x1a4>
 8007214:	6823      	ldr	r3, [r4, #0]
 8007216:	f023 0320 	bic.w	r3, r3, #32
 800721a:	6023      	str	r3, [r4, #0]
 800721c:	2310      	movs	r3, #16
 800721e:	e7a7      	b.n	8007170 <_printf_i+0xf8>
 8007220:	4824      	ldr	r0, [pc, #144]	; (80072b4 <_printf_i+0x23c>)
 8007222:	e7e4      	b.n	80071ee <_printf_i+0x176>
 8007224:	4615      	mov	r5, r2
 8007226:	e7bd      	b.n	80071a4 <_printf_i+0x12c>
 8007228:	682b      	ldr	r3, [r5, #0]
 800722a:	6826      	ldr	r6, [r4, #0]
 800722c:	6961      	ldr	r1, [r4, #20]
 800722e:	1d18      	adds	r0, r3, #4
 8007230:	6028      	str	r0, [r5, #0]
 8007232:	0635      	lsls	r5, r6, #24
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	d501      	bpl.n	800723c <_printf_i+0x1c4>
 8007238:	6019      	str	r1, [r3, #0]
 800723a:	e002      	b.n	8007242 <_printf_i+0x1ca>
 800723c:	0670      	lsls	r0, r6, #25
 800723e:	d5fb      	bpl.n	8007238 <_printf_i+0x1c0>
 8007240:	8019      	strh	r1, [r3, #0]
 8007242:	2300      	movs	r3, #0
 8007244:	6123      	str	r3, [r4, #16]
 8007246:	4615      	mov	r5, r2
 8007248:	e7bc      	b.n	80071c4 <_printf_i+0x14c>
 800724a:	682b      	ldr	r3, [r5, #0]
 800724c:	1d1a      	adds	r2, r3, #4
 800724e:	602a      	str	r2, [r5, #0]
 8007250:	681d      	ldr	r5, [r3, #0]
 8007252:	6862      	ldr	r2, [r4, #4]
 8007254:	2100      	movs	r1, #0
 8007256:	4628      	mov	r0, r5
 8007258:	f7f8 fffa 	bl	8000250 <memchr>
 800725c:	b108      	cbz	r0, 8007262 <_printf_i+0x1ea>
 800725e:	1b40      	subs	r0, r0, r5
 8007260:	6060      	str	r0, [r4, #4]
 8007262:	6863      	ldr	r3, [r4, #4]
 8007264:	6123      	str	r3, [r4, #16]
 8007266:	2300      	movs	r3, #0
 8007268:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800726c:	e7aa      	b.n	80071c4 <_printf_i+0x14c>
 800726e:	6923      	ldr	r3, [r4, #16]
 8007270:	462a      	mov	r2, r5
 8007272:	4649      	mov	r1, r9
 8007274:	4640      	mov	r0, r8
 8007276:	47d0      	blx	sl
 8007278:	3001      	adds	r0, #1
 800727a:	d0ad      	beq.n	80071d8 <_printf_i+0x160>
 800727c:	6823      	ldr	r3, [r4, #0]
 800727e:	079b      	lsls	r3, r3, #30
 8007280:	d413      	bmi.n	80072aa <_printf_i+0x232>
 8007282:	68e0      	ldr	r0, [r4, #12]
 8007284:	9b03      	ldr	r3, [sp, #12]
 8007286:	4298      	cmp	r0, r3
 8007288:	bfb8      	it	lt
 800728a:	4618      	movlt	r0, r3
 800728c:	e7a6      	b.n	80071dc <_printf_i+0x164>
 800728e:	2301      	movs	r3, #1
 8007290:	4632      	mov	r2, r6
 8007292:	4649      	mov	r1, r9
 8007294:	4640      	mov	r0, r8
 8007296:	47d0      	blx	sl
 8007298:	3001      	adds	r0, #1
 800729a:	d09d      	beq.n	80071d8 <_printf_i+0x160>
 800729c:	3501      	adds	r5, #1
 800729e:	68e3      	ldr	r3, [r4, #12]
 80072a0:	9903      	ldr	r1, [sp, #12]
 80072a2:	1a5b      	subs	r3, r3, r1
 80072a4:	42ab      	cmp	r3, r5
 80072a6:	dcf2      	bgt.n	800728e <_printf_i+0x216>
 80072a8:	e7eb      	b.n	8007282 <_printf_i+0x20a>
 80072aa:	2500      	movs	r5, #0
 80072ac:	f104 0619 	add.w	r6, r4, #25
 80072b0:	e7f5      	b.n	800729e <_printf_i+0x226>
 80072b2:	bf00      	nop
 80072b4:	08007dd7 	.word	0x08007dd7
 80072b8:	08007de8 	.word	0x08007de8

080072bc <__sflush_r>:
 80072bc:	898a      	ldrh	r2, [r1, #12]
 80072be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c2:	4605      	mov	r5, r0
 80072c4:	0710      	lsls	r0, r2, #28
 80072c6:	460c      	mov	r4, r1
 80072c8:	d458      	bmi.n	800737c <__sflush_r+0xc0>
 80072ca:	684b      	ldr	r3, [r1, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dc05      	bgt.n	80072dc <__sflush_r+0x20>
 80072d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dc02      	bgt.n	80072dc <__sflush_r+0x20>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072de:	2e00      	cmp	r6, #0
 80072e0:	d0f9      	beq.n	80072d6 <__sflush_r+0x1a>
 80072e2:	2300      	movs	r3, #0
 80072e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072e8:	682f      	ldr	r7, [r5, #0]
 80072ea:	6a21      	ldr	r1, [r4, #32]
 80072ec:	602b      	str	r3, [r5, #0]
 80072ee:	d032      	beq.n	8007356 <__sflush_r+0x9a>
 80072f0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072f2:	89a3      	ldrh	r3, [r4, #12]
 80072f4:	075a      	lsls	r2, r3, #29
 80072f6:	d505      	bpl.n	8007304 <__sflush_r+0x48>
 80072f8:	6863      	ldr	r3, [r4, #4]
 80072fa:	1ac0      	subs	r0, r0, r3
 80072fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072fe:	b10b      	cbz	r3, 8007304 <__sflush_r+0x48>
 8007300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007302:	1ac0      	subs	r0, r0, r3
 8007304:	2300      	movs	r3, #0
 8007306:	4602      	mov	r2, r0
 8007308:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800730a:	6a21      	ldr	r1, [r4, #32]
 800730c:	4628      	mov	r0, r5
 800730e:	47b0      	blx	r6
 8007310:	1c43      	adds	r3, r0, #1
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	d106      	bne.n	8007324 <__sflush_r+0x68>
 8007316:	6829      	ldr	r1, [r5, #0]
 8007318:	291d      	cmp	r1, #29
 800731a:	d82b      	bhi.n	8007374 <__sflush_r+0xb8>
 800731c:	4a29      	ldr	r2, [pc, #164]	; (80073c4 <__sflush_r+0x108>)
 800731e:	410a      	asrs	r2, r1
 8007320:	07d6      	lsls	r6, r2, #31
 8007322:	d427      	bmi.n	8007374 <__sflush_r+0xb8>
 8007324:	2200      	movs	r2, #0
 8007326:	6062      	str	r2, [r4, #4]
 8007328:	04d9      	lsls	r1, r3, #19
 800732a:	6922      	ldr	r2, [r4, #16]
 800732c:	6022      	str	r2, [r4, #0]
 800732e:	d504      	bpl.n	800733a <__sflush_r+0x7e>
 8007330:	1c42      	adds	r2, r0, #1
 8007332:	d101      	bne.n	8007338 <__sflush_r+0x7c>
 8007334:	682b      	ldr	r3, [r5, #0]
 8007336:	b903      	cbnz	r3, 800733a <__sflush_r+0x7e>
 8007338:	6560      	str	r0, [r4, #84]	; 0x54
 800733a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800733c:	602f      	str	r7, [r5, #0]
 800733e:	2900      	cmp	r1, #0
 8007340:	d0c9      	beq.n	80072d6 <__sflush_r+0x1a>
 8007342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007346:	4299      	cmp	r1, r3
 8007348:	d002      	beq.n	8007350 <__sflush_r+0x94>
 800734a:	4628      	mov	r0, r5
 800734c:	f7ff fbce 	bl	8006aec <_free_r>
 8007350:	2000      	movs	r0, #0
 8007352:	6360      	str	r0, [r4, #52]	; 0x34
 8007354:	e7c0      	b.n	80072d8 <__sflush_r+0x1c>
 8007356:	2301      	movs	r3, #1
 8007358:	4628      	mov	r0, r5
 800735a:	47b0      	blx	r6
 800735c:	1c41      	adds	r1, r0, #1
 800735e:	d1c8      	bne.n	80072f2 <__sflush_r+0x36>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0c5      	beq.n	80072f2 <__sflush_r+0x36>
 8007366:	2b1d      	cmp	r3, #29
 8007368:	d001      	beq.n	800736e <__sflush_r+0xb2>
 800736a:	2b16      	cmp	r3, #22
 800736c:	d101      	bne.n	8007372 <__sflush_r+0xb6>
 800736e:	602f      	str	r7, [r5, #0]
 8007370:	e7b1      	b.n	80072d6 <__sflush_r+0x1a>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007378:	81a3      	strh	r3, [r4, #12]
 800737a:	e7ad      	b.n	80072d8 <__sflush_r+0x1c>
 800737c:	690f      	ldr	r7, [r1, #16]
 800737e:	2f00      	cmp	r7, #0
 8007380:	d0a9      	beq.n	80072d6 <__sflush_r+0x1a>
 8007382:	0793      	lsls	r3, r2, #30
 8007384:	680e      	ldr	r6, [r1, #0]
 8007386:	bf08      	it	eq
 8007388:	694b      	ldreq	r3, [r1, #20]
 800738a:	600f      	str	r7, [r1, #0]
 800738c:	bf18      	it	ne
 800738e:	2300      	movne	r3, #0
 8007390:	eba6 0807 	sub.w	r8, r6, r7
 8007394:	608b      	str	r3, [r1, #8]
 8007396:	f1b8 0f00 	cmp.w	r8, #0
 800739a:	dd9c      	ble.n	80072d6 <__sflush_r+0x1a>
 800739c:	6a21      	ldr	r1, [r4, #32]
 800739e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073a0:	4643      	mov	r3, r8
 80073a2:	463a      	mov	r2, r7
 80073a4:	4628      	mov	r0, r5
 80073a6:	47b0      	blx	r6
 80073a8:	2800      	cmp	r0, #0
 80073aa:	dc06      	bgt.n	80073ba <__sflush_r+0xfe>
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e78e      	b.n	80072d8 <__sflush_r+0x1c>
 80073ba:	4407      	add	r7, r0
 80073bc:	eba8 0800 	sub.w	r8, r8, r0
 80073c0:	e7e9      	b.n	8007396 <__sflush_r+0xda>
 80073c2:	bf00      	nop
 80073c4:	dfbffffe 	.word	0xdfbffffe

080073c8 <_fflush_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	690b      	ldr	r3, [r1, #16]
 80073cc:	4605      	mov	r5, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	b913      	cbnz	r3, 80073d8 <_fflush_r+0x10>
 80073d2:	2500      	movs	r5, #0
 80073d4:	4628      	mov	r0, r5
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	b118      	cbz	r0, 80073e2 <_fflush_r+0x1a>
 80073da:	6a03      	ldr	r3, [r0, #32]
 80073dc:	b90b      	cbnz	r3, 80073e2 <_fflush_r+0x1a>
 80073de:	f7ff f9e1 	bl	80067a4 <__sinit>
 80073e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d0f3      	beq.n	80073d2 <_fflush_r+0xa>
 80073ea:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073ec:	07d0      	lsls	r0, r2, #31
 80073ee:	d404      	bmi.n	80073fa <_fflush_r+0x32>
 80073f0:	0599      	lsls	r1, r3, #22
 80073f2:	d402      	bmi.n	80073fa <_fflush_r+0x32>
 80073f4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073f6:	f7ff fb58 	bl	8006aaa <__retarget_lock_acquire_recursive>
 80073fa:	4628      	mov	r0, r5
 80073fc:	4621      	mov	r1, r4
 80073fe:	f7ff ff5d 	bl	80072bc <__sflush_r>
 8007402:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007404:	07da      	lsls	r2, r3, #31
 8007406:	4605      	mov	r5, r0
 8007408:	d4e4      	bmi.n	80073d4 <_fflush_r+0xc>
 800740a:	89a3      	ldrh	r3, [r4, #12]
 800740c:	059b      	lsls	r3, r3, #22
 800740e:	d4e1      	bmi.n	80073d4 <_fflush_r+0xc>
 8007410:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007412:	f7ff fb4b 	bl	8006aac <__retarget_lock_release_recursive>
 8007416:	e7dd      	b.n	80073d4 <_fflush_r+0xc>

08007418 <fiprintf>:
 8007418:	b40e      	push	{r1, r2, r3}
 800741a:	b503      	push	{r0, r1, lr}
 800741c:	4601      	mov	r1, r0
 800741e:	ab03      	add	r3, sp, #12
 8007420:	4805      	ldr	r0, [pc, #20]	; (8007438 <fiprintf+0x20>)
 8007422:	f853 2b04 	ldr.w	r2, [r3], #4
 8007426:	6800      	ldr	r0, [r0, #0]
 8007428:	9301      	str	r3, [sp, #4]
 800742a:	f000 f89f 	bl	800756c <_vfiprintf_r>
 800742e:	b002      	add	sp, #8
 8007430:	f85d eb04 	ldr.w	lr, [sp], #4
 8007434:	b003      	add	sp, #12
 8007436:	4770      	bx	lr
 8007438:	20000120 	.word	0x20000120

0800743c <memmove>:
 800743c:	4288      	cmp	r0, r1
 800743e:	b510      	push	{r4, lr}
 8007440:	eb01 0402 	add.w	r4, r1, r2
 8007444:	d902      	bls.n	800744c <memmove+0x10>
 8007446:	4284      	cmp	r4, r0
 8007448:	4623      	mov	r3, r4
 800744a:	d807      	bhi.n	800745c <memmove+0x20>
 800744c:	1e43      	subs	r3, r0, #1
 800744e:	42a1      	cmp	r1, r4
 8007450:	d008      	beq.n	8007464 <memmove+0x28>
 8007452:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007456:	f803 2f01 	strb.w	r2, [r3, #1]!
 800745a:	e7f8      	b.n	800744e <memmove+0x12>
 800745c:	4402      	add	r2, r0
 800745e:	4601      	mov	r1, r0
 8007460:	428a      	cmp	r2, r1
 8007462:	d100      	bne.n	8007466 <memmove+0x2a>
 8007464:	bd10      	pop	{r4, pc}
 8007466:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800746a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800746e:	e7f7      	b.n	8007460 <memmove+0x24>

08007470 <_sbrk_r>:
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4d06      	ldr	r5, [pc, #24]	; (800748c <_sbrk_r+0x1c>)
 8007474:	2300      	movs	r3, #0
 8007476:	4604      	mov	r4, r0
 8007478:	4608      	mov	r0, r1
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	f7f9 fdbe 	bl	8000ffc <_sbrk>
 8007480:	1c43      	adds	r3, r0, #1
 8007482:	d102      	bne.n	800748a <_sbrk_r+0x1a>
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	b103      	cbz	r3, 800748a <_sbrk_r+0x1a>
 8007488:	6023      	str	r3, [r4, #0]
 800748a:	bd38      	pop	{r3, r4, r5, pc}
 800748c:	20000484 	.word	0x20000484

08007490 <memcpy>:
 8007490:	440a      	add	r2, r1
 8007492:	4291      	cmp	r1, r2
 8007494:	f100 33ff 	add.w	r3, r0, #4294967295
 8007498:	d100      	bne.n	800749c <memcpy+0xc>
 800749a:	4770      	bx	lr
 800749c:	b510      	push	{r4, lr}
 800749e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80074a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80074a6:	4291      	cmp	r1, r2
 80074a8:	d1f9      	bne.n	800749e <memcpy+0xe>
 80074aa:	bd10      	pop	{r4, pc}

080074ac <abort>:
 80074ac:	b508      	push	{r3, lr}
 80074ae:	2006      	movs	r0, #6
 80074b0:	f000 fa34 	bl	800791c <raise>
 80074b4:	2001      	movs	r0, #1
 80074b6:	f7f9 fd29 	bl	8000f0c <_exit>

080074ba <_realloc_r>:
 80074ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074be:	4680      	mov	r8, r0
 80074c0:	4614      	mov	r4, r2
 80074c2:	460e      	mov	r6, r1
 80074c4:	b921      	cbnz	r1, 80074d0 <_realloc_r+0x16>
 80074c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074ca:	4611      	mov	r1, r2
 80074cc:	f7ff bb82 	b.w	8006bd4 <_malloc_r>
 80074d0:	b92a      	cbnz	r2, 80074de <_realloc_r+0x24>
 80074d2:	f7ff fb0b 	bl	8006aec <_free_r>
 80074d6:	4625      	mov	r5, r4
 80074d8:	4628      	mov	r0, r5
 80074da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074de:	f000 fa39 	bl	8007954 <_malloc_usable_size_r>
 80074e2:	4284      	cmp	r4, r0
 80074e4:	4607      	mov	r7, r0
 80074e6:	d802      	bhi.n	80074ee <_realloc_r+0x34>
 80074e8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80074ec:	d812      	bhi.n	8007514 <_realloc_r+0x5a>
 80074ee:	4621      	mov	r1, r4
 80074f0:	4640      	mov	r0, r8
 80074f2:	f7ff fb6f 	bl	8006bd4 <_malloc_r>
 80074f6:	4605      	mov	r5, r0
 80074f8:	2800      	cmp	r0, #0
 80074fa:	d0ed      	beq.n	80074d8 <_realloc_r+0x1e>
 80074fc:	42bc      	cmp	r4, r7
 80074fe:	4622      	mov	r2, r4
 8007500:	4631      	mov	r1, r6
 8007502:	bf28      	it	cs
 8007504:	463a      	movcs	r2, r7
 8007506:	f7ff ffc3 	bl	8007490 <memcpy>
 800750a:	4631      	mov	r1, r6
 800750c:	4640      	mov	r0, r8
 800750e:	f7ff faed 	bl	8006aec <_free_r>
 8007512:	e7e1      	b.n	80074d8 <_realloc_r+0x1e>
 8007514:	4635      	mov	r5, r6
 8007516:	e7df      	b.n	80074d8 <_realloc_r+0x1e>

08007518 <__sfputc_r>:
 8007518:	6893      	ldr	r3, [r2, #8]
 800751a:	3b01      	subs	r3, #1
 800751c:	2b00      	cmp	r3, #0
 800751e:	b410      	push	{r4}
 8007520:	6093      	str	r3, [r2, #8]
 8007522:	da08      	bge.n	8007536 <__sfputc_r+0x1e>
 8007524:	6994      	ldr	r4, [r2, #24]
 8007526:	42a3      	cmp	r3, r4
 8007528:	db01      	blt.n	800752e <__sfputc_r+0x16>
 800752a:	290a      	cmp	r1, #10
 800752c:	d103      	bne.n	8007536 <__sfputc_r+0x1e>
 800752e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007532:	f000 b935 	b.w	80077a0 <__swbuf_r>
 8007536:	6813      	ldr	r3, [r2, #0]
 8007538:	1c58      	adds	r0, r3, #1
 800753a:	6010      	str	r0, [r2, #0]
 800753c:	7019      	strb	r1, [r3, #0]
 800753e:	4608      	mov	r0, r1
 8007540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007544:	4770      	bx	lr

08007546 <__sfputs_r>:
 8007546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007548:	4606      	mov	r6, r0
 800754a:	460f      	mov	r7, r1
 800754c:	4614      	mov	r4, r2
 800754e:	18d5      	adds	r5, r2, r3
 8007550:	42ac      	cmp	r4, r5
 8007552:	d101      	bne.n	8007558 <__sfputs_r+0x12>
 8007554:	2000      	movs	r0, #0
 8007556:	e007      	b.n	8007568 <__sfputs_r+0x22>
 8007558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800755c:	463a      	mov	r2, r7
 800755e:	4630      	mov	r0, r6
 8007560:	f7ff ffda 	bl	8007518 <__sfputc_r>
 8007564:	1c43      	adds	r3, r0, #1
 8007566:	d1f3      	bne.n	8007550 <__sfputs_r+0xa>
 8007568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800756c <_vfiprintf_r>:
 800756c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007570:	460d      	mov	r5, r1
 8007572:	b09d      	sub	sp, #116	; 0x74
 8007574:	4614      	mov	r4, r2
 8007576:	4698      	mov	r8, r3
 8007578:	4606      	mov	r6, r0
 800757a:	b118      	cbz	r0, 8007584 <_vfiprintf_r+0x18>
 800757c:	6a03      	ldr	r3, [r0, #32]
 800757e:	b90b      	cbnz	r3, 8007584 <_vfiprintf_r+0x18>
 8007580:	f7ff f910 	bl	80067a4 <__sinit>
 8007584:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007586:	07d9      	lsls	r1, r3, #31
 8007588:	d405      	bmi.n	8007596 <_vfiprintf_r+0x2a>
 800758a:	89ab      	ldrh	r3, [r5, #12]
 800758c:	059a      	lsls	r2, r3, #22
 800758e:	d402      	bmi.n	8007596 <_vfiprintf_r+0x2a>
 8007590:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007592:	f7ff fa8a 	bl	8006aaa <__retarget_lock_acquire_recursive>
 8007596:	89ab      	ldrh	r3, [r5, #12]
 8007598:	071b      	lsls	r3, r3, #28
 800759a:	d501      	bpl.n	80075a0 <_vfiprintf_r+0x34>
 800759c:	692b      	ldr	r3, [r5, #16]
 800759e:	b99b      	cbnz	r3, 80075c8 <_vfiprintf_r+0x5c>
 80075a0:	4629      	mov	r1, r5
 80075a2:	4630      	mov	r0, r6
 80075a4:	f000 f93a 	bl	800781c <__swsetup_r>
 80075a8:	b170      	cbz	r0, 80075c8 <_vfiprintf_r+0x5c>
 80075aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80075ac:	07dc      	lsls	r4, r3, #31
 80075ae:	d504      	bpl.n	80075ba <_vfiprintf_r+0x4e>
 80075b0:	f04f 30ff 	mov.w	r0, #4294967295
 80075b4:	b01d      	add	sp, #116	; 0x74
 80075b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80075ba:	89ab      	ldrh	r3, [r5, #12]
 80075bc:	0598      	lsls	r0, r3, #22
 80075be:	d4f7      	bmi.n	80075b0 <_vfiprintf_r+0x44>
 80075c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075c2:	f7ff fa73 	bl	8006aac <__retarget_lock_release_recursive>
 80075c6:	e7f3      	b.n	80075b0 <_vfiprintf_r+0x44>
 80075c8:	2300      	movs	r3, #0
 80075ca:	9309      	str	r3, [sp, #36]	; 0x24
 80075cc:	2320      	movs	r3, #32
 80075ce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80075d6:	2330      	movs	r3, #48	; 0x30
 80075d8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800778c <_vfiprintf_r+0x220>
 80075dc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075e0:	f04f 0901 	mov.w	r9, #1
 80075e4:	4623      	mov	r3, r4
 80075e6:	469a      	mov	sl, r3
 80075e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075ec:	b10a      	cbz	r2, 80075f2 <_vfiprintf_r+0x86>
 80075ee:	2a25      	cmp	r2, #37	; 0x25
 80075f0:	d1f9      	bne.n	80075e6 <_vfiprintf_r+0x7a>
 80075f2:	ebba 0b04 	subs.w	fp, sl, r4
 80075f6:	d00b      	beq.n	8007610 <_vfiprintf_r+0xa4>
 80075f8:	465b      	mov	r3, fp
 80075fa:	4622      	mov	r2, r4
 80075fc:	4629      	mov	r1, r5
 80075fe:	4630      	mov	r0, r6
 8007600:	f7ff ffa1 	bl	8007546 <__sfputs_r>
 8007604:	3001      	adds	r0, #1
 8007606:	f000 80a9 	beq.w	800775c <_vfiprintf_r+0x1f0>
 800760a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800760c:	445a      	add	r2, fp
 800760e:	9209      	str	r2, [sp, #36]	; 0x24
 8007610:	f89a 3000 	ldrb.w	r3, [sl]
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 80a1 	beq.w	800775c <_vfiprintf_r+0x1f0>
 800761a:	2300      	movs	r3, #0
 800761c:	f04f 32ff 	mov.w	r2, #4294967295
 8007620:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007624:	f10a 0a01 	add.w	sl, sl, #1
 8007628:	9304      	str	r3, [sp, #16]
 800762a:	9307      	str	r3, [sp, #28]
 800762c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007630:	931a      	str	r3, [sp, #104]	; 0x68
 8007632:	4654      	mov	r4, sl
 8007634:	2205      	movs	r2, #5
 8007636:	f814 1b01 	ldrb.w	r1, [r4], #1
 800763a:	4854      	ldr	r0, [pc, #336]	; (800778c <_vfiprintf_r+0x220>)
 800763c:	f7f8 fe08 	bl	8000250 <memchr>
 8007640:	9a04      	ldr	r2, [sp, #16]
 8007642:	b9d8      	cbnz	r0, 800767c <_vfiprintf_r+0x110>
 8007644:	06d1      	lsls	r1, r2, #27
 8007646:	bf44      	itt	mi
 8007648:	2320      	movmi	r3, #32
 800764a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800764e:	0713      	lsls	r3, r2, #28
 8007650:	bf44      	itt	mi
 8007652:	232b      	movmi	r3, #43	; 0x2b
 8007654:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007658:	f89a 3000 	ldrb.w	r3, [sl]
 800765c:	2b2a      	cmp	r3, #42	; 0x2a
 800765e:	d015      	beq.n	800768c <_vfiprintf_r+0x120>
 8007660:	9a07      	ldr	r2, [sp, #28]
 8007662:	4654      	mov	r4, sl
 8007664:	2000      	movs	r0, #0
 8007666:	f04f 0c0a 	mov.w	ip, #10
 800766a:	4621      	mov	r1, r4
 800766c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007670:	3b30      	subs	r3, #48	; 0x30
 8007672:	2b09      	cmp	r3, #9
 8007674:	d94d      	bls.n	8007712 <_vfiprintf_r+0x1a6>
 8007676:	b1b0      	cbz	r0, 80076a6 <_vfiprintf_r+0x13a>
 8007678:	9207      	str	r2, [sp, #28]
 800767a:	e014      	b.n	80076a6 <_vfiprintf_r+0x13a>
 800767c:	eba0 0308 	sub.w	r3, r0, r8
 8007680:	fa09 f303 	lsl.w	r3, r9, r3
 8007684:	4313      	orrs	r3, r2
 8007686:	9304      	str	r3, [sp, #16]
 8007688:	46a2      	mov	sl, r4
 800768a:	e7d2      	b.n	8007632 <_vfiprintf_r+0xc6>
 800768c:	9b03      	ldr	r3, [sp, #12]
 800768e:	1d19      	adds	r1, r3, #4
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	9103      	str	r1, [sp, #12]
 8007694:	2b00      	cmp	r3, #0
 8007696:	bfbb      	ittet	lt
 8007698:	425b      	neglt	r3, r3
 800769a:	f042 0202 	orrlt.w	r2, r2, #2
 800769e:	9307      	strge	r3, [sp, #28]
 80076a0:	9307      	strlt	r3, [sp, #28]
 80076a2:	bfb8      	it	lt
 80076a4:	9204      	strlt	r2, [sp, #16]
 80076a6:	7823      	ldrb	r3, [r4, #0]
 80076a8:	2b2e      	cmp	r3, #46	; 0x2e
 80076aa:	d10c      	bne.n	80076c6 <_vfiprintf_r+0x15a>
 80076ac:	7863      	ldrb	r3, [r4, #1]
 80076ae:	2b2a      	cmp	r3, #42	; 0x2a
 80076b0:	d134      	bne.n	800771c <_vfiprintf_r+0x1b0>
 80076b2:	9b03      	ldr	r3, [sp, #12]
 80076b4:	1d1a      	adds	r2, r3, #4
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	9203      	str	r2, [sp, #12]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	bfb8      	it	lt
 80076be:	f04f 33ff 	movlt.w	r3, #4294967295
 80076c2:	3402      	adds	r4, #2
 80076c4:	9305      	str	r3, [sp, #20]
 80076c6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800779c <_vfiprintf_r+0x230>
 80076ca:	7821      	ldrb	r1, [r4, #0]
 80076cc:	2203      	movs	r2, #3
 80076ce:	4650      	mov	r0, sl
 80076d0:	f7f8 fdbe 	bl	8000250 <memchr>
 80076d4:	b138      	cbz	r0, 80076e6 <_vfiprintf_r+0x17a>
 80076d6:	9b04      	ldr	r3, [sp, #16]
 80076d8:	eba0 000a 	sub.w	r0, r0, sl
 80076dc:	2240      	movs	r2, #64	; 0x40
 80076de:	4082      	lsls	r2, r0
 80076e0:	4313      	orrs	r3, r2
 80076e2:	3401      	adds	r4, #1
 80076e4:	9304      	str	r3, [sp, #16]
 80076e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076ea:	4829      	ldr	r0, [pc, #164]	; (8007790 <_vfiprintf_r+0x224>)
 80076ec:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076f0:	2206      	movs	r2, #6
 80076f2:	f7f8 fdad 	bl	8000250 <memchr>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	d03f      	beq.n	800777a <_vfiprintf_r+0x20e>
 80076fa:	4b26      	ldr	r3, [pc, #152]	; (8007794 <_vfiprintf_r+0x228>)
 80076fc:	bb1b      	cbnz	r3, 8007746 <_vfiprintf_r+0x1da>
 80076fe:	9b03      	ldr	r3, [sp, #12]
 8007700:	3307      	adds	r3, #7
 8007702:	f023 0307 	bic.w	r3, r3, #7
 8007706:	3308      	adds	r3, #8
 8007708:	9303      	str	r3, [sp, #12]
 800770a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800770c:	443b      	add	r3, r7
 800770e:	9309      	str	r3, [sp, #36]	; 0x24
 8007710:	e768      	b.n	80075e4 <_vfiprintf_r+0x78>
 8007712:	fb0c 3202 	mla	r2, ip, r2, r3
 8007716:	460c      	mov	r4, r1
 8007718:	2001      	movs	r0, #1
 800771a:	e7a6      	b.n	800766a <_vfiprintf_r+0xfe>
 800771c:	2300      	movs	r3, #0
 800771e:	3401      	adds	r4, #1
 8007720:	9305      	str	r3, [sp, #20]
 8007722:	4619      	mov	r1, r3
 8007724:	f04f 0c0a 	mov.w	ip, #10
 8007728:	4620      	mov	r0, r4
 800772a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800772e:	3a30      	subs	r2, #48	; 0x30
 8007730:	2a09      	cmp	r2, #9
 8007732:	d903      	bls.n	800773c <_vfiprintf_r+0x1d0>
 8007734:	2b00      	cmp	r3, #0
 8007736:	d0c6      	beq.n	80076c6 <_vfiprintf_r+0x15a>
 8007738:	9105      	str	r1, [sp, #20]
 800773a:	e7c4      	b.n	80076c6 <_vfiprintf_r+0x15a>
 800773c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007740:	4604      	mov	r4, r0
 8007742:	2301      	movs	r3, #1
 8007744:	e7f0      	b.n	8007728 <_vfiprintf_r+0x1bc>
 8007746:	ab03      	add	r3, sp, #12
 8007748:	9300      	str	r3, [sp, #0]
 800774a:	462a      	mov	r2, r5
 800774c:	4b12      	ldr	r3, [pc, #72]	; (8007798 <_vfiprintf_r+0x22c>)
 800774e:	a904      	add	r1, sp, #16
 8007750:	4630      	mov	r0, r6
 8007752:	f3af 8000 	nop.w
 8007756:	4607      	mov	r7, r0
 8007758:	1c78      	adds	r0, r7, #1
 800775a:	d1d6      	bne.n	800770a <_vfiprintf_r+0x19e>
 800775c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800775e:	07d9      	lsls	r1, r3, #31
 8007760:	d405      	bmi.n	800776e <_vfiprintf_r+0x202>
 8007762:	89ab      	ldrh	r3, [r5, #12]
 8007764:	059a      	lsls	r2, r3, #22
 8007766:	d402      	bmi.n	800776e <_vfiprintf_r+0x202>
 8007768:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800776a:	f7ff f99f 	bl	8006aac <__retarget_lock_release_recursive>
 800776e:	89ab      	ldrh	r3, [r5, #12]
 8007770:	065b      	lsls	r3, r3, #25
 8007772:	f53f af1d 	bmi.w	80075b0 <_vfiprintf_r+0x44>
 8007776:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007778:	e71c      	b.n	80075b4 <_vfiprintf_r+0x48>
 800777a:	ab03      	add	r3, sp, #12
 800777c:	9300      	str	r3, [sp, #0]
 800777e:	462a      	mov	r2, r5
 8007780:	4b05      	ldr	r3, [pc, #20]	; (8007798 <_vfiprintf_r+0x22c>)
 8007782:	a904      	add	r1, sp, #16
 8007784:	4630      	mov	r0, r6
 8007786:	f7ff fc77 	bl	8007078 <_printf_i>
 800778a:	e7e4      	b.n	8007756 <_vfiprintf_r+0x1ea>
 800778c:	08007dc6 	.word	0x08007dc6
 8007790:	08007dd0 	.word	0x08007dd0
 8007794:	00000000 	.word	0x00000000
 8007798:	08007547 	.word	0x08007547
 800779c:	08007dcc 	.word	0x08007dcc

080077a0 <__swbuf_r>:
 80077a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077a2:	460e      	mov	r6, r1
 80077a4:	4614      	mov	r4, r2
 80077a6:	4605      	mov	r5, r0
 80077a8:	b118      	cbz	r0, 80077b2 <__swbuf_r+0x12>
 80077aa:	6a03      	ldr	r3, [r0, #32]
 80077ac:	b90b      	cbnz	r3, 80077b2 <__swbuf_r+0x12>
 80077ae:	f7fe fff9 	bl	80067a4 <__sinit>
 80077b2:	69a3      	ldr	r3, [r4, #24]
 80077b4:	60a3      	str	r3, [r4, #8]
 80077b6:	89a3      	ldrh	r3, [r4, #12]
 80077b8:	071a      	lsls	r2, r3, #28
 80077ba:	d525      	bpl.n	8007808 <__swbuf_r+0x68>
 80077bc:	6923      	ldr	r3, [r4, #16]
 80077be:	b31b      	cbz	r3, 8007808 <__swbuf_r+0x68>
 80077c0:	6823      	ldr	r3, [r4, #0]
 80077c2:	6922      	ldr	r2, [r4, #16]
 80077c4:	1a98      	subs	r0, r3, r2
 80077c6:	6963      	ldr	r3, [r4, #20]
 80077c8:	b2f6      	uxtb	r6, r6
 80077ca:	4283      	cmp	r3, r0
 80077cc:	4637      	mov	r7, r6
 80077ce:	dc04      	bgt.n	80077da <__swbuf_r+0x3a>
 80077d0:	4621      	mov	r1, r4
 80077d2:	4628      	mov	r0, r5
 80077d4:	f7ff fdf8 	bl	80073c8 <_fflush_r>
 80077d8:	b9e0      	cbnz	r0, 8007814 <__swbuf_r+0x74>
 80077da:	68a3      	ldr	r3, [r4, #8]
 80077dc:	3b01      	subs	r3, #1
 80077de:	60a3      	str	r3, [r4, #8]
 80077e0:	6823      	ldr	r3, [r4, #0]
 80077e2:	1c5a      	adds	r2, r3, #1
 80077e4:	6022      	str	r2, [r4, #0]
 80077e6:	701e      	strb	r6, [r3, #0]
 80077e8:	6962      	ldr	r2, [r4, #20]
 80077ea:	1c43      	adds	r3, r0, #1
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d004      	beq.n	80077fa <__swbuf_r+0x5a>
 80077f0:	89a3      	ldrh	r3, [r4, #12]
 80077f2:	07db      	lsls	r3, r3, #31
 80077f4:	d506      	bpl.n	8007804 <__swbuf_r+0x64>
 80077f6:	2e0a      	cmp	r6, #10
 80077f8:	d104      	bne.n	8007804 <__swbuf_r+0x64>
 80077fa:	4621      	mov	r1, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	f7ff fde3 	bl	80073c8 <_fflush_r>
 8007802:	b938      	cbnz	r0, 8007814 <__swbuf_r+0x74>
 8007804:	4638      	mov	r0, r7
 8007806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007808:	4621      	mov	r1, r4
 800780a:	4628      	mov	r0, r5
 800780c:	f000 f806 	bl	800781c <__swsetup_r>
 8007810:	2800      	cmp	r0, #0
 8007812:	d0d5      	beq.n	80077c0 <__swbuf_r+0x20>
 8007814:	f04f 37ff 	mov.w	r7, #4294967295
 8007818:	e7f4      	b.n	8007804 <__swbuf_r+0x64>
	...

0800781c <__swsetup_r>:
 800781c:	b538      	push	{r3, r4, r5, lr}
 800781e:	4b2a      	ldr	r3, [pc, #168]	; (80078c8 <__swsetup_r+0xac>)
 8007820:	4605      	mov	r5, r0
 8007822:	6818      	ldr	r0, [r3, #0]
 8007824:	460c      	mov	r4, r1
 8007826:	b118      	cbz	r0, 8007830 <__swsetup_r+0x14>
 8007828:	6a03      	ldr	r3, [r0, #32]
 800782a:	b90b      	cbnz	r3, 8007830 <__swsetup_r+0x14>
 800782c:	f7fe ffba 	bl	80067a4 <__sinit>
 8007830:	89a3      	ldrh	r3, [r4, #12]
 8007832:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007836:	0718      	lsls	r0, r3, #28
 8007838:	d422      	bmi.n	8007880 <__swsetup_r+0x64>
 800783a:	06d9      	lsls	r1, r3, #27
 800783c:	d407      	bmi.n	800784e <__swsetup_r+0x32>
 800783e:	2309      	movs	r3, #9
 8007840:	602b      	str	r3, [r5, #0]
 8007842:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007846:	81a3      	strh	r3, [r4, #12]
 8007848:	f04f 30ff 	mov.w	r0, #4294967295
 800784c:	e034      	b.n	80078b8 <__swsetup_r+0x9c>
 800784e:	0758      	lsls	r0, r3, #29
 8007850:	d512      	bpl.n	8007878 <__swsetup_r+0x5c>
 8007852:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007854:	b141      	cbz	r1, 8007868 <__swsetup_r+0x4c>
 8007856:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800785a:	4299      	cmp	r1, r3
 800785c:	d002      	beq.n	8007864 <__swsetup_r+0x48>
 800785e:	4628      	mov	r0, r5
 8007860:	f7ff f944 	bl	8006aec <_free_r>
 8007864:	2300      	movs	r3, #0
 8007866:	6363      	str	r3, [r4, #52]	; 0x34
 8007868:	89a3      	ldrh	r3, [r4, #12]
 800786a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800786e:	81a3      	strh	r3, [r4, #12]
 8007870:	2300      	movs	r3, #0
 8007872:	6063      	str	r3, [r4, #4]
 8007874:	6923      	ldr	r3, [r4, #16]
 8007876:	6023      	str	r3, [r4, #0]
 8007878:	89a3      	ldrh	r3, [r4, #12]
 800787a:	f043 0308 	orr.w	r3, r3, #8
 800787e:	81a3      	strh	r3, [r4, #12]
 8007880:	6923      	ldr	r3, [r4, #16]
 8007882:	b94b      	cbnz	r3, 8007898 <__swsetup_r+0x7c>
 8007884:	89a3      	ldrh	r3, [r4, #12]
 8007886:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800788a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800788e:	d003      	beq.n	8007898 <__swsetup_r+0x7c>
 8007890:	4621      	mov	r1, r4
 8007892:	4628      	mov	r0, r5
 8007894:	f000 f88c 	bl	80079b0 <__smakebuf_r>
 8007898:	89a0      	ldrh	r0, [r4, #12]
 800789a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800789e:	f010 0301 	ands.w	r3, r0, #1
 80078a2:	d00a      	beq.n	80078ba <__swsetup_r+0x9e>
 80078a4:	2300      	movs	r3, #0
 80078a6:	60a3      	str	r3, [r4, #8]
 80078a8:	6963      	ldr	r3, [r4, #20]
 80078aa:	425b      	negs	r3, r3
 80078ac:	61a3      	str	r3, [r4, #24]
 80078ae:	6923      	ldr	r3, [r4, #16]
 80078b0:	b943      	cbnz	r3, 80078c4 <__swsetup_r+0xa8>
 80078b2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80078b6:	d1c4      	bne.n	8007842 <__swsetup_r+0x26>
 80078b8:	bd38      	pop	{r3, r4, r5, pc}
 80078ba:	0781      	lsls	r1, r0, #30
 80078bc:	bf58      	it	pl
 80078be:	6963      	ldrpl	r3, [r4, #20]
 80078c0:	60a3      	str	r3, [r4, #8]
 80078c2:	e7f4      	b.n	80078ae <__swsetup_r+0x92>
 80078c4:	2000      	movs	r0, #0
 80078c6:	e7f7      	b.n	80078b8 <__swsetup_r+0x9c>
 80078c8:	20000120 	.word	0x20000120

080078cc <_raise_r>:
 80078cc:	291f      	cmp	r1, #31
 80078ce:	b538      	push	{r3, r4, r5, lr}
 80078d0:	4604      	mov	r4, r0
 80078d2:	460d      	mov	r5, r1
 80078d4:	d904      	bls.n	80078e0 <_raise_r+0x14>
 80078d6:	2316      	movs	r3, #22
 80078d8:	6003      	str	r3, [r0, #0]
 80078da:	f04f 30ff 	mov.w	r0, #4294967295
 80078de:	bd38      	pop	{r3, r4, r5, pc}
 80078e0:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80078e2:	b112      	cbz	r2, 80078ea <_raise_r+0x1e>
 80078e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80078e8:	b94b      	cbnz	r3, 80078fe <_raise_r+0x32>
 80078ea:	4620      	mov	r0, r4
 80078ec:	f000 f830 	bl	8007950 <_getpid_r>
 80078f0:	462a      	mov	r2, r5
 80078f2:	4601      	mov	r1, r0
 80078f4:	4620      	mov	r0, r4
 80078f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80078fa:	f000 b817 	b.w	800792c <_kill_r>
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d00a      	beq.n	8007918 <_raise_r+0x4c>
 8007902:	1c59      	adds	r1, r3, #1
 8007904:	d103      	bne.n	800790e <_raise_r+0x42>
 8007906:	2316      	movs	r3, #22
 8007908:	6003      	str	r3, [r0, #0]
 800790a:	2001      	movs	r0, #1
 800790c:	e7e7      	b.n	80078de <_raise_r+0x12>
 800790e:	2400      	movs	r4, #0
 8007910:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007914:	4628      	mov	r0, r5
 8007916:	4798      	blx	r3
 8007918:	2000      	movs	r0, #0
 800791a:	e7e0      	b.n	80078de <_raise_r+0x12>

0800791c <raise>:
 800791c:	4b02      	ldr	r3, [pc, #8]	; (8007928 <raise+0xc>)
 800791e:	4601      	mov	r1, r0
 8007920:	6818      	ldr	r0, [r3, #0]
 8007922:	f7ff bfd3 	b.w	80078cc <_raise_r>
 8007926:	bf00      	nop
 8007928:	20000120 	.word	0x20000120

0800792c <_kill_r>:
 800792c:	b538      	push	{r3, r4, r5, lr}
 800792e:	4d07      	ldr	r5, [pc, #28]	; (800794c <_kill_r+0x20>)
 8007930:	2300      	movs	r3, #0
 8007932:	4604      	mov	r4, r0
 8007934:	4608      	mov	r0, r1
 8007936:	4611      	mov	r1, r2
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	f7f9 fad7 	bl	8000eec <_kill>
 800793e:	1c43      	adds	r3, r0, #1
 8007940:	d102      	bne.n	8007948 <_kill_r+0x1c>
 8007942:	682b      	ldr	r3, [r5, #0]
 8007944:	b103      	cbz	r3, 8007948 <_kill_r+0x1c>
 8007946:	6023      	str	r3, [r4, #0]
 8007948:	bd38      	pop	{r3, r4, r5, pc}
 800794a:	bf00      	nop
 800794c:	20000484 	.word	0x20000484

08007950 <_getpid_r>:
 8007950:	f7f9 bac4 	b.w	8000edc <_getpid>

08007954 <_malloc_usable_size_r>:
 8007954:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007958:	1f18      	subs	r0, r3, #4
 800795a:	2b00      	cmp	r3, #0
 800795c:	bfbc      	itt	lt
 800795e:	580b      	ldrlt	r3, [r1, r0]
 8007960:	18c0      	addlt	r0, r0, r3
 8007962:	4770      	bx	lr

08007964 <__swhatbuf_r>:
 8007964:	b570      	push	{r4, r5, r6, lr}
 8007966:	460c      	mov	r4, r1
 8007968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800796c:	2900      	cmp	r1, #0
 800796e:	b096      	sub	sp, #88	; 0x58
 8007970:	4615      	mov	r5, r2
 8007972:	461e      	mov	r6, r3
 8007974:	da0d      	bge.n	8007992 <__swhatbuf_r+0x2e>
 8007976:	89a3      	ldrh	r3, [r4, #12]
 8007978:	f013 0f80 	tst.w	r3, #128	; 0x80
 800797c:	f04f 0100 	mov.w	r1, #0
 8007980:	bf0c      	ite	eq
 8007982:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8007986:	2340      	movne	r3, #64	; 0x40
 8007988:	2000      	movs	r0, #0
 800798a:	6031      	str	r1, [r6, #0]
 800798c:	602b      	str	r3, [r5, #0]
 800798e:	b016      	add	sp, #88	; 0x58
 8007990:	bd70      	pop	{r4, r5, r6, pc}
 8007992:	466a      	mov	r2, sp
 8007994:	f000 f848 	bl	8007a28 <_fstat_r>
 8007998:	2800      	cmp	r0, #0
 800799a:	dbec      	blt.n	8007976 <__swhatbuf_r+0x12>
 800799c:	9901      	ldr	r1, [sp, #4]
 800799e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80079a2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80079a6:	4259      	negs	r1, r3
 80079a8:	4159      	adcs	r1, r3
 80079aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80079ae:	e7eb      	b.n	8007988 <__swhatbuf_r+0x24>

080079b0 <__smakebuf_r>:
 80079b0:	898b      	ldrh	r3, [r1, #12]
 80079b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80079b4:	079d      	lsls	r5, r3, #30
 80079b6:	4606      	mov	r6, r0
 80079b8:	460c      	mov	r4, r1
 80079ba:	d507      	bpl.n	80079cc <__smakebuf_r+0x1c>
 80079bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	6123      	str	r3, [r4, #16]
 80079c4:	2301      	movs	r3, #1
 80079c6:	6163      	str	r3, [r4, #20]
 80079c8:	b002      	add	sp, #8
 80079ca:	bd70      	pop	{r4, r5, r6, pc}
 80079cc:	ab01      	add	r3, sp, #4
 80079ce:	466a      	mov	r2, sp
 80079d0:	f7ff ffc8 	bl	8007964 <__swhatbuf_r>
 80079d4:	9900      	ldr	r1, [sp, #0]
 80079d6:	4605      	mov	r5, r0
 80079d8:	4630      	mov	r0, r6
 80079da:	f7ff f8fb 	bl	8006bd4 <_malloc_r>
 80079de:	b948      	cbnz	r0, 80079f4 <__smakebuf_r+0x44>
 80079e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80079e4:	059a      	lsls	r2, r3, #22
 80079e6:	d4ef      	bmi.n	80079c8 <__smakebuf_r+0x18>
 80079e8:	f023 0303 	bic.w	r3, r3, #3
 80079ec:	f043 0302 	orr.w	r3, r3, #2
 80079f0:	81a3      	strh	r3, [r4, #12]
 80079f2:	e7e3      	b.n	80079bc <__smakebuf_r+0xc>
 80079f4:	89a3      	ldrh	r3, [r4, #12]
 80079f6:	6020      	str	r0, [r4, #0]
 80079f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80079fc:	81a3      	strh	r3, [r4, #12]
 80079fe:	9b00      	ldr	r3, [sp, #0]
 8007a00:	6163      	str	r3, [r4, #20]
 8007a02:	9b01      	ldr	r3, [sp, #4]
 8007a04:	6120      	str	r0, [r4, #16]
 8007a06:	b15b      	cbz	r3, 8007a20 <__smakebuf_r+0x70>
 8007a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	f000 f81d 	bl	8007a4c <_isatty_r>
 8007a12:	b128      	cbz	r0, 8007a20 <__smakebuf_r+0x70>
 8007a14:	89a3      	ldrh	r3, [r4, #12]
 8007a16:	f023 0303 	bic.w	r3, r3, #3
 8007a1a:	f043 0301 	orr.w	r3, r3, #1
 8007a1e:	81a3      	strh	r3, [r4, #12]
 8007a20:	89a3      	ldrh	r3, [r4, #12]
 8007a22:	431d      	orrs	r5, r3
 8007a24:	81a5      	strh	r5, [r4, #12]
 8007a26:	e7cf      	b.n	80079c8 <__smakebuf_r+0x18>

08007a28 <_fstat_r>:
 8007a28:	b538      	push	{r3, r4, r5, lr}
 8007a2a:	4d07      	ldr	r5, [pc, #28]	; (8007a48 <_fstat_r+0x20>)
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	602b      	str	r3, [r5, #0]
 8007a36:	f7f9 fab8 	bl	8000faa <_fstat>
 8007a3a:	1c43      	adds	r3, r0, #1
 8007a3c:	d102      	bne.n	8007a44 <_fstat_r+0x1c>
 8007a3e:	682b      	ldr	r3, [r5, #0]
 8007a40:	b103      	cbz	r3, 8007a44 <_fstat_r+0x1c>
 8007a42:	6023      	str	r3, [r4, #0]
 8007a44:	bd38      	pop	{r3, r4, r5, pc}
 8007a46:	bf00      	nop
 8007a48:	20000484 	.word	0x20000484

08007a4c <_isatty_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d06      	ldr	r5, [pc, #24]	; (8007a68 <_isatty_r+0x1c>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	602b      	str	r3, [r5, #0]
 8007a58:	f7f9 fab7 	bl	8000fca <_isatty>
 8007a5c:	1c43      	adds	r3, r0, #1
 8007a5e:	d102      	bne.n	8007a66 <_isatty_r+0x1a>
 8007a60:	682b      	ldr	r3, [r5, #0]
 8007a62:	b103      	cbz	r3, 8007a66 <_isatty_r+0x1a>
 8007a64:	6023      	str	r3, [r4, #0]
 8007a66:	bd38      	pop	{r3, r4, r5, pc}
 8007a68:	20000484 	.word	0x20000484

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
